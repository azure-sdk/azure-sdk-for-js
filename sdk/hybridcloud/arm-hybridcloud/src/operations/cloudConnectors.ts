/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { CloudConnectors } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { Hybridcloud } from "../hybridcloud";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  CloudConnectorsGetOptionalParams,
  CloudConnectorsGetResponse,
  CloudConnectorsCreateOrUpdateOptionalParams,
  CloudConnectorsCreateOrUpdateResponse,
  CloudConnectorsDeleteOptionalParams,
  CloudConnectorTagsObject,
  CloudConnectorsUpdateTagsOptionalParams,
  CloudConnectorsUpdateTagsResponse,
  CloudConnectorsDiscoverResourcesOptionalParams,
  CloudConnectorsDiscoverResourcesResponse
} from "../models";

/** Class containing CloudConnectors operations. */
export class CloudConnectorsImpl implements CloudConnectors {
  private readonly client: Hybridcloud;

  /**
   * Initialize a new instance of the class CloudConnectors class.
   * @param client Reference to the service client
   */
  constructor(client: Hybridcloud) {
    this.client = client;
  }

  /**
   * Gets the specified Cloud Connector in a specified resource group
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    options?: CloudConnectorsGetOptionalParams
  ): Promise<CloudConnectorsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      getOperationSpec
    );
  }

  /**
   * Creates or updates a Cloud Connector resource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param location The geo-location where the resource lives
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    location: string,
    options?: CloudConnectorsCreateOrUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<CloudConnectorsCreateOrUpdateResponse>,
      CloudConnectorsCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<CloudConnectorsCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, location, options },
      createOrUpdateOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Creates or updates a Cloud Connector resource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param location The geo-location where the resource lives
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    location: string,
    options?: CloudConnectorsCreateOrUpdateOptionalParams
  ): Promise<CloudConnectorsCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      location,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Deletes a specified Cloud Connector resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    options?: CloudConnectorsDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, options },
      deleteOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Deletes a specified Cloud Connector resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    options?: CloudConnectorsDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(resourceGroupName, options);
    return poller.pollUntilDone();
  }

  /**
   * Updates the specified Cloud Connector tags.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param parameters Parameters supplied to update Cloud Connector tags.
   * @param options The options parameters.
   */
  updateTags(
    resourceGroupName: string,
    parameters: CloudConnectorTagsObject,
    options?: CloudConnectorsUpdateTagsOptionalParams
  ): Promise<CloudConnectorsUpdateTagsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, parameters, options },
      updateTagsOperationSpec
    );
  }

  /**
   * Given the name of a cloud connector find the return a list of the remote cloud resources that are
   * attached to that name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  discoverResources(
    resourceGroupName: string,
    options?: CloudConnectorsDiscoverResourcesOptionalParams
  ): Promise<CloudConnectorsDiscoverResourcesResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      discoverResourcesOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCloud/cloudConnectors/{cloudConnectorName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CloudConnector
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.cloudConnectorName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCloud/cloudConnectors/{cloudConnectorName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.CloudConnector
    },
    201: {
      bodyMapper: Mappers.CloudConnector
    },
    202: {
      bodyMapper: Mappers.CloudConnector
    },
    204: {
      bodyMapper: Mappers.CloudConnector
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: {
    parameterPath: {
      tags: ["options", "tags"],
      location: ["location"],
      identity: ["options", "identity"],
      tenantUri: ["options", "tenantUri"],
      applicationId: ["options", "applicationId"],
      clientSecret: ["options", "clientSecret"],
      cloudConnections: ["options", "cloudConnections"]
    },
    mapper: { ...Mappers.CloudConnector, required: true }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.cloudConnectorName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCloud/cloudConnectors/{cloudConnectorName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.cloudConnectorName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateTagsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCloud/cloudConnectors/{cloudConnectorName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.CloudConnector
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.cloudConnectorName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const discoverResourcesOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCloud/cloudConnectors/{cloudConnectorName}/discoverResources",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DiscoverResources
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.cloudConnectorName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
