/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  AnalysisServicesServer,
  AnalysisServicesServersListByResourceGroupOptionalParams,
  AnalysisServicesServersGetDetailsOptionalParams,
  AnalysisServicesServersGetDetailsResponse,
  AnalysisServicesServersCreateOptionalParams,
  AnalysisServicesServersCreateResponse,
  AnalysisServicesServerUpdate,
  AnalysisServicesServersUpdateOptionalParams,
  AnalysisServicesServersUpdateResponse,
  AnalysisServicesServersDeleteOptionalParams,
  AnalysisServicesServersDissociateGatewayOptionalParams,
  AnalysisServicesServersDissociateGatewayResponse,
  AnalysisServicesServersListGatewayStatusOptionalParams,
  AnalysisServicesServersListGatewayStatusResponse,
  AnalysisServicesServersResumeOptionalParams,
  AnalysisServicesServersResumeResponse,
  AnalysisServicesServersListSkusForExistingOptionalParams,
  AnalysisServicesServersListSkusForExistingResponse,
  AnalysisServicesServersSuspendOptionalParams,
  AnalysisServicesServersSuspendResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a AnalysisServicesServers. */
export interface AnalysisServicesServers {
  /**
   * Gets all the Analysis Services servers for the given resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: AnalysisServicesServersListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<AnalysisServicesServer>;
  /**
   * Gets details about the specified Analysis Services server.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serverName The name of the Analysis Services server. It must be a minimum of 3 characters,
   *                   and a maximum of 63.
   * @param options The options parameters.
   */
  getDetails(
    resourceGroupName: string,
    serverName: string,
    options?: AnalysisServicesServersGetDetailsOptionalParams
  ): Promise<AnalysisServicesServersGetDetailsResponse>;
  /**
   * Provisions the specified Analysis Services server based on the configuration specified in the
   * request.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serverName The name of the Analysis Services server. It must be a minimum of 3 characters,
   *                   and a maximum of 63.
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  beginCreate(
    resourceGroupName: string,
    serverName: string,
    resource: AnalysisServicesServer,
    options?: AnalysisServicesServersCreateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<AnalysisServicesServersCreateResponse>,
      AnalysisServicesServersCreateResponse
    >
  >;
  /**
   * Provisions the specified Analysis Services server based on the configuration specified in the
   * request.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serverName The name of the Analysis Services server. It must be a minimum of 3 characters,
   *                   and a maximum of 63.
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  beginCreateAndWait(
    resourceGroupName: string,
    serverName: string,
    resource: AnalysisServicesServer,
    options?: AnalysisServicesServersCreateOptionalParams
  ): Promise<AnalysisServicesServersCreateResponse>;
  /**
   * Updates the current state of the specified Analysis Services server.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serverName The name of the Analysis Services server. It must be a minimum of 3 characters,
   *                   and a maximum of 63.
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    serverName: string,
    properties: AnalysisServicesServerUpdate,
    options?: AnalysisServicesServersUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<AnalysisServicesServersUpdateResponse>,
      AnalysisServicesServersUpdateResponse
    >
  >;
  /**
   * Updates the current state of the specified Analysis Services server.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serverName The name of the Analysis Services server. It must be a minimum of 3 characters,
   *                   and a maximum of 63.
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    serverName: string,
    properties: AnalysisServicesServerUpdate,
    options?: AnalysisServicesServersUpdateOptionalParams
  ): Promise<AnalysisServicesServersUpdateResponse>;
  /**
   * Deletes the specified Analysis Services server.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serverName The name of the Analysis Services server. It must be a minimum of 3 characters,
   *                   and a maximum of 63.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    serverName: string,
    options?: AnalysisServicesServersDeleteOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Deletes the specified Analysis Services server.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serverName The name of the Analysis Services server. It must be a minimum of 3 characters,
   *                   and a maximum of 63.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    serverName: string,
    options?: AnalysisServicesServersDeleteOptionalParams
  ): Promise<void>;
  /**
   * Dissociates a Unified Gateway associated with the server.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serverName The name of the Analysis Services server. It must be a minimum of 3 characters,
   *                   and a maximum of 63.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  dissociateGateway(
    resourceGroupName: string,
    serverName: string,
    body: Record<string, unknown>,
    options?: AnalysisServicesServersDissociateGatewayOptionalParams
  ): Promise<AnalysisServicesServersDissociateGatewayResponse>;
  /**
   * Return the gateway status of the specified Analysis Services server instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serverName The name of the Analysis Services server. It must be a minimum of 3 characters,
   *                   and a maximum of 63.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  listGatewayStatus(
    resourceGroupName: string,
    serverName: string,
    body: Record<string, unknown>,
    options?: AnalysisServicesServersListGatewayStatusOptionalParams
  ): Promise<AnalysisServicesServersListGatewayStatusResponse>;
  /**
   * Resumes operation of the specified Analysis Services server instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serverName The name of the Analysis Services server. It must be a minimum of 3 characters,
   *                   and a maximum of 63.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  beginResume(
    resourceGroupName: string,
    serverName: string,
    body: Record<string, unknown>,
    options?: AnalysisServicesServersResumeOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<AnalysisServicesServersResumeResponse>,
      AnalysisServicesServersResumeResponse
    >
  >;
  /**
   * Resumes operation of the specified Analysis Services server instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serverName The name of the Analysis Services server. It must be a minimum of 3 characters,
   *                   and a maximum of 63.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  beginResumeAndWait(
    resourceGroupName: string,
    serverName: string,
    body: Record<string, unknown>,
    options?: AnalysisServicesServersResumeOptionalParams
  ): Promise<AnalysisServicesServersResumeResponse>;
  /**
   * Lists eligible SKUs for an Analysis Services resource.
   * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
   *                          server is part. This name must be at least 1 character in length, and no more than 90.
   * @param serverName The name of the Analysis Services server. It must be at least 3 characters in
   *                   length, and no more than 63.
   * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID
   *                       forms part of the URI for every service call.
   * @param options The options parameters.
   */
  listSkusForExisting(
    resourceGroupName: string,
    serverName: string,
    subscriptionId: string,
    options?: AnalysisServicesServersListSkusForExistingOptionalParams
  ): Promise<AnalysisServicesServersListSkusForExistingResponse>;
  /**
   * Suspends operation of the specified Analysis Services server instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serverName The name of the Analysis Services server. It must be a minimum of 3 characters,
   *                   and a maximum of 63.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  beginSuspend(
    resourceGroupName: string,
    serverName: string,
    body: Record<string, unknown>,
    options?: AnalysisServicesServersSuspendOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<AnalysisServicesServersSuspendResponse>,
      AnalysisServicesServersSuspendResponse
    >
  >;
  /**
   * Suspends operation of the specified Analysis Services server instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serverName The name of the Analysis Services server. It must be a minimum of 3 characters,
   *                   and a maximum of 63.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  beginSuspendAndWait(
    resourceGroupName: string,
    serverName: string,
    body: Record<string, unknown>,
    options?: AnalysisServicesServersSuspendOptionalParams
  ): Promise<AnalysisServicesServersSuspendResponse>;
}
