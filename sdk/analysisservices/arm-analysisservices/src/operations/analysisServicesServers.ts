/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { AnalysisServicesServers } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureAnalysisServices } from "../azureAnalysisServices";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  AnalysisServicesServer,
  AnalysisServicesServersListByResourceGroupNextOptionalParams,
  AnalysisServicesServersListByResourceGroupOptionalParams,
  AnalysisServicesServersListByResourceGroupResponse,
  AnalysisServicesServersGetDetailsOptionalParams,
  AnalysisServicesServersGetDetailsResponse,
  AnalysisServicesServersCreateOptionalParams,
  AnalysisServicesServersCreateResponse,
  AnalysisServicesServerUpdate,
  AnalysisServicesServersUpdateOptionalParams,
  AnalysisServicesServersUpdateResponse,
  AnalysisServicesServersDeleteOptionalParams,
  AnalysisServicesServersDissociateGatewayOptionalParams,
  AnalysisServicesServersDissociateGatewayResponse,
  AnalysisServicesServersListGatewayStatusOptionalParams,
  AnalysisServicesServersListGatewayStatusResponse,
  AnalysisServicesServersResumeOptionalParams,
  AnalysisServicesServersResumeResponse,
  AnalysisServicesServersListSkusForExistingOptionalParams,
  AnalysisServicesServersListSkusForExistingResponse,
  AnalysisServicesServersSuspendOptionalParams,
  AnalysisServicesServersSuspendResponse,
  AnalysisServicesServersListByResourceGroupNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing AnalysisServicesServers operations. */
export class AnalysisServicesServersImpl implements AnalysisServicesServers {
  private readonly client: AzureAnalysisServices;

  /**
   * Initialize a new instance of the class AnalysisServicesServers class.
   * @param client Reference to the service client
   */
  constructor(client: AzureAnalysisServices) {
    this.client = client;
  }

  /**
   * Gets all the Analysis Services servers for the given resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: AnalysisServicesServersListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<AnalysisServicesServer> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByResourceGroupPagingPage(
          resourceGroupName,
          options,
          settings
        );
      }
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: AnalysisServicesServersListByResourceGroupOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<AnalysisServicesServer[]> {
    let result: AnalysisServicesServersListByResourceGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByResourceGroup(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: AnalysisServicesServersListByResourceGroupOptionalParams
  ): AsyncIterableIterator<AnalysisServicesServer> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets all the Analysis Services servers for the given resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: AnalysisServicesServersListByResourceGroupOptionalParams
  ): Promise<AnalysisServicesServersListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec
    );
  }

  /**
   * Gets details about the specified Analysis Services server.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serverName The name of the Analysis Services server. It must be a minimum of 3 characters,
   *                   and a maximum of 63.
   * @param options The options parameters.
   */
  getDetails(
    resourceGroupName: string,
    serverName: string,
    options?: AnalysisServicesServersGetDetailsOptionalParams
  ): Promise<AnalysisServicesServersGetDetailsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, serverName, options },
      getDetailsOperationSpec
    );
  }

  /**
   * Provisions the specified Analysis Services server based on the configuration specified in the
   * request.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serverName The name of the Analysis Services server. It must be a minimum of 3 characters,
   *                   and a maximum of 63.
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreate(
    resourceGroupName: string,
    serverName: string,
    resource: AnalysisServicesServer,
    options?: AnalysisServicesServersCreateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<AnalysisServicesServersCreateResponse>,
      AnalysisServicesServersCreateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<AnalysisServicesServersCreateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, serverName, resource, options },
      spec: createOperationSpec
    });
    const poller = await createHttpPoller<
      AnalysisServicesServersCreateResponse,
      OperationState<AnalysisServicesServersCreateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Provisions the specified Analysis Services server based on the configuration specified in the
   * request.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serverName The name of the Analysis Services server. It must be a minimum of 3 characters,
   *                   and a maximum of 63.
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreateAndWait(
    resourceGroupName: string,
    serverName: string,
    resource: AnalysisServicesServer,
    options?: AnalysisServicesServersCreateOptionalParams
  ): Promise<AnalysisServicesServersCreateResponse> {
    const poller = await this.beginCreate(
      resourceGroupName,
      serverName,
      resource,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Updates the current state of the specified Analysis Services server.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serverName The name of the Analysis Services server. It must be a minimum of 3 characters,
   *                   and a maximum of 63.
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    serverName: string,
    properties: AnalysisServicesServerUpdate,
    options?: AnalysisServicesServersUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<AnalysisServicesServersUpdateResponse>,
      AnalysisServicesServersUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<AnalysisServicesServersUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, serverName, properties, options },
      spec: updateOperationSpec
    });
    const poller = await createHttpPoller<
      AnalysisServicesServersUpdateResponse,
      OperationState<AnalysisServicesServersUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Updates the current state of the specified Analysis Services server.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serverName The name of the Analysis Services server. It must be a minimum of 3 characters,
   *                   and a maximum of 63.
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    serverName: string,
    properties: AnalysisServicesServerUpdate,
    options?: AnalysisServicesServersUpdateOptionalParams
  ): Promise<AnalysisServicesServersUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      serverName,
      properties,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Deletes the specified Analysis Services server.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serverName The name of the Analysis Services server. It must be a minimum of 3 characters,
   *                   and a maximum of 63.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    serverName: string,
    options?: AnalysisServicesServersDeleteOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, serverName, options },
      spec: deleteOperationSpec
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Deletes the specified Analysis Services server.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serverName The name of the Analysis Services server. It must be a minimum of 3 characters,
   *                   and a maximum of 63.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    serverName: string,
    options?: AnalysisServicesServersDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      serverName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Dissociates a Unified Gateway associated with the server.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serverName The name of the Analysis Services server. It must be a minimum of 3 characters,
   *                   and a maximum of 63.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  dissociateGateway(
    resourceGroupName: string,
    serverName: string,
    body: Record<string, unknown>,
    options?: AnalysisServicesServersDissociateGatewayOptionalParams
  ): Promise<AnalysisServicesServersDissociateGatewayResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, serverName, body, options },
      dissociateGatewayOperationSpec
    );
  }

  /**
   * Return the gateway status of the specified Analysis Services server instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serverName The name of the Analysis Services server. It must be a minimum of 3 characters,
   *                   and a maximum of 63.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  listGatewayStatus(
    resourceGroupName: string,
    serverName: string,
    body: Record<string, unknown>,
    options?: AnalysisServicesServersListGatewayStatusOptionalParams
  ): Promise<AnalysisServicesServersListGatewayStatusResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, serverName, body, options },
      listGatewayStatusOperationSpec
    );
  }

  /**
   * Resumes operation of the specified Analysis Services server instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serverName The name of the Analysis Services server. It must be a minimum of 3 characters,
   *                   and a maximum of 63.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginResume(
    resourceGroupName: string,
    serverName: string,
    body: Record<string, unknown>,
    options?: AnalysisServicesServersResumeOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<AnalysisServicesServersResumeResponse>,
      AnalysisServicesServersResumeResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<AnalysisServicesServersResumeResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, serverName, body, options },
      spec: resumeOperationSpec
    });
    const poller = await createHttpPoller<
      AnalysisServicesServersResumeResponse,
      OperationState<AnalysisServicesServersResumeResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Resumes operation of the specified Analysis Services server instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serverName The name of the Analysis Services server. It must be a minimum of 3 characters,
   *                   and a maximum of 63.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginResumeAndWait(
    resourceGroupName: string,
    serverName: string,
    body: Record<string, unknown>,
    options?: AnalysisServicesServersResumeOptionalParams
  ): Promise<AnalysisServicesServersResumeResponse> {
    const poller = await this.beginResume(
      resourceGroupName,
      serverName,
      body,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Lists eligible SKUs for an Analysis Services resource.
   * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
   *                          server is part. This name must be at least 1 character in length, and no more than 90.
   * @param serverName The name of the Analysis Services server. It must be at least 3 characters in
   *                   length, and no more than 63.
   * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID
   *                       forms part of the URI for every service call.
   * @param options The options parameters.
   */
  listSkusForExisting(
    resourceGroupName: string,
    serverName: string,
    subscriptionId: string,
    options?: AnalysisServicesServersListSkusForExistingOptionalParams
  ): Promise<AnalysisServicesServersListSkusForExistingResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, serverName, subscriptionId, options },
      listSkusForExistingOperationSpec
    );
  }

  /**
   * Suspends operation of the specified Analysis Services server instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serverName The name of the Analysis Services server. It must be a minimum of 3 characters,
   *                   and a maximum of 63.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginSuspend(
    resourceGroupName: string,
    serverName: string,
    body: Record<string, unknown>,
    options?: AnalysisServicesServersSuspendOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<AnalysisServicesServersSuspendResponse>,
      AnalysisServicesServersSuspendResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<AnalysisServicesServersSuspendResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, serverName, body, options },
      spec: suspendOperationSpec
    });
    const poller = await createHttpPoller<
      AnalysisServicesServersSuspendResponse,
      OperationState<AnalysisServicesServersSuspendResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Suspends operation of the specified Analysis Services server instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serverName The name of the Analysis Services server. It must be a minimum of 3 characters,
   *                   and a maximum of 63.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginSuspendAndWait(
    resourceGroupName: string,
    serverName: string,
    body: Record<string, unknown>,
    options?: AnalysisServicesServersSuspendOptionalParams
  ): Promise<AnalysisServicesServersSuspendResponse> {
    const poller = await this.beginSuspend(
      resourceGroupName,
      serverName,
      body,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: AnalysisServicesServersListByResourceGroupNextOptionalParams
  ): Promise<AnalysisServicesServersListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AnalysisServicesServerListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getDetailsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AnalysisServicesServer
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serverName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.AnalysisServicesServer
    },
    201: {
      bodyMapper: Mappers.AnalysisServicesServer
    },
    202: {
      bodyMapper: Mappers.AnalysisServicesServer
    },
    204: {
      bodyMapper: Mappers.AnalysisServicesServer
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.resource,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serverName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.AnalysisServicesServer
    },
    201: {
      bodyMapper: Mappers.AnalysisServicesServer
    },
    202: {
      bodyMapper: Mappers.AnalysisServicesServer
    },
    204: {
      bodyMapper: Mappers.AnalysisServicesServer
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.properties,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serverName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serverName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const dissociateGatewayOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}/dissociateGateway",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serverName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listGatewayStatusOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}/listGatewayStatus",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.GatewayListStatusLive
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serverName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const resumeOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}/resume",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } }
      }
    },
    201: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } }
      }
    },
    202: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } }
      }
    },
    204: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serverName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listSkusForExistingOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}/skus/{resourceGroupName}/{serverName}/{subscriptionId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SkuEnumerationForExistingResourceResult
    },
    default: {
      bodyMapper: Mappers.AzureCoreFoundationsErrorResponse,
      headersMapper:
        Mappers.AnalysisServicesServersListSkusForExistingExceptionHeaders
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.serverName,
    Parameters.resourceGroupName1,
    Parameters.subscriptionId1
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const suspendOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}/suspend",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } }
      }
    },
    201: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } }
      }
    },
    202: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } }
      }
    },
    204: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serverName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AnalysisServicesServerListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
