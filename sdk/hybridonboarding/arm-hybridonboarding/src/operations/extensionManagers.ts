/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { ExtensionManagers } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { HybridOnboardingClient } from "../hybridOnboardingClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  ExtensionManager,
  ExtensionManagersListBySubscriptionNextOptionalParams,
  ExtensionManagersListBySubscriptionOptionalParams,
  ExtensionManagersListBySubscriptionResponse,
  ExtensionManagersListByResourceGroupNextOptionalParams,
  ExtensionManagersListByResourceGroupOptionalParams,
  ExtensionManagersListByResourceGroupResponse,
  ExtensionManagersGetOptionalParams,
  ExtensionManagersGetResponse,
  ExtensionManagersCreateOrUpdateOptionalParams,
  ExtensionManagersCreateOrUpdateResponse,
  ExtensionManagerPatch,
  ExtensionManagersUpdateOptionalParams,
  ExtensionManagersUpdateResponse,
  ExtensionManagersDeleteOptionalParams,
  ExtensionManagersDeleteResponse,
  AddCustomLocationDetails,
  ExtensionManagersAddCustomLocationOptionalParams,
  ExtensionManagersAddCustomLocationResponse,
  DisableExtensionsRequestDetails,
  ExtensionManagersDisableExtensionsOptionalParams,
  ExtensionManagersDisableExtensionsResponse,
  EnableExtensionsRequestDetails,
  ExtensionManagersEnableExtensionsOptionalParams,
  ExtensionManagersEnableExtensionsResponse,
  RemoveCustomLocationDetails,
  ExtensionManagersRemoveCustomLocationOptionalParams,
  ExtensionManagersRemoveCustomLocationResponse,
  ExtensionManagersListBySubscriptionNextResponse,
  ExtensionManagersListByResourceGroupNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ExtensionManagers operations. */
export class ExtensionManagersImpl implements ExtensionManagers {
  private readonly client: HybridOnboardingClient;

  /**
   * Initialize a new instance of the class ExtensionManagers class.
   * @param client Reference to the service client
   */
  constructor(client: HybridOnboardingClient) {
    this.client = client;
  }

  /**
   * List ExtensionManager resources by subscription ID
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: ExtensionManagersListBySubscriptionOptionalParams,
  ): PagedAsyncIterableIterator<ExtensionManager> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionPagingPage(options, settings);
      },
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: ExtensionManagersListBySubscriptionOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<ExtensionManager[]> {
    let result: ExtensionManagersListBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySubscription(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySubscriptionPagingAll(
    options?: ExtensionManagersListBySubscriptionOptionalParams,
  ): AsyncIterableIterator<ExtensionManager> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * List ExtensionManager resources by resource group
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: ExtensionManagersListByResourceGroupOptionalParams,
  ): PagedAsyncIterableIterator<ExtensionManager> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByResourceGroupPagingPage(
          resourceGroupName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: ExtensionManagersListByResourceGroupOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<ExtensionManager[]> {
    let result: ExtensionManagersListByResourceGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByResourceGroup(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: ExtensionManagersListByResourceGroupOptionalParams,
  ): AsyncIterableIterator<ExtensionManager> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List ExtensionManager resources by subscription ID
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: ExtensionManagersListBySubscriptionOptionalParams,
  ): Promise<ExtensionManagersListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec,
    );
  }

  /**
   * List ExtensionManager resources by resource group
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: ExtensionManagersListByResourceGroupOptionalParams,
  ): Promise<ExtensionManagersListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec,
    );
  }

  /**
   * Get a ExtensionManager
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param extensionManagerName Extension Manager resource
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    extensionManagerName: string,
    options?: ExtensionManagersGetOptionalParams,
  ): Promise<ExtensionManagersGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, extensionManagerName, options },
      getOperationSpec,
    );
  }

  /**
   * Create a ExtensionManager
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param extensionManagerName Extension Manager resource
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    extensionManagerName: string,
    resource: ExtensionManager,
    options?: ExtensionManagersCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ExtensionManagersCreateOrUpdateResponse>,
      ExtensionManagersCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ExtensionManagersCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, extensionManagerName, resource, options },
      spec: createOrUpdateOperationSpec,
    });
    const poller = await createHttpPoller<
      ExtensionManagersCreateOrUpdateResponse,
      OperationState<ExtensionManagersCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create a ExtensionManager
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param extensionManagerName Extension Manager resource
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    extensionManagerName: string,
    resource: ExtensionManager,
    options?: ExtensionManagersCreateOrUpdateOptionalParams,
  ): Promise<ExtensionManagersCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      extensionManagerName,
      resource,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Update a ExtensionManager
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param extensionManagerName Extension Manager resource
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    extensionManagerName: string,
    properties: ExtensionManagerPatch,
    options?: ExtensionManagersUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ExtensionManagersUpdateResponse>,
      ExtensionManagersUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ExtensionManagersUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, extensionManagerName, properties, options },
      spec: updateOperationSpec,
    });
    const poller = await createHttpPoller<
      ExtensionManagersUpdateResponse,
      OperationState<ExtensionManagersUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Update a ExtensionManager
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param extensionManagerName Extension Manager resource
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    extensionManagerName: string,
    properties: ExtensionManagerPatch,
    options?: ExtensionManagersUpdateOptionalParams,
  ): Promise<ExtensionManagersUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      extensionManagerName,
      properties,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Delete a ExtensionManager
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param extensionManagerName Extension Manager resource
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    extensionManagerName: string,
    options?: ExtensionManagersDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ExtensionManagersDeleteResponse>,
      ExtensionManagersDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ExtensionManagersDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, extensionManagerName, options },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<
      ExtensionManagersDeleteResponse,
      OperationState<ExtensionManagersDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete a ExtensionManager
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param extensionManagerName Extension Manager resource
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    extensionManagerName: string,
    options?: ExtensionManagersDeleteOptionalParams,
  ): Promise<ExtensionManagersDeleteResponse> {
    const poller = await this.beginDelete(
      resourceGroupName,
      extensionManagerName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Add a new custom location on extension(s)
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param extensionManagerName Extension Manager resource
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginAddCustomLocation(
    resourceGroupName: string,
    extensionManagerName: string,
    body: AddCustomLocationDetails[],
    options?: ExtensionManagersAddCustomLocationOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ExtensionManagersAddCustomLocationResponse>,
      ExtensionManagersAddCustomLocationResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ExtensionManagersAddCustomLocationResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, extensionManagerName, body, options },
      spec: addCustomLocationOperationSpec,
    });
    const poller = await createHttpPoller<
      ExtensionManagersAddCustomLocationResponse,
      OperationState<ExtensionManagersAddCustomLocationResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Add a new custom location on extension(s)
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param extensionManagerName Extension Manager resource
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginAddCustomLocationAndWait(
    resourceGroupName: string,
    extensionManagerName: string,
    body: AddCustomLocationDetails[],
    options?: ExtensionManagersAddCustomLocationOptionalParams,
  ): Promise<ExtensionManagersAddCustomLocationResponse> {
    const poller = await this.beginAddCustomLocation(
      resourceGroupName,
      extensionManagerName,
      body,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Disable extension(s) on the extension manager resource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param extensionManagerName Extension Manager resource
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginDisableExtensions(
    resourceGroupName: string,
    extensionManagerName: string,
    body: DisableExtensionsRequestDetails[],
    options?: ExtensionManagersDisableExtensionsOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ExtensionManagersDisableExtensionsResponse>,
      ExtensionManagersDisableExtensionsResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ExtensionManagersDisableExtensionsResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, extensionManagerName, body, options },
      spec: disableExtensionsOperationSpec,
    });
    const poller = await createHttpPoller<
      ExtensionManagersDisableExtensionsResponse,
      OperationState<ExtensionManagersDisableExtensionsResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Disable extension(s) on the extension manager resource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param extensionManagerName Extension Manager resource
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginDisableExtensionsAndWait(
    resourceGroupName: string,
    extensionManagerName: string,
    body: DisableExtensionsRequestDetails[],
    options?: ExtensionManagersDisableExtensionsOptionalParams,
  ): Promise<ExtensionManagersDisableExtensionsResponse> {
    const poller = await this.beginDisableExtensions(
      resourceGroupName,
      extensionManagerName,
      body,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Enable extension(s) on the extension manager resource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param extensionManagerName Extension Manager resource
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginEnableExtensions(
    resourceGroupName: string,
    extensionManagerName: string,
    body: EnableExtensionsRequestDetails[],
    options?: ExtensionManagersEnableExtensionsOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ExtensionManagersEnableExtensionsResponse>,
      ExtensionManagersEnableExtensionsResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ExtensionManagersEnableExtensionsResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, extensionManagerName, body, options },
      spec: enableExtensionsOperationSpec,
    });
    const poller = await createHttpPoller<
      ExtensionManagersEnableExtensionsResponse,
      OperationState<ExtensionManagersEnableExtensionsResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Enable extension(s) on the extension manager resource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param extensionManagerName Extension Manager resource
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginEnableExtensionsAndWait(
    resourceGroupName: string,
    extensionManagerName: string,
    body: EnableExtensionsRequestDetails[],
    options?: ExtensionManagersEnableExtensionsOptionalParams,
  ): Promise<ExtensionManagersEnableExtensionsResponse> {
    const poller = await this.beginEnableExtensions(
      resourceGroupName,
      extensionManagerName,
      body,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Remove a custom location from extension(s)
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param extensionManagerName Extension Manager resource
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginRemoveCustomLocation(
    resourceGroupName: string,
    extensionManagerName: string,
    body: RemoveCustomLocationDetails[],
    options?: ExtensionManagersRemoveCustomLocationOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ExtensionManagersRemoveCustomLocationResponse>,
      ExtensionManagersRemoveCustomLocationResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ExtensionManagersRemoveCustomLocationResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, extensionManagerName, body, options },
      spec: removeCustomLocationOperationSpec,
    });
    const poller = await createHttpPoller<
      ExtensionManagersRemoveCustomLocationResponse,
      OperationState<ExtensionManagersRemoveCustomLocationResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Remove a custom location from extension(s)
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param extensionManagerName Extension Manager resource
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginRemoveCustomLocationAndWait(
    resourceGroupName: string,
    extensionManagerName: string,
    body: RemoveCustomLocationDetails[],
    options?: ExtensionManagersRemoveCustomLocationOptionalParams,
  ): Promise<ExtensionManagersRemoveCustomLocationResponse> {
    const poller = await this.beginRemoveCustomLocation(
      resourceGroupName,
      extensionManagerName,
      body,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: ExtensionManagersListBySubscriptionNextOptionalParams,
  ): Promise<ExtensionManagersListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec,
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: ExtensionManagersListByResourceGroupNextOptionalParams,
  ): Promise<ExtensionManagersListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.HybridOnboarding/extensionManagers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ExtensionManagerListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridOnboarding/extensionManagers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ExtensionManagerListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridOnboarding/extensionManagers/{extensionManagerName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ExtensionManager,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.extensionManagerName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridOnboarding/extensionManagers/{extensionManagerName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ExtensionManager,
    },
    201: {
      bodyMapper: Mappers.ExtensionManager,
    },
    202: {
      bodyMapper: Mappers.ExtensionManager,
    },
    204: {
      bodyMapper: Mappers.ExtensionManager,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.resource,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.extensionManagerName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridOnboarding/extensionManagers/{extensionManagerName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.ExtensionManager,
    },
    201: {
      bodyMapper: Mappers.ExtensionManager,
    },
    202: {
      bodyMapper: Mappers.ExtensionManager,
    },
    204: {
      bodyMapper: Mappers.ExtensionManager,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.properties,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.extensionManagerName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridOnboarding/extensionManagers/{extensionManagerName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.ExtensionManagersDeleteHeaders,
    },
    201: {
      headersMapper: Mappers.ExtensionManagersDeleteHeaders,
    },
    202: {
      headersMapper: Mappers.ExtensionManagersDeleteHeaders,
    },
    204: {
      headersMapper: Mappers.ExtensionManagersDeleteHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.extensionManagerName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const addCustomLocationOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridOnboarding/extensionManagers/{extensionManagerName}/addCustomLocation",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ExtensionManager,
    },
    201: {
      bodyMapper: Mappers.ExtensionManager,
    },
    202: {
      bodyMapper: Mappers.ExtensionManager,
    },
    204: {
      bodyMapper: Mappers.ExtensionManager,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.extensionManagerName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const disableExtensionsOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridOnboarding/extensionManagers/{extensionManagerName}/disableExtensions",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ExtensionManager,
    },
    201: {
      bodyMapper: Mappers.ExtensionManager,
    },
    202: {
      bodyMapper: Mappers.ExtensionManager,
    },
    204: {
      bodyMapper: Mappers.ExtensionManager,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.extensionManagerName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const enableExtensionsOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridOnboarding/extensionManagers/{extensionManagerName}/enableExtensions",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ExtensionManager,
    },
    201: {
      bodyMapper: Mappers.ExtensionManager,
    },
    202: {
      bodyMapper: Mappers.ExtensionManager,
    },
    204: {
      bodyMapper: Mappers.ExtensionManager,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.extensionManagerName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const removeCustomLocationOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridOnboarding/extensionManagers/{extensionManagerName}/removeCustomLocation",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ExtensionManager,
    },
    201: {
      bodyMapper: Mappers.ExtensionManager,
    },
    202: {
      bodyMapper: Mappers.ExtensionManager,
    },
    204: {
      bodyMapper: Mappers.ExtensionManager,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.extensionManagerName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ExtensionManagerListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ExtensionManagerListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
