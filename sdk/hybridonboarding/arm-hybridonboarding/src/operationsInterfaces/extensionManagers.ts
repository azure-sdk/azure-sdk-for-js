/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  ExtensionManager,
  ExtensionManagersListBySubscriptionOptionalParams,
  ExtensionManagersListByResourceGroupOptionalParams,
  ExtensionManagersGetOptionalParams,
  ExtensionManagersGetResponse,
  ExtensionManagersCreateOrUpdateOptionalParams,
  ExtensionManagersCreateOrUpdateResponse,
  ExtensionManagerPatch,
  ExtensionManagersUpdateOptionalParams,
  ExtensionManagersUpdateResponse,
  ExtensionManagersDeleteOptionalParams,
  ExtensionManagersDeleteResponse,
  AddCustomLocationDetails,
  ExtensionManagersAddCustomLocationOptionalParams,
  ExtensionManagersAddCustomLocationResponse,
  DisableExtensionsRequestDetails,
  ExtensionManagersDisableExtensionsOptionalParams,
  ExtensionManagersDisableExtensionsResponse,
  EnableExtensionsRequestDetails,
  ExtensionManagersEnableExtensionsOptionalParams,
  ExtensionManagersEnableExtensionsResponse,
  RemoveCustomLocationDetails,
  ExtensionManagersRemoveCustomLocationOptionalParams,
  ExtensionManagersRemoveCustomLocationResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a ExtensionManagers. */
export interface ExtensionManagers {
  /**
   * List ExtensionManager resources by subscription ID
   * @param options The options parameters.
   */
  listBySubscription(
    options?: ExtensionManagersListBySubscriptionOptionalParams,
  ): PagedAsyncIterableIterator<ExtensionManager>;
  /**
   * List ExtensionManager resources by resource group
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: ExtensionManagersListByResourceGroupOptionalParams,
  ): PagedAsyncIterableIterator<ExtensionManager>;
  /**
   * Get a ExtensionManager
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param extensionManagerName Extension Manager resource
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    extensionManagerName: string,
    options?: ExtensionManagersGetOptionalParams,
  ): Promise<ExtensionManagersGetResponse>;
  /**
   * Create a ExtensionManager
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param extensionManagerName Extension Manager resource
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    extensionManagerName: string,
    resource: ExtensionManager,
    options?: ExtensionManagersCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ExtensionManagersCreateOrUpdateResponse>,
      ExtensionManagersCreateOrUpdateResponse
    >
  >;
  /**
   * Create a ExtensionManager
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param extensionManagerName Extension Manager resource
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    extensionManagerName: string,
    resource: ExtensionManager,
    options?: ExtensionManagersCreateOrUpdateOptionalParams,
  ): Promise<ExtensionManagersCreateOrUpdateResponse>;
  /**
   * Update a ExtensionManager
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param extensionManagerName Extension Manager resource
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    extensionManagerName: string,
    properties: ExtensionManagerPatch,
    options?: ExtensionManagersUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ExtensionManagersUpdateResponse>,
      ExtensionManagersUpdateResponse
    >
  >;
  /**
   * Update a ExtensionManager
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param extensionManagerName Extension Manager resource
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    extensionManagerName: string,
    properties: ExtensionManagerPatch,
    options?: ExtensionManagersUpdateOptionalParams,
  ): Promise<ExtensionManagersUpdateResponse>;
  /**
   * Delete a ExtensionManager
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param extensionManagerName Extension Manager resource
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    extensionManagerName: string,
    options?: ExtensionManagersDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ExtensionManagersDeleteResponse>,
      ExtensionManagersDeleteResponse
    >
  >;
  /**
   * Delete a ExtensionManager
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param extensionManagerName Extension Manager resource
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    extensionManagerName: string,
    options?: ExtensionManagersDeleteOptionalParams,
  ): Promise<ExtensionManagersDeleteResponse>;
  /**
   * Add a new custom location on extension(s)
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param extensionManagerName Extension Manager resource
   * @param body The content of the action request
   * @param options The options parameters.
   */
  beginAddCustomLocation(
    resourceGroupName: string,
    extensionManagerName: string,
    body: AddCustomLocationDetails[],
    options?: ExtensionManagersAddCustomLocationOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ExtensionManagersAddCustomLocationResponse>,
      ExtensionManagersAddCustomLocationResponse
    >
  >;
  /**
   * Add a new custom location on extension(s)
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param extensionManagerName Extension Manager resource
   * @param body The content of the action request
   * @param options The options parameters.
   */
  beginAddCustomLocationAndWait(
    resourceGroupName: string,
    extensionManagerName: string,
    body: AddCustomLocationDetails[],
    options?: ExtensionManagersAddCustomLocationOptionalParams,
  ): Promise<ExtensionManagersAddCustomLocationResponse>;
  /**
   * Disable extension(s) on the extension manager resource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param extensionManagerName Extension Manager resource
   * @param body The content of the action request
   * @param options The options parameters.
   */
  beginDisableExtensions(
    resourceGroupName: string,
    extensionManagerName: string,
    body: DisableExtensionsRequestDetails[],
    options?: ExtensionManagersDisableExtensionsOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ExtensionManagersDisableExtensionsResponse>,
      ExtensionManagersDisableExtensionsResponse
    >
  >;
  /**
   * Disable extension(s) on the extension manager resource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param extensionManagerName Extension Manager resource
   * @param body The content of the action request
   * @param options The options parameters.
   */
  beginDisableExtensionsAndWait(
    resourceGroupName: string,
    extensionManagerName: string,
    body: DisableExtensionsRequestDetails[],
    options?: ExtensionManagersDisableExtensionsOptionalParams,
  ): Promise<ExtensionManagersDisableExtensionsResponse>;
  /**
   * Enable extension(s) on the extension manager resource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param extensionManagerName Extension Manager resource
   * @param body The content of the action request
   * @param options The options parameters.
   */
  beginEnableExtensions(
    resourceGroupName: string,
    extensionManagerName: string,
    body: EnableExtensionsRequestDetails[],
    options?: ExtensionManagersEnableExtensionsOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ExtensionManagersEnableExtensionsResponse>,
      ExtensionManagersEnableExtensionsResponse
    >
  >;
  /**
   * Enable extension(s) on the extension manager resource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param extensionManagerName Extension Manager resource
   * @param body The content of the action request
   * @param options The options parameters.
   */
  beginEnableExtensionsAndWait(
    resourceGroupName: string,
    extensionManagerName: string,
    body: EnableExtensionsRequestDetails[],
    options?: ExtensionManagersEnableExtensionsOptionalParams,
  ): Promise<ExtensionManagersEnableExtensionsResponse>;
  /**
   * Remove a custom location from extension(s)
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param extensionManagerName Extension Manager resource
   * @param body The content of the action request
   * @param options The options parameters.
   */
  beginRemoveCustomLocation(
    resourceGroupName: string,
    extensionManagerName: string,
    body: RemoveCustomLocationDetails[],
    options?: ExtensionManagersRemoveCustomLocationOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ExtensionManagersRemoveCustomLocationResponse>,
      ExtensionManagersRemoveCustomLocationResponse
    >
  >;
  /**
   * Remove a custom location from extension(s)
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param extensionManagerName Extension Manager resource
   * @param body The content of the action request
   * @param options The options parameters.
   */
  beginRemoveCustomLocationAndWait(
    resourceGroupName: string,
    extensionManagerName: string,
    body: RemoveCustomLocationDetails[],
    options?: ExtensionManagersRemoveCustomLocationOptionalParams,
  ): Promise<ExtensionManagersRemoveCustomLocationResponse>;
}
