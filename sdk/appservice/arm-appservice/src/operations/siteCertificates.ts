/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { SiteCertificates } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { WebSiteManagementClient } from "../webSiteManagementClient";
import {
  Certificate,
  SiteCertificatesListNextOptionalParams,
  SiteCertificatesListOptionalParams,
  SiteCertificatesListResponse,
  SiteCertificatesListSlotNextOptionalParams,
  SiteCertificatesListSlotOptionalParams,
  SiteCertificatesListSlotResponse,
  SiteCertificatesGetOptionalParams,
  SiteCertificatesGetResponse,
  SiteCertificatesCreateOrUpdateOptionalParams,
  SiteCertificatesCreateOrUpdateResponse,
  SiteCertificatesDeleteOptionalParams,
  CertificatePatchResource,
  SiteCertificatesUpdateOptionalParams,
  SiteCertificatesUpdateResponse,
  SiteCertificatesGetSlotOptionalParams,
  SiteCertificatesGetSlotResponse,
  SiteCertificatesCreateOrUpdateSlotOptionalParams,
  SiteCertificatesCreateOrUpdateSlotResponse,
  SiteCertificatesDeleteSlotOptionalParams,
  SiteCertificatesUpdateSlotOptionalParams,
  SiteCertificatesUpdateSlotResponse,
  SiteCertificatesListNextResponse,
  SiteCertificatesListSlotNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing SiteCertificates operations. */
export class SiteCertificatesImpl implements SiteCertificates {
  private readonly client: WebSiteManagementClient;

  /**
   * Initialize a new instance of the class SiteCertificates class.
   * @param client Reference to the service client
   */
  constructor(client: WebSiteManagementClient) {
    this.client = client;
  }

  /**
   * Get all certificates in a resource group under a site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Name of the site.
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    siteName: string,
    options?: SiteCertificatesListOptionalParams,
  ): PagedAsyncIterableIterator<Certificate> {
    const iter = this.listPagingAll(resourceGroupName, siteName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(
          resourceGroupName,
          siteName,
          options,
          settings,
        );
      },
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    siteName: string,
    options?: SiteCertificatesListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<Certificate[]> {
    let result: SiteCertificatesListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(resourceGroupName, siteName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        resourceGroupName,
        siteName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    siteName: string,
    options?: SiteCertificatesListOptionalParams,
  ): AsyncIterableIterator<Certificate> {
    for await (const page of this.listPagingPage(
      resourceGroupName,
      siteName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Get all certificates in a resource group for a given site and a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Name of the site.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will create a binding
   *             for the production slot.
   * @param options The options parameters.
   */
  public listSlot(
    resourceGroupName: string,
    siteName: string,
    slot: string,
    options?: SiteCertificatesListSlotOptionalParams,
  ): PagedAsyncIterableIterator<Certificate> {
    const iter = this.listSlotPagingAll(
      resourceGroupName,
      siteName,
      slot,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listSlotPagingPage(
          resourceGroupName,
          siteName,
          slot,
          options,
          settings,
        );
      },
    };
  }

  private async *listSlotPagingPage(
    resourceGroupName: string,
    siteName: string,
    slot: string,
    options?: SiteCertificatesListSlotOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<Certificate[]> {
    let result: SiteCertificatesListSlotResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listSlot(resourceGroupName, siteName, slot, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listSlotNext(
        resourceGroupName,
        siteName,
        slot,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listSlotPagingAll(
    resourceGroupName: string,
    siteName: string,
    slot: string,
    options?: SiteCertificatesListSlotOptionalParams,
  ): AsyncIterableIterator<Certificate> {
    for await (const page of this.listSlotPagingPage(
      resourceGroupName,
      siteName,
      slot,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Get all certificates in a resource group under a site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Name of the site.
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    siteName: string,
    options?: SiteCertificatesListOptionalParams,
  ): Promise<SiteCertificatesListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, options },
      listOperationSpec,
    );
  }

  /**
   * Get a certificate belonging to a given site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Name of the site.
   * @param name Name of the certificate.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    siteName: string,
    name: string,
    options?: SiteCertificatesGetOptionalParams,
  ): Promise<SiteCertificatesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, name, options },
      getOperationSpec,
    );
  }

  /**
   * Description for Create or update a certificate.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Name of the site.
   * @param name Name of the certificate.
   * @param certificateEnvelope Details of certificate, if it exists already.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    siteName: string,
    name: string,
    certificateEnvelope: Certificate,
    options?: SiteCertificatesCreateOrUpdateOptionalParams,
  ): Promise<SiteCertificatesCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, name, certificateEnvelope, options },
      createOrUpdateOperationSpec,
    );
  }

  /**
   * Delete a certificate from the site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Name of the site.
   * @param name Name of the certificate.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    siteName: string,
    name: string,
    options?: SiteCertificatesDeleteOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, name, options },
      deleteOperationSpec,
    );
  }

  /**
   * Description for Create or update a certificate.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Name of the site.
   * @param name Name of the certificate.
   * @param certificateEnvelope Details of certificate, if it exists already.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    siteName: string,
    name: string,
    certificateEnvelope: CertificatePatchResource,
    options?: SiteCertificatesUpdateOptionalParams,
  ): Promise<SiteCertificatesUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, name, certificateEnvelope, options },
      updateOperationSpec,
    );
  }

  /**
   * Get all certificates in a resource group for a given site and a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Name of the site.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will create a binding
   *             for the production slot.
   * @param options The options parameters.
   */
  private _listSlot(
    resourceGroupName: string,
    siteName: string,
    slot: string,
    options?: SiteCertificatesListSlotOptionalParams,
  ): Promise<SiteCertificatesListSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, slot, options },
      listSlotOperationSpec,
    );
  }

  /**
   * Get a certificate for a given site and deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Name of the site.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will create a binding
   *             for the production slot.
   * @param name Name of the certificate.
   * @param options The options parameters.
   */
  getSlot(
    resourceGroupName: string,
    siteName: string,
    slot: string,
    name: string,
    options?: SiteCertificatesGetSlotOptionalParams,
  ): Promise<SiteCertificatesGetSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, slot, name, options },
      getSlotOperationSpec,
    );
  }

  /**
   * Description for Create or update a certificate.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Name of the site.
   * @param name Name of the certificate.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will create a binding
   *             for the production slot.
   * @param certificateEnvelope Details of certificate, if it exists already.
   * @param options The options parameters.
   */
  createOrUpdateSlot(
    resourceGroupName: string,
    siteName: string,
    name: string,
    slot: string,
    certificateEnvelope: Certificate,
    options?: SiteCertificatesCreateOrUpdateSlotOptionalParams,
  ): Promise<SiteCertificatesCreateOrUpdateSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, name, slot, certificateEnvelope, options },
      createOrUpdateSlotOperationSpec,
    );
  }

  /**
   * Delete a certificate for a given site and deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Name of the site.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will create a binding
   *             for the production slot.
   * @param name Name of the certificate.
   * @param options The options parameters.
   */
  deleteSlot(
    resourceGroupName: string,
    siteName: string,
    slot: string,
    name: string,
    options?: SiteCertificatesDeleteSlotOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, slot, name, options },
      deleteSlotOperationSpec,
    );
  }

  /**
   * Description for Create or update a certificate.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Name of the site.
   * @param name Name of the certificate.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will create a binding
   *             for the production slot.
   * @param certificateEnvelope Details of certificate, if it exists already.
   * @param options The options parameters.
   */
  updateSlot(
    resourceGroupName: string,
    siteName: string,
    name: string,
    slot: string,
    certificateEnvelope: CertificatePatchResource,
    options?: SiteCertificatesUpdateSlotOptionalParams,
  ): Promise<SiteCertificatesUpdateSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, name, slot, certificateEnvelope, options },
      updateSlotOperationSpec,
    );
  }

  /**
   * ListNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Name of the site.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    siteName: string,
    nextLink: string,
    options?: SiteCertificatesListNextOptionalParams,
  ): Promise<SiteCertificatesListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, nextLink, options },
      listNextOperationSpec,
    );
  }

  /**
   * ListSlotNext
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Name of the site.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will create a binding
   *             for the production slot.
   * @param nextLink The nextLink from the previous successful call to the ListSlot method.
   * @param options The options parameters.
   */
  private _listSlotNext(
    resourceGroupName: string,
    siteName: string,
    slot: string,
    nextLink: string,
    options?: SiteCertificatesListSlotNextOptionalParams,
  ): Promise<SiteCertificatesListSlotNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, slot, nextLink, options },
      listSlotNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/certificates",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateCollection,
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/certificates/{name}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Certificate,
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.siteName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/certificates/{name}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Certificate,
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse,
    },
  },
  requestBody: Parameters.certificateEnvelope,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.siteName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/certificates/{name}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.siteName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/certificates/{name}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Certificate,
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse,
    },
  },
  requestBody: Parameters.certificateEnvelope1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.siteName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const listSlotOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/certificates",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateCollection,
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.slot,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getSlotOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/certificates/{name}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Certificate,
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.siteName,
    Parameters.slot,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateSlotOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/certificates/{name}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Certificate,
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse,
    },
  },
  requestBody: Parameters.certificateEnvelope,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.siteName,
    Parameters.slot,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteSlotOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/certificates/{name}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.siteName,
    Parameters.slot,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const updateSlotOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/certificates/{name}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Certificate,
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse,
    },
  },
  requestBody: Parameters.certificateEnvelope1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.siteName,
    Parameters.slot,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateCollection,
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
    Parameters.siteName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listSlotNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateCollection,
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
    Parameters.siteName,
    Parameters.slot,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
