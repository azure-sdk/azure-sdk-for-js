/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  Workload,
  WorkloadsListOptionalParams,
  WorkloadsStartOptionalParams,
  WorkloadsStopOptionalParams,
  WorkloadsRestartOptionalParams,
  WorkloadsCreateOrUpdateOptionalParams,
  WorkloadsCreateOrUpdateResponse,
  WorkloadsUpdateOptionalParams,
  WorkloadsUpdateResponse,
  WorkloadsGetOptionalParams,
  WorkloadsGetResponse,
  WorkloadsDeleteOptionalParams,
  WorkloadsDeleteResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Workloads. */
export interface Workloads {
  /**
   * Lists all workloads.
   * @param resourceGroup The name of the resource group.
   * @param workbenchName The name of the workbench.
   * @param chamberName The name of the chamber.
   * @param options The options parameters.
   */
  list(
    resourceGroup: string,
    workbenchName: string,
    chamberName: string,
    options?: WorkloadsListOptionalParams
  ): PagedAsyncIterableIterator<Workload>;
  /**
   * Perform Start operation.
   * @param resourceGroup the resource group.
   * @param workbenchName the workbench name.
   * @param chamberName the chamber name.
   * @param name the workload name.
   * @param options The options parameters.
   */
  beginStart(
    resourceGroup: string,
    workbenchName: string,
    chamberName: string,
    name: string,
    options?: WorkloadsStartOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Perform Start operation.
   * @param resourceGroup the resource group.
   * @param workbenchName the workbench name.
   * @param chamberName the chamber name.
   * @param name the workload name.
   * @param options The options parameters.
   */
  beginStartAndWait(
    resourceGroup: string,
    workbenchName: string,
    chamberName: string,
    name: string,
    options?: WorkloadsStartOptionalParams
  ): Promise<void>;
  /**
   * Perform Stop operation.
   * @param resourceGroup the resource group.
   * @param workbenchName the workbench name.
   * @param chamberName the chamber name.
   * @param name the workload name.
   * @param options The options parameters.
   */
  beginStop(
    resourceGroup: string,
    workbenchName: string,
    chamberName: string,
    name: string,
    options?: WorkloadsStopOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Perform Stop operation.
   * @param resourceGroup the resource group.
   * @param workbenchName the workbench name.
   * @param chamberName the chamber name.
   * @param name the workload name.
   * @param options The options parameters.
   */
  beginStopAndWait(
    resourceGroup: string,
    workbenchName: string,
    chamberName: string,
    name: string,
    options?: WorkloadsStopOptionalParams
  ): Promise<void>;
  /**
   * Perform Restart operation.
   * @param resourceGroup the resource group.
   * @param workbenchName the workbench name.
   * @param chamberName the chamber name.
   * @param name the workload name.
   * @param options The options parameters.
   */
  beginRestart(
    resourceGroup: string,
    workbenchName: string,
    chamberName: string,
    name: string,
    options?: WorkloadsRestartOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Perform Restart operation.
   * @param resourceGroup the resource group.
   * @param workbenchName the workbench name.
   * @param chamberName the chamber name.
   * @param name the workload name.
   * @param options The options parameters.
   */
  beginRestartAndWait(
    resourceGroup: string,
    workbenchName: string,
    chamberName: string,
    name: string,
    options?: WorkloadsRestartOptionalParams
  ): Promise<void>;
  /**
   * Creates or updates the specified workload.
   * @param resourceGroup The name of the resource group.
   * @param workbenchName The name of the workbench.
   * @param chamberName The name of the chamber.
   * @param workloadName The name of the workload.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroup: string,
    workbenchName: string,
    chamberName: string,
    workloadName: string,
    options?: WorkloadsCreateOrUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<WorkloadsCreateOrUpdateResponse>,
      WorkloadsCreateOrUpdateResponse
    >
  >;
  /**
   * Creates or updates the specified workload.
   * @param resourceGroup The name of the resource group.
   * @param workbenchName The name of the workbench.
   * @param chamberName The name of the chamber.
   * @param workloadName The name of the workload.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroup: string,
    workbenchName: string,
    chamberName: string,
    workloadName: string,
    options?: WorkloadsCreateOrUpdateOptionalParams
  ): Promise<WorkloadsCreateOrUpdateResponse>;
  /**
   * Updates the specified workload.
   * @param resourceGroup The name of the resource group.
   * @param workbenchName The name of the workbench.
   * @param chamberName The name of the chamber.
   * @param workloadName The name of the workload.
   * @param options The options parameters.
   */
  update(
    resourceGroup: string,
    workbenchName: string,
    chamberName: string,
    workloadName: string,
    options?: WorkloadsUpdateOptionalParams
  ): Promise<WorkloadsUpdateResponse>;
  /**
   * Gets information about the specified workload.
   * @param resourceGroup The name of the resource group.
   * @param workbenchName The name of the workbench.
   * @param chamberName The name of the chamber.
   * @param workloadName The name of the workload.
   * @param options The options parameters.
   */
  get(
    resourceGroup: string,
    workbenchName: string,
    chamberName: string,
    workloadName: string,
    options?: WorkloadsGetOptionalParams
  ): Promise<WorkloadsGetResponse>;
  /**
   * Deletes the specified workload.
   * @param resourceGroup The name of the resource group.
   * @param workbenchName The name of the workbench.
   * @param chamberName The name of the chamber.
   * @param workloadName The name of the workload.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroup: string,
    workbenchName: string,
    chamberName: string,
    workloadName: string,
    options?: WorkloadsDeleteOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<WorkloadsDeleteResponse>,
      WorkloadsDeleteResponse
    >
  >;
  /**
   * Deletes the specified workload.
   * @param resourceGroup The name of the resource group.
   * @param workbenchName The name of the workbench.
   * @param chamberName The name of the chamber.
   * @param workloadName The name of the workload.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroup: string,
    workbenchName: string,
    chamberName: string,
    workloadName: string,
    options?: WorkloadsDeleteOptionalParams
  ): Promise<WorkloadsDeleteResponse>;
}
