/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  Chamber,
  ChambersListOptionalParams,
  ChambersGetUploadUriOptionalParams,
  ChambersGetUploadUriResponse,
  ChambersStartOptionalParams,
  ChambersStopOptionalParams,
  ChambersRestartOptionalParams,
  ChambersLicenseUpdateOptionalParams,
  ChambersLicenseRestartOptionalParams,
  ChambersCreateOrUpdateOptionalParams,
  ChambersCreateOrUpdateResponse,
  ChambersUpdateOptionalParams,
  ChambersUpdateResponse,
  ChambersGetOptionalParams,
  ChambersGetResponse,
  ChambersDeleteOptionalParams,
  ChambersDeleteResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Chambers. */
export interface Chambers {
  /**
   * Lists all Chambers.
   * @param resourceGroup The name of the resource group.
   * @param workbenchName The name of the workbench.
   * @param options The options parameters.
   */
  list(
    resourceGroup: string,
    workbenchName: string,
    options?: ChambersListOptionalParams
  ): PagedAsyncIterableIterator<Chamber>;
  /**
   * Gets a URI to upload files to the specified Chamber resource.
   * @param resourceGroup the resource group.
   * @param workbenchName the workbench name.
   * @param name the chamber name.
   * @param options The options parameters.
   */
  getUploadUri(
    resourceGroup: string,
    workbenchName: string,
    name: string,
    options?: ChambersGetUploadUriOptionalParams
  ): Promise<ChambersGetUploadUriResponse>;
  /**
   * Perform Start operation.
   * @param resourceGroup the resource group.
   * @param workbenchName the workbench name.
   * @param name the chamber name.
   * @param options The options parameters.
   */
  beginStart(
    resourceGroup: string,
    workbenchName: string,
    name: string,
    options?: ChambersStartOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Perform Start operation.
   * @param resourceGroup the resource group.
   * @param workbenchName the workbench name.
   * @param name the chamber name.
   * @param options The options parameters.
   */
  beginStartAndWait(
    resourceGroup: string,
    workbenchName: string,
    name: string,
    options?: ChambersStartOptionalParams
  ): Promise<void>;
  /**
   * Perform Stop operation.
   * @param resourceGroup the resource group.
   * @param workbenchName the workbench name.
   * @param name the chamber name.
   * @param options The options parameters.
   */
  beginStop(
    resourceGroup: string,
    workbenchName: string,
    name: string,
    options?: ChambersStopOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Perform Stop operation.
   * @param resourceGroup the resource group.
   * @param workbenchName the workbench name.
   * @param name the chamber name.
   * @param options The options parameters.
   */
  beginStopAndWait(
    resourceGroup: string,
    workbenchName: string,
    name: string,
    options?: ChambersStopOptionalParams
  ): Promise<void>;
  /**
   * Perform Restart operation.
   * @param resourceGroup the resource group.
   * @param workbenchName the workbench name.
   * @param name the chamber name.
   * @param options The options parameters.
   */
  beginRestart(
    resourceGroup: string,
    workbenchName: string,
    name: string,
    options?: ChambersRestartOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Perform Restart operation.
   * @param resourceGroup the resource group.
   * @param workbenchName the workbench name.
   * @param name the chamber name.
   * @param options The options parameters.
   */
  beginRestartAndWait(
    resourceGroup: string,
    workbenchName: string,
    name: string,
    options?: ChambersRestartOptionalParams
  ): Promise<void>;
  /**
   * Perform Update LicenseServices operation.
   * @param resourceGroup the resource group.
   * @param workbenchName the workbench name.
   * @param name the chamber name.
   * @param options The options parameters.
   */
  beginLicenseUpdate(
    resourceGroup: string,
    workbenchName: string,
    name: string,
    options?: ChambersLicenseUpdateOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Perform Update LicenseServices operation.
   * @param resourceGroup the resource group.
   * @param workbenchName the workbench name.
   * @param name the chamber name.
   * @param options The options parameters.
   */
  beginLicenseUpdateAndWait(
    resourceGroup: string,
    workbenchName: string,
    name: string,
    options?: ChambersLicenseUpdateOptionalParams
  ): Promise<void>;
  /**
   * Perform License Restart operation.
   * @param resourceGroup the resource group.
   * @param workbenchName the workbench name.
   * @param name the chamber name.
   * @param options The options parameters.
   */
  beginLicenseRestart(
    resourceGroup: string,
    workbenchName: string,
    name: string,
    options?: ChambersLicenseRestartOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Perform License Restart operation.
   * @param resourceGroup the resource group.
   * @param workbenchName the workbench name.
   * @param name the chamber name.
   * @param options The options parameters.
   */
  beginLicenseRestartAndWait(
    resourceGroup: string,
    workbenchName: string,
    name: string,
    options?: ChambersLicenseRestartOptionalParams
  ): Promise<void>;
  /**
   * Creates or updates the specified Chamber.
   * @param resourceGroup The name of the resource group.
   * @param workbenchName The name of the workbench.
   * @param chamberName The name of the chamber.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroup: string,
    workbenchName: string,
    chamberName: string,
    options?: ChambersCreateOrUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<ChambersCreateOrUpdateResponse>,
      ChambersCreateOrUpdateResponse
    >
  >;
  /**
   * Creates or updates the specified Chamber.
   * @param resourceGroup The name of the resource group.
   * @param workbenchName The name of the workbench.
   * @param chamberName The name of the chamber.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroup: string,
    workbenchName: string,
    chamberName: string,
    options?: ChambersCreateOrUpdateOptionalParams
  ): Promise<ChambersCreateOrUpdateResponse>;
  /**
   * Updates the specified Chamber.
   * @param resourceGroup The name of the resource group.
   * @param workbenchName The name of the workbench.
   * @param chamberName The name of the chamber.
   * @param options The options parameters.
   */
  update(
    resourceGroup: string,
    workbenchName: string,
    chamberName: string,
    options?: ChambersUpdateOptionalParams
  ): Promise<ChambersUpdateResponse>;
  /**
   * Gets information about the specified Chamber.
   * @param resourceGroup The name of the resource group.
   * @param workbenchName The name of the workbench.
   * @param chamberName The name of the chamber.
   * @param options The options parameters.
   */
  get(
    resourceGroup: string,
    workbenchName: string,
    chamberName: string,
    options?: ChambersGetOptionalParams
  ): Promise<ChambersGetResponse>;
  /**
   * Deletes the specified Chamber.
   * @param resourceGroup The name of the resource group.
   * @param workbenchName The name of the workbench.
   * @param chamberName The name of the chamber.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroup: string,
    workbenchName: string,
    chamberName: string,
    options?: ChambersDeleteOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<ChambersDeleteResponse>,
      ChambersDeleteResponse
    >
  >;
  /**
   * Deletes the specified Chamber.
   * @param resourceGroup The name of the resource group.
   * @param workbenchName The name of the workbench.
   * @param chamberName The name of the chamber.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroup: string,
    workbenchName: string,
    chamberName: string,
    options?: ChambersDeleteOptionalParams
  ): Promise<ChambersDeleteResponse>;
}
