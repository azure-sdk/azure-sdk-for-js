/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  Connector,
  ConnectorsListOptionalParams,
  ConnectorsStartOptionalParams,
  ConnectorsStopOptionalParams,
  ConnectorsRestartOptionalParams,
  ConnectorsCreateOrUpdateOptionalParams,
  ConnectorsCreateOrUpdateResponse,
  ConnectorsUpdateOptionalParams,
  ConnectorsUpdateResponse,
  ConnectorsGetOptionalParams,
  ConnectorsGetResponse,
  ConnectorsDeleteOptionalParams,
  ConnectorsDeleteResponse,
  LicenseKeyParameters,
  ConnectorsLicenseAddOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Connectors. */
export interface Connectors {
  /**
   * Lists all connectors.
   * @param resourceGroup The name of the resource group.
   * @param workbenchName The name of the workbench.
   * @param chamberName The name of the chamber.
   * @param options The options parameters.
   */
  list(
    resourceGroup: string,
    workbenchName: string,
    chamberName: string,
    options?: ConnectorsListOptionalParams
  ): PagedAsyncIterableIterator<Connector>;
  /**
   * Perform Start operation.
   * @param resourceGroup Name of the resource group
   * @param workbenchName Name of the workbench
   * @param chamberName the chamber name.
   * @param name Name of the connector
   * @param options The options parameters.
   */
  beginStart(
    resourceGroup: string,
    workbenchName: string,
    chamberName: string,
    name: string,
    options?: ConnectorsStartOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Perform Start operation.
   * @param resourceGroup Name of the resource group
   * @param workbenchName Name of the workbench
   * @param chamberName the chamber name.
   * @param name Name of the connector
   * @param options The options parameters.
   */
  beginStartAndWait(
    resourceGroup: string,
    workbenchName: string,
    chamberName: string,
    name: string,
    options?: ConnectorsStartOptionalParams
  ): Promise<void>;
  /**
   * Perform Stop operation.
   * @param resourceGroup the resource group.
   * @param workbenchName the workbench name.
   * @param chamberName the chamber name.
   * @param name the connector name.
   * @param options The options parameters.
   */
  beginStop(
    resourceGroup: string,
    workbenchName: string,
    chamberName: string,
    name: string,
    options?: ConnectorsStopOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Perform Stop operation.
   * @param resourceGroup the resource group.
   * @param workbenchName the workbench name.
   * @param chamberName the chamber name.
   * @param name the connector name.
   * @param options The options parameters.
   */
  beginStopAndWait(
    resourceGroup: string,
    workbenchName: string,
    chamberName: string,
    name: string,
    options?: ConnectorsStopOptionalParams
  ): Promise<void>;
  /**
   * Perform Restart operation.
   * @param resourceGroup the resource group.
   * @param workbenchName the workbench name.
   * @param chamberName the chamber name.
   * @param name the connector name.
   * @param options The options parameters.
   */
  beginRestart(
    resourceGroup: string,
    workbenchName: string,
    chamberName: string,
    name: string,
    options?: ConnectorsRestartOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Perform Restart operation.
   * @param resourceGroup the resource group.
   * @param workbenchName the workbench name.
   * @param chamberName the chamber name.
   * @param name the connector name.
   * @param options The options parameters.
   */
  beginRestartAndWait(
    resourceGroup: string,
    workbenchName: string,
    chamberName: string,
    name: string,
    options?: ConnectorsRestartOptionalParams
  ): Promise<void>;
  /**
   * Creates or updates the specified connector.
   * @param resourceGroup The name of the resource group.
   * @param workbenchName The name of the workbench.
   * @param chamberName The name of the chamber.
   * @param connectorName The name of the connector.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroup: string,
    workbenchName: string,
    chamberName: string,
    connectorName: string,
    options?: ConnectorsCreateOrUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<ConnectorsCreateOrUpdateResponse>,
      ConnectorsCreateOrUpdateResponse
    >
  >;
  /**
   * Creates or updates the specified connector.
   * @param resourceGroup The name of the resource group.
   * @param workbenchName The name of the workbench.
   * @param chamberName The name of the chamber.
   * @param connectorName The name of the connector.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroup: string,
    workbenchName: string,
    chamberName: string,
    connectorName: string,
    options?: ConnectorsCreateOrUpdateOptionalParams
  ): Promise<ConnectorsCreateOrUpdateResponse>;
  /**
   * Updates the specified connectors.
   * @param resourceGroup The name of the resource group.
   * @param workbenchName The name of the workbench.
   * @param chamberName The name of the chamber.
   * @param connectorName The name of the connector.
   * @param options The options parameters.
   */
  update(
    resourceGroup: string,
    workbenchName: string,
    chamberName: string,
    connectorName: string,
    options?: ConnectorsUpdateOptionalParams
  ): Promise<ConnectorsUpdateResponse>;
  /**
   * Gets information about the specified connector.
   * @param resourceGroup The name of the resource group.
   * @param workbenchName The name of the workbench.
   * @param chamberName The name of the chamber.
   * @param connectorName The name of the connector.
   * @param options The options parameters.
   */
  get(
    resourceGroup: string,
    workbenchName: string,
    chamberName: string,
    connectorName: string,
    options?: ConnectorsGetOptionalParams
  ): Promise<ConnectorsGetResponse>;
  /**
   * Deletes the specified connector.
   * @param resourceGroup The name of the resource group.
   * @param workbenchName The name of the workbench.
   * @param chamberName The name of the chamber.
   * @param connectorName The name of the connector.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroup: string,
    workbenchName: string,
    chamberName: string,
    connectorName: string,
    options?: ConnectorsDeleteOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<ConnectorsDeleteResponse>,
      ConnectorsDeleteResponse
    >
  >;
  /**
   * Deletes the specified connector.
   * @param resourceGroup The name of the resource group.
   * @param workbenchName The name of the workbench.
   * @param chamberName The name of the chamber.
   * @param connectorName The name of the connector.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroup: string,
    workbenchName: string,
    chamberName: string,
    connectorName: string,
    options?: ConnectorsDeleteOptionalParams
  ): Promise<ConnectorsDeleteResponse>;
  /**
   * Add license to an ModSim Workbench connector.
   * @param resourceGroup The name of the resource group
   * @param workbenchName The name of the workbench
   * @param chamberName The name of the chamber.
   * @param name The name of the connector.
   * @param body License key parameters
   * @param options The options parameters.
   */
  beginLicenseAdd(
    resourceGroup: string,
    workbenchName: string,
    chamberName: string,
    name: string,
    body: LicenseKeyParameters,
    options?: ConnectorsLicenseAddOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Add license to an ModSim Workbench connector.
   * @param resourceGroup The name of the resource group
   * @param workbenchName The name of the workbench
   * @param chamberName The name of the chamber.
   * @param name The name of the connector.
   * @param body License key parameters
   * @param options The options parameters.
   */
  beginLicenseAddAndWait(
    resourceGroup: string,
    workbenchName: string,
    chamberName: string,
    name: string,
    body: LicenseKeyParameters,
    options?: ConnectorsLicenseAddOptionalParams
  ): Promise<void>;
}
