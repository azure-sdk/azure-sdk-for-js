/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  Workbench,
  WorkbenchesListBySubscriptionOptionalParams,
  WorkbenchesListByResourceGroupOptionalParams,
  WorkbenchesGetOptionalParams,
  WorkbenchesGetResponse,
  WorkbenchesCreateOrUpdateOptionalParams,
  WorkbenchesCreateOrUpdateResponse,
  WorkbenchesUpdateOptionalParams,
  WorkbenchesUpdateResponse,
  WorkbenchesDeleteOptionalParams,
  WorkbenchesDeleteResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Workbenches. */
export interface Workbenches {
  /**
   * Lists Workbenches by subscription.
   * @param options The options parameters.
   */
  listBySubscription(
    options?: WorkbenchesListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<Workbench>;
  /**
   * Lists workbenches by resource group.
   * @param resourceGroup the workbench name.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroup: string,
    options?: WorkbenchesListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<Workbench>;
  /**
   * Lists workbenches.
   * @param resourceGroup the resource group.
   * @param name the workbench name.
   * @param options The options parameters.
   */
  beginGet(
    resourceGroup: string,
    name: string,
    options?: WorkbenchesGetOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<WorkbenchesGetResponse>,
      WorkbenchesGetResponse
    >
  >;
  /**
   * Lists workbenches.
   * @param resourceGroup the resource group.
   * @param name the workbench name.
   * @param options The options parameters.
   */
  beginGetAndWait(
    resourceGroup: string,
    name: string,
    options?: WorkbenchesGetOptionalParams
  ): Promise<WorkbenchesGetResponse>;
  /**
   * Create workbenches.
   * @param resourceGroup the resource group.
   * @param name the workbench name.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroup: string,
    name: string,
    options?: WorkbenchesCreateOrUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<WorkbenchesCreateOrUpdateResponse>,
      WorkbenchesCreateOrUpdateResponse
    >
  >;
  /**
   * Create workbenches.
   * @param resourceGroup the resource group.
   * @param name the workbench name.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroup: string,
    name: string,
    options?: WorkbenchesCreateOrUpdateOptionalParams
  ): Promise<WorkbenchesCreateOrUpdateResponse>;
  /**
   * Update workbenches.
   * @param resourceGroup the resource group.
   * @param name the workbench name.
   * @param options The options parameters.
   */
  update(
    resourceGroup: string,
    name: string,
    options?: WorkbenchesUpdateOptionalParams
  ): Promise<WorkbenchesUpdateResponse>;
  /**
   * Delete workbenches.
   * @param resourceGroup the resource group.
   * @param name the workbench name.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroup: string,
    name: string,
    options?: WorkbenchesDeleteOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<WorkbenchesDeleteResponse>,
      WorkbenchesDeleteResponse
    >
  >;
  /**
   * Delete workbenches.
   * @param resourceGroup the resource group.
   * @param name the workbench name.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroup: string,
    name: string,
    options?: WorkbenchesDeleteOptionalParams
  ): Promise<WorkbenchesDeleteResponse>;
}
