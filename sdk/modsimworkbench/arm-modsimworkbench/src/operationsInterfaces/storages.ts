/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  Storage,
  StoragesListOptionalParams,
  StoragesCreateOrUpdateOptionalParams,
  StoragesCreateOrUpdateResponse,
  StoragesUpdateOptionalParams,
  StoragesUpdateResponse,
  StoragesGetOptionalParams,
  StoragesGetResponse,
  StoragesDeleteOptionalParams,
  StoragesDeleteResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Storages. */
export interface Storages {
  /**
   * Lists all storages.
   * @param resourceGroup The name of the resource group.
   * @param workbenchName The name of the workbench.
   * @param chamberName The name of the chamber.
   * @param options The options parameters.
   */
  list(
    resourceGroup: string,
    workbenchName: string,
    chamberName: string,
    options?: StoragesListOptionalParams
  ): PagedAsyncIterableIterator<Storage>;
  /**
   * Creates or updates the storage.
   * @param resourceGroup The name of the resource group.
   * @param workbenchName The name of the workbench.
   * @param chamberName The name of the chamber.
   * @param storageName The name of the storage.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroup: string,
    workbenchName: string,
    chamberName: string,
    storageName: string,
    options?: StoragesCreateOrUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<StoragesCreateOrUpdateResponse>,
      StoragesCreateOrUpdateResponse
    >
  >;
  /**
   * Creates or updates the storage.
   * @param resourceGroup The name of the resource group.
   * @param workbenchName The name of the workbench.
   * @param chamberName The name of the chamber.
   * @param storageName The name of the storage.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroup: string,
    workbenchName: string,
    chamberName: string,
    storageName: string,
    options?: StoragesCreateOrUpdateOptionalParams
  ): Promise<StoragesCreateOrUpdateResponse>;
  /**
   * Updates the storage.
   * @param resourceGroup The name of the resource group.
   * @param workbenchName The name of the workbench.
   * @param chamberName The name of the chamber.
   * @param storageName The name of the storage.
   * @param options The options parameters.
   */
  update(
    resourceGroup: string,
    workbenchName: string,
    chamberName: string,
    storageName: string,
    options?: StoragesUpdateOptionalParams
  ): Promise<StoragesUpdateResponse>;
  /**
   * Gets information about the storage.
   * @param resourceGroup The name of the resource group.
   * @param workbenchName The name of the workbench.
   * @param chamberName The name of the chamber.
   * @param storageName The name of the storage.
   * @param options The options parameters.
   */
  get(
    resourceGroup: string,
    workbenchName: string,
    chamberName: string,
    storageName: string,
    options?: StoragesGetOptionalParams
  ): Promise<StoragesGetResponse>;
  /**
   * Deletes the storage.
   * @param resourceGroup The name of the resource group.
   * @param workbenchName The name of the workbench.
   * @param chamberName The name of the chamber.
   * @param storageName The name of the storage.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroup: string,
    workbenchName: string,
    chamberName: string,
    storageName: string,
    options?: StoragesDeleteOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<StoragesDeleteResponse>,
      StoragesDeleteResponse
    >
  >;
  /**
   * Deletes the storage.
   * @param resourceGroup The name of the resource group.
   * @param workbenchName The name of the workbench.
   * @param chamberName The name of the chamber.
   * @param storageName The name of the storage.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroup: string,
    workbenchName: string,
    chamberName: string,
    storageName: string,
    options?: StoragesDeleteOptionalParams
  ): Promise<StoragesDeleteResponse>;
}
