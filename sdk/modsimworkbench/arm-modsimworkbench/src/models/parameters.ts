/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter
} from "@azure/core-client";
import {
  Workbench as WorkbenchMapper,
  Connector as ConnectorMapper,
  LicenseKeyParameters as LicenseKeyParametersMapper,
  FileUploadParameters as FileUploadParametersMapper,
  UpdateLicenseParameters as UpdateLicenseParametersMapper,
  RestartLicenseParameters as RestartLicenseParametersMapper,
  Chamber as ChamberMapper,
  Workload as WorkloadMapper,
  Storage as StorageMapper,
  FilesDownloadRequestParameters as FilesDownloadRequestParametersMapper,
  FilesManageParameters as FilesManageParametersMapper,
  FileRequestsManageParameters as FileRequestsManageParametersMapper
} from "../models/mappers";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2021-03-01-preview",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    constraints: {
      MinLength: 1
    },
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resourceGroup: OperationURLParameter = {
  parameterPath: "resourceGroup",
  mapper: {
    serializedName: "resourceGroup",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const name: OperationURLParameter = {
  parameterPath: "name",
  mapper: {
    serializedName: "name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const body: OperationParameter = {
  parameterPath: ["options", "body"],
  mapper: WorkbenchMapper
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const workbenchName: OperationURLParameter = {
  parameterPath: "workbenchName",
  mapper: {
    serializedName: "workbenchName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const chamberName: OperationURLParameter = {
  parameterPath: "chamberName",
  mapper: {
    serializedName: "chamberName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters: OperationParameter = {
  parameterPath: ["options", "parameters"],
  mapper: ConnectorMapper
};

export const connectorName: OperationURLParameter = {
  parameterPath: "connectorName",
  mapper: {
    serializedName: "connectorName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const body1: OperationParameter = {
  parameterPath: "body",
  mapper: LicenseKeyParametersMapper
};

export const body2: OperationParameter = {
  parameterPath: ["options", "body"],
  mapper: FileUploadParametersMapper
};

export const body3: OperationParameter = {
  parameterPath: ["options", "body"],
  mapper: UpdateLicenseParametersMapper
};

export const body4: OperationParameter = {
  parameterPath: ["options", "body"],
  mapper: RestartLicenseParametersMapper
};

export const parameters1: OperationParameter = {
  parameterPath: ["options", "parameters"],
  mapper: ChamberMapper
};

export const contentType1: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/merge-patch+json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const parameters2: OperationParameter = {
  parameterPath: ["options", "parameters"],
  mapper: WorkloadMapper
};

export const workloadName: OperationURLParameter = {
  parameterPath: "workloadName",
  mapper: {
    serializedName: "workloadName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters3: OperationParameter = {
  parameterPath: ["options", "parameters"],
  mapper: StorageMapper
};

export const storageName: OperationURLParameter = {
  parameterPath: "storageName",
  mapper: {
    serializedName: "storageName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    constraints: {
      MaxLength: 90,
      MinLength: 1
    },
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const fileName: OperationURLParameter = {
  parameterPath: "fileName",
  mapper: {
    serializedName: "fileName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const body5: OperationParameter = {
  parameterPath: ["options", "body"],
  mapper: FilesDownloadRequestParametersMapper
};

export const body6: OperationParameter = {
  parameterPath: ["options", "body"],
  mapper: FilesManageParametersMapper
};

export const requestName: OperationURLParameter = {
  parameterPath: "requestName",
  mapper: {
    serializedName: "requestName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const body7: OperationParameter = {
  parameterPath: ["options", "body"],
  mapper: FileRequestsManageParametersMapper
};
