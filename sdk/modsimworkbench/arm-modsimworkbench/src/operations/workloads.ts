/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { Workloads } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MicrosoftModSimWorkbench } from "../microsoftModSimWorkbench";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  Workload,
  WorkloadsListNextOptionalParams,
  WorkloadsListOptionalParams,
  WorkloadsListResponse,
  WorkloadsStartOptionalParams,
  WorkloadsStopOptionalParams,
  WorkloadsRestartOptionalParams,
  WorkloadsCreateOrUpdateOptionalParams,
  WorkloadsCreateOrUpdateResponse,
  WorkloadsUpdateOptionalParams,
  WorkloadsUpdateResponse,
  WorkloadsGetOptionalParams,
  WorkloadsGetResponse,
  WorkloadsDeleteOptionalParams,
  WorkloadsDeleteResponse,
  WorkloadsListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Workloads operations. */
export class WorkloadsImpl implements Workloads {
  private readonly client: MicrosoftModSimWorkbench;

  /**
   * Initialize a new instance of the class Workloads class.
   * @param client Reference to the service client
   */
  constructor(client: MicrosoftModSimWorkbench) {
    this.client = client;
  }

  /**
   * Lists all workloads.
   * @param resourceGroup The name of the resource group.
   * @param workbenchName The name of the workbench.
   * @param chamberName The name of the chamber.
   * @param options The options parameters.
   */
  public list(
    resourceGroup: string,
    workbenchName: string,
    chamberName: string,
    options?: WorkloadsListOptionalParams
  ): PagedAsyncIterableIterator<Workload> {
    const iter = this.listPagingAll(
      resourceGroup,
      workbenchName,
      chamberName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(
          resourceGroup,
          workbenchName,
          chamberName,
          options,
          settings
        );
      }
    };
  }

  private async *listPagingPage(
    resourceGroup: string,
    workbenchName: string,
    chamberName: string,
    options?: WorkloadsListOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Workload[]> {
    let result: WorkloadsListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(
        resourceGroup,
        workbenchName,
        chamberName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        resourceGroup,
        workbenchName,
        chamberName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    resourceGroup: string,
    workbenchName: string,
    chamberName: string,
    options?: WorkloadsListOptionalParams
  ): AsyncIterableIterator<Workload> {
    for await (const page of this.listPagingPage(
      resourceGroup,
      workbenchName,
      chamberName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Perform Start operation.
   * @param resourceGroup the resource group.
   * @param workbenchName the workbench name.
   * @param chamberName the chamber name.
   * @param name the workload name.
   * @param options The options parameters.
   */
  async beginStart(
    resourceGroup: string,
    workbenchName: string,
    chamberName: string,
    name: string,
    options?: WorkloadsStartOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroup, workbenchName, chamberName, name, options },
      spec: startOperationSpec
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Perform Start operation.
   * @param resourceGroup the resource group.
   * @param workbenchName the workbench name.
   * @param chamberName the chamber name.
   * @param name the workload name.
   * @param options The options parameters.
   */
  async beginStartAndWait(
    resourceGroup: string,
    workbenchName: string,
    chamberName: string,
    name: string,
    options?: WorkloadsStartOptionalParams
  ): Promise<void> {
    const poller = await this.beginStart(
      resourceGroup,
      workbenchName,
      chamberName,
      name,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Perform Stop operation.
   * @param resourceGroup the resource group.
   * @param workbenchName the workbench name.
   * @param chamberName the chamber name.
   * @param name the workload name.
   * @param options The options parameters.
   */
  async beginStop(
    resourceGroup: string,
    workbenchName: string,
    chamberName: string,
    name: string,
    options?: WorkloadsStopOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroup, workbenchName, chamberName, name, options },
      spec: stopOperationSpec
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Perform Stop operation.
   * @param resourceGroup the resource group.
   * @param workbenchName the workbench name.
   * @param chamberName the chamber name.
   * @param name the workload name.
   * @param options The options parameters.
   */
  async beginStopAndWait(
    resourceGroup: string,
    workbenchName: string,
    chamberName: string,
    name: string,
    options?: WorkloadsStopOptionalParams
  ): Promise<void> {
    const poller = await this.beginStop(
      resourceGroup,
      workbenchName,
      chamberName,
      name,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Perform Restart operation.
   * @param resourceGroup the resource group.
   * @param workbenchName the workbench name.
   * @param chamberName the chamber name.
   * @param name the workload name.
   * @param options The options parameters.
   */
  async beginRestart(
    resourceGroup: string,
    workbenchName: string,
    chamberName: string,
    name: string,
    options?: WorkloadsRestartOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroup, workbenchName, chamberName, name, options },
      spec: restartOperationSpec
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Perform Restart operation.
   * @param resourceGroup the resource group.
   * @param workbenchName the workbench name.
   * @param chamberName the chamber name.
   * @param name the workload name.
   * @param options The options parameters.
   */
  async beginRestartAndWait(
    resourceGroup: string,
    workbenchName: string,
    chamberName: string,
    name: string,
    options?: WorkloadsRestartOptionalParams
  ): Promise<void> {
    const poller = await this.beginRestart(
      resourceGroup,
      workbenchName,
      chamberName,
      name,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Creates or updates the specified workload.
   * @param resourceGroup The name of the resource group.
   * @param workbenchName The name of the workbench.
   * @param chamberName The name of the chamber.
   * @param workloadName The name of the workload.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroup: string,
    workbenchName: string,
    chamberName: string,
    workloadName: string,
    options?: WorkloadsCreateOrUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<WorkloadsCreateOrUpdateResponse>,
      WorkloadsCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<WorkloadsCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroup,
        workbenchName,
        chamberName,
        workloadName,
        options
      },
      spec: createOrUpdateOperationSpec
    });
    const poller = await createHttpPoller<
      WorkloadsCreateOrUpdateResponse,
      OperationState<WorkloadsCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Creates or updates the specified workload.
   * @param resourceGroup The name of the resource group.
   * @param workbenchName The name of the workbench.
   * @param chamberName The name of the chamber.
   * @param workloadName The name of the workload.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroup: string,
    workbenchName: string,
    chamberName: string,
    workloadName: string,
    options?: WorkloadsCreateOrUpdateOptionalParams
  ): Promise<WorkloadsCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroup,
      workbenchName,
      chamberName,
      workloadName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Updates the specified workload.
   * @param resourceGroup The name of the resource group.
   * @param workbenchName The name of the workbench.
   * @param chamberName The name of the chamber.
   * @param workloadName The name of the workload.
   * @param options The options parameters.
   */
  update(
    resourceGroup: string,
    workbenchName: string,
    chamberName: string,
    workloadName: string,
    options?: WorkloadsUpdateOptionalParams
  ): Promise<WorkloadsUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroup, workbenchName, chamberName, workloadName, options },
      updateOperationSpec
    );
  }

  /**
   * Gets information about the specified workload.
   * @param resourceGroup The name of the resource group.
   * @param workbenchName The name of the workbench.
   * @param chamberName The name of the chamber.
   * @param workloadName The name of the workload.
   * @param options The options parameters.
   */
  get(
    resourceGroup: string,
    workbenchName: string,
    chamberName: string,
    workloadName: string,
    options?: WorkloadsGetOptionalParams
  ): Promise<WorkloadsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroup, workbenchName, chamberName, workloadName, options },
      getOperationSpec
    );
  }

  /**
   * Deletes the specified workload.
   * @param resourceGroup The name of the resource group.
   * @param workbenchName The name of the workbench.
   * @param chamberName The name of the chamber.
   * @param workloadName The name of the workload.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroup: string,
    workbenchName: string,
    chamberName: string,
    workloadName: string,
    options?: WorkloadsDeleteOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<WorkloadsDeleteResponse>,
      WorkloadsDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<WorkloadsDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroup,
        workbenchName,
        chamberName,
        workloadName,
        options
      },
      spec: deleteOperationSpec
    });
    const poller = await createHttpPoller<
      WorkloadsDeleteResponse,
      OperationState<WorkloadsDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Deletes the specified workload.
   * @param resourceGroup The name of the resource group.
   * @param workbenchName The name of the workbench.
   * @param chamberName The name of the chamber.
   * @param workloadName The name of the workload.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroup: string,
    workbenchName: string,
    chamberName: string,
    workloadName: string,
    options?: WorkloadsDeleteOptionalParams
  ): Promise<WorkloadsDeleteResponse> {
    const poller = await this.beginDelete(
      resourceGroup,
      workbenchName,
      chamberName,
      workloadName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Lists all workloads.
   * @param resourceGroup The name of the resource group.
   * @param workbenchName The name of the workbench.
   * @param chamberName The name of the chamber.
   * @param options The options parameters.
   */
  private _list(
    resourceGroup: string,
    workbenchName: string,
    chamberName: string,
    options?: WorkloadsListOptionalParams
  ): Promise<WorkloadsListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroup, workbenchName, chamberName, options },
      listOperationSpec
    );
  }

  /**
   * ListNext
   * @param resourceGroup The name of the resource group.
   * @param workbenchName The name of the workbench.
   * @param chamberName The name of the chamber.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroup: string,
    workbenchName: string,
    chamberName: string,
    nextLink: string,
    options?: WorkloadsListNextOptionalParams
  ): Promise<WorkloadsListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroup, workbenchName, chamberName, nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const startOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.ModSimWorkbench/workbenches/{workbenchName}/chambers/{chamberName}/workloads/{name}/start",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.name,
    Parameters.workbenchName,
    Parameters.chamberName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const stopOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.ModSimWorkbench/workbenches/{workbenchName}/chambers/{chamberName}/workloads/{name}/stop",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.name,
    Parameters.workbenchName,
    Parameters.chamberName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const restartOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.ModSimWorkbench/workbenches/{workbenchName}/chambers/{chamberName}/workloads/{name}/restart",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.name,
    Parameters.workbenchName,
    Parameters.chamberName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.ModSimWorkbench/workbenches/{workbenchName}/chambers/{chamberName}/workloads/{workloadName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Workload
    },
    201: {
      bodyMapper: Mappers.Workload
    },
    202: {
      bodyMapper: Mappers.Workload
    },
    204: {
      bodyMapper: Mappers.Workload
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.workbenchName,
    Parameters.chamberName,
    Parameters.workloadName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.ModSimWorkbench/workbenches/{workbenchName}/chambers/{chamberName}/workloads/{workloadName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Workload
    },
    201: {
      bodyMapper: Mappers.Workload
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.workbenchName,
    Parameters.chamberName,
    Parameters.workloadName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.ModSimWorkbench/workbenches/{workbenchName}/chambers/{chamberName}/workloads/{workloadName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Workload
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.workbenchName,
    Parameters.chamberName,
    Parameters.workloadName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.ModSimWorkbench/workbenches/{workbenchName}/chambers/{chamberName}/workloads/{workloadName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.Workload
    },
    201: {
      bodyMapper: Mappers.Workload
    },
    202: {
      bodyMapper: Mappers.Workload
    },
    204: {
      bodyMapper: Mappers.Workload
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.workbenchName,
    Parameters.chamberName,
    Parameters.workloadName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.ModSimWorkbench/workbenches/{workbenchName}/chambers/{chamberName}/workloads",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkloadPageableList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.workbenchName,
    Parameters.chamberName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkloadPageableList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.nextLink,
    Parameters.workbenchName,
    Parameters.chamberName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
