/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  CloudJobSchedule,
  JobScheduleListOptionalParams,
  JobScheduleExistsOptionalParams,
  JobScheduleExistsResponse,
  JobScheduleDeleteOptionalParams,
  JobScheduleDeleteResponse,
  JobScheduleGetOptionalParams,
  JobScheduleGetResponse,
  JobSchedulePatchParameter,
  JobSchedulePatchOptionalParams,
  JobSchedulePatchResponse,
  JobScheduleUpdateParameter,
  JobScheduleUpdateOptionalParams,
  JobScheduleUpdateResponse,
  JobScheduleDisableOptionalParams,
  JobScheduleDisableResponse,
  JobScheduleEnableOptionalParams,
  JobScheduleEnableResponse,
  JobScheduleTerminateOptionalParams,
  JobScheduleTerminateResponse,
  JobScheduleAddParameter,
  JobScheduleAddOptionalParams,
  JobScheduleAddResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a JobSchedule. */
export interface JobSchedule {
  /**
   * Lists all of the Job Schedules in the specified Account.
   * @param options The options parameters.
   */
  list(
    options?: JobScheduleListOptionalParams
  ): PagedAsyncIterableIterator<CloudJobSchedule>;
  /**
   * Checks the specified Job Schedule exists.
   * @param jobScheduleId The ID of the Job Schedule which you want to check.
   * @param options The options parameters.
   */
  exists(
    jobScheduleId: string,
    options?: JobScheduleExistsOptionalParams
  ): Promise<JobScheduleExistsResponse>;
  /**
   * When you delete a Job Schedule, this also deletes all Jobs and Tasks under that schedule. When Tasks
   * are deleted, all the files in their working directories on the Compute Nodes are also deleted (the
   * retention period is ignored). The Job Schedule statistics are no longer accessible once the Job
   * Schedule is deleted, though they are still counted towards Account lifetime statistics.
   * @param jobScheduleId The ID of the Job Schedule to delete.
   * @param options The options parameters.
   */
  delete(
    jobScheduleId: string,
    options?: JobScheduleDeleteOptionalParams
  ): Promise<JobScheduleDeleteResponse>;
  /**
   * Gets information about the specified Job Schedule.
   * @param jobScheduleId The ID of the Job Schedule to get.
   * @param options The options parameters.
   */
  get(
    jobScheduleId: string,
    options?: JobScheduleGetOptionalParams
  ): Promise<JobScheduleGetResponse>;
  /**
   * This replaces only the Job Schedule properties specified in the request. For example, if the
   * schedule property is not specified with this request, then the Batch service will keep the existing
   * schedule. Changes to a Job Schedule only impact Jobs created by the schedule after the update has
   * taken place; currently running Jobs are unaffected.
   * @param jobScheduleId The ID of the Job Schedule to update.
   * @param jobSchedulePatchParameter The parameters for the request.
   * @param options The options parameters.
   */
  patch(
    jobScheduleId: string,
    jobSchedulePatchParameter: JobSchedulePatchParameter,
    options?: JobSchedulePatchOptionalParams
  ): Promise<JobSchedulePatchResponse>;
  /**
   * This fully replaces all the updatable properties of the Job Schedule. For example, if the schedule
   * property is not specified with this request, then the Batch service will remove the existing
   * schedule. Changes to a Job Schedule only impact Jobs created by the schedule after the update has
   * taken place; currently running Jobs are unaffected.
   * @param jobScheduleId The ID of the Job Schedule to update.
   * @param jobScheduleUpdateParameter The parameters for the request.
   * @param options The options parameters.
   */
  update(
    jobScheduleId: string,
    jobScheduleUpdateParameter: JobScheduleUpdateParameter,
    options?: JobScheduleUpdateOptionalParams
  ): Promise<JobScheduleUpdateResponse>;
  /**
   * No new Jobs will be created until the Job Schedule is enabled again.
   * @param jobScheduleId The ID of the Job Schedule to disable.
   * @param options The options parameters.
   */
  disable(
    jobScheduleId: string,
    options?: JobScheduleDisableOptionalParams
  ): Promise<JobScheduleDisableResponse>;
  /**
   * Enables a Job Schedule.
   * @param jobScheduleId The ID of the Job Schedule to enable.
   * @param options The options parameters.
   */
  enable(
    jobScheduleId: string,
    options?: JobScheduleEnableOptionalParams
  ): Promise<JobScheduleEnableResponse>;
  /**
   * Terminates a Job Schedule.
   * @param jobScheduleId The ID of the Job Schedule to terminates.
   * @param options The options parameters.
   */
  terminate(
    jobScheduleId: string,
    options?: JobScheduleTerminateOptionalParams
  ): Promise<JobScheduleTerminateResponse>;
  /**
   * Adds a Job Schedule to the specified Account.
   * @param cloudJobSchedule The Job Schedule to be added.
   * @param options The options parameters.
   */
  add(
    cloudJobSchedule: JobScheduleAddParameter,
    options?: JobScheduleAddOptionalParams
  ): Promise<JobScheduleAddResponse>;
}
