/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  CloudTask,
  TaskListOptionalParams,
  TaskAddParameter,
  TaskAddOptionalParams,
  TaskAddResponse,
  TaskAddCollectionParameter,
  TaskAddCollectionOptionalParams,
  TaskAddCollectionResponse,
  TaskDeleteOptionalParams,
  TaskDeleteResponse,
  TaskGetOptionalParams,
  TaskGetResponse,
  TaskUpdateParameter,
  TaskUpdateOptionalParams,
  TaskUpdateResponse,
  TaskListSubtasksOptionalParams,
  TaskListSubtasksResponse,
  TaskTerminateOptionalParams,
  TaskTerminateResponse,
  TaskReactivateOptionalParams,
  TaskReactivateResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Task. */
export interface Task {
  /**
   * For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the
   * primary Task. Use the list subtasks API to retrieve information about subtasks.
   * @param jobId The ID of the Job.
   * @param options The options parameters.
   */
  list(
    jobId: string,
    options?: TaskListOptionalParams
  ): PagedAsyncIterableIterator<CloudTask>;
  /**
   * The maximum lifetime of a Task from addition to completion is 180 days. If a Task has not completed
   * within 180 days of being added it will be terminated by the Batch service and left in whatever state
   * it was in at that time.
   * @param jobId The ID of the Job to which the Task is to be added.
   * @param task The Task to be added.
   * @param options The options parameters.
   */
  add(
    jobId: string,
    task: TaskAddParameter,
    options?: TaskAddOptionalParams
  ): Promise<TaskAddResponse>;
  /**
   * Note that each Task must have a unique ID. The Batch service may not return the results for each
   * Task in the same order the Tasks were submitted in this request. If the server times out or the
   * connection is closed during the request, the request may have been partially or fully processed, or
   * not at all. In such cases, the user should re-issue the request. Note that it is up to the user to
   * correctly handle failures when re-issuing a request. For example, you should use the same Task IDs
   * during a retry so that if the prior operation succeeded, the retry will not create extra Tasks
   * unexpectedly. If the response contains any Tasks which failed to add, a client can retry the
   * request. In a retry, it is most efficient to resubmit only Tasks that failed to add, and to omit
   * Tasks that were successfully added on the first attempt. The maximum lifetime of a Task from
   * addition to completion is 180 days. If a Task has not completed within 180 days of being added it
   * will be terminated by the Batch service and left in whatever state it was in at that time.
   * @param jobId The ID of the Job to which the Task collection is to be added.
   * @param taskCollection The Tasks to be added.
   * @param options The options parameters.
   */
  addCollection(
    jobId: string,
    taskCollection: TaskAddCollectionParameter,
    options?: TaskAddCollectionOptionalParams
  ): Promise<TaskAddCollectionResponse>;
  /**
   * When a Task is deleted, all of the files in its directory on the Compute Node where it ran are also
   * deleted (regardless of the retention time). For multi-instance Tasks, the delete Task operation
   * applies synchronously to the primary task; subtasks and their files are then deleted asynchronously
   * in the background.
   * @param jobId The ID of the Job from which to delete the Task.
   * @param taskId The ID of the Task to delete.
   * @param options The options parameters.
   */
  delete(
    jobId: string,
    taskId: string,
    options?: TaskDeleteOptionalParams
  ): Promise<TaskDeleteResponse>;
  /**
   * For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the
   * primary Task. Use the list subtasks API to retrieve information about subtasks.
   * @param jobId The ID of the Job that contains the Task.
   * @param taskId The ID of the Task to get information about.
   * @param options The options parameters.
   */
  get(
    jobId: string,
    taskId: string,
    options?: TaskGetOptionalParams
  ): Promise<TaskGetResponse>;
  /**
   * Updates the properties of the specified Task.
   * @param jobId The ID of the Job containing the Task.
   * @param taskId The ID of the Task to update.
   * @param taskUpdateParameter The parameters for the request.
   * @param options The options parameters.
   */
  update(
    jobId: string,
    taskId: string,
    taskUpdateParameter: TaskUpdateParameter,
    options?: TaskUpdateOptionalParams
  ): Promise<TaskUpdateResponse>;
  /**
   * If the Task is not a multi-instance Task then this returns an empty collection.
   * @param jobId The ID of the Job.
   * @param taskId The ID of the Task.
   * @param options The options parameters.
   */
  listSubtasks(
    jobId: string,
    taskId: string,
    options?: TaskListSubtasksOptionalParams
  ): Promise<TaskListSubtasksResponse>;
  /**
   * When the Task has been terminated, it moves to the completed state. For multi-instance Tasks, the
   * terminate Task operation applies synchronously to the primary task; subtasks are then terminated
   * asynchronously in the background.
   * @param jobId The ID of the Job containing the Task.
   * @param taskId The ID of the Task to terminate.
   * @param options The options parameters.
   */
  terminate(
    jobId: string,
    taskId: string,
    options?: TaskTerminateOptionalParams
  ): Promise<TaskTerminateResponse>;
  /**
   * Reactivation makes a Task eligible to be retried again up to its maximum retry count. The Task's
   * state is changed to active. As the Task is no longer in the completed state, any previous exit code
   * or failure information is no longer available after reactivation. Each time a Task is reactivated,
   * its retry count is reset to 0. Reactivation will fail for Tasks that are not completed or that
   * previously completed successfully (with an exit code of 0). Additionally, it will fail if the Job
   * has completed (or is terminating or deleting).
   * @param jobId The ID of the Job containing the Task.
   * @param taskId The ID of the Task to reactivate.
   * @param options The options parameters.
   */
  reactivate(
    jobId: string,
    taskId: string,
    options?: TaskReactivateOptionalParams
  ): Promise<TaskReactivateResponse>;
}
