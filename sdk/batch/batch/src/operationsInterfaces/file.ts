/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  NodeFile,
  FileListFromTaskOptionalParams,
  FileListFromComputeNodeOptionalParams,
  FileDeleteFromTaskOptionalParams,
  FileDeleteFromTaskResponse,
  FileGetFromTaskOptionalParams,
  FileGetFromTaskResponse,
  FileGetPropertiesFromTaskOptionalParams,
  FileGetPropertiesFromTaskResponse,
  FileDeleteFromComputeNodeOptionalParams,
  FileDeleteFromComputeNodeResponse,
  FileGetFromComputeNodeOptionalParams,
  FileGetFromComputeNodeResponse,
  FileGetPropertiesFromComputeNodeOptionalParams,
  FileGetPropertiesFromComputeNodeResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a File. */
export interface File {
  /**
   * Lists the files in a Task's directory on its Compute Node.
   * @param jobId The ID of the Job that contains the Task.
   * @param taskId The ID of the Task whose files you want to list.
   * @param options The options parameters.
   */
  listFromTask(
    jobId: string,
    taskId: string,
    options?: FileListFromTaskOptionalParams
  ): PagedAsyncIterableIterator<NodeFile>;
  /**
   * Lists all of the files in Task directories on the specified Compute Node.
   * @param poolId The ID of the Pool that contains the Compute Node.
   * @param nodeId The ID of the Compute Node whose files you want to list.
   * @param options The options parameters.
   */
  listFromComputeNode(
    poolId: string,
    nodeId: string,
    options?: FileListFromComputeNodeOptionalParams
  ): PagedAsyncIterableIterator<NodeFile>;
  /**
   * Deletes the specified Task file from the Compute Node where the Task ran.
   * @param jobId The ID of the Job that contains the Task.
   * @param taskId The ID of the Task whose file you want to delete.
   * @param filePath The path to the Task file or directory that you want to delete.
   * @param options The options parameters.
   */
  deleteFromTask(
    jobId: string,
    taskId: string,
    filePath: string,
    options?: FileDeleteFromTaskOptionalParams
  ): Promise<FileDeleteFromTaskResponse>;
  /**
   * Returns the content of the specified Task file.
   * @param jobId The ID of the Job that contains the Task.
   * @param taskId The ID of the Task whose file you want to retrieve.
   * @param filePath The path to the Task file that you want to get the content of.
   * @param options The options parameters.
   */
  getFromTask(
    jobId: string,
    taskId: string,
    filePath: string,
    options?: FileGetFromTaskOptionalParams
  ): Promise<FileGetFromTaskResponse>;
  /**
   * Gets the properties of the specified Task file.
   * @param jobId The ID of the Job that contains the Task.
   * @param taskId The ID of the Task whose file you want to get the properties of.
   * @param filePath The path to the Task file that you want to get the properties of.
   * @param options The options parameters.
   */
  getPropertiesFromTask(
    jobId: string,
    taskId: string,
    filePath: string,
    options?: FileGetPropertiesFromTaskOptionalParams
  ): Promise<FileGetPropertiesFromTaskResponse>;
  /**
   * Deletes the specified file from the Compute Node.
   * @param poolId The ID of the Pool that contains the Compute Node.
   * @param nodeId The ID of the Compute Node from which you want to delete the file.
   * @param filePath The path to the file or directory that you want to delete.
   * @param options The options parameters.
   */
  deleteFromComputeNode(
    poolId: string,
    nodeId: string,
    filePath: string,
    options?: FileDeleteFromComputeNodeOptionalParams
  ): Promise<FileDeleteFromComputeNodeResponse>;
  /**
   * Returns the content of the specified Compute Node file.
   * @param poolId The ID of the Pool that contains the Compute Node.
   * @param nodeId The ID of the Compute Node that contains the file.
   * @param filePath The path to the Compute Node file that you want to get the content of.
   * @param options The options parameters.
   */
  getFromComputeNode(
    poolId: string,
    nodeId: string,
    filePath: string,
    options?: FileGetFromComputeNodeOptionalParams
  ): Promise<FileGetFromComputeNodeResponse>;
  /**
   * Gets the properties of the specified Compute Node file.
   * @param poolId The ID of the Pool that contains the Compute Node.
   * @param nodeId The ID of the Compute Node that contains the file.
   * @param filePath The path to the Compute Node file that you want to get the properties of.
   * @param options The options parameters.
   */
  getPropertiesFromComputeNode(
    poolId: string,
    nodeId: string,
    filePath: string,
    options?: FileGetPropertiesFromComputeNodeOptionalParams
  ): Promise<FileGetPropertiesFromComputeNodeResponse>;
}
