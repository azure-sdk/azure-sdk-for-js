/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  Certificate,
  CertificateListOptionalParams,
  CertificateAddParameter,
  CertificateAddOptionalParams,
  CertificateAddResponse,
  CertificateCancelDeletionOptionalParams,
  CertificateCancelDeletionResponse,
  CertificateDeleteOptionalParams,
  CertificateDeleteResponse,
  CertificateGetOptionalParams,
  CertificateGetResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a CertificateOperations. */
export interface CertificateOperations {
  /**
   * Lists all of the Certificates that have been added to the specified Account.
   * @param options The options parameters.
   */
  list(
    options?: CertificateListOptionalParams
  ): PagedAsyncIterableIterator<Certificate>;
  /**
   * Adds a Certificate to the specified Account.
   * @param certificate The Certificate to be added.
   * @param options The options parameters.
   */
  add(
    certificate: CertificateAddParameter,
    options?: CertificateAddOptionalParams
  ): Promise<CertificateAddResponse>;
  /**
   * If you try to delete a Certificate that is being used by a Pool or Compute Node, the status of the
   * Certificate changes to deleteFailed. If you decide that you want to continue using the Certificate,
   * you can use this operation to set the status of the Certificate back to active. If you intend to
   * delete the Certificate, you do not need to run this operation after the deletion failed. You must
   * make sure that the Certificate is not being used by any resources, and then you can try again to
   * delete the Certificate.
   * @param thumbprintAlgorithm The algorithm used to derive the thumbprint parameter. This must be sha1.
   * @param thumbprint The thumbprint of the Certificate being deleted.
   * @param options The options parameters.
   */
  cancelDeletion(
    thumbprintAlgorithm: string,
    thumbprint: string,
    options?: CertificateCancelDeletionOptionalParams
  ): Promise<CertificateCancelDeletionResponse>;
  /**
   * You cannot delete a Certificate if a resource (Pool or Compute Node) is using it. Before you can
   * delete a Certificate, you must therefore make sure that the Certificate is not associated with any
   * existing Pools, the Certificate is not installed on any Nodes (even if you remove a Certificate from
   * a Pool, it is not removed from existing Compute Nodes in that Pool until they restart), and no
   * running Tasks depend on the Certificate. If you try to delete a Certificate that is in use, the
   * deletion fails. The Certificate status changes to deleteFailed. You can use Cancel Delete
   * Certificate to set the status back to active if you decide that you want to continue using the
   * Certificate.
   * @param thumbprintAlgorithm The algorithm used to derive the thumbprint parameter. This must be sha1.
   * @param thumbprint The thumbprint of the Certificate to be deleted.
   * @param options The options parameters.
   */
  delete(
    thumbprintAlgorithm: string,
    thumbprint: string,
    options?: CertificateDeleteOptionalParams
  ): Promise<CertificateDeleteResponse>;
  /**
   * Gets information about the specified Certificate.
   * @param thumbprintAlgorithm The algorithm used to derive the thumbprint parameter. This must be sha1.
   * @param thumbprint The thumbprint of the Certificate to get.
   * @param options The options parameters.
   */
  get(
    thumbprintAlgorithm: string,
    thumbprint: string,
    options?: CertificateGetOptionalParams
  ): Promise<CertificateGetResponse>;
}
