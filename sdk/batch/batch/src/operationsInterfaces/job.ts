/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  CloudJob,
  JobListOptionalParams,
  JobListFromJobScheduleOptionalParams,
  JobPreparationAndReleaseTaskExecutionInformation,
  JobListPreparationAndReleaseTaskStatusOptionalParams,
  JobGetAllLifetimeStatisticsOptionalParams,
  JobGetAllLifetimeStatisticsResponse,
  JobDeleteOptionalParams,
  JobDeleteResponse,
  JobGetOptionalParams,
  JobGetResponse,
  JobPatchParameter,
  JobPatchOptionalParams,
  JobPatchResponse,
  JobUpdateParameter,
  JobUpdateOptionalParams,
  JobUpdateResponse,
  JobDisableParameter,
  JobDisableOptionalParams,
  JobDisableResponse,
  JobEnableOptionalParams,
  JobEnableResponse,
  JobTerminateOptionalParams,
  JobTerminateResponse,
  JobAddParameter,
  JobAddOptionalParams,
  JobAddResponse,
  JobGetTaskCountsOptionalParams,
  JobGetTaskCountsResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Job. */
export interface Job {
  /**
   * Lists all of the Jobs in the specified Account.
   * @param options The options parameters.
   */
  list(options?: JobListOptionalParams): PagedAsyncIterableIterator<CloudJob>;
  /**
   * Lists the Jobs that have been created under the specified Job Schedule.
   * @param jobScheduleId The ID of the Job Schedule from which you want to get a list of Jobs.
   * @param options The options parameters.
   */
  listFromJobSchedule(
    jobScheduleId: string,
    options?: JobListFromJobScheduleOptionalParams
  ): PagedAsyncIterableIterator<CloudJob>;
  /**
   * This API returns the Job Preparation and Job Release Task status on all Compute Nodes that have run
   * the Job Preparation or Job Release Task. This includes Compute Nodes which have since been removed
   * from the Pool. If this API is invoked on a Job which has no Job Preparation or Job Release Task, the
   * Batch service returns HTTP status code 409 (Conflict) with an error code of
   * JobPreparationTaskNotSpecified.
   * @param jobId The ID of the Job.
   * @param options The options parameters.
   */
  listPreparationAndReleaseTaskStatus(
    jobId: string,
    options?: JobListPreparationAndReleaseTaskStatusOptionalParams
  ): PagedAsyncIterableIterator<
    JobPreparationAndReleaseTaskExecutionInformation
  >;
  /**
   * Statistics are aggregated across all Jobs that have ever existed in the Account, from Account
   * creation to the last update time of the statistics. The statistics may not be immediately available.
   * The Batch service performs periodic roll-up of statistics. The typical delay is about 30 minutes.
   * @param options The options parameters.
   */
  getAllLifetimeStatistics(
    options?: JobGetAllLifetimeStatisticsOptionalParams
  ): Promise<JobGetAllLifetimeStatisticsResponse>;
  /**
   * Deleting a Job also deletes all Tasks that are part of that Job, and all Job statistics. This also
   * overrides the retention period for Task data; that is, if the Job contains Tasks which are still
   * retained on Compute Nodes, the Batch services deletes those Tasks' working directories and all their
   * contents.  When a Delete Job request is received, the Batch service sets the Job to the deleting
   * state. All update operations on a Job that is in deleting state will fail with status code 409
   * (Conflict), with additional information indicating that the Job is being deleted.
   * @param jobId The ID of the Job to delete.
   * @param options The options parameters.
   */
  delete(
    jobId: string,
    options?: JobDeleteOptionalParams
  ): Promise<JobDeleteResponse>;
  /**
   * Gets information about the specified Job.
   * @param jobId The ID of the Job.
   * @param options The options parameters.
   */
  get(jobId: string, options?: JobGetOptionalParams): Promise<JobGetResponse>;
  /**
   * This replaces only the Job properties specified in the request. For example, if the Job has
   * constraints, and a request does not specify the constraints element, then the Job keeps the existing
   * constraints.
   * @param jobId The ID of the Job whose properties you want to update.
   * @param jobPatchParameter The parameters for the request.
   * @param options The options parameters.
   */
  patch(
    jobId: string,
    jobPatchParameter: JobPatchParameter,
    options?: JobPatchOptionalParams
  ): Promise<JobPatchResponse>;
  /**
   * This fully replaces all the updatable properties of the Job. For example, if the Job has constraints
   * associated with it and if constraints is not specified with this request, then the Batch service
   * will remove the existing constraints.
   * @param jobId The ID of the Job whose properties you want to update.
   * @param jobUpdateParameter The parameters for the request.
   * @param options The options parameters.
   */
  update(
    jobId: string,
    jobUpdateParameter: JobUpdateParameter,
    options?: JobUpdateOptionalParams
  ): Promise<JobUpdateResponse>;
  /**
   * The Batch Service immediately moves the Job to the disabling state. Batch then uses the disableTasks
   * parameter to determine what to do with the currently running Tasks of the Job. The Job remains in
   * the disabling state until the disable operation is completed and all Tasks have been dealt with
   * according to the disableTasks option; the Job then moves to the disabled state. No new Tasks are
   * started under the Job until it moves back to active state. If you try to disable a Job that is in
   * any state other than active, disabling, or disabled, the request fails with status code 409.
   * @param jobId The ID of the Job to disable.
   * @param jobDisableParameter The parameters for the request.
   * @param options The options parameters.
   */
  disable(
    jobId: string,
    jobDisableParameter: JobDisableParameter,
    options?: JobDisableOptionalParams
  ): Promise<JobDisableResponse>;
  /**
   * When you call this API, the Batch service sets a disabled Job to the enabling state. After the this
   * operation is completed, the Job moves to the active state, and scheduling of new Tasks under the Job
   * resumes. The Batch service does not allow a Task to remain in the active state for more than 180
   * days. Therefore, if you enable a Job containing active Tasks which were added more than 180 days
   * ago, those Tasks will not run.
   * @param jobId The ID of the Job to enable.
   * @param options The options parameters.
   */
  enable(
    jobId: string,
    options?: JobEnableOptionalParams
  ): Promise<JobEnableResponse>;
  /**
   * When a Terminate Job request is received, the Batch service sets the Job to the terminating state.
   * The Batch service then terminates any running Tasks associated with the Job and runs any required
   * Job release Tasks. Then the Job moves into the completed state. If there are any Tasks in the Job in
   * the active state, they will remain in the active state. Once a Job is terminated, new Tasks cannot
   * be added and any remaining active Tasks will not be scheduled.
   * @param jobId The ID of the Job to terminate.
   * @param options The options parameters.
   */
  terminate(
    jobId: string,
    options?: JobTerminateOptionalParams
  ): Promise<JobTerminateResponse>;
  /**
   * The Batch service supports two ways to control the work done as part of a Job. In the first
   * approach, the user specifies a Job Manager Task. The Batch service launches this Task when it is
   * ready to start the Job. The Job Manager Task controls all other Tasks that run under this Job, by
   * using the Task APIs. In the second approach, the user directly controls the execution of Tasks under
   * an active Job, by using the Task APIs. Also note: when naming Jobs, avoid including sensitive
   * information such as user names or secret project names. This information may appear in telemetry
   * logs accessible to Microsoft Support engineers.
   * @param job The Job to be added.
   * @param options The options parameters.
   */
  add(
    job: JobAddParameter,
    options?: JobAddOptionalParams
  ): Promise<JobAddResponse>;
  /**
   * Task counts provide a count of the Tasks by active, running or completed Task state, and a count of
   * Tasks which succeeded or failed. Tasks in the preparing state are counted as running. Note that the
   * numbers returned may not always be up to date. If you need exact task counts, use a list query.
   * @param jobId The ID of the Job.
   * @param options The options parameters.
   */
  getTaskCounts(
    jobId: string,
    options?: JobGetTaskCountsOptionalParams
  ): Promise<JobGetTaskCountsResponse>;
}
