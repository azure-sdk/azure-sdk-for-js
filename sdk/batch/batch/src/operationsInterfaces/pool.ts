/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  PoolUsageMetrics,
  PoolListUsageMetricsOptionalParams,
  CloudPool,
  PoolListOptionalParams,
  PoolGetAllLifetimeStatisticsOptionalParams,
  PoolGetAllLifetimeStatisticsResponse,
  PoolAddParameter,
  PoolAddOptionalParams,
  PoolAddResponse,
  PoolDeleteOptionalParams,
  PoolDeleteResponse,
  PoolExistsOptionalParams,
  PoolExistsResponse,
  PoolGetOptionalParams,
  PoolGetResponse,
  PoolPatchParameter,
  PoolPatchOptionalParams,
  PoolPatchResponse,
  PoolDisableAutoScaleOptionalParams,
  PoolDisableAutoScaleResponse,
  PoolEnableAutoScaleParameter,
  PoolEnableAutoScaleOptionalParams,
  PoolEnableAutoScaleResponse,
  PoolEvaluateAutoScaleParameter,
  PoolEvaluateAutoScaleOptionalParams,
  PoolEvaluateAutoScaleResponse,
  PoolResizeParameter,
  PoolResizeOptionalParams,
  PoolResizeResponse,
  PoolStopResizeOptionalParams,
  PoolStopResizeResponse,
  PoolUpdatePropertiesParameter,
  PoolUpdatePropertiesOptionalParams,
  PoolUpdatePropertiesResponse,
  NodeRemoveParameter,
  PoolRemoveNodesOptionalParams,
  PoolRemoveNodesResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Pool. */
export interface Pool {
  /**
   * If you do not specify a $filter clause including a poolId, the response includes all Pools that
   * existed in the Account in the time range of the returned aggregation intervals. If you do not
   * specify a $filter clause including a startTime or endTime these filters default to the start and end
   * times of the last aggregation interval currently available; that is, only the last aggregation
   * interval is returned.
   * @param options The options parameters.
   */
  listUsageMetrics(
    options?: PoolListUsageMetricsOptionalParams
  ): PagedAsyncIterableIterator<PoolUsageMetrics>;
  /**
   * Lists all of the Pools in the specified Account.
   * @param options The options parameters.
   */
  list(options?: PoolListOptionalParams): PagedAsyncIterableIterator<CloudPool>;
  /**
   * Statistics are aggregated across all Pools that have ever existed in the Account, from Account
   * creation to the last update time of the statistics. The statistics may not be immediately available.
   * The Batch service performs periodic roll-up of statistics. The typical delay is about 30 minutes.
   * @param options The options parameters.
   */
  getAllLifetimeStatistics(
    options?: PoolGetAllLifetimeStatisticsOptionalParams
  ): Promise<PoolGetAllLifetimeStatisticsResponse>;
  /**
   * When naming Pools, avoid including sensitive information such as user names or secret project names.
   * This information may appear in telemetry logs accessible to Microsoft Support engineers.
   * @param pool The Pool to be added.
   * @param options The options parameters.
   */
  add(
    pool: PoolAddParameter,
    options?: PoolAddOptionalParams
  ): Promise<PoolAddResponse>;
  /**
   * When you request that a Pool be deleted, the following actions occur: the Pool state is set to
   * deleting; any ongoing resize operation on the Pool are stopped; the Batch service starts resizing
   * the Pool to zero Compute Nodes; any Tasks running on existing Compute Nodes are terminated and
   * requeued (as if a resize Pool operation had been requested with the default requeue option);
   * finally, the Pool is removed from the system. Because running Tasks are requeued, the user can rerun
   * these Tasks by updating their Job to target a different Pool. The Tasks can then run on the new
   * Pool. If you want to override the requeue behavior, then you should call resize Pool explicitly to
   * shrink the Pool to zero size before deleting the Pool. If you call an Update, Patch or Delete API on
   * a Pool in the deleting state, it will fail with HTTP status code 409 with error code
   * PoolBeingDeleted.
   * @param poolId The ID of the Pool to delete.
   * @param options The options parameters.
   */
  delete(
    poolId: string,
    options?: PoolDeleteOptionalParams
  ): Promise<PoolDeleteResponse>;
  /**
   * Gets basic properties of a Pool.
   * @param poolId The ID of the Pool to get.
   * @param options The options parameters.
   */
  exists(
    poolId: string,
    options?: PoolExistsOptionalParams
  ): Promise<PoolExistsResponse>;
  /**
   * Gets information about the specified Pool.
   * @param poolId The ID of the Pool to get.
   * @param options The options parameters.
   */
  get(
    poolId: string,
    options?: PoolGetOptionalParams
  ): Promise<PoolGetResponse>;
  /**
   * This only replaces the Pool properties specified in the request. For example, if the Pool has a
   * StartTask associated with it, and a request does not specify a StartTask element, then the Pool
   * keeps the existing StartTask.
   * @param poolId The ID of the Pool to update.
   * @param poolPatchParameter The parameters for the request.
   * @param options The options parameters.
   */
  patch(
    poolId: string,
    poolPatchParameter: PoolPatchParameter,
    options?: PoolPatchOptionalParams
  ): Promise<PoolPatchResponse>;
  /**
   * Disables automatic scaling for a Pool.
   * @param poolId The ID of the Pool on which to disable automatic scaling.
   * @param options The options parameters.
   */
  disableAutoScale(
    poolId: string,
    options?: PoolDisableAutoScaleOptionalParams
  ): Promise<PoolDisableAutoScaleResponse>;
  /**
   * You cannot enable automatic scaling on a Pool if a resize operation is in progress on the Pool. If
   * automatic scaling of the Pool is currently disabled, you must specify a valid autoscale formula as
   * part of the request. If automatic scaling of the Pool is already enabled, you may specify a new
   * autoscale formula and/or a new evaluation interval. You cannot call this API for the same Pool more
   * than once every 30 seconds.
   * @param poolId The ID of the Pool on which to enable automatic scaling.
   * @param poolEnableAutoScaleParameter The parameters for the request.
   * @param options The options parameters.
   */
  enableAutoScale(
    poolId: string,
    poolEnableAutoScaleParameter: PoolEnableAutoScaleParameter,
    options?: PoolEnableAutoScaleOptionalParams
  ): Promise<PoolEnableAutoScaleResponse>;
  /**
   * This API is primarily for validating an autoscale formula, as it simply returns the result without
   * applying the formula to the Pool. The Pool must have auto scaling enabled in order to evaluate a
   * formula.
   * @param poolId The ID of the Pool on which to evaluate the automatic scaling formula.
   * @param poolEvaluateAutoScaleParameter The parameters for the request.
   * @param options The options parameters.
   */
  evaluateAutoScale(
    poolId: string,
    poolEvaluateAutoScaleParameter: PoolEvaluateAutoScaleParameter,
    options?: PoolEvaluateAutoScaleOptionalParams
  ): Promise<PoolEvaluateAutoScaleResponse>;
  /**
   * You can only resize a Pool when its allocation state is steady. If the Pool is already resizing, the
   * request fails with status code 409. When you resize a Pool, the Pool's allocation state changes from
   * steady to resizing. You cannot resize Pools which are configured for automatic scaling. If you try
   * to do this, the Batch service returns an error 409. If you resize a Pool downwards, the Batch
   * service chooses which Compute Nodes to remove. To remove specific Compute Nodes, use the Pool remove
   * Compute Nodes API instead.
   * @param poolId The ID of the Pool to resize.
   * @param poolResizeParameter The parameters for the request.
   * @param options The options parameters.
   */
  resize(
    poolId: string,
    poolResizeParameter: PoolResizeParameter,
    options?: PoolResizeOptionalParams
  ): Promise<PoolResizeResponse>;
  /**
   * This does not restore the Pool to its previous state before the resize operation: it only stops any
   * further changes being made, and the Pool maintains its current state. After stopping, the Pool
   * stabilizes at the number of Compute Nodes it was at when the stop operation was done. During the
   * stop operation, the Pool allocation state changes first to stopping and then to steady. A resize
   * operation need not be an explicit resize Pool request; this API can also be used to halt the initial
   * sizing of the Pool when it is created.
   * @param poolId The ID of the Pool whose resizing you want to stop.
   * @param options The options parameters.
   */
  stopResize(
    poolId: string,
    options?: PoolStopResizeOptionalParams
  ): Promise<PoolStopResizeResponse>;
  /**
   * This fully replaces all the updatable properties of the Pool. For example, if the Pool has a
   * StartTask associated with it and if StartTask is not specified with this request, then the Batch
   * service will remove the existing StartTask.
   * @param poolId The ID of the Pool to update.
   * @param poolUpdatePropertiesParameter The parameters for the request.
   * @param options The options parameters.
   */
  updateProperties(
    poolId: string,
    poolUpdatePropertiesParameter: PoolUpdatePropertiesParameter,
    options?: PoolUpdatePropertiesOptionalParams
  ): Promise<PoolUpdatePropertiesResponse>;
  /**
   * This operation can only run when the allocation state of the Pool is steady. When this operation
   * runs, the allocation state changes from steady to resizing. Each request may remove up to 100 nodes.
   * @param poolId The ID of the Pool from which you want to remove Compute Nodes.
   * @param nodeRemoveParameter The parameters for the request.
   * @param options The options parameters.
   */
  removeNodes(
    poolId: string,
    nodeRemoveParameter: NodeRemoveParameter,
    options?: PoolRemoveNodesOptionalParams
  ): Promise<PoolRemoveNodesResponse>;
}
