/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  ComputeNode,
  ComputeNodeListOptionalParams,
  ComputeNodeUser,
  ComputeNodeAddUserOptionalParams,
  ComputeNodeAddUserResponse,
  ComputeNodeDeleteUserOptionalParams,
  ComputeNodeDeleteUserResponse,
  NodeUpdateUserParameter,
  ComputeNodeUpdateUserOptionalParams,
  ComputeNodeUpdateUserResponse,
  ComputeNodeGetOptionalParams,
  ComputeNodeGetResponse,
  ComputeNodeRebootOptionalParams,
  ComputeNodeRebootResponse,
  ComputeNodeReimageOptionalParams,
  ComputeNodeReimageResponse,
  ComputeNodeDisableSchedulingOptionalParams,
  ComputeNodeDisableSchedulingResponse,
  ComputeNodeEnableSchedulingOptionalParams,
  ComputeNodeEnableSchedulingResponse,
  ComputeNodeGetRemoteLoginSettingsOptionalParams,
  ComputeNodeGetRemoteLoginSettingsResponse,
  ComputeNodeGetRemoteDesktopOptionalParams,
  ComputeNodeGetRemoteDesktopResponse,
  UploadBatchServiceLogsConfiguration,
  ComputeNodeUploadBatchServiceLogsOptionalParams,
  ComputeNodeUploadBatchServiceLogsResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a ComputeNodeOperations. */
export interface ComputeNodeOperations {
  /**
   * Lists the Compute Nodes in the specified Pool.
   * @param poolId The ID of the Pool from which you want to list Compute Nodes.
   * @param options The options parameters.
   */
  list(
    poolId: string,
    options?: ComputeNodeListOptionalParams
  ): PagedAsyncIterableIterator<ComputeNode>;
  /**
   * You can add a user Account to a Compute Node only when it is in the idle or running state.
   * @param poolId The ID of the Pool that contains the Compute Node.
   * @param nodeId The ID of the machine on which you want to create a user Account.
   * @param user The user Account to be created.
   * @param options The options parameters.
   */
  addUser(
    poolId: string,
    nodeId: string,
    user: ComputeNodeUser,
    options?: ComputeNodeAddUserOptionalParams
  ): Promise<ComputeNodeAddUserResponse>;
  /**
   * You can delete a user Account to a Compute Node only when it is in the idle or running state.
   * @param poolId The ID of the Pool that contains the Compute Node.
   * @param nodeId The ID of the machine on which you want to delete a user Account.
   * @param userName The name of the user Account to delete.
   * @param options The options parameters.
   */
  deleteUser(
    poolId: string,
    nodeId: string,
    userName: string,
    options?: ComputeNodeDeleteUserOptionalParams
  ): Promise<ComputeNodeDeleteUserResponse>;
  /**
   * This operation replaces of all the updatable properties of the Account. For example, if the
   * expiryTime element is not specified, the current value is replaced with the default value, not left
   * unmodified. You can update a user Account on a Compute Node only when it is in the idle or running
   * state.
   * @param poolId The ID of the Pool that contains the Compute Node.
   * @param nodeId The ID of the machine on which you want to update a user Account.
   * @param userName The name of the user Account to update.
   * @param nodeUpdateUserParameter The parameters for the request.
   * @param options The options parameters.
   */
  updateUser(
    poolId: string,
    nodeId: string,
    userName: string,
    nodeUpdateUserParameter: NodeUpdateUserParameter,
    options?: ComputeNodeUpdateUserOptionalParams
  ): Promise<ComputeNodeUpdateUserResponse>;
  /**
   * Gets information about the specified Compute Node.
   * @param poolId The ID of the Pool that contains the Compute Node.
   * @param nodeId The ID of the Compute Node that you want to get information about.
   * @param options The options parameters.
   */
  get(
    poolId: string,
    nodeId: string,
    options?: ComputeNodeGetOptionalParams
  ): Promise<ComputeNodeGetResponse>;
  /**
   * You can restart a Compute Node only if it is in an idle or running state.
   * @param poolId The ID of the Pool that contains the Compute Node.
   * @param nodeId The ID of the Compute Node that you want to restart.
   * @param options The options parameters.
   */
  reboot(
    poolId: string,
    nodeId: string,
    options?: ComputeNodeRebootOptionalParams
  ): Promise<ComputeNodeRebootResponse>;
  /**
   * You can reinstall the operating system on a Compute Node only if it is in an idle or running state.
   * This API can be invoked only on Pools created with the cloud service configuration property.
   * @param poolId The ID of the Pool that contains the Compute Node.
   * @param nodeId The ID of the Compute Node that you want to restart.
   * @param options The options parameters.
   */
  reimage(
    poolId: string,
    nodeId: string,
    options?: ComputeNodeReimageOptionalParams
  ): Promise<ComputeNodeReimageResponse>;
  /**
   * You can disable Task scheduling on a Compute Node only if its current scheduling state is enabled.
   * @param poolId The ID of the Pool that contains the Compute Node.
   * @param nodeId The ID of the Compute Node on which you want to disable Task scheduling.
   * @param options The options parameters.
   */
  disableScheduling(
    poolId: string,
    nodeId: string,
    options?: ComputeNodeDisableSchedulingOptionalParams
  ): Promise<ComputeNodeDisableSchedulingResponse>;
  /**
   * You can enable Task scheduling on a Compute Node only if its current scheduling state is disabled
   * @param poolId The ID of the Pool that contains the Compute Node.
   * @param nodeId The ID of the Compute Node on which you want to enable Task scheduling.
   * @param options The options parameters.
   */
  enableScheduling(
    poolId: string,
    nodeId: string,
    options?: ComputeNodeEnableSchedulingOptionalParams
  ): Promise<ComputeNodeEnableSchedulingResponse>;
  /**
   * Before you can remotely login to a Compute Node using the remote login settings, you must create a
   * user Account on the Compute Node. This API can be invoked only on Pools created with the virtual
   * machine configuration property. For Pools created with a cloud service configuration, see the
   * GetRemoteDesktop API.
   * @param poolId The ID of the Pool that contains the Compute Node.
   * @param nodeId The ID of the Compute Node for which to obtain the remote login settings.
   * @param options The options parameters.
   */
  getRemoteLoginSettings(
    poolId: string,
    nodeId: string,
    options?: ComputeNodeGetRemoteLoginSettingsOptionalParams
  ): Promise<ComputeNodeGetRemoteLoginSettingsResponse>;
  /**
   * Before you can access a Compute Node by using the RDP file, you must create a user Account on the
   * Compute Node. This API can only be invoked on Pools created with a cloud service configuration. For
   * Pools created with a virtual machine configuration, see the GetRemoteLoginSettings API.
   * @param poolId The ID of the Pool that contains the Compute Node.
   * @param nodeId The ID of the Compute Node for which you want to get the Remote Desktop Protocol file.
   * @param options The options parameters.
   */
  getRemoteDesktop(
    poolId: string,
    nodeId: string,
    options?: ComputeNodeGetRemoteDesktopOptionalParams
  ): Promise<ComputeNodeGetRemoteDesktopResponse>;
  /**
   * This is for gathering Azure Batch service log files in an automated fashion from Compute Nodes if
   * you are experiencing an error and wish to escalate to Azure support. The Azure Batch service log
   * files should be shared with Azure support to aid in debugging issues with the Batch service.
   * @param poolId The ID of the Pool that contains the Compute Node.
   * @param nodeId The ID of the Compute Node from which you want to upload the Azure Batch service log
   *               files.
   * @param uploadBatchServiceLogsConfiguration The Azure Batch service log files upload configuration.
   * @param options The options parameters.
   */
  uploadBatchServiceLogs(
    poolId: string,
    nodeId: string,
    uploadBatchServiceLogsConfiguration: UploadBatchServiceLogsConfiguration,
    options?: ComputeNodeUploadBatchServiceLogsOptionalParams
  ): Promise<ComputeNodeUploadBatchServiceLogsResponse>;
}
