/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const ApplicationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationSummary"
            }
          }
        }
      },
      odataNextLink: {
        serializedName: "odata\\.nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationSummary: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationSummary",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        required: true,
        type: {
          name: "String"
        }
      },
      versions: {
        serializedName: "versions",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const BatchError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BatchError",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "Composite",
          className: "ErrorMessage"
        }
      },
      values: {
        serializedName: "values",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BatchErrorDetail"
            }
          }
        }
      }
    }
  }
};

export const ErrorMessage: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorMessage",
    modelProperties: {
      lang: {
        serializedName: "lang",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BatchErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BatchErrorDetail",
    modelProperties: {
      key: {
        serializedName: "key",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PoolListUsageMetricsResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PoolListUsageMetricsResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PoolUsageMetrics"
            }
          }
        }
      },
      odataNextLink: {
        serializedName: "odata\\.nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PoolUsageMetrics: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PoolUsageMetrics",
    modelProperties: {
      poolId: {
        serializedName: "poolId",
        required: true,
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      vmSize: {
        serializedName: "vmSize",
        required: true,
        type: {
          name: "String"
        }
      },
      totalCoreHours: {
        serializedName: "totalCoreHours",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const AccountListSupportedImagesResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccountListSupportedImagesResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ImageInformation"
            }
          }
        }
      },
      odataNextLink: {
        serializedName: "odata\\.nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImageInformation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImageInformation",
    modelProperties: {
      nodeAgentSKUId: {
        serializedName: "nodeAgentSKUId",
        required: true,
        type: {
          name: "String"
        }
      },
      imageReference: {
        serializedName: "imageReference",
        type: {
          name: "Composite",
          className: "ImageReference"
        }
      },
      osType: {
        serializedName: "osType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["linux", "windows"]
        }
      },
      capabilities: {
        serializedName: "capabilities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      batchSupportEndOfLife: {
        serializedName: "batchSupportEndOfLife",
        type: {
          name: "DateTime"
        }
      },
      verificationType: {
        serializedName: "verificationType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["verified", "unverified"]
        }
      }
    }
  }
};

export const ImageReference: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImageReference",
    modelProperties: {
      publisher: {
        serializedName: "publisher",
        type: {
          name: "String"
        }
      },
      offer: {
        serializedName: "offer",
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        type: {
          name: "String"
        }
      },
      virtualMachineImageId: {
        serializedName: "virtualMachineImageId",
        type: {
          name: "String"
        }
      },
      exactVersion: {
        serializedName: "exactVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PoolNodeCountsListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PoolNodeCountsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PoolNodeCounts"
            }
          }
        }
      },
      odataNextLink: {
        serializedName: "odata\\.nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PoolNodeCounts: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PoolNodeCounts",
    modelProperties: {
      poolId: {
        serializedName: "poolId",
        required: true,
        type: {
          name: "String"
        }
      },
      dedicated: {
        serializedName: "dedicated",
        type: {
          name: "Composite",
          className: "NodeCounts"
        }
      },
      lowPriority: {
        serializedName: "lowPriority",
        type: {
          name: "Composite",
          className: "NodeCounts"
        }
      }
    }
  }
};

export const NodeCounts: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NodeCounts",
    modelProperties: {
      creating: {
        serializedName: "creating",
        required: true,
        type: {
          name: "Number"
        }
      },
      idle: {
        serializedName: "idle",
        required: true,
        type: {
          name: "Number"
        }
      },
      offline: {
        serializedName: "offline",
        required: true,
        type: {
          name: "Number"
        }
      },
      preempted: {
        serializedName: "preempted",
        required: true,
        type: {
          name: "Number"
        }
      },
      rebooting: {
        serializedName: "rebooting",
        required: true,
        type: {
          name: "Number"
        }
      },
      reimaging: {
        serializedName: "reimaging",
        required: true,
        type: {
          name: "Number"
        }
      },
      running: {
        serializedName: "running",
        required: true,
        type: {
          name: "Number"
        }
      },
      starting: {
        serializedName: "starting",
        required: true,
        type: {
          name: "Number"
        }
      },
      startTaskFailed: {
        serializedName: "startTaskFailed",
        required: true,
        type: {
          name: "Number"
        }
      },
      leavingPool: {
        serializedName: "leavingPool",
        required: true,
        type: {
          name: "Number"
        }
      },
      unknown: {
        serializedName: "unknown",
        required: true,
        type: {
          name: "Number"
        }
      },
      unusable: {
        serializedName: "unusable",
        required: true,
        type: {
          name: "Number"
        }
      },
      waitingForStartTask: {
        serializedName: "waitingForStartTask",
        required: true,
        type: {
          name: "Number"
        }
      },
      total: {
        serializedName: "total",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const PoolStatistics: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PoolStatistics",
    modelProperties: {
      url: {
        serializedName: "url",
        required: true,
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      lastUpdateTime: {
        serializedName: "lastUpdateTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      usageStats: {
        serializedName: "usageStats",
        type: {
          name: "Composite",
          className: "UsageStatistics"
        }
      },
      resourceStats: {
        serializedName: "resourceStats",
        type: {
          name: "Composite",
          className: "ResourceStatistics"
        }
      }
    }
  }
};

export const UsageStatistics: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UsageStatistics",
    modelProperties: {
      startTime: {
        serializedName: "startTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      lastUpdateTime: {
        serializedName: "lastUpdateTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      dedicatedCoreTime: {
        serializedName: "dedicatedCoreTime",
        required: true,
        type: {
          name: "TimeSpan"
        }
      }
    }
  }
};

export const ResourceStatistics: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceStatistics",
    modelProperties: {
      startTime: {
        serializedName: "startTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      lastUpdateTime: {
        serializedName: "lastUpdateTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      avgCPUPercentage: {
        serializedName: "avgCPUPercentage",
        required: true,
        type: {
          name: "Number"
        }
      },
      avgMemoryGiB: {
        serializedName: "avgMemoryGiB",
        required: true,
        type: {
          name: "Number"
        }
      },
      peakMemoryGiB: {
        serializedName: "peakMemoryGiB",
        required: true,
        type: {
          name: "Number"
        }
      },
      avgDiskGiB: {
        serializedName: "avgDiskGiB",
        required: true,
        type: {
          name: "Number"
        }
      },
      peakDiskGiB: {
        serializedName: "peakDiskGiB",
        required: true,
        type: {
          name: "Number"
        }
      },
      diskReadIOps: {
        serializedName: "diskReadIOps",
        required: true,
        type: {
          name: "Number"
        }
      },
      diskWriteIOps: {
        serializedName: "diskWriteIOps",
        required: true,
        type: {
          name: "Number"
        }
      },
      diskReadGiB: {
        serializedName: "diskReadGiB",
        required: true,
        type: {
          name: "Number"
        }
      },
      diskWriteGiB: {
        serializedName: "diskWriteGiB",
        required: true,
        type: {
          name: "Number"
        }
      },
      networkReadGiB: {
        serializedName: "networkReadGiB",
        required: true,
        type: {
          name: "Number"
        }
      },
      networkWriteGiB: {
        serializedName: "networkWriteGiB",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const JobStatistics: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobStatistics",
    modelProperties: {
      url: {
        serializedName: "url",
        required: true,
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      lastUpdateTime: {
        serializedName: "lastUpdateTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      userCPUTime: {
        serializedName: "userCPUTime",
        required: true,
        type: {
          name: "TimeSpan"
        }
      },
      kernelCPUTime: {
        serializedName: "kernelCPUTime",
        required: true,
        type: {
          name: "TimeSpan"
        }
      },
      wallClockTime: {
        serializedName: "wallClockTime",
        required: true,
        type: {
          name: "TimeSpan"
        }
      },
      readIOps: {
        serializedName: "readIOps",
        required: true,
        type: {
          name: "Number"
        }
      },
      writeIOps: {
        serializedName: "writeIOps",
        required: true,
        type: {
          name: "Number"
        }
      },
      readIOGiB: {
        serializedName: "readIOGiB",
        required: true,
        type: {
          name: "Number"
        }
      },
      writeIOGiB: {
        serializedName: "writeIOGiB",
        required: true,
        type: {
          name: "Number"
        }
      },
      numSucceededTasks: {
        serializedName: "numSucceededTasks",
        required: true,
        type: {
          name: "Number"
        }
      },
      numFailedTasks: {
        serializedName: "numFailedTasks",
        required: true,
        type: {
          name: "Number"
        }
      },
      numTaskRetries: {
        serializedName: "numTaskRetries",
        required: true,
        type: {
          name: "Number"
        }
      },
      waitTime: {
        serializedName: "waitTime",
        required: true,
        type: {
          name: "TimeSpan"
        }
      }
    }
  }
};

export const CertificateAddParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CertificateAddParameter",
    modelProperties: {
      thumbprint: {
        serializedName: "thumbprint",
        required: true,
        type: {
          name: "String"
        }
      },
      thumbprintAlgorithm: {
        serializedName: "thumbprintAlgorithm",
        required: true,
        type: {
          name: "String"
        }
      },
      data: {
        serializedName: "data",
        required: true,
        type: {
          name: "String"
        }
      },
      certificateFormat: {
        serializedName: "certificateFormat",
        type: {
          name: "Enum",
          allowedValues: ["pfx", "cer"]
        }
      },
      password: {
        serializedName: "password",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CertificateListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CertificateListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Certificate"
            }
          }
        }
      },
      odataNextLink: {
        serializedName: "odata\\.nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Certificate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Certificate",
    modelProperties: {
      thumbprint: {
        serializedName: "thumbprint",
        type: {
          name: "String"
        }
      },
      thumbprintAlgorithm: {
        serializedName: "thumbprintAlgorithm",
        type: {
          name: "String"
        }
      },
      url: {
        serializedName: "url",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "state",
        type: {
          name: "Enum",
          allowedValues: ["active", "deleting", "deletefailed"]
        }
      },
      stateTransitionTime: {
        serializedName: "stateTransitionTime",
        type: {
          name: "DateTime"
        }
      },
      previousState: {
        serializedName: "previousState",
        type: {
          name: "Enum",
          allowedValues: ["active", "deleting", "deletefailed"]
        }
      },
      previousStateTransitionTime: {
        serializedName: "previousStateTransitionTime",
        type: {
          name: "DateTime"
        }
      },
      publicData: {
        serializedName: "publicData",
        type: {
          name: "String"
        }
      },
      deleteCertificateError: {
        serializedName: "deleteCertificateError",
        type: {
          name: "Composite",
          className: "DeleteCertificateError"
        }
      }
    }
  }
};

export const DeleteCertificateError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeleteCertificateError",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      values: {
        serializedName: "values",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NameValuePair"
            }
          }
        }
      }
    }
  }
};

export const NameValuePair: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NameValuePair",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NodeFileListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NodeFileListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NodeFile"
            }
          }
        }
      },
      odataNextLink: {
        serializedName: "odata\\.nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NodeFile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NodeFile",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      url: {
        serializedName: "url",
        type: {
          name: "String"
        }
      },
      isDirectory: {
        serializedName: "isDirectory",
        type: {
          name: "Boolean"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "FileProperties"
        }
      }
    }
  }
};

export const FileProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FileProperties",
    modelProperties: {
      creationTime: {
        serializedName: "creationTime",
        type: {
          name: "DateTime"
        }
      },
      lastModified: {
        serializedName: "lastModified",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      contentLength: {
        serializedName: "contentLength",
        required: true,
        type: {
          name: "Number"
        }
      },
      contentType: {
        serializedName: "contentType",
        type: {
          name: "String"
        }
      },
      fileMode: {
        serializedName: "fileMode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloudJobSchedule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudJobSchedule",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      url: {
        serializedName: "url",
        type: {
          name: "String"
        }
      },
      eTag: {
        serializedName: "eTag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "lastModified",
        type: {
          name: "DateTime"
        }
      },
      creationTime: {
        serializedName: "creationTime",
        type: {
          name: "DateTime"
        }
      },
      state: {
        serializedName: "state",
        type: {
          name: "Enum",
          allowedValues: [
            "active",
            "completed",
            "disabled",
            "terminating",
            "deleting"
          ]
        }
      },
      stateTransitionTime: {
        serializedName: "stateTransitionTime",
        type: {
          name: "DateTime"
        }
      },
      previousState: {
        serializedName: "previousState",
        type: {
          name: "Enum",
          allowedValues: [
            "active",
            "completed",
            "disabled",
            "terminating",
            "deleting"
          ]
        }
      },
      previousStateTransitionTime: {
        serializedName: "previousStateTransitionTime",
        type: {
          name: "DateTime"
        }
      },
      schedule: {
        serializedName: "schedule",
        type: {
          name: "Composite",
          className: "Schedule"
        }
      },
      jobSpecification: {
        serializedName: "jobSpecification",
        type: {
          name: "Composite",
          className: "JobSpecification"
        }
      },
      executionInfo: {
        serializedName: "executionInfo",
        type: {
          name: "Composite",
          className: "JobScheduleExecutionInformation"
        }
      },
      metadata: {
        serializedName: "metadata",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetadataItem"
            }
          }
        }
      },
      stats: {
        serializedName: "stats",
        type: {
          name: "Composite",
          className: "JobScheduleStatistics"
        }
      }
    }
  }
};

export const Schedule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Schedule",
    modelProperties: {
      doNotRunUntil: {
        serializedName: "doNotRunUntil",
        type: {
          name: "DateTime"
        }
      },
      doNotRunAfter: {
        serializedName: "doNotRunAfter",
        type: {
          name: "DateTime"
        }
      },
      startWindow: {
        serializedName: "startWindow",
        type: {
          name: "TimeSpan"
        }
      },
      recurrenceInterval: {
        serializedName: "recurrenceInterval",
        type: {
          name: "TimeSpan"
        }
      }
    }
  }
};

export const JobSpecification: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobSpecification",
    modelProperties: {
      priority: {
        serializedName: "priority",
        type: {
          name: "Number"
        }
      },
      maxParallelTasks: {
        defaultValue: -1,
        serializedName: "maxParallelTasks",
        type: {
          name: "Number"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      usesTaskDependencies: {
        serializedName: "usesTaskDependencies",
        type: {
          name: "Boolean"
        }
      },
      onAllTasksComplete: {
        serializedName: "onAllTasksComplete",
        type: {
          name: "Enum",
          allowedValues: ["noaction", "terminatejob"]
        }
      },
      onTaskFailure: {
        serializedName: "onTaskFailure",
        type: {
          name: "Enum",
          allowedValues: ["noaction", "performexitoptionsjobaction"]
        }
      },
      networkConfiguration: {
        serializedName: "networkConfiguration",
        type: {
          name: "Composite",
          className: "JobNetworkConfiguration"
        }
      },
      constraints: {
        serializedName: "constraints",
        type: {
          name: "Composite",
          className: "JobConstraints"
        }
      },
      jobManagerTask: {
        serializedName: "jobManagerTask",
        type: {
          name: "Composite",
          className: "JobManagerTask"
        }
      },
      jobPreparationTask: {
        serializedName: "jobPreparationTask",
        type: {
          name: "Composite",
          className: "JobPreparationTask"
        }
      },
      jobReleaseTask: {
        serializedName: "jobReleaseTask",
        type: {
          name: "Composite",
          className: "JobReleaseTask"
        }
      },
      commonEnvironmentSettings: {
        serializedName: "commonEnvironmentSettings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EnvironmentSetting"
            }
          }
        }
      },
      poolInfo: {
        serializedName: "poolInfo",
        type: {
          name: "Composite",
          className: "PoolInformation"
        }
      },
      metadata: {
        serializedName: "metadata",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetadataItem"
            }
          }
        }
      }
    }
  }
};

export const JobNetworkConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobNetworkConfiguration",
    modelProperties: {
      subnetId: {
        serializedName: "subnetId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobConstraints: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobConstraints",
    modelProperties: {
      maxWallClockTime: {
        serializedName: "maxWallClockTime",
        type: {
          name: "TimeSpan"
        }
      },
      maxTaskRetryCount: {
        serializedName: "maxTaskRetryCount",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const JobManagerTask: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobManagerTask",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      commandLine: {
        serializedName: "commandLine",
        required: true,
        type: {
          name: "String"
        }
      },
      containerSettings: {
        serializedName: "containerSettings",
        type: {
          name: "Composite",
          className: "TaskContainerSettings"
        }
      },
      resourceFiles: {
        serializedName: "resourceFiles",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceFile"
            }
          }
        }
      },
      outputFiles: {
        serializedName: "outputFiles",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OutputFile"
            }
          }
        }
      },
      environmentSettings: {
        serializedName: "environmentSettings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EnvironmentSetting"
            }
          }
        }
      },
      constraints: {
        serializedName: "constraints",
        type: {
          name: "Composite",
          className: "TaskConstraints"
        }
      },
      requiredSlots: {
        serializedName: "requiredSlots",
        type: {
          name: "Number"
        }
      },
      killJobOnCompletion: {
        serializedName: "killJobOnCompletion",
        type: {
          name: "Boolean"
        }
      },
      userIdentity: {
        serializedName: "userIdentity",
        type: {
          name: "Composite",
          className: "UserIdentity"
        }
      },
      runExclusive: {
        serializedName: "runExclusive",
        type: {
          name: "Boolean"
        }
      },
      applicationPackageReferences: {
        serializedName: "applicationPackageReferences",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationPackageReference"
            }
          }
        }
      },
      authenticationTokenSettings: {
        serializedName: "authenticationTokenSettings",
        type: {
          name: "Composite",
          className: "AuthenticationTokenSettings"
        }
      },
      allowLowPriorityNode: {
        serializedName: "allowLowPriorityNode",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const TaskContainerSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskContainerSettings",
    modelProperties: {
      containerRunOptions: {
        serializedName: "containerRunOptions",
        type: {
          name: "String"
        }
      },
      imageName: {
        serializedName: "imageName",
        required: true,
        type: {
          name: "String"
        }
      },
      registry: {
        serializedName: "registry",
        type: {
          name: "Composite",
          className: "ContainerRegistry"
        }
      },
      workingDirectory: {
        serializedName: "workingDirectory",
        type: {
          name: "Enum",
          allowedValues: ["taskWorkingDirectory", "containerImageDefault"]
        }
      }
    }
  }
};

export const ContainerRegistry: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerRegistry",
    modelProperties: {
      userName: {
        serializedName: "username",
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "password",
        type: {
          name: "String"
        }
      },
      registryServer: {
        serializedName: "registryServer",
        type: {
          name: "String"
        }
      },
      identityReference: {
        serializedName: "identityReference",
        type: {
          name: "Composite",
          className: "ComputeNodeIdentityReference"
        }
      }
    }
  }
};

export const ComputeNodeIdentityReference: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeNodeIdentityReference",
    modelProperties: {
      resourceId: {
        serializedName: "resourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceFile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceFile",
    modelProperties: {
      autoStorageContainerName: {
        serializedName: "autoStorageContainerName",
        type: {
          name: "String"
        }
      },
      storageContainerUrl: {
        serializedName: "storageContainerUrl",
        type: {
          name: "String"
        }
      },
      httpUrl: {
        serializedName: "httpUrl",
        type: {
          name: "String"
        }
      },
      blobPrefix: {
        serializedName: "blobPrefix",
        type: {
          name: "String"
        }
      },
      filePath: {
        serializedName: "filePath",
        type: {
          name: "String"
        }
      },
      fileMode: {
        serializedName: "fileMode",
        type: {
          name: "String"
        }
      },
      identityReference: {
        serializedName: "identityReference",
        type: {
          name: "Composite",
          className: "ComputeNodeIdentityReference"
        }
      }
    }
  }
};

export const OutputFile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OutputFile",
    modelProperties: {
      filePattern: {
        serializedName: "filePattern",
        required: true,
        type: {
          name: "String"
        }
      },
      destination: {
        serializedName: "destination",
        type: {
          name: "Composite",
          className: "OutputFileDestination"
        }
      },
      uploadOptions: {
        serializedName: "uploadOptions",
        type: {
          name: "Composite",
          className: "OutputFileUploadOptions"
        }
      }
    }
  }
};

export const OutputFileDestination: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OutputFileDestination",
    modelProperties: {
      container: {
        serializedName: "container",
        type: {
          name: "Composite",
          className: "OutputFileBlobContainerDestination"
        }
      }
    }
  }
};

export const OutputFileBlobContainerDestination: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OutputFileBlobContainerDestination",
    modelProperties: {
      path: {
        serializedName: "path",
        type: {
          name: "String"
        }
      },
      containerUrl: {
        serializedName: "containerUrl",
        required: true,
        type: {
          name: "String"
        }
      },
      identityReference: {
        serializedName: "identityReference",
        type: {
          name: "Composite",
          className: "ComputeNodeIdentityReference"
        }
      }
    }
  }
};

export const OutputFileUploadOptions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OutputFileUploadOptions",
    modelProperties: {
      uploadCondition: {
        serializedName: "uploadCondition",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["tasksuccess", "taskfailure", "taskcompletion"]
        }
      }
    }
  }
};

export const EnvironmentSetting: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EnvironmentSetting",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TaskConstraints: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskConstraints",
    modelProperties: {
      maxWallClockTime: {
        serializedName: "maxWallClockTime",
        type: {
          name: "TimeSpan"
        }
      },
      retentionTime: {
        serializedName: "retentionTime",
        type: {
          name: "TimeSpan"
        }
      },
      maxTaskRetryCount: {
        serializedName: "maxTaskRetryCount",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const UserIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserIdentity",
    modelProperties: {
      userName: {
        serializedName: "username",
        type: {
          name: "String"
        }
      },
      autoUser: {
        serializedName: "autoUser",
        type: {
          name: "Composite",
          className: "AutoUserSpecification"
        }
      }
    }
  }
};

export const AutoUserSpecification: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AutoUserSpecification",
    modelProperties: {
      scope: {
        serializedName: "scope",
        type: {
          name: "Enum",
          allowedValues: ["task", "pool"]
        }
      },
      elevationLevel: {
        serializedName: "elevationLevel",
        type: {
          name: "Enum",
          allowedValues: ["nonadmin", "admin"]
        }
      }
    }
  }
};

export const ApplicationPackageReference: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationPackageReference",
    modelProperties: {
      applicationId: {
        serializedName: "applicationId",
        required: true,
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AuthenticationTokenSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AuthenticationTokenSettings",
    modelProperties: {
      access: {
        serializedName: "access",
        type: {
          name: "Sequence",
          element: {
            defaultValue: "job",
            isConstant: true,
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const JobPreparationTask: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobPreparationTask",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      commandLine: {
        serializedName: "commandLine",
        required: true,
        type: {
          name: "String"
        }
      },
      containerSettings: {
        serializedName: "containerSettings",
        type: {
          name: "Composite",
          className: "TaskContainerSettings"
        }
      },
      resourceFiles: {
        serializedName: "resourceFiles",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceFile"
            }
          }
        }
      },
      environmentSettings: {
        serializedName: "environmentSettings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EnvironmentSetting"
            }
          }
        }
      },
      constraints: {
        serializedName: "constraints",
        type: {
          name: "Composite",
          className: "TaskConstraints"
        }
      },
      waitForSuccess: {
        serializedName: "waitForSuccess",
        type: {
          name: "Boolean"
        }
      },
      userIdentity: {
        serializedName: "userIdentity",
        type: {
          name: "Composite",
          className: "UserIdentity"
        }
      },
      rerunOnNodeRebootAfterSuccess: {
        serializedName: "rerunOnNodeRebootAfterSuccess",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const JobReleaseTask: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobReleaseTask",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      commandLine: {
        serializedName: "commandLine",
        required: true,
        type: {
          name: "String"
        }
      },
      containerSettings: {
        serializedName: "containerSettings",
        type: {
          name: "Composite",
          className: "TaskContainerSettings"
        }
      },
      resourceFiles: {
        serializedName: "resourceFiles",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceFile"
            }
          }
        }
      },
      environmentSettings: {
        serializedName: "environmentSettings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EnvironmentSetting"
            }
          }
        }
      },
      maxWallClockTime: {
        serializedName: "maxWallClockTime",
        type: {
          name: "TimeSpan"
        }
      },
      retentionTime: {
        serializedName: "retentionTime",
        type: {
          name: "TimeSpan"
        }
      },
      userIdentity: {
        serializedName: "userIdentity",
        type: {
          name: "Composite",
          className: "UserIdentity"
        }
      }
    }
  }
};

export const PoolInformation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PoolInformation",
    modelProperties: {
      poolId: {
        serializedName: "poolId",
        type: {
          name: "String"
        }
      },
      autoPoolSpecification: {
        serializedName: "autoPoolSpecification",
        type: {
          name: "Composite",
          className: "AutoPoolSpecification"
        }
      }
    }
  }
};

export const AutoPoolSpecification: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AutoPoolSpecification",
    modelProperties: {
      autoPoolIdPrefix: {
        serializedName: "autoPoolIdPrefix",
        type: {
          name: "String"
        }
      },
      poolLifetimeOption: {
        serializedName: "poolLifetimeOption",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["jobschedule", "job"]
        }
      },
      keepAlive: {
        serializedName: "keepAlive",
        type: {
          name: "Boolean"
        }
      },
      pool: {
        serializedName: "pool",
        type: {
          name: "Composite",
          className: "PoolSpecification"
        }
      }
    }
  }
};

export const PoolSpecification: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PoolSpecification",
    modelProperties: {
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      vmSize: {
        serializedName: "vmSize",
        required: true,
        type: {
          name: "String"
        }
      },
      cloudServiceConfiguration: {
        serializedName: "cloudServiceConfiguration",
        type: {
          name: "Composite",
          className: "CloudServiceConfiguration"
        }
      },
      virtualMachineConfiguration: {
        serializedName: "virtualMachineConfiguration",
        type: {
          name: "Composite",
          className: "VirtualMachineConfiguration"
        }
      },
      taskSlotsPerNode: {
        serializedName: "taskSlotsPerNode",
        type: {
          name: "Number"
        }
      },
      taskSchedulingPolicy: {
        serializedName: "taskSchedulingPolicy",
        type: {
          name: "Composite",
          className: "TaskSchedulingPolicy"
        }
      },
      resizeTimeout: {
        serializedName: "resizeTimeout",
        type: {
          name: "TimeSpan"
        }
      },
      targetDedicatedNodes: {
        serializedName: "targetDedicatedNodes",
        type: {
          name: "Number"
        }
      },
      targetLowPriorityNodes: {
        serializedName: "targetLowPriorityNodes",
        type: {
          name: "Number"
        }
      },
      enableAutoScale: {
        serializedName: "enableAutoScale",
        type: {
          name: "Boolean"
        }
      },
      autoScaleFormula: {
        serializedName: "autoScaleFormula",
        type: {
          name: "String"
        }
      },
      autoScaleEvaluationInterval: {
        serializedName: "autoScaleEvaluationInterval",
        type: {
          name: "TimeSpan"
        }
      },
      enableInterNodeCommunication: {
        serializedName: "enableInterNodeCommunication",
        type: {
          name: "Boolean"
        }
      },
      networkConfiguration: {
        serializedName: "networkConfiguration",
        type: {
          name: "Composite",
          className: "NetworkConfiguration"
        }
      },
      startTask: {
        serializedName: "startTask",
        type: {
          name: "Composite",
          className: "StartTask"
        }
      },
      certificateReferences: {
        serializedName: "certificateReferences",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CertificateReference"
            }
          }
        }
      },
      applicationPackageReferences: {
        serializedName: "applicationPackageReferences",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationPackageReference"
            }
          }
        }
      },
      applicationLicenses: {
        serializedName: "applicationLicenses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      userAccounts: {
        serializedName: "userAccounts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UserAccount"
            }
          }
        }
      },
      metadata: {
        serializedName: "metadata",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetadataItem"
            }
          }
        }
      },
      mountConfiguration: {
        serializedName: "mountConfiguration",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MountConfiguration"
            }
          }
        }
      }
    }
  }
};

export const CloudServiceConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudServiceConfiguration",
    modelProperties: {
      osFamily: {
        serializedName: "osFamily",
        required: true,
        type: {
          name: "String"
        }
      },
      osVersion: {
        serializedName: "osVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualMachineConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineConfiguration",
    modelProperties: {
      imageReference: {
        serializedName: "imageReference",
        type: {
          name: "Composite",
          className: "ImageReference"
        }
      },
      nodeAgentSKUId: {
        serializedName: "nodeAgentSKUId",
        required: true,
        type: {
          name: "String"
        }
      },
      windowsConfiguration: {
        serializedName: "windowsConfiguration",
        type: {
          name: "Composite",
          className: "WindowsConfiguration"
        }
      },
      dataDisks: {
        serializedName: "dataDisks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataDisk"
            }
          }
        }
      },
      licenseType: {
        serializedName: "licenseType",
        type: {
          name: "String"
        }
      },
      containerConfiguration: {
        serializedName: "containerConfiguration",
        type: {
          name: "Composite",
          className: "ContainerConfiguration"
        }
      },
      diskEncryptionConfiguration: {
        serializedName: "diskEncryptionConfiguration",
        type: {
          name: "Composite",
          className: "DiskEncryptionConfiguration"
        }
      },
      nodePlacementConfiguration: {
        serializedName: "nodePlacementConfiguration",
        type: {
          name: "Composite",
          className: "NodePlacementConfiguration"
        }
      },
      extensions: {
        serializedName: "extensions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VMExtension"
            }
          }
        }
      },
      osDisk: {
        serializedName: "osDisk",
        type: {
          name: "Composite",
          className: "OSDisk"
        }
      }
    }
  }
};

export const WindowsConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WindowsConfiguration",
    modelProperties: {
      enableAutomaticUpdates: {
        serializedName: "enableAutomaticUpdates",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const DataDisk: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataDisk",
    modelProperties: {
      lun: {
        serializedName: "lun",
        required: true,
        type: {
          name: "Number"
        }
      },
      caching: {
        serializedName: "caching",
        type: {
          name: "Enum",
          allowedValues: ["none", "readonly", "readwrite"]
        }
      },
      diskSizeGB: {
        serializedName: "diskSizeGB",
        required: true,
        type: {
          name: "Number"
        }
      },
      storageAccountType: {
        serializedName: "storageAccountType",
        type: {
          name: "Enum",
          allowedValues: ["standard_lrs", "premium_lrs"]
        }
      }
    }
  }
};

export const ContainerConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerConfiguration",
    modelProperties: {
      type: {
        defaultValue: "dockerCompatible",
        isConstant: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      containerImageNames: {
        serializedName: "containerImageNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      containerRegistries: {
        serializedName: "containerRegistries",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ContainerRegistry"
            }
          }
        }
      }
    }
  }
};

export const DiskEncryptionConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiskEncryptionConfiguration",
    modelProperties: {
      targets: {
        serializedName: "targets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Enum",
              allowedValues: ["osdisk", "temporarydisk"]
            }
          }
        }
      }
    }
  }
};

export const NodePlacementConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NodePlacementConfiguration",
    modelProperties: {
      policy: {
        serializedName: "policy",
        type: {
          name: "Enum",
          allowedValues: ["regional", "zonal"]
        }
      }
    }
  }
};

export const VMExtension: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VMExtension",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      publisher: {
        serializedName: "publisher",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      typeHandlerVersion: {
        serializedName: "typeHandlerVersion",
        type: {
          name: "String"
        }
      },
      autoUpgradeMinorVersion: {
        serializedName: "autoUpgradeMinorVersion",
        type: {
          name: "Boolean"
        }
      },
      settings: {
        serializedName: "settings",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      },
      protectedSettings: {
        serializedName: "protectedSettings",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      },
      provisionAfterExtensions: {
        serializedName: "provisionAfterExtensions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const OSDisk: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OSDisk",
    modelProperties: {
      ephemeralOSDiskSettings: {
        serializedName: "ephemeralOSDiskSettings",
        type: {
          name: "Composite",
          className: "DiffDiskSettings"
        }
      }
    }
  }
};

export const DiffDiskSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiffDiskSettings",
    modelProperties: {
      placement: {
        defaultValue: "CacheDisk",
        isConstant: true,
        serializedName: "placement",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TaskSchedulingPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskSchedulingPolicy",
    modelProperties: {
      nodeFillType: {
        serializedName: "nodeFillType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["spread", "pack"]
        }
      }
    }
  }
};

export const NetworkConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkConfiguration",
    modelProperties: {
      subnetId: {
        serializedName: "subnetId",
        type: {
          name: "String"
        }
      },
      dynamicVNetAssignmentScope: {
        serializedName: "dynamicVNetAssignmentScope",
        type: {
          name: "Enum",
          allowedValues: ["none", "job"]
        }
      },
      endpointConfiguration: {
        serializedName: "endpointConfiguration",
        type: {
          name: "Composite",
          className: "PoolEndpointConfiguration"
        }
      },
      publicIPAddressConfiguration: {
        serializedName: "publicIPAddressConfiguration",
        type: {
          name: "Composite",
          className: "PublicIPAddressConfiguration"
        }
      }
    }
  }
};

export const PoolEndpointConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PoolEndpointConfiguration",
    modelProperties: {
      inboundNATPools: {
        serializedName: "inboundNATPools",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InboundNATPool"
            }
          }
        }
      }
    }
  }
};

export const InboundNATPool: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InboundNATPool",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      protocol: {
        serializedName: "protocol",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["tcp", "udp"]
        }
      },
      backendPort: {
        serializedName: "backendPort",
        required: true,
        type: {
          name: "Number"
        }
      },
      frontendPortRangeStart: {
        serializedName: "frontendPortRangeStart",
        required: true,
        type: {
          name: "Number"
        }
      },
      frontendPortRangeEnd: {
        serializedName: "frontendPortRangeEnd",
        required: true,
        type: {
          name: "Number"
        }
      },
      networkSecurityGroupRules: {
        serializedName: "networkSecurityGroupRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkSecurityGroupRule"
            }
          }
        }
      }
    }
  }
};

export const NetworkSecurityGroupRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkSecurityGroupRule",
    modelProperties: {
      priority: {
        serializedName: "priority",
        required: true,
        type: {
          name: "Number"
        }
      },
      access: {
        serializedName: "access",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["allow", "deny"]
        }
      },
      sourceAddressPrefix: {
        serializedName: "sourceAddressPrefix",
        required: true,
        type: {
          name: "String"
        }
      },
      sourcePortRanges: {
        serializedName: "sourcePortRanges",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const PublicIPAddressConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PublicIPAddressConfiguration",
    modelProperties: {
      provision: {
        serializedName: "provision",
        type: {
          name: "Enum",
          allowedValues: ["batchmanaged", "usermanaged", "nopublicipaddresses"]
        }
      },
      ipAddressIds: {
        serializedName: "ipAddressIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const StartTask: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StartTask",
    modelProperties: {
      commandLine: {
        serializedName: "commandLine",
        required: true,
        type: {
          name: "String"
        }
      },
      containerSettings: {
        serializedName: "containerSettings",
        type: {
          name: "Composite",
          className: "TaskContainerSettings"
        }
      },
      resourceFiles: {
        serializedName: "resourceFiles",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceFile"
            }
          }
        }
      },
      environmentSettings: {
        serializedName: "environmentSettings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EnvironmentSetting"
            }
          }
        }
      },
      userIdentity: {
        serializedName: "userIdentity",
        type: {
          name: "Composite",
          className: "UserIdentity"
        }
      },
      maxTaskRetryCount: {
        serializedName: "maxTaskRetryCount",
        type: {
          name: "Number"
        }
      },
      waitForSuccess: {
        serializedName: "waitForSuccess",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const CertificateReference: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CertificateReference",
    modelProperties: {
      thumbprint: {
        serializedName: "thumbprint",
        required: true,
        type: {
          name: "String"
        }
      },
      thumbprintAlgorithm: {
        serializedName: "thumbprintAlgorithm",
        required: true,
        type: {
          name: "String"
        }
      },
      storeLocation: {
        serializedName: "storeLocation",
        type: {
          name: "Enum",
          allowedValues: ["currentuser", "localmachine"]
        }
      },
      storeName: {
        serializedName: "storeName",
        type: {
          name: "String"
        }
      },
      visibility: {
        serializedName: "visibility",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Enum",
              allowedValues: ["starttask", "task", "remoteuser"]
            }
          }
        }
      }
    }
  }
};

export const UserAccount: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserAccount",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "password",
        required: true,
        type: {
          name: "String"
        }
      },
      elevationLevel: {
        serializedName: "elevationLevel",
        type: {
          name: "Enum",
          allowedValues: ["nonadmin", "admin"]
        }
      },
      linuxUserConfiguration: {
        serializedName: "linuxUserConfiguration",
        type: {
          name: "Composite",
          className: "LinuxUserConfiguration"
        }
      },
      windowsUserConfiguration: {
        serializedName: "windowsUserConfiguration",
        type: {
          name: "Composite",
          className: "WindowsUserConfiguration"
        }
      }
    }
  }
};

export const LinuxUserConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LinuxUserConfiguration",
    modelProperties: {
      uid: {
        serializedName: "uid",
        type: {
          name: "Number"
        }
      },
      gid: {
        serializedName: "gid",
        type: {
          name: "Number"
        }
      },
      sshPrivateKey: {
        serializedName: "sshPrivateKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WindowsUserConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WindowsUserConfiguration",
    modelProperties: {
      loginMode: {
        serializedName: "loginMode",
        type: {
          name: "Enum",
          allowedValues: ["batch", "interactive"]
        }
      }
    }
  }
};

export const MetadataItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetadataItem",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MountConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MountConfiguration",
    modelProperties: {
      azureBlobFileSystemConfiguration: {
        serializedName: "azureBlobFileSystemConfiguration",
        type: {
          name: "Composite",
          className: "AzureBlobFileSystemConfiguration"
        }
      },
      nfsMountConfiguration: {
        serializedName: "nfsMountConfiguration",
        type: {
          name: "Composite",
          className: "NFSMountConfiguration"
        }
      },
      cifsMountConfiguration: {
        serializedName: "cifsMountConfiguration",
        type: {
          name: "Composite",
          className: "CifsMountConfiguration"
        }
      },
      azureFileShareConfiguration: {
        serializedName: "azureFileShareConfiguration",
        type: {
          name: "Composite",
          className: "AzureFileShareConfiguration"
        }
      }
    }
  }
};

export const AzureBlobFileSystemConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureBlobFileSystemConfiguration",
    modelProperties: {
      accountName: {
        serializedName: "accountName",
        required: true,
        type: {
          name: "String"
        }
      },
      containerName: {
        serializedName: "containerName",
        required: true,
        type: {
          name: "String"
        }
      },
      accountKey: {
        serializedName: "accountKey",
        type: {
          name: "String"
        }
      },
      sasKey: {
        serializedName: "sasKey",
        type: {
          name: "String"
        }
      },
      blobfuseOptions: {
        serializedName: "blobfuseOptions",
        type: {
          name: "String"
        }
      },
      relativeMountPath: {
        serializedName: "relativeMountPath",
        required: true,
        type: {
          name: "String"
        }
      },
      identityReference: {
        serializedName: "identityReference",
        type: {
          name: "Composite",
          className: "ComputeNodeIdentityReference"
        }
      }
    }
  }
};

export const NFSMountConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NFSMountConfiguration",
    modelProperties: {
      source: {
        serializedName: "source",
        required: true,
        type: {
          name: "String"
        }
      },
      relativeMountPath: {
        serializedName: "relativeMountPath",
        required: true,
        type: {
          name: "String"
        }
      },
      mountOptions: {
        serializedName: "mountOptions",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CifsMountConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CifsMountConfiguration",
    modelProperties: {
      username: {
        serializedName: "username",
        required: true,
        type: {
          name: "String"
        }
      },
      source: {
        serializedName: "source",
        required: true,
        type: {
          name: "String"
        }
      },
      relativeMountPath: {
        serializedName: "relativeMountPath",
        required: true,
        type: {
          name: "String"
        }
      },
      mountOptions: {
        serializedName: "mountOptions",
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "password",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureFileShareConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureFileShareConfiguration",
    modelProperties: {
      accountName: {
        serializedName: "accountName",
        required: true,
        type: {
          name: "String"
        }
      },
      azureFileUrl: {
        serializedName: "azureFileUrl",
        required: true,
        type: {
          name: "String"
        }
      },
      accountKey: {
        serializedName: "accountKey",
        required: true,
        type: {
          name: "String"
        }
      },
      relativeMountPath: {
        serializedName: "relativeMountPath",
        required: true,
        type: {
          name: "String"
        }
      },
      mountOptions: {
        serializedName: "mountOptions",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobScheduleExecutionInformation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobScheduleExecutionInformation",
    modelProperties: {
      nextRunTime: {
        serializedName: "nextRunTime",
        type: {
          name: "DateTime"
        }
      },
      recentJob: {
        serializedName: "recentJob",
        type: {
          name: "Composite",
          className: "RecentJob"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const RecentJob: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecentJob",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      url: {
        serializedName: "url",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobScheduleStatistics: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobScheduleStatistics",
    modelProperties: {
      url: {
        serializedName: "url",
        required: true,
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      lastUpdateTime: {
        serializedName: "lastUpdateTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      userCPUTime: {
        serializedName: "userCPUTime",
        required: true,
        type: {
          name: "TimeSpan"
        }
      },
      kernelCPUTime: {
        serializedName: "kernelCPUTime",
        required: true,
        type: {
          name: "TimeSpan"
        }
      },
      wallClockTime: {
        serializedName: "wallClockTime",
        required: true,
        type: {
          name: "TimeSpan"
        }
      },
      readIOps: {
        serializedName: "readIOps",
        required: true,
        type: {
          name: "Number"
        }
      },
      writeIOps: {
        serializedName: "writeIOps",
        required: true,
        type: {
          name: "Number"
        }
      },
      readIOGiB: {
        serializedName: "readIOGiB",
        required: true,
        type: {
          name: "Number"
        }
      },
      writeIOGiB: {
        serializedName: "writeIOGiB",
        required: true,
        type: {
          name: "Number"
        }
      },
      numSucceededTasks: {
        serializedName: "numSucceededTasks",
        required: true,
        type: {
          name: "Number"
        }
      },
      numFailedTasks: {
        serializedName: "numFailedTasks",
        required: true,
        type: {
          name: "Number"
        }
      },
      numTaskRetries: {
        serializedName: "numTaskRetries",
        required: true,
        type: {
          name: "Number"
        }
      },
      waitTime: {
        serializedName: "waitTime",
        required: true,
        type: {
          name: "TimeSpan"
        }
      }
    }
  }
};

export const JobSchedulePatchParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobSchedulePatchParameter",
    modelProperties: {
      schedule: {
        serializedName: "schedule",
        type: {
          name: "Composite",
          className: "Schedule"
        }
      },
      jobSpecification: {
        serializedName: "jobSpecification",
        type: {
          name: "Composite",
          className: "JobSpecification"
        }
      },
      metadata: {
        serializedName: "metadata",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetadataItem"
            }
          }
        }
      }
    }
  }
};

export const JobScheduleUpdateParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobScheduleUpdateParameter",
    modelProperties: {
      schedule: {
        serializedName: "schedule",
        type: {
          name: "Composite",
          className: "Schedule"
        }
      },
      jobSpecification: {
        serializedName: "jobSpecification",
        type: {
          name: "Composite",
          className: "JobSpecification"
        }
      },
      metadata: {
        serializedName: "metadata",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetadataItem"
            }
          }
        }
      }
    }
  }
};

export const JobScheduleAddParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobScheduleAddParameter",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      schedule: {
        serializedName: "schedule",
        type: {
          name: "Composite",
          className: "Schedule"
        }
      },
      jobSpecification: {
        serializedName: "jobSpecification",
        type: {
          name: "Composite",
          className: "JobSpecification"
        }
      },
      metadata: {
        serializedName: "metadata",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetadataItem"
            }
          }
        }
      }
    }
  }
};

export const CloudJobScheduleListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudJobScheduleListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CloudJobSchedule"
            }
          }
        }
      },
      odataNextLink: {
        serializedName: "odata\\.nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloudJob: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudJob",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      usesTaskDependencies: {
        serializedName: "usesTaskDependencies",
        type: {
          name: "Boolean"
        }
      },
      url: {
        serializedName: "url",
        type: {
          name: "String"
        }
      },
      eTag: {
        serializedName: "eTag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "lastModified",
        type: {
          name: "DateTime"
        }
      },
      creationTime: {
        serializedName: "creationTime",
        type: {
          name: "DateTime"
        }
      },
      state: {
        serializedName: "state",
        type: {
          name: "Enum",
          allowedValues: [
            "active",
            "disabling",
            "disabled",
            "enabling",
            "terminating",
            "completed",
            "deleting"
          ]
        }
      },
      stateTransitionTime: {
        serializedName: "stateTransitionTime",
        type: {
          name: "DateTime"
        }
      },
      previousState: {
        serializedName: "previousState",
        type: {
          name: "Enum",
          allowedValues: [
            "active",
            "disabling",
            "disabled",
            "enabling",
            "terminating",
            "completed",
            "deleting"
          ]
        }
      },
      previousStateTransitionTime: {
        serializedName: "previousStateTransitionTime",
        type: {
          name: "DateTime"
        }
      },
      priority: {
        serializedName: "priority",
        type: {
          name: "Number"
        }
      },
      maxParallelTasks: {
        defaultValue: -1,
        serializedName: "maxParallelTasks",
        type: {
          name: "Number"
        }
      },
      constraints: {
        serializedName: "constraints",
        type: {
          name: "Composite",
          className: "JobConstraints"
        }
      },
      jobManagerTask: {
        serializedName: "jobManagerTask",
        type: {
          name: "Composite",
          className: "JobManagerTask"
        }
      },
      jobPreparationTask: {
        serializedName: "jobPreparationTask",
        type: {
          name: "Composite",
          className: "JobPreparationTask"
        }
      },
      jobReleaseTask: {
        serializedName: "jobReleaseTask",
        type: {
          name: "Composite",
          className: "JobReleaseTask"
        }
      },
      commonEnvironmentSettings: {
        serializedName: "commonEnvironmentSettings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EnvironmentSetting"
            }
          }
        }
      },
      poolInfo: {
        serializedName: "poolInfo",
        type: {
          name: "Composite",
          className: "PoolInformation"
        }
      },
      onAllTasksComplete: {
        serializedName: "onAllTasksComplete",
        type: {
          name: "Enum",
          allowedValues: ["noaction", "terminatejob"]
        }
      },
      onTaskFailure: {
        serializedName: "onTaskFailure",
        type: {
          name: "Enum",
          allowedValues: ["noaction", "performexitoptionsjobaction"]
        }
      },
      networkConfiguration: {
        serializedName: "networkConfiguration",
        type: {
          name: "Composite",
          className: "JobNetworkConfiguration"
        }
      },
      metadata: {
        serializedName: "metadata",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetadataItem"
            }
          }
        }
      },
      executionInfo: {
        serializedName: "executionInfo",
        type: {
          name: "Composite",
          className: "JobExecutionInformation"
        }
      },
      stats: {
        serializedName: "stats",
        type: {
          name: "Composite",
          className: "JobStatistics"
        }
      }
    }
  }
};

export const JobExecutionInformation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobExecutionInformation",
    modelProperties: {
      startTime: {
        serializedName: "startTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      poolId: {
        serializedName: "poolId",
        type: {
          name: "String"
        }
      },
      schedulingError: {
        serializedName: "schedulingError",
        type: {
          name: "Composite",
          className: "JobSchedulingError"
        }
      },
      terminateReason: {
        serializedName: "terminateReason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobSchedulingError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobSchedulingError",
    modelProperties: {
      category: {
        serializedName: "category",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["usererror", "servererror"]
        }
      },
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NameValuePair"
            }
          }
        }
      }
    }
  }
};

export const JobPatchParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobPatchParameter",
    modelProperties: {
      priority: {
        serializedName: "priority",
        type: {
          name: "Number"
        }
      },
      maxParallelTasks: {
        serializedName: "maxParallelTasks",
        type: {
          name: "Number"
        }
      },
      onAllTasksComplete: {
        serializedName: "onAllTasksComplete",
        type: {
          name: "Enum",
          allowedValues: ["noaction", "terminatejob"]
        }
      },
      constraints: {
        serializedName: "constraints",
        type: {
          name: "Composite",
          className: "JobConstraints"
        }
      },
      poolInfo: {
        serializedName: "poolInfo",
        type: {
          name: "Composite",
          className: "PoolInformation"
        }
      },
      metadata: {
        serializedName: "metadata",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetadataItem"
            }
          }
        }
      }
    }
  }
};

export const JobUpdateParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobUpdateParameter",
    modelProperties: {
      priority: {
        serializedName: "priority",
        type: {
          name: "Number"
        }
      },
      constraints: {
        serializedName: "constraints",
        type: {
          name: "Composite",
          className: "JobConstraints"
        }
      },
      poolInfo: {
        serializedName: "poolInfo",
        type: {
          name: "Composite",
          className: "PoolInformation"
        }
      },
      metadata: {
        serializedName: "metadata",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetadataItem"
            }
          }
        }
      },
      onAllTasksComplete: {
        serializedName: "onAllTasksComplete",
        type: {
          name: "Enum",
          allowedValues: ["noaction", "terminatejob"]
        }
      }
    }
  }
};

export const JobDisableParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobDisableParameter",
    modelProperties: {
      disableTasks: {
        serializedName: "disableTasks",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["requeue", "terminate", "wait"]
        }
      }
    }
  }
};

export const JobTerminateParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobTerminateParameter",
    modelProperties: {
      terminateReason: {
        serializedName: "terminateReason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobAddParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobAddParameter",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      priority: {
        serializedName: "priority",
        type: {
          name: "Number"
        }
      },
      maxParallelTasks: {
        defaultValue: -1,
        serializedName: "maxParallelTasks",
        type: {
          name: "Number"
        }
      },
      constraints: {
        serializedName: "constraints",
        type: {
          name: "Composite",
          className: "JobConstraints"
        }
      },
      jobManagerTask: {
        serializedName: "jobManagerTask",
        type: {
          name: "Composite",
          className: "JobManagerTask"
        }
      },
      jobPreparationTask: {
        serializedName: "jobPreparationTask",
        type: {
          name: "Composite",
          className: "JobPreparationTask"
        }
      },
      jobReleaseTask: {
        serializedName: "jobReleaseTask",
        type: {
          name: "Composite",
          className: "JobReleaseTask"
        }
      },
      commonEnvironmentSettings: {
        serializedName: "commonEnvironmentSettings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EnvironmentSetting"
            }
          }
        }
      },
      poolInfo: {
        serializedName: "poolInfo",
        type: {
          name: "Composite",
          className: "PoolInformation"
        }
      },
      onAllTasksComplete: {
        serializedName: "onAllTasksComplete",
        type: {
          name: "Enum",
          allowedValues: ["noaction", "terminatejob"]
        }
      },
      onTaskFailure: {
        serializedName: "onTaskFailure",
        type: {
          name: "Enum",
          allowedValues: ["noaction", "performexitoptionsjobaction"]
        }
      },
      metadata: {
        serializedName: "metadata",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetadataItem"
            }
          }
        }
      },
      usesTaskDependencies: {
        serializedName: "usesTaskDependencies",
        type: {
          name: "Boolean"
        }
      },
      networkConfiguration: {
        serializedName: "networkConfiguration",
        type: {
          name: "Composite",
          className: "JobNetworkConfiguration"
        }
      }
    }
  }
};

export const CloudJobListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudJobListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CloudJob"
            }
          }
        }
      },
      odataNextLink: {
        serializedName: "odata\\.nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloudJobListPreparationAndReleaseTaskStatusResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudJobListPreparationAndReleaseTaskStatusResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "JobPreparationAndReleaseTaskExecutionInformation"
            }
          }
        }
      },
      odataNextLink: {
        serializedName: "odata\\.nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobPreparationAndReleaseTaskExecutionInformation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobPreparationAndReleaseTaskExecutionInformation",
    modelProperties: {
      poolId: {
        serializedName: "poolId",
        type: {
          name: "String"
        }
      },
      nodeId: {
        serializedName: "nodeId",
        type: {
          name: "String"
        }
      },
      nodeUrl: {
        serializedName: "nodeUrl",
        type: {
          name: "String"
        }
      },
      jobPreparationTaskExecutionInfo: {
        serializedName: "jobPreparationTaskExecutionInfo",
        type: {
          name: "Composite",
          className: "JobPreparationTaskExecutionInformation"
        }
      },
      jobReleaseTaskExecutionInfo: {
        serializedName: "jobReleaseTaskExecutionInfo",
        type: {
          name: "Composite",
          className: "JobReleaseTaskExecutionInformation"
        }
      }
    }
  }
};

export const JobPreparationTaskExecutionInformation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobPreparationTaskExecutionInformation",
    modelProperties: {
      startTime: {
        serializedName: "startTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      state: {
        serializedName: "state",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["running", "completed"]
        }
      },
      taskRootDirectory: {
        serializedName: "taskRootDirectory",
        type: {
          name: "String"
        }
      },
      taskRootDirectoryUrl: {
        serializedName: "taskRootDirectoryUrl",
        type: {
          name: "String"
        }
      },
      exitCode: {
        serializedName: "exitCode",
        type: {
          name: "Number"
        }
      },
      containerInfo: {
        serializedName: "containerInfo",
        type: {
          name: "Composite",
          className: "TaskContainerExecutionInformation"
        }
      },
      failureInfo: {
        serializedName: "failureInfo",
        type: {
          name: "Composite",
          className: "TaskFailureInformation"
        }
      },
      retryCount: {
        serializedName: "retryCount",
        required: true,
        type: {
          name: "Number"
        }
      },
      lastRetryTime: {
        serializedName: "lastRetryTime",
        type: {
          name: "DateTime"
        }
      },
      result: {
        serializedName: "result",
        type: {
          name: "Enum",
          allowedValues: ["success", "failure"]
        }
      }
    }
  }
};

export const TaskContainerExecutionInformation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskContainerExecutionInformation",
    modelProperties: {
      containerId: {
        serializedName: "containerId",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "state",
        type: {
          name: "String"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TaskFailureInformation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskFailureInformation",
    modelProperties: {
      category: {
        serializedName: "category",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["usererror", "servererror"]
        }
      },
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NameValuePair"
            }
          }
        }
      }
    }
  }
};

export const JobReleaseTaskExecutionInformation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobReleaseTaskExecutionInformation",
    modelProperties: {
      startTime: {
        serializedName: "startTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      state: {
        serializedName: "state",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["running", "completed"]
        }
      },
      taskRootDirectory: {
        serializedName: "taskRootDirectory",
        type: {
          name: "String"
        }
      },
      taskRootDirectoryUrl: {
        serializedName: "taskRootDirectoryUrl",
        type: {
          name: "String"
        }
      },
      exitCode: {
        serializedName: "exitCode",
        type: {
          name: "Number"
        }
      },
      containerInfo: {
        serializedName: "containerInfo",
        type: {
          name: "Composite",
          className: "TaskContainerExecutionInformation"
        }
      },
      failureInfo: {
        serializedName: "failureInfo",
        type: {
          name: "Composite",
          className: "TaskFailureInformation"
        }
      },
      result: {
        serializedName: "result",
        type: {
          name: "Enum",
          allowedValues: ["success", "failure"]
        }
      }
    }
  }
};

export const TaskCountsResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskCountsResult",
    modelProperties: {
      taskCounts: {
        serializedName: "taskCounts",
        type: {
          name: "Composite",
          className: "TaskCounts"
        }
      },
      taskSlotCounts: {
        serializedName: "taskSlotCounts",
        type: {
          name: "Composite",
          className: "TaskSlotCounts"
        }
      }
    }
  }
};

export const TaskCounts: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskCounts",
    modelProperties: {
      active: {
        serializedName: "active",
        required: true,
        type: {
          name: "Number"
        }
      },
      running: {
        serializedName: "running",
        required: true,
        type: {
          name: "Number"
        }
      },
      completed: {
        serializedName: "completed",
        required: true,
        type: {
          name: "Number"
        }
      },
      succeeded: {
        serializedName: "succeeded",
        required: true,
        type: {
          name: "Number"
        }
      },
      failed: {
        serializedName: "failed",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const TaskSlotCounts: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskSlotCounts",
    modelProperties: {
      active: {
        serializedName: "active",
        required: true,
        type: {
          name: "Number"
        }
      },
      running: {
        serializedName: "running",
        required: true,
        type: {
          name: "Number"
        }
      },
      completed: {
        serializedName: "completed",
        required: true,
        type: {
          name: "Number"
        }
      },
      succeeded: {
        serializedName: "succeeded",
        required: true,
        type: {
          name: "Number"
        }
      },
      failed: {
        serializedName: "failed",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const PoolAddParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PoolAddParameter",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      vmSize: {
        serializedName: "vmSize",
        required: true,
        type: {
          name: "String"
        }
      },
      cloudServiceConfiguration: {
        serializedName: "cloudServiceConfiguration",
        type: {
          name: "Composite",
          className: "CloudServiceConfiguration"
        }
      },
      virtualMachineConfiguration: {
        serializedName: "virtualMachineConfiguration",
        type: {
          name: "Composite",
          className: "VirtualMachineConfiguration"
        }
      },
      resizeTimeout: {
        serializedName: "resizeTimeout",
        type: {
          name: "TimeSpan"
        }
      },
      targetDedicatedNodes: {
        serializedName: "targetDedicatedNodes",
        type: {
          name: "Number"
        }
      },
      targetLowPriorityNodes: {
        serializedName: "targetLowPriorityNodes",
        type: {
          name: "Number"
        }
      },
      enableAutoScale: {
        serializedName: "enableAutoScale",
        type: {
          name: "Boolean"
        }
      },
      autoScaleFormula: {
        serializedName: "autoScaleFormula",
        type: {
          name: "String"
        }
      },
      autoScaleEvaluationInterval: {
        serializedName: "autoScaleEvaluationInterval",
        type: {
          name: "TimeSpan"
        }
      },
      enableInterNodeCommunication: {
        serializedName: "enableInterNodeCommunication",
        type: {
          name: "Boolean"
        }
      },
      networkConfiguration: {
        serializedName: "networkConfiguration",
        type: {
          name: "Composite",
          className: "NetworkConfiguration"
        }
      },
      startTask: {
        serializedName: "startTask",
        type: {
          name: "Composite",
          className: "StartTask"
        }
      },
      certificateReferences: {
        serializedName: "certificateReferences",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CertificateReference"
            }
          }
        }
      },
      applicationPackageReferences: {
        serializedName: "applicationPackageReferences",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationPackageReference"
            }
          }
        }
      },
      applicationLicenses: {
        serializedName: "applicationLicenses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      taskSlotsPerNode: {
        serializedName: "taskSlotsPerNode",
        type: {
          name: "Number"
        }
      },
      taskSchedulingPolicy: {
        serializedName: "taskSchedulingPolicy",
        type: {
          name: "Composite",
          className: "TaskSchedulingPolicy"
        }
      },
      userAccounts: {
        serializedName: "userAccounts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UserAccount"
            }
          }
        }
      },
      metadata: {
        serializedName: "metadata",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetadataItem"
            }
          }
        }
      },
      mountConfiguration: {
        serializedName: "mountConfiguration",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MountConfiguration"
            }
          }
        }
      }
    }
  }
};

export const CloudPoolListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudPoolListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CloudPool"
            }
          }
        }
      },
      odataNextLink: {
        serializedName: "odata\\.nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloudPool: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudPool",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      url: {
        serializedName: "url",
        type: {
          name: "String"
        }
      },
      eTag: {
        serializedName: "eTag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "lastModified",
        type: {
          name: "DateTime"
        }
      },
      creationTime: {
        serializedName: "creationTime",
        type: {
          name: "DateTime"
        }
      },
      state: {
        serializedName: "state",
        type: {
          name: "Enum",
          allowedValues: ["active", "deleting"]
        }
      },
      stateTransitionTime: {
        serializedName: "stateTransitionTime",
        type: {
          name: "DateTime"
        }
      },
      allocationState: {
        serializedName: "allocationState",
        type: {
          name: "Enum",
          allowedValues: ["steady", "resizing", "stopping"]
        }
      },
      allocationStateTransitionTime: {
        serializedName: "allocationStateTransitionTime",
        type: {
          name: "DateTime"
        }
      },
      vmSize: {
        serializedName: "vmSize",
        type: {
          name: "String"
        }
      },
      cloudServiceConfiguration: {
        serializedName: "cloudServiceConfiguration",
        type: {
          name: "Composite",
          className: "CloudServiceConfiguration"
        }
      },
      virtualMachineConfiguration: {
        serializedName: "virtualMachineConfiguration",
        type: {
          name: "Composite",
          className: "VirtualMachineConfiguration"
        }
      },
      resizeTimeout: {
        serializedName: "resizeTimeout",
        type: {
          name: "TimeSpan"
        }
      },
      resizeErrors: {
        serializedName: "resizeErrors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResizeError"
            }
          }
        }
      },
      currentDedicatedNodes: {
        serializedName: "currentDedicatedNodes",
        type: {
          name: "Number"
        }
      },
      currentLowPriorityNodes: {
        serializedName: "currentLowPriorityNodes",
        type: {
          name: "Number"
        }
      },
      targetDedicatedNodes: {
        serializedName: "targetDedicatedNodes",
        type: {
          name: "Number"
        }
      },
      targetLowPriorityNodes: {
        serializedName: "targetLowPriorityNodes",
        type: {
          name: "Number"
        }
      },
      enableAutoScale: {
        serializedName: "enableAutoScale",
        type: {
          name: "Boolean"
        }
      },
      autoScaleFormula: {
        serializedName: "autoScaleFormula",
        type: {
          name: "String"
        }
      },
      autoScaleEvaluationInterval: {
        serializedName: "autoScaleEvaluationInterval",
        type: {
          name: "TimeSpan"
        }
      },
      autoScaleRun: {
        serializedName: "autoScaleRun",
        type: {
          name: "Composite",
          className: "AutoScaleRun"
        }
      },
      enableInterNodeCommunication: {
        serializedName: "enableInterNodeCommunication",
        type: {
          name: "Boolean"
        }
      },
      networkConfiguration: {
        serializedName: "networkConfiguration",
        type: {
          name: "Composite",
          className: "NetworkConfiguration"
        }
      },
      startTask: {
        serializedName: "startTask",
        type: {
          name: "Composite",
          className: "StartTask"
        }
      },
      certificateReferences: {
        serializedName: "certificateReferences",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CertificateReference"
            }
          }
        }
      },
      applicationPackageReferences: {
        serializedName: "applicationPackageReferences",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationPackageReference"
            }
          }
        }
      },
      applicationLicenses: {
        serializedName: "applicationLicenses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      taskSlotsPerNode: {
        serializedName: "taskSlotsPerNode",
        type: {
          name: "Number"
        }
      },
      taskSchedulingPolicy: {
        serializedName: "taskSchedulingPolicy",
        type: {
          name: "Composite",
          className: "TaskSchedulingPolicy"
        }
      },
      userAccounts: {
        serializedName: "userAccounts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UserAccount"
            }
          }
        }
      },
      metadata: {
        serializedName: "metadata",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetadataItem"
            }
          }
        }
      },
      stats: {
        serializedName: "stats",
        type: {
          name: "Composite",
          className: "PoolStatistics"
        }
      },
      mountConfiguration: {
        serializedName: "mountConfiguration",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MountConfiguration"
            }
          }
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "BatchPoolIdentity"
        }
      }
    }
  }
};

export const ResizeError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResizeError",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      values: {
        serializedName: "values",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NameValuePair"
            }
          }
        }
      }
    }
  }
};

export const AutoScaleRun: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AutoScaleRun",
    modelProperties: {
      timestamp: {
        serializedName: "timestamp",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      results: {
        serializedName: "results",
        type: {
          name: "String"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "AutoScaleRunError"
        }
      }
    }
  }
};

export const AutoScaleRunError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AutoScaleRunError",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      values: {
        serializedName: "values",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NameValuePair"
            }
          }
        }
      }
    }
  }
};

export const BatchPoolIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BatchPoolIdentity",
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["UserAssigned", "None"]
        }
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UserAssignedIdentity"
            }
          }
        }
      }
    }
  }
};

export const UserAssignedIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserAssignedIdentity",
    modelProperties: {
      resourceId: {
        serializedName: "resourceId",
        required: true,
        type: {
          name: "String"
        }
      },
      clientId: {
        serializedName: "clientId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PoolPatchParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PoolPatchParameter",
    modelProperties: {
      startTask: {
        serializedName: "startTask",
        type: {
          name: "Composite",
          className: "StartTask"
        }
      },
      certificateReferences: {
        serializedName: "certificateReferences",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CertificateReference"
            }
          }
        }
      },
      applicationPackageReferences: {
        serializedName: "applicationPackageReferences",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationPackageReference"
            }
          }
        }
      },
      metadata: {
        serializedName: "metadata",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetadataItem"
            }
          }
        }
      }
    }
  }
};

export const PoolEnableAutoScaleParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PoolEnableAutoScaleParameter",
    modelProperties: {
      autoScaleFormula: {
        serializedName: "autoScaleFormula",
        type: {
          name: "String"
        }
      },
      autoScaleEvaluationInterval: {
        serializedName: "autoScaleEvaluationInterval",
        type: {
          name: "TimeSpan"
        }
      }
    }
  }
};

export const PoolEvaluateAutoScaleParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PoolEvaluateAutoScaleParameter",
    modelProperties: {
      autoScaleFormula: {
        serializedName: "autoScaleFormula",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PoolResizeParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PoolResizeParameter",
    modelProperties: {
      targetDedicatedNodes: {
        serializedName: "targetDedicatedNodes",
        type: {
          name: "Number"
        }
      },
      targetLowPriorityNodes: {
        serializedName: "targetLowPriorityNodes",
        type: {
          name: "Number"
        }
      },
      resizeTimeout: {
        serializedName: "resizeTimeout",
        type: {
          name: "TimeSpan"
        }
      },
      nodeDeallocationOption: {
        serializedName: "nodeDeallocationOption",
        type: {
          name: "Enum",
          allowedValues: [
            "requeue",
            "terminate",
            "taskcompletion",
            "retaineddata"
          ]
        }
      }
    }
  }
};

export const PoolUpdatePropertiesParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PoolUpdatePropertiesParameter",
    modelProperties: {
      startTask: {
        serializedName: "startTask",
        type: {
          name: "Composite",
          className: "StartTask"
        }
      },
      certificateReferences: {
        serializedName: "certificateReferences",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CertificateReference"
            }
          }
        }
      },
      applicationPackageReferences: {
        serializedName: "applicationPackageReferences",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationPackageReference"
            }
          }
        }
      },
      metadata: {
        serializedName: "metadata",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetadataItem"
            }
          }
        }
      }
    }
  }
};

export const NodeRemoveParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NodeRemoveParameter",
    modelProperties: {
      nodeList: {
        constraints: {
          MaxItems: 100
        },
        serializedName: "nodeList",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      resizeTimeout: {
        serializedName: "resizeTimeout",
        type: {
          name: "TimeSpan"
        }
      },
      nodeDeallocationOption: {
        serializedName: "nodeDeallocationOption",
        type: {
          name: "Enum",
          allowedValues: [
            "requeue",
            "terminate",
            "taskcompletion",
            "retaineddata"
          ]
        }
      }
    }
  }
};

export const TaskAddParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskAddParameter",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      commandLine: {
        serializedName: "commandLine",
        required: true,
        type: {
          name: "String"
        }
      },
      containerSettings: {
        serializedName: "containerSettings",
        type: {
          name: "Composite",
          className: "TaskContainerSettings"
        }
      },
      exitConditions: {
        serializedName: "exitConditions",
        type: {
          name: "Composite",
          className: "ExitConditions"
        }
      },
      resourceFiles: {
        serializedName: "resourceFiles",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceFile"
            }
          }
        }
      },
      outputFiles: {
        serializedName: "outputFiles",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OutputFile"
            }
          }
        }
      },
      environmentSettings: {
        serializedName: "environmentSettings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EnvironmentSetting"
            }
          }
        }
      },
      affinityInfo: {
        serializedName: "affinityInfo",
        type: {
          name: "Composite",
          className: "AffinityInformation"
        }
      },
      constraints: {
        serializedName: "constraints",
        type: {
          name: "Composite",
          className: "TaskConstraints"
        }
      },
      requiredSlots: {
        serializedName: "requiredSlots",
        type: {
          name: "Number"
        }
      },
      userIdentity: {
        serializedName: "userIdentity",
        type: {
          name: "Composite",
          className: "UserIdentity"
        }
      },
      multiInstanceSettings: {
        serializedName: "multiInstanceSettings",
        type: {
          name: "Composite",
          className: "MultiInstanceSettings"
        }
      },
      dependsOn: {
        serializedName: "dependsOn",
        type: {
          name: "Composite",
          className: "TaskDependencies"
        }
      },
      applicationPackageReferences: {
        serializedName: "applicationPackageReferences",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationPackageReference"
            }
          }
        }
      },
      authenticationTokenSettings: {
        serializedName: "authenticationTokenSettings",
        type: {
          name: "Composite",
          className: "AuthenticationTokenSettings"
        }
      }
    }
  }
};

export const ExitConditions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExitConditions",
    modelProperties: {
      exitCodes: {
        serializedName: "exitCodes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExitCodeMapping"
            }
          }
        }
      },
      exitCodeRanges: {
        serializedName: "exitCodeRanges",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExitCodeRangeMapping"
            }
          }
        }
      },
      preProcessingError: {
        serializedName: "preProcessingError",
        type: {
          name: "Composite",
          className: "ExitOptions"
        }
      },
      fileUploadError: {
        serializedName: "fileUploadError",
        type: {
          name: "Composite",
          className: "ExitOptions"
        }
      },
      default: {
        serializedName: "default",
        type: {
          name: "Composite",
          className: "ExitOptions"
        }
      }
    }
  }
};

export const ExitCodeMapping: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExitCodeMapping",
    modelProperties: {
      code: {
        serializedName: "code",
        required: true,
        type: {
          name: "Number"
        }
      },
      exitOptions: {
        serializedName: "exitOptions",
        type: {
          name: "Composite",
          className: "ExitOptions"
        }
      }
    }
  }
};

export const ExitOptions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExitOptions",
    modelProperties: {
      jobAction: {
        serializedName: "jobAction",
        type: {
          name: "Enum",
          allowedValues: ["none", "disable", "terminate"]
        }
      },
      dependencyAction: {
        serializedName: "dependencyAction",
        type: {
          name: "Enum",
          allowedValues: ["satisfy", "block"]
        }
      }
    }
  }
};

export const ExitCodeRangeMapping: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExitCodeRangeMapping",
    modelProperties: {
      start: {
        serializedName: "start",
        required: true,
        type: {
          name: "Number"
        }
      },
      end: {
        serializedName: "end",
        required: true,
        type: {
          name: "Number"
        }
      },
      exitOptions: {
        serializedName: "exitOptions",
        type: {
          name: "Composite",
          className: "ExitOptions"
        }
      }
    }
  }
};

export const AffinityInformation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AffinityInformation",
    modelProperties: {
      affinityId: {
        serializedName: "affinityId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MultiInstanceSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MultiInstanceSettings",
    modelProperties: {
      numberOfInstances: {
        serializedName: "numberOfInstances",
        type: {
          name: "Number"
        }
      },
      coordinationCommandLine: {
        serializedName: "coordinationCommandLine",
        required: true,
        type: {
          name: "String"
        }
      },
      commonResourceFiles: {
        serializedName: "commonResourceFiles",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceFile"
            }
          }
        }
      }
    }
  }
};

export const TaskDependencies: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskDependencies",
    modelProperties: {
      taskIds: {
        serializedName: "taskIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      taskIdRanges: {
        serializedName: "taskIdRanges",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TaskIdRange"
            }
          }
        }
      }
    }
  }
};

export const TaskIdRange: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskIdRange",
    modelProperties: {
      start: {
        serializedName: "start",
        required: true,
        type: {
          name: "Number"
        }
      },
      end: {
        serializedName: "end",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const CloudTaskListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudTaskListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CloudTask"
            }
          }
        }
      },
      odataNextLink: {
        serializedName: "odata\\.nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloudTask: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudTask",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      url: {
        serializedName: "url",
        type: {
          name: "String"
        }
      },
      eTag: {
        serializedName: "eTag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "lastModified",
        type: {
          name: "DateTime"
        }
      },
      creationTime: {
        serializedName: "creationTime",
        type: {
          name: "DateTime"
        }
      },
      exitConditions: {
        serializedName: "exitConditions",
        type: {
          name: "Composite",
          className: "ExitConditions"
        }
      },
      state: {
        serializedName: "state",
        type: {
          name: "Enum",
          allowedValues: ["active", "preparing", "running", "completed"]
        }
      },
      stateTransitionTime: {
        serializedName: "stateTransitionTime",
        type: {
          name: "DateTime"
        }
      },
      previousState: {
        serializedName: "previousState",
        type: {
          name: "Enum",
          allowedValues: ["active", "preparing", "running", "completed"]
        }
      },
      previousStateTransitionTime: {
        serializedName: "previousStateTransitionTime",
        type: {
          name: "DateTime"
        }
      },
      commandLine: {
        serializedName: "commandLine",
        type: {
          name: "String"
        }
      },
      containerSettings: {
        serializedName: "containerSettings",
        type: {
          name: "Composite",
          className: "TaskContainerSettings"
        }
      },
      resourceFiles: {
        serializedName: "resourceFiles",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceFile"
            }
          }
        }
      },
      outputFiles: {
        serializedName: "outputFiles",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OutputFile"
            }
          }
        }
      },
      environmentSettings: {
        serializedName: "environmentSettings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EnvironmentSetting"
            }
          }
        }
      },
      affinityInfo: {
        serializedName: "affinityInfo",
        type: {
          name: "Composite",
          className: "AffinityInformation"
        }
      },
      constraints: {
        serializedName: "constraints",
        type: {
          name: "Composite",
          className: "TaskConstraints"
        }
      },
      requiredSlots: {
        serializedName: "requiredSlots",
        type: {
          name: "Number"
        }
      },
      userIdentity: {
        serializedName: "userIdentity",
        type: {
          name: "Composite",
          className: "UserIdentity"
        }
      },
      executionInfo: {
        serializedName: "executionInfo",
        type: {
          name: "Composite",
          className: "TaskExecutionInformation"
        }
      },
      nodeInfo: {
        serializedName: "nodeInfo",
        type: {
          name: "Composite",
          className: "ComputeNodeInformation"
        }
      },
      multiInstanceSettings: {
        serializedName: "multiInstanceSettings",
        type: {
          name: "Composite",
          className: "MultiInstanceSettings"
        }
      },
      stats: {
        serializedName: "stats",
        type: {
          name: "Composite",
          className: "TaskStatistics"
        }
      },
      dependsOn: {
        serializedName: "dependsOn",
        type: {
          name: "Composite",
          className: "TaskDependencies"
        }
      },
      applicationPackageReferences: {
        serializedName: "applicationPackageReferences",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationPackageReference"
            }
          }
        }
      },
      authenticationTokenSettings: {
        serializedName: "authenticationTokenSettings",
        type: {
          name: "Composite",
          className: "AuthenticationTokenSettings"
        }
      }
    }
  }
};

export const TaskExecutionInformation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskExecutionInformation",
    modelProperties: {
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      exitCode: {
        serializedName: "exitCode",
        type: {
          name: "Number"
        }
      },
      containerInfo: {
        serializedName: "containerInfo",
        type: {
          name: "Composite",
          className: "TaskContainerExecutionInformation"
        }
      },
      failureInfo: {
        serializedName: "failureInfo",
        type: {
          name: "Composite",
          className: "TaskFailureInformation"
        }
      },
      retryCount: {
        serializedName: "retryCount",
        required: true,
        type: {
          name: "Number"
        }
      },
      lastRetryTime: {
        serializedName: "lastRetryTime",
        type: {
          name: "DateTime"
        }
      },
      requeueCount: {
        serializedName: "requeueCount",
        required: true,
        type: {
          name: "Number"
        }
      },
      lastRequeueTime: {
        serializedName: "lastRequeueTime",
        type: {
          name: "DateTime"
        }
      },
      result: {
        serializedName: "result",
        type: {
          name: "Enum",
          allowedValues: ["success", "failure"]
        }
      }
    }
  }
};

export const ComputeNodeInformation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeNodeInformation",
    modelProperties: {
      affinityId: {
        serializedName: "affinityId",
        type: {
          name: "String"
        }
      },
      nodeUrl: {
        serializedName: "nodeUrl",
        type: {
          name: "String"
        }
      },
      poolId: {
        serializedName: "poolId",
        type: {
          name: "String"
        }
      },
      nodeId: {
        serializedName: "nodeId",
        type: {
          name: "String"
        }
      },
      taskRootDirectory: {
        serializedName: "taskRootDirectory",
        type: {
          name: "String"
        }
      },
      taskRootDirectoryUrl: {
        serializedName: "taskRootDirectoryUrl",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TaskStatistics: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskStatistics",
    modelProperties: {
      url: {
        serializedName: "url",
        required: true,
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      lastUpdateTime: {
        serializedName: "lastUpdateTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      userCPUTime: {
        serializedName: "userCPUTime",
        required: true,
        type: {
          name: "TimeSpan"
        }
      },
      kernelCPUTime: {
        serializedName: "kernelCPUTime",
        required: true,
        type: {
          name: "TimeSpan"
        }
      },
      wallClockTime: {
        serializedName: "wallClockTime",
        required: true,
        type: {
          name: "TimeSpan"
        }
      },
      readIOps: {
        serializedName: "readIOps",
        required: true,
        type: {
          name: "Number"
        }
      },
      writeIOps: {
        serializedName: "writeIOps",
        required: true,
        type: {
          name: "Number"
        }
      },
      readIOGiB: {
        serializedName: "readIOGiB",
        required: true,
        type: {
          name: "Number"
        }
      },
      writeIOGiB: {
        serializedName: "writeIOGiB",
        required: true,
        type: {
          name: "Number"
        }
      },
      waitTime: {
        serializedName: "waitTime",
        required: true,
        type: {
          name: "TimeSpan"
        }
      }
    }
  }
};

export const TaskAddCollectionParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskAddCollectionParameter",
    modelProperties: {
      value: {
        constraints: {
          MaxItems: 100
        },
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TaskAddParameter"
            }
          }
        }
      }
    }
  }
};

export const TaskAddCollectionResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskAddCollectionResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TaskAddResult"
            }
          }
        }
      }
    }
  }
};

export const TaskAddResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskAddResult",
    modelProperties: {
      status: {
        serializedName: "status",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["success", "clienterror", "servererror"]
        }
      },
      taskId: {
        serializedName: "taskId",
        required: true,
        type: {
          name: "String"
        }
      },
      eTag: {
        serializedName: "eTag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "lastModified",
        type: {
          name: "DateTime"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "BatchError"
        }
      }
    }
  }
};

export const TaskUpdateParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskUpdateParameter",
    modelProperties: {
      constraints: {
        serializedName: "constraints",
        type: {
          name: "Composite",
          className: "TaskConstraints"
        }
      }
    }
  }
};

export const CloudTaskListSubtasksResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudTaskListSubtasksResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SubtaskInformation"
            }
          }
        }
      }
    }
  }
};

export const SubtaskInformation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SubtaskInformation",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "Number"
        }
      },
      nodeInfo: {
        serializedName: "nodeInfo",
        type: {
          name: "Composite",
          className: "ComputeNodeInformation"
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      exitCode: {
        serializedName: "exitCode",
        type: {
          name: "Number"
        }
      },
      containerInfo: {
        serializedName: "containerInfo",
        type: {
          name: "Composite",
          className: "TaskContainerExecutionInformation"
        }
      },
      failureInfo: {
        serializedName: "failureInfo",
        type: {
          name: "Composite",
          className: "TaskFailureInformation"
        }
      },
      state: {
        serializedName: "state",
        type: {
          name: "Enum",
          allowedValues: ["preparing", "running", "completed"]
        }
      },
      stateTransitionTime: {
        serializedName: "stateTransitionTime",
        type: {
          name: "DateTime"
        }
      },
      previousState: {
        serializedName: "previousState",
        type: {
          name: "Enum",
          allowedValues: ["preparing", "running", "completed"]
        }
      },
      previousStateTransitionTime: {
        serializedName: "previousStateTransitionTime",
        type: {
          name: "DateTime"
        }
      },
      result: {
        serializedName: "result",
        type: {
          name: "Enum",
          allowedValues: ["success", "failure"]
        }
      }
    }
  }
};

export const ComputeNodeUser: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeNodeUser",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      isAdmin: {
        serializedName: "isAdmin",
        type: {
          name: "Boolean"
        }
      },
      expiryTime: {
        serializedName: "expiryTime",
        type: {
          name: "DateTime"
        }
      },
      password: {
        serializedName: "password",
        type: {
          name: "String"
        }
      },
      sshPublicKey: {
        serializedName: "sshPublicKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NodeUpdateUserParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NodeUpdateUserParameter",
    modelProperties: {
      password: {
        serializedName: "password",
        type: {
          name: "String"
        }
      },
      expiryTime: {
        serializedName: "expiryTime",
        type: {
          name: "DateTime"
        }
      },
      sshPublicKey: {
        serializedName: "sshPublicKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComputeNode: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeNode",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      url: {
        serializedName: "url",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "state",
        type: {
          name: "Enum",
          allowedValues: [
            "idle",
            "rebooting",
            "reimaging",
            "running",
            "unusable",
            "creating",
            "starting",
            "waitingforstarttask",
            "starttaskfailed",
            "unknown",
            "leavingpool",
            "offline",
            "preempted"
          ]
        }
      },
      schedulingState: {
        serializedName: "schedulingState",
        type: {
          name: "Enum",
          allowedValues: ["enabled", "disabled"]
        }
      },
      stateTransitionTime: {
        serializedName: "stateTransitionTime",
        type: {
          name: "DateTime"
        }
      },
      lastBootTime: {
        serializedName: "lastBootTime",
        type: {
          name: "DateTime"
        }
      },
      allocationTime: {
        serializedName: "allocationTime",
        type: {
          name: "DateTime"
        }
      },
      ipAddress: {
        serializedName: "ipAddress",
        type: {
          name: "String"
        }
      },
      affinityId: {
        serializedName: "affinityId",
        type: {
          name: "String"
        }
      },
      vmSize: {
        serializedName: "vmSize",
        type: {
          name: "String"
        }
      },
      totalTasksRun: {
        serializedName: "totalTasksRun",
        type: {
          name: "Number"
        }
      },
      runningTasksCount: {
        serializedName: "runningTasksCount",
        type: {
          name: "Number"
        }
      },
      runningTaskSlotsCount: {
        serializedName: "runningTaskSlotsCount",
        type: {
          name: "Number"
        }
      },
      totalTasksSucceeded: {
        serializedName: "totalTasksSucceeded",
        type: {
          name: "Number"
        }
      },
      recentTasks: {
        serializedName: "recentTasks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TaskInformation"
            }
          }
        }
      },
      startTask: {
        serializedName: "startTask",
        type: {
          name: "Composite",
          className: "StartTask"
        }
      },
      startTaskInfo: {
        serializedName: "startTaskInfo",
        type: {
          name: "Composite",
          className: "StartTaskInformation"
        }
      },
      certificateReferences: {
        serializedName: "certificateReferences",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CertificateReference"
            }
          }
        }
      },
      errors: {
        serializedName: "errors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ComputeNodeError"
            }
          }
        }
      },
      isDedicated: {
        serializedName: "isDedicated",
        type: {
          name: "Boolean"
        }
      },
      endpointConfiguration: {
        serializedName: "endpointConfiguration",
        type: {
          name: "Composite",
          className: "ComputeNodeEndpointConfiguration"
        }
      },
      nodeAgentInfo: {
        serializedName: "nodeAgentInfo",
        type: {
          name: "Composite",
          className: "NodeAgentInformation"
        }
      },
      virtualMachineInfo: {
        serializedName: "virtualMachineInfo",
        type: {
          name: "Composite",
          className: "VirtualMachineInfo"
        }
      }
    }
  }
};

export const TaskInformation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskInformation",
    modelProperties: {
      taskUrl: {
        serializedName: "taskUrl",
        type: {
          name: "String"
        }
      },
      jobId: {
        serializedName: "jobId",
        type: {
          name: "String"
        }
      },
      taskId: {
        serializedName: "taskId",
        type: {
          name: "String"
        }
      },
      subtaskId: {
        serializedName: "subtaskId",
        type: {
          name: "Number"
        }
      },
      taskState: {
        serializedName: "taskState",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["active", "preparing", "running", "completed"]
        }
      },
      executionInfo: {
        serializedName: "executionInfo",
        type: {
          name: "Composite",
          className: "TaskExecutionInformation"
        }
      }
    }
  }
};

export const StartTaskInformation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StartTaskInformation",
    modelProperties: {
      state: {
        serializedName: "state",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["running", "completed"]
        }
      },
      startTime: {
        serializedName: "startTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      exitCode: {
        serializedName: "exitCode",
        type: {
          name: "Number"
        }
      },
      containerInfo: {
        serializedName: "containerInfo",
        type: {
          name: "Composite",
          className: "TaskContainerExecutionInformation"
        }
      },
      failureInfo: {
        serializedName: "failureInfo",
        type: {
          name: "Composite",
          className: "TaskFailureInformation"
        }
      },
      retryCount: {
        serializedName: "retryCount",
        required: true,
        type: {
          name: "Number"
        }
      },
      lastRetryTime: {
        serializedName: "lastRetryTime",
        type: {
          name: "DateTime"
        }
      },
      result: {
        serializedName: "result",
        type: {
          name: "Enum",
          allowedValues: ["success", "failure"]
        }
      }
    }
  }
};

export const ComputeNodeError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeNodeError",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      errorDetails: {
        serializedName: "errorDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NameValuePair"
            }
          }
        }
      }
    }
  }
};

export const ComputeNodeEndpointConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeNodeEndpointConfiguration",
    modelProperties: {
      inboundEndpoints: {
        serializedName: "inboundEndpoints",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InboundEndpoint"
            }
          }
        }
      }
    }
  }
};

export const InboundEndpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InboundEndpoint",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      protocol: {
        serializedName: "protocol",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["tcp", "udp"]
        }
      },
      publicIPAddress: {
        serializedName: "publicIPAddress",
        required: true,
        type: {
          name: "String"
        }
      },
      publicFqdn: {
        serializedName: "publicFQDN",
        required: true,
        type: {
          name: "String"
        }
      },
      frontendPort: {
        serializedName: "frontendPort",
        required: true,
        type: {
          name: "Number"
        }
      },
      backendPort: {
        serializedName: "backendPort",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const NodeAgentInformation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NodeAgentInformation",
    modelProperties: {
      version: {
        serializedName: "version",
        required: true,
        type: {
          name: "String"
        }
      },
      lastUpdateTime: {
        serializedName: "lastUpdateTime",
        required: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const VirtualMachineInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineInfo",
    modelProperties: {
      imageReference: {
        serializedName: "imageReference",
        type: {
          name: "Composite",
          className: "ImageReference"
        }
      }
    }
  }
};

export const NodeRebootParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NodeRebootParameter",
    modelProperties: {
      nodeRebootOption: {
        serializedName: "nodeRebootOption",
        type: {
          name: "Enum",
          allowedValues: [
            "requeue",
            "terminate",
            "taskcompletion",
            "retaineddata"
          ]
        }
      }
    }
  }
};

export const NodeReimageParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NodeReimageParameter",
    modelProperties: {
      nodeReimageOption: {
        serializedName: "nodeReimageOption",
        type: {
          name: "Enum",
          allowedValues: [
            "requeue",
            "terminate",
            "taskcompletion",
            "retaineddata"
          ]
        }
      }
    }
  }
};

export const NodeDisableSchedulingParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NodeDisableSchedulingParameter",
    modelProperties: {
      nodeDisableSchedulingOption: {
        serializedName: "nodeDisableSchedulingOption",
        type: {
          name: "Enum",
          allowedValues: ["requeue", "terminate", "taskcompletion"]
        }
      }
    }
  }
};

export const ComputeNodeGetRemoteLoginSettingsResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeNodeGetRemoteLoginSettingsResult",
    modelProperties: {
      remoteLoginIPAddress: {
        serializedName: "remoteLoginIPAddress",
        required: true,
        type: {
          name: "String"
        }
      },
      remoteLoginPort: {
        serializedName: "remoteLoginPort",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const UploadBatchServiceLogsConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UploadBatchServiceLogsConfiguration",
    modelProperties: {
      containerUrl: {
        serializedName: "containerUrl",
        required: true,
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      identityReference: {
        serializedName: "identityReference",
        type: {
          name: "Composite",
          className: "ComputeNodeIdentityReference"
        }
      }
    }
  }
};

export const UploadBatchServiceLogsResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UploadBatchServiceLogsResult",
    modelProperties: {
      virtualDirectoryName: {
        serializedName: "virtualDirectoryName",
        required: true,
        type: {
          name: "String"
        }
      },
      numberOfFilesUploaded: {
        serializedName: "numberOfFilesUploaded",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ComputeNodeListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeNodeListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ComputeNode"
            }
          }
        }
      },
      odataNextLink: {
        serializedName: "odata\\.nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NodeVMExtension: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NodeVMExtension",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        type: {
          name: "String"
        }
      },
      vmExtension: {
        serializedName: "vmExtension",
        type: {
          name: "Composite",
          className: "VMExtension"
        }
      },
      instanceView: {
        serializedName: "instanceView",
        type: {
          name: "Composite",
          className: "VMExtensionInstanceView"
        }
      }
    }
  }
};

export const VMExtensionInstanceView: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VMExtensionInstanceView",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      statuses: {
        serializedName: "statuses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InstanceViewStatus"
            }
          }
        }
      },
      subStatuses: {
        serializedName: "subStatuses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InstanceViewStatus"
            }
          }
        }
      }
    }
  }
};

export const InstanceViewStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InstanceViewStatus",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      displayStatus: {
        serializedName: "displayStatus",
        type: {
          name: "String"
        }
      },
      level: {
        serializedName: "level",
        type: {
          name: "Enum",
          allowedValues: ["Error", "Info", "Warning"]
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      time: {
        serializedName: "time",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NodeVMExtensionList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NodeVMExtensionList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NodeVMExtension"
            }
          }
        }
      },
      odataNextLink: {
        serializedName: "odata\\.nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationListHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationListHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const ApplicationGetHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationGetHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const ApplicationListNextHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationListNextHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const PoolListUsageMetricsHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PoolListUsageMetricsHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const PoolGetAllLifetimeStatisticsHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PoolGetAllLifetimeStatisticsHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const PoolAddHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PoolAddHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PoolListHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PoolListHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const PoolDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PoolDeleteHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PoolExistsHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PoolExistsHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const PoolGetHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PoolGetHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const PoolPatchHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PoolPatchHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PoolDisableAutoScaleHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PoolDisableAutoScaleHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PoolEnableAutoScaleHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PoolEnableAutoScaleHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PoolEvaluateAutoScaleHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PoolEvaluateAutoScaleHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PoolResizeHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PoolResizeHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PoolStopResizeHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PoolStopResizeHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PoolUpdatePropertiesHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PoolUpdatePropertiesHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PoolRemoveNodesHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PoolRemoveNodesHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PoolListUsageMetricsNextHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PoolListUsageMetricsNextHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const PoolListNextHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PoolListNextHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const AccountListSupportedImagesHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccountListSupportedImagesHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const AccountListPoolNodeCountsHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccountListPoolNodeCountsHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      }
    }
  }
};

export const AccountListSupportedImagesNextHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccountListSupportedImagesNextHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const AccountListPoolNodeCountsNextHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccountListPoolNodeCountsNextHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      }
    }
  }
};

export const JobGetAllLifetimeStatisticsHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobGetAllLifetimeStatisticsHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const JobDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobDeleteHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobGetHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobGetHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const JobPatchHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobPatchHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobUpdateHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobDisableHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobDisableHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobEnableHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobEnableHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobTerminateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobTerminateHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobAddHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobAddHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobListHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobListHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const JobListFromJobScheduleHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobListFromJobScheduleHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const JobListPreparationAndReleaseTaskStatusHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobListPreparationAndReleaseTaskStatusHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const JobGetTaskCountsHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobGetTaskCountsHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      }
    }
  }
};

export const JobListNextHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobListNextHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const JobListFromJobScheduleNextHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobListFromJobScheduleNextHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const JobListPreparationAndReleaseTaskStatusNextHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobListPreparationAndReleaseTaskStatusNextHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const CertificateAddHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CertificateAddHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CertificateListHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CertificateListHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const CertificateCancelDeletionHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CertificateCancelDeletionHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CertificateDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CertificateDeleteHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const CertificateGetHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CertificateGetHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const CertificateListNextHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CertificateListNextHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const FileDeleteFromTaskHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FileDeleteFromTaskHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FileGetFromTaskHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FileGetFromTaskHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ocpCreationTime: {
        serializedName: "ocp-creation-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ocpBatchFileIsdirectory: {
        serializedName: "ocp-batch-file-isdirectory",
        type: {
          name: "Boolean"
        }
      },
      ocpBatchFileUrl: {
        serializedName: "ocp-batch-file-url",
        type: {
          name: "String"
        }
      },
      ocpBatchFileMode: {
        serializedName: "ocp-batch-file-mode",
        type: {
          name: "String"
        }
      },
      contentType: {
        serializedName: "content-type",
        type: {
          name: "String"
        }
      },
      contentLength: {
        serializedName: "content-length",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const FileGetPropertiesFromTaskHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FileGetPropertiesFromTaskHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ocpCreationTime: {
        serializedName: "ocp-creation-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ocpBatchFileIsdirectory: {
        serializedName: "ocp-batch-file-isdirectory",
        type: {
          name: "Boolean"
        }
      },
      ocpBatchFileUrl: {
        serializedName: "ocp-batch-file-url",
        type: {
          name: "String"
        }
      },
      ocpBatchFileMode: {
        serializedName: "ocp-batch-file-mode",
        type: {
          name: "String"
        }
      },
      contentType: {
        serializedName: "content-type",
        type: {
          name: "String"
        }
      },
      contentLength: {
        serializedName: "content-length",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const FileDeleteFromComputeNodeHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FileDeleteFromComputeNodeHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FileGetFromComputeNodeHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FileGetFromComputeNodeHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ocpCreationTime: {
        serializedName: "ocp-creation-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ocpBatchFileIsdirectory: {
        serializedName: "ocp-batch-file-isdirectory",
        type: {
          name: "Boolean"
        }
      },
      ocpBatchFileUrl: {
        serializedName: "ocp-batch-file-url",
        type: {
          name: "String"
        }
      },
      ocpBatchFileMode: {
        serializedName: "ocp-batch-file-mode",
        type: {
          name: "String"
        }
      },
      contentType: {
        serializedName: "content-type",
        type: {
          name: "String"
        }
      },
      contentLength: {
        serializedName: "content-length",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const FileGetPropertiesFromComputeNodeHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FileGetPropertiesFromComputeNodeHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ocpCreationTime: {
        serializedName: "ocp-creation-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ocpBatchFileIsdirectory: {
        serializedName: "ocp-batch-file-isdirectory",
        type: {
          name: "Boolean"
        }
      },
      ocpBatchFileUrl: {
        serializedName: "ocp-batch-file-url",
        type: {
          name: "String"
        }
      },
      ocpBatchFileMode: {
        serializedName: "ocp-batch-file-mode",
        type: {
          name: "String"
        }
      },
      contentType: {
        serializedName: "content-type",
        type: {
          name: "String"
        }
      },
      contentLength: {
        serializedName: "content-length",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const FileListFromTaskHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FileListFromTaskHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const FileListFromComputeNodeHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FileListFromComputeNodeHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const FileListFromTaskNextHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FileListFromTaskNextHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const FileListFromComputeNodeNextHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FileListFromComputeNodeNextHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const JobScheduleExistsHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobScheduleExistsHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const JobScheduleDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobScheduleDeleteHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobScheduleGetHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobScheduleGetHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const JobSchedulePatchHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobSchedulePatchHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobScheduleUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobScheduleUpdateHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobScheduleDisableHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobScheduleDisableHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobScheduleEnableHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobScheduleEnableHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobScheduleTerminateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobScheduleTerminateHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobScheduleAddHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobScheduleAddHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobScheduleListHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobScheduleListHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const JobScheduleListNextHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobScheduleListNextHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const TaskAddHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskAddHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TaskListHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskListHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const TaskAddCollectionHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskAddCollectionHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TaskDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskDeleteHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TaskGetHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskGetHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TaskUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskUpdateHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TaskListSubtasksHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskListSubtasksHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const TaskTerminateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskTerminateHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TaskReactivateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskReactivateHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TaskListNextHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskListNextHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const ComputeNodeAddUserHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeNodeAddUserHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComputeNodeDeleteUserHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeNodeDeleteUserHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComputeNodeUpdateUserHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeNodeUpdateUserHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComputeNodeGetHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeNodeGetHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const ComputeNodeRebootHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeNodeRebootHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComputeNodeReimageHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeNodeReimageHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComputeNodeDisableSchedulingHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeNodeDisableSchedulingHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComputeNodeEnableSchedulingHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeNodeEnableSchedulingHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComputeNodeGetRemoteLoginSettingsHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeNodeGetRemoteLoginSettingsHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const ComputeNodeGetRemoteDesktopHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeNodeGetRemoteDesktopHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const ComputeNodeUploadBatchServiceLogsHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeNodeUploadBatchServiceLogsHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      }
    }
  }
};

export const ComputeNodeListHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeNodeListHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const ComputeNodeListNextHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeNodeListNextHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const ComputeNodeExtensionGetHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeNodeExtensionGetHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const ComputeNodeExtensionListHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeNodeExtensionListHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const ComputeNodeExtensionListNextHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeNodeExtensionListNextHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};
