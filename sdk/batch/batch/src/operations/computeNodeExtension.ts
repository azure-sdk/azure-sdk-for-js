/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { ComputeNodeExtension } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { BatchServiceClient } from "../batchServiceClient";
import {
  NodeVMExtension,
  ComputeNodeExtensionListNextOptionalParams,
  ComputeNodeExtensionListOptionalParams,
  ComputeNodeExtensionGetOptionalParams,
  ComputeNodeExtensionGetResponse,
  ComputeNodeExtensionListResponse,
  ComputeNodeExtensionListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ComputeNodeExtension operations. */
export class ComputeNodeExtensionImpl implements ComputeNodeExtension {
  private readonly client: BatchServiceClient;

  /**
   * Initialize a new instance of the class ComputeNodeExtension class.
   * @param client Reference to the service client
   */
  constructor(client: BatchServiceClient) {
    this.client = client;
  }

  /**
   * Lists the Compute Nodes Extensions in the specified Pool.
   * @param poolId The ID of the Pool that contains Compute Node.
   * @param nodeId The ID of the Compute Node that you want to list extensions.
   * @param options The options parameters.
   */
  public list(
    poolId: string,
    nodeId: string,
    options?: ComputeNodeExtensionListOptionalParams
  ): PagedAsyncIterableIterator<NodeVMExtension> {
    const iter = this.listPagingAll(poolId, nodeId, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage(poolId, nodeId, options);
      }
    };
  }

  private async *listPagingPage(
    poolId: string,
    nodeId: string,
    options?: ComputeNodeExtensionListOptionalParams
  ): AsyncIterableIterator<NodeVMExtension[]> {
    let result = await this._list(poolId, nodeId, options);
    yield result.value || [];
    let continuationToken = result.odataNextLink;
    while (continuationToken) {
      result = await this._listNext(poolId, nodeId, continuationToken, options);
      continuationToken = result.odataNextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(
    poolId: string,
    nodeId: string,
    options?: ComputeNodeExtensionListOptionalParams
  ): AsyncIterableIterator<NodeVMExtension> {
    for await (const page of this.listPagingPage(poolId, nodeId, options)) {
      yield* page;
    }
  }

  /**
   * Gets information about the specified Compute Node Extension.
   * @param poolId The ID of the Pool that contains the Compute Node.
   * @param nodeId The ID of the Compute Node that contains the extensions.
   * @param extensionName The name of the of the Compute Node Extension that you want to get information
   *                      about.
   * @param options The options parameters.
   */
  get(
    poolId: string,
    nodeId: string,
    extensionName: string,
    options?: ComputeNodeExtensionGetOptionalParams
  ): Promise<ComputeNodeExtensionGetResponse> {
    return this.client.sendOperationRequest(
      { poolId, nodeId, extensionName, options },
      getOperationSpec
    );
  }

  /**
   * Lists the Compute Nodes Extensions in the specified Pool.
   * @param poolId The ID of the Pool that contains Compute Node.
   * @param nodeId The ID of the Compute Node that you want to list extensions.
   * @param options The options parameters.
   */
  private _list(
    poolId: string,
    nodeId: string,
    options?: ComputeNodeExtensionListOptionalParams
  ): Promise<ComputeNodeExtensionListResponse> {
    return this.client.sendOperationRequest(
      { poolId, nodeId, options },
      listOperationSpec
    );
  }

  /**
   * ListNext
   * @param poolId The ID of the Pool that contains Compute Node.
   * @param nodeId The ID of the Compute Node that you want to list extensions.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    poolId: string,
    nodeId: string,
    nextLink: string,
    options?: ComputeNodeExtensionListNextOptionalParams
  ): Promise<ComputeNodeExtensionListNextResponse> {
    return this.client.sendOperationRequest(
      { poolId, nodeId, nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path: "/pools/{poolId}/nodes/{nodeId}/extensions/{extensionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NodeVMExtension,
      headersMapper: Mappers.ComputeNodeExtensionGetHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.select15,
    Parameters.timeout76
  ],
  urlParameters: [
    Parameters.batchUrl,
    Parameters.poolId,
    Parameters.nodeId,
    Parameters.extensionName
  ],
  headerParameters: [
    Parameters.accept,
    Parameters.clientRequestId76,
    Parameters.returnClientRequestId76,
    Parameters.ocpDate76
  ],
  serializer
};
const listOperationSpec: coreClient.OperationSpec = {
  path: "/pools/{poolId}/nodes/{nodeId}/extensions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NodeVMExtensionList,
      headersMapper: Mappers.ComputeNodeExtensionListHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.select16,
    Parameters.maxResults14,
    Parameters.timeout77
  ],
  urlParameters: [Parameters.batchUrl, Parameters.poolId, Parameters.nodeId],
  headerParameters: [
    Parameters.accept,
    Parameters.clientRequestId77,
    Parameters.returnClientRequestId77,
    Parameters.ocpDate77
  ],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NodeVMExtensionList,
      headersMapper: Mappers.ComputeNodeExtensionListNextHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.select16,
    Parameters.maxResults14,
    Parameters.timeout77
  ],
  urlParameters: [
    Parameters.batchUrl,
    Parameters.nextLink,
    Parameters.poolId,
    Parameters.nodeId
  ],
  headerParameters: [
    Parameters.accept,
    Parameters.clientRequestId77,
    Parameters.returnClientRequestId77,
    Parameters.ocpDate77
  ],
  serializer
};
