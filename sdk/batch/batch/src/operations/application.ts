/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Application } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { BatchServiceClient } from "../batchServiceClient";
import {
  ApplicationSummary,
  ApplicationListNextOptionalParams,
  ApplicationListOptionalParams,
  ApplicationListResponse,
  ApplicationGetOptionalParams,
  ApplicationGetResponse,
  ApplicationListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Application operations. */
export class ApplicationImpl implements Application {
  private readonly client: BatchServiceClient;

  /**
   * Initialize a new instance of the class Application class.
   * @param client Reference to the service client
   */
  constructor(client: BatchServiceClient) {
    this.client = client;
  }

  /**
   * This operation returns only Applications and versions that are available for use on Compute Nodes;
   * that is, that can be used in an Package reference. For administrator information about applications
   * and versions that are not yet available to Compute Nodes, use the Azure portal or the Azure Resource
   * Manager API.
   * @param options The options parameters.
   */
  public list(
    options?: ApplicationListOptionalParams
  ): PagedAsyncIterableIterator<ApplicationSummary> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage(options);
      }
    };
  }

  private async *listPagingPage(
    options?: ApplicationListOptionalParams
  ): AsyncIterableIterator<ApplicationSummary[]> {
    let result = await this._list(options);
    yield result.value || [];
    let continuationToken = result.odataNextLink;
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.odataNextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(
    options?: ApplicationListOptionalParams
  ): AsyncIterableIterator<ApplicationSummary> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * This operation returns only Applications and versions that are available for use on Compute Nodes;
   * that is, that can be used in an Package reference. For administrator information about applications
   * and versions that are not yet available to Compute Nodes, use the Azure portal or the Azure Resource
   * Manager API.
   * @param options The options parameters.
   */
  private _list(
    options?: ApplicationListOptionalParams
  ): Promise<ApplicationListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * This operation returns only Applications and versions that are available for use on Compute Nodes;
   * that is, that can be used in an Package reference. For administrator information about Applications
   * and versions that are not yet available to Compute Nodes, use the Azure portal or the Azure Resource
   * Manager API.
   * @param applicationId The ID of the Application.
   * @param options The options parameters.
   */
  get(
    applicationId: string,
    options?: ApplicationGetOptionalParams
  ): Promise<ApplicationGetResponse> {
    return this.client.sendOperationRequest(
      { applicationId, options },
      getOperationSpec
    );
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    nextLink: string,
    options?: ApplicationListNextOptionalParams
  ): Promise<ApplicationListNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/applications",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationListResult,
      headersMapper: Mappers.ApplicationListHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  queryParameters: [
    Parameters.maxResults,
    Parameters.timeout,
    Parameters.apiVersion
  ],
  urlParameters: [Parameters.batchUrl],
  headerParameters: [
    Parameters.accept,
    Parameters.clientRequestId,
    Parameters.returnClientRequestId,
    Parameters.ocpDate
  ],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/applications/{applicationId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationSummary,
      headersMapper: Mappers.ApplicationGetHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.timeout1],
  urlParameters: [Parameters.batchUrl, Parameters.applicationId],
  headerParameters: [
    Parameters.accept,
    Parameters.clientRequestId1,
    Parameters.returnClientRequestId1,
    Parameters.ocpDate1
  ],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationListResult,
      headersMapper: Mappers.ApplicationListNextHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  queryParameters: [
    Parameters.maxResults,
    Parameters.timeout,
    Parameters.apiVersion
  ],
  urlParameters: [Parameters.batchUrl, Parameters.nextLink],
  headerParameters: [
    Parameters.accept,
    Parameters.clientRequestId,
    Parameters.returnClientRequestId,
    Parameters.ocpDate
  ],
  serializer
};
