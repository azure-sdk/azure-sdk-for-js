/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreRestPipeline from "@azure/core-rest-pipeline";
import {
  PipelineRequest,
  PipelineResponse,
  SendRequest
} from "@azure/core-rest-pipeline";
import * as coreAuth from "@azure/core-auth";
import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  BackupVaultsImpl,
  OperationResultImpl,
  OperationStatusImpl,
  OperationStatusBackupVaultContextImpl,
  OperationStatusResourceGroupContextImpl,
  BackupVaultOperationResultsImpl,
  DataProtectionImpl,
  DataProtectionOperationsImpl,
  BackupPoliciesImpl,
  BackupInstancesImpl,
  RecoveryPointsImpl,
  JobsImpl,
  RestorableTimeRangesImpl,
  ExportJobsImpl,
  ExportJobsOperationResultImpl,
  ResourceGuardsImpl
} from "./operations";
import {
  BackupVaults,
  OperationResult,
  OperationStatus,
  OperationStatusBackupVaultContext,
  OperationStatusResourceGroupContext,
  BackupVaultOperationResults,
  DataProtection,
  DataProtectionOperations,
  BackupPolicies,
  BackupInstances,
  RecoveryPoints,
  Jobs,
  RestorableTimeRanges,
  ExportJobs,
  ExportJobsOperationResult,
  ResourceGuards
} from "./operationsInterfaces";
import * as Parameters from "./models/parameters";
import * as Mappers from "./models/mappers";
import {
  DataProtectionClientOptionalParams,
  ResourceGuardProxyBaseResource,
  DppResourceGuardProxyListNextOptionalParams,
  DppResourceGuardProxyListOptionalParams,
  DppResourceGuardProxyListResponse,
  DppResourceGuardProxyGetOptionalParams,
  DppResourceGuardProxyGetResponse,
  DppResourceGuardProxyPutOptionalParams,
  DppResourceGuardProxyPutResponse,
  DppResourceGuardProxyDeleteOptionalParams,
  UnlockDeleteRequest,
  DppResourceGuardProxyUnlockDeleteOptionalParams,
  DppResourceGuardProxyUnlockDeleteResponse,
  DppResourceGuardProxyListNextResponse
} from "./models";

/// <reference lib="esnext.asynciterable" />
export class DataProtectionClient extends coreClient.ServiceClient {
  $host: string;
  apiVersion: string;
  subscriptionId: string;

  /**
   * Initializes a new instance of the DataProtectionClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param subscriptionId The subscription Id.
   * @param options The parameter options
   */
  constructor(
    credentials: coreAuth.TokenCredential,
    subscriptionId: string,
    options?: DataProtectionClientOptionalParams
  ) {
    if (credentials === undefined) {
      throw new Error("'credentials' cannot be null");
    }
    if (subscriptionId === undefined) {
      throw new Error("'subscriptionId' cannot be null");
    }

    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: DataProtectionClientOptionalParams = {
      requestContentType: "application/json; charset=utf-8",
      credential: credentials
    };

    const packageDetails = `azsdk-js-arm-dataprotectionplatform/1.0.0`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    if (!options.credentialScopes) {
      options.credentialScopes = ["https://management.azure.com/.default"];
    }
    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix
      },
      baseUri:
        options.endpoint ?? options.baseUri ?? "https://management.azure.com"
    };
    super(optionsWithDefaults);

    if (options?.pipeline && options.pipeline.getOrderedPolicies().length > 0) {
      const pipelinePolicies: coreRestPipeline.PipelinePolicy[] = options.pipeline.getOrderedPolicies();
      const bearerTokenAuthenticationPolicyFound = pipelinePolicies.some(
        (pipelinePolicy) =>
          pipelinePolicy.name ===
          coreRestPipeline.bearerTokenAuthenticationPolicyName
      );
      if (!bearerTokenAuthenticationPolicyFound) {
        this.pipeline.removePolicy({
          name: coreRestPipeline.bearerTokenAuthenticationPolicyName
        });
        this.pipeline.addPolicy(
          coreRestPipeline.bearerTokenAuthenticationPolicy({
            scopes: `${optionsWithDefaults.baseUri}/.default`,
            challengeCallbacks: {
              authorizeRequestOnChallenge:
                coreClient.authorizeRequestOnClaimChallenge
            }
          })
        );
      }
    }
    // Parameter assignments
    this.subscriptionId = subscriptionId;

    // Assigning values to Constant parameters
    this.$host = options.$host || "https://management.azure.com";
    this.apiVersion = options.apiVersion || "2022-08-31";
    this.backupVaults = new BackupVaultsImpl(this);
    this.operationResult = new OperationResultImpl(this);
    this.operationStatus = new OperationStatusImpl(this);
    this.operationStatusBackupVaultContext = new OperationStatusBackupVaultContextImpl(
      this
    );
    this.operationStatusResourceGroupContext = new OperationStatusResourceGroupContextImpl(
      this
    );
    this.backupVaultOperationResults = new BackupVaultOperationResultsImpl(
      this
    );
    this.dataProtection = new DataProtectionImpl(this);
    this.dataProtectionOperations = new DataProtectionOperationsImpl(this);
    this.backupPolicies = new BackupPoliciesImpl(this);
    this.backupInstances = new BackupInstancesImpl(this);
    this.recoveryPoints = new RecoveryPointsImpl(this);
    this.jobs = new JobsImpl(this);
    this.restorableTimeRanges = new RestorableTimeRangesImpl(this);
    this.exportJobs = new ExportJobsImpl(this);
    this.exportJobsOperationResult = new ExportJobsOperationResultImpl(this);
    this.resourceGuards = new ResourceGuardsImpl(this);
    this.addCustomApiVersionPolicy(options.apiVersion);
  }

  /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
  private addCustomApiVersionPolicy(apiVersion?: string) {
    if (!apiVersion) {
      return;
    }
    const apiVersionPolicy = {
      name: "CustomApiVersionPolicy",
      async sendRequest(
        request: PipelineRequest,
        next: SendRequest
      ): Promise<PipelineResponse> {
        const param = request.url.split("?");
        if (param.length > 1) {
          const newParams = param[1].split("&").map((item) => {
            if (item.indexOf("api-version") > -1) {
              return "api-version=" + apiVersion;
            } else {
              return item;
            }
          });
          request.url = param[0] + "?" + newParams.join("&");
        }
        return next(request);
      }
    };
    this.pipeline.addPolicy(apiVersionPolicy);
  }

  /**
   * @param vaultName The name of the backup vault.
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param options The options parameters.
   */
  public listDppResourceGuardProxyList(
    vaultName: string,
    resourceGroupName: string,
    options?: DppResourceGuardProxyListOptionalParams
  ): PagedAsyncIterableIterator<ResourceGuardProxyBaseResource> {
    const iter = this.dppResourceGuardProxyListPagingAll(
      vaultName,
      resourceGroupName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.dppResourceGuardProxyListPagingPage(
          vaultName,
          resourceGroupName,
          options
        );
      }
    };
  }

  private async *dppResourceGuardProxyListPagingPage(
    vaultName: string,
    resourceGroupName: string,
    options?: DppResourceGuardProxyListOptionalParams
  ): AsyncIterableIterator<ResourceGuardProxyBaseResource[]> {
    let result = await this._dppResourceGuardProxyList(
      vaultName,
      resourceGroupName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._dppResourceGuardProxyListNext(
        vaultName,
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *dppResourceGuardProxyListPagingAll(
    vaultName: string,
    resourceGroupName: string,
    options?: DppResourceGuardProxyListOptionalParams
  ): AsyncIterableIterator<ResourceGuardProxyBaseResource> {
    for await (const page of this.dppResourceGuardProxyListPagingPage(
      vaultName,
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * @param vaultName The name of the backup vault.
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param options The options parameters.
   */
  private _dppResourceGuardProxyList(
    vaultName: string,
    resourceGroupName: string,
    options?: DppResourceGuardProxyListOptionalParams
  ): Promise<DppResourceGuardProxyListResponse> {
    return this.sendOperationRequest(
      { vaultName, resourceGroupName, options },
      dppResourceGuardProxyListOperationSpec
    );
  }

  /**
   * @param vaultName The name of the backup vault.
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param resourceGuardProxyName
   * @param options The options parameters.
   */
  dppResourceGuardProxyGet(
    vaultName: string,
    resourceGroupName: string,
    resourceGuardProxyName: string,
    options?: DppResourceGuardProxyGetOptionalParams
  ): Promise<DppResourceGuardProxyGetResponse> {
    return this.sendOperationRequest(
      { vaultName, resourceGroupName, resourceGuardProxyName, options },
      dppResourceGuardProxyGetOperationSpec
    );
  }

  /**
   * @param vaultName The name of the backup vault.
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param resourceGuardProxyName
   * @param parameters Request body for operation
   * @param options The options parameters.
   */
  dppResourceGuardProxyPut(
    vaultName: string,
    resourceGroupName: string,
    resourceGuardProxyName: string,
    parameters: ResourceGuardProxyBaseResource,
    options?: DppResourceGuardProxyPutOptionalParams
  ): Promise<DppResourceGuardProxyPutResponse> {
    return this.sendOperationRequest(
      {
        vaultName,
        resourceGroupName,
        resourceGuardProxyName,
        parameters,
        options
      },
      dppResourceGuardProxyPutOperationSpec
    );
  }

  /**
   * @param vaultName The name of the backup vault.
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param resourceGuardProxyName
   * @param options The options parameters.
   */
  dppResourceGuardProxyDelete(
    vaultName: string,
    resourceGroupName: string,
    resourceGuardProxyName: string,
    options?: DppResourceGuardProxyDeleteOptionalParams
  ): Promise<void> {
    return this.sendOperationRequest(
      { vaultName, resourceGroupName, resourceGuardProxyName, options },
      dppResourceGuardProxyDeleteOperationSpec
    );
  }

  /**
   * @param vaultName The name of the backup vault.
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param resourceGuardProxyName
   * @param parameters Request body for operation
   * @param options The options parameters.
   */
  dppResourceGuardProxyUnlockDelete(
    vaultName: string,
    resourceGroupName: string,
    resourceGuardProxyName: string,
    parameters: UnlockDeleteRequest,
    options?: DppResourceGuardProxyUnlockDeleteOptionalParams
  ): Promise<DppResourceGuardProxyUnlockDeleteResponse> {
    return this.sendOperationRequest(
      {
        vaultName,
        resourceGroupName,
        resourceGuardProxyName,
        parameters,
        options
      },
      dppResourceGuardProxyUnlockDeleteOperationSpec
    );
  }

  /**
   * DppResourceGuardProxyListNext
   * @param vaultName The name of the backup vault.
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param nextLink The nextLink from the previous successful call to the DppResourceGuardProxyList
   *                 method.
   * @param options The options parameters.
   */
  private _dppResourceGuardProxyListNext(
    vaultName: string,
    resourceGroupName: string,
    nextLink: string,
    options?: DppResourceGuardProxyListNextOptionalParams
  ): Promise<DppResourceGuardProxyListNextResponse> {
    return this.sendOperationRequest(
      { vaultName, resourceGroupName, nextLink, options },
      dppResourceGuardProxyListNextOperationSpec
    );
  }

  backupVaults: BackupVaults;
  operationResult: OperationResult;
  operationStatus: OperationStatus;
  operationStatusBackupVaultContext: OperationStatusBackupVaultContext;
  operationStatusResourceGroupContext: OperationStatusResourceGroupContext;
  backupVaultOperationResults: BackupVaultOperationResults;
  dataProtection: DataProtection;
  dataProtectionOperations: DataProtectionOperations;
  backupPolicies: BackupPolicies;
  backupInstances: BackupInstances;
  recoveryPoints: RecoveryPoints;
  jobs: Jobs;
  restorableTimeRanges: RestorableTimeRanges;
  exportJobs: ExportJobs;
  exportJobsOperationResult: ExportJobsOperationResult;
  resourceGuards: ResourceGuards;
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const dppResourceGuardProxyListOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/backupVaults/{vaultName}/backupResourceGuardProxies",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceGuardProxyBaseResourceList
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vaultName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const dppResourceGuardProxyGetOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/backupVaults/{vaultName}/backupResourceGuardProxies/{resourceGuardProxyName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceGuardProxyBaseResource
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vaultName,
    Parameters.resourceGuardProxyName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const dppResourceGuardProxyPutOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/backupVaults/{vaultName}/backupResourceGuardProxies/{resourceGuardProxyName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceGuardProxyBaseResource
    }
  },
  requestBody: Parameters.parameters14,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vaultName,
    Parameters.resourceGuardProxyName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const dppResourceGuardProxyDeleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/backupVaults/{vaultName}/backupResourceGuardProxies/{resourceGuardProxyName}",
  httpMethod: "DELETE",
  responses: { 200: {}, 204: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vaultName,
    Parameters.resourceGuardProxyName
  ],
  serializer
};
const dppResourceGuardProxyUnlockDeleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/backupVaults/{vaultName}/backupResourceGuardProxies/{resourceGuardProxyName}/unlockDelete",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.UnlockDeleteResponse
    }
  },
  requestBody: Parameters.parameters15,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vaultName,
    Parameters.resourceGuardProxyName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const dppResourceGuardProxyListNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceGuardProxyBaseResourceList
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vaultName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
