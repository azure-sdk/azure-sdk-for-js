/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { ServiceGroupMemberRelationships } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { MicrosoftRelationshipsManagementService } from "../microsoftRelationshipsManagementService.js";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl.js";
import {
  ServiceGroupMemberRelationshipsGetOptionalParams,
  ServiceGroupMemberRelationshipsGetResponse,
  ServiceGroupMemberRelationship,
  ServiceGroupMemberRelationshipsCreateOrUpdateOptionalParams,
  ServiceGroupMemberRelationshipsCreateOrUpdateResponse,
  ServiceGroupMemberRelationshipsDeleteOptionalParams,
  ServiceGroupMemberRelationshipsDeleteResponse,
} from "../models/index.js";

/** Class containing ServiceGroupMemberRelationships operations. */
export class ServiceGroupMemberRelationshipsImpl
  implements ServiceGroupMemberRelationships
{
  private readonly client: MicrosoftRelationshipsManagementService;

  /**
   * Initialize a new instance of the class ServiceGroupMemberRelationships class.
   * @param client Reference to the service client
   */
  constructor(client: MicrosoftRelationshipsManagementService) {
    this.client = client;
  }

  /**
   * Get a ServiceGroupMemberRelationship
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param name Name of ServiceGroupMember relationship.
   * @param options The options parameters.
   */
  get(
    resourceUri: string,
    name: string,
    options?: ServiceGroupMemberRelationshipsGetOptionalParams,
  ): Promise<ServiceGroupMemberRelationshipsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceUri, name, options },
      getOperationSpec,
    );
  }

  /**
   * Create a ServiceGroupMemberRelationship
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param name Name of ServiceGroupMember relationship.
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceUri: string,
    name: string,
    resource: ServiceGroupMemberRelationship,
    options?: ServiceGroupMemberRelationshipsCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ServiceGroupMemberRelationshipsCreateOrUpdateResponse>,
      ServiceGroupMemberRelationshipsCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ServiceGroupMemberRelationshipsCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceUri, name, resource, options },
      spec: createOrUpdateOperationSpec,
    });
    const poller = await createHttpPoller<
      ServiceGroupMemberRelationshipsCreateOrUpdateResponse,
      OperationState<ServiceGroupMemberRelationshipsCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create a ServiceGroupMemberRelationship
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param name Name of ServiceGroupMember relationship.
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceUri: string,
    name: string,
    resource: ServiceGroupMemberRelationship,
    options?: ServiceGroupMemberRelationshipsCreateOrUpdateOptionalParams,
  ): Promise<ServiceGroupMemberRelationshipsCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceUri,
      name,
      resource,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Delete a ServiceGroupMemberRelationship
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param name Name of ServiceGroupMember relationship.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceUri: string,
    name: string,
    options?: ServiceGroupMemberRelationshipsDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ServiceGroupMemberRelationshipsDeleteResponse>,
      ServiceGroupMemberRelationshipsDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ServiceGroupMemberRelationshipsDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceUri, name, options },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<
      ServiceGroupMemberRelationshipsDeleteResponse,
      OperationState<ServiceGroupMemberRelationshipsDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete a ServiceGroupMemberRelationship
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param name Name of ServiceGroupMember relationship.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceUri: string,
    name: string,
    options?: ServiceGroupMemberRelationshipsDeleteOptionalParams,
  ): Promise<ServiceGroupMemberRelationshipsDeleteResponse> {
    const poller = await this.beginDelete(resourceUri, name, options);
    return poller.pollUntilDone();
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path: "/{resourceUri}/providers/Microsoft.Relationships/serviceGroupMember/{name}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ServiceGroupMemberRelationship,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.resourceUri, Parameters.name],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/{resourceUri}/providers/Microsoft.Relationships/serviceGroupMember/{name}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ServiceGroupMemberRelationship,
    },
    201: {
      bodyMapper: Mappers.ServiceGroupMemberRelationship,
    },
    202: {
      bodyMapper: Mappers.ServiceGroupMemberRelationship,
    },
    204: {
      bodyMapper: Mappers.ServiceGroupMemberRelationship,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.resource1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.resourceUri, Parameters.name],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/{resourceUri}/providers/Microsoft.Relationships/serviceGroupMember/{name}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.ServiceGroupMemberRelationshipsDeleteHeaders,
    },
    201: {
      headersMapper: Mappers.ServiceGroupMemberRelationshipsDeleteHeaders,
    },
    202: {
      headersMapper: Mappers.ServiceGroupMemberRelationshipsDeleteHeaders,
    },
    204: {
      headersMapper: Mappers.ServiceGroupMemberRelationshipsDeleteHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.resourceUri, Parameters.name],
  headerParameters: [Parameters.accept],
  serializer,
};
