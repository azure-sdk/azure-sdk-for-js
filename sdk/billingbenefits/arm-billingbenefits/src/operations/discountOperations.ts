/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { DiscountOperations } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { BillingBenefitsRP } from "../billingBenefitsRP.js";
import { SimplePollerLike, OperationState, createHttpPoller } from "@azure/core-lro";
import { createLroSpec } from "../lroImpl.js";
import {
  DiscountGetOptionalParams,
  DiscountGetResponse,
  DiscountPatchRequest,
  DiscountUpdateOptionalParams,
  DiscountUpdateResponse,
} from "../models/index.js";

/** Class containing DiscountOperations operations. */
export class DiscountOperationsImpl implements DiscountOperations {
  private readonly client: BillingBenefitsRP;

  /**
   * Initialize a new instance of the class DiscountOperations class.
   * @param client Reference to the service client
   */
  constructor(client: BillingBenefitsRP) {
    this.client = client;
  }

  /**
   * Get discount at resource group level
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param discountName Name of the discount
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    discountName: string,
    options?: DiscountGetOptionalParams,
  ): Promise<DiscountGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, discountName, options },
      getOperationSpec,
    );
  }

  /**
   * Update discounts
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param discountName Name of the discount
   * @param body Request body for updating discounts
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    discountName: string,
    body: DiscountPatchRequest,
    options?: DiscountUpdateOptionalParams,
  ): Promise<SimplePollerLike<OperationState<DiscountUpdateResponse>, DiscountUpdateResponse>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<DiscountUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, discountName, body, options },
      spec: updateOperationSpec,
    });
    const poller = await createHttpPoller<
      DiscountUpdateResponse,
      OperationState<DiscountUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Update discounts
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param discountName Name of the discount
   * @param body Request body for updating discounts
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    discountName: string,
    body: DiscountPatchRequest,
    options?: DiscountUpdateOptionalParams,
  ): Promise<DiscountUpdateResponse> {
    const poller = await this.beginUpdate(resourceGroupName, discountName, body, options);
    return poller.pollUntilDone();
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BillingBenefits/discounts/{discountName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Discount,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.discountName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BillingBenefits/discounts/{discountName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Discount,
    },
    201: {
      bodyMapper: Mappers.Discount,
    },
    202: {
      bodyMapper: Mappers.Discount,
    },
    204: {
      bodyMapper: Mappers.Discount,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body6,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.discountName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
