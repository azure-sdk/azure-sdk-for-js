/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { Discounts } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { BillingBenefitsRP } from "../billingBenefitsRP.js";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl.js";
import {
  Discount,
  DiscountsResourceGroupListNextOptionalParams,
  DiscountsResourceGroupListOptionalParams,
  DiscountsResourceGroupListResponse,
  DiscountsSubscriptionListNextOptionalParams,
  DiscountsSubscriptionListOptionalParams,
  DiscountsSubscriptionListResponse,
  DiscountsScopeListNextOptionalParams,
  DiscountsScopeListOptionalParams,
  DiscountsScopeListResponse,
  DiscountsCreateOptionalParams,
  DiscountsCreateResponse,
  DiscountsDeleteOptionalParams,
  DiscountsDeleteResponse,
  DiscountsCancelOptionalParams,
  DiscountsCancelResponse,
  DiscountsResourceGroupListNextResponse,
  DiscountsSubscriptionListNextResponse,
  DiscountsScopeListNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing Discounts operations. */
export class DiscountsImpl implements Discounts {
  private readonly client: BillingBenefitsRP;

  /**
   * Initialize a new instance of the class Discounts class.
   * @param client Reference to the service client
   */
  constructor(client: BillingBenefitsRP) {
    this.client = client;
  }

  /**
   * List discounts at resource group level
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public listResourceGroupList(
    resourceGroupName: string,
    options?: DiscountsResourceGroupListOptionalParams,
  ): PagedAsyncIterableIterator<Discount> {
    const iter = this.resourceGroupListPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.resourceGroupListPagingPage(
          resourceGroupName,
          options,
          settings,
        );
      },
    };
  }

  private async *resourceGroupListPagingPage(
    resourceGroupName: string,
    options?: DiscountsResourceGroupListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<Discount[]> {
    let result: DiscountsResourceGroupListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._resourceGroupList(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._resourceGroupListNext(
        resourceGroupName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *resourceGroupListPagingAll(
    resourceGroupName: string,
    options?: DiscountsResourceGroupListOptionalParams,
  ): AsyncIterableIterator<Discount> {
    for await (const page of this.resourceGroupListPagingPage(
      resourceGroupName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List discounts at subscription level
   * @param options The options parameters.
   */
  public listSubscriptionList(
    options?: DiscountsSubscriptionListOptionalParams,
  ): PagedAsyncIterableIterator<Discount> {
    const iter = this.subscriptionListPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.subscriptionListPagingPage(options, settings);
      },
    };
  }

  private async *subscriptionListPagingPage(
    options?: DiscountsSubscriptionListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<Discount[]> {
    let result: DiscountsSubscriptionListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._subscriptionList(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._subscriptionListNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *subscriptionListPagingAll(
    options?: DiscountsSubscriptionListOptionalParams,
  ): AsyncIterableIterator<Discount> {
    for await (const page of this.subscriptionListPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * List discounts that are applicable for a given scope. Currently supported scopes: billing accounts
   * @param scope The scope at which the benefits are listed.
   * @param options The options parameters.
   */
  public listScopeList(
    scope: string,
    options?: DiscountsScopeListOptionalParams,
  ): PagedAsyncIterableIterator<Discount> {
    const iter = this.scopeListPagingAll(scope, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.scopeListPagingPage(scope, options, settings);
      },
    };
  }

  private async *scopeListPagingPage(
    scope: string,
    options?: DiscountsScopeListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<Discount[]> {
    let result: DiscountsScopeListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._scopeList(scope, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._scopeListNext(scope, continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *scopeListPagingAll(
    scope: string,
    options?: DiscountsScopeListOptionalParams,
  ): AsyncIterableIterator<Discount> {
    for await (const page of this.scopeListPagingPage(scope, options)) {
      yield* page;
    }
  }

  /**
   * Create discount.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param discountName Name of the discount
   * @param body Request body for creating a discount.
   * @param options The options parameters.
   */
  async beginCreate(
    resourceGroupName: string,
    discountName: string,
    body: Discount,
    options?: DiscountsCreateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<DiscountsCreateResponse>,
      DiscountsCreateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<DiscountsCreateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, discountName, body, options },
      spec: createOperationSpec,
    });
    const poller = await createHttpPoller<
      DiscountsCreateResponse,
      OperationState<DiscountsCreateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create discount.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param discountName Name of the discount
   * @param body Request body for creating a discount.
   * @param options The options parameters.
   */
  async beginCreateAndWait(
    resourceGroupName: string,
    discountName: string,
    body: Discount,
    options?: DiscountsCreateOptionalParams,
  ): Promise<DiscountsCreateResponse> {
    const poller = await this.beginCreate(
      resourceGroupName,
      discountName,
      body,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Delete discount. Clears the metadata from the user's view.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param discountName Name of the discount
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    discountName: string,
    options?: DiscountsDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<DiscountsDeleteResponse>,
      DiscountsDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<DiscountsDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, discountName, options },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<
      DiscountsDeleteResponse,
      OperationState<DiscountsDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete discount. Clears the metadata from the user's view.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param discountName Name of the discount
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    discountName: string,
    options?: DiscountsDeleteOptionalParams,
  ): Promise<DiscountsDeleteResponse> {
    const poller = await this.beginDelete(
      resourceGroupName,
      discountName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * List discounts at resource group level
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _resourceGroupList(
    resourceGroupName: string,
    options?: DiscountsResourceGroupListOptionalParams,
  ): Promise<DiscountsResourceGroupListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      resourceGroupListOperationSpec,
    );
  }

  /**
   * List discounts at subscription level
   * @param options The options parameters.
   */
  private _subscriptionList(
    options?: DiscountsSubscriptionListOptionalParams,
  ): Promise<DiscountsSubscriptionListResponse> {
    return this.client.sendOperationRequest(
      { options },
      subscriptionListOperationSpec,
    );
  }

  /**
   * Cancel discount. Stops applying the benefit.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param discountName Name of the discount
   * @param options The options parameters.
   */
  async beginCancel(
    resourceGroupName: string,
    discountName: string,
    options?: DiscountsCancelOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<DiscountsCancelResponse>,
      DiscountsCancelResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<DiscountsCancelResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, discountName, options },
      spec: cancelOperationSpec,
    });
    const poller = await createHttpPoller<
      DiscountsCancelResponse,
      OperationState<DiscountsCancelResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Cancel discount. Stops applying the benefit.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param discountName Name of the discount
   * @param options The options parameters.
   */
  async beginCancelAndWait(
    resourceGroupName: string,
    discountName: string,
    options?: DiscountsCancelOptionalParams,
  ): Promise<DiscountsCancelResponse> {
    const poller = await this.beginCancel(
      resourceGroupName,
      discountName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * List discounts that are applicable for a given scope. Currently supported scopes: billing accounts
   * @param scope The scope at which the benefits are listed.
   * @param options The options parameters.
   */
  private _scopeList(
    scope: string,
    options?: DiscountsScopeListOptionalParams,
  ): Promise<DiscountsScopeListResponse> {
    return this.client.sendOperationRequest(
      { scope, options },
      scopeListOperationSpec,
    );
  }

  /**
   * ResourceGroupListNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ResourceGroupList method.
   * @param options The options parameters.
   */
  private _resourceGroupListNext(
    resourceGroupName: string,
    nextLink: string,
    options?: DiscountsResourceGroupListNextOptionalParams,
  ): Promise<DiscountsResourceGroupListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      resourceGroupListNextOperationSpec,
    );
  }

  /**
   * SubscriptionListNext
   * @param nextLink The nextLink from the previous successful call to the SubscriptionList method.
   * @param options The options parameters.
   */
  private _subscriptionListNext(
    nextLink: string,
    options?: DiscountsSubscriptionListNextOptionalParams,
  ): Promise<DiscountsSubscriptionListNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      subscriptionListNextOperationSpec,
    );
  }

  /**
   * ScopeListNext
   * @param scope The scope at which the benefits are listed.
   * @param nextLink The nextLink from the previous successful call to the ScopeList method.
   * @param options The options parameters.
   */
  private _scopeListNext(
    scope: string,
    nextLink: string,
    options?: DiscountsScopeListNextOptionalParams,
  ): Promise<DiscountsScopeListNextResponse> {
    return this.client.sendOperationRequest(
      { scope, nextLink, options },
      scopeListNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BillingBenefits/discounts/{discountName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Discount,
    },
    201: {
      bodyMapper: Mappers.Discount,
    },
    202: {
      bodyMapper: Mappers.Discount,
    },
    204: {
      bodyMapper: Mappers.Discount,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body5,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.discountName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BillingBenefits/discounts/{discountName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.DiscountsDeleteHeaders,
    },
    201: {
      headersMapper: Mappers.DiscountsDeleteHeaders,
    },
    202: {
      headersMapper: Mappers.DiscountsDeleteHeaders,
    },
    204: {
      headersMapper: Mappers.DiscountsDeleteHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.discountName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const resourceGroupListOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BillingBenefits/discounts",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DiscountList,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const subscriptionListOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.BillingBenefits/discounts",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DiscountList,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer,
};
const cancelOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BillingBenefits/discounts/{discountName}/cancel",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Discount,
    },
    201: {
      bodyMapper: Mappers.Discount,
    },
    202: {
      bodyMapper: Mappers.Discount,
    },
    204: {
      bodyMapper: Mappers.Discount,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.discountName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const scopeListOperationSpec: coreClient.OperationSpec = {
  path: "/{scope}/providers/Microsoft.BillingBenefits/applicableDiscounts",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DiscountList,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.scope],
  headerParameters: [Parameters.accept],
  serializer,
};
const resourceGroupListNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DiscountList,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const subscriptionListNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DiscountList,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const scopeListNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DiscountList,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.scope],
  headerParameters: [Parameters.accept],
  serializer,
};
