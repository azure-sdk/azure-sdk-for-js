/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  Package,
  ContentPackagesListOptionalParams,
  ContentPackagesGetOptionalParams,
  ContentPackagesGetResponse,
  PackageInstallationProperties,
  ContentPackagesInstallOptionalParams,
  ContentPackagesInstallResponse,
  ContentPackagesUninstallOptionalParams,
  ContentPackagesUninstallResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a ContentPackages. */
export interface ContentPackages {
  /**
   * Gets all available packages.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sentinelWorkspaceName The name of the workspace.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    sentinelWorkspaceName: string,
    options?: ContentPackagesListOptionalParams
  ): PagedAsyncIterableIterator<Package>;
  /**
   * Gets a package byt its identifier.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sentinelWorkspaceName The name of the workspace.
   * @param packageId package Id
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    sentinelWorkspaceName: string,
    packageId: string,
    options?: ContentPackagesGetOptionalParams
  ): Promise<ContentPackagesGetResponse>;
  /**
   * Install a package to the workspace.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sentinelWorkspaceName The name of the workspace.
   * @param packageId package Id
   * @param packageInstallationProperties Package installation properties
   * @param options The options parameters.
   */
  install(
    resourceGroupName: string,
    sentinelWorkspaceName: string,
    packageId: string,
    packageInstallationProperties: PackageInstallationProperties,
    options?: ContentPackagesInstallOptionalParams
  ): Promise<ContentPackagesInstallResponse>;
  /**
   * Uninstall a package from the workspace.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sentinelWorkspaceName The name of the workspace.
   * @param packageId package Id
   * @param options The options parameters.
   */
  uninstall(
    resourceGroupName: string,
    sentinelWorkspaceName: string,
    packageId: string,
    options?: ContentPackagesUninstallOptionalParams
  ): Promise<ContentPackagesUninstallResponse>;
}
