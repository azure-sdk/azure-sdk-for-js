/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  Watchlist,
  WatchlistsListOptionalParams,
  WatchlistsGetOptionalParams,
  WatchlistsGetResponse,
  WatchlistsDeleteOptionalParams,
  WatchlistsDeleteResponse,
  WatchlistsCreateOrUpdateOptionalParams,
  WatchlistsCreateOrUpdateResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Watchlists. */
export interface Watchlists {
  /**
   * Get all watchlists, without watchlist items.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    workspaceName: string,
    options?: WatchlistsListOptionalParams,
  ): PagedAsyncIterableIterator<Watchlist>;
  /**
   * Get a watchlist, without its watchlist items.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param watchlistAlias The watchlist alias
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    workspaceName: string,
    watchlistAlias: string,
    options?: WatchlistsGetOptionalParams,
  ): Promise<WatchlistsGetResponse>;
  /**
   * Delete a watchlist.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param watchlistAlias The watchlist alias
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    workspaceName: string,
    watchlistAlias: string,
    options?: WatchlistsDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<WatchlistsDeleteResponse>,
      WatchlistsDeleteResponse
    >
  >;
  /**
   * Delete a watchlist.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param watchlistAlias The watchlist alias
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    workspaceName: string,
    watchlistAlias: string,
    options?: WatchlistsDeleteOptionalParams,
  ): Promise<WatchlistsDeleteResponse>;
  /**
   * Create or update a Watchlist and its Watchlist Items (bulk creation, e.g. through text/csv content
   * type). To create a Watchlist and its Items, we should call this endpoint with rawContent and
   * contentType properties.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param watchlistAlias The watchlist alias
   * @param watchlist The watchlist
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    workspaceName: string,
    watchlistAlias: string,
    watchlist: Watchlist,
    options?: WatchlistsCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<WatchlistsCreateOrUpdateResponse>,
      WatchlistsCreateOrUpdateResponse
    >
  >;
  /**
   * Create or update a Watchlist and its Watchlist Items (bulk creation, e.g. through text/csv content
   * type). To create a Watchlist and its Items, we should call this endpoint with rawContent and
   * contentType properties.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param watchlistAlias The watchlist alias
   * @param watchlist The watchlist
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    workspaceName: string,
    watchlistAlias: string,
    watchlist: Watchlist,
    options?: WatchlistsCreateOrUpdateOptionalParams,
  ): Promise<WatchlistsCreateOrUpdateResponse>;
}
