/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  Incident,
  IncidentsListOptionalParams,
  IncidentsGetOptionalParams,
  IncidentsGetResponse,
  IncidentsCreateOrUpdateOptionalParams,
  IncidentsCreateOrUpdateResponse,
  IncidentsDeleteOptionalParams,
  IncidentsListAlertsOptionalParams,
  IncidentsListAlertsResponse,
  IncidentsListBookmarksOptionalParams,
  IncidentsListBookmarksResponse,
  IncidentsListEntitiesOptionalParams,
  IncidentsListEntitiesResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Incidents. */
export interface Incidents {
  /**
   * Gets all incidents.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    workspaceName: string,
    options?: IncidentsListOptionalParams,
  ): PagedAsyncIterableIterator<Incident>;
  /**
   * Gets a given incident.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param incidentId Incident ID
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    workspaceName: string,
    incidentId: string,
    options?: IncidentsGetOptionalParams,
  ): Promise<IncidentsGetResponse>;
  /**
   * Creates or updates an incident.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param incidentId Incident ID
   * @param incident The incident
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    workspaceName: string,
    incidentId: string,
    incident: Incident,
    options?: IncidentsCreateOrUpdateOptionalParams,
  ): Promise<IncidentsCreateOrUpdateResponse>;
  /**
   * Deletes a given incident.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param incidentId Incident ID
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    workspaceName: string,
    incidentId: string,
    options?: IncidentsDeleteOptionalParams,
  ): Promise<void>;
  /**
   * Gets all alerts for an incident.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param incidentId Incident ID
   * @param options The options parameters.
   */
  listAlerts(
    resourceGroupName: string,
    workspaceName: string,
    incidentId: string,
    options?: IncidentsListAlertsOptionalParams,
  ): Promise<IncidentsListAlertsResponse>;
  /**
   * Gets all bookmarks for an incident.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param incidentId Incident ID
   * @param options The options parameters.
   */
  listBookmarks(
    resourceGroupName: string,
    workspaceName: string,
    incidentId: string,
    options?: IncidentsListBookmarksOptionalParams,
  ): Promise<IncidentsListBookmarksResponse>;
  /**
   * Gets all entities for an incident.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param incidentId Incident ID
   * @param options The options parameters.
   */
  listEntities(
    resourceGroupName: string,
    workspaceName: string,
    incidentId: string,
    options?: IncidentsListEntitiesOptionalParams,
  ): Promise<IncidentsListEntitiesResponse>;
}
