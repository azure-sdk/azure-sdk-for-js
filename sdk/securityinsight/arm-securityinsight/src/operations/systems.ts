/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { Systems } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SecurityInsights } from "../securityInsights";
import {
  System,
  SystemsGetAllNextOptionalParams,
  SystemsGetAllOptionalParams,
  SystemsGetAllResponse,
  SystemsCreateOrUpdateOptionalParams,
  SystemsCreateOrUpdateResponse,
  SystemsGetOptionalParams,
  SystemsGetResponse,
  SystemsDeleteOptionalParams,
  SystemsListActionsOptionalParams,
  SystemsListActionsResponse,
  SystemsPerformActionOptionalParams,
  SystemsReportActionStatusOptionalParams,
  SystemsGetAllNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Systems operations. */
export class SystemsImpl implements Systems {
  private readonly client: SecurityInsights;

  /**
   * Initialize a new instance of the class Systems class.
   * @param client Reference to the service client
   */
  constructor(client: SecurityInsights) {
    this.client = client;
  }

  /**
   * Gets the systems.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param agentResourceName Business Application Agent Name
   * @param options The options parameters.
   */
  public listAll(
    resourceGroupName: string,
    workspaceName: string,
    agentResourceName: string,
    options?: SystemsGetAllOptionalParams,
  ): PagedAsyncIterableIterator<System> {
    const iter = this.getAllPagingAll(
      resourceGroupName,
      workspaceName,
      agentResourceName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.getAllPagingPage(
          resourceGroupName,
          workspaceName,
          agentResourceName,
          options,
          settings,
        );
      },
    };
  }

  private async *getAllPagingPage(
    resourceGroupName: string,
    workspaceName: string,
    agentResourceName: string,
    options?: SystemsGetAllOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<System[]> {
    let result: SystemsGetAllResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._getAll(
        resourceGroupName,
        workspaceName,
        agentResourceName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._getAllNext(
        resourceGroupName,
        workspaceName,
        agentResourceName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *getAllPagingAll(
    resourceGroupName: string,
    workspaceName: string,
    agentResourceName: string,
    options?: SystemsGetAllOptionalParams,
  ): AsyncIterableIterator<System> {
    for await (const page of this.getAllPagingPage(
      resourceGroupName,
      workspaceName,
      agentResourceName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Creates or updates the system.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param agentResourceName Business Application Agent Name
   * @param systemResourceName The name of the system.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    workspaceName: string,
    agentResourceName: string,
    systemResourceName: string,
    options?: SystemsCreateOrUpdateOptionalParams,
  ): Promise<SystemsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        agentResourceName,
        systemResourceName,
        options,
      },
      createOrUpdateOperationSpec,
    );
  }

  /**
   * Gets the system.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param agentResourceName Business Application Agent Name
   * @param systemResourceName The name of the system.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    workspaceName: string,
    agentResourceName: string,
    systemResourceName: string,
    options?: SystemsGetOptionalParams,
  ): Promise<SystemsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        agentResourceName,
        systemResourceName,
        options,
      },
      getOperationSpec,
    );
  }

  /**
   * Deletes the system.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param agentResourceName Business Application Agent Name
   * @param systemResourceName The name of the system.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    workspaceName: string,
    agentResourceName: string,
    systemResourceName: string,
    options?: SystemsDeleteOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        agentResourceName,
        systemResourceName,
        options,
      },
      deleteOperationSpec,
    );
  }

  /**
   * Gets the systems.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param agentResourceName Business Application Agent Name
   * @param options The options parameters.
   */
  private _getAll(
    resourceGroupName: string,
    workspaceName: string,
    agentResourceName: string,
    options?: SystemsGetAllOptionalParams,
  ): Promise<SystemsGetAllResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workspaceName, agentResourceName, options },
      getAllOperationSpec,
    );
  }

  /**
   * List of actions for a business application system.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param agentResourceName Business Application Agent Name
   * @param systemResourceName The name of the system.
   * @param options The options parameters.
   */
  listActions(
    resourceGroupName: string,
    workspaceName: string,
    agentResourceName: string,
    systemResourceName: string,
    options?: SystemsListActionsOptionalParams,
  ): Promise<SystemsListActionsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        agentResourceName,
        systemResourceName,
        options,
      },
      listActionsOperationSpec,
    );
  }

  /**
   * Perform the last operation on the system.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param agentResourceName Business Application Agent Name
   * @param systemResourceName The name of the system.
   * @param options The options parameters.
   */
  performAction(
    resourceGroupName: string,
    workspaceName: string,
    agentResourceName: string,
    systemResourceName: string,
    options?: SystemsPerformActionOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        agentResourceName,
        systemResourceName,
        options,
      },
      performActionOperationSpec,
    );
  }

  /**
   * Report the status of the action.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param agentResourceName Business Application Agent Name
   * @param systemResourceName The name of the system.
   * @param options The options parameters.
   */
  reportActionStatus(
    resourceGroupName: string,
    workspaceName: string,
    agentResourceName: string,
    systemResourceName: string,
    options?: SystemsReportActionStatusOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        agentResourceName,
        systemResourceName,
        options,
      },
      reportActionStatusOperationSpec,
    );
  }

  /**
   * GetAllNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param agentResourceName Business Application Agent Name
   * @param nextLink The nextLink from the previous successful call to the GetAll method.
   * @param options The options parameters.
   */
  private _getAllNext(
    resourceGroupName: string,
    workspaceName: string,
    agentResourceName: string,
    nextLink: string,
    options?: SystemsGetAllNextOptionalParams,
  ): Promise<SystemsGetAllNextResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        agentResourceName,
        nextLink,
        options,
      },
      getAllNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/businessApplicationAgents/{agentResourceName}/systems/{systemResourceName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.System,
    },
    201: {
      bodyMapper: Mappers.System,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  requestBody: Parameters.systemToUpsert,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.agentResourceName,
    Parameters.systemResourceName,
  ],
  headerParameters: [
    Parameters.accept,
    Parameters.contentType,
    Parameters.xMsClientWorkspaceId,
    Parameters.xMsClientObjectId,
  ],
  mediaType: "json",
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/businessApplicationAgents/{agentResourceName}/systems/{systemResourceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.System,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.agentResourceName,
    Parameters.systemResourceName,
  ],
  headerParameters: [Parameters.accept, Parameters.xMsClientWorkspaceId],
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/businessApplicationAgents/{agentResourceName}/systems/{systemResourceName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.agentResourceName,
    Parameters.systemResourceName,
  ],
  headerParameters: [Parameters.accept, Parameters.xMsClientWorkspaceId],
  serializer,
};
const getAllOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/businessApplicationAgents/{agentResourceName}/systems",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SystemsList,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.orderby,
    Parameters.top,
    Parameters.skipToken,
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.agentResourceName,
  ],
  headerParameters: [Parameters.accept, Parameters.xMsClientWorkspaceId],
  serializer,
};
const listActionsOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/businessApplicationAgents/{agentResourceName}/systems/{systemResourceName}/listActions",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ListActionsResponse,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.agentResourceName,
    Parameters.systemResourceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const performActionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/businessApplicationAgents/{agentResourceName}/systems/{systemResourceName}/performAction",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  requestBody: Parameters.payload,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.agentResourceName,
    Parameters.systemResourceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const reportActionStatusOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/businessApplicationAgents/{agentResourceName}/systems/{systemResourceName}/reportActionStatus",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  requestBody: Parameters.payload,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.agentResourceName,
    Parameters.systemResourceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getAllNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SystemsList,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.nextLink,
    Parameters.agentResourceName,
  ],
  headerParameters: [Parameters.accept, Parameters.xMsClientWorkspaceId],
  serializer,
};
