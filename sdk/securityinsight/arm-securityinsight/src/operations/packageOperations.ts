/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PackageOperations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SecurityInsights } from "../securityInsights";
import {
  PackageInstallationProperties,
  PackageInstallOptionalParams,
  PackageInstallResponse,
  PackageUninstallOptionalParams
} from "../models";

/** Class containing PackageOperations operations. */
export class PackageOperationsImpl implements PackageOperations {
  private readonly client: SecurityInsights;

  /**
   * Initialize a new instance of the class PackageOperations class.
   * @param client Reference to the service client
   */
  constructor(client: SecurityInsights) {
    this.client = client;
  }

  /**
   * Install a package to the workspace.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
   *                                            Microsoft.OperationalInsights.
   * @param workspaceName The name of the workspace.
   * @param packageId package Id
   * @param packageInstallationProperties Package installation properties
   * @param options The options parameters.
   */
  install(
    resourceGroupName: string,
    operationalInsightsResourceProvider: string,
    workspaceName: string,
    packageId: string,
    packageInstallationProperties: PackageInstallationProperties,
    options?: PackageInstallOptionalParams
  ): Promise<PackageInstallResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        operationalInsightsResourceProvider,
        workspaceName,
        packageId,
        packageInstallationProperties,
        options
      },
      installOperationSpec
    );
  }

  /**
   * Uninstall a package from the workspace.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
   *                                            Microsoft.OperationalInsights.
   * @param workspaceName The name of the workspace.
   * @param packageId package Id
   * @param options The options parameters.
   */
  uninstall(
    resourceGroupName: string,
    operationalInsightsResourceProvider: string,
    workspaceName: string,
    packageId: string,
    options?: PackageUninstallOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        operationalInsightsResourceProvider,
        workspaceName,
        packageId,
        options
      },
      uninstallOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const installOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{operationalInsightsResourceProvider}/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/packages/{packageId}/install",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Package
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.packageInstallationProperties,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.operationalInsightsResourceProvider,
    Parameters.packageId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const uninstallOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{operationalInsightsResourceProvider}/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/packages/{packageId}/uninstall",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.operationalInsightsResourceProvider,
    Parameters.packageId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
