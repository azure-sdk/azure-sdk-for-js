/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { ThreatIntelligenceOperations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SecurityInsights } from "../securityInsights";
import {
  TIObjectUnion,
  ThreatIntelligenceQueryNextOptionalParams,
  ThreatIntelligenceQueryOptionalParams,
  ThreatIntelligenceQueryResponse,
  ThreatIntelligenceCountOptionalParams,
  ThreatIntelligenceCountResponse,
  ThreatIntelligenceQueryNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ThreatIntelligenceOperations operations. */
export class ThreatIntelligenceOperationsImpl
  implements ThreatIntelligenceOperations
{
  private readonly client: SecurityInsights;

  /**
   * Initialize a new instance of the class ThreatIntelligenceOperations class.
   * @param client Reference to the service client
   */
  constructor(client: SecurityInsights) {
    this.client = client;
  }

  /**
   * Gets all TI objects for the workspace.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param options The options parameters.
   */
  public listQuery(
    resourceGroupName: string,
    workspaceName: string,
    options?: ThreatIntelligenceQueryOptionalParams,
  ): PagedAsyncIterableIterator<TIObjectUnion> {
    const iter = this.queryPagingAll(resourceGroupName, workspaceName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.queryPagingPage(
          resourceGroupName,
          workspaceName,
          options,
          settings,
        );
      },
    };
  }

  private async *queryPagingPage(
    resourceGroupName: string,
    workspaceName: string,
    options?: ThreatIntelligenceQueryOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<TIObjectUnion[]> {
    let result: ThreatIntelligenceQueryResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._query(resourceGroupName, workspaceName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._queryNext(
        resourceGroupName,
        workspaceName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *queryPagingAll(
    resourceGroupName: string,
    workspaceName: string,
    options?: ThreatIntelligenceQueryOptionalParams,
  ): AsyncIterableIterator<TIObjectUnion> {
    for await (const page of this.queryPagingPage(
      resourceGroupName,
      workspaceName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Gets the count of all TI objects for the workspace.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param options The options parameters.
   */
  count(
    resourceGroupName: string,
    workspaceName: string,
    options?: ThreatIntelligenceCountOptionalParams,
  ): Promise<ThreatIntelligenceCountResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workspaceName, options },
      countOperationSpec,
    );
  }

  /**
   * Gets all TI objects for the workspace.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param options The options parameters.
   */
  private _query(
    resourceGroupName: string,
    workspaceName: string,
    options?: ThreatIntelligenceQueryOptionalParams,
  ): Promise<ThreatIntelligenceQueryResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workspaceName, options },
      queryOperationSpec,
    );
  }

  /**
   * QueryNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param nextLink The nextLink from the previous successful call to the Query method.
   * @param options The options parameters.
   */
  private _queryNext(
    resourceGroupName: string,
    workspaceName: string,
    nextLink: string,
    options?: ThreatIntelligenceQueryNextOptionalParams,
  ): Promise<ThreatIntelligenceQueryNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workspaceName, nextLink, options },
      queryNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const countOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/threatIntelligence/main/count",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ThreatIntelligenceCount,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  requestBody: Parameters.query,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const queryOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/threatIntelligence/main/query",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ThreatIntelligenceList,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  requestBody: Parameters.query1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const queryNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ThreatIntelligenceList,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
