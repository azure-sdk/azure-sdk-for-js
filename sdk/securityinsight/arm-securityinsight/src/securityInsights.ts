/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreRestPipeline from "@azure/core-rest-pipeline";
import {
  PipelineRequest,
  PipelineResponse,
  SendRequest
} from "@azure/core-rest-pipeline";
import * as coreAuth from "@azure/core-auth";
import {
  AlertRulesImpl,
  ActionsImpl,
  AlertRuleTemplatesImpl,
  AutomationRulesImpl,
  BookmarksImpl,
  DataConnectorsImpl,
  IncidentsImpl,
  IncidentCommentsImpl,
  IncidentRelationsImpl,
  SentinelOnboardingStatesImpl,
  ThreatIntelligenceIndicatorImpl,
  ThreatIntelligenceIndicatorsImpl,
  ThreatIntelligenceIndicatorMetricsImpl,
  WatchlistsImpl,
  WatchlistItemsImpl,
  OperationsImpl
} from "./operations";
import {
  AlertRules,
  Actions,
  AlertRuleTemplates,
  AutomationRules,
  Bookmarks,
  DataConnectors,
  Incidents,
  IncidentComments,
  IncidentRelations,
  SentinelOnboardingStates,
  ThreatIntelligenceIndicator,
  ThreatIntelligenceIndicators,
  ThreatIntelligenceIndicatorMetrics,
  Watchlists,
  WatchlistItems,
  Operations
} from "./operationsInterfaces";
import { SecurityInsightsOptionalParams } from "./models";

export class SecurityInsights extends coreClient.ServiceClient {
  $host: string;
  apiVersion: string;
  subscriptionId: string;

  /**
   * Initializes a new instance of the SecurityInsights class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param subscriptionId The ID of the target subscription.
   * @param options The parameter options
   */
  constructor(
    credentials: coreAuth.TokenCredential,
    subscriptionId: string,
    options?: SecurityInsightsOptionalParams
  ) {
    if (credentials === undefined) {
      throw new Error("'credentials' cannot be null");
    }
    if (subscriptionId === undefined) {
      throw new Error("'subscriptionId' cannot be null");
    }

    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: SecurityInsightsOptionalParams = {
      requestContentType: "application/json; charset=utf-8",
      credential: credentials
    };

    const packageDetails = `azsdk-js-arm-securityinsight/1.0.0`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    if (!options.credentialScopes) {
      options.credentialScopes = ["https://management.azure.com/.default"];
    }
    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix
      },
      baseUri:
        options.endpoint ?? options.baseUri ?? "https://management.azure.com"
    };
    super(optionsWithDefaults);

    if (options?.pipeline && options.pipeline.getOrderedPolicies().length > 0) {
      const pipelinePolicies: coreRestPipeline.PipelinePolicy[] = options.pipeline.getOrderedPolicies();
      const bearerTokenAuthenticationPolicyFound = pipelinePolicies.some(
        (pipelinePolicy) =>
          pipelinePolicy.name ===
          coreRestPipeline.bearerTokenAuthenticationPolicyName
      );
      if (!bearerTokenAuthenticationPolicyFound) {
        this.pipeline.removePolicy({
          name: coreRestPipeline.bearerTokenAuthenticationPolicyName
        });
        this.pipeline.addPolicy(
          coreRestPipeline.bearerTokenAuthenticationPolicy({
            scopes: `${optionsWithDefaults.baseUri}/.default`,
            challengeCallbacks: {
              authorizeRequestOnChallenge:
                coreClient.authorizeRequestOnClaimChallenge
            }
          })
        );
      }
    }
    // Parameter assignments
    this.subscriptionId = subscriptionId;

    // Assigning values to Constant parameters
    this.$host = options.$host || "https://management.azure.com";
    this.apiVersion = options.apiVersion || "2022-08-01";
    this.alertRules = new AlertRulesImpl(this);
    this.actions = new ActionsImpl(this);
    this.alertRuleTemplates = new AlertRuleTemplatesImpl(this);
    this.automationRules = new AutomationRulesImpl(this);
    this.bookmarks = new BookmarksImpl(this);
    this.dataConnectors = new DataConnectorsImpl(this);
    this.incidents = new IncidentsImpl(this);
    this.incidentComments = new IncidentCommentsImpl(this);
    this.incidentRelations = new IncidentRelationsImpl(this);
    this.sentinelOnboardingStates = new SentinelOnboardingStatesImpl(this);
    this.threatIntelligenceIndicator = new ThreatIntelligenceIndicatorImpl(
      this
    );
    this.threatIntelligenceIndicators = new ThreatIntelligenceIndicatorsImpl(
      this
    );
    this.threatIntelligenceIndicatorMetrics = new ThreatIntelligenceIndicatorMetricsImpl(
      this
    );
    this.watchlists = new WatchlistsImpl(this);
    this.watchlistItems = new WatchlistItemsImpl(this);
    this.operations = new OperationsImpl(this);
    this.addCustomApiVersionPolicy(options.apiVersion);
  }

  /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
  private addCustomApiVersionPolicy(apiVersion?: string) {
    if (!apiVersion) {
      return;
    }
    const apiVersionPolicy = {
      name: "CustomApiVersionPolicy",
      async sendRequest(
        request: PipelineRequest,
        next: SendRequest
      ): Promise<PipelineResponse> {
        const param = request.url.split("?");
        if (param.length > 1) {
          const newParams = param[1].split("&").map((item) => {
            if (item.indexOf("api-version") > -1) {
              return item.replace(/(?<==).*$/, apiVersion);
            } else {
              return item;
            }
          });
          request.url = param[0] + "?" + newParams.join("&");
        }
        return next(request);
      }
    };
    this.pipeline.addPolicy(apiVersionPolicy);
  }

  alertRules: AlertRules;
  actions: Actions;
  alertRuleTemplates: AlertRuleTemplates;
  automationRules: AutomationRules;
  bookmarks: Bookmarks;
  dataConnectors: DataConnectors;
  incidents: Incidents;
  incidentComments: IncidentComments;
  incidentRelations: IncidentRelations;
  sentinelOnboardingStates: SentinelOnboardingStates;
  threatIntelligenceIndicator: ThreatIntelligenceIndicator;
  threatIntelligenceIndicators: ThreatIntelligenceIndicators;
  threatIntelligenceIndicatorMetrics: ThreatIntelligenceIndicatorMetrics;
  watchlists: Watchlists;
  watchlistItems: WatchlistItems;
  operations: Operations;
}
