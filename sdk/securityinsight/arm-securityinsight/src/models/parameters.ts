/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter,
} from "@azure/core-client";
import {
  AlertRule as AlertRuleMapper,
  ActionRequest as ActionRequestMapper,
  AutomationRule as AutomationRuleMapper,
  EntityManualTriggerRequestBody as EntityManualTriggerRequestBodyMapper,
  ManualTriggerRequestBody as ManualTriggerRequestBodyMapper,
  Incident as IncidentMapper,
  Bookmark as BookmarkMapper,
  PackageModel as PackageModelMapper,
  TemplateModel as TemplateModelMapper,
  DataConnector as DataConnectorMapper,
  IncidentComment as IncidentCommentMapper,
  Relation as RelationMapper,
  IncidentTask as IncidentTaskMapper,
  MetadataModel as MetadataModelMapper,
  MetadataPatch as MetadataPatchMapper,
  SentinelOnboardingState as SentinelOnboardingStateMapper,
  SecurityMLAnalyticsSetting as SecurityMLAnalyticsSettingMapper,
  RepositoryAccessProperties as RepositoryAccessPropertiesMapper,
  SourceControl as SourceControlMapper,
  ThreatIntelligenceIndicatorModel as ThreatIntelligenceIndicatorModelMapper,
  ThreatIntelligenceFilteringCriteria as ThreatIntelligenceFilteringCriteriaMapper,
  ThreatIntelligenceAppendTags as ThreatIntelligenceAppendTagsMapper,
  Watchlist as WatchlistMapper,
  WatchlistItem as WatchlistItemMapper,
} from "../models/mappers";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String",
    },
  },
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2024-03-01",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String",
    },
  },
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    constraints: {
      MinLength: 1,
    },
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    constraints: {
      MaxLength: 90,
      MinLength: 1,
    },
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const workspaceName: OperationURLParameter = {
  parameterPath: "workspaceName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[A-Za-z0-9][A-Za-z0-9-]+[A-Za-z0-9]$"),
      MaxLength: 90,
      MinLength: 1,
    },
    serializedName: "workspaceName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const ruleId: OperationURLParameter = {
  parameterPath: "ruleId",
  mapper: {
    serializedName: "ruleId",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String",
    },
  },
};

export const alertRule: OperationParameter = {
  parameterPath: "alertRule",
  mapper: AlertRuleMapper,
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const actionId: OperationURLParameter = {
  parameterPath: "actionId",
  mapper: {
    serializedName: "actionId",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const action: OperationParameter = {
  parameterPath: "action",
  mapper: ActionRequestMapper,
};

export const alertRuleTemplateId: OperationURLParameter = {
  parameterPath: "alertRuleTemplateId",
  mapper: {
    serializedName: "alertRuleTemplateId",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const automationRuleId: OperationURLParameter = {
  parameterPath: "automationRuleId",
  mapper: {
    serializedName: "automationRuleId",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const automationRuleToUpsert: OperationParameter = {
  parameterPath: ["options", "automationRuleToUpsert"],
  mapper: AutomationRuleMapper,
};

export const requestBody: OperationParameter = {
  parameterPath: ["options", "requestBody"],
  mapper: EntityManualTriggerRequestBodyMapper,
};

export const entityIdentifier: OperationURLParameter = {
  parameterPath: "entityIdentifier",
  mapper: {
    serializedName: "entityIdentifier",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const requestBody1: OperationParameter = {
  parameterPath: ["options", "requestBody"],
  mapper: ManualTriggerRequestBodyMapper,
};

export const incidentIdentifier: OperationURLParameter = {
  parameterPath: "incidentIdentifier",
  mapper: {
    serializedName: "incidentIdentifier",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const filter: OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String",
    },
  },
};

export const orderby: OperationQueryParameter = {
  parameterPath: ["options", "orderby"],
  mapper: {
    serializedName: "$orderby",
    type: {
      name: "String",
    },
  },
};

export const top: OperationQueryParameter = {
  parameterPath: ["options", "top"],
  mapper: {
    constraints: {
      InclusiveMaximum: 1000,
    },
    serializedName: "$top",
    type: {
      name: "Number",
    },
  },
};

export const skipToken: OperationQueryParameter = {
  parameterPath: ["options", "skipToken"],
  mapper: {
    serializedName: "$skipToken",
    type: {
      name: "String",
    },
  },
};

export const incidentId: OperationURLParameter = {
  parameterPath: "incidentId",
  mapper: {
    serializedName: "incidentId",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const incident: OperationParameter = {
  parameterPath: "incident",
  mapper: IncidentMapper,
};

export const bookmarkId: OperationURLParameter = {
  parameterPath: "bookmarkId",
  mapper: {
    serializedName: "bookmarkId",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const bookmark: OperationParameter = {
  parameterPath: "bookmark",
  mapper: BookmarkMapper,
};

export const search: OperationQueryParameter = {
  parameterPath: ["options", "search"],
  mapper: {
    serializedName: "$search",
    type: {
      name: "String",
    },
  },
};

export const count: OperationQueryParameter = {
  parameterPath: ["options", "count"],
  mapper: {
    serializedName: "$count",
    type: {
      name: "Boolean",
    },
  },
};

export const top1: OperationQueryParameter = {
  parameterPath: ["options", "top"],
  mapper: {
    serializedName: "$top",
    type: {
      name: "Number",
    },
  },
};

export const skip: OperationQueryParameter = {
  parameterPath: ["options", "skip"],
  mapper: {
    serializedName: "$skip",
    type: {
      name: "Number",
    },
  },
};

export const packageId: OperationURLParameter = {
  parameterPath: "packageId",
  mapper: {
    serializedName: "packageId",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const packageInstallationProperties: OperationParameter = {
  parameterPath: "packageInstallationProperties",
  mapper: PackageModelMapper,
};

export const templateId: OperationURLParameter = {
  parameterPath: "templateId",
  mapper: {
    serializedName: "templateId",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const expand: OperationQueryParameter = {
  parameterPath: ["options", "expand"],
  mapper: {
    serializedName: "$expand",
    type: {
      name: "String",
    },
  },
};

export const templateInstallationProperties: OperationParameter = {
  parameterPath: "templateInstallationProperties",
  mapper: TemplateModelMapper,
};

export const dataConnectorId: OperationURLParameter = {
  parameterPath: "dataConnectorId",
  mapper: {
    serializedName: "dataConnectorId",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const dataConnector: OperationParameter = {
  parameterPath: "dataConnector",
  mapper: DataConnectorMapper,
};

export const incidentCommentId: OperationURLParameter = {
  parameterPath: "incidentCommentId",
  mapper: {
    serializedName: "incidentCommentId",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const incidentComment: OperationParameter = {
  parameterPath: "incidentComment",
  mapper: IncidentCommentMapper,
};

export const relationName: OperationURLParameter = {
  parameterPath: "relationName",
  mapper: {
    serializedName: "relationName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const relation: OperationParameter = {
  parameterPath: "relation",
  mapper: RelationMapper,
};

export const incidentTaskId: OperationURLParameter = {
  parameterPath: "incidentTaskId",
  mapper: {
    serializedName: "incidentTaskId",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const incidentTask: OperationParameter = {
  parameterPath: "incidentTask",
  mapper: IncidentTaskMapper,
};

export const metadataName: OperationURLParameter = {
  parameterPath: "metadataName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^\\S+$"),
    },
    serializedName: "metadataName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const metadata: OperationParameter = {
  parameterPath: "metadata",
  mapper: MetadataModelMapper,
};

export const metadataPatch: OperationParameter = {
  parameterPath: "metadataPatch",
  mapper: MetadataPatchMapper,
};

export const sentinelOnboardingStateName: OperationURLParameter = {
  parameterPath: "sentinelOnboardingStateName",
  mapper: {
    serializedName: "sentinelOnboardingStateName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const sentinelOnboardingStateParameter: OperationParameter = {
  parameterPath: ["options", "sentinelOnboardingStateParameter"],
  mapper: SentinelOnboardingStateMapper,
};

export const settingsResourceName: OperationURLParameter = {
  parameterPath: "settingsResourceName",
  mapper: {
    serializedName: "settingsResourceName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const securityMLAnalyticsSetting: OperationParameter = {
  parameterPath: "securityMLAnalyticsSetting",
  mapper: SecurityMLAnalyticsSettingMapper,
};

export const repositoryAccess: OperationParameter = {
  parameterPath: "repositoryAccess",
  mapper: RepositoryAccessPropertiesMapper,
};

export const sourceControlId: OperationURLParameter = {
  parameterPath: "sourceControlId",
  mapper: {
    serializedName: "sourceControlId",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const sourceControl: OperationParameter = {
  parameterPath: "sourceControl",
  mapper: SourceControlMapper,
};

export const threatIntelligenceProperties: OperationParameter = {
  parameterPath: "threatIntelligenceProperties",
  mapper: ThreatIntelligenceIndicatorModelMapper,
};

export const name: OperationURLParameter = {
  parameterPath: "name",
  mapper: {
    serializedName: "name",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const threatIntelligenceFilteringCriteria: OperationParameter = {
  parameterPath: "threatIntelligenceFilteringCriteria",
  mapper: ThreatIntelligenceFilteringCriteriaMapper,
};

export const threatIntelligenceAppendTags: OperationParameter = {
  parameterPath: "threatIntelligenceAppendTags",
  mapper: ThreatIntelligenceAppendTagsMapper,
};

export const threatIntelligenceReplaceTags: OperationParameter = {
  parameterPath: "threatIntelligenceReplaceTags",
  mapper: ThreatIntelligenceIndicatorModelMapper,
};

export const watchlistAlias: OperationURLParameter = {
  parameterPath: "watchlistAlias",
  mapper: {
    serializedName: "watchlistAlias",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const watchlist: OperationParameter = {
  parameterPath: "watchlist",
  mapper: WatchlistMapper,
};

export const watchlistItemId: OperationURLParameter = {
  parameterPath: "watchlistItemId",
  mapper: {
    serializedName: "watchlistItemId",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const watchlistItem: OperationParameter = {
  parameterPath: "watchlistItem",
  mapper: WatchlistItemMapper,
};
