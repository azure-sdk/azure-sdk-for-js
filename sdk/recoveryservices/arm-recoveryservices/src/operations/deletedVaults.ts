/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { DeletedVaults } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { RecoveryServicesClient } from "../recoveryServicesClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  DeletedVault,
  DeletedVaultsListBySubscriptionIdNextOptionalParams,
  DeletedVaultsListBySubscriptionIdOptionalParams,
  DeletedVaultsListBySubscriptionIdResponse,
  DeletedVaultsGetOptionalParams,
  DeletedVaultsGetResponse,
  DeletedVaultUndeleteInput,
  DeletedVaultsUndeleteOptionalParams,
  DeletedVaultsUndeleteResponse,
  DeletedVaultsGetOperationStatusOptionalParams,
  DeletedVaultsGetOperationStatusResponse,
  DeletedVaultsListBySubscriptionIdNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing DeletedVaults operations. */
export class DeletedVaultsImpl implements DeletedVaults {
  private readonly client: RecoveryServicesClient;

  /**
   * Initialize a new instance of the class DeletedVaults class.
   * @param client Reference to the service client
   */
  constructor(client: RecoveryServicesClient) {
    this.client = client;
  }

  /**
   * List of all DeletedVaults in the subscription.
   * @param location The name of the Azure region.
   * @param options The options parameters.
   */
  public listBySubscriptionId(
    location: string,
    options?: DeletedVaultsListBySubscriptionIdOptionalParams,
  ): PagedAsyncIterableIterator<DeletedVault> {
    const iter = this.listBySubscriptionIdPagingAll(location, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionIdPagingPage(location, options, settings);
      },
    };
  }

  private async *listBySubscriptionIdPagingPage(
    location: string,
    options?: DeletedVaultsListBySubscriptionIdOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<DeletedVault[]> {
    let result: DeletedVaultsListBySubscriptionIdResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySubscriptionId(location, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySubscriptionIdNext(
        location,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySubscriptionIdPagingAll(
    location: string,
    options?: DeletedVaultsListBySubscriptionIdOptionalParams,
  ): AsyncIterableIterator<DeletedVault> {
    for await (const page of this.listBySubscriptionIdPagingPage(
      location,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List of all DeletedVaults in the subscription.
   * @param location The name of the Azure region.
   * @param options The options parameters.
   */
  private _listBySubscriptionId(
    location: string,
    options?: DeletedVaultsListBySubscriptionIdOptionalParams,
  ): Promise<DeletedVaultsListBySubscriptionIdResponse> {
    return this.client.sendOperationRequest(
      { location, options },
      listBySubscriptionIdOperationSpec,
    );
  }

  /**
   * Get the DeletedVault details.
   * @param location The name of the Azure region.
   * @param options The options parameters.
   */
  get(
    location: string,
    options?: DeletedVaultsGetOptionalParams,
  ): Promise<DeletedVaultsGetResponse> {
    return this.client.sendOperationRequest(
      { location, options },
      getOperationSpec,
    );
  }

  /**
   * Undelete the DeletedVault.
   * @param location The name of the Azure region.
   * @param undeleteInput Undelete input.
   * @param options The options parameters.
   */
  async beginUndelete(
    location: string,
    undeleteInput: DeletedVaultUndeleteInput,
    options?: DeletedVaultsUndeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<DeletedVaultsUndeleteResponse>,
      DeletedVaultsUndeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<DeletedVaultsUndeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { location, undeleteInput, options },
      spec: undeleteOperationSpec,
    });
    const poller = await createHttpPoller<
      DeletedVaultsUndeleteResponse,
      OperationState<DeletedVaultsUndeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Undelete the DeletedVault.
   * @param location The name of the Azure region.
   * @param undeleteInput Undelete input.
   * @param options The options parameters.
   */
  async beginUndeleteAndWait(
    location: string,
    undeleteInput: DeletedVaultUndeleteInput,
    options?: DeletedVaultsUndeleteOptionalParams,
  ): Promise<DeletedVaultsUndeleteResponse> {
    const poller = await this.beginUndelete(location, undeleteInput, options);
    return poller.pollUntilDone();
  }

  /**
   * Gets the operation status for a DeletedVault.
   * @param location The name of the Azure region.
   * @param operationId The ID of an ongoing async operation.
   * @param options The options parameters.
   */
  getOperationStatus(
    location: string,
    operationId: string,
    options?: DeletedVaultsGetOperationStatusOptionalParams,
  ): Promise<DeletedVaultsGetOperationStatusResponse> {
    return this.client.sendOperationRequest(
      { location, operationId, options },
      getOperationStatusOperationSpec,
    );
  }

  /**
   * ListBySubscriptionIdNext
   * @param location The name of the Azure region.
   * @param nextLink The nextLink from the previous successful call to the ListBySubscriptionId method.
   * @param options The options parameters.
   */
  private _listBySubscriptionIdNext(
    location: string,
    nextLink: string,
    options?: DeletedVaultsListBySubscriptionIdNextOptionalParams,
  ): Promise<DeletedVaultsListBySubscriptionIdNextResponse> {
    return this.client.sendOperationRequest(
      { location, nextLink, options },
      listBySubscriptionIdNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listBySubscriptionIdOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.RecoveryServices/locations/{location}/deletedVaults",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeletedVaultList,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location1,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.RecoveryServices/locations/{location}/deletedVaults/{deletedVaultName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeletedVault,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location1,
    Parameters.deletedVaultName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const undeleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.RecoveryServices/locations/{location}/deletedVaults/{deletedVaultName}/undelete",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DeletedVault,
    },
    201: {
      bodyMapper: Mappers.DeletedVault,
    },
    202: {
      bodyMapper: Mappers.DeletedVault,
    },
    204: {
      bodyMapper: Mappers.DeletedVault,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.undeleteInput,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location1,
    Parameters.deletedVaultName,
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const getOperationStatusOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.RecoveryServices/locations/{location}/deletedVaults/{deletedVaultName}/operations/{operationId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OperationResource,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location1,
    Parameters.deletedVaultName,
    Parameters.operationId,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listBySubscriptionIdNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeletedVaultList,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.location1,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
