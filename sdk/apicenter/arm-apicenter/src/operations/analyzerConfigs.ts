/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { AnalyzerConfigs } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { AzureAPICenter } from "../azureAPICenter.js";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl.js";
import {
  AnalyzerConfig,
  AnalyzerConfigsListNextOptionalParams,
  AnalyzerConfigsListOptionalParams,
  AnalyzerConfigsListResponse,
  AnalyzerConfigsGetOptionalParams,
  AnalyzerConfigsGetResponse,
  AnalyzerConfigsCreateOrUpdateOptionalParams,
  AnalyzerConfigsCreateOrUpdateResponse,
  AnalyzerConfigsDeleteOptionalParams,
  AnalyzerConfigsExportRulesetOptionalParams,
  AnalyzerConfigsExportRulesetResponse,
  RulesetImportRequest,
  AnalyzerConfigsImportRulesetOptionalParams,
  AnalyzerConfigsImportRulesetResponse,
  AnalyzerConfigsListNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing AnalyzerConfigs operations. */
export class AnalyzerConfigsImpl implements AnalyzerConfigs {
  private readonly client: AzureAPICenter;

  /**
   * Initialize a new instance of the class AnalyzerConfigs class.
   * @param client Reference to the service client
   */
  constructor(client: AzureAPICenter) {
    this.client = client;
  }

  /**
   * Lists API analyzer configurations.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceName The name of Azure API Center service.
   * @param workspaceName The name of the workspace.
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    serviceName: string,
    workspaceName: string,
    options?: AnalyzerConfigsListOptionalParams,
  ): PagedAsyncIterableIterator<AnalyzerConfig> {
    const iter = this.listPagingAll(
      resourceGroupName,
      serviceName,
      workspaceName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(
          resourceGroupName,
          serviceName,
          workspaceName,
          options,
          settings,
        );
      },
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    serviceName: string,
    workspaceName: string,
    options?: AnalyzerConfigsListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<AnalyzerConfig[]> {
    let result: AnalyzerConfigsListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(
        resourceGroupName,
        serviceName,
        workspaceName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        resourceGroupName,
        serviceName,
        workspaceName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    serviceName: string,
    workspaceName: string,
    options?: AnalyzerConfigsListOptionalParams,
  ): AsyncIterableIterator<AnalyzerConfig> {
    for await (const page of this.listPagingPage(
      resourceGroupName,
      serviceName,
      workspaceName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Lists API analyzer configurations.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceName The name of Azure API Center service.
   * @param workspaceName The name of the workspace.
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    serviceName: string,
    workspaceName: string,
    options?: AnalyzerConfigsListOptionalParams,
  ): Promise<AnalyzerConfigsListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, serviceName, workspaceName, options },
      listOperationSpec,
    );
  }

  /**
   * Returns details of the API analyzer configuration.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceName The name of Azure API Center service.
   * @param workspaceName The name of the workspace.
   * @param analyzerConfigName The name of the configuration.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    serviceName: string,
    workspaceName: string,
    analyzerConfigName: string,
    options?: AnalyzerConfigsGetOptionalParams,
  ): Promise<AnalyzerConfigsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        workspaceName,
        analyzerConfigName,
        options,
      },
      getOperationSpec,
    );
  }

  /**
   * Creates new or updates existing API analyzer configuration.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceName The name of Azure API Center service.
   * @param workspaceName The name of the workspace.
   * @param analyzerConfigName The name of the configuration.
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    serviceName: string,
    workspaceName: string,
    analyzerConfigName: string,
    resource: AnalyzerConfig,
    options?: AnalyzerConfigsCreateOrUpdateOptionalParams,
  ): Promise<AnalyzerConfigsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        workspaceName,
        analyzerConfigName,
        resource,
        options,
      },
      createOrUpdateOperationSpec,
    );
  }

  /**
   * Permanently deletes API analyzer configuration.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceName The name of Azure API Center service.
   * @param workspaceName The name of the workspace.
   * @param analyzerConfigName The name of the configuration.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    serviceName: string,
    workspaceName: string,
    analyzerConfigName: string,
    options?: AnalyzerConfigsDeleteOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        workspaceName,
        analyzerConfigName,
        options,
      },
      deleteOperationSpec,
    );
  }

  /**
   * Exports the API analyzer ruleset.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceName The name of Azure API Center service.
   * @param workspaceName The name of the workspace.
   * @param analyzerConfigName The name of the configuration.
   * @param options The options parameters.
   */
  async beginExportRuleset(
    resourceGroupName: string,
    serviceName: string,
    workspaceName: string,
    analyzerConfigName: string,
    options?: AnalyzerConfigsExportRulesetOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<AnalyzerConfigsExportRulesetResponse>,
      AnalyzerConfigsExportRulesetResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<AnalyzerConfigsExportRulesetResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        serviceName,
        workspaceName,
        analyzerConfigName,
        options,
      },
      spec: exportRulesetOperationSpec,
    });
    const poller = await createHttpPoller<
      AnalyzerConfigsExportRulesetResponse,
      OperationState<AnalyzerConfigsExportRulesetResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Exports the API analyzer ruleset.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceName The name of Azure API Center service.
   * @param workspaceName The name of the workspace.
   * @param analyzerConfigName The name of the configuration.
   * @param options The options parameters.
   */
  async beginExportRulesetAndWait(
    resourceGroupName: string,
    serviceName: string,
    workspaceName: string,
    analyzerConfigName: string,
    options?: AnalyzerConfigsExportRulesetOptionalParams,
  ): Promise<AnalyzerConfigsExportRulesetResponse> {
    const poller = await this.beginExportRuleset(
      resourceGroupName,
      serviceName,
      workspaceName,
      analyzerConfigName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Imports the API analyzer ruleset.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceName The name of Azure API Center service.
   * @param workspaceName The name of the workspace.
   * @param analyzerConfigName The name of the configuration.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginImportRuleset(
    resourceGroupName: string,
    serviceName: string,
    workspaceName: string,
    analyzerConfigName: string,
    body: RulesetImportRequest,
    options?: AnalyzerConfigsImportRulesetOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<AnalyzerConfigsImportRulesetResponse>,
      AnalyzerConfigsImportRulesetResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<AnalyzerConfigsImportRulesetResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        serviceName,
        workspaceName,
        analyzerConfigName,
        body,
        options,
      },
      spec: importRulesetOperationSpec,
    });
    const poller = await createHttpPoller<
      AnalyzerConfigsImportRulesetResponse,
      OperationState<AnalyzerConfigsImportRulesetResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Imports the API analyzer ruleset.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceName The name of Azure API Center service.
   * @param workspaceName The name of the workspace.
   * @param analyzerConfigName The name of the configuration.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginImportRulesetAndWait(
    resourceGroupName: string,
    serviceName: string,
    workspaceName: string,
    analyzerConfigName: string,
    body: RulesetImportRequest,
    options?: AnalyzerConfigsImportRulesetOptionalParams,
  ): Promise<AnalyzerConfigsImportRulesetResponse> {
    const poller = await this.beginImportRuleset(
      resourceGroupName,
      serviceName,
      workspaceName,
      analyzerConfigName,
      body,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * ListNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceName The name of Azure API Center service.
   * @param workspaceName The name of the workspace.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    serviceName: string,
    workspaceName: string,
    nextLink: string,
    options?: AnalyzerConfigsListNextOptionalParams,
  ): Promise<AnalyzerConfigsListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, serviceName, workspaceName, nextLink, options },
      listNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiCenter/services/{serviceName}/workspaces/{workspaceName}/analyzerConfigs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AnalyzerConfigListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.workspaceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiCenter/services/{serviceName}/workspaces/{workspaceName}/analyzerConfigs/{analyzerConfigName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AnalyzerConfig,
      headersMapper: Mappers.AnalyzerConfigsGetHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.workspaceName,
    Parameters.analyzerConfigName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiCenter/services/{serviceName}/workspaces/{workspaceName}/analyzerConfigs/{analyzerConfigName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.AnalyzerConfig,
      headersMapper: Mappers.AnalyzerConfigsCreateOrUpdateHeaders,
    },
    201: {
      bodyMapper: Mappers.AnalyzerConfig,
      headersMapper: Mappers.AnalyzerConfigsCreateOrUpdateHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.resource3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.workspaceName,
    Parameters.analyzerConfigName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiCenter/services/{serviceName}/workspaces/{workspaceName}/analyzerConfigs/{analyzerConfigName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.workspaceName,
    Parameters.analyzerConfigName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const exportRulesetOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiCenter/services/{serviceName}/workspaces/{workspaceName}/analyzerConfigs/{analyzerConfigName}/exportRuleset",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.RulesetExportResult,
    },
    201: {
      bodyMapper: Mappers.RulesetExportResult,
    },
    202: {
      bodyMapper: Mappers.RulesetExportResult,
    },
    204: {
      bodyMapper: Mappers.RulesetExportResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.workspaceName,
    Parameters.analyzerConfigName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const importRulesetOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiCenter/services/{serviceName}/workspaces/{workspaceName}/analyzerConfigs/{analyzerConfigName}/importRuleset",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    201: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    202: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    204: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.workspaceName,
    Parameters.analyzerConfigName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AnalyzerConfigListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.workspaceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
