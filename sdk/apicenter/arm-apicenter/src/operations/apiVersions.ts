/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { ApiVersions } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureAPICenter } from "../azureAPICenter";
import {
  ApiVersion,
  ApiVersionsListByApiNextOptionalParams,
  ApiVersionsListByApiOptionalParams,
  ApiVersionsListByApiResponse,
  ApiVersionsGetOptionalParams,
  ApiVersionsGetResponse,
  ApiVersionsCreateOrUpdateOptionalParams,
  ApiVersionsCreateOrUpdateResponse,
  ApiVersionsDeleteOptionalParams,
  ApiVersionsHeadOptionalParams,
  ApiVersionsHeadResponse,
  ApiVersionsListByApiNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ApiVersions operations. */
export class ApiVersionsImpl implements ApiVersions {
  private readonly client: AzureAPICenter;

  /**
   * Initialize a new instance of the class ApiVersions class.
   * @param client Reference to the service client
   */
  constructor(client: AzureAPICenter) {
    this.client = client;
  }

  /**
   * Returns a collection of API versions.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceName The name of Azure API Center service.
   * @param workspaceName The name of the workspace.
   * @param apiName The name of the API.
   * @param options The options parameters.
   */
  public listByApi(
    resourceGroupName: string,
    serviceName: string,
    workspaceName: string,
    apiName: string,
    options?: ApiVersionsListByApiOptionalParams
  ): PagedAsyncIterableIterator<ApiVersion> {
    const iter = this.listByApiPagingAll(
      resourceGroupName,
      serviceName,
      workspaceName,
      apiName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByApiPagingPage(
          resourceGroupName,
          serviceName,
          workspaceName,
          apiName,
          options,
          settings
        );
      }
    };
  }

  private async *listByApiPagingPage(
    resourceGroupName: string,
    serviceName: string,
    workspaceName: string,
    apiName: string,
    options?: ApiVersionsListByApiOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<ApiVersion[]> {
    let result: ApiVersionsListByApiResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByApi(
        resourceGroupName,
        serviceName,
        workspaceName,
        apiName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByApiNext(
        resourceGroupName,
        serviceName,
        workspaceName,
        apiName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByApiPagingAll(
    resourceGroupName: string,
    serviceName: string,
    workspaceName: string,
    apiName: string,
    options?: ApiVersionsListByApiOptionalParams
  ): AsyncIterableIterator<ApiVersion> {
    for await (const page of this.listByApiPagingPage(
      resourceGroupName,
      serviceName,
      workspaceName,
      apiName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Returns a collection of API versions.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceName The name of Azure API Center service.
   * @param workspaceName The name of the workspace.
   * @param apiName The name of the API.
   * @param options The options parameters.
   */
  private _listByApi(
    resourceGroupName: string,
    serviceName: string,
    workspaceName: string,
    apiName: string,
    options?: ApiVersionsListByApiOptionalParams
  ): Promise<ApiVersionsListByApiResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, serviceName, workspaceName, apiName, options },
      listByApiOperationSpec
    );
  }

  /**
   * Returns details of the API version.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceName The name of Azure API Center service.
   * @param workspaceName The name of the workspace.
   * @param apiName The name of the API.
   * @param versionName The name of the API version.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    serviceName: string,
    workspaceName: string,
    apiName: string,
    versionName: string,
    options?: ApiVersionsGetOptionalParams
  ): Promise<ApiVersionsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        workspaceName,
        apiName,
        versionName,
        options
      },
      getOperationSpec
    );
  }

  /**
   * Creates new or updates existing API version.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceName The name of Azure API Center service.
   * @param workspaceName The name of the workspace.
   * @param apiName The name of the API.
   * @param versionName The name of the API version.
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    serviceName: string,
    workspaceName: string,
    apiName: string,
    versionName: string,
    resource: ApiVersion,
    options?: ApiVersionsCreateOrUpdateOptionalParams
  ): Promise<ApiVersionsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        workspaceName,
        apiName,
        versionName,
        resource,
        options
      },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Deletes specified API version
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceName The name of Azure API Center service.
   * @param workspaceName The name of the workspace.
   * @param apiName The name of the API.
   * @param versionName The name of the API version.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    serviceName: string,
    workspaceName: string,
    apiName: string,
    versionName: string,
    options?: ApiVersionsDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        workspaceName,
        apiName,
        versionName,
        options
      },
      deleteOperationSpec
    );
  }

  /**
   * Checks if specified API version exists.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceName The name of Azure API Center service.
   * @param workspaceName The name of the workspace.
   * @param apiName The name of the API.
   * @param versionName The name of the API version.
   * @param options The options parameters.
   */
  head(
    resourceGroupName: string,
    serviceName: string,
    workspaceName: string,
    apiName: string,
    versionName: string,
    options?: ApiVersionsHeadOptionalParams
  ): Promise<ApiVersionsHeadResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        workspaceName,
        apiName,
        versionName,
        options
      },
      headOperationSpec
    );
  }

  /**
   * ListByApiNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceName The name of Azure API Center service.
   * @param workspaceName The name of the workspace.
   * @param apiName The name of the API.
   * @param nextLink The nextLink from the previous successful call to the ListByApi method.
   * @param options The options parameters.
   */
  private _listByApiNext(
    resourceGroupName: string,
    serviceName: string,
    workspaceName: string,
    apiName: string,
    nextLink: string,
    options?: ApiVersionsListByApiNextOptionalParams
  ): Promise<ApiVersionsListByApiNextResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        workspaceName,
        apiName,
        nextLink,
        options
      },
      listByApiNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByApiOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiCenter/services/{serviceName}/workspaces/{workspaceName}/apis/{apiName}/versions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApiVersionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.workspaceName,
    Parameters.apiName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiCenter/services/{serviceName}/workspaces/{workspaceName}/apis/{apiName}/versions/{versionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApiVersion
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.workspaceName,
    Parameters.apiName,
    Parameters.versionName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiCenter/services/{serviceName}/workspaces/{workspaceName}/apis/{apiName}/versions/{versionName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ApiVersion
    },
    201: {
      bodyMapper: Mappers.ApiVersion
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.resource5,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.workspaceName,
    Parameters.apiName,
    Parameters.versionName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiCenter/services/{serviceName}/workspaces/{workspaceName}/apis/{apiName}/versions/{versionName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.workspaceName,
    Parameters.apiName,
    Parameters.versionName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const headOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiCenter/services/{serviceName}/workspaces/{workspaceName}/apis/{apiName}/versions/{versionName}",
  httpMethod: "HEAD",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.workspaceName,
    Parameters.apiName,
    Parameters.versionName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByApiNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApiVersionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.workspaceName,
    Parameters.apiName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
