/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { ApiDefinitions } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureAPICenter } from "../azureAPICenter";
import {
  ApiDefinition,
  ApiDefinitionsListByApiVersionNextOptionalParams,
  ApiDefinitionsListByApiVersionOptionalParams,
  ApiDefinitionsListByApiVersionResponse,
  ApiDefinitionsGetOptionalParams,
  ApiDefinitionsGetResponse,
  ApiDefinitionsCreateOrUpdateOptionalParams,
  ApiDefinitionsCreateOrUpdateResponse,
  ApiDefinitionsDeleteOptionalParams,
  ApiDefinitionsHeadOptionalParams,
  ApiDefinitionsHeadResponse,
  ApiDefinitionsExportSpecificationOptionalParams,
  ApiDefinitionsExportSpecificationResponse,
  ApiSpecImportRequest,
  ApiDefinitionsImportSpecificationOptionalParams,
  ApiDefinitionsImportSpecificationResponse,
  ApiDefinitionsListByApiVersionNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ApiDefinitions operations. */
export class ApiDefinitionsImpl implements ApiDefinitions {
  private readonly client: AzureAPICenter;

  /**
   * Initialize a new instance of the class ApiDefinitions class.
   * @param client Reference to the service client
   */
  constructor(client: AzureAPICenter) {
    this.client = client;
  }

  /**
   * Returns a collection of API definitions.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceName The name of Azure API Center service.
   * @param workspaceName The name of the workspace.
   * @param apiName The name of the API.
   * @param versionName The name of the API version.
   * @param options The options parameters.
   */
  public listByApiVersion(
    resourceGroupName: string,
    serviceName: string,
    workspaceName: string,
    apiName: string,
    versionName: string,
    options?: ApiDefinitionsListByApiVersionOptionalParams
  ): PagedAsyncIterableIterator<ApiDefinition> {
    const iter = this.listByApiVersionPagingAll(
      resourceGroupName,
      serviceName,
      workspaceName,
      apiName,
      versionName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByApiVersionPagingPage(
          resourceGroupName,
          serviceName,
          workspaceName,
          apiName,
          versionName,
          options,
          settings
        );
      }
    };
  }

  private async *listByApiVersionPagingPage(
    resourceGroupName: string,
    serviceName: string,
    workspaceName: string,
    apiName: string,
    versionName: string,
    options?: ApiDefinitionsListByApiVersionOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<ApiDefinition[]> {
    let result: ApiDefinitionsListByApiVersionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByApiVersion(
        resourceGroupName,
        serviceName,
        workspaceName,
        apiName,
        versionName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByApiVersionNext(
        resourceGroupName,
        serviceName,
        workspaceName,
        apiName,
        versionName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByApiVersionPagingAll(
    resourceGroupName: string,
    serviceName: string,
    workspaceName: string,
    apiName: string,
    versionName: string,
    options?: ApiDefinitionsListByApiVersionOptionalParams
  ): AsyncIterableIterator<ApiDefinition> {
    for await (const page of this.listByApiVersionPagingPage(
      resourceGroupName,
      serviceName,
      workspaceName,
      apiName,
      versionName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Returns a collection of API definitions.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceName The name of Azure API Center service.
   * @param workspaceName The name of the workspace.
   * @param apiName The name of the API.
   * @param versionName The name of the API version.
   * @param options The options parameters.
   */
  private _listByApiVersion(
    resourceGroupName: string,
    serviceName: string,
    workspaceName: string,
    apiName: string,
    versionName: string,
    options?: ApiDefinitionsListByApiVersionOptionalParams
  ): Promise<ApiDefinitionsListByApiVersionResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        workspaceName,
        apiName,
        versionName,
        options
      },
      listByApiVersionOperationSpec
    );
  }

  /**
   * Returns details of the API definition.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceName The name of Azure API Center service.
   * @param workspaceName The name of the workspace.
   * @param apiName The name of the API.
   * @param versionName The name of the API version.
   * @param definitionName The name of the API definition.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    serviceName: string,
    workspaceName: string,
    apiName: string,
    versionName: string,
    definitionName: string,
    options?: ApiDefinitionsGetOptionalParams
  ): Promise<ApiDefinitionsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        workspaceName,
        apiName,
        versionName,
        definitionName,
        options
      },
      getOperationSpec
    );
  }

  /**
   * Creates new or updates existing API definition.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceName The name of Azure API Center service.
   * @param workspaceName The name of the workspace.
   * @param apiName The name of the API.
   * @param versionName The name of the API version.
   * @param definitionName The name of the API definition.
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    serviceName: string,
    workspaceName: string,
    apiName: string,
    versionName: string,
    definitionName: string,
    resource: ApiDefinition,
    options?: ApiDefinitionsCreateOrUpdateOptionalParams
  ): Promise<ApiDefinitionsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        workspaceName,
        apiName,
        versionName,
        definitionName,
        resource,
        options
      },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Deletes specified API definition.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceName The name of Azure API Center service.
   * @param workspaceName The name of the workspace.
   * @param apiName The name of the API.
   * @param versionName The name of the API version.
   * @param definitionName The name of the API definition.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    serviceName: string,
    workspaceName: string,
    apiName: string,
    versionName: string,
    definitionName: string,
    options?: ApiDefinitionsDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        workspaceName,
        apiName,
        versionName,
        definitionName,
        options
      },
      deleteOperationSpec
    );
  }

  /**
   * Checks if specified API definition exists.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceName The name of Azure API Center service.
   * @param workspaceName The name of the workspace.
   * @param apiName The name of the API.
   * @param versionName The name of the API version.
   * @param definitionName The name of the API definition.
   * @param options The options parameters.
   */
  head(
    resourceGroupName: string,
    serviceName: string,
    workspaceName: string,
    apiName: string,
    versionName: string,
    definitionName: string,
    options?: ApiDefinitionsHeadOptionalParams
  ): Promise<ApiDefinitionsHeadResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        workspaceName,
        apiName,
        versionName,
        definitionName,
        options
      },
      headOperationSpec
    );
  }

  /**
   * Exports the API specification.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceName The name of Azure API Center service.
   * @param workspaceName The name of the workspace.
   * @param apiName The name of the API.
   * @param versionName The name of the API version.
   * @param definitionName The name of the API definition.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  exportSpecification(
    resourceGroupName: string,
    serviceName: string,
    workspaceName: string,
    apiName: string,
    versionName: string,
    definitionName: string,
    body: Record<string, unknown>,
    options?: ApiDefinitionsExportSpecificationOptionalParams
  ): Promise<ApiDefinitionsExportSpecificationResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        workspaceName,
        apiName,
        versionName,
        definitionName,
        body,
        options
      },
      exportSpecificationOperationSpec
    );
  }

  /**
   * Imports the API specification.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceName The name of Azure API Center service.
   * @param workspaceName The name of the workspace.
   * @param apiName The name of the API.
   * @param versionName The name of the API version.
   * @param definitionName The name of the API definition.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  importSpecification(
    resourceGroupName: string,
    serviceName: string,
    workspaceName: string,
    apiName: string,
    versionName: string,
    definitionName: string,
    body: ApiSpecImportRequest,
    options?: ApiDefinitionsImportSpecificationOptionalParams
  ): Promise<ApiDefinitionsImportSpecificationResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        workspaceName,
        apiName,
        versionName,
        definitionName,
        body,
        options
      },
      importSpecificationOperationSpec
    );
  }

  /**
   * ListByApiVersionNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceName The name of Azure API Center service.
   * @param workspaceName The name of the workspace.
   * @param apiName The name of the API.
   * @param versionName The name of the API version.
   * @param nextLink The nextLink from the previous successful call to the ListByApiVersion method.
   * @param options The options parameters.
   */
  private _listByApiVersionNext(
    resourceGroupName: string,
    serviceName: string,
    workspaceName: string,
    apiName: string,
    versionName: string,
    nextLink: string,
    options?: ApiDefinitionsListByApiVersionNextOptionalParams
  ): Promise<ApiDefinitionsListByApiVersionNextResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        workspaceName,
        apiName,
        versionName,
        nextLink,
        options
      },
      listByApiVersionNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByApiVersionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiCenter/services/{serviceName}/workspaces/{workspaceName}/apis/{apiName}/versions/{versionName}/definitions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApiDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.workspaceName,
    Parameters.apiName,
    Parameters.versionName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiCenter/services/{serviceName}/workspaces/{workspaceName}/apis/{apiName}/versions/{versionName}/definitions/{definitionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApiDefinition
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.workspaceName,
    Parameters.apiName,
    Parameters.versionName,
    Parameters.definitionName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiCenter/services/{serviceName}/workspaces/{workspaceName}/apis/{apiName}/versions/{versionName}/definitions/{definitionName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ApiDefinition
    },
    201: {
      bodyMapper: Mappers.ApiDefinition
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.resource6,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.workspaceName,
    Parameters.apiName,
    Parameters.versionName,
    Parameters.definitionName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiCenter/services/{serviceName}/workspaces/{workspaceName}/apis/{apiName}/versions/{versionName}/definitions/{definitionName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.workspaceName,
    Parameters.apiName,
    Parameters.versionName,
    Parameters.definitionName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const headOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiCenter/services/{serviceName}/workspaces/{workspaceName}/apis/{apiName}/versions/{versionName}/definitions/{definitionName}",
  httpMethod: "HEAD",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.workspaceName,
    Parameters.apiName,
    Parameters.versionName,
    Parameters.definitionName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const exportSpecificationOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiCenter/services/{serviceName}/workspaces/{workspaceName}/apis/{apiName}/versions/{versionName}/definitions/{definitionName}/exportSpecification",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ApiSpecExportResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.workspaceName,
    Parameters.apiName,
    Parameters.versionName,
    Parameters.definitionName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const importSpecificationOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiCenter/services/{serviceName}/workspaces/{workspaceName}/apis/{apiName}/versions/{versionName}/definitions/{definitionName}/importSpecification",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.workspaceName,
    Parameters.apiName,
    Parameters.versionName,
    Parameters.definitionName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listByApiVersionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApiDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.workspaceName,
    Parameters.apiName,
    Parameters.versionName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
