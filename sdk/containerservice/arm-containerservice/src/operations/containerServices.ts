/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { ContainerServices } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ContainerServiceClient } from "../containerServiceClient";
import {
  ContainerServicesListOrchestratorsOptionalParams,
  ContainerServicesListOrchestratorsResponse
} from "../models";

/** Class containing ContainerServices operations. */
export class ContainerServicesImpl implements ContainerServices {
  private readonly client: ContainerServiceClient;

  /**
   * Initialize a new instance of the class ContainerServices class.
   * @param client Reference to the service client
   */
  constructor(client: ContainerServiceClient) {
    this.client = client;
  }

  /**
   * Gets a list of supported orchestrators in the specified subscription. The operation returns
   * properties of each orchestrator including version, available upgrades and whether that version or
   * upgrades are in preview.
   * @param location The name of Azure region.
   * @param options The options parameters.
   */
  listOrchestrators(
    location: string,
    options?: ContainerServicesListOrchestratorsOptionalParams
  ): Promise<ContainerServicesListOrchestratorsResponse> {
    return this.client.sendOperationRequest(
      { location, options },
      listOrchestratorsOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOrchestratorsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.ContainerService/locations/{location}/orchestrators",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OrchestratorVersionProfileListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.resourceType],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location
  ],
  headerParameters: [Parameters.accept],
  serializer
};
