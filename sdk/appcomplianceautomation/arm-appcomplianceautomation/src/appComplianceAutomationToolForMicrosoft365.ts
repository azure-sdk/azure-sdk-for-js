/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreRestPipeline from "@azure/core-rest-pipeline";
import {
  PipelineRequest,
  PipelineResponse,
  SendRequest,
} from "@azure/core-rest-pipeline";
import * as coreAuth from "@azure/core-auth";
import {
  ProviderActionsImpl,
  OperationsImpl,
  ReportsImpl,
  EvidencesImpl,
  ScopingConfigurationsImpl,
  ScopingConfigurationImpl,
  SnapshotsImpl,
  ReportImpl,
  WebhooksImpl,
} from "./operations";
import {
  ProviderActions,
  Operations,
  Reports,
  Evidences,
  ScopingConfigurations,
  ScopingConfiguration,
  Snapshots,
  Report,
  Webhooks,
} from "./operationsInterfaces";
import * as Parameters from "./models/parameters";
import * as Mappers from "./models/mappers";
import {
  AppComplianceAutomationToolForMicrosoft365OptionalParams,
  GetScopingQuestionsOptionalParams,
  GetScopingQuestionsResponse,
} from "./models";

export class AppComplianceAutomationToolForMicrosoft365 extends coreClient.ServiceClient {
  $host: string;
  apiVersion: string;

  /**
   * Initializes a new instance of the AppComplianceAutomationToolForMicrosoft365 class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param options The parameter options
   */
  constructor(
    credentials: coreAuth.TokenCredential,
    options?: AppComplianceAutomationToolForMicrosoft365OptionalParams,
  ) {
    if (credentials === undefined) {
      throw new Error("'credentials' cannot be null");
    }

    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: AppComplianceAutomationToolForMicrosoft365OptionalParams = {
      requestContentType: "application/json; charset=utf-8",
      credential: credentials,
    };

    const packageDetails = `azsdk-js-arm-appcomplianceautomation/1.0.0`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix,
      },
      endpoint:
        options.endpoint ?? options.baseUri ?? "https://management.azure.com",
    };
    super(optionsWithDefaults);

    let bearerTokenAuthenticationPolicyFound: boolean = false;
    if (options?.pipeline && options.pipeline.getOrderedPolicies().length > 0) {
      const pipelinePolicies: coreRestPipeline.PipelinePolicy[] =
        options.pipeline.getOrderedPolicies();
      bearerTokenAuthenticationPolicyFound = pipelinePolicies.some(
        (pipelinePolicy) =>
          pipelinePolicy.name ===
          coreRestPipeline.bearerTokenAuthenticationPolicyName,
      );
    }
    if (
      !options ||
      !options.pipeline ||
      options.pipeline.getOrderedPolicies().length == 0 ||
      !bearerTokenAuthenticationPolicyFound
    ) {
      this.pipeline.removePolicy({
        name: coreRestPipeline.bearerTokenAuthenticationPolicyName,
      });
      this.pipeline.addPolicy(
        coreRestPipeline.bearerTokenAuthenticationPolicy({
          credential: credentials,
          scopes:
            optionsWithDefaults.credentialScopes ??
            `${optionsWithDefaults.endpoint}/.default`,
          challengeCallbacks: {
            authorizeRequestOnChallenge:
              coreClient.authorizeRequestOnClaimChallenge,
          },
        }),
      );
    }

    // Assigning values to Constant parameters
    this.$host = options.$host || "https://management.azure.com";
    this.apiVersion = options.apiVersion || "2024-06-27";
    this.providerActions = new ProviderActionsImpl(this);
    this.operations = new OperationsImpl(this);
    this.reports = new ReportsImpl(this);
    this.evidences = new EvidencesImpl(this);
    this.scopingConfigurations = new ScopingConfigurationsImpl(this);
    this.scopingConfiguration = new ScopingConfigurationImpl(this);
    this.snapshots = new SnapshotsImpl(this);
    this.report = new ReportImpl(this);
    this.webhooks = new WebhooksImpl(this);
    this.addCustomApiVersionPolicy(options.apiVersion);
  }

  /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
  private addCustomApiVersionPolicy(apiVersion?: string) {
    if (!apiVersion) {
      return;
    }
    const apiVersionPolicy = {
      name: "CustomApiVersionPolicy",
      async sendRequest(
        request: PipelineRequest,
        next: SendRequest,
      ): Promise<PipelineResponse> {
        const param = request.url.split("?");
        if (param.length > 1) {
          const newParams = param[1].split("&").map((item) => {
            if (item.indexOf("api-version") > -1) {
              return "api-version=" + apiVersion;
            } else {
              return item;
            }
          });
          request.url = param[0] + "?" + newParams.join("&");
        }
        return next(request);
      },
    };
    this.pipeline.addPolicy(apiVersionPolicy);
  }

  /**
   * Fix the AppComplianceAutomation report error. e.g: App Compliance Automation Tool service
   * unregistered, automation removed.
   * @param reportName Report Name.
   * @param options The options parameters.
   */
  getScopingQuestions(
    reportName: string,
    options?: GetScopingQuestionsOptionalParams,
  ): Promise<GetScopingQuestionsResponse> {
    return this.sendOperationRequest(
      { reportName, options },
      getScopingQuestionsOperationSpec,
    );
  }

  providerActions: ProviderActions;
  operations: Operations;
  reports: Reports;
  evidences: Evidences;
  scopingConfigurations: ScopingConfigurations;
  scopingConfiguration: ScopingConfiguration;
  snapshots: Snapshots;
  report: Report;
  webhooks: Webhooks;
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getScopingQuestionsOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.AppComplianceAutomation/reports/{reportName}/getScopingQuestions",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ScopingQuestions,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.reportName],
  headerParameters: [Parameters.accept],
  serializer,
};
