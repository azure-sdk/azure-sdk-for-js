/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { ReportResources } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AppComplianceAutomationToolForMicrosoft365 } from "../appComplianceAutomationToolForMicrosoft365";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  ReportResource,
  ReportResourcesListByTenantNextOptionalParams,
  ReportResourcesListByTenantOptionalParams,
  ReportResourcesListByTenantResponse,
  ReportResourcesGetOptionalParams,
  ReportResourcesGetResponse,
  ReportResourcesCreateOrUpdateOptionalParams,
  ReportResourcesCreateOrUpdateResponse,
  ReportResourceUpdate,
  ReportResourcesUpdateOptionalParams,
  ReportResourcesUpdateResponse,
  ReportResourcesDeleteOptionalParams,
  ReportResourcesListByTenantNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ReportResources operations. */
export class ReportResourcesImpl implements ReportResources {
  private readonly client: AppComplianceAutomationToolForMicrosoft365;

  /**
   * Initialize a new instance of the class ReportResources class.
   * @param client Reference to the service client
   */
  constructor(client: AppComplianceAutomationToolForMicrosoft365) {
    this.client = client;
  }

  /**
   * Get the AppComplianceAutomation report list for the tenant.
   * @param options The options parameters.
   */
  public listByTenant(
    options?: ReportResourcesListByTenantOptionalParams
  ): PagedAsyncIterableIterator<ReportResource> {
    const iter = this.listByTenantPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByTenantPagingPage(options, settings);
      }
    };
  }

  private async *listByTenantPagingPage(
    options?: ReportResourcesListByTenantOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<ReportResource[]> {
    let result: ReportResourcesListByTenantResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByTenant(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByTenantNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByTenantPagingAll(
    options?: ReportResourcesListByTenantOptionalParams
  ): AsyncIterableIterator<ReportResource> {
    for await (const page of this.listByTenantPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Get the AppComplianceAutomation report list for the tenant.
   * @param options The options parameters.
   */
  private _listByTenant(
    options?: ReportResourcesListByTenantOptionalParams
  ): Promise<ReportResourcesListByTenantResponse> {
    return this.client.sendOperationRequest(
      { options },
      listByTenantOperationSpec
    );
  }

  /**
   * Get the AppComplianceAutomation report and its properties.
   * @param reportName Report Name.
   * @param options The options parameters.
   */
  get(
    reportName: string,
    options?: ReportResourcesGetOptionalParams
  ): Promise<ReportResourcesGetResponse> {
    return this.client.sendOperationRequest(
      { reportName, options },
      getOperationSpec
    );
  }

  /**
   * Create a new AppComplianceAutomation report or update an exiting AppComplianceAutomation report.
   * @param reportName Report Name.
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    reportName: string,
    resource: ReportResource,
    options?: ReportResourcesCreateOrUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<ReportResourcesCreateOrUpdateResponse>,
      ReportResourcesCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ReportResourcesCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { reportName, resource, options },
      spec: createOrUpdateOperationSpec
    });
    const poller = await createHttpPoller<
      ReportResourcesCreateOrUpdateResponse,
      OperationState<ReportResourcesCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create a new AppComplianceAutomation report or update an exiting AppComplianceAutomation report.
   * @param reportName Report Name.
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    reportName: string,
    resource: ReportResource,
    options?: ReportResourcesCreateOrUpdateOptionalParams
  ): Promise<ReportResourcesCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      reportName,
      resource,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Update an exiting AppComplianceAutomation report.
   * @param reportName Report Name.
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  async beginUpdate(
    reportName: string,
    properties: ReportResourceUpdate,
    options?: ReportResourcesUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<ReportResourcesUpdateResponse>,
      ReportResourcesUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ReportResourcesUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { reportName, properties, options },
      spec: updateOperationSpec
    });
    const poller = await createHttpPoller<
      ReportResourcesUpdateResponse,
      OperationState<ReportResourcesUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Update an exiting AppComplianceAutomation report.
   * @param reportName Report Name.
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    reportName: string,
    properties: ReportResourceUpdate,
    options?: ReportResourcesUpdateOptionalParams
  ): Promise<ReportResourcesUpdateResponse> {
    const poller = await this.beginUpdate(reportName, properties, options);
    return poller.pollUntilDone();
  }

  /**
   * Delete an AppComplianceAutomation report.
   * @param reportName Report Name.
   * @param options The options parameters.
   */
  async beginDelete(
    reportName: string,
    options?: ReportResourcesDeleteOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { reportName, options },
      spec: deleteOperationSpec
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete an AppComplianceAutomation report.
   * @param reportName Report Name.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    reportName: string,
    options?: ReportResourcesDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(reportName, options);
    return poller.pollUntilDone();
  }

  /**
   * ListByTenantNext
   * @param nextLink The nextLink from the previous successful call to the ListByTenant method.
   * @param options The options parameters.
   */
  private _listByTenantNext(
    nextLink: string,
    options?: ReportResourcesListByTenantNextOptionalParams
  ): Promise<ReportResourcesListByTenantNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listByTenantNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByTenantOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.AppComplianceAutomation/reports",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReportResourceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.skipToken,
    Parameters.top,
    Parameters.select,
    Parameters.offerGuid,
    Parameters.reportCreatorTenantId
  ],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.AppComplianceAutomation/reports/{reportName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReportResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.reportName],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.AppComplianceAutomation/reports/{reportName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ReportResource
    },
    201: {
      bodyMapper: Mappers.ReportResource
    },
    202: {
      bodyMapper: Mappers.ReportResource
    },
    204: {
      bodyMapper: Mappers.ReportResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.resource,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.reportName],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.AppComplianceAutomation/reports/{reportName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.ReportResource
    },
    201: {
      bodyMapper: Mappers.ReportResource
    },
    202: {
      bodyMapper: Mappers.ReportResource
    },
    204: {
      bodyMapper: Mappers.ReportResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.properties,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.reportName],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.AppComplianceAutomation/reports/{reportName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.reportName],
  headerParameters: [Parameters.accept],
  serializer
};
const listByTenantNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReportResourceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
