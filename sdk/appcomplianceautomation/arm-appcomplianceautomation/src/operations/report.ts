/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { Report } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AppComplianceAutomationToolForMicrosoft365 } from "../appComplianceAutomationToolForMicrosoft365";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  ReportGetOptionalParams,
  ReportGetResponse,
  ReportResource,
  ReportCreateOrUpdateOptionalParams,
  ReportCreateOrUpdateResponse,
  ReportResourcePatch,
  ReportUpdateOptionalParams,
  ReportUpdateResponse,
  ReportDeleteOptionalParams,
} from "../models";

/** Class containing Report operations. */
export class ReportImpl implements Report {
  private readonly client: AppComplianceAutomationToolForMicrosoft365;

  /**
   * Initialize a new instance of the class Report class.
   * @param client Reference to the service client
   */
  constructor(client: AppComplianceAutomationToolForMicrosoft365) {
    this.client = client;
  }

  /**
   * Get the AppComplianceAutomation report and its properties.
   * @param reportName Report Name.
   * @param options The options parameters.
   */
  get(
    reportName: string,
    options?: ReportGetOptionalParams,
  ): Promise<ReportGetResponse> {
    return this.client.sendOperationRequest(
      { reportName, options },
      getOperationSpec,
    );
  }

  /**
   * Create a new AppComplianceAutomation report or update an exiting AppComplianceAutomation report.
   * @param reportName Report Name.
   * @param parameters Parameters for the create or update operation
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    reportName: string,
    parameters: ReportResource,
    options?: ReportCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ReportCreateOrUpdateResponse>,
      ReportCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ReportCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { reportName, parameters, options },
      spec: createOrUpdateOperationSpec,
    });
    const poller = await createHttpPoller<
      ReportCreateOrUpdateResponse,
      OperationState<ReportCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create a new AppComplianceAutomation report or update an exiting AppComplianceAutomation report.
   * @param reportName Report Name.
   * @param parameters Parameters for the create or update operation
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    reportName: string,
    parameters: ReportResource,
    options?: ReportCreateOrUpdateOptionalParams,
  ): Promise<ReportCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      reportName,
      parameters,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Update an exiting AppComplianceAutomation report.
   * @param reportName Report Name.
   * @param parameters Parameters for the create or update operation
   * @param options The options parameters.
   */
  async beginUpdate(
    reportName: string,
    parameters: ReportResourcePatch,
    options?: ReportUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<OperationState<ReportUpdateResponse>, ReportUpdateResponse>
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ReportUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { reportName, parameters, options },
      spec: updateOperationSpec,
    });
    const poller = await createHttpPoller<
      ReportUpdateResponse,
      OperationState<ReportUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Update an exiting AppComplianceAutomation report.
   * @param reportName Report Name.
   * @param parameters Parameters for the create or update operation
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    reportName: string,
    parameters: ReportResourcePatch,
    options?: ReportUpdateOptionalParams,
  ): Promise<ReportUpdateResponse> {
    const poller = await this.beginUpdate(reportName, parameters, options);
    return poller.pollUntilDone();
  }

  /**
   * Delete an AppComplianceAutomation report.
   * @param reportName Report Name.
   * @param options The options parameters.
   */
  async beginDelete(
    reportName: string,
    options?: ReportDeleteOptionalParams,
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { reportName, options },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete an AppComplianceAutomation report.
   * @param reportName Report Name.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    reportName: string,
    options?: ReportDeleteOptionalParams,
  ): Promise<void> {
    const poller = await this.beginDelete(reportName, options);
    return poller.pollUntilDone();
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.AppComplianceAutomation/reports/{reportName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReportResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.reportName],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.AppComplianceAutomation/reports/{reportName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ReportResource,
    },
    201: {
      bodyMapper: Mappers.ReportResource,
    },
    202: {
      bodyMapper: Mappers.ReportResource,
    },
    204: {
      bodyMapper: Mappers.ReportResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.reportName],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.AppComplianceAutomation/reports/{reportName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.ReportResource,
    },
    201: {
      bodyMapper: Mappers.ReportResource,
    },
    202: {
      bodyMapper: Mappers.ReportResource,
    },
    204: {
      bodyMapper: Mappers.ReportResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.parameters1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.reportName],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.AppComplianceAutomation/reports/{reportName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.reportName],
  headerParameters: [Parameters.accept],
  serializer,
};
