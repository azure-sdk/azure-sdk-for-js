/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { ScopingConfiguration } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AppComplianceAutomationToolForMicrosoft365 } from "../appComplianceAutomationToolForMicrosoft365";
import {
  ScopingConfigurationGetOptionalParams,
  ScopingConfigurationGetResponse,
  ScopingConfigurationResource,
  ScopingConfigurationCreateOrUpdateOptionalParams,
  ScopingConfigurationCreateOrUpdateResponse,
  ScopingConfigurationDeleteOptionalParams,
} from "../models";

/** Class containing ScopingConfiguration operations. */
export class ScopingConfigurationImpl implements ScopingConfiguration {
  private readonly client: AppComplianceAutomationToolForMicrosoft365;

  /**
   * Initialize a new instance of the class ScopingConfiguration class.
   * @param client Reference to the service client
   */
  constructor(client: AppComplianceAutomationToolForMicrosoft365) {
    this.client = client;
  }

  /**
   * Get the AppComplianceAutomation scoping configuration of the specific report.
   * @param reportName Report Name.
   * @param scopingConfigurationName The scoping configuration of the specific report.
   * @param options The options parameters.
   */
  get(
    reportName: string,
    scopingConfigurationName: string,
    options?: ScopingConfigurationGetOptionalParams,
  ): Promise<ScopingConfigurationGetResponse> {
    return this.client.sendOperationRequest(
      { reportName, scopingConfigurationName, options },
      getOperationSpec,
    );
  }

  /**
   * Get the AppComplianceAutomation scoping configuration of the specific report.
   * @param reportName Report Name.
   * @param scopingConfigurationName The scoping configuration of the specific report.
   * @param resource Parameters for the create or update operation, this is a singleton resource, so
   *                 please make sure you're using 'default' as the name.
   * @param options The options parameters.
   */
  createOrUpdate(
    reportName: string,
    scopingConfigurationName: string,
    resource: ScopingConfigurationResource,
    options?: ScopingConfigurationCreateOrUpdateOptionalParams,
  ): Promise<ScopingConfigurationCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { reportName, scopingConfigurationName, resource, options },
      createOrUpdateOperationSpec,
    );
  }

  /**
   * Clean the AppComplianceAutomation scoping configuration of the specific report.
   * @param reportName Report Name.
   * @param scopingConfigurationName The scoping configuration of the specific report.
   * @param options The options parameters.
   */
  delete(
    reportName: string,
    scopingConfigurationName: string,
    options?: ScopingConfigurationDeleteOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { reportName, scopingConfigurationName, options },
      deleteOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.AppComplianceAutomation/reports/{reportName}/scopingConfigurations/{scopingConfigurationName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ScopingConfigurationResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.reportName,
    Parameters.scopingConfigurationName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.AppComplianceAutomation/reports/{reportName}/scopingConfigurations/{scopingConfigurationName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ScopingConfigurationResource,
    },
    201: {
      bodyMapper: Mappers.ScopingConfigurationResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.resource2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.reportName,
    Parameters.scopingConfigurationName,
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.AppComplianceAutomation/reports/{reportName}/scopingConfigurations/{scopingConfigurationName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.reportName,
    Parameters.scopingConfigurationName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
