/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { ScopingConfigurations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AppComplianceAutomationToolForMicrosoft365 } from "../appComplianceAutomationToolForMicrosoft365";
import {
  ScopingConfigurationResource,
  ScopingConfigurationsListNextOptionalParams,
  ScopingConfigurationsListOptionalParams,
  ScopingConfigurationsListResponse,
  ScopingConfigurationsListNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ScopingConfigurations operations. */
export class ScopingConfigurationsImpl implements ScopingConfigurations {
  private readonly client: AppComplianceAutomationToolForMicrosoft365;

  /**
   * Initialize a new instance of the class ScopingConfigurations class.
   * @param client Reference to the service client
   */
  constructor(client: AppComplianceAutomationToolForMicrosoft365) {
    this.client = client;
  }

  /**
   * Returns a list format of the singleton scopingConfiguration for a specified report.
   * @param reportName Report Name.
   * @param options The options parameters.
   */
  public list(
    reportName: string,
    options?: ScopingConfigurationsListOptionalParams,
  ): PagedAsyncIterableIterator<ScopingConfigurationResource> {
    const iter = this.listPagingAll(reportName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(reportName, options, settings);
      },
    };
  }

  private async *listPagingPage(
    reportName: string,
    options?: ScopingConfigurationsListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<ScopingConfigurationResource[]> {
    let result: ScopingConfigurationsListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(reportName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(reportName, continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    reportName: string,
    options?: ScopingConfigurationsListOptionalParams,
  ): AsyncIterableIterator<ScopingConfigurationResource> {
    for await (const page of this.listPagingPage(reportName, options)) {
      yield* page;
    }
  }

  /**
   * Returns a list format of the singleton scopingConfiguration for a specified report.
   * @param reportName Report Name.
   * @param options The options parameters.
   */
  private _list(
    reportName: string,
    options?: ScopingConfigurationsListOptionalParams,
  ): Promise<ScopingConfigurationsListResponse> {
    return this.client.sendOperationRequest(
      { reportName, options },
      listOperationSpec,
    );
  }

  /**
   * ListNext
   * @param reportName Report Name.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    reportName: string,
    nextLink: string,
    options?: ScopingConfigurationsListNextOptionalParams,
  ): Promise<ScopingConfigurationsListNextResponse> {
    return this.client.sendOperationRequest(
      { reportName, nextLink, options },
      listNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.AppComplianceAutomation/reports/{reportName}/scopingConfigurations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ScopingConfigurationResourceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.reportName],
  headerParameters: [Parameters.accept],
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ScopingConfigurationResourceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.reportName],
  headerParameters: [Parameters.accept],
  serializer,
};
