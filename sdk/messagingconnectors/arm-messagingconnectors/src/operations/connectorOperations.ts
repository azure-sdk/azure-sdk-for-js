/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { ConnectorOperations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MicrosoftMessagingConnectorsManagementService } from "../microsoftMessagingConnectorsManagementService";
import {
  ConnectorInstance,
  ConnectorOperationsListBySubscriptionNextOptionalParams,
  ConnectorOperationsListBySubscriptionOptionalParams,
  ConnectorOperationsListBySubscriptionResponse,
  ConnectorOperationsListByResourceGroupNextOptionalParams,
  ConnectorOperationsListByResourceGroupOptionalParams,
  ConnectorOperationsListByResourceGroupResponse,
  ConnectorOperationsGetOptionalParams,
  ConnectorOperationsGetResponse,
  ConnectorOperationsCreateOrUpdateOptionalParams,
  ConnectorOperationsCreateOrUpdateResponse,
  ConnectorInstanceTagsUpdate,
  ConnectorOperationsUpdateTagsOptionalParams,
  ConnectorOperationsUpdateTagsResponse,
  ConnectorOperationsDeleteOptionalParams,
  ConnectorOperationsPauseOptionalParams,
  ConnectorOperationsResumeOptionalParams,
  ConnectorOperationsListBySubscriptionNextResponse,
  ConnectorOperationsListByResourceGroupNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ConnectorOperations operations. */
export class ConnectorOperationsImpl implements ConnectorOperations {
  private readonly client: MicrosoftMessagingConnectorsManagementService;

  /**
   * Initialize a new instance of the class ConnectorOperations class.
   * @param client Reference to the service client
   */
  constructor(client: MicrosoftMessagingConnectorsManagementService) {
    this.client = client;
  }

  /**
   * List Connector By Subscription
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: ConnectorOperationsListBySubscriptionOptionalParams,
  ): PagedAsyncIterableIterator<ConnectorInstance> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionPagingPage(options, settings);
      },
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: ConnectorOperationsListBySubscriptionOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<ConnectorInstance[]> {
    let result: ConnectorOperationsListBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySubscription(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySubscriptionPagingAll(
    options?: ConnectorOperationsListBySubscriptionOptionalParams,
  ): AsyncIterableIterator<ConnectorInstance> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * List Connector By ResourceGroup and Subscription
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: ConnectorOperationsListByResourceGroupOptionalParams,
  ): PagedAsyncIterableIterator<ConnectorInstance> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByResourceGroupPagingPage(
          resourceGroupName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: ConnectorOperationsListByResourceGroupOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<ConnectorInstance[]> {
    let result: ConnectorOperationsListByResourceGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByResourceGroup(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: ConnectorOperationsListByResourceGroupOptionalParams,
  ): AsyncIterableIterator<ConnectorInstance> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List Connector By Subscription
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: ConnectorOperationsListBySubscriptionOptionalParams,
  ): Promise<ConnectorOperationsListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec,
    );
  }

  /**
   * List Connector By ResourceGroup and Subscription
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: ConnectorOperationsListByResourceGroupOptionalParams,
  ): Promise<ConnectorOperationsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec,
    );
  }

  /**
   * Gets an Connector instance for the specified subscription, resource group, and instance name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param name Name of the Connector resource.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    name: string,
    options?: ConnectorOperationsGetOptionalParams,
  ): Promise<ConnectorOperationsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      getOperationSpec,
    );
  }

  /**
   * Create an Connector instance for the specified subscription, resource group, and instance name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param name Name of the Connector resource.
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    name: string,
    resource: ConnectorInstance,
    options?: ConnectorOperationsCreateOrUpdateOptionalParams,
  ): Promise<ConnectorOperationsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, resource, options },
      createOrUpdateOperationSpec,
    );
  }

  /**
   * Update Tags of Connector
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param name Name of the Connector resource.
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  updateTags(
    resourceGroupName: string,
    name: string,
    properties: ConnectorInstanceTagsUpdate,
    options?: ConnectorOperationsUpdateTagsOptionalParams,
  ): Promise<ConnectorOperationsUpdateTagsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, properties, options },
      updateTagsOperationSpec,
    );
  }

  /**
   * Delete an Connector instance for the specified subscription, resource group, and instance name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param name Name of the Connector resource.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    name: string,
    options?: ConnectorOperationsDeleteOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      deleteOperationSpec,
    );
  }

  /**
   * Pause one Connector to paused status
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param name Name of the Connector resource.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  pause(
    resourceGroupName: string,
    name: string,
    body: Record<string, unknown>,
    options?: ConnectorOperationsPauseOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, body, options },
      pauseOperationSpec,
    );
  }

  /**
   * Resume one Connector to running status
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param name Name of the Connector resource.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  resume(
    resourceGroupName: string,
    name: string,
    body: Record<string, unknown>,
    options?: ConnectorOperationsResumeOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, body, options },
      resumeOperationSpec,
    );
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: ConnectorOperationsListBySubscriptionNextOptionalParams,
  ): Promise<ConnectorOperationsListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec,
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: ConnectorOperationsListByResourceGroupNextOptionalParams,
  ): Promise<ConnectorOperationsListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.MessagingConnectors/connectors",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ConnectorInstanceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MessagingConnectors/connectors",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ConnectorInstanceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MessagingConnectors/connectors/{name}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ConnectorInstance,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MessagingConnectors/connectors/{name}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ConnectorInstance,
    },
    201: {
      bodyMapper: Mappers.ConnectorInstance,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.resource,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const updateTagsOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MessagingConnectors/connectors/{name}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.ConnectorInstance,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.properties,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MessagingConnectors/connectors/{name}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const pauseOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MessagingConnectors/connectors/{name}/pause",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const resumeOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MessagingConnectors/connectors/{name}/resume",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ConnectorInstanceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ConnectorInstanceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
