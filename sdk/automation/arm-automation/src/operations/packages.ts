/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { Packages } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AutomationClient } from "../automationClient";
import {
  Package,
  PackagesListByRuntimeEnvironmentNextOptionalParams,
  PackagesListByRuntimeEnvironmentOptionalParams,
  PackagesListByRuntimeEnvironmentResponse,
  PackagesListByRuntimeEnvironmentNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Packages operations. */
export class PackagesImpl implements Packages {
  private readonly client: AutomationClient;

  /**
   * Initialize a new instance of the class Packages class.
   * @param client Reference to the service client
   */
  constructor(client: AutomationClient) {
    this.client = client;
  }

  /**
   * Retrieve the a list of Packages
   * @param resourceGroupName Name of an Azure Resource group.
   * @param automationAccountName The name of the automation account.
   * @param runtimeEnvironmentName The name of the Runtime Environment.
   * @param options The options parameters.
   */
  public listByRuntimeEnvironment(
    resourceGroupName: string,
    automationAccountName: string,
    runtimeEnvironmentName: string,
    options?: PackagesListByRuntimeEnvironmentOptionalParams
  ): PagedAsyncIterableIterator<Package> {
    const iter = this.listByRuntimeEnvironmentPagingAll(
      resourceGroupName,
      automationAccountName,
      runtimeEnvironmentName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByRuntimeEnvironmentPagingPage(
          resourceGroupName,
          automationAccountName,
          runtimeEnvironmentName,
          options,
          settings
        );
      }
    };
  }

  private async *listByRuntimeEnvironmentPagingPage(
    resourceGroupName: string,
    automationAccountName: string,
    runtimeEnvironmentName: string,
    options?: PackagesListByRuntimeEnvironmentOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Package[]> {
    let result: PackagesListByRuntimeEnvironmentResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByRuntimeEnvironment(
        resourceGroupName,
        automationAccountName,
        runtimeEnvironmentName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByRuntimeEnvironmentNext(
        resourceGroupName,
        automationAccountName,
        runtimeEnvironmentName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByRuntimeEnvironmentPagingAll(
    resourceGroupName: string,
    automationAccountName: string,
    runtimeEnvironmentName: string,
    options?: PackagesListByRuntimeEnvironmentOptionalParams
  ): AsyncIterableIterator<Package> {
    for await (const page of this.listByRuntimeEnvironmentPagingPage(
      resourceGroupName,
      automationAccountName,
      runtimeEnvironmentName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Retrieve the a list of Packages
   * @param resourceGroupName Name of an Azure Resource group.
   * @param automationAccountName The name of the automation account.
   * @param runtimeEnvironmentName The name of the Runtime Environment.
   * @param options The options parameters.
   */
  private _listByRuntimeEnvironment(
    resourceGroupName: string,
    automationAccountName: string,
    runtimeEnvironmentName: string,
    options?: PackagesListByRuntimeEnvironmentOptionalParams
  ): Promise<PackagesListByRuntimeEnvironmentResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        automationAccountName,
        runtimeEnvironmentName,
        options
      },
      listByRuntimeEnvironmentOperationSpec
    );
  }

  /**
   * ListByRuntimeEnvironmentNext
   * @param resourceGroupName Name of an Azure Resource group.
   * @param automationAccountName The name of the automation account.
   * @param runtimeEnvironmentName The name of the Runtime Environment.
   * @param nextLink The nextLink from the previous successful call to the ListByRuntimeEnvironment
   *                 method.
   * @param options The options parameters.
   */
  private _listByRuntimeEnvironmentNext(
    resourceGroupName: string,
    automationAccountName: string,
    runtimeEnvironmentName: string,
    nextLink: string,
    options?: PackagesListByRuntimeEnvironmentNextOptionalParams
  ): Promise<PackagesListByRuntimeEnvironmentNextResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        automationAccountName,
        runtimeEnvironmentName,
        nextLink,
        options
      },
      listByRuntimeEnvironmentNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByRuntimeEnvironmentOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/runtimeEnvironments/{runtimeEnvironmentName}/packages",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PackageListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.automationAccountName,
    Parameters.subscriptionId,
    Parameters.runtimeEnvironmentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByRuntimeEnvironmentNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PackageListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.automationAccountName,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.runtimeEnvironmentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
