/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { RuntimeEnvironments } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AutomationClient } from "../automationClient";
import {
  RuntimeEnvironment,
  RuntimeEnvironmentsListByAutomationAccountNextOptionalParams,
  RuntimeEnvironmentsListByAutomationAccountOptionalParams,
  RuntimeEnvironmentsListByAutomationAccountResponse,
  RuntimeEnvironmentUpdateParameters,
  RuntimeEnvironmentsUpdateOptionalParams,
  RuntimeEnvironmentsUpdateResponse,
  RuntimeEnvironmentsCreateOptionalParams,
  RuntimeEnvironmentsCreateResponse,
  RuntimeEnvironmentsDeleteOptionalParams,
  RuntimeEnvironmentsGetOptionalParams,
  RuntimeEnvironmentsGetResponse,
  RuntimeEnvironmentsListByAutomationAccountNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing RuntimeEnvironments operations. */
export class RuntimeEnvironmentsImpl implements RuntimeEnvironments {
  private readonly client: AutomationClient;

  /**
   * Initialize a new instance of the class RuntimeEnvironments class.
   * @param client Reference to the service client
   */
  constructor(client: AutomationClient) {
    this.client = client;
  }

  /**
   * Retrieve a list of RuntimeEnvironments.
   * @param resourceGroupName Name of an Azure Resource group.
   * @param automationAccountName The name of the automation account.
   * @param options The options parameters.
   */
  public listByAutomationAccount(
    resourceGroupName: string,
    automationAccountName: string,
    options?: RuntimeEnvironmentsListByAutomationAccountOptionalParams
  ): PagedAsyncIterableIterator<RuntimeEnvironment> {
    const iter = this.listByAutomationAccountPagingAll(
      resourceGroupName,
      automationAccountName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByAutomationAccountPagingPage(
          resourceGroupName,
          automationAccountName,
          options,
          settings
        );
      }
    };
  }

  private async *listByAutomationAccountPagingPage(
    resourceGroupName: string,
    automationAccountName: string,
    options?: RuntimeEnvironmentsListByAutomationAccountOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<RuntimeEnvironment[]> {
    let result: RuntimeEnvironmentsListByAutomationAccountResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByAutomationAccount(
        resourceGroupName,
        automationAccountName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByAutomationAccountNext(
        resourceGroupName,
        automationAccountName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByAutomationAccountPagingAll(
    resourceGroupName: string,
    automationAccountName: string,
    options?: RuntimeEnvironmentsListByAutomationAccountOptionalParams
  ): AsyncIterableIterator<RuntimeEnvironment> {
    for await (const page of this.listByAutomationAccountPagingPage(
      resourceGroupName,
      automationAccountName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Update an Runtime Environment.
   * @param resourceGroupName Name of an Azure Resource group.
   * @param automationAccountName The name of the automation account.
   * @param runtimeEnvironmentName The name of the Runtime Environment.
   * @param parameters Parameters supplied to the Runtime Environment
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    automationAccountName: string,
    runtimeEnvironmentName: string,
    parameters: RuntimeEnvironmentUpdateParameters,
    options?: RuntimeEnvironmentsUpdateOptionalParams
  ): Promise<RuntimeEnvironmentsUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        automationAccountName,
        runtimeEnvironmentName,
        parameters,
        options
      },
      updateOperationSpec
    );
  }

  /**
   * Create or update Runtime Environment
   * @param resourceGroupName Name of an Azure Resource group.
   * @param automationAccountName The name of the automation account.
   * @param runtimeEnvironmentName The name of the Runtime Environment.
   * @param parameters Parameters supplied to the create  the runtime environment.
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    automationAccountName: string,
    runtimeEnvironmentName: string,
    parameters: RuntimeEnvironment,
    options?: RuntimeEnvironmentsCreateOptionalParams
  ): Promise<RuntimeEnvironmentsCreateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        automationAccountName,
        runtimeEnvironmentName,
        parameters,
        options
      },
      createOperationSpec
    );
  }

  /**
   * Delete the Runtime Environment.
   * @param resourceGroupName Name of an Azure Resource group.
   * @param automationAccountName The name of the automation account.
   * @param runtimeEnvironmentName The name of the Runtime Environment.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    automationAccountName: string,
    runtimeEnvironmentName: string,
    options?: RuntimeEnvironmentsDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        automationAccountName,
        runtimeEnvironmentName,
        options
      },
      deleteOperationSpec
    );
  }

  /**
   * Get information about the Runtime Environment
   * @param resourceGroupName Name of an Azure Resource group.
   * @param automationAccountName The name of the automation account.
   * @param runtimeEnvironmentName The name of the Runtime Environment.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    automationAccountName: string,
    runtimeEnvironmentName: string,
    options?: RuntimeEnvironmentsGetOptionalParams
  ): Promise<RuntimeEnvironmentsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        automationAccountName,
        runtimeEnvironmentName,
        options
      },
      getOperationSpec
    );
  }

  /**
   * Retrieve a list of RuntimeEnvironments.
   * @param resourceGroupName Name of an Azure Resource group.
   * @param automationAccountName The name of the automation account.
   * @param options The options parameters.
   */
  private _listByAutomationAccount(
    resourceGroupName: string,
    automationAccountName: string,
    options?: RuntimeEnvironmentsListByAutomationAccountOptionalParams
  ): Promise<RuntimeEnvironmentsListByAutomationAccountResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, automationAccountName, options },
      listByAutomationAccountOperationSpec
    );
  }

  /**
   * ListByAutomationAccountNext
   * @param resourceGroupName Name of an Azure Resource group.
   * @param automationAccountName The name of the automation account.
   * @param nextLink The nextLink from the previous successful call to the ListByAutomationAccount
   *                 method.
   * @param options The options parameters.
   */
  private _listByAutomationAccountNext(
    resourceGroupName: string,
    automationAccountName: string,
    nextLink: string,
    options?: RuntimeEnvironmentsListByAutomationAccountNextOptionalParams
  ): Promise<RuntimeEnvironmentsListByAutomationAccountNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, automationAccountName, nextLink, options },
      listByAutomationAccountNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/runtimeEnvironments/{runtimeEnvironmentName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.RuntimeEnvironment
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters30,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.automationAccountName,
    Parameters.subscriptionId,
    Parameters.runtimeEnvironmentName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/runtimeEnvironments/{runtimeEnvironmentName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.RuntimeEnvironment
    },
    201: {
      bodyMapper: Mappers.RuntimeEnvironment
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters31,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.automationAccountName,
    Parameters.subscriptionId,
    Parameters.runtimeEnvironmentName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/runtimeEnvironments/{runtimeEnvironmentName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.automationAccountName,
    Parameters.subscriptionId,
    Parameters.runtimeEnvironmentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/runtimeEnvironments/{runtimeEnvironmentName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RuntimeEnvironment
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.automationAccountName,
    Parameters.subscriptionId,
    Parameters.runtimeEnvironmentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByAutomationAccountOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/runtimeEnvironments",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RuntimeEnvironmentListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.automationAccountName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByAutomationAccountNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RuntimeEnvironmentListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.automationAccountName,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
