/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PackageOperations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AutomationClient } from "../automationClient";
import {
  PackageDeleteOptionalParams,
  PackageGetOptionalParams,
  PackageGetResponse,
  PackageCreateOrUpdateParameters,
  PackageCreateOrUpdateOptionalParams,
  PackageCreateOrUpdateResponse,
  PackageUpdateParameters,
  PackageUpdateOptionalParams,
  PackageUpdateResponse
} from "../models";

/** Class containing PackageOperations operations. */
export class PackageOperationsImpl implements PackageOperations {
  private readonly client: AutomationClient;

  /**
   * Initialize a new instance of the class PackageOperations class.
   * @param client Reference to the service client
   */
  constructor(client: AutomationClient) {
    this.client = client;
  }

  /**
   * Delete the package by name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param automationAccountName The name of the automation account.
   * @param runtimeEnvironmentName The name of the Runtime Environment.
   * @param packageName The Package name.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    automationAccountName: string,
    runtimeEnvironmentName: string,
    packageName: string,
    options?: PackageDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        automationAccountName,
        runtimeEnvironmentName,
        packageName,
        options
      },
      deleteOperationSpec
    );
  }

  /**
   * Retrieve the Package identified by Package name.
   * @param resourceGroupName Name of an Azure Resource group.
   * @param automationAccountName The name of the automation account.
   * @param runtimeEnvironmentName The name of the Runtime Environment.
   * @param packageName The Package name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    automationAccountName: string,
    runtimeEnvironmentName: string,
    packageName: string,
    options?: PackageGetOptionalParams
  ): Promise<PackageGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        automationAccountName,
        runtimeEnvironmentName,
        packageName,
        options
      },
      getOperationSpec
    );
  }

  /**
   * Create or update the package identified by package name.
   * @param resourceGroupName Name of an Azure Resource group.
   * @param automationAccountName The name of the automation account.
   * @param runtimeEnvironmentName The name of the Runtime Environment.
   * @param packageName The name of Package.
   * @param parameters The create or update parameters for Package.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    automationAccountName: string,
    runtimeEnvironmentName: string,
    packageName: string,
    parameters: PackageCreateOrUpdateParameters,
    options?: PackageCreateOrUpdateOptionalParams
  ): Promise<PackageCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        automationAccountName,
        runtimeEnvironmentName,
        packageName,
        parameters,
        options
      },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Update the Package identified by Package name.
   * @param resourceGroupName Name of an Azure Resource group.
   * @param automationAccountName The name of the automation account.
   * @param runtimeEnvironmentName The name of the Runtime Environment.
   * @param packageName The name of Package.
   * @param parameters The update parameters for Package.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    automationAccountName: string,
    runtimeEnvironmentName: string,
    packageName: string,
    parameters: PackageUpdateParameters,
    options?: PackageUpdateOptionalParams
  ): Promise<PackageUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        automationAccountName,
        runtimeEnvironmentName,
        packageName,
        parameters,
        options
      },
      updateOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/runtimeEnvironments/{runtimeEnvironmentName}/packages/{packageName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.automationAccountName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName1,
    Parameters.runtimeEnvironmentName,
    Parameters.packageName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/runtimeEnvironments/{runtimeEnvironmentName}/packages/{packageName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Package
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.automationAccountName,
    Parameters.subscriptionId,
    Parameters.runtimeEnvironmentName,
    Parameters.packageName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/runtimeEnvironments/{runtimeEnvironmentName}/packages/{packageName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Package
    },
    201: {
      bodyMapper: Mappers.Package
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters22,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.automationAccountName,
    Parameters.subscriptionId,
    Parameters.runtimeEnvironmentName,
    Parameters.packageName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/runtimeEnvironments/{runtimeEnvironmentName}/packages/{packageName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Package
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters23,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.automationAccountName,
    Parameters.subscriptionId,
    Parameters.runtimeEnvironmentName,
    Parameters.packageName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
