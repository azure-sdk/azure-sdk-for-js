/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { PowerShell72Module } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AutomationClient } from "../automationClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  Module,
  PowerShell72ModuleListByAutomationAccountNextOptionalParams,
  PowerShell72ModuleListByAutomationAccountOptionalParams,
  PowerShell72ModuleListByAutomationAccountResponse,
  PowerShell72ModuleDeleteOptionalParams,
  PowerShell72ModuleGetOptionalParams,
  PowerShell72ModuleGetResponse,
  ModuleCreateOrUpdateParameters,
  PowerShell72ModuleCreateOrUpdateOptionalParams,
  PowerShell72ModuleCreateOrUpdateResponse,
  ModuleUpdateParameters,
  PowerShell72ModuleUpdateOptionalParams,
  PowerShell72ModuleUpdateResponse,
  PowerShell72ModuleListByAutomationAccountNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing PowerShell72Module operations. */
export class PowerShell72ModuleImpl implements PowerShell72Module {
  private readonly client: AutomationClient;

  /**
   * Initialize a new instance of the class PowerShell72Module class.
   * @param client Reference to the service client
   */
  constructor(client: AutomationClient) {
    this.client = client;
  }

  /**
   * Retrieve a list of PowerShell72 modules.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param automationAccountName The name of the automation account.
   * @param options The options parameters.
   */
  public listByAutomationAccount(
    resourceGroupName: string,
    automationAccountName: string,
    options?: PowerShell72ModuleListByAutomationAccountOptionalParams,
  ): PagedAsyncIterableIterator<Module> {
    const iter = this.listByAutomationAccountPagingAll(
      resourceGroupName,
      automationAccountName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByAutomationAccountPagingPage(
          resourceGroupName,
          automationAccountName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByAutomationAccountPagingPage(
    resourceGroupName: string,
    automationAccountName: string,
    options?: PowerShell72ModuleListByAutomationAccountOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<Module[]> {
    let result: PowerShell72ModuleListByAutomationAccountResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByAutomationAccount(
        resourceGroupName,
        automationAccountName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByAutomationAccountNext(
        resourceGroupName,
        automationAccountName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByAutomationAccountPagingAll(
    resourceGroupName: string,
    automationAccountName: string,
    options?: PowerShell72ModuleListByAutomationAccountOptionalParams,
  ): AsyncIterableIterator<Module> {
    for await (const page of this.listByAutomationAccountPagingPage(
      resourceGroupName,
      automationAccountName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Delete the module by name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param automationAccountName The name of the automation account.
   * @param moduleName The name of module.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    automationAccountName: string,
    moduleName: string,
    options?: PowerShell72ModuleDeleteOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, automationAccountName, moduleName, options },
      deleteOperationSpec,
    );
  }

  /**
   * Retrieve the module identified by module name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param automationAccountName The name of the automation account.
   * @param moduleName The name of module.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    automationAccountName: string,
    moduleName: string,
    options?: PowerShell72ModuleGetOptionalParams,
  ): Promise<PowerShell72ModuleGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, automationAccountName, moduleName, options },
      getOperationSpec,
    );
  }

  /**
   * Create or Update the module identified by module name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param automationAccountName The name of the automation account.
   * @param moduleName The name of module.
   * @param parameters The create or update parameters for module.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    automationAccountName: string,
    moduleName: string,
    parameters: ModuleCreateOrUpdateParameters,
    options?: PowerShell72ModuleCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<PowerShell72ModuleCreateOrUpdateResponse>,
      PowerShell72ModuleCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<PowerShell72ModuleCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        automationAccountName,
        moduleName,
        parameters,
        options,
      },
      spec: createOrUpdateOperationSpec,
    });
    const poller = await createHttpPoller<
      PowerShell72ModuleCreateOrUpdateResponse,
      OperationState<PowerShell72ModuleCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create or Update the module identified by module name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param automationAccountName The name of the automation account.
   * @param moduleName The name of module.
   * @param parameters The create or update parameters for module.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    automationAccountName: string,
    moduleName: string,
    parameters: ModuleCreateOrUpdateParameters,
    options?: PowerShell72ModuleCreateOrUpdateOptionalParams,
  ): Promise<PowerShell72ModuleCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      automationAccountName,
      moduleName,
      parameters,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Update the module identified by module name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param automationAccountName The name of the automation account.
   * @param moduleName The name of module.
   * @param parameters The update parameters for module.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    automationAccountName: string,
    moduleName: string,
    parameters: ModuleUpdateParameters,
    options?: PowerShell72ModuleUpdateOptionalParams,
  ): Promise<PowerShell72ModuleUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        automationAccountName,
        moduleName,
        parameters,
        options,
      },
      updateOperationSpec,
    );
  }

  /**
   * Retrieve a list of PowerShell72 modules.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param automationAccountName The name of the automation account.
   * @param options The options parameters.
   */
  private _listByAutomationAccount(
    resourceGroupName: string,
    automationAccountName: string,
    options?: PowerShell72ModuleListByAutomationAccountOptionalParams,
  ): Promise<PowerShell72ModuleListByAutomationAccountResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, automationAccountName, options },
      listByAutomationAccountOperationSpec,
    );
  }

  /**
   * ListByAutomationAccountNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param automationAccountName The name of the automation account.
   * @param nextLink The nextLink from the previous successful call to the ListByAutomationAccount
   *                 method.
   * @param options The options parameters.
   */
  private _listByAutomationAccountNext(
    resourceGroupName: string,
    automationAccountName: string,
    nextLink: string,
    options?: PowerShell72ModuleListByAutomationAccountNextOptionalParams,
  ): Promise<PowerShell72ModuleListByAutomationAccountNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, automationAccountName, nextLink, options },
      listByAutomationAccountNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/powerShell72Modules/{moduleName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion4],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName1,
    Parameters.automationAccountName1,
    Parameters.moduleName1,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/powerShell72Modules/{moduleName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Module,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion4],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName1,
    Parameters.automationAccountName1,
    Parameters.moduleName1,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/powerShell72Modules/{moduleName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Module,
    },
    201: {
      bodyMapper: Mappers.Module,
    },
    202: {
      bodyMapper: Mappers.Module,
    },
    204: {
      bodyMapper: Mappers.Module,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.parameters24,
  queryParameters: [Parameters.apiVersion4],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName1,
    Parameters.automationAccountName1,
    Parameters.moduleName1,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/powerShell72Modules/{moduleName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Module,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.parameters25,
  queryParameters: [Parameters.apiVersion4],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName1,
    Parameters.automationAccountName1,
    Parameters.moduleName1,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const listByAutomationAccountOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/powerShell72Modules",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ModuleListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion4],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName1,
    Parameters.automationAccountName1,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByAutomationAccountNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ModuleListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.resourceGroupName1,
    Parameters.automationAccountName1,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
