/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { WebSitesController } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { AzureMigrateV2 } from "../azureMigrateV2.js";
import {
  WebSite,
  WebSitesControllerListWebSitesNextOptionalParams,
  WebSitesControllerListWebSitesOptionalParams,
  WebSitesControllerListWebSitesResponse,
  WebSitesControllerGetWebSiteOptionalParams,
  WebSitesControllerGetWebSiteResponse,
  WebSitesControllerListWebSitesNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing WebSitesController operations. */
export class WebSitesControllerImpl implements WebSitesController {
  private readonly client: AzureMigrateV2;

  /**
   * Initialize a new instance of the class WebSitesController class.
   * @param client Reference to the service client
   */
  constructor(client: AzureMigrateV2) {
    this.client = client;
  }

  /**
   * Gets a list of websites in the migrate project.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param migrateProjectName Name of the Azure Migrate project.
   * @param options The options parameters.
   */
  public listWebSites(
    resourceGroupName: string,
    migrateProjectName: string,
    options?: WebSitesControllerListWebSitesOptionalParams,
  ): PagedAsyncIterableIterator<WebSite> {
    const iter = this.listWebSitesPagingAll(
      resourceGroupName,
      migrateProjectName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listWebSitesPagingPage(
          resourceGroupName,
          migrateProjectName,
          options,
          settings,
        );
      },
    };
  }

  private async *listWebSitesPagingPage(
    resourceGroupName: string,
    migrateProjectName: string,
    options?: WebSitesControllerListWebSitesOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<WebSite[]> {
    let result: WebSitesControllerListWebSitesResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listWebSites(
        resourceGroupName,
        migrateProjectName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listWebSitesNext(
        resourceGroupName,
        migrateProjectName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listWebSitesPagingAll(
    resourceGroupName: string,
    migrateProjectName: string,
    options?: WebSitesControllerListWebSitesOptionalParams,
  ): AsyncIterableIterator<WebSite> {
    for await (const page of this.listWebSitesPagingPage(
      resourceGroupName,
      migrateProjectName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Gets a list of websites in the migrate project.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param migrateProjectName Name of the Azure Migrate project.
   * @param options The options parameters.
   */
  private _listWebSites(
    resourceGroupName: string,
    migrateProjectName: string,
    options?: WebSitesControllerListWebSitesOptionalParams,
  ): Promise<WebSitesControllerListWebSitesResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, migrateProjectName, options },
      listWebSitesOperationSpec,
    );
  }

  /**
   * Gets a website in the migrate project.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param migrateProjectName Name of the Azure Migrate project.
   * @param webSiteName The ARM name of the website to be fetched.
   * @param options The options parameters.
   */
  getWebSite(
    resourceGroupName: string,
    migrateProjectName: string,
    webSiteName: string,
    options?: WebSitesControllerGetWebSiteOptionalParams,
  ): Promise<WebSitesControllerGetWebSiteResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, migrateProjectName, webSiteName, options },
      getWebSiteOperationSpec,
    );
  }

  /**
   * ListWebSitesNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param migrateProjectName Name of the Azure Migrate project.
   * @param nextLink The nextLink from the previous successful call to the ListWebSites method.
   * @param options The options parameters.
   */
  private _listWebSitesNext(
    resourceGroupName: string,
    migrateProjectName: string,
    nextLink: string,
    options?: WebSitesControllerListWebSitesNextOptionalParams,
  ): Promise<WebSitesControllerListWebSitesNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, migrateProjectName, nextLink, options },
      listWebSitesNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listWebSitesOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/webSites",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WebSiteCollection,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.continuationToken,
    Parameters.pageSize,
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.migrateProjectName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getWebSiteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/webSites/{webSiteName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WebSite,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.migrateProjectName,
    Parameters.webSiteName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listWebSitesNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WebSiteCollection,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.migrateProjectName,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
