/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { EventsController } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureMigrateV2 } from "../azureMigrateV2";
import {
  MigrateEvent,
  EventsControllerListEventsNextOptionalParams,
  EventsControllerListEventsOptionalParams,
  EventsControllerListEventsResponse,
  EventsControllerGetEventOptionalParams,
  EventsControllerGetEventResponse,
  EventsControllerDeleteOptionalParams,
  EventsControllerDeleteResponse,
  EventsControllerListEventsNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing EventsController operations. */
export class EventsControllerImpl implements EventsController {
  private readonly client: AzureMigrateV2;

  /**
   * Initialize a new instance of the class EventsController class.
   * @param client Reference to the service client
   */
  constructor(client: AzureMigrateV2) {
    this.client = client;
  }

  /**
   * Gets a list of events in the migrate project.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param migrateProjectName Name of the Azure Migrate project.
   * @param options The options parameters.
   */
  public listEvents(
    resourceGroupName: string,
    migrateProjectName: string,
    options?: EventsControllerListEventsOptionalParams,
  ): PagedAsyncIterableIterator<MigrateEvent> {
    const iter = this.listEventsPagingAll(
      resourceGroupName,
      migrateProjectName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listEventsPagingPage(
          resourceGroupName,
          migrateProjectName,
          options,
          settings,
        );
      },
    };
  }

  private async *listEventsPagingPage(
    resourceGroupName: string,
    migrateProjectName: string,
    options?: EventsControllerListEventsOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<MigrateEvent[]> {
    let result: EventsControllerListEventsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listEvents(
        resourceGroupName,
        migrateProjectName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listEventsNext(
        resourceGroupName,
        migrateProjectName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listEventsPagingAll(
    resourceGroupName: string,
    migrateProjectName: string,
    options?: EventsControllerListEventsOptionalParams,
  ): AsyncIterableIterator<MigrateEvent> {
    for await (const page of this.listEventsPagingPage(
      resourceGroupName,
      migrateProjectName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Gets a list of events in the migrate project.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param migrateProjectName Name of the Azure Migrate project.
   * @param options The options parameters.
   */
  private _listEvents(
    resourceGroupName: string,
    migrateProjectName: string,
    options?: EventsControllerListEventsOptionalParams,
  ): Promise<EventsControllerListEventsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, migrateProjectName, options },
      listEventsOperationSpec,
    );
  }

  /**
   * Gets an event in the migrate project.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param migrateProjectName Name of the Azure Migrate project.
   * @param eventName Unique name of an event within a migrate project.
   * @param options The options parameters.
   */
  getEvent(
    resourceGroupName: string,
    migrateProjectName: string,
    eventName: string,
    options?: EventsControllerGetEventOptionalParams,
  ): Promise<EventsControllerGetEventResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, migrateProjectName, eventName, options },
      getEventOperationSpec,
    );
  }

  /**
   * Delete the migrate event. Deleting non-existent migrate event is a no-operation.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param migrateProjectName Name of the Azure Migrate project.
   * @param eventName Unique name of an event within a migrate project.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    migrateProjectName: string,
    eventName: string,
    options?: EventsControllerDeleteOptionalParams,
  ): Promise<EventsControllerDeleteResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, migrateProjectName, eventName, options },
      deleteOperationSpec,
    );
  }

  /**
   * ListEventsNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param migrateProjectName Name of the Azure Migrate project.
   * @param nextLink The nextLink from the previous successful call to the ListEvents method.
   * @param options The options parameters.
   */
  private _listEventsNext(
    resourceGroupName: string,
    migrateProjectName: string,
    nextLink: string,
    options?: EventsControllerListEventsNextOptionalParams,
  ): Promise<EventsControllerListEventsNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, migrateProjectName, nextLink, options },
      listEventsNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listEventsOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/migrateEvents",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventCollection,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion, Parameters.continuationToken],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.migrateProjectName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getEventOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/migrateEvents/{eventName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MigrateEvent,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.migrateProjectName,
    Parameters.eventName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/migrateEvents/{eventName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    204: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.migrateProjectName,
    Parameters.eventName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listEventsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventCollection,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.migrateProjectName,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
