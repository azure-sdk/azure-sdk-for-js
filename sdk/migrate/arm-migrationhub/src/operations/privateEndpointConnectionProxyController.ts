/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { PrivateEndpointConnectionProxyController } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { AzureMigrateV2 } from "../azureMigrateV2.js";
import {
  PrivateEndpointConnectionProxy,
  PrivateEndpointConnectionProxyControllerListPrivateEndpointConnectionProxiesNextOptionalParams,
  PrivateEndpointConnectionProxyControllerListPrivateEndpointConnectionProxiesOptionalParams,
  PrivateEndpointConnectionProxyControllerListPrivateEndpointConnectionProxiesResponse,
  PrivateEndpointConnectionProxyControllerGetOptionalParams,
  PrivateEndpointConnectionProxyControllerGetResponse,
  PrivateEndpointConnectionProxyControllerCreateOptionalParams,
  PrivateEndpointConnectionProxyControllerCreateResponse,
  PrivateEndpointConnectionProxyControllerDeleteOptionalParams,
  PrivateEndpointConnectionProxyControllerDeleteResponse,
  PrivateEndpointConnectionProxyControllerValidateOptionalParams,
  PrivateEndpointConnectionProxyControllerValidateResponse,
  PrivateEndpointConnectionProxyControllerListPrivateEndpointConnectionProxiesNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing PrivateEndpointConnectionProxyController operations. */
export class PrivateEndpointConnectionProxyControllerImpl
  implements PrivateEndpointConnectionProxyController
{
  private readonly client: AzureMigrateV2;

  /**
   * Initialize a new instance of the class PrivateEndpointConnectionProxyController class.
   * @param client Reference to the service client
   */
  constructor(client: AzureMigrateV2) {
    this.client = client;
  }

  /**
   * Get all the private endpoint connections proxies under a migrate project.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param migrateProjectName Name of the Azure Migrate project.
   * @param options The options parameters.
   */
  public listPrivateEndpointConnectionProxies(
    resourceGroupName: string,
    migrateProjectName: string,
    options?: PrivateEndpointConnectionProxyControllerListPrivateEndpointConnectionProxiesOptionalParams,
  ): PagedAsyncIterableIterator<PrivateEndpointConnectionProxy> {
    const iter = this.listPrivateEndpointConnectionProxiesPagingAll(
      resourceGroupName,
      migrateProjectName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPrivateEndpointConnectionProxiesPagingPage(
          resourceGroupName,
          migrateProjectName,
          options,
          settings,
        );
      },
    };
  }

  private async *listPrivateEndpointConnectionProxiesPagingPage(
    resourceGroupName: string,
    migrateProjectName: string,
    options?: PrivateEndpointConnectionProxyControllerListPrivateEndpointConnectionProxiesOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<PrivateEndpointConnectionProxy[]> {
    let result: PrivateEndpointConnectionProxyControllerListPrivateEndpointConnectionProxiesResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listPrivateEndpointConnectionProxies(
        resourceGroupName,
        migrateProjectName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listPrivateEndpointConnectionProxiesNext(
        resourceGroupName,
        migrateProjectName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPrivateEndpointConnectionProxiesPagingAll(
    resourceGroupName: string,
    migrateProjectName: string,
    options?: PrivateEndpointConnectionProxyControllerListPrivateEndpointConnectionProxiesOptionalParams,
  ): AsyncIterableIterator<PrivateEndpointConnectionProxy> {
    for await (const page of this.listPrivateEndpointConnectionProxiesPagingPage(
      resourceGroupName,
      migrateProjectName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Get all the private endpoint connections proxies under a migrate project.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param migrateProjectName Name of the Azure Migrate project.
   * @param options The options parameters.
   */
  private _listPrivateEndpointConnectionProxies(
    resourceGroupName: string,
    migrateProjectName: string,
    options?: PrivateEndpointConnectionProxyControllerListPrivateEndpointConnectionProxiesOptionalParams,
  ): Promise<PrivateEndpointConnectionProxyControllerListPrivateEndpointConnectionProxiesResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, migrateProjectName, options },
      listPrivateEndpointConnectionProxiesOperationSpec,
    );
  }

  /**
   * Get the of private link proxy resources from a migrate project and private link proxy resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param migrateProjectName Name of the Azure Migrate project.
   * @param pecProxyName Private link proxy name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    migrateProjectName: string,
    pecProxyName: string,
    options?: PrivateEndpointConnectionProxyControllerGetOptionalParams,
  ): Promise<PrivateEndpointConnectionProxyControllerGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, migrateProjectName, pecProxyName, options },
      getOperationSpec,
    );
  }

  /**
   * Create or update a private endpoint proxy with specified name. If a private endpoint already exists,
   * update it.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param migrateProjectName Name of the Azure Migrate project.
   * @param pecProxyName Private endpoint proxy name.
   * @param body Modify private endpoint proxy state body.
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    migrateProjectName: string,
    pecProxyName: string,
    body: PrivateEndpointConnectionProxy,
    options?: PrivateEndpointConnectionProxyControllerCreateOptionalParams,
  ): Promise<PrivateEndpointConnectionProxyControllerCreateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, migrateProjectName, pecProxyName, body, options },
      createOperationSpec,
    );
  }

  /**
   * Delete the private endpoint proxy. Deleting non-existent private endpoint proxy is a no-operation.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param migrateProjectName Name of the Azure Migrate project.
   * @param pecProxyName Private endpoint proxy name.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    migrateProjectName: string,
    pecProxyName: string,
    options?: PrivateEndpointConnectionProxyControllerDeleteOptionalParams,
  ): Promise<PrivateEndpointConnectionProxyControllerDeleteResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, migrateProjectName, pecProxyName, options },
      deleteOperationSpec,
    );
  }

  /**
   * Validates private endpoint connection using a project and private endpoint connection proxy
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param migrateProjectName Name of the Azure Migrate project.
   * @param pecProxyName Private link proxy name.
   * @param body Validate proxy connection state body.
   * @param options The options parameters.
   */
  validate(
    resourceGroupName: string,
    migrateProjectName: string,
    pecProxyName: string,
    body: PrivateEndpointConnectionProxy,
    options?: PrivateEndpointConnectionProxyControllerValidateOptionalParams,
  ): Promise<PrivateEndpointConnectionProxyControllerValidateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, migrateProjectName, pecProxyName, body, options },
      validateOperationSpec,
    );
  }

  /**
   * ListPrivateEndpointConnectionProxiesNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param migrateProjectName Name of the Azure Migrate project.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListPrivateEndpointConnectionProxies method.
   * @param options The options parameters.
   */
  private _listPrivateEndpointConnectionProxiesNext(
    resourceGroupName: string,
    migrateProjectName: string,
    nextLink: string,
    options?: PrivateEndpointConnectionProxyControllerListPrivateEndpointConnectionProxiesNextOptionalParams,
  ): Promise<PrivateEndpointConnectionProxyControllerListPrivateEndpointConnectionProxiesNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, migrateProjectName, nextLink, options },
      listPrivateEndpointConnectionProxiesNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listPrivateEndpointConnectionProxiesOperationSpec: coreClient.OperationSpec =
  {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/privateEndpointConnectionProxies",
    httpMethod: "GET",
    responses: {
      200: {
        bodyMapper: Mappers.PrivateEndpointConnectionProxyCollection,
      },
      default: {
        bodyMapper: Mappers.ErrorResponse,
      },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
      Parameters.$host,
      Parameters.subscriptionId,
      Parameters.resourceGroupName,
      Parameters.migrateProjectName,
    ],
    headerParameters: [Parameters.accept],
    serializer,
  };
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/privateEndpointConnectionProxies/{pecProxyName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PrivateEndpointConnectionProxy,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.migrateProjectName,
    Parameters.pecProxyName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/privateEndpointConnectionProxies/{pecProxyName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.PrivateEndpointConnectionProxy,
    },
    201: {
      bodyMapper: Mappers.PrivateEndpointConnectionProxy,
      headersMapper:
        Mappers.PrivateEndpointConnectionProxyControllerCreateHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.migrateProjectName,
    Parameters.pecProxyName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/privateEndpointConnectionProxies/{pecProxyName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    204: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.migrateProjectName,
    Parameters.pecProxyName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const validateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/privateEndpointConnectionProxies/{pecProxyName}/validate",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.PrivateEndpointConnectionProxy,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.migrateProjectName,
    Parameters.pecProxyName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const listPrivateEndpointConnectionProxiesNextOperationSpec: coreClient.OperationSpec =
  {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
      200: {
        bodyMapper: Mappers.PrivateEndpointConnectionProxyCollection,
      },
      default: {
        bodyMapper: Mappers.ErrorResponse,
      },
    },
    urlParameters: [
      Parameters.$host,
      Parameters.subscriptionId,
      Parameters.resourceGroupName,
      Parameters.migrateProjectName,
      Parameters.nextLink,
    ],
    headerParameters: [Parameters.accept],
    serializer,
  };
