/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { PrivateEndpointConnectionsController } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { AzureMigrateV2 } from "../azureMigrateV2.js";
import {
  PrivateEndpointConnection,
  PrivateEndpointConnectionsControllerGetPrivateEndpointConnectionsNextOptionalParams,
  PrivateEndpointConnectionsControllerGetPrivateEndpointConnectionsOptionalParams,
  PrivateEndpointConnectionsControllerGetPrivateEndpointConnectionsResponse,
  PrivateEndpointConnectionsControllerGetPrivateEndpointConnectionsNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing PrivateEndpointConnectionsController operations. */
export class PrivateEndpointConnectionsControllerImpl
  implements PrivateEndpointConnectionsController
{
  private readonly client: AzureMigrateV2;

  /**
   * Initialize a new instance of the class PrivateEndpointConnectionsController class.
   * @param client Reference to the service client
   */
  constructor(client: AzureMigrateV2) {
    this.client = client;
  }

  /**
   * Get all the private endpoint connections under a migrate project.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param migrateProjectName Name of the Azure Migrate project.
   * @param options The options parameters.
   */
  public listPrivateEndpointConnections(
    resourceGroupName: string,
    migrateProjectName: string,
    options?: PrivateEndpointConnectionsControllerGetPrivateEndpointConnectionsOptionalParams,
  ): PagedAsyncIterableIterator<PrivateEndpointConnection> {
    const iter = this.getPrivateEndpointConnectionsPagingAll(
      resourceGroupName,
      migrateProjectName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.getPrivateEndpointConnectionsPagingPage(
          resourceGroupName,
          migrateProjectName,
          options,
          settings,
        );
      },
    };
  }

  private async *getPrivateEndpointConnectionsPagingPage(
    resourceGroupName: string,
    migrateProjectName: string,
    options?: PrivateEndpointConnectionsControllerGetPrivateEndpointConnectionsOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<PrivateEndpointConnection[]> {
    let result: PrivateEndpointConnectionsControllerGetPrivateEndpointConnectionsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._getPrivateEndpointConnections(
        resourceGroupName,
        migrateProjectName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._getPrivateEndpointConnectionsNext(
        resourceGroupName,
        migrateProjectName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *getPrivateEndpointConnectionsPagingAll(
    resourceGroupName: string,
    migrateProjectName: string,
    options?: PrivateEndpointConnectionsControllerGetPrivateEndpointConnectionsOptionalParams,
  ): AsyncIterableIterator<PrivateEndpointConnection> {
    for await (const page of this.getPrivateEndpointConnectionsPagingPage(
      resourceGroupName,
      migrateProjectName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Get all the private endpoint connections under a migrate project.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param migrateProjectName Name of the Azure Migrate project.
   * @param options The options parameters.
   */
  private _getPrivateEndpointConnections(
    resourceGroupName: string,
    migrateProjectName: string,
    options?: PrivateEndpointConnectionsControllerGetPrivateEndpointConnectionsOptionalParams,
  ): Promise<PrivateEndpointConnectionsControllerGetPrivateEndpointConnectionsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, migrateProjectName, options },
      getPrivateEndpointConnectionsOperationSpec,
    );
  }

  /**
   * GetPrivateEndpointConnectionsNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param migrateProjectName Name of the Azure Migrate project.
   * @param nextLink The nextLink from the previous successful call to the GetPrivateEndpointConnections
   *                 method.
   * @param options The options parameters.
   */
  private _getPrivateEndpointConnectionsNext(
    resourceGroupName: string,
    migrateProjectName: string,
    nextLink: string,
    options?: PrivateEndpointConnectionsControllerGetPrivateEndpointConnectionsNextOptionalParams,
  ): Promise<PrivateEndpointConnectionsControllerGetPrivateEndpointConnectionsNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, migrateProjectName, nextLink, options },
      getPrivateEndpointConnectionsNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getPrivateEndpointConnectionsOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/privateEndpointConnections",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PrivateEndpointConnectionCollection,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.migrateProjectName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getPrivateEndpointConnectionsNextOperationSpec: coreClient.OperationSpec =
  {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
      200: {
        bodyMapper: Mappers.PrivateEndpointConnectionCollection,
      },
      default: {
        bodyMapper: Mappers.ErrorResponse,
      },
    },
    urlParameters: [
      Parameters.$host,
      Parameters.subscriptionId,
      Parameters.resourceGroupName,
      Parameters.migrateProjectName,
      Parameters.nextLink,
    ],
    headerParameters: [Parameters.accept],
    serializer,
  };
