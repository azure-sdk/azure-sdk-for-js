/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PrivateEndpointConnectionController } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { AzureMigrateV2 } from "../azureMigrateV2.js";
import {
  PrivateEndpointConnectionControllerGetPrivateEndpointConnectionOptionalParams,
  PrivateEndpointConnectionControllerGetPrivateEndpointConnectionResponse,
  PrivateEndpointConnection,
  PrivateEndpointConnectionControllerPutPrivateEndpointConnectionOptionalParams,
  PrivateEndpointConnectionControllerPutPrivateEndpointConnectionResponse,
  PrivateEndpointConnectionControllerDeletePrivateEndpointConnectionOptionalParams,
  PrivateEndpointConnectionControllerDeletePrivateEndpointConnectionResponse,
} from "../models/index.js";

/** Class containing PrivateEndpointConnectionController operations. */
export class PrivateEndpointConnectionControllerImpl
  implements PrivateEndpointConnectionController
{
  private readonly client: AzureMigrateV2;

  /**
   * Initialize a new instance of the class PrivateEndpointConnectionController class.
   * @param client Reference to the service client
   */
  constructor(client: AzureMigrateV2) {
    this.client = client;
  }

  /**
   * Get the private endpoint with the specified name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param migrateProjectName Name of the Azure Migrate project.
   * @param peConnectionName Private endpoint connection name.
   * @param options The options parameters.
   */
  getPrivateEndpointConnection(
    resourceGroupName: string,
    migrateProjectName: string,
    peConnectionName: string,
    options?: PrivateEndpointConnectionControllerGetPrivateEndpointConnectionOptionalParams,
  ): Promise<PrivateEndpointConnectionControllerGetPrivateEndpointConnectionResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, migrateProjectName, peConnectionName, options },
      getPrivateEndpointConnectionOperationSpec,
    );
  }

  /**
   * Create or update a private endpoint with specified name. If a private endpoint already exists,
   * update it.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param migrateProjectName Name of the Azure Migrate project.
   * @param peConnectionName Private endpoint connection name.
   * @param body Private endpoint connection body.
   * @param options The options parameters.
   */
  putPrivateEndpointConnection(
    resourceGroupName: string,
    migrateProjectName: string,
    peConnectionName: string,
    body: PrivateEndpointConnection,
    options?: PrivateEndpointConnectionControllerPutPrivateEndpointConnectionOptionalParams,
  ): Promise<PrivateEndpointConnectionControllerPutPrivateEndpointConnectionResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        migrateProjectName,
        peConnectionName,
        body,
        options,
      },
      putPrivateEndpointConnectionOperationSpec,
    );
  }

  /**
   * Delete the private endpoint. Deleting non-existent private endpoint is a no-operation.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param migrateProjectName Name of the Azure Migrate project.
   * @param peConnectionName Private endpoint connection name.
   * @param options The options parameters.
   */
  deletePrivateEndpointConnection(
    resourceGroupName: string,
    migrateProjectName: string,
    peConnectionName: string,
    options?: PrivateEndpointConnectionControllerDeletePrivateEndpointConnectionOptionalParams,
  ): Promise<PrivateEndpointConnectionControllerDeletePrivateEndpointConnectionResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, migrateProjectName, peConnectionName, options },
      deletePrivateEndpointConnectionOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getPrivateEndpointConnectionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/privateEndpointConnections/{peConnectionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PrivateEndpointConnection,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.migrateProjectName,
    Parameters.peConnectionName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const putPrivateEndpointConnectionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/privateEndpointConnections/{peConnectionName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.PrivateEndpointConnection,
    },
    201: {
      bodyMapper: Mappers.PrivateEndpointConnection,
      headersMapper:
        Mappers.PrivateEndpointConnectionControllerPutPrivateEndpointConnectionHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.migrateProjectName,
    Parameters.peConnectionName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deletePrivateEndpointConnectionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/privateEndpointConnections/{peConnectionName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: { type: { name: "String" } },
    },
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.migrateProjectName,
    Parameters.peConnectionName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
