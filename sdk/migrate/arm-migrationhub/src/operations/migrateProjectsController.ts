/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { MigrateProjectsController } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { AzureMigrateV2 } from "../azureMigrateV2.js";
import {
  RegisterToolInput,
  MigrateProjectsControllerRegisterToolOptionalParams,
  MigrateProjectsControllerRegisterToolResponse,
  RefreshSummaryInput,
  MigrateProjectsControllerRefreshSummaryOptionalParams,
  MigrateProjectsControllerRefreshSummaryResponse,
  MigrateProjectsControllerGetMigrateProjectOptionalParams,
  MigrateProjectsControllerGetMigrateProjectResponse,
  MigrateProject,
  MigrateProjectsControllerPutMigrateProjectOptionalParams,
  MigrateProjectsControllerPutMigrateProjectResponse,
  MigrateProjectsControllerDeleteMigrateProjectOptionalParams,
  MigrateProjectsControllerPatchMigrateProjectOptionalParams,
  MigrateProjectsControllerPatchMigrateProjectResponse,
  RegistrationDetailsInput,
  MigrateProjectsControllerGetToolRegistrationDetailsOptionalParams,
  MigrateProjectsControllerGetToolRegistrationDetailsResponse,
} from "../models/index.js";

/** Class containing MigrateProjectsController operations. */
export class MigrateProjectsControllerImpl
  implements MigrateProjectsController
{
  private readonly client: AzureMigrateV2;

  /**
   * Initialize a new instance of the class MigrateProjectsController class.
   * @param client Reference to the service client
   */
  constructor(client: AzureMigrateV2) {
    this.client = client;
  }

  /**
   * Registers a tool with the migrate project.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param migrateProjectName Name of the Azure Migrate project.
   * @param input Input containing the name of the tool to be registered.
   * @param options The options parameters.
   */
  registerTool(
    resourceGroupName: string,
    migrateProjectName: string,
    input: RegisterToolInput,
    options?: MigrateProjectsControllerRegisterToolOptionalParams,
  ): Promise<MigrateProjectsControllerRegisterToolResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, migrateProjectName, input, options },
      registerToolOperationSpec,
    );
  }

  /**
   * Refresh the summary of the migrate project.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param migrateProjectName Name of the Azure Migrate project.
   * @param input The goal input which needs to be refreshed.
   * @param options The options parameters.
   */
  refreshSummary(
    resourceGroupName: string,
    migrateProjectName: string,
    input: RefreshSummaryInput,
    options?: MigrateProjectsControllerRefreshSummaryOptionalParams,
  ): Promise<MigrateProjectsControllerRefreshSummaryResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, migrateProjectName, input, options },
      refreshSummaryOperationSpec,
    );
  }

  /**
   * Get information related to a specific migrate project. Returns a json object of type
   * 'migrateProject' as specified in the models section.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param migrateProjectName Name of the Azure Migrate project.
   * @param options The options parameters.
   */
  getMigrateProject(
    resourceGroupName: string,
    migrateProjectName: string,
    options?: MigrateProjectsControllerGetMigrateProjectOptionalParams,
  ): Promise<MigrateProjectsControllerGetMigrateProjectResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, migrateProjectName, options },
      getMigrateProjectOperationSpec,
    );
  }

  /**
   * Create or update a new project by sending a json object of type 'migrateproject' as given in Models
   * section as part of the Request Body. The project name is unique.
   *
   * This operation is Idempotent.
   *
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param migrateProjectName Name of the Azure Migrate project.
   * @param body Migrate project body.
   * @param options The options parameters.
   */
  putMigrateProject(
    resourceGroupName: string,
    migrateProjectName: string,
    body: MigrateProject,
    options?: MigrateProjectsControllerPutMigrateProjectOptionalParams,
  ): Promise<MigrateProjectsControllerPutMigrateProjectResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, migrateProjectName, body, options },
      putMigrateProjectOperationSpec,
    );
  }

  /**
   * Delete the migrate project. It deletes summary of the project.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param migrateProjectName Name of the Azure Migrate project.
   * @param options The options parameters.
   */
  deleteMigrateProject(
    resourceGroupName: string,
    migrateProjectName: string,
    options?: MigrateProjectsControllerDeleteMigrateProjectOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, migrateProjectName, options },
      deleteMigrateProjectOperationSpec,
    );
  }

  /**
   * Update a project with specified name. Supports partial updates, for example only tags can be
   * provided.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param migrateProjectName Name of the Azure Migrate project.
   * @param body Migrate project body.
   * @param options The options parameters.
   */
  patchMigrateProject(
    resourceGroupName: string,
    migrateProjectName: string,
    body: MigrateProject,
    options?: MigrateProjectsControllerPatchMigrateProjectOptionalParams,
  ): Promise<MigrateProjectsControllerPatchMigrateProjectResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, migrateProjectName, body, options },
      patchMigrateProjectOperationSpec,
    );
  }

  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param migrateProjectName Name of the Azure Migrate project.
   * @param input
   * @param options The options parameters.
   */
  getToolRegistrationDetails(
    resourceGroupName: string,
    migrateProjectName: string,
    input: RegistrationDetailsInput,
    options?: MigrateProjectsControllerGetToolRegistrationDetailsOptionalParams,
  ): Promise<MigrateProjectsControllerGetToolRegistrationDetailsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, migrateProjectName, input, options },
      getToolRegistrationDetailsOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const registerToolOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/registerTool",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.RegistrationResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.input,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.migrateProjectName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const refreshSummaryOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/refreshSummary",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.RefreshSummaryResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.input1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.migrateProjectName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const getMigrateProjectOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MigrateProject,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.migrateProjectName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const putMigrateProjectOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.MigrateProject,
    },
    201: {
      bodyMapper: Mappers.MigrateProject,
      headersMapper: Mappers.MigrateProjectsControllerPutMigrateProjectHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.migrateProjectName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteMigrateProjectOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.migrateProjectName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const patchMigrateProjectOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.MigrateProject,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.migrateProjectName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const getToolRegistrationDetailsOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/registrationDetails",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.RegistrationDetailsResponse,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.input2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.migrateProjectName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
