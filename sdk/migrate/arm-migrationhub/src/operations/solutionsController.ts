/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { SolutionsController } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureMigrateV2 } from "../azureMigrateV2";
import {
  Solution,
  SolutionsControllerListSolutionsNextOptionalParams,
  SolutionsControllerListSolutionsOptionalParams,
  SolutionsControllerListSolutionsResponse,
  SolutionsControllerGetSolutionOptionalParams,
  SolutionsControllerGetSolutionResponse,
  SolutionsControllerCreateOptionalParams,
  SolutionsControllerCreateResponse,
  SolutionsControllerUpdateOptionalParams,
  SolutionsControllerUpdateResponse,
  SolutionsControllerDeleteSolutionOptionalParams,
  SolutionsControllerDeleteSolutionResponse,
  SolutionsControllerGetConfigOptionalParams,
  SolutionsControllerGetConfigResponse,
  SolutionsControllerCleanupDataOptionalParams,
  SolutionsControllerCleanupDataResponse,
  SolutionsControllerListSolutionsNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing SolutionsController operations. */
export class SolutionsControllerImpl implements SolutionsController {
  private readonly client: AzureMigrateV2;

  /**
   * Initialize a new instance of the class SolutionsController class.
   * @param client Reference to the service client
   */
  constructor(client: AzureMigrateV2) {
    this.client = client;
  }

  /**
   * Gets the list of solutions in the migrate project.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param migrateProjectName Name of the Azure Migrate project.
   * @param options The options parameters.
   */
  public listSolutions(
    resourceGroupName: string,
    migrateProjectName: string,
    options?: SolutionsControllerListSolutionsOptionalParams,
  ): PagedAsyncIterableIterator<Solution> {
    const iter = this.listSolutionsPagingAll(
      resourceGroupName,
      migrateProjectName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listSolutionsPagingPage(
          resourceGroupName,
          migrateProjectName,
          options,
          settings,
        );
      },
    };
  }

  private async *listSolutionsPagingPage(
    resourceGroupName: string,
    migrateProjectName: string,
    options?: SolutionsControllerListSolutionsOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<Solution[]> {
    let result: SolutionsControllerListSolutionsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listSolutions(
        resourceGroupName,
        migrateProjectName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listSolutionsNext(
        resourceGroupName,
        migrateProjectName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listSolutionsPagingAll(
    resourceGroupName: string,
    migrateProjectName: string,
    options?: SolutionsControllerListSolutionsOptionalParams,
  ): AsyncIterableIterator<Solution> {
    for await (const page of this.listSolutionsPagingPage(
      resourceGroupName,
      migrateProjectName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Gets a solution in the migrate project.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param migrateProjectName Name of the Azure Migrate project.
   * @param solutionName Unique name of a migration solution within a migrate project.
   * @param options The options parameters.
   */
  getSolution(
    resourceGroupName: string,
    migrateProjectName: string,
    solutionName: string,
    options?: SolutionsControllerGetSolutionOptionalParams,
  ): Promise<SolutionsControllerGetSolutionResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, migrateProjectName, solutionName, options },
      getSolutionOperationSpec,
    );
  }

  /**
   * Creates a solution in the migrate project.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param migrateProjectName Name of the Azure Migrate project.
   * @param solutionName Unique name of a migration solution within a migrate project.
   * @param solutionInput The input for the solution.
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    migrateProjectName: string,
    solutionName: string,
    solutionInput: Solution,
    options?: SolutionsControllerCreateOptionalParams,
  ): Promise<SolutionsControllerCreateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        migrateProjectName,
        solutionName,
        solutionInput,
        options,
      },
      createOperationSpec,
    );
  }

  /**
   * Update a solution with specified name. Supports partial updates, for example only tags can be
   * provided.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param migrateProjectName Name of the Azure Migrate project.
   * @param solutionName Unique name of a migration solution within a migrate project.
   * @param solutionInput The input for the solution.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    migrateProjectName: string,
    solutionName: string,
    solutionInput: Solution,
    options?: SolutionsControllerUpdateOptionalParams,
  ): Promise<SolutionsControllerUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        migrateProjectName,
        solutionName,
        solutionInput,
        options,
      },
      updateOperationSpec,
    );
  }

  /**
   * Delete the solution. Deleting non-existent project is a no-operation.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param migrateProjectName Name of the Azure Migrate project.
   * @param solutionName Unique name of a migration solution within a migrate project.
   * @param options The options parameters.
   */
  deleteSolution(
    resourceGroupName: string,
    migrateProjectName: string,
    solutionName: string,
    options?: SolutionsControllerDeleteSolutionOptionalParams,
  ): Promise<SolutionsControllerDeleteSolutionResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, migrateProjectName, solutionName, options },
      deleteSolutionOperationSpec,
    );
  }

  /**
   * Gets the list of solutions in the migrate project.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param migrateProjectName Name of the Azure Migrate project.
   * @param options The options parameters.
   */
  private _listSolutions(
    resourceGroupName: string,
    migrateProjectName: string,
    options?: SolutionsControllerListSolutionsOptionalParams,
  ): Promise<SolutionsControllerListSolutionsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, migrateProjectName, options },
      listSolutionsOperationSpec,
    );
  }

  /**
   * Gets the config for the solution in the migrate project.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param migrateProjectName Name of the Azure Migrate project.
   * @param solutionName Unique name of a migration solution within a migrate project.
   * @param options The options parameters.
   */
  getConfig(
    resourceGroupName: string,
    migrateProjectName: string,
    solutionName: string,
    options?: SolutionsControllerGetConfigOptionalParams,
  ): Promise<SolutionsControllerGetConfigResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, migrateProjectName, solutionName, options },
      getConfigOperationSpec,
    );
  }

  /**
   * Cleanup the solution data in the migrate project.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param migrateProjectName Name of the Azure Migrate project.
   * @param solutionName Unique name of a migration solution within a migrate project.
   * @param options The options parameters.
   */
  cleanupData(
    resourceGroupName: string,
    migrateProjectName: string,
    solutionName: string,
    options?: SolutionsControllerCleanupDataOptionalParams,
  ): Promise<SolutionsControllerCleanupDataResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, migrateProjectName, solutionName, options },
      cleanupDataOperationSpec,
    );
  }

  /**
   * ListSolutionsNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param migrateProjectName Name of the Azure Migrate project.
   * @param nextLink The nextLink from the previous successful call to the ListSolutions method.
   * @param options The options parameters.
   */
  private _listSolutionsNext(
    resourceGroupName: string,
    migrateProjectName: string,
    nextLink: string,
    options?: SolutionsControllerListSolutionsNextOptionalParams,
  ): Promise<SolutionsControllerListSolutionsNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, migrateProjectName, nextLink, options },
      listSolutionsNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getSolutionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/solutions/{solutionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Solution,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.migrateProjectName,
    Parameters.solutionName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/solutions/{solutionName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Solution,
    },
    201: {
      bodyMapper: Mappers.Solution,
      headersMapper: Mappers.SolutionsControllerCreateHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.solutionInput,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.migrateProjectName,
    Parameters.solutionName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/solutions/{solutionName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Solution,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.solutionInput,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.migrateProjectName,
    Parameters.solutionName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteSolutionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/solutions/{solutionName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    204: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.migrateProjectName,
    Parameters.solutionName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listSolutionsOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/solutions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SolutionsCollection,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.migrateProjectName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getConfigOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/solutions/{solutionName}/getConfig",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SolutionConfig,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.migrateProjectName,
    Parameters.solutionName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const cleanupDataOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/solutions/{solutionName}/cleanupData",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.migrateProjectName,
    Parameters.solutionName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listSolutionsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SolutionsCollection,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.migrateProjectName,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
