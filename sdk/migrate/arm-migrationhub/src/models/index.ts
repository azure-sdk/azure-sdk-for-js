/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** Collection of database instances. */
export interface DatabaseInstanceCollection {
  /** Gets or sets the database instances. */
  value?: DatabaseInstance[];
  /** Gets or sets the value of nextLink. */
  nextLink?: string;
}

/** DatabaseInstance REST resource. */
export interface DatabaseInstance {
  /** Gets or sets the relative URL to get to this REST resource. */
  id?: string;
  /** Gets or sets the name of this REST resource. */
  name?: string;
  /**
   * Gets the type of this REST resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Gets or sets the properties of the machine. */
  properties?: DatabaseInstanceProperties;
}

/** Properties of the database instance resource. */
export interface DatabaseInstanceProperties {
  /** Gets or sets the assessment details of the database instance published by various sources. */
  discoveryData?: DatabaseInstanceDiscoveryDetails[];
  /** Gets or sets the database instances summary per solution. The key of dictionary is the solution name and value is the corresponding database instance summary object. */
  summary?: { [propertyName: string]: DatabaseInstanceSummary };
  /** Gets or sets the time of the last modification of the database. */
  lastUpdatedTime?: Date;
}

/** Discovery properties that can be shared by various publishers. */
export interface DatabaseInstanceDiscoveryDetails {
  /** Gets or sets the time of the last modification of the database instance details. */
  lastUpdatedTime?: Date;
  /** Gets the relative URL to get to this DatabaseInstanceDiscoveryDetails resource. */
  id?: string;
  /** Gets or sets the database instance Id. */
  instanceId?: string;
  /** Gets or sets the time the message was enqueued. */
  enqueueTime?: string;
  /** Gets or sets the name of the solution that sent the data. */
  solutionName?: string;
  /** Gets or sets the database instance name. */
  instanceName?: string;
  /** Gets or sets the database instance version. */
  instanceVersion?: string;
  /** Gets or sets the database instance type. */
  instanceType?: string;
  /** Gets or sets the host name of the database server. */
  hostName?: string;
  /** Gets or sets the IP addresses of the database server. IP addresses could be IP V4 or IP V6. */
  ipAddress?: string;
  /** Gets or sets the port number of the database server. */
  portNumber?: number;
  /** Gets or sets the extended properties of the database server. */
  extendedInfo?: { [propertyName: string]: string };
}

/** Class representing the database instance summary object. */
export interface DatabaseInstanceSummary {
  /** Gets or sets the count of databases assessed. */
  databasesAssessedCount?: number;
  /** Gets or sets the count of databases ready for migration. */
  migrationReadyCount?: number;
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export interface ErrorResponse {
  /** The error object. */
  error?: ErrorDetail;
}

/** The error detail. */
export interface ErrorDetail {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDetail[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
}

/** Collection of databases. */
export interface DatabaseCollection {
  /** Gets or sets the databases. */
  value?: Database[];
  /** Gets or sets the value of nextLink. */
  nextLink?: string;
}

/** Database REST resource. */
export interface Database {
  /** Gets or sets the relative URL to get to this REST resource. */
  id?: string;
  /** Gets or sets the name of this REST resource. */
  name?: string;
  /**
   * Gets the type of this REST resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Gets or sets the properties of the database. */
  properties?: DatabaseProperties;
}

/** Properties of the database resource. */
export interface DatabaseProperties {
  /** Gets or sets the assessment details of the database published by various sources. */
  assessmentData?: DatabaseAssessmentDetails[];
  /** Gets or sets the time of the last modification of the database. */
  lastUpdatedTime?: Date;
}

/** Assessment properties that can be shared by various publishers. */
export interface DatabaseAssessmentDetails {
  /** Gets or sets the database assessment scope/Id. */
  assessmentId?: string;
  /** Gets the relative URL to get to this DatabaseAssessmentDetails resource. */
  id?: string;
  /** Gets or sets the number of blocking changes found. */
  migrationBlockersCount?: number;
  /** Gets or sets the number of breaking changes found. */
  breakingChangesCount?: number;
  /** Gets or sets a value indicating whether the database is ready for migration. */
  isReadyForMigration?: boolean;
  /** Gets or sets the assessed target database type. */
  assessmentTargetType?: string;
  /** Gets or sets the time when the database was last assessed. */
  lastAssessedTime?: Date;
  /** Gets or sets the compatibility level of the database. */
  compatibilityLevel?: string;
  /** Gets or sets the database size. */
  databaseSizeInMB?: string;
  /** Gets or sets the time of the last modification of the database details. */
  lastUpdatedTime?: Date;
  /** Gets or sets the time the message was enqueued. */
  enqueueTime?: string;
  /** Gets or sets the name of the solution that sent the data. */
  solutionName?: string;
  /** Gets or sets the database server instance Id. */
  instanceId?: string;
  /** Gets or sets the database name. */
  databaseName?: string;
  /** Gets or sets the extended properties of the database. */
  extendedInfo?: { [propertyName: string]: string };
}

/** Collection of events. */
export interface EventCollection {
  /** Gets or sets the machines. */
  value?: MigrateEvent[];
  /** Gets or sets the value of nextLink. */
  nextLink?: string;
}

/** MigrateEvent REST resource. */
export interface MigrateEvent {
  /** Gets or sets the relative URL to get to this REST resource. */
  id?: string;
  /** Gets or sets the name of this REST resource. */
  name?: string;
  /**
   * Gets the type of this REST resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Gets or sets the properties of the event. */
  properties?: MigrateEventProperties;
}

/** Properties of the error resource. */
export interface MigrateEventProperties {
  /**
   * Gets the Instance type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly instanceType?: string;
  /** Gets or sets the error code. */
  errorCode?: string;
  /** Gets or sets the error message. */
  errorMessage?: string;
  /** Gets or sets the recommendation for the error. */
  recommendation?: string;
  /** Gets or sets the possible causes for the error. */
  possibleCauses?: string;
  /** Gets or sets the solution for which the error is being reported. */
  solution?: string;
  /** Gets or sets the client request Id of the payload for which the event is being reported. */
  clientRequestId?: string;
}

/** Collection of machines. */
export interface MachineCollection {
  /** Gets or sets the machines. */
  value?: Machine[];
  /** Gets or sets the value of nextLink. */
  nextLink?: string;
}

/** Machine REST resource. */
export interface Machine {
  /** Gets or sets the relative URL to get to this REST resource. */
  id?: string;
  /** Gets or sets the name of this REST resource. */
  name?: string;
  /**
   * Gets the type of this REST resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Gets or sets the properties of the machine. */
  properties?: MachineProperties;
}

/** Properties of the machine resource. */
export interface MachineProperties {
  /** Gets or sets the discovery details of the machine published by various sources. */
  discoveryData?: DiscoveryDetails[];
  /** Gets or sets the assessment details of the machine published by various sources. */
  assessmentData?: AssessmentDetails[];
  /** Gets or sets the migration details of the machine published by various sources. */
  migrationData?: MigrationDetails[];
  /** Gets or sets the time of the last modification of the machine. */
  lastUpdatedTime?: Date;
}

/** Discovery properties that can be published by various ISVs. */
export interface DiscoveryDetails {
  /** Gets the relative URL to get to this DiscoveryDetails resource. */
  id?: string;
  /** Gets or sets the OS type. */
  osType?: string;
  /** Gets or sets the OS name. */
  osName?: string;
  /** Gets or sets the OS version. */
  osVersion?: string;
  /** Gets or sets the time the message was enqueued. */
  enqueueTime?: string;
  /** Gets or sets the name of the solution that sent the data. */
  solutionName?: string;
  /** Gets or sets the unique identifier of the machine. */
  machineId?: string;
  /** Gets or sets the unique identifier of the virtual machine manager(vCenter/VMM). */
  machineManagerId?: string;
  /** Gets or sets the fabric type. */
  fabricType?: string;
  /** Gets or sets the time of the last modification of the machine details. */
  lastUpdatedTime?: Date;
  /** Gets or sets the name of the machine. */
  machineName?: string;
  /** Gets or sets the list of IP addresses of the machine. IP addresses could be IP V4 or IP V6. */
  ipAddresses?: string[];
  /** Gets or sets the FQDN of the machine. */
  fqdn?: string;
  /** Gets or sets the BIOS ID of the machine. */
  biosId?: string;
  /** Gets or sets the list of MAC addresses of the machine. */
  macAddresses?: string[];
  /** Gets or sets the ISV specific extended information. */
  extendedInfo?: { [propertyName: string]: string };
}

/** Assessment properties that can be shared by various publishers. */
export interface AssessmentDetails {
  /** Gets the relative URL to get to this AssessmentDetails resource. */
  id?: string;
  /** Gets or sets the id of the assessment done on the machine. */
  assessmentId?: string;
  /** Gets or sets the target VM size. */
  targetVMSize?: string;
  /** Gets or sets the target VM location. */
  targetVMLocation?: string;
  /** Gets or sets the target storage type. */
  targetStorageType?: { [propertyName: string]: string };
  /** Gets or sets the time the message was enqueued. */
  enqueueTime?: string;
  /** Gets or sets the name of the solution that sent the data. */
  solutionName?: string;
  /** Gets or sets the unique identifier of the machine. */
  machineId?: string;
  /** Gets or sets the unique identifier of the virtual machine manager(vCenter/VMM). */
  machineManagerId?: string;
  /** Gets or sets the fabric type. */
  fabricType?: string;
  /** Gets or sets the time of the last modification of the machine details. */
  lastUpdatedTime?: Date;
  /** Gets or sets the name of the machine. */
  machineName?: string;
  /** Gets or sets the list of IP addresses of the machine. IP addresses could be IP V4 or IP V6. */
  ipAddresses?: string[];
  /** Gets or sets the FQDN of the machine. */
  fqdn?: string;
  /** Gets or sets the BIOS ID of the machine. */
  biosId?: string;
  /** Gets or sets the list of MAC addresses of the machine. */
  macAddresses?: string[];
  /** Gets or sets the ISV specific extended information. */
  extendedInfo?: { [propertyName: string]: string };
}

/** Migration properties that can be shared by various publishers. */
export interface MigrationDetails {
  /** Gets the relative URL to get to this MigrationDetails resource. */
  id?: string;
  /** Gets or sets the phase of migration of the machine. */
  migrationPhase?: string;
  /** Gets or sets a value indicating whether migration was tested on the machine. */
  migrationTested?: boolean;
  /** Gets or sets the progress percentage of migration on the machine. */
  replicationProgressPercentage?: number;
  /** Gets or sets the ARM id the migrated VM. */
  targetVMArmId?: string;
  /** Gets or sets the time the message was enqueued. */
  enqueueTime?: string;
  /** Gets or sets the name of the solution that sent the data. */
  solutionName?: string;
  /** Gets or sets the unique identifier of the machine. */
  machineId?: string;
  /** Gets or sets the unique identifier of the virtual machine manager(vCenter/VMM). */
  machineManagerId?: string;
  /** Gets or sets the fabric type. */
  fabricType?: string;
  /** Gets or sets the time of the last modification of the machine details. */
  lastUpdatedTime?: Date;
  /** Gets or sets the name of the machine. */
  machineName?: string;
  /** Gets or sets the list of IP addresses of the machine. IP addresses could be IP V4 or IP V6. */
  ipAddresses?: string[];
  /** Gets or sets the FQDN of the machine. */
  fqdn?: string;
  /** Gets or sets the BIOS ID of the machine. */
  biosId?: string;
  /** Gets or sets the list of MAC addresses of the machine. */
  macAddresses?: string[];
  /** Gets or sets the ISV specific extended information. */
  extendedInfo?: { [propertyName: string]: string };
}

/** Class representing the register tool input. */
export interface RegisterToolInput {
  /** Gets or sets the tool to be registered. */
  tool?: Tool;
}

/** Class representing the registration status of a tool with the migrate project. */
export interface RegistrationResult {
  /** Gets or sets a value indicating whether the tool is registered or not. */
  isRegistered?: boolean;
}

/** Class representing the refresh summary input. */
export interface RefreshSummaryInput {
  /** Gets or sets the goal for which summary needs to be refreshed. */
  goal?: Goal;
}

/** Class representing the refresh summary status of the migrate project. */
export interface RefreshSummaryResult {
  /** Gets or sets a value indicating whether the migrate project summary is refreshed. */
  isRefreshed?: boolean;
}

/** Solution REST Resource. */
export interface Solution {
  /**
   * Gets the relative URL to get to this REST resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Gets the name of this REST resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Gets the type of this REST resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Gets or sets the ETAG for optimistic concurrency control. */
  etag?: string;
  /** Gets or sets the properties of the solution. */
  properties?: SolutionProperties;
}

/** Class for solution properties. */
export interface SolutionProperties {
  /** Gets or sets the tool being used in the solution. */
  tool?: Tool;
  /** Gets or sets the purpose of the solution. */
  purpose?: Purpose;
  /** Gets or sets the goal of the solution. */
  goal?: Goal;
  /** Gets or sets the current status of the solution. */
  status?: Status;
  /** Gets or sets the cleanup state of the solution. */
  cleanupState?: CleanupState;
  /** Gets or sets the summary of the solution. */
  summary?: SolutionSummary;
  /** Gets or sets the details of the solution. */
  details?: SolutionDetails;
}

/** The solution summary class. */
export interface SolutionSummary {
  /**
   * Gets the Instance type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly instanceType?: string;
}

/** Class representing the details of the solution. */
export interface SolutionDetails {
  /** Gets or sets the count of groups reported by the solution. */
  groupCount?: number;
  /** Gets or sets the count of assessments reported by the solution. */
  assessmentCount?: number;
  /** Gets or sets the extended details reported by the solution. */
  extendedDetails?: { [propertyName: string]: string };
}

/** Collection of solutions. */
export interface SolutionsCollection {
  /** Gets or sets the list of solutions. */
  value?: Solution[];
  /** Gets or sets the value of next link. */
  nextLink?: string;
}

/** Class representing the config for the solution in the migrate project. */
export interface SolutionConfig {
  /** Gets or sets the publisher sas uri for the solution. */
  publisherSasUri?: string;
}

/** Collection of virtual desktop users. */
export interface VirtualDesktopUserCollection {
  value?: VirtualDesktopUser[];
  nextLink?: string;
}

/** Class representing virtual desktop user. */
export interface VirtualDesktopUser {
  id?: string;
  name?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly type?: string;
  /** Properties of class representing virtual desktop user. */
  properties?: VirtualDesktopUserProperties;
}

/** Properties of class representing virtual desktop user. */
export interface VirtualDesktopUserProperties {
  assessmentData?: VirtualDesktopUserAssessmentDetails[];
  lastUpdatedTime?: Date;
}

/** Details of assessment data of virtual desktop user. */
export interface VirtualDesktopUserAssessmentDetails {
  lastUpdatedTime?: Date;
  userId?: string;
  /** Gets the relative URL to get to this VirtualDesktopUserAssessmentDetails resource. */
  id?: string;
  enqueueTime?: string;
  solutionName?: string;
  userName?: string;
  userAccount?: string;
  country?: string;
  state?: string;
  city?: string;
  devicesUsed?: string[];
  virtualization?: string;
  totalApplicationsCount?: number;
  criticalApplications?: string[];
  osUsed?: string[];
  multiUserWindows10?: boolean;
  windows7?: boolean;
  persona?: string;
  assessmentId?: string;
  targetLocation?: string;
  isReadyForMigration?: boolean;
  targetAzureVmSize?: string;
  targetStorageType?: string;
  activeWeeklyHours?: number;
  userExperienceScore?: number;
  egressBandwidthWeekly?: number;
  /** Dictionary of <string> */
  extendedInfo?: { [propertyName: string]: string };
}

/** Collection of web servers. */
export interface WebServerCollection {
  value?: WebServer[];
  nextLink?: string;
}

/** Class representing a web server. */
export interface WebServer {
  id?: string;
  name?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly type?: string;
  /** Properties of class representing web server. */
  properties?: WebServerProperties;
}

/** Properties of class representing web server. */
export interface WebServerProperties {
  discoveryData?: WebServerDiscoveryDetails[];
  /** Dictionary of <WebServerSummary> */
  summary?: { [propertyName: string]: WebServerSummary };
  lastUpdatedTime?: Date;
}

/** Details of discovery data of web server. */
export interface WebServerDiscoveryDetails {
  /** Gets the relative URL to get to this WebServerDiscoveryDetails resource. */
  id?: string;
  osName?: string;
  osVersion?: string;
  cpuCores?: number;
  memoryInMb?: string;
  webServerType?: string;
  webServerVersion?: string;
  portList?: number[];
  lastUpdatedTime?: Date;
  enqueueTime?: string;
  solutionName?: string;
  webServerId?: string;
  webServerName?: string;
  /** Dictionary of <string> */
  extendedInfo?: { [propertyName: string]: string };
}

/** Summary of information representing web server. */
export interface WebServerSummary {
  discoveredCount?: number;
  assessedCount?: number;
  readyForMigration?: number;
  migratingCount?: number;
  migratedCount?: number;
}

/** Collection of web sites. */
export interface WebSiteCollection {
  value?: WebSite[];
  nextLink?: string;
}

/** Class representing a web site. */
export interface WebSite {
  id?: string;
  name?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly type?: string;
  /** Properties of class representing web site. */
  properties?: WebSiteProperties;
}

/** Properties of class representing web site. */
export interface WebSiteProperties {
  discoveryData?: WebSiteDiscoveryDetails[];
  assessmentData?: WebSiteAssessmentDetails[];
  migrationData?: WebSiteMigrationDetails[];
  lastUpdatedTime?: Date;
}

/** Details of discovery data of web site. */
export interface WebSiteDiscoveryDetails {
  lastUpdatedTime?: Date;
  /** Gets the relative URL to get to this WebSiteDiscoveryDetails resource. */
  id?: string;
  webServerId?: string;
  webServerType?: string;
  webSiteName?: string;
  enqueueTime?: string;
  solutionName?: string;
  port?: number;
  /** Dictionary of <string> */
  extendedInfo?: { [propertyName: string]: string };
}

/** Details of assessment data of web site. */
export interface WebSiteAssessmentDetails {
  assessmentId?: string;
  /** Gets the relative URL to get to this WebSiteAssessmentDetails resource. */
  id?: string;
  isReadyForMigration?: boolean;
  assessmentTargetType?: string;
  migrationBlockersCount?: number;
  successList?: string[];
  warningList?: string[];
  errorList?: string[];
  framework?: string;
  frameworkVersion?: string;
  lastUpdatedTime?: Date;
  webServerId?: string;
  webServerType?: string;
  webSiteName?: string;
  enqueueTime?: string;
  solutionName?: string;
  port?: number;
  /** Dictionary of <string> */
  extendedInfo?: { [propertyName: string]: string };
}

/** Details of migration data of web site. */
export interface WebSiteMigrationDetails {
  /** Gets the relative URL to get to this WebSiteMigrationDetails resource. */
  id?: string;
  migrationPhase?: string;
  progressPercentage?: number;
  targetAppServiceArmId?: string;
  lastUpdatedTime?: Date;
  webServerId?: string;
  webServerType?: string;
  webSiteName?: string;
  enqueueTime?: string;
  solutionName?: string;
  port?: number;
  /** Dictionary of <string> */
  extendedInfo?: { [propertyName: string]: string };
}

/** List of projects. */
export interface ProjectResultList {
  /** List of projects. */
  value?: MigrateProject[];
  nextLink?: string;
}

/** Migrate project. */
export interface MigrateProject {
  /** Properties of a migrate project. */
  properties?: MigrateProjectProperties;
  /** For optimistic concurrency control. */
  eTag?: string;
  /** Azure location in which project is created. */
  location?: string;
  /**
   * Path reference to this project /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{projectName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Name of the project.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Type of the object = [Microsoft.Migrate/migrateProjects].
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** Properties of a migrate project. */
export interface MigrateProjectProperties {
  /**
   * Register tools inside project.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly registeredTools?: Items[];
  /** Service endpoint. */
  serviceEndpoint?: string;
  /**
   * Project summary.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly summary?: { [propertyName: string]: ProjectSummary };
  /**
   * Last summary refresh time.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastSummaryRefreshedTime?: Date;
  /**
   * Refresh summary state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly refreshSummaryState?: RefreshSummaryState;
  /** Utility storage account id. */
  utilityStorageAccountId?: string;
  /** Gets or sets the state of public network access. */
  publicNetworkAccess?: PublicNetworkAccess;
  /**
   * Gets the private endpoint connections.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly privateEndpointConnections?: PrivateEndpointConnection[];
}

/** Project summary. */
export interface ProjectSummary {
  /**
   * Instance type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly instanceType?: string;
  /** Refresh summary state. */
  refreshSummaryState?: RefreshSummaryState;
  /** Last summary refresh time. */
  lastSummaryRefreshedTime?: Date;
  /** Extended summary. */
  extendedSummary?: { [propertyName: string]: string };
}

/** REST model used to encapsulate the user visible state of a PrivateEndpoint. */
export interface PrivateEndpointConnection {
  /**
   * Relative URL to get this Sites.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Gets the name of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Gets the resource type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Gets the tag for optimistic concurrency control.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly eTag?: string;
  /** Gets the properties of the object. */
  properties?: PrivateEndpointConnectionProperties;
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** Properties of a private endpoint connection. */
export interface PrivateEndpointConnectionProperties {
  /**
   * Provisioning state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Defines resource ID of a private endpoint connection.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly privateEndpoint?: ResourceId;
  /** Gets the properties of the object. */
  privateLinkServiceConnectionState?: PrivateLinkServiceConnectionState;
}

/** Defines resource ID of a private endpoint connection. */
export interface ResourceId {
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly id?: string;
}

/** Private endpoint connection state. */
export interface PrivateLinkServiceConnectionState {
  /** Private link connection state. */
  status?: PrivateLinkServiceConnectionStateStatus;
  /** Description of the object. */
  description?: string;
  /** Action required. */
  actionsRequired?: string;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The timestamp of resource last modification (UTC) */
  lastModifiedAt?: Date;
}

export interface RegistrationDetailsInput {
  /** Gets or sets the tool to be registered. */
  tool?: Tool;
  applicationDetails?: AadAppDetails;
}

export interface AadAppDetails {
  tenantId?: string;
  applicationId?: string;
}

export interface RegistrationDetailsResponse {
  serviceEndpoint?: string;
  oneTimeKey?: string;
}

/** Collection of PrivateLink resources. */
export interface PrivateEndpointConnectionCollection {
  /**
   * Gets the list of machines.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: PrivateEndpointConnection[];
  /**
   * Gets the value of next link.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Collection of PrivateLink proxy resources. */
export interface PrivateEndpointConnectionProxyCollection {
  /**
   * Gets the list of PrivateLink proxy resources.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: PrivateEndpointConnectionProxy[];
  /**
   * Gets the value of next link.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Defines Private endpoint proxy resource. */
export interface PrivateEndpointConnectionProxy {
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly id?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly name?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly type?: string;
  eTag?: string;
  /** Properties of a private endpoint connection proxy. */
  properties?: PrivateEndpointConnectionProxyProperties;
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** Properties of a private endpoint connection proxy. */
export interface PrivateEndpointConnectionProxyProperties {
  /**
   * Defines Private endpoint additional details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly remotePrivateEndpoint?: PrivateEndpointDetails;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly status?: PrivateEndpointConnectionProxyPropertiesStatus;
}

/** Defines Private endpoint additional details. */
export interface PrivateEndpointDetails {
  id?: string;
  manualPrivateLinkServiceConnections?: PrivateLinkServiceConnection[];
  privateLinkServiceConnections?: PrivateLinkServiceConnection[];
  privateLinkServiceProxies?: PrivateLinkServiceProxy[];
  connectionDetails?: IpConfiguration[];
}

/** Defines Private link service connection. */
export interface PrivateLinkServiceConnection {
  id?: string;
  name?: string;
  groupIds?: string[];
  requestMessage?: string;
}

/** Defines Private link service proxy. */
export interface PrivateLinkServiceProxy {
  id?: string;
  groupConnectivityInformation?: GroupConnectivityInformation[];
  /** Defines resource ID of a private endpoint connection. */
  remotePrivateEndpointConnection?: ResourceId;
  /** Private endpoint connection state. */
  remotePrivateLinkServiceConnectionState?: PrivateLinkServiceConnectionState;
}

/** Defines Private link service group connectivity. */
export interface GroupConnectivityInformation {
  id?: string;
  groupId?: string;
  memberName?: string;
  customerVisibleFqdns?: string[];
  internalFqdn?: string;
  redirectMapId?: string;
  privateLinkServiceArmRegion?: string;
}

/** Defines Private link IP configuration. */
export interface IpConfiguration {
  id?: string;
  privateIpAddress?: string;
  linkIdentifier?: string;
  groupId?: string;
  memberName?: string;
}

/** Private link resource. */
export interface PrivateLinkResource {
  /**
   * Relative URL to get this Sites.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Gets the name of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Gets the resource type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Gets nested properties.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly properties?: PrivateLinkResourceProperties;
}

/** Properties of private link resource. */
export interface PrivateLinkResourceProperties {
  /** Required members. */
  requiredMembers?: string[];
  /** Required zone names. */
  requiredZoneNames?: string[];
  /** Group id. */
  groupId?: string;
}

/** Collection of private link resources. */
export interface PrivateLinkResourceCollection {
  /**
   * List of private links.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: PrivateLinkResource[];
  /**
   * Value of next link.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of results. */
export interface OperationListResult {
  /**
   * List of operations supported by the resource provider
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Operation[];
  /**
   * URL to get the next set of operation list results (if there are any).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Details of a REST API operation, returned from the Resource Provider Operations API */
export interface Operation {
  /**
   * The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for ARM/control-plane operations.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isDataAction?: boolean;
  /** Localized display information for this particular operation. */
  display?: OperationDisplay;
  /**
   * The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is "user,system"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly origin?: Origin;
  /**
   * Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly actionType?: ActionType;
}

/** Localized display information for this particular operation. */
export interface OperationDisplay {
  /**
   * The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft Compute".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provider?: string;
  /**
   * The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job Schedule Collections".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resource?: string;
  /**
   * The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operation?: string;
  /**
   * The short, localized friendly description of the operation; suitable for tool tips and detailed views.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
}

/** OData Query options. */
export interface ODataQueryOptions1 {
  /**
   * Filter query option providing validator and filterClause
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly filter?: FilterQueryOption;
}

/** Filter query option providing validator and filterClause */
export interface FilterQueryOption {
  /**
   * Query options context
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly context?: ODataQueryContext;
  /** Filter query validator. */
  validator?: Record<string, unknown>;
  /**
   * Filter clause expression.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly filterClause?: FilterClause;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly rawValue?: string;
}

/** Query options context */
export interface ODataQueryContext {
  /**
   * Provides default query settings.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly defaultQuerySettings?: DefaultQuerySettings;
  /**
   * Defines EDM model properties.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly model?: IEdmModel;
  /**
   * Defines EDM type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly elementType?: IEdmType;
  /**
   * Defines EDM navigation using path, type and name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly navigationSource?: IEdmNavigationSource;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly elementClrType?: string;
  /**
   * Defines OData path.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly path?: ODataPath;
  /**
   * Service provider value.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly requestContainer?: Record<string, unknown>;
}

/** Provides default query settings. */
export interface DefaultQuerySettings {
  enableExpand?: boolean;
  enableSelect?: boolean;
  enableCount?: boolean;
  enableOrderBy?: boolean;
  enableFilter?: boolean;
  maxTop?: number;
}

/** Defines EDM model properties. */
export interface IEdmModel {
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly schemaElements?: IEdmSchemaElement[];
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly vocabularyAnnotations?: IEdmVocabularyAnnotation[];
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly referencedModels?: IEdmModel[];
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly declaredNamespaces?: string[];
  /**
   * EDM vocabulary annotations manager.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly directValueAnnotationsManager?: Record<string, unknown>;
  /**
   * EDM entity elements.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly entityContainer?: IEdmEntityContainer;
}

/** EDM Schema element. */
export interface IEdmSchemaElement {
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly schemaElementKind?: SchemaElementKind;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly namespace?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly name?: string;
}

/** EDM vocabulary annotations. */
export interface IEdmVocabularyAnnotation {
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly qualifier?: string;
  /**
   * EDM term.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly term?: IEdmTerm;
  /**
   * EDM vocabulary annotatable type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: Record<string, unknown>;
  /**
   * EDM expression.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: IEdmExpression;
}

/** EDM term. */
export interface IEdmTerm {
  /**
   * EDM type reference.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: IEdmTypeReference;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly appliesTo?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly defaultValue?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly schemaElementKind?: SchemaElementKind;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly namespace?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly name?: string;
}

/** EDM type reference. */
export interface IEdmTypeReference {
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly isNullable?: boolean;
  /**
   * Defines EDM type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly definition?: IEdmType;
}

/** Defines EDM type. */
export interface IEdmType {
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly typeKind?: TypeKind;
}

/** EDM expression. */
export interface IEdmExpression {
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly expressionKind?: ExpressionKind;
}

/** EDM entity elements. */
export interface IEdmEntityContainer {
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly elements?: IEdmEntityContainerElement[];
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly schemaElementKind?: SchemaElementKind;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly namespace?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly name?: string;
}

/** EDM entity container. */
export interface IEdmEntityContainerElement {
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly containerElementKind?: ContainerElementKind;
  /**
   * EDM entity elements.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly container?: IEdmEntityContainer;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly name?: string;
}

/** Defines EDM navigation using path, type and name. */
export interface IEdmNavigationSource {
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly navigationPropertyBindings?: IEdmNavigationPropertyBinding[];
  /**
   * EDM path expression definition.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly path?: IEdmPathExpression;
  /**
   * Defines EDM type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: IEdmType;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly name?: string;
}

/** EDM navigation properties. */
export interface IEdmNavigationPropertyBinding {
  /**
   * Defines EDM navigation property.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly navigationProperty?: IEdmNavigationProperty;
  /**
   * Defines EDM navigation using path, type and name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: IEdmNavigationSource;
  /**
   * EDM path expression definition.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly path?: IEdmPathExpression;
}

/** Defines EDM navigation property. */
export interface IEdmNavigationProperty {
  /**
   * Defines EDM navigation property.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly partner?: IEdmNavigationProperty;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly onDelete?: OnDelete;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly containsTarget?: boolean;
  /**
   * EDM constraint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly referentialConstraint?: IEdmReferentialConstraint;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly propertyKind?: PropertyKind;
  /**
   * EDM type reference.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: IEdmTypeReference;
  /**
   * EDM structured type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly declaringType?: IEdmStructuredType;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly name?: string;
}

/** EDM constraint. */
export interface IEdmReferentialConstraint {
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly propertyPairs?: EdmReferentialConstraintPropertyPair[];
}

/** EDM property constraint pair. */
export interface EdmReferentialConstraintPropertyPair {
  /**
   * EDM structural property.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly dependentProperty?: IEdmStructuralProperty;
  /**
   * EDM structural property.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalProperty?: IEdmStructuralProperty;
}

/** EDM structural property. */
export interface IEdmStructuralProperty {
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly defaultValueString?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly propertyKind?: PropertyKind;
  /**
   * EDM type reference.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: IEdmTypeReference;
  /**
   * EDM structured type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly declaringType?: IEdmStructuredType;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly name?: string;
}

/** EDM structured type. */
export interface IEdmStructuredType {
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly isAbstract?: boolean;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly isOpen?: boolean;
  /**
   * EDM structured type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly baseType?: IEdmStructuredType;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly declaredProperties?: IEdmProperty[];
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly typeKind?: TypeKind;
}

/** EDM property. */
export interface IEdmProperty {
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly propertyKind?: PropertyKind;
  /**
   * EDM type reference.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: IEdmTypeReference;
  /**
   * EDM structured type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly declaringType?: IEdmStructuredType;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly name?: string;
}

/** EDM path expression definition. */
export interface IEdmPathExpression {
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly pathSegments?: string[];
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly path?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly expressionKind?: ExpressionKind;
}

/** Defines OData path. */
export interface ODataPath {
  /**
   * Defines EDM type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly edmType?: IEdmType;
  /**
   * Defines EDM navigation using path, type and name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly navigationSource?: IEdmNavigationSource;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly segments?: ODataPathSegment[];
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly pathTemplate?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly path?: ODataPathSegment[];
}

/** OData path segment. */
export interface ODataPathSegment {
  /**
   * Defines EDM type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly edmType?: IEdmType;
  identifier?: string;
}

/** Filter clause expression. */
export interface FilterClause {
  /**
   * Single value node type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly expression?: SingleValueNode;
  /**
   * Defines variable of kind range.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly rangeVariable?: RangeVariable;
  /**
   * EDM type reference.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly itemType?: IEdmTypeReference;
}

/** Single value node type. */
export interface SingleValueNode {
  /**
   * EDM type reference.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly typeReference?: IEdmTypeReference;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly kind?: SingleValueNodeKind;
}

/** Defines variable of kind range. */
export interface RangeVariable {
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly name?: string;
  /**
   * EDM type reference.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly typeReference?: IEdmTypeReference;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly kind?: number;
}

/** Query options for raw queries. */
export interface ODataRawQueryOptions {
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly filter?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly apply?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly orderBy?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly top?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly skip?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly select?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly expand?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly count?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly format?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly skipToken?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly deltaToken?: string;
}

/** Select expand clause. */
export interface SelectExpandClause {
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly selectedItems?: Record<string, unknown>[];
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly allSelected?: boolean;
}

/** Apply transformations clause. */
export interface ApplyClause {
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly transformations?: TransformationNode[];
}

/** Transformation node type. */
export interface TransformationNode {
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly kind?: TransformationNodeKind;
}

/** Properties of the machine error resource. */
export interface MachineMigrateEventProperties extends MigrateEventProperties {
  /** Gets or sets the machine for which the error is being reported. */
  machine?: string;
}

/** Properties of the database error resource. */
export interface DatabaseMigrateEventProperties extends MigrateEventProperties {
  /** Gets or sets the database for which the error is being reported. */
  database?: string;
  /** Gets or sets the database instance for which the error is being reported. */
  databaseInstanceId?: string;
}

/** Class representing the servers solution summary. */
export interface ServersSolutionSummary extends SolutionSummary {
  /** Gets or sets the count of servers discovered. */
  discoveredCount?: number;
  /** Gets or sets the count of servers assessed. */
  assessedCount?: number;
  /** Gets or sets the count of servers being replicated. */
  replicatingCount?: number;
  /** Gets or sets the count of servers test migrated. */
  testMigratedCount?: number;
  /** Gets or sets the count of servers migrated. */
  migratedCount?: number;
}

/** Class representing the databases solution summary. */
export interface DatabasesSolutionSummary extends SolutionSummary {
  /** Gets or sets the count of databases assessed. */
  databasesAssessedCount?: number;
  /** Gets or sets the count of database instances assessed. */
  databaseInstancesAssessedCount?: number;
  /** Gets or sets the count of databases ready for migration. */
  migrationReadyCount?: number;
}

/** Class representing the servers project summary. */
export interface ServersProjectSummary extends ProjectSummary {
  /** Gets or sets the count of entities discovered. */
  discoveredCount?: number;
  /** Gets or sets the count of entities assessed. */
  assessedCount?: number;
  /** Gets or sets the count of entities being replicated. */
  replicatingCount?: number;
  /** Gets or sets the count of entities test migrated. */
  testMigratedCount?: number;
  /** Gets or sets the count of entities migrated. */
  migratedCount?: number;
}

/** The database project summary class. */
export interface DatabaseProjectSummary extends ProjectSummary {}

/** Defines headers for MigrateProjectsController_putMigrateProject operation. */
export interface MigrateProjectsControllerPutMigrateProjectHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for SolutionsController_create operation. */
export interface SolutionsControllerCreateHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Projects_listBySubscription operation. */
export interface ProjectsListBySubscriptionHeaders {
  /** Service generated Request ID. */
  xMsRequestId?: string;
}

/** Defines headers for Projects_list operation. */
export interface ProjectsListHeaders {
  /** Service generated Request ID. */
  xMsRequestId?: string;
}

/** Defines headers for Projects_listBySubscriptionNext operation. */
export interface ProjectsListBySubscriptionNextHeaders {
  /** Service generated Request ID. */
  xMsRequestId?: string;
}

/** Defines headers for Projects_listNext operation. */
export interface ProjectsListNextHeaders {
  /** Service generated Request ID. */
  xMsRequestId?: string;
}

/** Defines headers for PrivateEndpointConnectionController_putPrivateEndpointConnection operation. */
export interface PrivateEndpointConnectionControllerPutPrivateEndpointConnectionHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for PrivateEndpointConnectionProxyController_create operation. */
export interface PrivateEndpointConnectionProxyControllerCreateHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Known values of {@link Tool} that the service accepts. */
export enum KnownTool {
  /** ServerDiscovery */
  ServerDiscovery = "ServerDiscovery",
  /** ServerAssessment */
  ServerAssessment = "ServerAssessment",
  /** ServerMigration */
  ServerMigration = "ServerMigration",
  /** Cloudamize */
  Cloudamize = "Cloudamize",
  /** Turbonomic */
  Turbonomic = "Turbonomic",
  /** Zerto */
  Zerto = "Zerto",
  /** CorentTech */
  CorentTech = "CorentTech",
  /** ServerAssessmentV1 */
  ServerAssessmentV1 = "ServerAssessmentV1",
  /** ServerMigrationReplication */
  ServerMigrationReplication = "ServerMigration_Replication",
  /** Carbonite */
  Carbonite = "Carbonite",
  /** DataMigrationAssistant */
  DataMigrationAssistant = "DataMigrationAssistant",
  /** DatabaseMigrationService */
  DatabaseMigrationService = "DatabaseMigrationService",
  /** Device42 */
  Device42 = "Device42",
  /** JetStream */
  JetStream = "JetStream",
  /** RackWare */
  RackWare = "RackWare",
  /** UnifyCloud */
  UnifyCloud = "UnifyCloud",
  /** Flexera */
  Flexera = "Flexera",
  /** ServerDiscoveryImport */
  ServerDiscoveryImport = "ServerDiscovery_Import",
  /** Lakeside */
  Lakeside = "Lakeside",
  /** AppServiceMigrationAssistant */
  AppServiceMigrationAssistant = "AppServiceMigrationAssistant",
  /** Movere */
  Movere = "Movere",
  /** CloudSphere */
  CloudSphere = "CloudSphere",
  /** Modernization */
  Modernization = "Modernization",
  /** ServerMigrationDataReplication */
  ServerMigrationDataReplication = "ServerMigration_DataReplication",
  /** Unknown */
  Unknown = "Unknown",
}

/**
 * Defines values for Tool. \
 * {@link KnownTool} can be used interchangeably with Tool,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ServerDiscovery** \
 * **ServerAssessment** \
 * **ServerMigration** \
 * **Cloudamize** \
 * **Turbonomic** \
 * **Zerto** \
 * **CorentTech** \
 * **ServerAssessmentV1** \
 * **ServerMigration_Replication** \
 * **Carbonite** \
 * **DataMigrationAssistant** \
 * **DatabaseMigrationService** \
 * **Device42** \
 * **JetStream** \
 * **RackWare** \
 * **UnifyCloud** \
 * **Flexera** \
 * **ServerDiscovery_Import** \
 * **Lakeside** \
 * **AppServiceMigrationAssistant** \
 * **Movere** \
 * **CloudSphere** \
 * **Modernization** \
 * **ServerMigration_DataReplication** \
 * **Unknown**
 */
export type Tool = string;

/** Known values of {@link Goal} that the service accepts. */
export enum KnownGoal {
  /** Servers */
  Servers = "Servers",
  /** Databases */
  Databases = "Databases",
  /** DesktopVirtualization */
  DesktopVirtualization = "DesktopVirtualization",
  /** WebApplications */
  WebApplications = "WebApplications",
  /** DataCenter */
  DataCenter = "DataCenter",
}

/**
 * Defines values for Goal. \
 * {@link KnownGoal} can be used interchangeably with Goal,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Servers** \
 * **Databases** \
 * **DesktopVirtualization** \
 * **WebApplications** \
 * **DataCenter**
 */
export type Goal = string;

/** Known values of {@link Purpose} that the service accepts. */
export enum KnownPurpose {
  /** Discovery */
  Discovery = "Discovery",
  /** Assessment */
  Assessment = "Assessment",
  /** Migration */
  Migration = "Migration",
}

/**
 * Defines values for Purpose. \
 * {@link KnownPurpose} can be used interchangeably with Purpose,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Discovery** \
 * **Assessment** \
 * **Migration**
 */
export type Purpose = string;

/** Known values of {@link Status} that the service accepts. */
export enum KnownStatus {
  /** Inactive */
  Inactive = "Inactive",
  /** Active */
  Active = "Active",
}

/**
 * Defines values for Status. \
 * {@link KnownStatus} can be used interchangeably with Status,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Inactive** \
 * **Active**
 */
export type Status = string;

/** Known values of {@link CleanupState} that the service accepts. */
export enum KnownCleanupState {
  /** None */
  None = "None",
  /** Started */
  Started = "Started",
  /** InProgress */
  InProgress = "InProgress",
  /** Completed */
  Completed = "Completed",
  /** Failed */
  Failed = "Failed",
}

/**
 * Defines values for CleanupState. \
 * {@link KnownCleanupState} can be used interchangeably with CleanupState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Started** \
 * **InProgress** \
 * **Completed** \
 * **Failed**
 */
export type CleanupState = string;

/** Known values of {@link Items} that the service accepts. */
export enum KnownItems {
  /** ServerDiscovery */
  ServerDiscovery = "ServerDiscovery",
  /** ServerAssessment */
  ServerAssessment = "ServerAssessment",
  /** ServerMigration */
  ServerMigration = "ServerMigration",
  /** Cloudamize */
  Cloudamize = "Cloudamize",
  /** Turbonomic */
  Turbonomic = "Turbonomic",
  /** Zerto */
  Zerto = "Zerto",
  /** CorentTech */
  CorentTech = "CorentTech",
  /** ServerAssessmentV1 */
  ServerAssessmentV1 = "ServerAssessmentV1",
  /** ServerMigrationReplication */
  ServerMigrationReplication = "ServerMigration_Replication",
  /** Carbonite */
  Carbonite = "Carbonite",
  /** DataMigrationAssistant */
  DataMigrationAssistant = "DataMigrationAssistant",
  /** DatabaseMigrationService */
  DatabaseMigrationService = "DatabaseMigrationService",
  /** Device42 */
  Device42 = "Device42",
  /** JetStream */
  JetStream = "JetStream",
  /** RackWare */
  RackWare = "RackWare",
  /** UnifyCloud */
  UnifyCloud = "UnifyCloud",
  /** Flexera */
  Flexera = "Flexera",
  /** ServerDiscoveryImport */
  ServerDiscoveryImport = "ServerDiscovery_Import",
  /** Lakeside */
  Lakeside = "Lakeside",
  /** AppServiceMigrationAssistant */
  AppServiceMigrationAssistant = "AppServiceMigrationAssistant",
  /** Movere */
  Movere = "Movere",
  /** CloudSphere */
  CloudSphere = "CloudSphere",
  /** Modernization */
  Modernization = "Modernization",
  /** ServerMigrationDataReplication */
  ServerMigrationDataReplication = "ServerMigration_DataReplication",
  /** Unknown */
  Unknown = "Unknown",
}

/**
 * Defines values for Items. \
 * {@link KnownItems} can be used interchangeably with Items,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ServerDiscovery** \
 * **ServerAssessment** \
 * **ServerMigration** \
 * **Cloudamize** \
 * **Turbonomic** \
 * **Zerto** \
 * **CorentTech** \
 * **ServerAssessmentV1** \
 * **ServerMigration_Replication** \
 * **Carbonite** \
 * **DataMigrationAssistant** \
 * **DatabaseMigrationService** \
 * **Device42** \
 * **JetStream** \
 * **RackWare** \
 * **UnifyCloud** \
 * **Flexera** \
 * **ServerDiscovery_Import** \
 * **Lakeside** \
 * **AppServiceMigrationAssistant** \
 * **Movere** \
 * **CloudSphere** \
 * **Modernization** \
 * **ServerMigration_DataReplication** \
 * **Unknown**
 */
export type Items = string;

/** Known values of {@link RefreshSummaryState} that the service accepts. */
export enum KnownRefreshSummaryState {
  /** Started */
  Started = "Started",
  /** InProgress */
  InProgress = "InProgress",
  /** Completed */
  Completed = "Completed",
  /** Failed */
  Failed = "Failed",
}

/**
 * Defines values for RefreshSummaryState. \
 * {@link KnownRefreshSummaryState} can be used interchangeably with RefreshSummaryState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Started** \
 * **InProgress** \
 * **Completed** \
 * **Failed**
 */
export type RefreshSummaryState = string;

/** Known values of {@link PublicNetworkAccess} that the service accepts. */
export enum KnownPublicNetworkAccess {
  /** NotSpecified */
  NotSpecified = "NotSpecified",
  /** Enabled */
  Enabled = "Enabled",
  /** Disabled */
  Disabled = "Disabled",
}

/**
 * Defines values for PublicNetworkAccess. \
 * {@link KnownPublicNetworkAccess} can be used interchangeably with PublicNetworkAccess,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **Enabled** \
 * **Disabled**
 */
export type PublicNetworkAccess = string;

/** Known values of {@link ProvisioningState} that the service accepts. */
export enum KnownProvisioningState {
  /** Accepted */
  Accepted = "Accepted",
  /** InProgress */
  InProgress = "InProgress",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Canceled */
  Canceled = "Canceled",
}

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Accepted** \
 * **InProgress** \
 * **Succeeded** \
 * **Failed** \
 * **Canceled**
 */
export type ProvisioningState = string;

/** Known values of {@link PrivateLinkServiceConnectionStateStatus} that the service accepts. */
export enum KnownPrivateLinkServiceConnectionStateStatus {
  /** Approved */
  Approved = "Approved",
  /** Pending */
  Pending = "Pending",
  /** Rejected */
  Rejected = "Rejected",
  /** Disconnected */
  Disconnected = "Disconnected",
}

/**
 * Defines values for PrivateLinkServiceConnectionStateStatus. \
 * {@link KnownPrivateLinkServiceConnectionStateStatus} can be used interchangeably with PrivateLinkServiceConnectionStateStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Approved** \
 * **Pending** \
 * **Rejected** \
 * **Disconnected**
 */
export type PrivateLinkServiceConnectionStateStatus = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  /** User */
  User = "User",
  /** Application */
  Application = "Application",
  /** ManagedIdentity */
  ManagedIdentity = "ManagedIdentity",
  /** Key */
  Key = "Key",
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link Enum} that the service accepts. */
export enum KnownEnum {
  /** Continue */
  Continue = "Continue",
  /** SwitchingProtocols */
  SwitchingProtocols = "SwitchingProtocols",
  /** OK */
  OK = "OK",
  /** Created */
  Created = "Created",
  /** Accepted */
  Accepted = "Accepted",
  /** NonAuthoritativeInformation */
  NonAuthoritativeInformation = "NonAuthoritativeInformation",
  /** NoContent */
  NoContent = "NoContent",
  /** ResetContent */
  ResetContent = "ResetContent",
  /** PartialContent */
  PartialContent = "PartialContent",
  /** MultipleChoices */
  MultipleChoices = "MultipleChoices",
  /** Ambiguous */
  Ambiguous = "Ambiguous",
  /** MovedPermanently */
  MovedPermanently = "MovedPermanently",
  /** Moved */
  Moved = "Moved",
  /** Found */
  Found = "Found",
  /** Redirect */
  Redirect = "Redirect",
  /** SeeOther */
  SeeOther = "SeeOther",
  /** RedirectMethod */
  RedirectMethod = "RedirectMethod",
  /** NotModified */
  NotModified = "NotModified",
  /** UseProxy */
  UseProxy = "UseProxy",
  /** Unused */
  Unused = "Unused",
  /** TemporaryRedirect */
  TemporaryRedirect = "TemporaryRedirect",
  /** RedirectKeepVerb */
  RedirectKeepVerb = "RedirectKeepVerb",
  /** BadRequest */
  BadRequest = "BadRequest",
  /** Unauthorized */
  Unauthorized = "Unauthorized",
  /** PaymentRequired */
  PaymentRequired = "PaymentRequired",
  /** Forbidden */
  Forbidden = "Forbidden",
  /** NotFound */
  NotFound = "NotFound",
  /** MethodNotAllowed */
  MethodNotAllowed = "MethodNotAllowed",
  /** NotAcceptable */
  NotAcceptable = "NotAcceptable",
  /** ProxyAuthenticationRequired */
  ProxyAuthenticationRequired = "ProxyAuthenticationRequired",
  /** RequestTimeout */
  RequestTimeout = "RequestTimeout",
  /** Conflict */
  Conflict = "Conflict",
  /** Gone */
  Gone = "Gone",
  /** LengthRequired */
  LengthRequired = "LengthRequired",
  /** PreconditionFailed */
  PreconditionFailed = "PreconditionFailed",
  /** RequestEntityTooLarge */
  RequestEntityTooLarge = "RequestEntityTooLarge",
  /** RequestUriTooLong */
  RequestUriTooLong = "RequestUriTooLong",
  /** UnsupportedMediaType */
  UnsupportedMediaType = "UnsupportedMediaType",
  /** RequestedRangeNotSatisfiable */
  RequestedRangeNotSatisfiable = "RequestedRangeNotSatisfiable",
  /** ExpectationFailed */
  ExpectationFailed = "ExpectationFailed",
  /** UpgradeRequired */
  UpgradeRequired = "UpgradeRequired",
  /** InternalServerError */
  InternalServerError = "InternalServerError",
  /** NotImplemented */
  NotImplemented = "NotImplemented",
  /** BadGateway */
  BadGateway = "BadGateway",
  /** ServiceUnavailable */
  ServiceUnavailable = "ServiceUnavailable",
  /** GatewayTimeout */
  GatewayTimeout = "GatewayTimeout",
  /** HttpVersionNotSupported */
  HttpVersionNotSupported = "HttpVersionNotSupported",
}

/**
 * Defines values for Enum. \
 * {@link KnownEnum} can be used interchangeably with Enum,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Continue** \
 * **SwitchingProtocols** \
 * **OK** \
 * **Created** \
 * **Accepted** \
 * **NonAuthoritativeInformation** \
 * **NoContent** \
 * **ResetContent** \
 * **PartialContent** \
 * **MultipleChoices** \
 * **Ambiguous** \
 * **MovedPermanently** \
 * **Moved** \
 * **Found** \
 * **Redirect** \
 * **SeeOther** \
 * **RedirectMethod** \
 * **NotModified** \
 * **UseProxy** \
 * **Unused** \
 * **TemporaryRedirect** \
 * **RedirectKeepVerb** \
 * **BadRequest** \
 * **Unauthorized** \
 * **PaymentRequired** \
 * **Forbidden** \
 * **NotFound** \
 * **MethodNotAllowed** \
 * **NotAcceptable** \
 * **ProxyAuthenticationRequired** \
 * **RequestTimeout** \
 * **Conflict** \
 * **Gone** \
 * **LengthRequired** \
 * **PreconditionFailed** \
 * **RequestEntityTooLarge** \
 * **RequestUriTooLong** \
 * **UnsupportedMediaType** \
 * **RequestedRangeNotSatisfiable** \
 * **ExpectationFailed** \
 * **UpgradeRequired** \
 * **InternalServerError** \
 * **NotImplemented** \
 * **BadGateway** \
 * **ServiceUnavailable** \
 * **GatewayTimeout** \
 * **HttpVersionNotSupported**
 */
export type Enum = string;

/** Known values of {@link PrivateEndpointConnectionProxyPropertiesStatus} that the service accepts. */
export enum KnownPrivateEndpointConnectionProxyPropertiesStatus {
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Cancelled */
  Cancelled = "Cancelled",
  /** Running */
  Running = "Running",
}

/**
 * Defines values for PrivateEndpointConnectionProxyPropertiesStatus. \
 * {@link KnownPrivateEndpointConnectionProxyPropertiesStatus} can be used interchangeably with PrivateEndpointConnectionProxyPropertiesStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Cancelled** \
 * **Running**
 */
export type PrivateEndpointConnectionProxyPropertiesStatus = string;

/** Known values of {@link Origin} that the service accepts. */
export enum KnownOrigin {
  /** User */
  User = "user",
  /** System */
  System = "system",
  /** UserSystem */
  UserSystem = "user,system",
}

/**
 * Defines values for Origin. \
 * {@link KnownOrigin} can be used interchangeably with Origin,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **user** \
 * **system** \
 * **user,system**
 */
export type Origin = string;

/** Known values of {@link ActionType} that the service accepts. */
export enum KnownActionType {
  /** Internal */
  Internal = "Internal",
}

/**
 * Defines values for ActionType. \
 * {@link KnownActionType} can be used interchangeably with ActionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Internal**
 */
export type ActionType = string;

/** Known values of {@link SchemaElementKind} that the service accepts. */
export enum KnownSchemaElementKind {
  /** None */
  None = "None",
  /** TypeDefinition */
  TypeDefinition = "TypeDefinition",
  /** Term */
  Term = "Term",
  /** Action */
  Action = "Action",
  /** EntityContainer */
  EntityContainer = "EntityContainer",
  /** Function */
  Function = "Function",
}

/**
 * Defines values for SchemaElementKind. \
 * {@link KnownSchemaElementKind} can be used interchangeably with SchemaElementKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **TypeDefinition** \
 * **Term** \
 * **Action** \
 * **EntityContainer** \
 * **Function**
 */
export type SchemaElementKind = string;

/** Known values of {@link TypeKind} that the service accepts. */
export enum KnownTypeKind {
  /** None */
  None = "None",
  /** Primitive */
  Primitive = "Primitive",
  /** Entity */
  Entity = "Entity",
  /** Complex */
  Complex = "Complex",
  /** Collection */
  Collection = "Collection",
  /** EntityReference */
  EntityReference = "EntityReference",
  /** Enum */
  Enum = "Enum",
  /** TypeDefinition */
  TypeDefinition = "TypeDefinition",
  /** Untyped */
  Untyped = "Untyped",
  /** Path */
  Path = "Path",
}

/**
 * Defines values for TypeKind. \
 * {@link KnownTypeKind} can be used interchangeably with TypeKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Primitive** \
 * **Entity** \
 * **Complex** \
 * **Collection** \
 * **EntityReference** \
 * **Enum** \
 * **TypeDefinition** \
 * **Untyped** \
 * **Path**
 */
export type TypeKind = string;

/** Known values of {@link ExpressionKind} that the service accepts. */
export enum KnownExpressionKind {
  /** None */
  None = "None",
  /** BinaryConstant */
  BinaryConstant = "BinaryConstant",
  /** BooleanConstant */
  BooleanConstant = "BooleanConstant",
  /** DateTimeOffsetConstant */
  DateTimeOffsetConstant = "DateTimeOffsetConstant",
  /** DecimalConstant */
  DecimalConstant = "DecimalConstant",
  /** FloatingConstant */
  FloatingConstant = "FloatingConstant",
  /** GuidConstant */
  GuidConstant = "GuidConstant",
  /** IntegerConstant */
  IntegerConstant = "IntegerConstant",
  /** StringConstant */
  StringConstant = "StringConstant",
  /** DurationConstant */
  DurationConstant = "DurationConstant",
  /** Null */
  Null = "Null",
  /** Record */
  Record = "Record",
  /** Collection */
  Collection = "Collection",
  /** Path */
  Path = "Path",
  /** If */
  If = "If",
  /** Cast */
  Cast = "Cast",
  /** IsType */
  IsType = "IsType",
  /** FunctionApplication */
  FunctionApplication = "FunctionApplication",
  /** LabeledExpressionReference */
  LabeledExpressionReference = "LabeledExpressionReference",
  /** Labeled */
  Labeled = "Labeled",
  /** PropertyPath */
  PropertyPath = "PropertyPath",
  /** NavigationPropertyPath */
  NavigationPropertyPath = "NavigationPropertyPath",
  /** DateConstant */
  DateConstant = "DateConstant",
  /** TimeOfDayConstant */
  TimeOfDayConstant = "TimeOfDayConstant",
  /** EnumMember */
  EnumMember = "EnumMember",
  /** AnnotationPath */
  AnnotationPath = "AnnotationPath",
}

/**
 * Defines values for ExpressionKind. \
 * {@link KnownExpressionKind} can be used interchangeably with ExpressionKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **BinaryConstant** \
 * **BooleanConstant** \
 * **DateTimeOffsetConstant** \
 * **DecimalConstant** \
 * **FloatingConstant** \
 * **GuidConstant** \
 * **IntegerConstant** \
 * **StringConstant** \
 * **DurationConstant** \
 * **Null** \
 * **Record** \
 * **Collection** \
 * **Path** \
 * **If** \
 * **Cast** \
 * **IsType** \
 * **FunctionApplication** \
 * **LabeledExpressionReference** \
 * **Labeled** \
 * **PropertyPath** \
 * **NavigationPropertyPath** \
 * **DateConstant** \
 * **TimeOfDayConstant** \
 * **EnumMember** \
 * **AnnotationPath**
 */
export type ExpressionKind = string;

/** Known values of {@link ContainerElementKind} that the service accepts. */
export enum KnownContainerElementKind {
  /** None */
  None = "None",
  /** EntitySet */
  EntitySet = "EntitySet",
  /** ActionImport */
  ActionImport = "ActionImport",
  /** FunctionImport */
  FunctionImport = "FunctionImport",
  /** Singleton */
  Singleton = "Singleton",
}

/**
 * Defines values for ContainerElementKind. \
 * {@link KnownContainerElementKind} can be used interchangeably with ContainerElementKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **EntitySet** \
 * **ActionImport** \
 * **FunctionImport** \
 * **Singleton**
 */
export type ContainerElementKind = string;

/** Known values of {@link OnDelete} that the service accepts. */
export enum KnownOnDelete {
  /** None */
  None = "None",
  /** Cascade */
  Cascade = "Cascade",
}

/**
 * Defines values for OnDelete. \
 * {@link KnownOnDelete} can be used interchangeably with OnDelete,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Cascade**
 */
export type OnDelete = string;

/** Known values of {@link PropertyKind} that the service accepts. */
export enum KnownPropertyKind {
  /** None */
  None = "None",
  /** Structural */
  Structural = "Structural",
  /** Navigation */
  Navigation = "Navigation",
}

/**
 * Defines values for PropertyKind. \
 * {@link KnownPropertyKind} can be used interchangeably with PropertyKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Structural** \
 * **Navigation**
 */
export type PropertyKind = string;

/** Known values of {@link SingleValueNodeKind} that the service accepts. */
export enum KnownSingleValueNodeKind {
  /** None */
  None = "None",
  /** Constant */
  Constant = "Constant",
  /** Convert */
  Convert = "Convert",
  /** NonResourceRangeVariableReference */
  NonResourceRangeVariableReference = "NonResourceRangeVariableReference",
  /** BinaryOperator */
  BinaryOperator = "BinaryOperator",
  /** UnaryOperator */
  UnaryOperator = "UnaryOperator",
  /** SingleValuePropertyAccess */
  SingleValuePropertyAccess = "SingleValuePropertyAccess",
  /** CollectionPropertyAccess */
  CollectionPropertyAccess = "CollectionPropertyAccess",
  /** SingleValueFunctionCall */
  SingleValueFunctionCall = "SingleValueFunctionCall",
  /** Any */
  Any = "Any",
  /** CollectionNavigationNode */
  CollectionNavigationNode = "CollectionNavigationNode",
  /** SingleNavigationNode */
  SingleNavigationNode = "SingleNavigationNode",
  /** SingleValueOpenPropertyAccess */
  SingleValueOpenPropertyAccess = "SingleValueOpenPropertyAccess",
  /** SingleResourceCast */
  SingleResourceCast = "SingleResourceCast",
  /** All */
  All = "All",
  /** CollectionResourceCast */
  CollectionResourceCast = "CollectionResourceCast",
  /** ResourceRangeVariableReference */
  ResourceRangeVariableReference = "ResourceRangeVariableReference",
  /** SingleResourceFunctionCall */
  SingleResourceFunctionCall = "SingleResourceFunctionCall",
  /** CollectionFunctionCall */
  CollectionFunctionCall = "CollectionFunctionCall",
  /** CollectionResourceFunctionCall */
  CollectionResourceFunctionCall = "CollectionResourceFunctionCall",
  /** NamedFunctionParameter */
  NamedFunctionParameter = "NamedFunctionParameter",
  /** ParameterAlias */
  ParameterAlias = "ParameterAlias",
  /** EntitySet */
  EntitySet = "EntitySet",
  /** KeyLookup */
  KeyLookup = "KeyLookup",
  /** SearchTerm */
  SearchTerm = "SearchTerm",
  /** CollectionOpenPropertyAccess */
  CollectionOpenPropertyAccess = "CollectionOpenPropertyAccess",
  /** CollectionComplexNode */
  CollectionComplexNode = "CollectionComplexNode",
  /** SingleComplexNode */
  SingleComplexNode = "SingleComplexNode",
  /** Count */
  Count = "Count",
  /** SingleValueCast */
  SingleValueCast = "SingleValueCast",
  /** CollectionPropertyNode */
  CollectionPropertyNode = "CollectionPropertyNode",
  /** AggregatedCollectionPropertyNode */
  AggregatedCollectionPropertyNode = "AggregatedCollectionPropertyNode",
  /** In */
  In = "In",
  /** CollectionConstant */
  CollectionConstant = "CollectionConstant",
}

/**
 * Defines values for SingleValueNodeKind. \
 * {@link KnownSingleValueNodeKind} can be used interchangeably with SingleValueNodeKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Constant** \
 * **Convert** \
 * **NonResourceRangeVariableReference** \
 * **BinaryOperator** \
 * **UnaryOperator** \
 * **SingleValuePropertyAccess** \
 * **CollectionPropertyAccess** \
 * **SingleValueFunctionCall** \
 * **Any** \
 * **CollectionNavigationNode** \
 * **SingleNavigationNode** \
 * **SingleValueOpenPropertyAccess** \
 * **SingleResourceCast** \
 * **All** \
 * **CollectionResourceCast** \
 * **ResourceRangeVariableReference** \
 * **SingleResourceFunctionCall** \
 * **CollectionFunctionCall** \
 * **CollectionResourceFunctionCall** \
 * **NamedFunctionParameter** \
 * **ParameterAlias** \
 * **EntitySet** \
 * **KeyLookup** \
 * **SearchTerm** \
 * **CollectionOpenPropertyAccess** \
 * **CollectionComplexNode** \
 * **SingleComplexNode** \
 * **Count** \
 * **SingleValueCast** \
 * **CollectionPropertyNode** \
 * **AggregatedCollectionPropertyNode** \
 * **In** \
 * **CollectionConstant**
 */
export type SingleValueNodeKind = string;

/** Known values of {@link TransformationNodeKind} that the service accepts. */
export enum KnownTransformationNodeKind {
  /** Aggregate */
  Aggregate = "Aggregate",
  /** GroupBy */
  GroupBy = "GroupBy",
  /** Filter */
  Filter = "Filter",
  /** Compute */
  Compute = "Compute",
}

/**
 * Defines values for TransformationNodeKind. \
 * {@link KnownTransformationNodeKind} can be used interchangeably with TransformationNodeKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Aggregate** \
 * **GroupBy** \
 * **Filter** \
 * **Compute**
 */
export type TransformationNodeKind = string;

/** Optional parameters. */
export interface DatabaseInstancesControllerListDatabaseInstancesOptionalParams
  extends coreClient.OperationOptions {
  /** The continuation token. */
  continuationToken?: string;
  /** The number of items to be returned in a single page. This value is honored only if it is less than the 100. */
  pageSize?: number;
}

/** Contains response data for the listDatabaseInstances operation. */
export type DatabaseInstancesControllerListDatabaseInstancesResponse =
  DatabaseInstanceCollection;

/** Optional parameters. */
export interface DatabaseInstancesControllerGetDatabaseInstanceOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getDatabaseInstance operation. */
export type DatabaseInstancesControllerGetDatabaseInstanceResponse =
  DatabaseInstance;

/** Optional parameters. */
export interface DatabaseInstancesControllerListDatabaseInstancesNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listDatabaseInstancesNext operation. */
export type DatabaseInstancesControllerListDatabaseInstancesNextResponse =
  DatabaseInstanceCollection;

/** Optional parameters. */
export interface DatabasesControllerListDatabasesOptionalParams
  extends coreClient.OperationOptions {
  /** The continuation token. */
  continuationToken?: string;
  /** The number of items to be returned in a single page. This value is honored only if it is less than the 100. */
  pageSize?: number;
}

/** Contains response data for the listDatabases operation. */
export type DatabasesControllerListDatabasesResponse = DatabaseCollection;

/** Optional parameters. */
export interface DatabasesControllerGetDatabaseOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getDatabase operation. */
export type DatabasesControllerGetDatabaseResponse = Database;

/** Optional parameters. */
export interface DatabasesControllerListDatabasesNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listDatabasesNext operation. */
export type DatabasesControllerListDatabasesNextResponse = DatabaseCollection;

/** Optional parameters. */
export interface EventsControllerListEventsOptionalParams
  extends coreClient.OperationOptions {
  /** The continuation token. */
  continuationToken?: string;
}

/** Contains response data for the listEvents operation. */
export type EventsControllerListEventsResponse = EventCollection;

/** Optional parameters. */
export interface EventsControllerGetEventOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getEvent operation. */
export type EventsControllerGetEventResponse = MigrateEvent;

/** Optional parameters. */
export interface EventsControllerDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the delete operation. */
export type EventsControllerDeleteResponse = Record<string, unknown>;

/** Optional parameters. */
export interface EventsControllerListEventsNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listEventsNext operation. */
export type EventsControllerListEventsNextResponse = EventCollection;

/** Optional parameters. */
export interface MachinesControllerListMachinesOptionalParams
  extends coreClient.OperationOptions {
  /** The continuation token. */
  continuationToken?: string;
  /** The number of items to be returned in a single page. This value is honored only if it is less than the 100. */
  pageSize?: number;
}

/** Contains response data for the listMachines operation. */
export type MachinesControllerListMachinesResponse = MachineCollection;

/** Optional parameters. */
export interface MachinesControllerGetMachineOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getMachine operation. */
export type MachinesControllerGetMachineResponse = Machine;

/** Optional parameters. */
export interface MachinesControllerListMachinesNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listMachinesNext operation. */
export type MachinesControllerListMachinesNextResponse = MachineCollection;

/** Optional parameters. */
export interface MigrateProjectsControllerRegisterToolOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the registerTool operation. */
export type MigrateProjectsControllerRegisterToolResponse = RegistrationResult;

/** Optional parameters. */
export interface MigrateProjectsControllerRefreshSummaryOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the refreshSummary operation. */
export type MigrateProjectsControllerRefreshSummaryResponse =
  RefreshSummaryResult;

/** Optional parameters. */
export interface MigrateProjectsControllerGetMigrateProjectOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getMigrateProject operation. */
export type MigrateProjectsControllerGetMigrateProjectResponse = MigrateProject;

/** Optional parameters. */
export interface MigrateProjectsControllerPutMigrateProjectOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the putMigrateProject operation. */
export type MigrateProjectsControllerPutMigrateProjectResponse = MigrateProject;

/** Optional parameters. */
export interface MigrateProjectsControllerDeleteMigrateProjectOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface MigrateProjectsControllerPatchMigrateProjectOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the patchMigrateProject operation. */
export type MigrateProjectsControllerPatchMigrateProjectResponse =
  MigrateProject;

/** Optional parameters. */
export interface MigrateProjectsControllerGetToolRegistrationDetailsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getToolRegistrationDetails operation. */
export type MigrateProjectsControllerGetToolRegistrationDetailsResponse =
  RegistrationDetailsResponse;

/** Optional parameters. */
export interface SolutionsControllerGetSolutionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getSolution operation. */
export type SolutionsControllerGetSolutionResponse = Solution;

/** Optional parameters. */
export interface SolutionsControllerCreateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the create operation. */
export type SolutionsControllerCreateResponse = Solution;

/** Optional parameters. */
export interface SolutionsControllerUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type SolutionsControllerUpdateResponse = Solution;

/** Optional parameters. */
export interface SolutionsControllerDeleteSolutionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the deleteSolution operation. */
export type SolutionsControllerDeleteSolutionResponse = Record<string, unknown>;

/** Optional parameters. */
export interface SolutionsControllerListSolutionsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listSolutions operation. */
export type SolutionsControllerListSolutionsResponse = SolutionsCollection;

/** Optional parameters. */
export interface SolutionsControllerGetConfigOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getConfig operation. */
export type SolutionsControllerGetConfigResponse = SolutionConfig;

/** Optional parameters. */
export interface SolutionsControllerCleanupDataOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the cleanupData operation. */
export type SolutionsControllerCleanupDataResponse = Record<string, unknown>;

/** Optional parameters. */
export interface SolutionsControllerListSolutionsNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listSolutionsNext operation. */
export type SolutionsControllerListSolutionsNextResponse = SolutionsCollection;

/** Optional parameters. */
export interface VirtualDesktopUserControllerListVirtualDesktopUsersOptionalParams
  extends coreClient.OperationOptions {
  /** The continuation token. */
  continuationToken?: string;
  /** The number of items to be returned in a single page. This value is honored only if it is less than the 100. */
  pageSize?: number;
}

/** Contains response data for the listVirtualDesktopUsers operation. */
export type VirtualDesktopUserControllerListVirtualDesktopUsersResponse =
  VirtualDesktopUserCollection;

/** Optional parameters. */
export interface VirtualDesktopUserControllerGetVirtualDesktopUserOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getVirtualDesktopUser operation. */
export type VirtualDesktopUserControllerGetVirtualDesktopUserResponse =
  VirtualDesktopUser;

/** Optional parameters. */
export interface VirtualDesktopUserControllerListVirtualDesktopUsersNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listVirtualDesktopUsersNext operation. */
export type VirtualDesktopUserControllerListVirtualDesktopUsersNextResponse =
  VirtualDesktopUserCollection;

/** Optional parameters. */
export interface WebServersControllerListWebServersOptionalParams
  extends coreClient.OperationOptions {
  /** The continuation token. */
  continuationToken?: string;
  /** The number of items to be returned in a single page. This value is honored only if it is less than the 100. */
  pageSize?: number;
}

/** Contains response data for the listWebServers operation. */
export type WebServersControllerListWebServersResponse = WebServerCollection;

/** Optional parameters. */
export interface WebServersControllerGetWebServerOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getWebServer operation. */
export type WebServersControllerGetWebServerResponse = WebServer;

/** Optional parameters. */
export interface WebServersControllerListWebServersNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listWebServersNext operation. */
export type WebServersControllerListWebServersNextResponse =
  WebServerCollection;

/** Optional parameters. */
export interface WebSitesControllerListWebSitesOptionalParams
  extends coreClient.OperationOptions {
  /** The continuation token. */
  continuationToken?: string;
  /** The number of items to be returned in a single page. This value is honored only if it is less than the 100. */
  pageSize?: number;
}

/** Contains response data for the listWebSites operation. */
export type WebSitesControllerListWebSitesResponse = WebSiteCollection;

/** Optional parameters. */
export interface WebSitesControllerGetWebSiteOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getWebSite operation. */
export type WebSitesControllerGetWebSiteResponse = WebSite;

/** Optional parameters. */
export interface WebSitesControllerListWebSitesNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listWebSitesNext operation. */
export type WebSitesControllerListWebSitesNextResponse = WebSiteCollection;

/** Optional parameters. */
export interface ProjectsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type ProjectsListBySubscriptionResponse =
  ProjectsListBySubscriptionHeaders & ProjectResultList;

/** Optional parameters. */
export interface ProjectsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type ProjectsListResponse = ProjectsListHeaders & ProjectResultList;

/** Optional parameters. */
export interface ProjectsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type ProjectsListBySubscriptionNextResponse =
  ProjectsListBySubscriptionNextHeaders & ProjectResultList;

/** Optional parameters. */
export interface ProjectsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type ProjectsListNextResponse = ProjectsListNextHeaders &
  ProjectResultList;

/** Optional parameters. */
export interface PrivateEndpointConnectionsControllerGetPrivateEndpointConnectionsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getPrivateEndpointConnections operation. */
export type PrivateEndpointConnectionsControllerGetPrivateEndpointConnectionsResponse =
  PrivateEndpointConnectionCollection;

/** Optional parameters. */
export interface PrivateEndpointConnectionsControllerGetPrivateEndpointConnectionsNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getPrivateEndpointConnectionsNext operation. */
export type PrivateEndpointConnectionsControllerGetPrivateEndpointConnectionsNextResponse =
  PrivateEndpointConnectionCollection;

/** Optional parameters. */
export interface PrivateEndpointConnectionControllerGetPrivateEndpointConnectionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getPrivateEndpointConnection operation. */
export type PrivateEndpointConnectionControllerGetPrivateEndpointConnectionResponse =
  PrivateEndpointConnection;

/** Optional parameters. */
export interface PrivateEndpointConnectionControllerPutPrivateEndpointConnectionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the putPrivateEndpointConnection operation. */
export type PrivateEndpointConnectionControllerPutPrivateEndpointConnectionResponse =
  PrivateEndpointConnection;

/** Optional parameters. */
export interface PrivateEndpointConnectionControllerDeletePrivateEndpointConnectionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the deletePrivateEndpointConnection operation. */
export type PrivateEndpointConnectionControllerDeletePrivateEndpointConnectionResponse =
  {
    /** The parsed response body. */
    body: Enum;
  };

/** Optional parameters. */
export interface PrivateEndpointConnectionProxyControllerListPrivateEndpointConnectionProxiesOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listPrivateEndpointConnectionProxies operation. */
export type PrivateEndpointConnectionProxyControllerListPrivateEndpointConnectionProxiesResponse =
  PrivateEndpointConnectionProxyCollection;

/** Optional parameters. */
export interface PrivateEndpointConnectionProxyControllerGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type PrivateEndpointConnectionProxyControllerGetResponse =
  PrivateEndpointConnectionProxy;

/** Optional parameters. */
export interface PrivateEndpointConnectionProxyControllerCreateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the create operation. */
export type PrivateEndpointConnectionProxyControllerCreateResponse =
  PrivateEndpointConnectionProxy;

/** Optional parameters. */
export interface PrivateEndpointConnectionProxyControllerDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the delete operation. */
export type PrivateEndpointConnectionProxyControllerDeleteResponse = Record<
  string,
  unknown
>;

/** Optional parameters. */
export interface PrivateEndpointConnectionProxyControllerValidateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the validate operation. */
export type PrivateEndpointConnectionProxyControllerValidateResponse =
  PrivateEndpointConnectionProxy;

/** Optional parameters. */
export interface PrivateEndpointConnectionProxyControllerListPrivateEndpointConnectionProxiesNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listPrivateEndpointConnectionProxiesNext operation. */
export type PrivateEndpointConnectionProxyControllerListPrivateEndpointConnectionProxiesNextResponse =
  PrivateEndpointConnectionProxyCollection;

/** Optional parameters. */
export interface PrivateLinkResourceControllerGetPrivateLinkResourceOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getPrivateLinkResource operation. */
export type PrivateLinkResourceControllerGetPrivateLinkResourceResponse =
  PrivateLinkResource;

/** Optional parameters. */
export interface PrivateLinkResourceControllerGetPrivateLinkResourcesOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getPrivateLinkResources operation. */
export type PrivateLinkResourceControllerGetPrivateLinkResourcesResponse =
  PrivateLinkResourceCollection;

/** Optional parameters. */
export interface PrivateLinkResourceControllerGetPrivateLinkResourcesNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getPrivateLinkResourcesNext operation. */
export type PrivateLinkResourceControllerGetPrivateLinkResourcesNextResponse =
  PrivateLinkResourceCollection;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationListResult;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export interface AzureMigrateV2OptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
