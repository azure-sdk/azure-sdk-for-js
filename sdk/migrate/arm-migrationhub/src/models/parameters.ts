/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter,
} from "@azure/core-client";
import {
  RegisterToolInput as RegisterToolInputMapper,
  RefreshSummaryInput as RefreshSummaryInputMapper,
  MigrateProject as MigrateProjectMapper,
  RegistrationDetailsInput as RegistrationDetailsInputMapper,
  Solution as SolutionMapper,
  PrivateEndpointConnection as PrivateEndpointConnectionMapper,
  PrivateEndpointConnectionProxy as PrivateEndpointConnectionProxyMapper,
} from "../models/mappers.js";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String",
    },
  },
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    constraints: {
      MinLength: 1,
    },
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    constraints: {
      MaxLength: 90,
      MinLength: 1,
    },
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const migrateProjectName: OperationURLParameter = {
  parameterPath: "migrateProjectName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9-]{3,24}$"),
    },
    serializedName: "migrateProjectName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2023-01-01",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String",
    },
  },
};

export const continuationToken: OperationQueryParameter = {
  parameterPath: ["options", "continuationToken"],
  mapper: {
    serializedName: "continuationToken",
    type: {
      name: "String",
    },
  },
};

export const pageSize: OperationQueryParameter = {
  parameterPath: ["options", "pageSize"],
  mapper: {
    serializedName: "pageSize",
    type: {
      name: "Number",
    },
  },
};

export const databaseInstanceName: OperationURLParameter = {
  parameterPath: "databaseInstanceName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9-]{3,24}$"),
    },
    serializedName: "databaseInstanceName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const databaseName: OperationURLParameter = {
  parameterPath: "databaseName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9-]{3,24}$"),
    },
    serializedName: "databaseName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const eventName: OperationURLParameter = {
  parameterPath: "eventName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9-]{3,24}$"),
    },
    serializedName: "eventName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const machineName: OperationURLParameter = {
  parameterPath: "machineName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9-]{3,24}$"),
    },
    serializedName: "machineName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String",
    },
  },
};

export const input: OperationParameter = {
  parameterPath: "input",
  mapper: RegisterToolInputMapper,
};

export const input1: OperationParameter = {
  parameterPath: "input",
  mapper: RefreshSummaryInputMapper,
};

export const body: OperationParameter = {
  parameterPath: "body",
  mapper: MigrateProjectMapper,
};

export const input2: OperationParameter = {
  parameterPath: "input",
  mapper: RegistrationDetailsInputMapper,
};

export const solutionName: OperationURLParameter = {
  parameterPath: "solutionName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9-]{3,24}$"),
    },
    serializedName: "solutionName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const solutionInput: OperationParameter = {
  parameterPath: "solutionInput",
  mapper: SolutionMapper,
};

export const virtualDesktopUserName: OperationURLParameter = {
  parameterPath: "virtualDesktopUserName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9-]{3,24}$"),
    },
    serializedName: "virtualDesktopUserName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const webServerId: OperationURLParameter = {
  parameterPath: "webServerId",
  mapper: {
    serializedName: "webServerId",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const webSiteName: OperationURLParameter = {
  parameterPath: "webSiteName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9-]{3,24}$"),
    },
    serializedName: "webSiteName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const peConnectionName: OperationURLParameter = {
  parameterPath: "peConnectionName",
  mapper: {
    serializedName: "peConnectionName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const body1: OperationParameter = {
  parameterPath: "body",
  mapper: PrivateEndpointConnectionMapper,
};

export const pecProxyName: OperationURLParameter = {
  parameterPath: "pecProxyName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9-]{3,24}$"),
    },
    serializedName: "pecProxyName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const body2: OperationParameter = {
  parameterPath: "body",
  mapper: PrivateEndpointConnectionProxyMapper,
};

export const privateLinkResourceName: OperationURLParameter = {
  parameterPath: "privateLinkResourceName",
  mapper: {
    serializedName: "privateLinkResourceName",
    required: true,
    type: {
      name: "String",
    },
  },
};
