/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { Workflow } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { AzureMigrateEngineAPIs } from "../azureMigrateEngineAPIs.js";
import {
  WorkflowModel,
  WorkflowListNextOptionalParams,
  WorkflowListOptionalParams,
  WorkflowListResponse,
  WorkflowGetOptionalParams,
  WorkflowGetResponse,
  WorkflowListNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing Workflow operations. */
export class WorkflowImpl implements Workflow {
  private readonly client: AzureMigrateEngineAPIs;

  /**
   * Initialize a new instance of the class Workflow class.
   * @param client Reference to the service client
   */
  constructor(client: AzureMigrateEngineAPIs) {
    this.client = client;
  }

  /**
   * Gets the list of jobs in the given modernizeProject.
   * @param subscriptionId Azure Subscription Id in which project was created.
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param modernizeProjectName ModernizeProject name.
   * @param options The options parameters.
   */
  public list(
    subscriptionId: string,
    resourceGroupName: string,
    modernizeProjectName: string,
    options?: WorkflowListOptionalParams,
  ): PagedAsyncIterableIterator<WorkflowModel> {
    const iter = this.listPagingAll(
      subscriptionId,
      resourceGroupName,
      modernizeProjectName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(
          subscriptionId,
          resourceGroupName,
          modernizeProjectName,
          options,
          settings,
        );
      },
    };
  }

  private async *listPagingPage(
    subscriptionId: string,
    resourceGroupName: string,
    modernizeProjectName: string,
    options?: WorkflowListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<WorkflowModel[]> {
    let result: WorkflowListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(
        subscriptionId,
        resourceGroupName,
        modernizeProjectName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        subscriptionId,
        resourceGroupName,
        modernizeProjectName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    subscriptionId: string,
    resourceGroupName: string,
    modernizeProjectName: string,
    options?: WorkflowListOptionalParams,
  ): AsyncIterableIterator<WorkflowModel> {
    for await (const page of this.listPagingPage(
      subscriptionId,
      resourceGroupName,
      modernizeProjectName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Gets the details of the job.
   * @param subscriptionId Azure Subscription Id in which project was created.
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param modernizeProjectName ModernizeProject name.
   * @param workflowName Workflow name.
   * @param options The options parameters.
   */
  get(
    subscriptionId: string,
    resourceGroupName: string,
    modernizeProjectName: string,
    workflowName: string,
    options?: WorkflowGetOptionalParams,
  ): Promise<WorkflowGetResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        resourceGroupName,
        modernizeProjectName,
        workflowName,
        options,
      },
      getOperationSpec,
    );
  }

  /**
   * Gets the list of jobs in the given modernizeProject.
   * @param subscriptionId Azure Subscription Id in which project was created.
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param modernizeProjectName ModernizeProject name.
   * @param options The options parameters.
   */
  private _list(
    subscriptionId: string,
    resourceGroupName: string,
    modernizeProjectName: string,
    options?: WorkflowListOptionalParams,
  ): Promise<WorkflowListResponse> {
    return this.client.sendOperationRequest(
      { subscriptionId, resourceGroupName, modernizeProjectName, options },
      listOperationSpec,
    );
  }

  /**
   * ListNext
   * @param subscriptionId Azure Subscription Id in which project was created.
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param modernizeProjectName ModernizeProject name.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    subscriptionId: string,
    resourceGroupName: string,
    modernizeProjectName: string,
    nextLink: string,
    options?: WorkflowListNextOptionalParams,
  ): Promise<WorkflowListNextResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        resourceGroupName,
        modernizeProjectName,
        nextLink,
        options,
      },
      listNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/modernizeProjects/{modernizeProjectName}/jobs/{workflowName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkflowModel,
    },
    default: {
      bodyMapper: Mappers.ArmError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.modernizeProjectName,
    Parameters.workflowName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/modernizeProjects/{modernizeProjectName}/jobs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkflowModelCollection,
    },
    default: {
      bodyMapper: Mappers.ArmError,
    },
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.continuationToken,
    Parameters.filter,
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.modernizeProjectName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkflowModelCollection,
    },
    default: {
      bodyMapper: Mappers.ArmError,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.modernizeProjectName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
