/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { MigrateAgent } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { AzureMigrateEngineAPIs } from "../azureMigrateEngineAPIs.js";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl.js";
import {
  MigrateAgentGetOptionalParams,
  MigrateAgentGetResponse,
  MigrateAgentCreateOptionalParams,
  MigrateAgentCreateResponse,
  MigrateAgentDeleteOptionalParams,
  MigrateAgentDeleteResponse,
  MigrateAgentListOptionalParams,
  MigrateAgentListResponse,
  MigrateAgentRefreshOptionalParams,
  MigrateAgentRefreshResponse,
} from "../models/index.js";

/** Class containing MigrateAgent operations. */
export class MigrateAgentImpl implements MigrateAgent {
  private readonly client: AzureMigrateEngineAPIs;

  /**
   * Initialize a new instance of the class MigrateAgent class.
   * @param client Reference to the service client
   */
  constructor(client: AzureMigrateEngineAPIs) {
    this.client = client;
  }

  /**
   * Gets the details of the modernizeProject agent.
   * @param subscriptionId Azure Subscription Id in which project was created.
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param modernizeProjectName ModernizeProject name.
   * @param agentName MigrateAgent name.
   * @param options The options parameters.
   */
  get(
    subscriptionId: string,
    resourceGroupName: string,
    modernizeProjectName: string,
    agentName: string,
    options?: MigrateAgentGetOptionalParams,
  ): Promise<MigrateAgentGetResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        resourceGroupName,
        modernizeProjectName,
        agentName,
        options,
      },
      getOperationSpec,
    );
  }

  /**
   * Creates the modernizeProject agent.
   * @param subscriptionId Azure Subscription Id in which project was created.
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param modernizeProjectName ModernizeProject name.
   * @param agentName MigrateAgent name.
   * @param options The options parameters.
   */
  create(
    subscriptionId: string,
    resourceGroupName: string,
    modernizeProjectName: string,
    agentName: string,
    options?: MigrateAgentCreateOptionalParams,
  ): Promise<MigrateAgentCreateResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        resourceGroupName,
        modernizeProjectName,
        agentName,
        options,
      },
      createOperationSpec,
    );
  }

  /**
   * Deletes the modernizeProject agent.
   * @param subscriptionId Azure Subscription Id in which project was created.
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param modernizeProjectName ModernizeProject Name.
   * @param agentName MigrateAgent Name.
   * @param options The options parameters.
   */
  async beginDelete(
    subscriptionId: string,
    resourceGroupName: string,
    modernizeProjectName: string,
    agentName: string,
    options?: MigrateAgentDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<MigrateAgentDeleteResponse>,
      MigrateAgentDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<MigrateAgentDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        subscriptionId,
        resourceGroupName,
        modernizeProjectName,
        agentName,
        options,
      },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<
      MigrateAgentDeleteResponse,
      OperationState<MigrateAgentDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Deletes the modernizeProject agent.
   * @param subscriptionId Azure Subscription Id in which project was created.
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param modernizeProjectName ModernizeProject Name.
   * @param agentName MigrateAgent Name.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    subscriptionId: string,
    resourceGroupName: string,
    modernizeProjectName: string,
    agentName: string,
    options?: MigrateAgentDeleteOptionalParams,
  ): Promise<MigrateAgentDeleteResponse> {
    const poller = await this.beginDelete(
      subscriptionId,
      resourceGroupName,
      modernizeProjectName,
      agentName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Gets the list of modernizeProject agents in the given modernizeProject.
   * @param subscriptionId Azure Subscription Id in which project was created.
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param modernizeProjectName ModernizeProject name.
   * @param options The options parameters.
   */
  list(
    subscriptionId: string,
    resourceGroupName: string,
    modernizeProjectName: string,
    options?: MigrateAgentListOptionalParams,
  ): Promise<MigrateAgentListResponse> {
    return this.client.sendOperationRequest(
      { subscriptionId, resourceGroupName, modernizeProjectName, options },
      listOperationSpec,
    );
  }

  /**
   * Refreshes the modernizeProject agent.
   * @param subscriptionId Azure Subscription Id in which project was created.
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param modernizeProjectName ModernizeProject name.
   * @param agentName MigrateAgent name.
   * @param options The options parameters.
   */
  async beginRefresh(
    subscriptionId: string,
    resourceGroupName: string,
    modernizeProjectName: string,
    agentName: string,
    options?: MigrateAgentRefreshOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<MigrateAgentRefreshResponse>,
      MigrateAgentRefreshResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<MigrateAgentRefreshResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        subscriptionId,
        resourceGroupName,
        modernizeProjectName,
        agentName,
        options,
      },
      spec: refreshOperationSpec,
    });
    const poller = await createHttpPoller<
      MigrateAgentRefreshResponse,
      OperationState<MigrateAgentRefreshResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Refreshes the modernizeProject agent.
   * @param subscriptionId Azure Subscription Id in which project was created.
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param modernizeProjectName ModernizeProject name.
   * @param agentName MigrateAgent name.
   * @param options The options parameters.
   */
  async beginRefreshAndWait(
    subscriptionId: string,
    resourceGroupName: string,
    modernizeProjectName: string,
    agentName: string,
    options?: MigrateAgentRefreshOptionalParams,
  ): Promise<MigrateAgentRefreshResponse> {
    const poller = await this.beginRefresh(
      subscriptionId,
      resourceGroupName,
      modernizeProjectName,
      agentName,
      options,
    );
    return poller.pollUntilDone();
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/modernizeProjects/{modernizeProjectName}/migrateAgents/{agentName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MigrateAgentModel,
    },
    default: {
      bodyMapper: Mappers.ArmError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.modernizeProjectName,
    Parameters.agentName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/modernizeProjects/{modernizeProjectName}/migrateAgents/{agentName}",
  httpMethod: "PUT",
  responses: {
    201: {
      bodyMapper: Mappers.MigrateAgentModel,
    },
    default: {
      bodyMapper: Mappers.ArmError,
    },
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.modernizeProjectName,
    Parameters.agentName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/modernizeProjects/{modernizeProjectName}/migrateAgents/{agentName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.MigrateAgentDeleteHeaders,
    },
    201: {
      headersMapper: Mappers.MigrateAgentDeleteHeaders,
    },
    202: {
      headersMapper: Mappers.MigrateAgentDeleteHeaders,
    },
    204: {
      headersMapper: Mappers.MigrateAgentDeleteHeaders,
    },
    default: {
      bodyMapper: Mappers.ArmError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.modernizeProjectName,
    Parameters.agentName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/modernizeProjects/{modernizeProjectName}/migrateAgents",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MigrateAgentModelCollection,
    },
    default: {
      bodyMapper: Mappers.ArmError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.modernizeProjectName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const refreshOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/modernizeProjects/{modernizeProjectName}/migrateAgents/{agentName}/refresh",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.MigrateAgentRefreshHeaders,
    },
    201: {
      headersMapper: Mappers.MigrateAgentRefreshHeaders,
    },
    202: {
      headersMapper: Mappers.MigrateAgentRefreshHeaders,
    },
    204: {
      headersMapper: Mappers.MigrateAgentRefreshHeaders,
    },
    default: {
      bodyMapper: Mappers.ArmError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.modernizeProjectName,
    Parameters.agentName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
