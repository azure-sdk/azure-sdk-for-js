/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { WorkloadInstance } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { AzureMigrateEngineAPIs } from "../azureMigrateEngineAPIs.js";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl.js";
import {
  WorkloadInstanceModel,
  WorkloadInstanceListNextOptionalParams,
  WorkloadInstanceListOptionalParams,
  WorkloadInstanceListResponse,
  WorkloadInstanceGetOptionalParams,
  WorkloadInstanceGetResponse,
  WorkloadInstanceCreateOptionalParams,
  WorkloadInstanceCreateResponse,
  WorkloadInstanceDeleteOptionalParams,
  WorkloadInstanceDeleteResponse,
  WorkloadInstanceMigrateCompleteOptionalParams,
  WorkloadInstanceMigrateCompleteResponse,
  WorkloadInstanceStopReplicateOptionalParams,
  WorkloadInstanceStopReplicateResponse,
  WorkloadInstanceListNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing WorkloadInstance operations. */
export class WorkloadInstanceImpl implements WorkloadInstance {
  private readonly client: AzureMigrateEngineAPIs;

  /**
   * Initialize a new instance of the class WorkloadInstance class.
   * @param client Reference to the service client
   */
  constructor(client: AzureMigrateEngineAPIs) {
    this.client = client;
  }

  /**
   * Gets the list of workload instances in the given modernizeProject.
   * @param subscriptionId Azure Subscription Id in which project was created.
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param modernizeProjectName ModernizeProject name.
   * @param options The options parameters.
   */
  public list(
    subscriptionId: string,
    resourceGroupName: string,
    modernizeProjectName: string,
    options?: WorkloadInstanceListOptionalParams,
  ): PagedAsyncIterableIterator<WorkloadInstanceModel> {
    const iter = this.listPagingAll(
      subscriptionId,
      resourceGroupName,
      modernizeProjectName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(
          subscriptionId,
          resourceGroupName,
          modernizeProjectName,
          options,
          settings,
        );
      },
    };
  }

  private async *listPagingPage(
    subscriptionId: string,
    resourceGroupName: string,
    modernizeProjectName: string,
    options?: WorkloadInstanceListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<WorkloadInstanceModel[]> {
    let result: WorkloadInstanceListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(
        subscriptionId,
        resourceGroupName,
        modernizeProjectName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        subscriptionId,
        resourceGroupName,
        modernizeProjectName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    subscriptionId: string,
    resourceGroupName: string,
    modernizeProjectName: string,
    options?: WorkloadInstanceListOptionalParams,
  ): AsyncIterableIterator<WorkloadInstanceModel> {
    for await (const page of this.listPagingPage(
      subscriptionId,
      resourceGroupName,
      modernizeProjectName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Gets the details of the workload instance.
   * @param subscriptionId Azure Subscription Id in which project was created.
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param modernizeProjectName ModernizeProject name.
   * @param workloadInstanceName Workload instance name.
   * @param options The options parameters.
   */
  get(
    subscriptionId: string,
    resourceGroupName: string,
    modernizeProjectName: string,
    workloadInstanceName: string,
    options?: WorkloadInstanceGetOptionalParams,
  ): Promise<WorkloadInstanceGetResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        resourceGroupName,
        modernizeProjectName,
        workloadInstanceName,
        options,
      },
      getOperationSpec,
    );
  }

  /**
   * Creates the workload instance in the given modernizeProject.
   * @param subscriptionId Azure Subscription Id in which project was created.
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param modernizeProjectName ModernizeProject name.
   * @param workloadInstanceName Workload instance name.
   * @param options The options parameters.
   */
  create(
    subscriptionId: string,
    resourceGroupName: string,
    modernizeProjectName: string,
    workloadInstanceName: string,
    options?: WorkloadInstanceCreateOptionalParams,
  ): Promise<WorkloadInstanceCreateResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        resourceGroupName,
        modernizeProjectName,
        workloadInstanceName,
        options,
      },
      createOperationSpec,
    );
  }

  /**
   * Deletes the workload instance in the given modernizeProject.
   * @param subscriptionId Azure Subscription Id in which project was created.
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param modernizeProjectName ModernizeProject Name.
   * @param workloadInstanceName Workload instance name.
   * @param options The options parameters.
   */
  async beginDelete(
    subscriptionId: string,
    resourceGroupName: string,
    modernizeProjectName: string,
    workloadInstanceName: string,
    options?: WorkloadInstanceDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<WorkloadInstanceDeleteResponse>,
      WorkloadInstanceDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<WorkloadInstanceDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        subscriptionId,
        resourceGroupName,
        modernizeProjectName,
        workloadInstanceName,
        options,
      },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<
      WorkloadInstanceDeleteResponse,
      OperationState<WorkloadInstanceDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Deletes the workload instance in the given modernizeProject.
   * @param subscriptionId Azure Subscription Id in which project was created.
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param modernizeProjectName ModernizeProject Name.
   * @param workloadInstanceName Workload instance name.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    subscriptionId: string,
    resourceGroupName: string,
    modernizeProjectName: string,
    workloadInstanceName: string,
    options?: WorkloadInstanceDeleteOptionalParams,
  ): Promise<WorkloadInstanceDeleteResponse> {
    const poller = await this.beginDelete(
      subscriptionId,
      resourceGroupName,
      modernizeProjectName,
      workloadInstanceName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Gets the list of workload instances in the given modernizeProject.
   * @param subscriptionId Azure Subscription Id in which project was created.
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param modernizeProjectName ModernizeProject name.
   * @param options The options parameters.
   */
  private _list(
    subscriptionId: string,
    resourceGroupName: string,
    modernizeProjectName: string,
    options?: WorkloadInstanceListOptionalParams,
  ): Promise<WorkloadInstanceListResponse> {
    return this.client.sendOperationRequest(
      { subscriptionId, resourceGroupName, modernizeProjectName, options },
      listOperationSpec,
    );
  }

  /**
   * Performs the complete migrate on the workload instance.
   * @param subscriptionId Azure Subscription Id in which project was created.
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param modernizeProjectName ModernizeProject name.
   * @param workloadInstanceName Workload instance name.
   * @param options The options parameters.
   */
  async beginMigrateComplete(
    subscriptionId: string,
    resourceGroupName: string,
    modernizeProjectName: string,
    workloadInstanceName: string,
    options?: WorkloadInstanceMigrateCompleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<WorkloadInstanceMigrateCompleteResponse>,
      WorkloadInstanceMigrateCompleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<WorkloadInstanceMigrateCompleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        subscriptionId,
        resourceGroupName,
        modernizeProjectName,
        workloadInstanceName,
        options,
      },
      spec: migrateCompleteOperationSpec,
    });
    const poller = await createHttpPoller<
      WorkloadInstanceMigrateCompleteResponse,
      OperationState<WorkloadInstanceMigrateCompleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Performs the complete migrate on the workload instance.
   * @param subscriptionId Azure Subscription Id in which project was created.
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param modernizeProjectName ModernizeProject name.
   * @param workloadInstanceName Workload instance name.
   * @param options The options parameters.
   */
  async beginMigrateCompleteAndWait(
    subscriptionId: string,
    resourceGroupName: string,
    modernizeProjectName: string,
    workloadInstanceName: string,
    options?: WorkloadInstanceMigrateCompleteOptionalParams,
  ): Promise<WorkloadInstanceMigrateCompleteResponse> {
    const poller = await this.beginMigrateComplete(
      subscriptionId,
      resourceGroupName,
      modernizeProjectName,
      workloadInstanceName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Performs the disable replicate on the workload instance.
   * @param subscriptionId Azure Subscription Id in which project was created.
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param modernizeProjectName ModernizeProject name.
   * @param workloadInstanceName Workload instance name.
   * @param options The options parameters.
   */
  async beginStopReplicate(
    subscriptionId: string,
    resourceGroupName: string,
    modernizeProjectName: string,
    workloadInstanceName: string,
    options?: WorkloadInstanceStopReplicateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<WorkloadInstanceStopReplicateResponse>,
      WorkloadInstanceStopReplicateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<WorkloadInstanceStopReplicateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        subscriptionId,
        resourceGroupName,
        modernizeProjectName,
        workloadInstanceName,
        options,
      },
      spec: stopReplicateOperationSpec,
    });
    const poller = await createHttpPoller<
      WorkloadInstanceStopReplicateResponse,
      OperationState<WorkloadInstanceStopReplicateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Performs the disable replicate on the workload instance.
   * @param subscriptionId Azure Subscription Id in which project was created.
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param modernizeProjectName ModernizeProject name.
   * @param workloadInstanceName Workload instance name.
   * @param options The options parameters.
   */
  async beginStopReplicateAndWait(
    subscriptionId: string,
    resourceGroupName: string,
    modernizeProjectName: string,
    workloadInstanceName: string,
    options?: WorkloadInstanceStopReplicateOptionalParams,
  ): Promise<WorkloadInstanceStopReplicateResponse> {
    const poller = await this.beginStopReplicate(
      subscriptionId,
      resourceGroupName,
      modernizeProjectName,
      workloadInstanceName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * ListNext
   * @param subscriptionId Azure Subscription Id in which project was created.
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param modernizeProjectName ModernizeProject name.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    subscriptionId: string,
    resourceGroupName: string,
    modernizeProjectName: string,
    nextLink: string,
    options?: WorkloadInstanceListNextOptionalParams,
  ): Promise<WorkloadInstanceListNextResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        resourceGroupName,
        modernizeProjectName,
        nextLink,
        options,
      },
      listNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/modernizeProjects/{modernizeProjectName}/workloadInstances/{workloadInstanceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkloadInstanceModel,
    },
    default: {
      bodyMapper: Mappers.ArmError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.modernizeProjectName,
    Parameters.workloadInstanceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/modernizeProjects/{modernizeProjectName}/workloadInstances/{workloadInstanceName}",
  httpMethod: "PUT",
  responses: {
    201: {
      bodyMapper: Mappers.WorkloadInstanceModel,
    },
    default: {
      bodyMapper: Mappers.ArmError,
    },
  },
  requestBody: Parameters.body6,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.modernizeProjectName,
    Parameters.workloadInstanceName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/modernizeProjects/{modernizeProjectName}/workloadInstances/{workloadInstanceName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.WorkloadInstanceDeleteHeaders,
    },
    201: {
      headersMapper: Mappers.WorkloadInstanceDeleteHeaders,
    },
    202: {
      headersMapper: Mappers.WorkloadInstanceDeleteHeaders,
    },
    204: {
      headersMapper: Mappers.WorkloadInstanceDeleteHeaders,
    },
    default: {
      bodyMapper: Mappers.ArmError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.modernizeProjectName,
    Parameters.workloadInstanceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/modernizeProjects/{modernizeProjectName}/workloadInstances",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkloadInstanceModelCollection,
    },
    default: {
      bodyMapper: Mappers.ArmError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.modernizeProjectName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const migrateCompleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/modernizeProjects/{modernizeProjectName}/workloadInstances/{workloadInstanceName}/completeMigration",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.WorkloadInstanceMigrateCompleteHeaders,
    },
    201: {
      headersMapper: Mappers.WorkloadInstanceMigrateCompleteHeaders,
    },
    202: {
      headersMapper: Mappers.WorkloadInstanceMigrateCompleteHeaders,
    },
    204: {
      headersMapper: Mappers.WorkloadInstanceMigrateCompleteHeaders,
    },
    default: {
      bodyMapper: Mappers.ArmError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.modernizeProjectName,
    Parameters.workloadInstanceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const stopReplicateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/modernizeProjects/{modernizeProjectName}/workloadInstances/{workloadInstanceName}/disableReplication",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.WorkloadInstanceStopReplicateHeaders,
    },
    201: {
      headersMapper: Mappers.WorkloadInstanceStopReplicateHeaders,
    },
    202: {
      headersMapper: Mappers.WorkloadInstanceStopReplicateHeaders,
    },
    204: {
      headersMapper: Mappers.WorkloadInstanceStopReplicateHeaders,
    },
    default: {
      bodyMapper: Mappers.ArmError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.modernizeProjectName,
    Parameters.workloadInstanceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkloadInstanceModelCollection,
    },
    default: {
      bodyMapper: Mappers.ArmError,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.modernizeProjectName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
