/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { ModernizeProject } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { AzureMigrateEngineAPIs } from "../azureMigrateEngineAPIs.js";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl.js";
import {
  ModernizeProjectModel,
  ModernizeProjectListBySubscriptionNextOptionalParams,
  ModernizeProjectListBySubscriptionOptionalParams,
  ModernizeProjectListBySubscriptionResponse,
  ModernizeProjectListNextOptionalParams,
  ModernizeProjectListOptionalParams,
  ModernizeProjectListResponse,
  ModernizeProjectGetOptionalParams,
  ModernizeProjectGetResponse,
  ModernizeProjectCreateOptionalParams,
  ModernizeProjectCreateResponse,
  ModernizeProjectUpdateOptionalParams,
  ModernizeProjectUpdateResponse,
  ModernizeProjectDeleteOptionalParams,
  ModernizeProjectDeleteResponse,
  ModernizeProjectListBySubscriptionNextResponse,
  ModernizeProjectListNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing ModernizeProject operations. */
export class ModernizeProjectImpl implements ModernizeProject {
  private readonly client: AzureMigrateEngineAPIs;

  /**
   * Initialize a new instance of the class ModernizeProject class.
   * @param client Reference to the service client
   */
  constructor(client: AzureMigrateEngineAPIs) {
    this.client = client;
  }

  /**
   * Gets the list of modernizeProjects in the given subscription.
   * @param subscriptionId Azure Subscription Id in which project was created.
   * @param options The options parameters.
   */
  public listBySubscription(
    subscriptionId: string,
    options?: ModernizeProjectListBySubscriptionOptionalParams,
  ): PagedAsyncIterableIterator<ModernizeProjectModel> {
    const iter = this.listBySubscriptionPagingAll(subscriptionId, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionPagingPage(
          subscriptionId,
          options,
          settings,
        );
      },
    };
  }

  private async *listBySubscriptionPagingPage(
    subscriptionId: string,
    options?: ModernizeProjectListBySubscriptionOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<ModernizeProjectModel[]> {
    let result: ModernizeProjectListBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySubscription(subscriptionId, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySubscriptionNext(
        subscriptionId,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySubscriptionPagingAll(
    subscriptionId: string,
    options?: ModernizeProjectListBySubscriptionOptionalParams,
  ): AsyncIterableIterator<ModernizeProjectModel> {
    for await (const page of this.listBySubscriptionPagingPage(
      subscriptionId,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Gets the list of modernizeProjects in the given subscription and resource group.
   * @param subscriptionId Azure Subscription Id in which project was created.
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param options The options parameters.
   */
  public list(
    subscriptionId: string,
    resourceGroupName: string,
    options?: ModernizeProjectListOptionalParams,
  ): PagedAsyncIterableIterator<ModernizeProjectModel> {
    const iter = this.listPagingAll(subscriptionId, resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(
          subscriptionId,
          resourceGroupName,
          options,
          settings,
        );
      },
    };
  }

  private async *listPagingPage(
    subscriptionId: string,
    resourceGroupName: string,
    options?: ModernizeProjectListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<ModernizeProjectModel[]> {
    let result: ModernizeProjectListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(subscriptionId, resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        subscriptionId,
        resourceGroupName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    subscriptionId: string,
    resourceGroupName: string,
    options?: ModernizeProjectListOptionalParams,
  ): AsyncIterableIterator<ModernizeProjectModel> {
    for await (const page of this.listPagingPage(
      subscriptionId,
      resourceGroupName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Gets the details of the modernize project.
   * @param subscriptionId Azure Subscription Id in which project was created.
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param modernizeProjectName Modernize project name.
   * @param options The options parameters.
   */
  get(
    subscriptionId: string,
    resourceGroupName: string,
    modernizeProjectName: string,
    options?: ModernizeProjectGetOptionalParams,
  ): Promise<ModernizeProjectGetResponse> {
    return this.client.sendOperationRequest(
      { subscriptionId, resourceGroupName, modernizeProjectName, options },
      getOperationSpec,
    );
  }

  /**
   * Creates the modernizeProject.
   * @param subscriptionId Azure Subscription Id in which project was created.
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param modernizeProjectName ModernizeProject Name.
   * @param options The options parameters.
   */
  create(
    subscriptionId: string,
    resourceGroupName: string,
    modernizeProjectName: string,
    options?: ModernizeProjectCreateOptionalParams,
  ): Promise<ModernizeProjectCreateResponse> {
    return this.client.sendOperationRequest(
      { subscriptionId, resourceGroupName, modernizeProjectName, options },
      createOperationSpec,
    );
  }

  /**
   * Performs update on the modernizeProject.
   * @param subscriptionId Azure Subscription Id in which project was created.
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param modernizeProjectName ModernizeProject Name.
   * @param options The options parameters.
   */
  async beginUpdate(
    subscriptionId: string,
    resourceGroupName: string,
    modernizeProjectName: string,
    options?: ModernizeProjectUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ModernizeProjectUpdateResponse>,
      ModernizeProjectUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ModernizeProjectUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        subscriptionId,
        resourceGroupName,
        modernizeProjectName,
        options,
      },
      spec: updateOperationSpec,
    });
    const poller = await createHttpPoller<
      ModernizeProjectUpdateResponse,
      OperationState<ModernizeProjectUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Performs update on the modernizeProject.
   * @param subscriptionId Azure Subscription Id in which project was created.
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param modernizeProjectName ModernizeProject Name.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    subscriptionId: string,
    resourceGroupName: string,
    modernizeProjectName: string,
    options?: ModernizeProjectUpdateOptionalParams,
  ): Promise<ModernizeProjectUpdateResponse> {
    const poller = await this.beginUpdate(
      subscriptionId,
      resourceGroupName,
      modernizeProjectName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Removes the modernizeProject.
   * @param subscriptionId Azure Subscription Id in which project was created.
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param modernizeProjectName ModernizeProject Name.
   * @param options The options parameters.
   */
  async beginDelete(
    subscriptionId: string,
    resourceGroupName: string,
    modernizeProjectName: string,
    options?: ModernizeProjectDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ModernizeProjectDeleteResponse>,
      ModernizeProjectDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ModernizeProjectDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        subscriptionId,
        resourceGroupName,
        modernizeProjectName,
        options,
      },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<
      ModernizeProjectDeleteResponse,
      OperationState<ModernizeProjectDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Removes the modernizeProject.
   * @param subscriptionId Azure Subscription Id in which project was created.
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param modernizeProjectName ModernizeProject Name.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    subscriptionId: string,
    resourceGroupName: string,
    modernizeProjectName: string,
    options?: ModernizeProjectDeleteOptionalParams,
  ): Promise<ModernizeProjectDeleteResponse> {
    const poller = await this.beginDelete(
      subscriptionId,
      resourceGroupName,
      modernizeProjectName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Gets the list of modernizeProjects in the given subscription.
   * @param subscriptionId Azure Subscription Id in which project was created.
   * @param options The options parameters.
   */
  private _listBySubscription(
    subscriptionId: string,
    options?: ModernizeProjectListBySubscriptionOptionalParams,
  ): Promise<ModernizeProjectListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { subscriptionId, options },
      listBySubscriptionOperationSpec,
    );
  }

  /**
   * Gets the list of modernizeProjects in the given subscription and resource group.
   * @param subscriptionId Azure Subscription Id in which project was created.
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param options The options parameters.
   */
  private _list(
    subscriptionId: string,
    resourceGroupName: string,
    options?: ModernizeProjectListOptionalParams,
  ): Promise<ModernizeProjectListResponse> {
    return this.client.sendOperationRequest(
      { subscriptionId, resourceGroupName, options },
      listOperationSpec,
    );
  }

  /**
   * ListBySubscriptionNext
   * @param subscriptionId Azure Subscription Id in which project was created.
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    subscriptionId: string,
    nextLink: string,
    options?: ModernizeProjectListBySubscriptionNextOptionalParams,
  ): Promise<ModernizeProjectListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { subscriptionId, nextLink, options },
      listBySubscriptionNextOperationSpec,
    );
  }

  /**
   * ListNext
   * @param subscriptionId Azure Subscription Id in which project was created.
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    subscriptionId: string,
    resourceGroupName: string,
    nextLink: string,
    options?: ModernizeProjectListNextOptionalParams,
  ): Promise<ModernizeProjectListNextResponse> {
    return this.client.sendOperationRequest(
      { subscriptionId, resourceGroupName, nextLink, options },
      listNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/modernizeProjects/{modernizeProjectName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ModernizeProjectModel,
    },
    default: {
      bodyMapper: Mappers.ArmError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.modernizeProjectName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/modernizeProjects/{modernizeProjectName}",
  httpMethod: "PUT",
  responses: {
    201: {
      bodyMapper: Mappers.ModernizeProjectModel,
    },
    default: {
      bodyMapper: Mappers.ArmError,
    },
  },
  requestBody: Parameters.body1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.modernizeProjectName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/modernizeProjects/{modernizeProjectName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.ModernizeProjectModel,
      headersMapper: Mappers.ModernizeProjectUpdateHeaders,
    },
    201: {
      bodyMapper: Mappers.ModernizeProjectModel,
      headersMapper: Mappers.ModernizeProjectUpdateHeaders,
    },
    202: {
      bodyMapper: Mappers.ModernizeProjectModel,
      headersMapper: Mappers.ModernizeProjectUpdateHeaders,
    },
    204: {
      bodyMapper: Mappers.ModernizeProjectModel,
      headersMapper: Mappers.ModernizeProjectUpdateHeaders,
    },
    default: {
      bodyMapper: Mappers.ArmError,
    },
  },
  requestBody: Parameters.body2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.modernizeProjectName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/modernizeProjects/{modernizeProjectName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.ModernizeProjectDeleteHeaders,
    },
    201: {
      headersMapper: Mappers.ModernizeProjectDeleteHeaders,
    },
    202: {
      headersMapper: Mappers.ModernizeProjectDeleteHeaders,
    },
    204: {
      headersMapper: Mappers.ModernizeProjectDeleteHeaders,
    },
    default: {
      bodyMapper: Mappers.ArmError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.modernizeProjectName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Migrate/modernizeProjects",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ModernizeProjectModelCollection,
    },
    default: {
      bodyMapper: Mappers.ArmError,
    },
  },
  queryParameters: [Parameters.apiVersion, Parameters.continuationToken],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer,
};
const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/modernizeProjects",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ModernizeProjectModelCollection,
    },
    default: {
      bodyMapper: Mappers.ArmError,
    },
  },
  queryParameters: [Parameters.apiVersion, Parameters.continuationToken],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ModernizeProjectModelCollection,
    },
    default: {
      bodyMapper: Mappers.ArmError,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ModernizeProjectModelCollection,
    },
    default: {
      bodyMapper: Mappers.ArmError,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
