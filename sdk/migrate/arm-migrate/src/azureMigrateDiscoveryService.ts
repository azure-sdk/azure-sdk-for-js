/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreRestPipeline from "@azure/core-rest-pipeline";
import {
  PipelineRequest,
  PipelineResponse,
  SendRequest,
} from "@azure/core-rest-pipeline";
import * as coreAuth from "@azure/core-auth";
import {
  OperationsImpl,
  HypervSitesImpl,
  ImportSitesControllerImpl,
  MasterSitesControllerImpl,
  ServerSitesControllerImpl,
  SitesControllerImpl,
  HypervSitesControllerImpl,
  HypervDependencyMapControllerImpl,
  HypervClusterControllerImpl,
  HypervHostControllerImpl,
  HypervJobsImpl,
  HypervMachinesControllerImpl,
  HypervSoftwareInventoriesControllerImpl,
  HypervOperationsStatusControllerImpl,
  HypervRunAsAccountsControllerImpl,
  ImportJobsControllerImpl,
  ImportMachinesControllerImpl,
  MasterSitesOperationsStatusControllerImpl,
  PrivateEndpointConnectionControllerImpl,
  PrivateLinkResourcesControllerImpl,
  SqlSitesControllerImpl,
  SqlDiscoverySiteDataSourceControllerImpl,
  SqlJobsControllerImpl,
  SqlOperationsStatusControllerImpl,
  SqlRunAsAccountsControllerImpl,
  SqlAvailabilityGroupsControllerImpl,
  SqlDatabasesControllerImpl,
  SqlServersControllerImpl,
  WebAppSitesControllerImpl,
  WebAppDiscoverySiteDataSourcesControllerImpl,
  WebAppExtendedMachinesControllerImpl,
  IisWebApplicationsControllerImpl,
  IisWebServersControllerImpl,
  WebAppRunAsAccountsControllerImpl,
  TomcatWebApplicationsControllerImpl,
  TomcatWebServersControllerImpl,
  WebAppPropertiesControllerImpl,
  WebApplicationsControllerImpl,
  WebServersControllerImpl,
  ServerDependencyMapControllerImpl,
  ServerJobsControllerImpl,
  ServersControllerImpl,
  ServerSoftwareInventoriesControllerImpl,
  ServerOperationsStatusControllerImpl,
  ServerRunAsAccountsControllerImpl,
  DependencyMapControllerImpl,
  VmwareHostControllerImpl,
  HypervJobsControllerImpl,
  MachinesControllerImpl,
  VmwareSoftwareInventoriesControllerImpl,
  VmwareOperationsStatusImpl,
  RunAsAccountsControllerImpl,
  VmwarePropertiesControllerImpl,
  VcenterControllerImpl,
} from "./operations";
import {
  Operations,
  HypervSites,
  ImportSitesController,
  MasterSitesController,
  ServerSitesController,
  SitesController,
  HypervSitesController,
  HypervDependencyMapController,
  HypervClusterController,
  HypervHostController,
  HypervJobs,
  HypervMachinesController,
  HypervSoftwareInventoriesController,
  HypervOperationsStatusController,
  HypervRunAsAccountsController,
  ImportJobsController,
  ImportMachinesController,
  MasterSitesOperationsStatusController,
  PrivateEndpointConnectionController,
  PrivateLinkResourcesController,
  SqlSitesController,
  SqlDiscoverySiteDataSourceController,
  SqlJobsController,
  SqlOperationsStatusController,
  SqlRunAsAccountsController,
  SqlAvailabilityGroupsController,
  SqlDatabasesController,
  SqlServersController,
  WebAppSitesController,
  WebAppDiscoverySiteDataSourcesController,
  WebAppExtendedMachinesController,
  IisWebApplicationsController,
  IisWebServersController,
  WebAppRunAsAccountsController,
  TomcatWebApplicationsController,
  TomcatWebServersController,
  WebAppPropertiesController,
  WebApplicationsController,
  WebServersController,
  ServerDependencyMapController,
  ServerJobsController,
  ServersController,
  ServerSoftwareInventoriesController,
  ServerOperationsStatusController,
  ServerRunAsAccountsController,
  DependencyMapController,
  VmwareHostController,
  HypervJobsController,
  MachinesController,
  VmwareSoftwareInventoriesController,
  VmwareOperationsStatus,
  RunAsAccountsController,
  VmwarePropertiesController,
  VcenterController,
} from "./operationsInterfaces";
import { AzureMigrateDiscoveryServiceOptionalParams } from "./models";

export class AzureMigrateDiscoveryService extends coreClient.ServiceClient {
  $host: string;
  apiVersion: string;
  subscriptionId: string;

  /**
   * Initializes a new instance of the AzureMigrateDiscoveryService class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param subscriptionId The ID of the target subscription.
   * @param options The parameter options
   */
  constructor(
    credentials: coreAuth.TokenCredential,
    subscriptionId: string,
    options?: AzureMigrateDiscoveryServiceOptionalParams,
  ) {
    if (credentials === undefined) {
      throw new Error("'credentials' cannot be null");
    }
    if (subscriptionId === undefined) {
      throw new Error("'subscriptionId' cannot be null");
    }

    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: AzureMigrateDiscoveryServiceOptionalParams = {
      requestContentType: "application/json; charset=utf-8",
      credential: credentials,
    };

    const packageDetails = `azsdk-js-arm-migrate/3.0.0-beta.1`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix,
      },
      endpoint:
        options.endpoint ?? options.baseUri ?? "https://management.azure.com",
    };
    super(optionsWithDefaults);

    let bearerTokenAuthenticationPolicyFound: boolean = false;
    if (options?.pipeline && options.pipeline.getOrderedPolicies().length > 0) {
      const pipelinePolicies: coreRestPipeline.PipelinePolicy[] =
        options.pipeline.getOrderedPolicies();
      bearerTokenAuthenticationPolicyFound = pipelinePolicies.some(
        (pipelinePolicy) =>
          pipelinePolicy.name ===
          coreRestPipeline.bearerTokenAuthenticationPolicyName,
      );
    }
    if (
      !options ||
      !options.pipeline ||
      options.pipeline.getOrderedPolicies().length == 0 ||
      !bearerTokenAuthenticationPolicyFound
    ) {
      this.pipeline.removePolicy({
        name: coreRestPipeline.bearerTokenAuthenticationPolicyName,
      });
      this.pipeline.addPolicy(
        coreRestPipeline.bearerTokenAuthenticationPolicy({
          credential: credentials,
          scopes:
            optionsWithDefaults.credentialScopes ??
            `${optionsWithDefaults.endpoint}/.default`,
          challengeCallbacks: {
            authorizeRequestOnChallenge:
              coreClient.authorizeRequestOnClaimChallenge,
          },
        }),
      );
    }
    // Parameter assignments
    this.subscriptionId = subscriptionId;

    // Assigning values to Constant parameters
    this.$host = options.$host || "https://management.azure.com";
    this.apiVersion = options.apiVersion || "2023-10-01-preview";
    this.operations = new OperationsImpl(this);
    this.hypervSites = new HypervSitesImpl(this);
    this.importSitesController = new ImportSitesControllerImpl(this);
    this.masterSitesController = new MasterSitesControllerImpl(this);
    this.serverSitesController = new ServerSitesControllerImpl(this);
    this.sitesController = new SitesControllerImpl(this);
    this.hypervSitesController = new HypervSitesControllerImpl(this);
    this.hypervDependencyMapController = new HypervDependencyMapControllerImpl(
      this,
    );
    this.hypervClusterController = new HypervClusterControllerImpl(this);
    this.hypervHostController = new HypervHostControllerImpl(this);
    this.hypervJobs = new HypervJobsImpl(this);
    this.hypervMachinesController = new HypervMachinesControllerImpl(this);
    this.hypervSoftwareInventoriesController =
      new HypervSoftwareInventoriesControllerImpl(this);
    this.hypervOperationsStatusController =
      new HypervOperationsStatusControllerImpl(this);
    this.hypervRunAsAccountsController = new HypervRunAsAccountsControllerImpl(
      this,
    );
    this.importJobsController = new ImportJobsControllerImpl(this);
    this.importMachinesController = new ImportMachinesControllerImpl(this);
    this.masterSitesOperationsStatusController =
      new MasterSitesOperationsStatusControllerImpl(this);
    this.privateEndpointConnectionController =
      new PrivateEndpointConnectionControllerImpl(this);
    this.privateLinkResourcesController =
      new PrivateLinkResourcesControllerImpl(this);
    this.sqlSitesController = new SqlSitesControllerImpl(this);
    this.sqlDiscoverySiteDataSourceController =
      new SqlDiscoverySiteDataSourceControllerImpl(this);
    this.sqlJobsController = new SqlJobsControllerImpl(this);
    this.sqlOperationsStatusController = new SqlOperationsStatusControllerImpl(
      this,
    );
    this.sqlRunAsAccountsController = new SqlRunAsAccountsControllerImpl(this);
    this.sqlAvailabilityGroupsController =
      new SqlAvailabilityGroupsControllerImpl(this);
    this.sqlDatabasesController = new SqlDatabasesControllerImpl(this);
    this.sqlServersController = new SqlServersControllerImpl(this);
    this.webAppSitesController = new WebAppSitesControllerImpl(this);
    this.webAppDiscoverySiteDataSourcesController =
      new WebAppDiscoverySiteDataSourcesControllerImpl(this);
    this.webAppExtendedMachinesController =
      new WebAppExtendedMachinesControllerImpl(this);
    this.iisWebApplicationsController = new IisWebApplicationsControllerImpl(
      this,
    );
    this.iisWebServersController = new IisWebServersControllerImpl(this);
    this.webAppRunAsAccountsController = new WebAppRunAsAccountsControllerImpl(
      this,
    );
    this.tomcatWebApplicationsController =
      new TomcatWebApplicationsControllerImpl(this);
    this.tomcatWebServersController = new TomcatWebServersControllerImpl(this);
    this.webAppPropertiesController = new WebAppPropertiesControllerImpl(this);
    this.webApplicationsController = new WebApplicationsControllerImpl(this);
    this.webServersController = new WebServersControllerImpl(this);
    this.serverDependencyMapController = new ServerDependencyMapControllerImpl(
      this,
    );
    this.serverJobsController = new ServerJobsControllerImpl(this);
    this.serversController = new ServersControllerImpl(this);
    this.serverSoftwareInventoriesController =
      new ServerSoftwareInventoriesControllerImpl(this);
    this.serverOperationsStatusController =
      new ServerOperationsStatusControllerImpl(this);
    this.serverRunAsAccountsController = new ServerRunAsAccountsControllerImpl(
      this,
    );
    this.dependencyMapController = new DependencyMapControllerImpl(this);
    this.vmwareHostController = new VmwareHostControllerImpl(this);
    this.hypervJobsController = new HypervJobsControllerImpl(this);
    this.machinesController = new MachinesControllerImpl(this);
    this.vmwareSoftwareInventoriesController =
      new VmwareSoftwareInventoriesControllerImpl(this);
    this.vmwareOperationsStatus = new VmwareOperationsStatusImpl(this);
    this.runAsAccountsController = new RunAsAccountsControllerImpl(this);
    this.vmwarePropertiesController = new VmwarePropertiesControllerImpl(this);
    this.vcenterController = new VcenterControllerImpl(this);
    this.addCustomApiVersionPolicy(options.apiVersion);
  }

  /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
  private addCustomApiVersionPolicy(apiVersion?: string) {
    if (!apiVersion) {
      return;
    }
    const apiVersionPolicy = {
      name: "CustomApiVersionPolicy",
      async sendRequest(
        request: PipelineRequest,
        next: SendRequest,
      ): Promise<PipelineResponse> {
        const param = request.url.split("?");
        if (param.length > 1) {
          const newParams = param[1].split("&").map((item) => {
            if (item.indexOf("api-version") > -1) {
              return "api-version=" + apiVersion;
            } else {
              return item;
            }
          });
          request.url = param[0] + "?" + newParams.join("&");
        }
        return next(request);
      },
    };
    this.pipeline.addPolicy(apiVersionPolicy);
  }

  operations: Operations;
  hypervSites: HypervSites;
  importSitesController: ImportSitesController;
  masterSitesController: MasterSitesController;
  serverSitesController: ServerSitesController;
  sitesController: SitesController;
  hypervSitesController: HypervSitesController;
  hypervDependencyMapController: HypervDependencyMapController;
  hypervClusterController: HypervClusterController;
  hypervHostController: HypervHostController;
  hypervJobs: HypervJobs;
  hypervMachinesController: HypervMachinesController;
  hypervSoftwareInventoriesController: HypervSoftwareInventoriesController;
  hypervOperationsStatusController: HypervOperationsStatusController;
  hypervRunAsAccountsController: HypervRunAsAccountsController;
  importJobsController: ImportJobsController;
  importMachinesController: ImportMachinesController;
  masterSitesOperationsStatusController: MasterSitesOperationsStatusController;
  privateEndpointConnectionController: PrivateEndpointConnectionController;
  privateLinkResourcesController: PrivateLinkResourcesController;
  sqlSitesController: SqlSitesController;
  sqlDiscoverySiteDataSourceController: SqlDiscoverySiteDataSourceController;
  sqlJobsController: SqlJobsController;
  sqlOperationsStatusController: SqlOperationsStatusController;
  sqlRunAsAccountsController: SqlRunAsAccountsController;
  sqlAvailabilityGroupsController: SqlAvailabilityGroupsController;
  sqlDatabasesController: SqlDatabasesController;
  sqlServersController: SqlServersController;
  webAppSitesController: WebAppSitesController;
  webAppDiscoverySiteDataSourcesController: WebAppDiscoverySiteDataSourcesController;
  webAppExtendedMachinesController: WebAppExtendedMachinesController;
  iisWebApplicationsController: IisWebApplicationsController;
  iisWebServersController: IisWebServersController;
  webAppRunAsAccountsController: WebAppRunAsAccountsController;
  tomcatWebApplicationsController: TomcatWebApplicationsController;
  tomcatWebServersController: TomcatWebServersController;
  webAppPropertiesController: WebAppPropertiesController;
  webApplicationsController: WebApplicationsController;
  webServersController: WebServersController;
  serverDependencyMapController: ServerDependencyMapController;
  serverJobsController: ServerJobsController;
  serversController: ServersController;
  serverSoftwareInventoriesController: ServerSoftwareInventoriesController;
  serverOperationsStatusController: ServerOperationsStatusController;
  serverRunAsAccountsController: ServerRunAsAccountsController;
  dependencyMapController: DependencyMapController;
  vmwareHostController: VmwareHostController;
  hypervJobsController: HypervJobsController;
  machinesController: MachinesController;
  vmwareSoftwareInventoriesController: VmwareSoftwareInventoriesController;
  vmwareOperationsStatus: VmwareOperationsStatus;
  runAsAccountsController: RunAsAccountsController;
  vmwarePropertiesController: VmwarePropertiesController;
  vcenterController: VcenterController;
}
