/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** Cluster REST Resource. */
export interface HyperVCluster {
  /**
   * Resource Id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /** Name of the cluster. */
  name?: string;
  /**
   * Type of resource. Type = Microsoft.OffAzure/hyperVSites/clusters.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Nested properties of the cluster. */
  properties?: HyperVClusterProperties;
}

/** Class for cluster properties. */
export interface HyperVClusterProperties {
  /**
   * Timestamp marking Hyper-V cluster creation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdTimestamp?: string;
  /**
   * Timestamp marking last updated on the Hyper-V cluster.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly updatedTimestamp?: string;
  /** FQDN/IPAddress of the Hyper-V cluster. */
  fqdn?: string;
  /**
   * Functional level of the Hyper-V cluster.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly functionalLevel?: number;
  /**
   * Status of the Hyper-V cluster.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: string;
  /** Run as account ID of the Hyper-V cluster. */
  runAsAccountId?: string;
  /** List of hosts (FQDN) currently being tracked by the cluster. */
  hostFqdnList?: string[];
  /**
   * Errors for Hyper-V clusters.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly errors?: HealthErrorDetails[];
}

/** Error contract returned when some exception occurs in Rest API. */
export interface HealthErrorDetails {
  /**
   * Error ID.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: number;
  /**
   * Error name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * Error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * Possible causes of error.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly possibleCauses?: string;
  /**
   * Recommended action to resolve error.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly recommendedAction?: string;
  /**
   * Error severity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly severity?: string;
  /**
   * Error summary message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly summaryMessage?: string;
  /**
   * Error source.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly source?: string;
  /**
   * Message parameters.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly messageParameters?: { [propertyName: string]: string };
}

/** Collection of Hyper-V clusters. */
export interface HyperVClusterCollection {
  /**
   * List of clusters.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: HyperVCluster[];
  /**
   * Value of next link.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Host REST Resource. */
export interface HyperVHost {
  /**
   * Resource Id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /** Name of the host. */
  name?: string;
  /**
   * Type of resource. Type = Microsoft.OffAzure/hyperVSites/hosts.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Nested properties. */
  properties?: HyperVHostProperties;
}

/** Class for host properties. */
export interface HyperVHostProperties {
  /**
   * Timestamp marking Hyper-V host creation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdTimestamp?: string;
  /**
   * Timestamp marking last updated on the Hyper-V host.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly updatedTimestamp?: string;
  /** FQDN/IPAddress of the Hyper-V host. */
  fqdn?: string;
  /** Run as account ID of the Hyper-V host. */
  runAsAccountId?: string;
  /**
   * Version of the Hyper-V host.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly version?: string;
  /**
   * Errors for Hyper-V hosts.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly errors?: HealthErrorDetails[];
}

/** Collection of Hyper-V hosts. */
export interface HyperVHostCollection {
  /**
   * List of hosts.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: HyperVHost[];
  /**
   * Value of next link.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Job REST Resource. */
export interface HyperVJob {
  /**
   * Resource Id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Name of the Job.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Type of resource. Type = Microsoft.OffAzure/HyperVSites/Jobs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * nested properties of Hyper-V job.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly properties?: JobProperties;
}

/** Class for machine properties. */
export interface JobProperties {
  /**
   * Operation status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: string;
  /**
   * Operation start time.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startTime?: string;
  /**
   * Operation end time.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endTime?: string;
  /**
   * Display name of the Job.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly displayName?: string;
  /**
   * Client request Id used in the operation execution context.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly clientRequestId?: string;
  /**
   * Activity Id used in the operation execution context.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly activityId?: string;
  /**
   * Errors.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly errors?: ErrorDetails[];
}

/** Error contract returned when some exception occurs in Rest API. */
export interface ErrorDetails {
  /**
   * Error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * Error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * Possible causes of error.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly possibleCauses?: string;
  /**
   * Recommended action to resolve error.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly recommendedAction?: string;
  /**
   * Error severity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly severity?: string;
  /**
   * Value indicating whether the error originated from a agent or not.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isAgentReportedError?: boolean;
  /**
   * Agent error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly agentErrorCode?: string;
  /**
   * Error message from the agent.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly agentErrorMessage?: string;
  /**
   * Possible causes for the agent error.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly agentErrorPossibleCauses?: string;
  /**
   * Recommended action for the agent error.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly agentErrorRecommendedAction?: string;
}

/** Collection of Hyper-V jobs. */
export interface HyperVJobCollection {
  /**
   * List of jobs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: HyperVJob[];
  /**
   * Value of next link.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Machine REST Resource. */
export interface HyperVMachine {
  /**
   * Resource Id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Name of the Sites.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Type of resource. Type = Microsoft.OffAzure/HyperVSites/Machines.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Nested properties.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly properties?: HyperVMachineProperties;
}

/** Class for machine properties. */
export interface HyperVMachineProperties {
  /**
   * Host FQDN/IPAddress.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly hostFqdn?: string;
  /**
   * Host ARM ID.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly hostId?: string;
  /**
   * Cluster FQDN/IPAddress.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly clusterFqdn?: string;
  /**
   * Cluster ARM ID.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly clusterId?: string;
  /**
   * Management server type of the machine. It is either Host or Cluster.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly managementServerType?: string;
  /**
   * Generation of the virtual machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly generation?: number;
  /**
   * VM version.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly version?: string;
  /**
   * Value indicating whether the VM is highly available.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly highAvailability?: HighlyAvailable;
  /**
   * Max memory of the virtual machine in MB.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly maxMemoryMB?: number;
  /**
   * Firmware of the machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly firmware?: string;
  /**
   * Value indicating whether dynamic memory is enabled for the VM.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isDynamicMemoryEnabled?: boolean;
  /**
   * Disks attached to the machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly disks?: HyperVDisk[];
  /**
   * Apps and Roles of the VM.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly appsAndRoles?: AppsAndRoles;
  /**
   * Network adapters attached to the machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkAdapters?: HyperVNetworkAdapter[];
  /**
   * Display name of the machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly displayName?: string;
  /**
   * Number of Processor Cores allocated for the machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly numberOfProcessorCore?: number;
  /**
   * Allocated Memory in MB.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly allocatedMemoryInMB?: number;
  /**
   * Root location of the VM configuration file.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly vmConfigurationFileLocation?: string;
  /**
   * Operating System Details installed on the machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operatingSystemDetails?: OperatingSystem;
  /**
   * Operating System Details extracted from the guest by executing script inside the guest VM.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly guestOSDetails?: GuestOSDetails;
  /**
   * Number of applications installed in the guest VM.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly numberOfApplications?: number;
  /**
   * The last time at which the Guest Details of machine was discovered.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly guestDetailsDiscoveryTimestamp?: Date;
  /**
   * Whether Refresh Fabric Layout Guest Details has been completed once. Portal will show discovery in progress, if this value is true.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isGuestDetailsDiscoveryInProgress?: boolean;
  /**
   * Timestamp marking machine creation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdTimestamp?: string;
  /**
   * Timestamp marking last updated on the machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly updatedTimestamp?: string;
  /**
   * On-premise Instance UUID of the machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly instanceUuid?: string;
  /**
   * Machine power status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly powerStatus?: string;
  /**
   * Machine BIOS serial number.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly biosSerialNumber?: string;
  /**
   * Machine BIOS GUID.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly biosGuid?: string;
  /**
   * Machine FQDN.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly vmFqdn?: string;
  /**
   * Value indicating whether VM is deleted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isDeleted?: boolean;
  /**
   * Errors for machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly errors?: HealthErrorDetails[];
}

/** Second level object returned as part of Machine REST resource. */
export interface HyperVDisk {
  /**
   * Id of the disk.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly instanceId?: string;
  /**
   * VHD Id of the disk.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly vhdId?: string;
  /**
   * Bytes allocated for the disk.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly maxSizeInBytes?: number;
  /**
   * Name of the disk.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Type of the disk.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly diskType?: string;
  /**
   * LUN of the disk.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lun?: number;
  /**
   * Path of the disk.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly path?: string;
}

/** AppsAndRoles in the guest virtual machine. */
export interface AppsAndRoles {
  /**
   * Applications of the AppsAndRoles.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly applications?: Application[];
  /**
   * WebApplications of the AppsAndRoles.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly webApplications?: WebApplication[];
  /**
   * Features of the AppsAndRoles.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly features?: Feature[];
  /**
   * SQLServers of the AppsAndRoles.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sqlServers?: SQLServer[];
  /**
   * SharePointServers of the AppsAndRoles.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sharePointServers?: SharePointServer[];
  /**
   * SystemCenters of the AppsAndRoles.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemCenters?: SystemCenter[];
  /**
   * BizTalkServers of the AppsAndRoles.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly bizTalkServers?: BizTalkServer[];
  /**
   * ExchangeServers of the AppsAndRoles.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly exchangeServers?: ExchangeServer[];
  /**
   * OtherDatabaseServers of the AppsAndRoles.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly otherDatabases?: OtherDatabase[];
}

/** Application in the guest virtual machine. */
export interface Application {
  /**
   * Name of the Application.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Version of the Application.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly version?: string;
  /**
   * Provider of the Application.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provider?: string;
}

/** WebApplication in the guest virtual machine. */
export interface WebApplication {
  /**
   * Name of the WebApplication.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Status of the WebApplication.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: string;
  /**
   * Platform of the WebApplication.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly platform?: string;
  /**
   * GroupName of the WebApplication.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly groupName?: string;
  /**
   * WebServer of the WebApplication.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly webServer?: string;
  /**
   * ApplicationPool of the WebApplication.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly applicationPool?: string;
}

/** Feature in the guest virtual machine. */
export interface Feature {
  /**
   * Name of the Feature.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * FeatureType of the Feature.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly featureType?: string;
  /**
   * Parent of the Feature.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly parent?: string;
  /**
   * Status of the Feature.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: string;
}

/** SQLServer in the guest virtual machine. */
export interface SQLServer {
  /**
   * Name of the SQLServer.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Edition of the SQLServer.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly edition?: string;
  /**
   * ServicePack of the SQLServer.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly servicePack?: string;
  /**
   * Version of the SQLServer.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly version?: string;
  /**
   * Clustered of the SQLServer.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly clustered?: string;
  /**
   * ClusterName of the SQLServer.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly clusterName?: string;
}

/** SharePointServer in the guest virtual machine. */
export interface SharePointServer {
  /**
   * ProductName of the SharePointServer.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly productName?: string;
  /**
   * Value indicating whether the SharePointServer is Enterprise.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isEnterprise?: boolean;
  /**
   * Status of the SharePointServer.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: string;
  /**
   * Version of the SharePointServer.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly version?: string;
}

/** SystemCenter in the guest virtual machine. */
export interface SystemCenter {
  /**
   * ProductName of the SystemCenter.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly productName?: string;
  /**
   * Status of the SystemCenter.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: string;
  /**
   * Version of the SystemCenter.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly version?: string;
}

/** BizTalkServer in the guest virtual machine. */
export interface BizTalkServer {
  /**
   * ProductName of the BizTalkServer.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly productName?: string;
  /**
   * Status of the BizTalkServer.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: string;
}

/** ExchangeServer in the guest virtual machine. */
export interface ExchangeServer {
  /**
   * ProductName of the ExchangeServer.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly productName?: string;
  /**
   * Edition of the ExchangeServer.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly edition?: string;
  /**
   * Roles of the ExchangeServer.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly roles?: string;
  /**
   * ServicePack of the ExchangeServer.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly servicePack?: string;
  /**
   * Version of the ExchangeServer.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly version?: string;
}

/** OtherDatabase in the guest virtual machine. */
export interface OtherDatabase {
  /**
   * DatabaseType of the OtherDatabase.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly databaseType?: string;
  /**
   * Instance of the OtherDatabase.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly instance?: string;
  /**
   * Version of the OtherDatabase.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly version?: string;
}

/** Second level object represented in responses as part of Machine REST resource. */
export interface HyperVNetworkAdapter {
  /**
   * Network Id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkId?: string;
  /**
   * Name of the VM subnet within the virtual network the NIC is attached to.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly subnetName?: string;
  /**
   * Static IP address.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly staticIpAddress?: string;
  /**
   * Mac address of the NIC.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nicType?: string;
  /**
   * NIC Id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nicId?: string;
  /**
   * Mac address of the NIC.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly macAddress?: string;
  /**
   * IP addresses for the machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ipAddressList?: string[];
  /**
   * Network Name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkName?: string;
  /**
   * Type of the IP address.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ipAddressType?: string;
}

/** Second level object returned as part of Machine REST resource. */
export interface OperatingSystem {
  /**
   * Type of the operating system.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly osType?: string;
  /**
   * Name of the operating system.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly osName?: string;
  /**
   * Version of the operating system.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly osVersion?: string;
}

/** Data related to a machine's operating system. Serialized and stored as part of Machine Rest object. */
export interface GuestOSDetails {
  /** Type of the operating system. */
  osType?: string;
  /**
   * Name of the operating system.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly osName?: string;
  /**
   * Version of the operating system.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly osVersion?: string;
}

/** Collection of Hyper-V machines. */
export interface HyperVMachineCollection {
  /**
   * List of machines.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: HyperVMachine[];
  /**
   * Value of next link.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Operation status REST resource. */
export interface OperationStatus {
  /**
   * Resource Id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Operation name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Status of the operation. ARM expects the terminal status to be one of Succeeded/ Failed/ Canceled. All other values imply that the operation is still running.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: string;
  /**
   * Start time.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startTime?: string;
  /**
   * End time.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endTime?: string;
  /**
   * Error stating all error details for the operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly error?: OperationStatusError;
  /**
   * Custom data.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly properties?: OperationStatusProperties;
}

/** Class for operation status errors. */
export interface OperationStatusError {
  /**
   * Error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * Error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
}

/** Class for operation result properties. */
export interface OperationStatusProperties {
  /** Result or output of the workflow. */
  result?: string;
}

/** Run as account REST Resource. */
export interface HyperVRunAsAccount {
  /**
   * Resource Id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Name of the Sites.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Type of resource. Type = Microsoft.OffAzure/HyperVSites/RunAsAccounts.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Nested properties of run as account.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly properties?: RunAsAccountProperties;
}

/** Class for run as account properties. */
export interface RunAsAccountProperties {
  /**
   * Display name of the run as account.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly displayName?: string;
  /**
   * Credential type of the run as account.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly credentialType?: CredentialType;
  /**
   * Timestamp marking run as account creation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdTimestamp?: string;
  /**
   * Timestamp marking last updated on the run as account.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly updatedTimestamp?: string;
}

/** Collection of Hyper-V run as accounts. */
export interface HyperVRunAsAccountCollection {
  /**
   * List of run as accounts.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: HyperVRunAsAccount[];
  /**
   * Value of next link.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Site REST Resource. */
export interface HyperVSite {
  /**
   * Resource Id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /** Name of the Hyper-V site. */
  name?: string;
  /**
   * Type of resource. Type = Microsoft.OffAzure/HyperVSites.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Dictionary of <string> */
  tags?: { [propertyName: string]: string };
  /** eTag for concurrency control. */
  eTag?: string;
  /** Azure location in which Sites is created. */
  location?: string;
  /** Nested properties of Hyper-V site. */
  properties?: SiteProperties;
}

/** Class for site properties. */
export interface SiteProperties {
  /** Service principal identity details used by agent for communication to the service. */
  servicePrincipalIdentityDetails?: SiteSpnProperties;
  /** On-premises agent details. */
  agentDetails?: SiteAgentProperties;
  /**
   * Service endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly serviceEndpoint?: string;
  /** ARM ID of migration hub solution for SDS. */
  discoverySolutionId?: string;
  /** Appliance Name. */
  applianceName?: string;
}

/** Class for site properties. */
export interface SiteSpnProperties {
  /** Tenant Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services. */
  tenantId?: string;
  /** Application/client Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services. */
  applicationId?: string;
  /** Object Id of the service principal with which the on-premise management/data plane components would communicate with our Azure services. */
  objectId?: string;
  /** Intended audience for the service principal. */
  audience?: string;
  /** AAD Authority URL which was used to request the token for the service principal. */
  aadAuthority?: string;
  /** Raw certificate data for building certificate expiry flows. */
  rawCertData?: string;
}

/** Class for site agent properties. */
export interface SiteAgentProperties {
  /**
   * ID of the agent.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Version of the agent.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly version?: string;
  /**
   * Last heartbeat time of the agent in UTC.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastHeartBeatUtc?: Date;
  /** Key vault URI. */
  keyVaultUri?: string;
  /** Key vault ARM Id. */
  keyVaultId?: string;
}

/** Collection of SiteHealthSummary. */
export interface SiteHealthSummaryCollection {
  /**
   * List of SiteHealthSummary.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: SiteHealthSummary[];
  /**
   * Value of next link.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Site health summary model. */
export interface SiteHealthSummary {
  /**
   * Appliance name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly applianceName?: string;
  /**
   * Error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly errorMessage?: string;
  /**
   * Summary message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly summaryMessage?: string;
  /**
   * Error Id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly errorId?: number;
  /**
   * Error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly errorCode?: string;
  /** Count of affected objects. */
  affectedObjectsCount?: number;
  /** Hit count of the error. */
  hitCount?: number;
  /**
   * Severity of error.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly severity?: string;
  /**
   * Remediation guidance.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly remediationGuidance?: string;
  /**
   * Affected resource type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly affectedResourceType?: string;
  /** Affected resources. */
  affectedResources?: string[];
}

/** Job REST Resource. */
export interface VMwareJob {
  /**
   * Resource Id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Name of the job.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Type of resource. Type = Microsoft.OffAzure/VMWareSites/Jobs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Nested properties of job.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly properties?: JobProperties;
}

/** Collection of VMware jobs. */
export interface VMwareJobCollection {
  /**
   * List of jobs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: VMwareJob[];
  /**
   * Value of next link.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Machine REST Resource. */
export interface VMwareMachine {
  /**
   * Resource Id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Name of the Sites.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Type of resource. Type = Microsoft.OffAzure/VMWareSites/Machines.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Nested properties.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly properties?: VMwareMachineProperties;
}

/** Class for machine properties. */
export interface VMwareMachineProperties {
  /**
   * Scope of the data center.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly dataCenterScope?: string;
  /**
   * Firmware of the machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly firmware?: string;
  /**
   * User description of the machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
  /**
   * VCenter FQDN/IPAddress.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly vCenterFqdn?: string;
  /**
   * VCenter ARM ID.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly vCenterId?: string;
  /**
   * VMware tools status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly vMwareToolsStatus?: string;
  /**
   * Value indicating whether change tracking is supported.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly changeTrackingSupported?: boolean;
  /**
   * Value indicating whether change tracking is enabled.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly changeTrackingEnabled?: boolean;
  /**
   * Maximum number of snapshots for the VM. Default value is -1.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly maxSnapshots?: number;
  /**
   * Disks attached to the machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly disks?: VMwareDisk[];
  /**
   * Apps And Roles of the VM.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly appsAndRoles?: AppsAndRoles;
  /**
   * Indicates whether the host is in maintenance mode.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly hostInMaintenanceMode?: boolean;
  /**
   * The host name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly hostName?: string;
  /**
   * The host power state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly hostPowerState?: string;
  /**
   * The host version.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly hostVersion?: string;
  /**
   * Network adapters attached to the machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkAdapters?: VMwareNetworkAdapter[];
  /**
   * If dependency mapping feature is enabled or not for the VM.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly dependencyMapping?: string;
  /**
   * When dependency mapping collection is last started.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly dependencyMappingStartTime?: Date;
  /**
   * Display name of the machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly displayName?: string;
  /**
   * Number of Processor Cores allocated for the machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly numberOfProcessorCore?: number;
  /**
   * Allocated Memory in MB.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly allocatedMemoryInMB?: number;
  /**
   * Root location of the VM configuration file.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly vmConfigurationFileLocation?: string;
  /**
   * Operating System Details installed on the machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operatingSystemDetails?: OperatingSystem;
  /**
   * Operating System Details extracted from the guest bu executing script inside the guest VM.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly guestOSDetails?: GuestOSDetails;
  /**
   * Number of applications installed in the guest VM.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly numberOfApplications?: number;
  /**
   * The last time at which the Guest Details was discovered or the error while discovering guest details based discovery of the machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly guestDetailsDiscoveryTimestamp?: Date;
  /**
   * Whether Refresh Fabric Layout Guest Details has been completed once. Portal will show discovery in progress, if this value is true.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isGuestDetailsDiscoveryInProgress?: boolean;
  /**
   * Timestamp marking machine creation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdTimestamp?: string;
  /**
   * Timestamp marking last updated on the machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly updatedTimestamp?: string;
  /**
   * On-premise Instance UUID of the machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly instanceUuid?: string;
  /**
   * Machine power status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly powerStatus?: string;
  /**
   * Machine BIOS serial number.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly biosSerialNumber?: string;
  /**
   * BIOS GUID.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly biosGuid?: string;
  /**
   * Machine FQDN.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly vmFqdn?: string;
  /**
   * Value indicating whether VM is deleted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isDeleted?: boolean;
  /**
   * Errors for machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly errors?: HealthErrorDetails[];
}

/** Second level object returned as part of Machine REST resource. */
export interface VMwareDisk {
  /**
   * Disk UUID.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uuid?: string;
  /**
   * Label of the disk.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly label?: string;
  /**
   * The provisioning policy of the disk. It is Thin or Thick or Unknown for the VMWare.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly diskProvisioningPolicy?: string;
  /**
   * The scrubbing policy of disks which can be eagerly zeroed or lazily zeroed.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly diskScrubbingPolicy?: string;
  /**
   * Disk mode property used for identifying independent disks.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly diskMode?: VirtualDiskMode;
  /**
   * Bytes allocated for the disk.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly maxSizeInBytes?: number;
  /**
   * Name of the disk.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Type of the disk.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly diskType?: string;
  /**
   * LUN of the disk.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lun?: number;
  /**
   * Path of the disk.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly path?: string;
}

/** Second level object represented in responses as part of Machine REST resource. */
export interface VMwareNetworkAdapter {
  /**
   * Label of the NIC.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly label?: string;
  /**
   * NIC Id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nicId?: string;
  /**
   * Mac address of the NIC.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly macAddress?: string;
  /**
   * IP addresses for the machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ipAddressList?: string[];
  /**
   * Network Name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkName?: string;
  /**
   * Type of the IP address.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ipAddressType?: string;
}

/** Collection of VMware machines. */
export interface VMwareMachineCollection {
  /**
   * List of machines.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: VMwareMachine[];
  /**
   * Value of next link.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Run as account REST Resource. */
export interface VMwareRunAsAccount {
  /**
   * Resource Id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Name of the Run as account.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Type of resource. Type = Microsoft.OffAzure/VMWareSites/RunAsAccounts.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Nested properties of Run as account.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly properties?: RunAsAccountProperties;
}

/** Collection of VMware run as accounts. */
export interface VMwareRunAsAccountCollection {
  /**
   * List of run as accounts.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: VMwareRunAsAccount[];
  /**
   * Value of next link.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Site REST Resource. */
export interface VMwareSite {
  /**
   * Resource Id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /** Name of the VMware site. */
  name?: string;
  /**
   * Type of resource. Type = Microsoft.OffAzure/VMWareSites.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Dictionary of <string> */
  tags?: { [propertyName: string]: string };
  /** eTag for concurrency control. */
  eTag?: string;
  /** Azure location in which Sites is created. */
  location?: string;
  /** Nested properties of VMWare site. */
  properties?: SiteProperties;
}

/** VCenter REST Resource. */
export interface VCenter {
  /**
   * Resource Id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /** Name of the vCenter. */
  name?: string;
  /**
   * Type of resource. Type = Microsoft.OffAzure/VMWareSites/VCenters.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** vCenter nested properties. */
  properties?: VCenterProperties;
}

/** Class for vCenter properties. */
export interface VCenterProperties {
  /**
   * Timestamp marking vCenter creation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdTimestamp?: string;
  /**
   * Timestamp marking last updated on the vCenter.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly updatedTimestamp?: string;
  /** FQDN/IPAddress of the vCenter. */
  fqdn?: string;
  /** Port of the vCenter. */
  port?: string;
  /** Run as account ID of the vCenter. */
  runAsAccountId?: string;
  /**
   * Version of the vCenter.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly version?: string;
  /**
   * Performance statistics enabled on the vCenter.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly perfStatisticsLevel?: string;
  /**
   * Instance UUID of the vCenter.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly instanceUuid?: string;
  /**
   * Error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly errors?: HealthErrorDetails[];
}

/** Collection of vCenter. */
export interface VCenterCollection {
  /**
   * List of vCenter.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: VCenter[];
  /**
   * Value of next link.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Hyper-V site usage. */
export interface HyperVSiteUsage {
  /** Number of machines discovered in the site. */
  machineCount?: number;
  /** Number of run as accounts in the site. */
  runAsAccountCount?: number;
  /** Number of hosts part of the site. */
  hostCount?: number;
  /** Number of clusters part of the site. */
  clusterCount?: number;
}

/** VMware site usage. */
export interface VMwareSiteUsage {
  /** Number of machines discovered in the site. */
  machineCount?: number;
  /** Number of run as accounts in the site. */
  runAsAccountCount?: number;
  /** Number of vCenters part of the site. */
  vCenterCount?: number;
}

/** List of API operations. */
export interface OperationResultList {
  /**
   * List of operations.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Operation[];
  /**
   * Value of next link.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** A REST API operation supported by the provider. */
export interface Operation {
  /**
   * Name of the operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Displayable properties of the operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly display?: OperationDisplay;
  /**
   * Origin of the operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly origin?: string;
}

/** Displayable properties of the operation. */
export interface OperationDisplay {
  /**
   * Provider of the operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provider?: string;
  /**
   * Resource operated on by the operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resource?: string;
  /**
   * Operation Type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operation?: string;
  /**
   * Description of the operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
}

export interface Machine {
  propertiesTimestamp?: Date;
  propertiesMonitoringState?: MachinePropertiesMonitoringState;
  propertiesVirtualizationState?: MachinePropertiesVirtualizationState;
  propertiesDisplayName?: string;
  propertiesComputerName?: string;
  propertiesFullyQualifiedDomainName?: string;
  propertiesBootTime?: Date;
  propertiesTimezone?: Timezone;
  propertiesAgent?: AgentConfiguration;
  propertiesResources?: MachineResourcesConfiguration;
  propertiesNetworking?: NetworkConfiguration;
  propertiesOperatingSystem?: OperatingSystemConfiguration;
  propertiesVirtualMachine?: VirtualMachineConfiguration;
  propertiesHypervisor?: HypervisorConfiguration;
  propertiesHosting?: HostingConfiguration;
  etag?: string;
  id?: string;
  type?: string;
  name?: string;
}

export interface Timezone {
  fullName?: string;
}

export interface AgentConfiguration {
  agentId?: string;
  dependencyAgentId?: string;
  dependencyAgentVersion?: string;
  dependencyAgentRevision?: string;
  rebootStatus?: AgentConfigurationRebootStatus;
  clockGranularity?: number;
}

export interface MachineResourcesConfiguration {
  physicalMemory?: number;
  cpus?: number;
  cpuSpeed?: number;
  cpuSpeedAccuracy?: MachineResourcesConfigurationCpuSpeedAccuracy;
}

export interface NetworkConfiguration {
  ipv4Interfaces?: Ipv4NetworkInterface[];
  ipv6Interfaces?: Ipv6NetworkInterface[];
  defaultIpv4Gateways?: string[];
  macAddresses?: string[];
  dnsNames?: string[];
  dnsQuestions?: string[];
  dnsCanonicalNames?: string[];
}

export interface Ipv4NetworkInterface {
  ipAddress?: string;
  subnetMask?: string;
}

export interface Ipv6NetworkInterface {
  ipAddress?: string;
}

export interface OperatingSystemConfiguration {
  family?: OperatingSystemConfigurationFamily;
  fullName?: string;
  bitness?: OperatingSystemConfigurationBitness;
}

export interface VirtualMachineConfiguration {
  virtualMachineType?: VirtualMachineConfigurationVirtualMachineType;
  nativeMachineId?: string;
  virtualMachineName?: string;
  nativeHostMachineId?: string;
}

export interface HypervisorConfiguration {
  hypervisorType?: HypervisorConfigurationHypervisorType;
  nativeHostMachineId?: string;
}

export interface HostingConfiguration {
  provider?: string;
}

/** Defines headers for HyperVCluster_putCluster operation. */
export interface HyperVClusterPutClusterHeaders {
  /** Tracking URL for long running operation. */
  azureAsyncOperation?: string;
}

/** Defines headers for HyperVHost_putHost operation. */
export interface HyperVHostPutHostHeaders {
  /** Tracking URL for long running operation. */
  azureAsyncOperation?: string;
}

/** Defines headers for HyperVSites_refreshSite operation. */
export interface HyperVSitesRefreshSiteHeaders {
  /** Tracking URL for long running operation. */
  azureAsyncOperation?: string;
}

/** Defines headers for Machines_stopMachine operation. */
export interface MachinesStopMachineHeaders {
  /** Tracking URL for long running operation. */
  azureAsyncOperation?: string;
}

/** Defines headers for Machines_startMachine operation. */
export interface MachinesStartMachineHeaders {
  /** Tracking URL for long running operation. */
  azureAsyncOperation?: string;
}

/** Defines headers for Sites_refreshSite operation. */
export interface SitesRefreshSiteHeaders {
  /** Tracking URL for long running operation. */
  azureAsyncOperation?: string;
}

/** Defines headers for VCenter_putVCenter operation. */
export interface VCenterPutVCenterHeaders {
  /** Tracking URL for long running operation. */
  azureAsyncOperation?: string;
}

/** Known values of {@link CredentialType} that the service accepts. */
export enum KnownCredentialType {
  /** VMwareFabric */
  VMwareFabric = "VMwareFabric",
  /** HyperVFabric */
  HyperVFabric = "HyperVFabric",
  /** LinuxGuest */
  LinuxGuest = "LinuxGuest",
  /** WindowsGuest */
  WindowsGuest = "WindowsGuest",
  /** LinuxServer */
  LinuxServer = "LinuxServer",
  /** WindowsServer */
  WindowsServer = "WindowsServer"
}

/**
 * Defines values for CredentialType. \
 * {@link KnownCredentialType} can be used interchangeably with CredentialType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **VMwareFabric** \
 * **HyperVFabric** \
 * **LinuxGuest** \
 * **WindowsGuest** \
 * **LinuxServer** \
 * **WindowsServer**
 */
export type CredentialType = string;

/** Known values of {@link VirtualDiskMode} that the service accepts. */
export enum KnownVirtualDiskMode {
  /** Persistent */
  Persistent = "persistent",
  /** IndependentPersistent */
  IndependentPersistent = "independent_persistent",
  /** IndependentNonpersistent */
  IndependentNonpersistent = "independent_nonpersistent",
  /** Nonpersistent */
  Nonpersistent = "nonpersistent",
  /** Undoable */
  Undoable = "undoable",
  /** Append */
  Append = "append"
}

/**
 * Defines values for VirtualDiskMode. \
 * {@link KnownVirtualDiskMode} can be used interchangeably with VirtualDiskMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **persistent** \
 * **independent_persistent** \
 * **independent_nonpersistent** \
 * **nonpersistent** \
 * **undoable** \
 * **append**
 */
export type VirtualDiskMode = string;

/** Known values of {@link MachinePropertiesMonitoringState} that the service accepts. */
export enum KnownMachinePropertiesMonitoringState {
  /** Monitored */
  Monitored = "monitored",
  /** Discovered */
  Discovered = "discovered"
}

/**
 * Defines values for MachinePropertiesMonitoringState. \
 * {@link KnownMachinePropertiesMonitoringState} can be used interchangeably with MachinePropertiesMonitoringState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **monitored** \
 * **discovered**
 */
export type MachinePropertiesMonitoringState = string;

/** Known values of {@link MachinePropertiesVirtualizationState} that the service accepts. */
export enum KnownMachinePropertiesVirtualizationState {
  /** Unknown */
  Unknown = "unknown",
  /** Physical */
  Physical = "physical",
  /** Virtual */
  Virtual = "virtual",
  /** Hypervisor */
  Hypervisor = "hypervisor"
}

/**
 * Defines values for MachinePropertiesVirtualizationState. \
 * {@link KnownMachinePropertiesVirtualizationState} can be used interchangeably with MachinePropertiesVirtualizationState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **unknown** \
 * **physical** \
 * **virtual** \
 * **hypervisor**
 */
export type MachinePropertiesVirtualizationState = string;

/** Known values of {@link AgentConfigurationRebootStatus} that the service accepts. */
export enum KnownAgentConfigurationRebootStatus {
  /** Unknown */
  Unknown = "unknown",
  /** Rebooted */
  Rebooted = "rebooted",
  /** NotRebooted */
  NotRebooted = "notRebooted"
}

/**
 * Defines values for AgentConfigurationRebootStatus. \
 * {@link KnownAgentConfigurationRebootStatus} can be used interchangeably with AgentConfigurationRebootStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **unknown** \
 * **rebooted** \
 * **notRebooted**
 */
export type AgentConfigurationRebootStatus = string;

/** Known values of {@link MachineResourcesConfigurationCpuSpeedAccuracy} that the service accepts. */
export enum KnownMachineResourcesConfigurationCpuSpeedAccuracy {
  /** Actual */
  Actual = "actual",
  /** Estimated */
  Estimated = "estimated"
}

/**
 * Defines values for MachineResourcesConfigurationCpuSpeedAccuracy. \
 * {@link KnownMachineResourcesConfigurationCpuSpeedAccuracy} can be used interchangeably with MachineResourcesConfigurationCpuSpeedAccuracy,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **actual** \
 * **estimated**
 */
export type MachineResourcesConfigurationCpuSpeedAccuracy = string;

/** Known values of {@link OperatingSystemConfigurationFamily} that the service accepts. */
export enum KnownOperatingSystemConfigurationFamily {
  /** Unknown */
  Unknown = "unknown",
  /** Windows */
  Windows = "windows",
  /** Linux */
  Linux = "linux",
  /** Solaris */
  Solaris = "solaris",
  /** Aix */
  Aix = "aix"
}

/**
 * Defines values for OperatingSystemConfigurationFamily. \
 * {@link KnownOperatingSystemConfigurationFamily} can be used interchangeably with OperatingSystemConfigurationFamily,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **unknown** \
 * **windows** \
 * **linux** \
 * **solaris** \
 * **aix**
 */
export type OperatingSystemConfigurationFamily = string;

/** Known values of {@link OperatingSystemConfigurationBitness} that the service accepts. */
export enum KnownOperatingSystemConfigurationBitness {
  /** ThirtyTwoBit */
  ThirtyTwoBit = "32bit",
  /** SixtyFourBit */
  SixtyFourBit = "64bit"
}

/**
 * Defines values for OperatingSystemConfigurationBitness. \
 * {@link KnownOperatingSystemConfigurationBitness} can be used interchangeably with OperatingSystemConfigurationBitness,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **32bit** \
 * **64bit**
 */
export type OperatingSystemConfigurationBitness = string;

/** Known values of {@link VirtualMachineConfigurationVirtualMachineType} that the service accepts. */
export enum KnownVirtualMachineConfigurationVirtualMachineType {
  /** Unknown */
  Unknown = "unknown",
  /** Hyperv */
  Hyperv = "hyperv",
  /** Ldom */
  Ldom = "ldom",
  /** Lpar */
  Lpar = "lpar",
  /** Vmware */
  Vmware = "vmware",
  /** VirtualPc */
  VirtualPc = "virtualPc",
  /** Xen */
  Xen = "xen"
}

/**
 * Defines values for VirtualMachineConfigurationVirtualMachineType. \
 * {@link KnownVirtualMachineConfigurationVirtualMachineType} can be used interchangeably with VirtualMachineConfigurationVirtualMachineType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **unknown** \
 * **hyperv** \
 * **ldom** \
 * **lpar** \
 * **vmware** \
 * **virtualPc** \
 * **xen**
 */
export type VirtualMachineConfigurationVirtualMachineType = string;

/** Known values of {@link HypervisorConfigurationHypervisorType} that the service accepts. */
export enum KnownHypervisorConfigurationHypervisorType {
  /** Unknown */
  Unknown = "unknown",
  /** Hyperv */
  Hyperv = "hyperv"
}

/**
 * Defines values for HypervisorConfigurationHypervisorType. \
 * {@link KnownHypervisorConfigurationHypervisorType} can be used interchangeably with HypervisorConfigurationHypervisorType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **unknown** \
 * **hyperv**
 */
export type HypervisorConfigurationHypervisorType = string;
/** Defines values for HighlyAvailable. */
export type HighlyAvailable = "Unknown" | "No" | "Yes";

/** Optional parameters. */
export interface HyperVClusterGetClusterOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getCluster operation. */
export type HyperVClusterGetClusterResponse = HyperVCluster;

/** Optional parameters. */
export interface HyperVClusterPutClusterOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the putCluster operation. */
export type HyperVClusterPutClusterResponse = HyperVClusterPutClusterHeaders;

/** Optional parameters. */
export interface HyperVClusterGetAllClustersInSiteOptionalParams
  extends coreClient.OperationOptions {
  filter?: string;
}

/** Contains response data for the getAllClustersInSite operation. */
export type HyperVClusterGetAllClustersInSiteResponse = HyperVClusterCollection;

/** Optional parameters. */
export interface HyperVClusterGetAllClustersInSiteNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getAllClustersInSiteNext operation. */
export type HyperVClusterGetAllClustersInSiteNextResponse = HyperVClusterCollection;

/** Optional parameters. */
export interface HyperVHostGetHostOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getHost operation. */
export type HyperVHostGetHostResponse = HyperVHost;

/** Optional parameters. */
export interface HyperVHostPutHostOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the putHost operation. */
export type HyperVHostPutHostResponse = HyperVHostPutHostHeaders;

/** Optional parameters. */
export interface HyperVHostGetAllHostsInSiteOptionalParams
  extends coreClient.OperationOptions {
  filter?: string;
}

/** Contains response data for the getAllHostsInSite operation. */
export type HyperVHostGetAllHostsInSiteResponse = HyperVHostCollection;

/** Optional parameters. */
export interface HyperVHostGetAllHostsInSiteNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getAllHostsInSiteNext operation. */
export type HyperVHostGetAllHostsInSiteNextResponse = HyperVHostCollection;

/** Optional parameters. */
export interface HyperVJobsGetJobOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getJob operation. */
export type HyperVJobsGetJobResponse = HyperVJob;

/** Optional parameters. */
export interface HyperVJobsGetAllJobsInSiteOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getAllJobsInSite operation. */
export type HyperVJobsGetAllJobsInSiteResponse = HyperVJobCollection;

/** Optional parameters. */
export interface HyperVJobsGetAllJobsInSiteNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getAllJobsInSiteNext operation. */
export type HyperVJobsGetAllJobsInSiteNextResponse = HyperVJobCollection;

/** Optional parameters. */
export interface HyperVMachinesGetMachineOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getMachine operation. */
export type HyperVMachinesGetMachineResponse = HyperVMachine;

/** Optional parameters. */
export interface HyperVMachinesGetAllMachinesInSiteOptionalParams
  extends coreClient.OperationOptions {
  filter?: string;
  top?: number;
  /** Optional parameter for continuation token. */
  continuationToken?: string;
  /** Total count of machines in the given site. */
  totalRecordCount?: number;
}

/** Contains response data for the getAllMachinesInSite operation. */
export type HyperVMachinesGetAllMachinesInSiteResponse = HyperVMachineCollection;

/** Optional parameters. */
export interface HyperVMachinesGetAllMachinesInSiteNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getAllMachinesInSiteNext operation. */
export type HyperVMachinesGetAllMachinesInSiteNextResponse = HyperVMachineCollection;

/** Optional parameters. */
export interface HyperVOperationsStatusGetOperationStatusOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getOperationStatus operation. */
export type HyperVOperationsStatusGetOperationStatusResponse = OperationStatus;

/** Optional parameters. */
export interface HyperVRunAsAccountsGetRunAsAccountOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getRunAsAccount operation. */
export type HyperVRunAsAccountsGetRunAsAccountResponse = HyperVRunAsAccount;

/** Optional parameters. */
export interface HyperVRunAsAccountsGetAllRunAsAccountsInSiteOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getAllRunAsAccountsInSite operation. */
export type HyperVRunAsAccountsGetAllRunAsAccountsInSiteResponse = HyperVRunAsAccountCollection;

/** Optional parameters. */
export interface HyperVRunAsAccountsGetAllRunAsAccountsInSiteNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getAllRunAsAccountsInSiteNext operation. */
export type HyperVRunAsAccountsGetAllRunAsAccountsInSiteNextResponse = HyperVRunAsAccountCollection;

/** Optional parameters. */
export interface HyperVSitesGetSiteOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getSite operation. */
export type HyperVSitesGetSiteResponse = HyperVSite;

/** Optional parameters. */
export interface HyperVSitesPutSiteOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the putSite operation. */
export type HyperVSitesPutSiteResponse = HyperVSite;

/** Optional parameters. */
export interface HyperVSitesDeleteSiteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface HyperVSitesPatchSiteOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the patchSite operation. */
export type HyperVSitesPatchSiteResponse = HyperVSite;

/** Optional parameters. */
export interface HyperVSitesRefreshSiteOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the refreshSite operation. */
export type HyperVSitesRefreshSiteResponse = HyperVSitesRefreshSiteHeaders;

/** Optional parameters. */
export interface HyperVSitesGetSiteHealthSummaryOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getSiteHealthSummary operation. */
export type HyperVSitesGetSiteHealthSummaryResponse = SiteHealthSummaryCollection;

/** Optional parameters. */
export interface HyperVSitesGetSiteUsageOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getSiteUsage operation. */
export type HyperVSitesGetSiteUsageResponse = HyperVSiteUsage;

/** Optional parameters. */
export interface HyperVSitesGetSiteHealthSummaryNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getSiteHealthSummaryNext operation. */
export type HyperVSitesGetSiteHealthSummaryNextResponse = SiteHealthSummaryCollection;

/** Optional parameters. */
export interface JobsGetJobOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the getJob operation. */
export type JobsGetJobResponse = VMwareJob;

/** Optional parameters. */
export interface JobsGetAllJobsInSiteOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getAllJobsInSite operation. */
export type JobsGetAllJobsInSiteResponse = VMwareJobCollection;

/** Optional parameters. */
export interface JobsGetAllJobsInSiteNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getAllJobsInSiteNext operation. */
export type JobsGetAllJobsInSiteNextResponse = VMwareJobCollection;

/** Optional parameters. */
export interface MachinesGetMachineOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getMachine operation. */
export type MachinesGetMachineResponse = VMwareMachine;

/** Optional parameters. */
export interface MachinesGetAllMachinesInSiteOptionalParams
  extends coreClient.OperationOptions {
  filter?: string;
  top?: number;
  /** Optional parameter for continuation token. */
  continuationToken?: string;
  /** Total count of machines in the given site. */
  totalRecordCount?: number;
}

/** Contains response data for the getAllMachinesInSite operation. */
export type MachinesGetAllMachinesInSiteResponse = VMwareMachineCollection;

/** Optional parameters. */
export interface MachinesStopMachineOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the stopMachine operation. */
export type MachinesStopMachineResponse = MachinesStopMachineHeaders;

/** Optional parameters. */
export interface MachinesStartMachineOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the startMachine operation. */
export type MachinesStartMachineResponse = MachinesStartMachineHeaders;

/** Optional parameters. */
export interface MachinesGetAllMachinesInSiteNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getAllMachinesInSiteNext operation. */
export type MachinesGetAllMachinesInSiteNextResponse = VMwareMachineCollection;

/** Optional parameters. */
export interface RunAsAccountsGetRunAsAccountOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getRunAsAccount operation. */
export type RunAsAccountsGetRunAsAccountResponse = VMwareRunAsAccount;

/** Optional parameters. */
export interface RunAsAccountsGetAllRunAsAccountsInSiteOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getAllRunAsAccountsInSite operation. */
export type RunAsAccountsGetAllRunAsAccountsInSiteResponse = VMwareRunAsAccountCollection;

/** Optional parameters. */
export interface RunAsAccountsGetAllRunAsAccountsInSiteNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getAllRunAsAccountsInSiteNext operation. */
export type RunAsAccountsGetAllRunAsAccountsInSiteNextResponse = VMwareRunAsAccountCollection;

/** Optional parameters. */
export interface SitesGetSiteOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getSite operation. */
export type SitesGetSiteResponse = VMwareSite;

/** Optional parameters. */
export interface SitesPutSiteOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the putSite operation. */
export type SitesPutSiteResponse = VMwareSite;

/** Optional parameters. */
export interface SitesDeleteSiteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface SitesPatchSiteOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the patchSite operation. */
export type SitesPatchSiteResponse = VMwareSite;

/** Optional parameters. */
export interface SitesRefreshSiteOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the refreshSite operation. */
export type SitesRefreshSiteResponse = SitesRefreshSiteHeaders;

/** Optional parameters. */
export interface SitesGetSiteHealthSummaryOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getSiteHealthSummary operation. */
export type SitesGetSiteHealthSummaryResponse = SiteHealthSummaryCollection;

/** Optional parameters. */
export interface SitesGetSiteUsageOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getSiteUsage operation. */
export type SitesGetSiteUsageResponse = VMwareSiteUsage;

/** Optional parameters. */
export interface SitesGetSiteHealthSummaryNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getSiteHealthSummaryNext operation. */
export type SitesGetSiteHealthSummaryNextResponse = SiteHealthSummaryCollection;

/** Optional parameters. */
export interface VCenterGetVCenterOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getVCenter operation. */
export type VCenterGetVCenterResponse = VCenter;

/** Optional parameters. */
export interface VCenterPutVCenterOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the putVCenter operation. */
export type VCenterPutVCenterResponse = VCenterPutVCenterHeaders;

/** Optional parameters. */
export interface VCenterDeleteVCenterOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface VCenterGetAllVCentersInSiteOptionalParams
  extends coreClient.OperationOptions {
  filter?: string;
}

/** Contains response data for the getAllVCentersInSite operation. */
export type VCenterGetAllVCentersInSiteResponse = VCenterCollection;

/** Optional parameters. */
export interface VCenterGetAllVCentersInSiteNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getAllVCentersInSiteNext operation. */
export type VCenterGetAllVCentersInSiteNextResponse = VCenterCollection;

/** Optional parameters. */
export interface VMwareOperationsStatusGetOperationStatusOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getOperationStatus operation. */
export type VMwareOperationsStatusGetOperationStatusResponse = OperationStatus;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationResultList;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = OperationResultList;

/** Optional parameters. */
export interface AzureMigrateV2OptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
