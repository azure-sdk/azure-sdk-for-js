/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const HyperVCluster: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HyperVCluster",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "HyperVClusterProperties"
        }
      }
    }
  }
};

export const HyperVClusterProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HyperVClusterProperties",
    modelProperties: {
      createdTimestamp: {
        serializedName: "createdTimestamp",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      updatedTimestamp: {
        serializedName: "updatedTimestamp",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      fqdn: {
        serializedName: "fqdn",
        type: {
          name: "String"
        }
      },
      functionalLevel: {
        serializedName: "functionalLevel",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      runAsAccountId: {
        serializedName: "runAsAccountId",
        type: {
          name: "String"
        }
      },
      hostFqdnList: {
        serializedName: "hostFqdnList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      errors: {
        serializedName: "errors",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HealthErrorDetails"
            }
          }
        }
      }
    }
  }
};

export const HealthErrorDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HealthErrorDetails",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      possibleCauses: {
        serializedName: "possibleCauses",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      recommendedAction: {
        serializedName: "recommendedAction",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      severity: {
        serializedName: "severity",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      summaryMessage: {
        serializedName: "summaryMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      source: {
        serializedName: "source",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      messageParameters: {
        serializedName: "messageParameters",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const CloudError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudError",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "CloudErrorBody"
        }
      }
    }
  }
};

export const CloudErrorBody: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudErrorBody",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CloudErrorBody"
            }
          }
        }
      }
    }
  }
};

export const HyperVClusterCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HyperVClusterCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HyperVCluster"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HyperVHost: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HyperVHost",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "HyperVHostProperties"
        }
      }
    }
  }
};

export const HyperVHostProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HyperVHostProperties",
    modelProperties: {
      createdTimestamp: {
        serializedName: "createdTimestamp",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      updatedTimestamp: {
        serializedName: "updatedTimestamp",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      fqdn: {
        serializedName: "fqdn",
        type: {
          name: "String"
        }
      },
      runAsAccountId: {
        serializedName: "runAsAccountId",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errors: {
        serializedName: "errors",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HealthErrorDetails"
            }
          }
        }
      }
    }
  }
};

export const HyperVHostCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HyperVHostCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HyperVHost"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HyperVJob: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HyperVJob",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "JobProperties"
        }
      }
    }
  }
};

export const JobProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobProperties",
    modelProperties: {
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      endTime: {
        serializedName: "endTime",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      clientRequestId: {
        serializedName: "clientRequestId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      activityId: {
        serializedName: "activityId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errors: {
        serializedName: "errors",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetails"
            }
          }
        }
      }
    }
  }
};

export const ErrorDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetails",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      possibleCauses: {
        serializedName: "possibleCauses",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      recommendedAction: {
        serializedName: "recommendedAction",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      severity: {
        serializedName: "severity",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isAgentReportedError: {
        serializedName: "isAgentReportedError",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      agentErrorCode: {
        serializedName: "agentErrorCode",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      agentErrorMessage: {
        serializedName: "agentErrorMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      agentErrorPossibleCauses: {
        serializedName: "agentErrorPossibleCauses",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      agentErrorRecommendedAction: {
        serializedName: "agentErrorRecommendedAction",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HyperVJobCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HyperVJobCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HyperVJob"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HyperVMachine: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HyperVMachine",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "HyperVMachineProperties"
        }
      }
    }
  }
};

export const HyperVMachineProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HyperVMachineProperties",
    modelProperties: {
      hostFqdn: {
        serializedName: "hostFqdn",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      hostId: {
        serializedName: "hostId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      clusterFqdn: {
        serializedName: "clusterFqdn",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      clusterId: {
        serializedName: "clusterId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      managementServerType: {
        serializedName: "managementServerType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      generation: {
        serializedName: "generation",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      version: {
        serializedName: "version",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      highAvailability: {
        serializedName: "highAvailability",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Unknown", "No", "Yes"]
        }
      },
      maxMemoryMB: {
        serializedName: "maxMemoryMB",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      firmware: {
        serializedName: "firmware",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isDynamicMemoryEnabled: {
        serializedName: "isDynamicMemoryEnabled",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      disks: {
        serializedName: "disks",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HyperVDisk"
            }
          }
        }
      },
      appsAndRoles: {
        serializedName: "appsAndRoles",
        type: {
          name: "Composite",
          className: "AppsAndRoles"
        }
      },
      networkAdapters: {
        serializedName: "networkAdapters",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HyperVNetworkAdapter"
            }
          }
        }
      },
      displayName: {
        serializedName: "displayName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      numberOfProcessorCore: {
        serializedName: "numberOfProcessorCore",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      allocatedMemoryInMB: {
        serializedName: "allocatedMemoryInMB",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      vmConfigurationFileLocation: {
        serializedName: "vmConfigurationFileLocation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operatingSystemDetails: {
        serializedName: "operatingSystemDetails",
        type: {
          name: "Composite",
          className: "OperatingSystem"
        }
      },
      guestOSDetails: {
        serializedName: "guestOSDetails",
        type: {
          name: "Composite",
          className: "GuestOSDetails"
        }
      },
      numberOfApplications: {
        serializedName: "numberOfApplications",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      guestDetailsDiscoveryTimestamp: {
        serializedName: "guestDetailsDiscoveryTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      isGuestDetailsDiscoveryInProgress: {
        serializedName: "isGuestDetailsDiscoveryInProgress",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      createdTimestamp: {
        serializedName: "createdTimestamp",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      updatedTimestamp: {
        serializedName: "updatedTimestamp",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      instanceUuid: {
        serializedName: "instanceUuid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      powerStatus: {
        serializedName: "powerStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      biosSerialNumber: {
        serializedName: "biosSerialNumber",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      biosGuid: {
        serializedName: "biosGuid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      vmFqdn: {
        serializedName: "vmFqdn",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isDeleted: {
        serializedName: "isDeleted",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      errors: {
        serializedName: "errors",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HealthErrorDetails"
            }
          }
        }
      }
    }
  }
};

export const HyperVDisk: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HyperVDisk",
    modelProperties: {
      instanceId: {
        serializedName: "instanceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      vhdId: {
        serializedName: "vhdId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      maxSizeInBytes: {
        serializedName: "maxSizeInBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      diskType: {
        serializedName: "diskType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lun: {
        serializedName: "lun",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      path: {
        serializedName: "path",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AppsAndRoles: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AppsAndRoles",
    modelProperties: {
      applications: {
        serializedName: "applications",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Application"
            }
          }
        }
      },
      webApplications: {
        serializedName: "webApplications",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WebApplication"
            }
          }
        }
      },
      features: {
        serializedName: "features",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Feature"
            }
          }
        }
      },
      sqlServers: {
        serializedName: "sqlServers",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SQLServer"
            }
          }
        }
      },
      sharePointServers: {
        serializedName: "sharePointServers",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SharePointServer"
            }
          }
        }
      },
      systemCenters: {
        serializedName: "systemCenters",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SystemCenter"
            }
          }
        }
      },
      bizTalkServers: {
        serializedName: "bizTalkServers",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BizTalkServer"
            }
          }
        }
      },
      exchangeServers: {
        serializedName: "exchangeServers",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExchangeServer"
            }
          }
        }
      },
      otherDatabases: {
        serializedName: "otherDatabases",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OtherDatabase"
            }
          }
        }
      }
    }
  }
};

export const Application: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Application",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WebApplication: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WebApplication",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      platform: {
        serializedName: "platform",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      groupName: {
        serializedName: "groupName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      webServer: {
        serializedName: "webServer",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      applicationPool: {
        serializedName: "applicationPool",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Feature: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Feature",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      featureType: {
        serializedName: "featureType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      parent: {
        serializedName: "parent",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SQLServer: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SQLServer",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      edition: {
        serializedName: "edition",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      servicePack: {
        serializedName: "servicePack",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      clustered: {
        serializedName: "clustered",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      clusterName: {
        serializedName: "clusterName",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SharePointServer: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SharePointServer",
    modelProperties: {
      productName: {
        serializedName: "productName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isEnterprise: {
        serializedName: "isEnterprise",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SystemCenter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemCenter",
    modelProperties: {
      productName: {
        serializedName: "productName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BizTalkServer: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BizTalkServer",
    modelProperties: {
      productName: {
        serializedName: "productName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExchangeServer: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExchangeServer",
    modelProperties: {
      productName: {
        serializedName: "productName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      edition: {
        serializedName: "edition",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      roles: {
        serializedName: "roles",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      servicePack: {
        serializedName: "servicePack",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OtherDatabase: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OtherDatabase",
    modelProperties: {
      databaseType: {
        serializedName: "databaseType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      instance: {
        serializedName: "instance",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HyperVNetworkAdapter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HyperVNetworkAdapter",
    modelProperties: {
      networkId: {
        serializedName: "networkId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      subnetName: {
        serializedName: "subnetName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      staticIpAddress: {
        serializedName: "staticIpAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      nicType: {
        serializedName: "nicType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      nicId: {
        serializedName: "nicId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      macAddress: {
        serializedName: "macAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ipAddressList: {
        serializedName: "ipAddressList",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      networkName: {
        serializedName: "networkName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ipAddressType: {
        serializedName: "ipAddressType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperatingSystem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperatingSystem",
    modelProperties: {
      osType: {
        serializedName: "osType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      osName: {
        serializedName: "osName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      osVersion: {
        serializedName: "osVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GuestOSDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GuestOSDetails",
    modelProperties: {
      osType: {
        serializedName: "osType",
        type: {
          name: "String"
        }
      },
      osName: {
        serializedName: "osName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      osVersion: {
        serializedName: "osVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HyperVMachineCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HyperVMachineCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HyperVMachine"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationStatus",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      endTime: {
        serializedName: "endTime",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "OperationStatusError"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "OperationStatusProperties"
        }
      }
    }
  }
};

export const OperationStatusError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationStatusError",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationStatusProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationStatusProperties",
    modelProperties: {
      result: {
        serializedName: "result",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HyperVRunAsAccount: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HyperVRunAsAccount",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "RunAsAccountProperties"
        }
      }
    }
  }
};

export const RunAsAccountProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RunAsAccountProperties",
    modelProperties: {
      displayName: {
        serializedName: "displayName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      credentialType: {
        serializedName: "credentialType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      createdTimestamp: {
        serializedName: "createdTimestamp",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      updatedTimestamp: {
        serializedName: "updatedTimestamp",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HyperVRunAsAccountCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HyperVRunAsAccountCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HyperVRunAsAccount"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HyperVSite: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HyperVSite",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      eTag: {
        serializedName: "eTag",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "SiteProperties"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const SiteProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SiteProperties",
    modelProperties: {
      servicePrincipalIdentityDetails: {
        serializedName: "servicePrincipalIdentityDetails",
        type: {
          name: "Composite",
          className: "SiteSpnProperties"
        }
      },
      agentDetails: {
        serializedName: "agentDetails",
        type: {
          name: "Composite",
          className: "SiteAgentProperties"
        }
      },
      serviceEndpoint: {
        serializedName: "serviceEndpoint",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      discoverySolutionId: {
        serializedName: "discoverySolutionId",
        type: {
          name: "String"
        }
      },
      applianceName: {
        serializedName: "applianceName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SiteSpnProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SiteSpnProperties",
    modelProperties: {
      tenantId: {
        serializedName: "tenantId",
        type: {
          name: "String"
        }
      },
      applicationId: {
        serializedName: "applicationId",
        type: {
          name: "String"
        }
      },
      objectId: {
        serializedName: "objectId",
        type: {
          name: "String"
        }
      },
      audience: {
        serializedName: "audience",
        type: {
          name: "String"
        }
      },
      aadAuthority: {
        serializedName: "aadAuthority",
        type: {
          name: "String"
        }
      },
      rawCertData: {
        serializedName: "rawCertData",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SiteAgentProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SiteAgentProperties",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastHeartBeatUtc: {
        serializedName: "lastHeartBeatUtc",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      keyVaultUri: {
        serializedName: "keyVaultUri",
        type: {
          name: "String"
        }
      },
      keyVaultId: {
        serializedName: "keyVaultId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const SiteHealthSummaryCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SiteHealthSummaryCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SiteHealthSummary"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SiteHealthSummary: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SiteHealthSummary",
    modelProperties: {
      applianceName: {
        serializedName: "applianceName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errorMessage: {
        serializedName: "errorMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      summaryMessage: {
        serializedName: "summaryMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errorId: {
        serializedName: "errorId",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      errorCode: {
        serializedName: "errorCode",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      affectedObjectsCount: {
        serializedName: "affectedObjectsCount",
        type: {
          name: "Number"
        }
      },
      hitCount: {
        serializedName: "hitCount",
        type: {
          name: "Number"
        }
      },
      severity: {
        serializedName: "severity",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      remediationGuidance: {
        serializedName: "remediationGuidance",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      affectedResourceType: {
        serializedName: "affectedResourceType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      affectedResources: {
        serializedName: "affectedResources",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const VMwareJob: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VMwareJob",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "JobProperties"
        }
      }
    }
  }
};

export const VMwareJobCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VMwareJobCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VMwareJob"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VMwareMachine: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VMwareMachine",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "VMwareMachineProperties"
        }
      }
    }
  }
};

export const VMwareMachineProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VMwareMachineProperties",
    modelProperties: {
      dataCenterScope: {
        serializedName: "dataCenterScope",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      firmware: {
        serializedName: "firmware",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      vCenterFqdn: {
        serializedName: "vCenterFQDN",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      vCenterId: {
        serializedName: "vCenterId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      vMwareToolsStatus: {
        serializedName: "vMwareToolsStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      changeTrackingSupported: {
        serializedName: "changeTrackingSupported",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      changeTrackingEnabled: {
        serializedName: "changeTrackingEnabled",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      maxSnapshots: {
        serializedName: "maxSnapshots",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      disks: {
        serializedName: "disks",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VMwareDisk"
            }
          }
        }
      },
      appsAndRoles: {
        serializedName: "appsAndRoles",
        type: {
          name: "Composite",
          className: "AppsAndRoles"
        }
      },
      hostInMaintenanceMode: {
        serializedName: "hostInMaintenanceMode",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      hostName: {
        serializedName: "hostName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      hostPowerState: {
        serializedName: "hostPowerState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      hostVersion: {
        serializedName: "hostVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      networkAdapters: {
        serializedName: "networkAdapters",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VMwareNetworkAdapter"
            }
          }
        }
      },
      dependencyMapping: {
        serializedName: "dependencyMapping",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      dependencyMappingStartTime: {
        serializedName: "dependencyMappingStartTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      displayName: {
        serializedName: "displayName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      numberOfProcessorCore: {
        serializedName: "numberOfProcessorCore",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      allocatedMemoryInMB: {
        serializedName: "allocatedMemoryInMB",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      vmConfigurationFileLocation: {
        serializedName: "vmConfigurationFileLocation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operatingSystemDetails: {
        serializedName: "operatingSystemDetails",
        type: {
          name: "Composite",
          className: "OperatingSystem"
        }
      },
      guestOSDetails: {
        serializedName: "guestOSDetails",
        type: {
          name: "Composite",
          className: "GuestOSDetails"
        }
      },
      numberOfApplications: {
        serializedName: "numberOfApplications",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      guestDetailsDiscoveryTimestamp: {
        serializedName: "guestDetailsDiscoveryTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      isGuestDetailsDiscoveryInProgress: {
        serializedName: "isGuestDetailsDiscoveryInProgress",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      createdTimestamp: {
        serializedName: "createdTimestamp",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      updatedTimestamp: {
        serializedName: "updatedTimestamp",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      instanceUuid: {
        serializedName: "instanceUuid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      powerStatus: {
        serializedName: "powerStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      biosSerialNumber: {
        serializedName: "biosSerialNumber",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      biosGuid: {
        serializedName: "biosGuid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      vmFqdn: {
        serializedName: "vmFqdn",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isDeleted: {
        serializedName: "isDeleted",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      errors: {
        serializedName: "errors",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HealthErrorDetails"
            }
          }
        }
      }
    }
  }
};

export const VMwareDisk: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VMwareDisk",
    modelProperties: {
      uuid: {
        serializedName: "uuid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      label: {
        serializedName: "label",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      diskProvisioningPolicy: {
        serializedName: "diskProvisioningPolicy",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      diskScrubbingPolicy: {
        serializedName: "diskScrubbingPolicy",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      diskMode: {
        serializedName: "diskMode",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      maxSizeInBytes: {
        serializedName: "maxSizeInBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      diskType: {
        serializedName: "diskType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lun: {
        serializedName: "lun",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      path: {
        serializedName: "path",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VMwareNetworkAdapter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VMwareNetworkAdapter",
    modelProperties: {
      label: {
        serializedName: "label",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      nicId: {
        serializedName: "nicId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      macAddress: {
        serializedName: "macAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ipAddressList: {
        serializedName: "ipAddressList",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      networkName: {
        serializedName: "networkName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ipAddressType: {
        serializedName: "ipAddressType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VMwareMachineCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VMwareMachineCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VMwareMachine"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VMwareRunAsAccount: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VMwareRunAsAccount",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "RunAsAccountProperties"
        }
      }
    }
  }
};

export const VMwareRunAsAccountCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VMwareRunAsAccountCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VMwareRunAsAccount"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VMwareSite: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VMwareSite",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      eTag: {
        serializedName: "eTag",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "SiteProperties"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const VCenter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VCenter",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "VCenterProperties"
        }
      }
    }
  }
};

export const VCenterProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VCenterProperties",
    modelProperties: {
      createdTimestamp: {
        serializedName: "createdTimestamp",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      updatedTimestamp: {
        serializedName: "updatedTimestamp",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      fqdn: {
        serializedName: "fqdn",
        type: {
          name: "String"
        }
      },
      port: {
        serializedName: "port",
        type: {
          name: "String"
        }
      },
      runAsAccountId: {
        serializedName: "runAsAccountId",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      perfStatisticsLevel: {
        serializedName: "perfStatisticsLevel",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      instanceUuid: {
        serializedName: "instanceUuid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errors: {
        serializedName: "errors",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HealthErrorDetails"
            }
          }
        }
      }
    }
  }
};

export const VCenterCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VCenterCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VCenter"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HyperVSiteUsage: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HyperVSiteUsage",
    modelProperties: {
      machineCount: {
        serializedName: "machineCount",
        type: {
          name: "Number"
        }
      },
      runAsAccountCount: {
        serializedName: "runAsAccountCount",
        type: {
          name: "Number"
        }
      },
      hostCount: {
        serializedName: "hostCount",
        type: {
          name: "Number"
        }
      },
      clusterCount: {
        serializedName: "clusterCount",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const VMwareSiteUsage: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VMwareSiteUsage",
    modelProperties: {
      machineCount: {
        serializedName: "machineCount",
        type: {
          name: "Number"
        }
      },
      runAsAccountCount: {
        serializedName: "runAsAccountCount",
        type: {
          name: "Number"
        }
      },
      vCenterCount: {
        serializedName: "vCenterCount",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const MasterSiteList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MasterSiteList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MasterSite"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MasterSite: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MasterSite",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      eTag: {
        serializedName: "eTag",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "MasterSiteProperties"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const MasterSiteProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MasterSiteProperties",
    modelProperties: {
      publicNetworkAccess: {
        serializedName: "publicNetworkAccess",
        type: {
          name: "String"
        }
      },
      allowMultipleSites: {
        serializedName: "allowMultipleSites",
        type: {
          name: "Boolean"
        }
      },
      sites: {
        serializedName: "sites",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      customerStorageAccountArmId: {
        serializedName: "customerStorageAccountArmId",
        type: {
          name: "String"
        }
      },
      privateEndpointConnections: {
        serializedName: "privateEndpointConnections",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      }
    }
  }
};

export const PrivateEndpointConnection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnection",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      eTag: {
        serializedName: "eTag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "PrivateEndpointConnectionProperties"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const PrivateEndpointConnectionProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      privateEndpoint: {
        serializedName: "privateEndpoint",
        type: {
          name: "Composite",
          className: "ResourceId"
        }
      },
      privateLinkServiceConnectionState: {
        serializedName: "privateLinkServiceConnectionState",
        type: {
          name: "Composite",
          className: "PrivateLinkServiceConnectionState"
        }
      }
    }
  }
};

export const ResourceId: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceId",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkServiceConnectionState: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkServiceConnectionState",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      actionsRequired: {
        serializedName: "actionsRequired",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AvailableOperations: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AvailableOperations",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationDetail"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDetail",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        type: {
          name: "Boolean"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointConnectionCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "PrivateLinkResourceProperties"
        }
      }
    }
  }
};

export const PrivateLinkResourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResourceProperties",
    modelProperties: {
      requiredMembers: {
        serializedName: "requiredMembers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      requiredZoneNames: {
        serializedName: "requiredZoneNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      groupId: {
        serializedName: "groupId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkResourceCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResourceCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateLinkResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VMWareSitesResultList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VMWareSitesResultList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VMwareSite"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HyperVSitesResultList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HyperVSitesResultList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HyperVSite"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Machine: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Machine",
    modelProperties: {
      propertiesTimestamp: {
        serializedName: "properties\\.timestamp",
        type: {
          name: "DateTime"
        }
      },
      propertiesMonitoringState: {
        serializedName: "properties\\.monitoringState",
        type: {
          name: "String"
        }
      },
      propertiesVirtualizationState: {
        serializedName: "properties\\.virtualizationState",
        type: {
          name: "String"
        }
      },
      propertiesDisplayName: {
        serializedName: "properties\\.displayName",
        type: {
          name: "String"
        }
      },
      propertiesComputerName: {
        serializedName: "properties\\.computerName",
        type: {
          name: "String"
        }
      },
      propertiesFullyQualifiedDomainName: {
        serializedName: "properties\\.fullyQualifiedDomainName",
        type: {
          name: "String"
        }
      },
      propertiesBootTime: {
        serializedName: "properties\\.bootTime",
        type: {
          name: "DateTime"
        }
      },
      propertiesTimezone: {
        serializedName: "properties\\.timezone",
        type: {
          name: "Composite",
          className: "Timezone"
        }
      },
      propertiesAgent: {
        serializedName: "properties\\.agent",
        type: {
          name: "Composite",
          className: "AgentConfiguration"
        }
      },
      propertiesResources: {
        serializedName: "properties\\.resources",
        type: {
          name: "Composite",
          className: "MachineResourcesConfiguration"
        }
      },
      propertiesNetworking: {
        serializedName: "properties\\.networking",
        type: {
          name: "Composite",
          className: "NetworkConfiguration"
        }
      },
      propertiesOperatingSystem: {
        serializedName: "properties\\.operatingSystem",
        type: {
          name: "Composite",
          className: "OperatingSystemConfiguration"
        }
      },
      propertiesVirtualMachine: {
        serializedName: "properties\\.virtualMachine",
        type: {
          name: "Composite",
          className: "VirtualMachineConfiguration"
        }
      },
      propertiesHypervisor: {
        serializedName: "properties\\.hypervisor",
        type: {
          name: "Composite",
          className: "HypervisorConfiguration"
        }
      },
      propertiesHosting: {
        serializedName: "properties\\.hosting",
        type: {
          name: "Composite",
          className: "HostingConfiguration"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Timezone: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Timezone",
    modelProperties: {
      fullName: {
        serializedName: "fullName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AgentConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentConfiguration",
    modelProperties: {
      agentId: {
        serializedName: "agentId",
        type: {
          name: "String"
        }
      },
      dependencyAgentId: {
        serializedName: "dependencyAgentId",
        type: {
          name: "String"
        }
      },
      dependencyAgentVersion: {
        serializedName: "dependencyAgentVersion",
        type: {
          name: "String"
        }
      },
      dependencyAgentRevision: {
        serializedName: "dependencyAgentRevision",
        type: {
          name: "String"
        }
      },
      rebootStatus: {
        serializedName: "rebootStatus",
        type: {
          name: "String"
        }
      },
      clockGranularity: {
        serializedName: "clockGranularity",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const MachineResourcesConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MachineResourcesConfiguration",
    modelProperties: {
      physicalMemory: {
        serializedName: "physicalMemory",
        type: {
          name: "Number"
        }
      },
      cpus: {
        serializedName: "cpus",
        type: {
          name: "Number"
        }
      },
      cpuSpeed: {
        serializedName: "cpuSpeed",
        type: {
          name: "Number"
        }
      },
      cpuSpeedAccuracy: {
        serializedName: "cpuSpeedAccuracy",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkConfiguration",
    modelProperties: {
      ipv4Interfaces: {
        serializedName: "ipv4Interfaces",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Ipv4NetworkInterface"
            }
          }
        }
      },
      ipv6Interfaces: {
        serializedName: "ipv6Interfaces",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Ipv6NetworkInterface"
            }
          }
        }
      },
      defaultIpv4Gateways: {
        serializedName: "defaultIpv4Gateways",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      macAddresses: {
        serializedName: "macAddresses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      dnsNames: {
        serializedName: "dnsNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      dnsQuestions: {
        serializedName: "dnsQuestions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      dnsCanonicalNames: {
        serializedName: "dnsCanonicalNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const Ipv4NetworkInterface: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Ipv4NetworkInterface",
    modelProperties: {
      ipAddress: {
        serializedName: "ipAddress",
        type: {
          name: "String"
        }
      },
      subnetMask: {
        serializedName: "subnetMask",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Ipv6NetworkInterface: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Ipv6NetworkInterface",
    modelProperties: {
      ipAddress: {
        serializedName: "ipAddress",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperatingSystemConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperatingSystemConfiguration",
    modelProperties: {
      family: {
        serializedName: "family",
        type: {
          name: "String"
        }
      },
      fullName: {
        serializedName: "fullName",
        type: {
          name: "String"
        }
      },
      bitness: {
        serializedName: "bitness",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualMachineConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineConfiguration",
    modelProperties: {
      virtualMachineType: {
        serializedName: "virtualMachineType",
        type: {
          name: "String"
        }
      },
      nativeMachineId: {
        serializedName: "nativeMachineId",
        type: {
          name: "String"
        }
      },
      virtualMachineName: {
        serializedName: "virtualMachineName",
        type: {
          name: "String"
        }
      },
      nativeHostMachineId: {
        serializedName: "nativeHostMachineId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HypervisorConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HypervisorConfiguration",
    modelProperties: {
      hypervisorType: {
        serializedName: "hypervisorType",
        type: {
          name: "String"
        }
      },
      nativeHostMachineId: {
        serializedName: "nativeHostMachineId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HostingConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HostingConfiguration",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HyperVClusterPutClusterHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HyperVClusterPutClusterHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HyperVHostPutHostHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HyperVHostPutHostHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HyperVSitesRefreshSiteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HyperVSitesRefreshSiteHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HyperVSitesListBySubscriptionHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HyperVSitesListBySubscriptionHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HyperVSitesListHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HyperVSitesListHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HyperVSitesListBySubscriptionNextHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HyperVSitesListBySubscriptionNextHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HyperVSitesListNextHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HyperVSitesListNextHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MachinesStopMachineHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MachinesStopMachineHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MachinesStartMachineHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MachinesStartMachineHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SitesRefreshSiteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SitesRefreshSiteHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VCenterPutVCenterHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VCenterPutVCenterHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MasterSitesPutSiteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MasterSitesPutSiteHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MasterSitesPatchSiteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MasterSitesPatchSiteHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VMwareSitesListBySubscriptionHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VMwareSitesListBySubscriptionHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VMwareSitesListHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VMwareSitesListHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VMwareSitesListBySubscriptionNextHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VMwareSitesListBySubscriptionNextHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VMwareSitesListNextHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VMwareSitesListNextHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};
