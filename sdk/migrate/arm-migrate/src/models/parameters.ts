/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter,
} from "@azure/core-client";
import {
  MigrateAgentModel as MigrateAgentModelMapper,
  ModernizeProjectModel as ModernizeProjectModelMapper,
  UpdateModernizeProjectModel as UpdateModernizeProjectModelMapper,
  WorkloadDeploymentModel as WorkloadDeploymentModelMapper,
  BuildContainerImageModel as BuildContainerImageModelMapper,
  TestMigrateModel as TestMigrateModelMapper,
  WorkloadInstanceModel as WorkloadInstanceModelMapper,
} from "../models/mappers";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String",
    },
  },
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2022-05-01-preview",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String",
    },
  },
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const modernizeProjectName: OperationURLParameter = {
  parameterPath: "modernizeProjectName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-z][a-z0-9]*$"),
    },
    serializedName: "modernizeProjectName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const deployedResourceName: OperationURLParameter = {
  parameterPath: "deployedResourceName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-z][a-z0-9]*$"),
    },
    serializedName: "deployedResourceName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const agentName: OperationURLParameter = {
  parameterPath: "agentName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-z][a-z0-9]*$"),
    },
    serializedName: "agentName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String",
    },
  },
};

export const body: OperationParameter = {
  parameterPath: ["options", "body"],
  mapper: MigrateAgentModelMapper,
};

export const operationId: OperationURLParameter = {
  parameterPath: "operationId",
  mapper: {
    serializedName: "operationId",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const body1: OperationParameter = {
  parameterPath: ["options", "body"],
  mapper: ModernizeProjectModelMapper,
};

export const body2: OperationParameter = {
  parameterPath: ["options", "body"],
  mapper: UpdateModernizeProjectModelMapper,
};

export const continuationToken: OperationQueryParameter = {
  parameterPath: ["options", "continuationToken"],
  mapper: {
    serializedName: "continuationToken",
    type: {
      name: "String",
    },
  },
};

export const operationType: OperationQueryParameter = {
  parameterPath: ["options", "operationType"],
  mapper: {
    serializedName: "OperationType",
    type: {
      name: "String",
    },
  },
};

export const workflowName: OperationURLParameter = {
  parameterPath: "workflowName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-z][a-z0-9]*$"),
    },
    serializedName: "workflowName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const filter: OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String",
    },
  },
};

export const workloadDeploymentName: OperationURLParameter = {
  parameterPath: "workloadDeploymentName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-z][a-z0-9]*$"),
    },
    serializedName: "workloadDeploymentName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const body3: OperationParameter = {
  parameterPath: ["options", "body"],
  mapper: WorkloadDeploymentModelMapper,
};

export const forceDelete: OperationQueryParameter = {
  parameterPath: ["options", "forceDelete"],
  mapper: {
    serializedName: "forceDelete",
    type: {
      name: "Boolean",
    },
  },
};

export const body4: OperationParameter = {
  parameterPath: ["options", "body"],
  mapper: BuildContainerImageModelMapper,
};

export const body5: OperationParameter = {
  parameterPath: ["options", "body"],
  mapper: TestMigrateModelMapper,
};

export const workloadInstanceName: OperationURLParameter = {
  parameterPath: "workloadInstanceName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-z][a-z0-9]*$"),
    },
    serializedName: "workloadInstanceName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const body6: OperationParameter = {
  parameterPath: ["options", "body"],
  mapper: WorkloadInstanceModelMapper,
};
