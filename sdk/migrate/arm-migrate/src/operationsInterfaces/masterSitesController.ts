/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  MasterSite,
  MasterSitesControllerListBySubscriptionOptionalParams,
  MasterSitesControllerListByResourceGroupOptionalParams,
  MasterSitesControllerGetOptionalParams,
  MasterSitesControllerGetResponse,
  MasterSitesControllerCreateOptionalParams,
  MasterSitesControllerCreateResponse,
  MasterSiteUpdate,
  MasterSitesControllerUpdateOptionalParams,
  MasterSitesControllerUpdateResponse,
  MasterSitesControllerDeleteOptionalParams,
  ErrorSummaryRequest,
  MasterSitesControllerErrorSummaryOptionalParams,
  MasterSitesControllerErrorSummaryResponse,
  MasterSitesControllerRefreshArcStatusOptionalParams,
  MasterSitesControllerRefreshArcStatusResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a MasterSitesController. */
export interface MasterSitesController {
  /**
   * List MasterSite resources by subscription ID
   * @param options The options parameters.
   */
  listBySubscription(
    options?: MasterSitesControllerListBySubscriptionOptionalParams,
  ): PagedAsyncIterableIterator<MasterSite>;
  /**
   * Get all the sites in the resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: MasterSitesControllerListByResourceGroupOptionalParams,
  ): PagedAsyncIterableIterator<MasterSite>;
  /**
   * Get a MasterSite
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    siteName: string,
    options?: MasterSitesControllerGetOptionalParams,
  ): Promise<MasterSitesControllerGetResponse>;
  /**
   * Method to create or update a site.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param body Resource create parameters.
   * @param options The options parameters.
   */
  beginCreate(
    resourceGroupName: string,
    siteName: string,
    body: MasterSite,
    options?: MasterSitesControllerCreateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<MasterSitesControllerCreateResponse>,
      MasterSitesControllerCreateResponse
    >
  >;
  /**
   * Method to create or update a site.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param body Resource create parameters.
   * @param options The options parameters.
   */
  beginCreateAndWait(
    resourceGroupName: string,
    siteName: string,
    body: MasterSite,
    options?: MasterSitesControllerCreateOptionalParams,
  ): Promise<MasterSitesControllerCreateResponse>;
  /**
   * Method to update an existing site.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    siteName: string,
    properties: MasterSiteUpdate,
    options?: MasterSitesControllerUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<MasterSitesControllerUpdateResponse>,
      MasterSitesControllerUpdateResponse
    >
  >;
  /**
   * Method to update an existing site.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    siteName: string,
    properties: MasterSiteUpdate,
    options?: MasterSitesControllerUpdateOptionalParams,
  ): Promise<MasterSitesControllerUpdateResponse>;
  /**
   * Method to delete a site.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    siteName: string,
    options?: MasterSitesControllerDeleteOptionalParams,
  ): Promise<void>;
  /**
   * Method to get error summary from master site for an appliance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param body The content of the action request
   * @param options The options parameters.
   */
  errorSummary(
    resourceGroupName: string,
    siteName: string,
    body: ErrorSummaryRequest,
    options?: MasterSitesControllerErrorSummaryOptionalParams,
  ): Promise<MasterSitesControllerErrorSummaryResponse>;
  /**
   * Method to refresh arc status from master site for an appliance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param options The options parameters.
   */
  beginRefreshArcStatus(
    resourceGroupName: string,
    siteName: string,
    options?: MasterSitesControllerRefreshArcStatusOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<MasterSitesControllerRefreshArcStatusResponse>,
      MasterSitesControllerRefreshArcStatusResponse
    >
  >;
  /**
   * Method to refresh arc status from master site for an appliance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param options The options parameters.
   */
  beginRefreshArcStatusAndWait(
    resourceGroupName: string,
    siteName: string,
    options?: MasterSitesControllerRefreshArcStatusOptionalParams,
  ): Promise<MasterSitesControllerRefreshArcStatusResponse>;
}
