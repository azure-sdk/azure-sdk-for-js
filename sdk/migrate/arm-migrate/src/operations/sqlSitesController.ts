/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { SqlSitesController } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureMigrateDiscoveryService } from "../azureMigrateDiscoveryService";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  SqlSite,
  SqlSitesControllerListByMasterSiteNextOptionalParams,
  SqlSitesControllerListByMasterSiteOptionalParams,
  SqlSitesControllerListByMasterSiteResponse,
  SqlSitesControllerGetOptionalParams,
  SqlSitesControllerGetResponse,
  SqlSitesControllerCreateOptionalParams,
  SqlSitesControllerCreateResponse,
  SqlSiteUpdate,
  SqlSitesControllerUpdateOptionalParams,
  SqlSitesControllerUpdateResponse,
  SqlSitesControllerDeleteOptionalParams,
  ErrorSummaryRequest,
  SqlSitesControllerErrorSummaryOptionalParams,
  SqlSitesControllerErrorSummaryResponse,
  SqlSitesControllerExportSqlServerErrorsOptionalParams,
  SqlSitesControllerExportSqlServerErrorsResponse,
  ExportSqlServersRequest,
  SqlSitesControllerExportSqlServersOptionalParams,
  SqlSitesControllerExportSqlServersResponse,
  SqlSiteRefreshBody,
  SqlSitesControllerRefreshOptionalParams,
  SqlSitesControllerRefreshResponse,
  SqlSitesControllerSummaryOptionalParams,
  SqlSitesControllerSummaryResponse,
  SqlSitesControllerListByMasterSiteNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing SqlSitesController operations. */
export class SqlSitesControllerImpl implements SqlSitesController {
  private readonly client: AzureMigrateDiscoveryService;

  /**
   * Initialize a new instance of the class SqlSitesController class.
   * @param client Reference to the service client
   */
  constructor(client: AzureMigrateDiscoveryService) {
    this.client = client;
  }

  /**
   * Method to get all sites.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param options The options parameters.
   */
  public listByMasterSite(
    resourceGroupName: string,
    siteName: string,
    options?: SqlSitesControllerListByMasterSiteOptionalParams,
  ): PagedAsyncIterableIterator<SqlSite> {
    const iter = this.listByMasterSitePagingAll(
      resourceGroupName,
      siteName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByMasterSitePagingPage(
          resourceGroupName,
          siteName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByMasterSitePagingPage(
    resourceGroupName: string,
    siteName: string,
    options?: SqlSitesControllerListByMasterSiteOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<SqlSite[]> {
    let result: SqlSitesControllerListByMasterSiteResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByMasterSite(
        resourceGroupName,
        siteName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByMasterSiteNext(
        resourceGroupName,
        siteName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByMasterSitePagingAll(
    resourceGroupName: string,
    siteName: string,
    options?: SqlSitesControllerListByMasterSiteOptionalParams,
  ): AsyncIterableIterator<SqlSite> {
    for await (const page of this.listByMasterSitePagingPage(
      resourceGroupName,
      siteName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Method to get all sites.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param options The options parameters.
   */
  private _listByMasterSite(
    resourceGroupName: string,
    siteName: string,
    options?: SqlSitesControllerListByMasterSiteOptionalParams,
  ): Promise<SqlSitesControllerListByMasterSiteResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, options },
      listByMasterSiteOperationSpec,
    );
  }

  /**
   * Method to get a site.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param sqlSiteName SQL site name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    siteName: string,
    sqlSiteName: string,
    options?: SqlSitesControllerGetOptionalParams,
  ): Promise<SqlSitesControllerGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, sqlSiteName, options },
      getOperationSpec,
    );
  }

  /**
   * Method to create a SQL site.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param sqlSiteName SQL site name.
   * @param body Resource create parameters.
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    siteName: string,
    sqlSiteName: string,
    body: SqlSite,
    options?: SqlSitesControllerCreateOptionalParams,
  ): Promise<SqlSitesControllerCreateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, sqlSiteName, body, options },
      createOperationSpec,
    );
  }

  /**
   * Method to update an existing site.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param sqlSiteName SQL site name.
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    siteName: string,
    sqlSiteName: string,
    properties: SqlSiteUpdate,
    options?: SqlSitesControllerUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<SqlSitesControllerUpdateResponse>,
      SqlSitesControllerUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<SqlSitesControllerUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, siteName, sqlSiteName, properties, options },
      spec: updateOperationSpec,
    });
    const poller = await createHttpPoller<
      SqlSitesControllerUpdateResponse,
      OperationState<SqlSitesControllerUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Method to update an existing site.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param sqlSiteName SQL site name.
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    siteName: string,
    sqlSiteName: string,
    properties: SqlSiteUpdate,
    options?: SqlSitesControllerUpdateOptionalParams,
  ): Promise<SqlSitesControllerUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      siteName,
      sqlSiteName,
      properties,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Deletes the SQL site.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param sqlSiteName SQL site name.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    siteName: string,
    sqlSiteName: string,
    options?: SqlSitesControllerDeleteOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, sqlSiteName, options },
      deleteOperationSpec,
    );
  }

  /**
   * Method to get error summary from SQL site.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param sqlSiteName SQL site name.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  errorSummary(
    resourceGroupName: string,
    siteName: string,
    sqlSiteName: string,
    body: ErrorSummaryRequest,
    options?: SqlSitesControllerErrorSummaryOptionalParams,
  ): Promise<SqlSitesControllerErrorSummaryResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, sqlSiteName, body, options },
      errorSummaryOperationSpec,
    );
  }

  /**
   * Method to generate report containing SQL servers.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param sqlSiteName SQL site name.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginExportSqlServerErrors(
    resourceGroupName: string,
    siteName: string,
    sqlSiteName: string,
    body: Record<string, unknown>,
    options?: SqlSitesControllerExportSqlServerErrorsOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<SqlSitesControllerExportSqlServerErrorsResponse>,
      SqlSitesControllerExportSqlServerErrorsResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<SqlSitesControllerExportSqlServerErrorsResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, siteName, sqlSiteName, body, options },
      spec: exportSqlServerErrorsOperationSpec,
    });
    const poller = await createHttpPoller<
      SqlSitesControllerExportSqlServerErrorsResponse,
      OperationState<SqlSitesControllerExportSqlServerErrorsResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Method to generate report containing SQL servers.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param sqlSiteName SQL site name.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginExportSqlServerErrorsAndWait(
    resourceGroupName: string,
    siteName: string,
    sqlSiteName: string,
    body: Record<string, unknown>,
    options?: SqlSitesControllerExportSqlServerErrorsOptionalParams,
  ): Promise<SqlSitesControllerExportSqlServerErrorsResponse> {
    const poller = await this.beginExportSqlServerErrors(
      resourceGroupName,
      siteName,
      sqlSiteName,
      body,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Method to generate report containing SQL servers.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param sqlSiteName SQL site name.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginExportSqlServers(
    resourceGroupName: string,
    siteName: string,
    sqlSiteName: string,
    body: ExportSqlServersRequest,
    options?: SqlSitesControllerExportSqlServersOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<SqlSitesControllerExportSqlServersResponse>,
      SqlSitesControllerExportSqlServersResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<SqlSitesControllerExportSqlServersResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, siteName, sqlSiteName, body, options },
      spec: exportSqlServersOperationSpec,
    });
    const poller = await createHttpPoller<
      SqlSitesControllerExportSqlServersResponse,
      OperationState<SqlSitesControllerExportSqlServersResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Method to generate report containing SQL servers.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param sqlSiteName SQL site name.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginExportSqlServersAndWait(
    resourceGroupName: string,
    siteName: string,
    sqlSiteName: string,
    body: ExportSqlServersRequest,
    options?: SqlSitesControllerExportSqlServersOptionalParams,
  ): Promise<SqlSitesControllerExportSqlServersResponse> {
    const poller = await this.beginExportSqlServers(
      resourceGroupName,
      siteName,
      sqlSiteName,
      body,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Method to refresh a site.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param sqlSiteName SQL site name.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginRefresh(
    resourceGroupName: string,
    siteName: string,
    sqlSiteName: string,
    body: SqlSiteRefreshBody,
    options?: SqlSitesControllerRefreshOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<SqlSitesControllerRefreshResponse>,
      SqlSitesControllerRefreshResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<SqlSitesControllerRefreshResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, siteName, sqlSiteName, body, options },
      spec: refreshOperationSpec,
    });
    const poller = await createHttpPoller<
      SqlSitesControllerRefreshResponse,
      OperationState<SqlSitesControllerRefreshResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Method to refresh a site.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param sqlSiteName SQL site name.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginRefreshAndWait(
    resourceGroupName: string,
    siteName: string,
    sqlSiteName: string,
    body: SqlSiteRefreshBody,
    options?: SqlSitesControllerRefreshOptionalParams,
  ): Promise<SqlSitesControllerRefreshResponse> {
    const poller = await this.beginRefresh(
      resourceGroupName,
      siteName,
      sqlSiteName,
      body,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Method to get site usage/summary.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param sqlSiteName SQL site name.
   * @param options The options parameters.
   */
  summary(
    resourceGroupName: string,
    siteName: string,
    sqlSiteName: string,
    options?: SqlSitesControllerSummaryOptionalParams,
  ): Promise<SqlSitesControllerSummaryResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, sqlSiteName, options },
      summaryOperationSpec,
    );
  }

  /**
   * ListByMasterSiteNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param nextLink The nextLink from the previous successful call to the ListByMasterSite method.
   * @param options The options parameters.
   */
  private _listByMasterSiteNext(
    resourceGroupName: string,
    siteName: string,
    nextLink: string,
    options?: SqlSitesControllerListByMasterSiteNextOptionalParams,
  ): Promise<SqlSitesControllerListByMasterSiteNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, nextLink, options },
      listByMasterSiteNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByMasterSiteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/masterSites/{siteName}/sqlSites",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SqlSiteListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/masterSites/{siteName}/sqlSites/{sqlSiteName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SqlSite,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.sqlSiteName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/masterSites/{siteName}/sqlSites/{sqlSiteName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SqlSite,
    },
    201: {
      bodyMapper: Mappers.SqlSite,
      headersMapper: Mappers.SqlSitesControllerCreateHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body18,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.sqlSiteName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/masterSites/{siteName}/sqlSites/{sqlSiteName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.SqlSite,
    },
    201: {
      bodyMapper: Mappers.SqlSite,
    },
    202: {
      bodyMapper: Mappers.SqlSite,
    },
    204: {
      bodyMapper: Mappers.SqlSite,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.properties1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.sqlSiteName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/masterSites/{siteName}/sqlSites/{sqlSiteName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.sqlSiteName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const errorSummaryOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/masterSites/{siteName}/sqlSites/{sqlSiteName}/errorSummary",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SiteErrorSummary,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body5,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.sqlSiteName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const exportSqlServerErrorsOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/masterSites/{siteName}/sqlSites/{sqlSiteName}/exportSqlServerErrors",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    201: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    202: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    204: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.sqlSiteName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const exportSqlServersOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/masterSites/{siteName}/sqlSites/{sqlSiteName}/exportSqlServers",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    201: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    202: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    204: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body19,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.sqlSiteName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const refreshOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/masterSites/{siteName}/sqlSites/{sqlSiteName}/refresh",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    201: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    202: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    204: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body20,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.sqlSiteName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const summaryOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/masterSites/{siteName}/sqlSites/{sqlSiteName}/summary",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SqlSiteUsage,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.sqlSiteName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByMasterSiteNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SqlSiteListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
