/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { HyperVMachines } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureMigrateV2 } from "../azureMigrateV2";
import {
  HyperVMachine,
  HyperVMachinesGetAllMachinesInSiteNextOptionalParams,
  HyperVMachinesGetAllMachinesInSiteOptionalParams,
  HyperVMachinesGetAllMachinesInSiteResponse,
  HyperVMachinesGetMachineOptionalParams,
  HyperVMachinesGetMachineResponse,
  HyperVMachinesGetAllMachinesInSiteNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing HyperVMachines operations. */
export class HyperVMachinesImpl implements HyperVMachines {
  private readonly client: AzureMigrateV2;

  /**
   * Initialize a new instance of the class HyperVMachines class.
   * @param client Reference to the service client
   */
  constructor(client: AzureMigrateV2) {
    this.client = client;
  }

  /**
   * Method to get machine.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name.
   * @param options The options parameters.
   */
  public listAllMachinesInSite(
    resourceGroupName: string,
    siteName: string,
    options?: HyperVMachinesGetAllMachinesInSiteOptionalParams
  ): PagedAsyncIterableIterator<HyperVMachine> {
    const iter = this.getAllMachinesInSitePagingAll(
      resourceGroupName,
      siteName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.getAllMachinesInSitePagingPage(
          resourceGroupName,
          siteName,
          options,
          settings
        );
      }
    };
  }

  private async *getAllMachinesInSitePagingPage(
    resourceGroupName: string,
    siteName: string,
    options?: HyperVMachinesGetAllMachinesInSiteOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<HyperVMachine[]> {
    let result: HyperVMachinesGetAllMachinesInSiteResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._getAllMachinesInSite(
        resourceGroupName,
        siteName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._getAllMachinesInSiteNext(
        resourceGroupName,
        siteName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *getAllMachinesInSitePagingAll(
    resourceGroupName: string,
    siteName: string,
    options?: HyperVMachinesGetAllMachinesInSiteOptionalParams
  ): AsyncIterableIterator<HyperVMachine> {
    for await (const page of this.getAllMachinesInSitePagingPage(
      resourceGroupName,
      siteName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Method to get machine.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name.
   * @param machineName Machine ARM name.
   * @param options The options parameters.
   */
  getMachine(
    resourceGroupName: string,
    siteName: string,
    machineName: string,
    options?: HyperVMachinesGetMachineOptionalParams
  ): Promise<HyperVMachinesGetMachineResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, machineName, options },
      getMachineOperationSpec
    );
  }

  /**
   * Method to get machine.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name.
   * @param options The options parameters.
   */
  private _getAllMachinesInSite(
    resourceGroupName: string,
    siteName: string,
    options?: HyperVMachinesGetAllMachinesInSiteOptionalParams
  ): Promise<HyperVMachinesGetAllMachinesInSiteResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, options },
      getAllMachinesInSiteOperationSpec
    );
  }

  /**
   * GetAllMachinesInSiteNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name.
   * @param nextLink The nextLink from the previous successful call to the GetAllMachinesInSite method.
   * @param options The options parameters.
   */
  private _getAllMachinesInSiteNext(
    resourceGroupName: string,
    siteName: string,
    nextLink: string,
    options?: HyperVMachinesGetAllMachinesInSiteNextOptionalParams
  ): Promise<HyperVMachinesGetAllMachinesInSiteNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, nextLink, options },
      getAllMachinesInSiteNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getMachineOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/HyperVSites/{siteName}/machines/{machineName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HyperVMachine
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.machineName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getAllMachinesInSiteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/HyperVSites/{siteName}/machines",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HyperVMachineCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top,
    Parameters.continuationToken,
    Parameters.totalRecordCount
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getAllMachinesInSiteNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HyperVMachineCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
