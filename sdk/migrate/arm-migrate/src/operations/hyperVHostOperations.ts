/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { HyperVHostOperations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureMigrateV2 } from "../azureMigrateV2";
import {
  HyperVHost,
  HyperVHostGetAllHostsInSiteNextOptionalParams,
  HyperVHostGetAllHostsInSiteOptionalParams,
  HyperVHostGetAllHostsInSiteResponse,
  HyperVHostGetHostOptionalParams,
  HyperVHostGetHostResponse,
  HyperVHostPutHostOptionalParams,
  HyperVHostPutHostResponse,
  HyperVHostGetAllHostsInSiteNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing HyperVHostOperations operations. */
export class HyperVHostOperationsImpl implements HyperVHostOperations {
  private readonly client: AzureMigrateV2;

  /**
   * Initialize a new instance of the class HyperVHostOperations class.
   * @param client Reference to the service client
   */
  constructor(client: AzureMigrateV2) {
    this.client = client;
  }

  /**
   * Method to get all hosts in a site.
   * @param subscriptionId The ID of the target subscription.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name.
   * @param options The options parameters.
   */
  public listAllHostsInSite(
    subscriptionId: string,
    resourceGroupName: string,
    siteName: string,
    options?: HyperVHostGetAllHostsInSiteOptionalParams
  ): PagedAsyncIterableIterator<HyperVHost> {
    const iter = this.getAllHostsInSitePagingAll(
      subscriptionId,
      resourceGroupName,
      siteName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.getAllHostsInSitePagingPage(
          subscriptionId,
          resourceGroupName,
          siteName,
          options,
          settings
        );
      }
    };
  }

  private async *getAllHostsInSitePagingPage(
    subscriptionId: string,
    resourceGroupName: string,
    siteName: string,
    options?: HyperVHostGetAllHostsInSiteOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<HyperVHost[]> {
    let result: HyperVHostGetAllHostsInSiteResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._getAllHostsInSite(
        subscriptionId,
        resourceGroupName,
        siteName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._getAllHostsInSiteNext(
        subscriptionId,
        resourceGroupName,
        siteName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *getAllHostsInSitePagingAll(
    subscriptionId: string,
    resourceGroupName: string,
    siteName: string,
    options?: HyperVHostGetAllHostsInSiteOptionalParams
  ): AsyncIterableIterator<HyperVHost> {
    for await (const page of this.getAllHostsInSitePagingPage(
      subscriptionId,
      resourceGroupName,
      siteName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Method to get a Hyper-V host.
   * @param subscriptionId The ID of the target subscription.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name.
   * @param hostName Host ARM name.
   * @param options The options parameters.
   */
  getHost(
    subscriptionId: string,
    resourceGroupName: string,
    siteName: string,
    hostName: string,
    options?: HyperVHostGetHostOptionalParams
  ): Promise<HyperVHostGetHostResponse> {
    return this.client.sendOperationRequest(
      { subscriptionId, resourceGroupName, siteName, hostName, options },
      getHostOperationSpec
    );
  }

  /**
   * Method to create or update a host in site.
   * @param subscriptionId The ID of the target subscription.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name.
   * @param hostName Host ARM name.
   * @param body Put host body.
   * @param options The options parameters.
   */
  putHost(
    subscriptionId: string,
    resourceGroupName: string,
    siteName: string,
    hostName: string,
    body: HyperVHost,
    options?: HyperVHostPutHostOptionalParams
  ): Promise<HyperVHostPutHostResponse> {
    return this.client.sendOperationRequest(
      { subscriptionId, resourceGroupName, siteName, hostName, body, options },
      putHostOperationSpec
    );
  }

  /**
   * Method to get all hosts in a site.
   * @param subscriptionId The ID of the target subscription.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name.
   * @param options The options parameters.
   */
  private _getAllHostsInSite(
    subscriptionId: string,
    resourceGroupName: string,
    siteName: string,
    options?: HyperVHostGetAllHostsInSiteOptionalParams
  ): Promise<HyperVHostGetAllHostsInSiteResponse> {
    return this.client.sendOperationRequest(
      { subscriptionId, resourceGroupName, siteName, options },
      getAllHostsInSiteOperationSpec
    );
  }

  /**
   * GetAllHostsInSiteNext
   * @param subscriptionId The ID of the target subscription.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name.
   * @param nextLink The nextLink from the previous successful call to the GetAllHostsInSite method.
   * @param options The options parameters.
   */
  private _getAllHostsInSiteNext(
    subscriptionId: string,
    resourceGroupName: string,
    siteName: string,
    nextLink: string,
    options?: HyperVHostGetAllHostsInSiteNextOptionalParams
  ): Promise<HyperVHostGetAllHostsInSiteNextResponse> {
    return this.client.sendOperationRequest(
      { subscriptionId, resourceGroupName, siteName, nextLink, options },
      getAllHostsInSiteNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getHostOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/HyperVSites/{siteName}/hosts/{hostName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HyperVHost
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.hostName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const putHostOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/HyperVSites/{siteName}/hosts/{hostName}",
  httpMethod: "PUT",
  responses: {
    202: {
      headersMapper: Mappers.HyperVHostPutHostHeaders
    }
  },
  requestBody: Parameters.body1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.hostName
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const getAllHostsInSiteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/HyperVSites/{siteName}/hosts",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HyperVHostCollection
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getAllHostsInSiteNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HyperVHostCollection
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
