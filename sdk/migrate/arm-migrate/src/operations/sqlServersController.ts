/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { SqlServersController } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { AzureMigrateDiscoveryService } from "../azureMigrateDiscoveryService.js";
import {
  SqlServerV2,
  SqlServersControllerListBySqlSiteNextOptionalParams,
  SqlServersControllerListBySqlSiteOptionalParams,
  SqlServersControllerListBySqlSiteResponse,
  SqlServersControllerGetOptionalParams,
  SqlServersControllerGetResponse,
  SqlServerV2Update,
  SqlServersControllerUpdateOptionalParams,
  SqlServersControllerUpdateResponse,
  SqlServersControllerListBySqlSiteNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing SqlServersController operations. */
export class SqlServersControllerImpl implements SqlServersController {
  private readonly client: AzureMigrateDiscoveryService;

  /**
   * Initialize a new instance of the class SqlServersController class.
   * @param client Reference to the service client
   */
  constructor(client: AzureMigrateDiscoveryService) {
    this.client = client;
  }

  /**
   * Gets the sql servers.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param sqlSiteName SQL site name.
   * @param options The options parameters.
   */
  public listBySqlSite(
    resourceGroupName: string,
    siteName: string,
    sqlSiteName: string,
    options?: SqlServersControllerListBySqlSiteOptionalParams,
  ): PagedAsyncIterableIterator<SqlServerV2> {
    const iter = this.listBySqlSitePagingAll(
      resourceGroupName,
      siteName,
      sqlSiteName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySqlSitePagingPage(
          resourceGroupName,
          siteName,
          sqlSiteName,
          options,
          settings,
        );
      },
    };
  }

  private async *listBySqlSitePagingPage(
    resourceGroupName: string,
    siteName: string,
    sqlSiteName: string,
    options?: SqlServersControllerListBySqlSiteOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<SqlServerV2[]> {
    let result: SqlServersControllerListBySqlSiteResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySqlSite(
        resourceGroupName,
        siteName,
        sqlSiteName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySqlSiteNext(
        resourceGroupName,
        siteName,
        sqlSiteName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySqlSitePagingAll(
    resourceGroupName: string,
    siteName: string,
    sqlSiteName: string,
    options?: SqlServersControllerListBySqlSiteOptionalParams,
  ): AsyncIterableIterator<SqlServerV2> {
    for await (const page of this.listBySqlSitePagingPage(
      resourceGroupName,
      siteName,
      sqlSiteName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Gets the sql servers.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param sqlSiteName SQL site name.
   * @param options The options parameters.
   */
  private _listBySqlSite(
    resourceGroupName: string,
    siteName: string,
    sqlSiteName: string,
    options?: SqlServersControllerListBySqlSiteOptionalParams,
  ): Promise<SqlServersControllerListBySqlSiteResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, sqlSiteName, options },
      listBySqlSiteOperationSpec,
    );
  }

  /**
   * Gets the sql server.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param sqlSiteName SQL site name.
   * @param sqlServerName SQL server name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    siteName: string,
    sqlSiteName: string,
    sqlServerName: string,
    options?: SqlServersControllerGetOptionalParams,
  ): Promise<SqlServersControllerGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, sqlSiteName, sqlServerName, options },
      getOperationSpec,
    );
  }

  /**
   * Updates the sql server tags.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param sqlSiteName SQL site name.
   * @param sqlServerName SQL server name.
   * @param body The resource properties to be updated.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    siteName: string,
    sqlSiteName: string,
    sqlServerName: string,
    body: SqlServerV2Update,
    options?: SqlServersControllerUpdateOptionalParams,
  ): Promise<SqlServersControllerUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        siteName,
        sqlSiteName,
        sqlServerName,
        body,
        options,
      },
      updateOperationSpec,
    );
  }

  /**
   * ListBySqlSiteNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param sqlSiteName SQL site name.
   * @param nextLink The nextLink from the previous successful call to the ListBySqlSite method.
   * @param options The options parameters.
   */
  private _listBySqlSiteNext(
    resourceGroupName: string,
    siteName: string,
    sqlSiteName: string,
    nextLink: string,
    options?: SqlServersControllerListBySqlSiteNextOptionalParams,
  ): Promise<SqlServersControllerListBySqlSiteNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, sqlSiteName, nextLink, options },
      listBySqlSiteNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listBySqlSiteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/masterSites/{siteName}/sqlSites/{sqlSiteName}/sqlServers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SqlServerV2ListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.continuationToken,
    Parameters.totalRecordCount,
    Parameters.top1,
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.sqlSiteName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/masterSites/{siteName}/sqlSites/{sqlSiteName}/sqlServers/{sqlServerName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SqlServerV2,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.sqlSiteName,
    Parameters.sqlServerName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/masterSites/{siteName}/sqlSites/{sqlSiteName}/sqlServers/{sqlServerName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.SqlServerV2,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body23,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.sqlSiteName,
    Parameters.sqlServerName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const listBySqlSiteNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SqlServerV2ListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.sqlSiteName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
