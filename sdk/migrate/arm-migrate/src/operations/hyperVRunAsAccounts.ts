/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { HyperVRunAsAccounts } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureMigrateV2 } from "../azureMigrateV2";
import {
  HyperVRunAsAccount,
  HyperVRunAsAccountsGetAllRunAsAccountsInSiteNextOptionalParams,
  HyperVRunAsAccountsGetAllRunAsAccountsInSiteOptionalParams,
  HyperVRunAsAccountsGetAllRunAsAccountsInSiteResponse,
  HyperVRunAsAccountsGetRunAsAccountOptionalParams,
  HyperVRunAsAccountsGetRunAsAccountResponse,
  HyperVRunAsAccountsGetAllRunAsAccountsInSiteNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing HyperVRunAsAccounts operations. */
export class HyperVRunAsAccountsImpl implements HyperVRunAsAccounts {
  private readonly client: AzureMigrateV2;

  /**
   * Initialize a new instance of the class HyperVRunAsAccounts class.
   * @param client Reference to the service client
   */
  constructor(client: AzureMigrateV2) {
    this.client = client;
  }

  /**
   * Method to get run as accounts.
   * @param subscriptionId The ID of the target subscription.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name.
   * @param options The options parameters.
   */
  public listAllRunAsAccountsInSite(
    subscriptionId: string,
    resourceGroupName: string,
    siteName: string,
    options?: HyperVRunAsAccountsGetAllRunAsAccountsInSiteOptionalParams
  ): PagedAsyncIterableIterator<HyperVRunAsAccount> {
    const iter = this.getAllRunAsAccountsInSitePagingAll(
      subscriptionId,
      resourceGroupName,
      siteName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.getAllRunAsAccountsInSitePagingPage(
          subscriptionId,
          resourceGroupName,
          siteName,
          options,
          settings
        );
      }
    };
  }

  private async *getAllRunAsAccountsInSitePagingPage(
    subscriptionId: string,
    resourceGroupName: string,
    siteName: string,
    options?: HyperVRunAsAccountsGetAllRunAsAccountsInSiteOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<HyperVRunAsAccount[]> {
    let result: HyperVRunAsAccountsGetAllRunAsAccountsInSiteResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._getAllRunAsAccountsInSite(
        subscriptionId,
        resourceGroupName,
        siteName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._getAllRunAsAccountsInSiteNext(
        subscriptionId,
        resourceGroupName,
        siteName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *getAllRunAsAccountsInSitePagingAll(
    subscriptionId: string,
    resourceGroupName: string,
    siteName: string,
    options?: HyperVRunAsAccountsGetAllRunAsAccountsInSiteOptionalParams
  ): AsyncIterableIterator<HyperVRunAsAccount> {
    for await (const page of this.getAllRunAsAccountsInSitePagingPage(
      subscriptionId,
      resourceGroupName,
      siteName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Method to get run as account.
   * @param subscriptionId The ID of the target subscription.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name.
   * @param accountName Run as account ARM name.
   * @param options The options parameters.
   */
  getRunAsAccount(
    subscriptionId: string,
    resourceGroupName: string,
    siteName: string,
    accountName: string,
    options?: HyperVRunAsAccountsGetRunAsAccountOptionalParams
  ): Promise<HyperVRunAsAccountsGetRunAsAccountResponse> {
    return this.client.sendOperationRequest(
      { subscriptionId, resourceGroupName, siteName, accountName, options },
      getRunAsAccountOperationSpec
    );
  }

  /**
   * Method to get run as accounts.
   * @param subscriptionId The ID of the target subscription.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name.
   * @param options The options parameters.
   */
  private _getAllRunAsAccountsInSite(
    subscriptionId: string,
    resourceGroupName: string,
    siteName: string,
    options?: HyperVRunAsAccountsGetAllRunAsAccountsInSiteOptionalParams
  ): Promise<HyperVRunAsAccountsGetAllRunAsAccountsInSiteResponse> {
    return this.client.sendOperationRequest(
      { subscriptionId, resourceGroupName, siteName, options },
      getAllRunAsAccountsInSiteOperationSpec
    );
  }

  /**
   * GetAllRunAsAccountsInSiteNext
   * @param subscriptionId The ID of the target subscription.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name.
   * @param nextLink The nextLink from the previous successful call to the GetAllRunAsAccountsInSite
   *                 method.
   * @param options The options parameters.
   */
  private _getAllRunAsAccountsInSiteNext(
    subscriptionId: string,
    resourceGroupName: string,
    siteName: string,
    nextLink: string,
    options?: HyperVRunAsAccountsGetAllRunAsAccountsInSiteNextOptionalParams
  ): Promise<HyperVRunAsAccountsGetAllRunAsAccountsInSiteNextResponse> {
    return this.client.sendOperationRequest(
      { subscriptionId, resourceGroupName, siteName, nextLink, options },
      getAllRunAsAccountsInSiteNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getRunAsAccountOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/HyperVSites/{siteName}/runAsAccounts/{accountName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HyperVRunAsAccount
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.accountName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getAllRunAsAccountsInSiteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/HyperVSites/{siteName}/runAsAccounts",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HyperVRunAsAccountCollection
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getAllRunAsAccountsInSiteNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HyperVRunAsAccountCollection
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
