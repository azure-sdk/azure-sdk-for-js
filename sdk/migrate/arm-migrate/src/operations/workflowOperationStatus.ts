/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { WorkflowOperationStatus } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureMigrateEngineAPIs } from "../azureMigrateEngineAPIs";
import {
  WorkflowOperationStatusGetOptionalParams,
  WorkflowOperationStatusGetResponse,
} from "../models";

/** Class containing WorkflowOperationStatus operations. */
export class WorkflowOperationStatusImpl implements WorkflowOperationStatus {
  private readonly client: AzureMigrateEngineAPIs;

  /**
   * Initialize a new instance of the class WorkflowOperationStatus class.
   * @param client Reference to the service client
   */
  constructor(client: AzureMigrateEngineAPIs) {
    this.client = client;
  }

  /**
   * Tracks the results of an asynchronous operation on the job.
   * @param subscriptionId Azure Subscription Id in which project was created.
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param modernizeProjectName ModernizeProject name.
   * @param workflowName Workflow name.
   * @param operationId Operation Id.
   * @param options The options parameters.
   */
  get(
    subscriptionId: string,
    resourceGroupName: string,
    modernizeProjectName: string,
    workflowName: string,
    operationId: string,
    options?: WorkflowOperationStatusGetOptionalParams,
  ): Promise<WorkflowOperationStatusGetResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        resourceGroupName,
        modernizeProjectName,
        workflowName,
        operationId,
        options,
      },
      getOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/modernizeProjects/{modernizeProjectName}/jobs/{workflowName}/operations/{operationId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus,
    },
    default: {
      bodyMapper: Mappers.ArmError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.modernizeProjectName,
    Parameters.operationId,
    Parameters.workflowName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
