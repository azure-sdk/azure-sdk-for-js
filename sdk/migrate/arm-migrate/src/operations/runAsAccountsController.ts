/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { RunAsAccountsController } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureMigrateDiscoveryService } from "../azureMigrateDiscoveryService";
import {
  VmwareRunAsAccountResource,
  RunAsAccountsControllerListByVmwareSiteNextOptionalParams,
  RunAsAccountsControllerListByVmwareSiteOptionalParams,
  RunAsAccountsControllerListByVmwareSiteResponse,
  RunAsAccountsControllerGetOptionalParams,
  RunAsAccountsControllerGetResponse,
  RunAsAccountsControllerListByVmwareSiteNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing RunAsAccountsController operations. */
export class RunAsAccountsControllerImpl implements RunAsAccountsController {
  private readonly client: AzureMigrateDiscoveryService;

  /**
   * Initialize a new instance of the class RunAsAccountsController class.
   * @param client Reference to the service client
   */
  constructor(client: AzureMigrateDiscoveryService) {
    this.client = client;
  }

  /**
   * List VmwareRunAsAccountResource resources by VmwareSite
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param options The options parameters.
   */
  public listByVmwareSite(
    resourceGroupName: string,
    siteName: string,
    options?: RunAsAccountsControllerListByVmwareSiteOptionalParams,
  ): PagedAsyncIterableIterator<VmwareRunAsAccountResource> {
    const iter = this.listByVmwareSitePagingAll(
      resourceGroupName,
      siteName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByVmwareSitePagingPage(
          resourceGroupName,
          siteName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByVmwareSitePagingPage(
    resourceGroupName: string,
    siteName: string,
    options?: RunAsAccountsControllerListByVmwareSiteOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<VmwareRunAsAccountResource[]> {
    let result: RunAsAccountsControllerListByVmwareSiteResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByVmwareSite(
        resourceGroupName,
        siteName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByVmwareSiteNext(
        resourceGroupName,
        siteName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByVmwareSitePagingAll(
    resourceGroupName: string,
    siteName: string,
    options?: RunAsAccountsControllerListByVmwareSiteOptionalParams,
  ): AsyncIterableIterator<VmwareRunAsAccountResource> {
    for await (const page of this.listByVmwareSitePagingPage(
      resourceGroupName,
      siteName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List VmwareRunAsAccountResource resources by VmwareSite
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param options The options parameters.
   */
  private _listByVmwareSite(
    resourceGroupName: string,
    siteName: string,
    options?: RunAsAccountsControllerListByVmwareSiteOptionalParams,
  ): Promise<RunAsAccountsControllerListByVmwareSiteResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, options },
      listByVmwareSiteOperationSpec,
    );
  }

  /**
   * Get a VmwareRunAsAccountResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param accountName  RunAsAccounts name
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    siteName: string,
    accountName: string,
    options?: RunAsAccountsControllerGetOptionalParams,
  ): Promise<RunAsAccountsControllerGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, accountName, options },
      getOperationSpec,
    );
  }

  /**
   * ListByVmwareSiteNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param nextLink The nextLink from the previous successful call to the ListByVmwareSite method.
   * @param options The options parameters.
   */
  private _listByVmwareSiteNext(
    resourceGroupName: string,
    siteName: string,
    nextLink: string,
    options?: RunAsAccountsControllerListByVmwareSiteNextOptionalParams,
  ): Promise<RunAsAccountsControllerListByVmwareSiteNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, nextLink, options },
      listByVmwareSiteNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByVmwareSiteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/vmwareSites/{siteName}/runAsAccounts",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VmwareRunAsAccountResourceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/vmwareSites/{siteName}/runAsAccounts/{accountName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VmwareRunAsAccountResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.accountName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByVmwareSiteNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VmwareRunAsAccountResourceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
