/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { HyperVClusterOperations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureMigrateV2 } from "../azureMigrateV2";
import {
  HyperVCluster,
  HyperVClusterGetAllClustersInSiteNextOptionalParams,
  HyperVClusterGetAllClustersInSiteOptionalParams,
  HyperVClusterGetAllClustersInSiteResponse,
  HyperVClusterGetClusterOptionalParams,
  HyperVClusterGetClusterResponse,
  HyperVClusterPutClusterOptionalParams,
  HyperVClusterPutClusterResponse,
  HyperVClusterGetAllClustersInSiteNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing HyperVClusterOperations operations. */
export class HyperVClusterOperationsImpl implements HyperVClusterOperations {
  private readonly client: AzureMigrateV2;

  /**
   * Initialize a new instance of the class HyperVClusterOperations class.
   * @param client Reference to the service client
   */
  constructor(client: AzureMigrateV2) {
    this.client = client;
  }

  /**
   * Method to get all clusters in a site.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name.
   * @param options The options parameters.
   */
  public listAllClustersInSite(
    resourceGroupName: string,
    siteName: string,
    options?: HyperVClusterGetAllClustersInSiteOptionalParams
  ): PagedAsyncIterableIterator<HyperVCluster> {
    const iter = this.getAllClustersInSitePagingAll(
      resourceGroupName,
      siteName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.getAllClustersInSitePagingPage(
          resourceGroupName,
          siteName,
          options,
          settings
        );
      }
    };
  }

  private async *getAllClustersInSitePagingPage(
    resourceGroupName: string,
    siteName: string,
    options?: HyperVClusterGetAllClustersInSiteOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<HyperVCluster[]> {
    let result: HyperVClusterGetAllClustersInSiteResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._getAllClustersInSite(
        resourceGroupName,
        siteName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._getAllClustersInSiteNext(
        resourceGroupName,
        siteName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *getAllClustersInSitePagingAll(
    resourceGroupName: string,
    siteName: string,
    options?: HyperVClusterGetAllClustersInSiteOptionalParams
  ): AsyncIterableIterator<HyperVCluster> {
    for await (const page of this.getAllClustersInSitePagingPage(
      resourceGroupName,
      siteName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Method to get a Hyper-V cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name.
   * @param clusterName Cluster ARM name.
   * @param options The options parameters.
   */
  getCluster(
    resourceGroupName: string,
    siteName: string,
    clusterName: string,
    options?: HyperVClusterGetClusterOptionalParams
  ): Promise<HyperVClusterGetClusterResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, clusterName, options },
      getClusterOperationSpec
    );
  }

  /**
   * Method to create or update a cluster in site.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name.
   * @param clusterName Cluster ARM name.
   * @param body Put cluster body.
   * @param options The options parameters.
   */
  putCluster(
    resourceGroupName: string,
    siteName: string,
    clusterName: string,
    body: HyperVCluster,
    options?: HyperVClusterPutClusterOptionalParams
  ): Promise<HyperVClusterPutClusterResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, clusterName, body, options },
      putClusterOperationSpec
    );
  }

  /**
   * Method to get all clusters in a site.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name.
   * @param options The options parameters.
   */
  private _getAllClustersInSite(
    resourceGroupName: string,
    siteName: string,
    options?: HyperVClusterGetAllClustersInSiteOptionalParams
  ): Promise<HyperVClusterGetAllClustersInSiteResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, options },
      getAllClustersInSiteOperationSpec
    );
  }

  /**
   * GetAllClustersInSiteNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name.
   * @param nextLink The nextLink from the previous successful call to the GetAllClustersInSite method.
   * @param options The options parameters.
   */
  private _getAllClustersInSiteNext(
    resourceGroupName: string,
    siteName: string,
    nextLink: string,
    options?: HyperVClusterGetAllClustersInSiteNextOptionalParams
  ): Promise<HyperVClusterGetAllClustersInSiteNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, nextLink, options },
      getAllClustersInSiteNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getClusterOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/HyperVSites/{siteName}/clusters/{clusterName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HyperVCluster
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.clusterName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const putClusterOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/HyperVSites/{siteName}/clusters/{clusterName}",
  httpMethod: "PUT",
  responses: {
    202: {
      headersMapper: Mappers.HyperVClusterPutClusterHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.clusterName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getAllClustersInSiteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/HyperVSites/{siteName}/clusters",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HyperVClusterCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getAllClustersInSiteNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HyperVClusterCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
