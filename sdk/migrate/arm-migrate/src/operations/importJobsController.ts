/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { ImportJobsController } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureMigrateDiscoveryService } from "../azureMigrateDiscoveryService";
import {
  DeleteImportMachinesJob,
  ImportJobsControllerListDeletejobsNextOptionalParams,
  ImportJobsControllerListDeletejobsOptionalParams,
  ImportJobsControllerListDeletejobsResponse,
  ExportImportedMachinesJob,
  ImportJobsControllerListExportjobsNextOptionalParams,
  ImportJobsControllerListExportjobsOptionalParams,
  ImportJobsControllerListExportjobsResponse,
  ImportMachinesJob,
  ImportJobsControllerListImportjobsNextOptionalParams,
  ImportJobsControllerListImportjobsOptionalParams,
  ImportJobsControllerListImportjobsResponse,
  ImportJob,
  ImportJobsControllerListByImportSiteNextOptionalParams,
  ImportJobsControllerListByImportSiteOptionalParams,
  ImportJobsControllerListByImportSiteResponse,
  ImportJobsControllerGetDeletejobOptionalParams,
  ImportJobsControllerGetDeletejobResponse,
  ImportJobsControllerGetExportjobOptionalParams,
  ImportJobsControllerGetExportjobResponse,
  ImportJobsControllerGetImportjobOptionalParams,
  ImportJobsControllerGetImportjobResponse,
  ImportJobsControllerGetOptionalParams,
  ImportJobsControllerGetResponse,
  ImportJobsControllerListDeletejobsNextResponse,
  ImportJobsControllerListExportjobsNextResponse,
  ImportJobsControllerListImportjobsNextResponse,
  ImportJobsControllerListByImportSiteNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ImportJobsController operations. */
export class ImportJobsControllerImpl implements ImportJobsController {
  private readonly client: AzureMigrateDiscoveryService;

  /**
   * Initialize a new instance of the class ImportJobsController class.
   * @param client Reference to the service client
   */
  constructor(client: AzureMigrateDiscoveryService) {
    this.client = client;
  }

  /**
   * Method to get all delete import machines job for the given site.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param options The options parameters.
   */
  public listDeletejobs(
    resourceGroupName: string,
    siteName: string,
    options?: ImportJobsControllerListDeletejobsOptionalParams,
  ): PagedAsyncIterableIterator<DeleteImportMachinesJob> {
    const iter = this.listDeletejobsPagingAll(
      resourceGroupName,
      siteName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listDeletejobsPagingPage(
          resourceGroupName,
          siteName,
          options,
          settings,
        );
      },
    };
  }

  private async *listDeletejobsPagingPage(
    resourceGroupName: string,
    siteName: string,
    options?: ImportJobsControllerListDeletejobsOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<DeleteImportMachinesJob[]> {
    let result: ImportJobsControllerListDeletejobsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listDeletejobs(resourceGroupName, siteName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listDeletejobsNext(
        resourceGroupName,
        siteName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listDeletejobsPagingAll(
    resourceGroupName: string,
    siteName: string,
    options?: ImportJobsControllerListDeletejobsOptionalParams,
  ): AsyncIterableIterator<DeleteImportMachinesJob> {
    for await (const page of this.listDeletejobsPagingPage(
      resourceGroupName,
      siteName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Method to get all export import machines job for the given site.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param options The options parameters.
   */
  public listExportjobs(
    resourceGroupName: string,
    siteName: string,
    options?: ImportJobsControllerListExportjobsOptionalParams,
  ): PagedAsyncIterableIterator<ExportImportedMachinesJob> {
    const iter = this.listExportjobsPagingAll(
      resourceGroupName,
      siteName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listExportjobsPagingPage(
          resourceGroupName,
          siteName,
          options,
          settings,
        );
      },
    };
  }

  private async *listExportjobsPagingPage(
    resourceGroupName: string,
    siteName: string,
    options?: ImportJobsControllerListExportjobsOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<ExportImportedMachinesJob[]> {
    let result: ImportJobsControllerListExportjobsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listExportjobs(resourceGroupName, siteName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listExportjobsNext(
        resourceGroupName,
        siteName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listExportjobsPagingAll(
    resourceGroupName: string,
    siteName: string,
    options?: ImportJobsControllerListExportjobsOptionalParams,
  ): AsyncIterableIterator<ExportImportedMachinesJob> {
    for await (const page of this.listExportjobsPagingPage(
      resourceGroupName,
      siteName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Method to get all import machines job for the given site.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param options The options parameters.
   */
  public listImportjobs(
    resourceGroupName: string,
    siteName: string,
    options?: ImportJobsControllerListImportjobsOptionalParams,
  ): PagedAsyncIterableIterator<ImportMachinesJob> {
    const iter = this.listImportjobsPagingAll(
      resourceGroupName,
      siteName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listImportjobsPagingPage(
          resourceGroupName,
          siteName,
          options,
          settings,
        );
      },
    };
  }

  private async *listImportjobsPagingPage(
    resourceGroupName: string,
    siteName: string,
    options?: ImportJobsControllerListImportjobsOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<ImportMachinesJob[]> {
    let result: ImportJobsControllerListImportjobsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listImportjobs(resourceGroupName, siteName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listImportjobsNext(
        resourceGroupName,
        siteName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listImportjobsPagingAll(
    resourceGroupName: string,
    siteName: string,
    options?: ImportJobsControllerListImportjobsOptionalParams,
  ): AsyncIterableIterator<ImportMachinesJob> {
    for await (const page of this.listImportjobsPagingPage(
      resourceGroupName,
      siteName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List ImportJob resources by ImportSite
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param options The options parameters.
   */
  public listByImportSite(
    resourceGroupName: string,
    siteName: string,
    options?: ImportJobsControllerListByImportSiteOptionalParams,
  ): PagedAsyncIterableIterator<ImportJob> {
    const iter = this.listByImportSitePagingAll(
      resourceGroupName,
      siteName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByImportSitePagingPage(
          resourceGroupName,
          siteName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByImportSitePagingPage(
    resourceGroupName: string,
    siteName: string,
    options?: ImportJobsControllerListByImportSiteOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<ImportJob[]> {
    let result: ImportJobsControllerListByImportSiteResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByImportSite(
        resourceGroupName,
        siteName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByImportSiteNext(
        resourceGroupName,
        siteName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByImportSitePagingAll(
    resourceGroupName: string,
    siteName: string,
    options?: ImportJobsControllerListByImportSiteOptionalParams,
  ): AsyncIterableIterator<ImportJob> {
    for await (const page of this.listByImportSitePagingPage(
      resourceGroupName,
      siteName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Method to get all delete import machines job for the given site.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param options The options parameters.
   */
  private _listDeletejobs(
    resourceGroupName: string,
    siteName: string,
    options?: ImportJobsControllerListDeletejobsOptionalParams,
  ): Promise<ImportJobsControllerListDeletejobsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, options },
      listDeletejobsOperationSpec,
    );
  }

  /**
   * Gets the delete imported machines job with the given job name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param jobName Job Arm Name.
   * @param options The options parameters.
   */
  getDeletejob(
    resourceGroupName: string,
    siteName: string,
    jobName: string,
    options?: ImportJobsControllerGetDeletejobOptionalParams,
  ): Promise<ImportJobsControllerGetDeletejobResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, jobName, options },
      getDeletejobOperationSpec,
    );
  }

  /**
   * Method to get all export import machines job for the given site.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param options The options parameters.
   */
  private _listExportjobs(
    resourceGroupName: string,
    siteName: string,
    options?: ImportJobsControllerListExportjobsOptionalParams,
  ): Promise<ImportJobsControllerListExportjobsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, options },
      listExportjobsOperationSpec,
    );
  }

  /**
   * Gets the export imported machines job with the given job name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param jobName Job Arm Name.
   * @param options The options parameters.
   */
  getExportjob(
    resourceGroupName: string,
    siteName: string,
    jobName: string,
    options?: ImportJobsControllerGetExportjobOptionalParams,
  ): Promise<ImportJobsControllerGetExportjobResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, jobName, options },
      getExportjobOperationSpec,
    );
  }

  /**
   * Method to get all import machines job for the given site.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param options The options parameters.
   */
  private _listImportjobs(
    resourceGroupName: string,
    siteName: string,
    options?: ImportJobsControllerListImportjobsOptionalParams,
  ): Promise<ImportJobsControllerListImportjobsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, options },
      listImportjobsOperationSpec,
    );
  }

  /**
   * Gets the import job with the given job name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param jobName Job Arm Name.
   * @param options The options parameters.
   */
  getImportjob(
    resourceGroupName: string,
    siteName: string,
    jobName: string,
    options?: ImportJobsControllerGetImportjobOptionalParams,
  ): Promise<ImportJobsControllerGetImportjobResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, jobName, options },
      getImportjobOperationSpec,
    );
  }

  /**
   * List ImportJob resources by ImportSite
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param options The options parameters.
   */
  private _listByImportSite(
    resourceGroupName: string,
    siteName: string,
    options?: ImportJobsControllerListByImportSiteOptionalParams,
  ): Promise<ImportJobsControllerListByImportSiteResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, options },
      listByImportSiteOperationSpec,
    );
  }

  /**
   * Get a ImportJob
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param jobName  Jobs name
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    siteName: string,
    jobName: string,
    options?: ImportJobsControllerGetOptionalParams,
  ): Promise<ImportJobsControllerGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, jobName, options },
      getOperationSpec,
    );
  }

  /**
   * ListDeletejobsNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param nextLink The nextLink from the previous successful call to the ListDeletejobs method.
   * @param options The options parameters.
   */
  private _listDeletejobsNext(
    resourceGroupName: string,
    siteName: string,
    nextLink: string,
    options?: ImportJobsControllerListDeletejobsNextOptionalParams,
  ): Promise<ImportJobsControllerListDeletejobsNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, nextLink, options },
      listDeletejobsNextOperationSpec,
    );
  }

  /**
   * ListExportjobsNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param nextLink The nextLink from the previous successful call to the ListExportjobs method.
   * @param options The options parameters.
   */
  private _listExportjobsNext(
    resourceGroupName: string,
    siteName: string,
    nextLink: string,
    options?: ImportJobsControllerListExportjobsNextOptionalParams,
  ): Promise<ImportJobsControllerListExportjobsNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, nextLink, options },
      listExportjobsNextOperationSpec,
    );
  }

  /**
   * ListImportjobsNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param nextLink The nextLink from the previous successful call to the ListImportjobs method.
   * @param options The options parameters.
   */
  private _listImportjobsNext(
    resourceGroupName: string,
    siteName: string,
    nextLink: string,
    options?: ImportJobsControllerListImportjobsNextOptionalParams,
  ): Promise<ImportJobsControllerListImportjobsNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, nextLink, options },
      listImportjobsNextOperationSpec,
    );
  }

  /**
   * ListByImportSiteNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param nextLink The nextLink from the previous successful call to the ListByImportSite method.
   * @param options The options parameters.
   */
  private _listByImportSiteNext(
    resourceGroupName: string,
    siteName: string,
    nextLink: string,
    options?: ImportJobsControllerListByImportSiteNextOptionalParams,
  ): Promise<ImportJobsControllerListByImportSiteNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, nextLink, options },
      listByImportSiteNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listDeletejobsOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/importSites/{siteName}/deleteJobs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PagedDeleteImportMachinesJob,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getDeletejobOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/importSites/{siteName}/deleteJobs/{jobName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeleteImportMachinesJob,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.jobName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listExportjobsOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/importSites/{siteName}/exportJobs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PagedExportImportedMachinesJob,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getExportjobOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/importSites/{siteName}/exportJobs/{jobName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ExportImportedMachinesJob,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.jobName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listImportjobsOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/importSites/{siteName}/importJobs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PagedImportMachinesJob,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getImportjobOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/importSites/{siteName}/importJobs/{jobName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ImportMachinesJob,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.jobName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByImportSiteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/importSites/{siteName}/jobs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ImportJobListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/importSites/{siteName}/jobs/{jobName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ImportJob,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.jobName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listDeletejobsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PagedDeleteImportMachinesJob,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listExportjobsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PagedExportImportedMachinesJob,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listImportjobsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PagedImportMachinesJob,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByImportSiteNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ImportJobListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
