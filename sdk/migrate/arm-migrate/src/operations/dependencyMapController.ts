/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { DependencyMapController } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureMigrateDiscoveryService } from "../azureMigrateDiscoveryService";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  DependencyMapServiceMapextensionsClientGroupMembersRequest,
  DependencyMapControllerClientGroupMembersOptionalParams,
  DependencyMapControllerClientGroupMembersResponse,
  DependencyMapServiceMapextensionsExportDependenciesRequest,
  DependencyMapControllerExportDependenciesOptionalParams,
  DependencyMapControllerExportDependenciesResponse,
  DependencyMapServiceMapextensionsScopeMapRequest,
  DependencyMapControllerGenerateCoarseMapOptionalParams,
  DependencyMapControllerGenerateCoarseMapResponse,
  DependencyMapServiceMapextensionsSingleMachineDetailedMapRequest,
  DependencyMapControllerGenerateDetailedMapOptionalParams,
  DependencyMapControllerGenerateDetailedMapResponse,
  DependencyMapServiceMapextensionsServerGroupMembersRequest,
  DependencyMapControllerServerGroupMembersOptionalParams,
  DependencyMapControllerServerGroupMembersResponse,
} from "../models";

/** Class containing DependencyMapController operations. */
export class DependencyMapControllerImpl implements DependencyMapController {
  private readonly client: AzureMigrateDiscoveryService;

  /**
   * Initialize a new instance of the class DependencyMapController class.
   * @param client Reference to the service client
   */
  constructor(client: AzureMigrateDiscoveryService) {
    this.client = client;
  }

  /**
   * API to list client group members for the selected client group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param mapRequest The content of the action request
   * @param options The options parameters.
   */
  async beginClientGroupMembers(
    resourceGroupName: string,
    siteName: string,
    mapRequest: DependencyMapServiceMapextensionsClientGroupMembersRequest,
    options?: DependencyMapControllerClientGroupMembersOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<DependencyMapControllerClientGroupMembersResponse>,
      DependencyMapControllerClientGroupMembersResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<DependencyMapControllerClientGroupMembersResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, siteName, mapRequest, options },
      spec: clientGroupMembersOperationSpec,
    });
    const poller = await createHttpPoller<
      DependencyMapControllerClientGroupMembersResponse,
      OperationState<DependencyMapControllerClientGroupMembersResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * API to list client group members for the selected client group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param mapRequest The content of the action request
   * @param options The options parameters.
   */
  async beginClientGroupMembersAndWait(
    resourceGroupName: string,
    siteName: string,
    mapRequest: DependencyMapServiceMapextensionsClientGroupMembersRequest,
    options?: DependencyMapControllerClientGroupMembersOptionalParams,
  ): Promise<DependencyMapControllerClientGroupMembersResponse> {
    const poller = await this.beginClientGroupMembers(
      resourceGroupName,
      siteName,
      mapRequest,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * API to generate report containing agentless dependencies.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param requestBody The content of the action request
   * @param options The options parameters.
   */
  async beginExportDependencies(
    resourceGroupName: string,
    siteName: string,
    requestBody: DependencyMapServiceMapextensionsExportDependenciesRequest,
    options?: DependencyMapControllerExportDependenciesOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<DependencyMapControllerExportDependenciesResponse>,
      DependencyMapControllerExportDependenciesResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<DependencyMapControllerExportDependenciesResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, siteName, requestBody, options },
      spec: exportDependenciesOperationSpec,
    });
    const poller = await createHttpPoller<
      DependencyMapControllerExportDependenciesResponse,
      OperationState<DependencyMapControllerExportDependenciesResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * API to generate report containing agentless dependencies.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param requestBody The content of the action request
   * @param options The options parameters.
   */
  async beginExportDependenciesAndWait(
    resourceGroupName: string,
    siteName: string,
    requestBody: DependencyMapServiceMapextensionsExportDependenciesRequest,
    options?: DependencyMapControllerExportDependenciesOptionalParams,
  ): Promise<DependencyMapControllerExportDependenciesResponse> {
    const poller = await this.beginExportDependencies(
      resourceGroupName,
      siteName,
      requestBody,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * API to generate coarse map for the list of machines.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param mapRequest The content of the action request
   * @param options The options parameters.
   */
  async beginGenerateCoarseMap(
    resourceGroupName: string,
    siteName: string,
    mapRequest: DependencyMapServiceMapextensionsScopeMapRequest,
    options?: DependencyMapControllerGenerateCoarseMapOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<DependencyMapControllerGenerateCoarseMapResponse>,
      DependencyMapControllerGenerateCoarseMapResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<DependencyMapControllerGenerateCoarseMapResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, siteName, mapRequest, options },
      spec: generateCoarseMapOperationSpec,
    });
    const poller = await createHttpPoller<
      DependencyMapControllerGenerateCoarseMapResponse,
      OperationState<DependencyMapControllerGenerateCoarseMapResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * API to generate coarse map for the list of machines.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param mapRequest The content of the action request
   * @param options The options parameters.
   */
  async beginGenerateCoarseMapAndWait(
    resourceGroupName: string,
    siteName: string,
    mapRequest: DependencyMapServiceMapextensionsScopeMapRequest,
    options?: DependencyMapControllerGenerateCoarseMapOptionalParams,
  ): Promise<DependencyMapControllerGenerateCoarseMapResponse> {
    const poller = await this.beginGenerateCoarseMap(
      resourceGroupName,
      siteName,
      mapRequest,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * API to generate detailed map for a selected machine.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param mapRequest The content of the action request
   * @param options The options parameters.
   */
  async beginGenerateDetailedMap(
    resourceGroupName: string,
    siteName: string,
    mapRequest: DependencyMapServiceMapextensionsSingleMachineDetailedMapRequest,
    options?: DependencyMapControllerGenerateDetailedMapOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<DependencyMapControllerGenerateDetailedMapResponse>,
      DependencyMapControllerGenerateDetailedMapResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<DependencyMapControllerGenerateDetailedMapResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, siteName, mapRequest, options },
      spec: generateDetailedMapOperationSpec,
    });
    const poller = await createHttpPoller<
      DependencyMapControllerGenerateDetailedMapResponse,
      OperationState<DependencyMapControllerGenerateDetailedMapResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * API to generate detailed map for a selected machine.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param mapRequest The content of the action request
   * @param options The options parameters.
   */
  async beginGenerateDetailedMapAndWait(
    resourceGroupName: string,
    siteName: string,
    mapRequest: DependencyMapServiceMapextensionsSingleMachineDetailedMapRequest,
    options?: DependencyMapControllerGenerateDetailedMapOptionalParams,
  ): Promise<DependencyMapControllerGenerateDetailedMapResponse> {
    const poller = await this.beginGenerateDetailedMap(
      resourceGroupName,
      siteName,
      mapRequest,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * API to list server group members for the selected server group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param mapRequest The content of the action request
   * @param options The options parameters.
   */
  async beginServerGroupMembers(
    resourceGroupName: string,
    siteName: string,
    mapRequest: DependencyMapServiceMapextensionsServerGroupMembersRequest,
    options?: DependencyMapControllerServerGroupMembersOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<DependencyMapControllerServerGroupMembersResponse>,
      DependencyMapControllerServerGroupMembersResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<DependencyMapControllerServerGroupMembersResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, siteName, mapRequest, options },
      spec: serverGroupMembersOperationSpec,
    });
    const poller = await createHttpPoller<
      DependencyMapControllerServerGroupMembersResponse,
      OperationState<DependencyMapControllerServerGroupMembersResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * API to list server group members for the selected server group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param mapRequest The content of the action request
   * @param options The options parameters.
   */
  async beginServerGroupMembersAndWait(
    resourceGroupName: string,
    siteName: string,
    mapRequest: DependencyMapServiceMapextensionsServerGroupMembersRequest,
    options?: DependencyMapControllerServerGroupMembersOptionalParams,
  ): Promise<DependencyMapControllerServerGroupMembersResponse> {
    const poller = await this.beginServerGroupMembers(
      resourceGroupName,
      siteName,
      mapRequest,
      options,
    );
    return poller.pollUntilDone();
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const clientGroupMembersOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/vmwareSites/{siteName}/clientGroupMembers",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    201: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    202: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    204: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.mapRequest1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const exportDependenciesOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/vmwareSites/{siteName}/exportDependencies",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    201: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    202: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    204: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.requestBody,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const generateCoarseMapOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/vmwareSites/{siteName}/generateCoarseMap",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    201: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    202: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    204: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.mapRequest2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const generateDetailedMapOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/vmwareSites/{siteName}/generateDetailedMap",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    201: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    202: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    204: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.mapRequest3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const serverGroupMembersOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/vmwareSites/{siteName}/serverGroupMembers",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    201: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    202: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    204: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.mapRequest4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
