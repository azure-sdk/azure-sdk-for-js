/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PrivateEndpointConnectionOperations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureMigrateV2 } from "../azureMigrateV2";
import {
  PrivateEndpointConnectionGetPrivateEndpointConnectionOptionalParams,
  PrivateEndpointConnectionGetPrivateEndpointConnectionResponse,
  PrivateEndpointConnection,
  PrivateEndpointConnectionPutPrivateEndpointConnectionOptionalParams,
  PrivateEndpointConnectionPutPrivateEndpointConnectionResponse,
  PrivateEndpointConnectionDeletePrivateEndpointConnectionOptionalParams,
  PrivateEndpointConnectionGetPrivateEndpointConnectionsOptionalParams,
  PrivateEndpointConnectionGetPrivateEndpointConnectionsResponse
} from "../models";

/** Class containing PrivateEndpointConnectionOperations operations. */
export class PrivateEndpointConnectionOperationsImpl
  implements PrivateEndpointConnectionOperations {
  private readonly client: AzureMigrateV2;

  /**
   * Initialize a new instance of the class PrivateEndpointConnectionOperations class.
   * @param client Reference to the service client
   */
  constructor(client: AzureMigrateV2) {
    this.client = client;
  }

  /**
   * Gets the private link resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name.
   * @param peConnectionName Private link resource name.
   * @param options The options parameters.
   */
  getPrivateEndpointConnection(
    resourceGroupName: string,
    siteName: string,
    peConnectionName: string,
    options?: PrivateEndpointConnectionGetPrivateEndpointConnectionOptionalParams
  ): Promise<PrivateEndpointConnectionGetPrivateEndpointConnectionResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, peConnectionName, options },
      getPrivateEndpointConnectionOperationSpec
    );
  }

  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name.
   * @param peConnectionName Private link resource name.
   * @param body REST model used to encapsulate the user visible state of a PrivateEndpoint.
   * @param options The options parameters.
   */
  putPrivateEndpointConnection(
    resourceGroupName: string,
    siteName: string,
    peConnectionName: string,
    body: PrivateEndpointConnection,
    options?: PrivateEndpointConnectionPutPrivateEndpointConnectionOptionalParams
  ): Promise<PrivateEndpointConnectionPutPrivateEndpointConnectionResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, peConnectionName, body, options },
      putPrivateEndpointConnectionOperationSpec
    );
  }

  /**
   * Gets the private link resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name.
   * @param peConnectionName Private link resource name.
   * @param options The options parameters.
   */
  deletePrivateEndpointConnection(
    resourceGroupName: string,
    siteName: string,
    peConnectionName: string,
    options?: PrivateEndpointConnectionDeletePrivateEndpointConnectionOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, peConnectionName, options },
      deletePrivateEndpointConnectionOperationSpec
    );
  }

  /**
   * Gets the private link resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name.
   * @param options The options parameters.
   */
  getPrivateEndpointConnections(
    resourceGroupName: string,
    siteName: string,
    options?: PrivateEndpointConnectionGetPrivateEndpointConnectionsOptionalParams
  ): Promise<PrivateEndpointConnectionGetPrivateEndpointConnectionsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, options },
      getPrivateEndpointConnectionsOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getPrivateEndpointConnectionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/masterSites/{siteName}/privateEndpointConnections/{peConnectionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PrivateEndpointConnection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.peConnectionName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const putPrivateEndpointConnectionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/masterSites/{siteName}/privateEndpointConnections/{peConnectionName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.PrivateEndpointConnection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.body6,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.peConnectionName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deletePrivateEndpointConnectionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/masterSites/{siteName}/privateEndpointConnections/{peConnectionName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.peConnectionName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getPrivateEndpointConnectionsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/masterSites/{siteName}/privateEndpointConnections",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PrivateEndpointConnectionCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
