/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { ServerSoftwareInventoriesController } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { AzureMigrateDiscoveryService } from "../azureMigrateDiscoveryService.js";
import {
  ServerSoftwareInventory,
  ServerSoftwareInventoriesControllerListByServerNextOptionalParams,
  ServerSoftwareInventoriesControllerListByServerOptionalParams,
  ServerSoftwareInventoriesControllerListByServerResponse,
  Default,
  ServerSoftwareInventoriesControllerGetMachineSoftwareInventoryOptionalParams,
  ServerSoftwareInventoriesControllerGetMachineSoftwareInventoryResponse,
  ServerSoftwareInventoriesControllerListByServerNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing ServerSoftwareInventoriesController operations. */
export class ServerSoftwareInventoriesControllerImpl
  implements ServerSoftwareInventoriesController
{
  private readonly client: AzureMigrateDiscoveryService;

  /**
   * Initialize a new instance of the class ServerSoftwareInventoriesController class.
   * @param client Reference to the service client
   */
  constructor(client: AzureMigrateDiscoveryService) {
    this.client = client;
  }

  /**
   * List ServerSoftwareInventory resources by Server
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param machineName  A server machine name
   * @param options The options parameters.
   */
  public listByServer(
    resourceGroupName: string,
    siteName: string,
    machineName: string,
    options?: ServerSoftwareInventoriesControllerListByServerOptionalParams,
  ): PagedAsyncIterableIterator<ServerSoftwareInventory> {
    const iter = this.listByServerPagingAll(
      resourceGroupName,
      siteName,
      machineName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByServerPagingPage(
          resourceGroupName,
          siteName,
          machineName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByServerPagingPage(
    resourceGroupName: string,
    siteName: string,
    machineName: string,
    options?: ServerSoftwareInventoriesControllerListByServerOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<ServerSoftwareInventory[]> {
    let result: ServerSoftwareInventoriesControllerListByServerResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByServer(
        resourceGroupName,
        siteName,
        machineName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByServerNext(
        resourceGroupName,
        siteName,
        machineName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByServerPagingAll(
    resourceGroupName: string,
    siteName: string,
    machineName: string,
    options?: ServerSoftwareInventoriesControllerListByServerOptionalParams,
  ): AsyncIterableIterator<ServerSoftwareInventory> {
    for await (const page of this.listByServerPagingPage(
      resourceGroupName,
      siteName,
      machineName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Method to get a machines software inventory like applications and roles.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param machineName  A server machine name
   * @param defaultParam Default value.
   * @param options The options parameters.
   */
  getMachineSoftwareInventory(
    resourceGroupName: string,
    siteName: string,
    machineName: string,
    defaultParam: Default,
    options?: ServerSoftwareInventoriesControllerGetMachineSoftwareInventoryOptionalParams,
  ): Promise<ServerSoftwareInventoriesControllerGetMachineSoftwareInventoryResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, machineName, defaultParam, options },
      getMachineSoftwareInventoryOperationSpec,
    );
  }

  /**
   * List ServerSoftwareInventory resources by Server
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param machineName  A server machine name
   * @param options The options parameters.
   */
  private _listByServer(
    resourceGroupName: string,
    siteName: string,
    machineName: string,
    options?: ServerSoftwareInventoriesControllerListByServerOptionalParams,
  ): Promise<ServerSoftwareInventoriesControllerListByServerResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, machineName, options },
      listByServerOperationSpec,
    );
  }

  /**
   * ListByServerNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param machineName  A server machine name
   * @param nextLink The nextLink from the previous successful call to the ListByServer method.
   * @param options The options parameters.
   */
  private _listByServerNext(
    resourceGroupName: string,
    siteName: string,
    machineName: string,
    nextLink: string,
    options?: ServerSoftwareInventoriesControllerListByServerNextOptionalParams,
  ): Promise<ServerSoftwareInventoriesControllerListByServerNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, machineName, nextLink, options },
      listByServerNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getMachineSoftwareInventoryOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/serverSites/{siteName}/machines/{machineName}/softwareInventories/{default}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ServerSoftwareInventory,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.machineName,
    Parameters.defaultParam,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByServerOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/serverSites/{siteName}/machines/{machineName}/softwareinventories",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ServerSoftwareInventoryListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.machineName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByServerNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ServerSoftwareInventoryListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.machineName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
