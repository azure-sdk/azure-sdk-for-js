/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { VCenterOperations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureMigrateV2 } from "../azureMigrateV2";
import {
  VCenter,
  VCenterGetAllVCentersInSiteNextOptionalParams,
  VCenterGetAllVCentersInSiteOptionalParams,
  VCenterGetAllVCentersInSiteResponse,
  VCenterGetVCenterOptionalParams,
  VCenterGetVCenterResponse,
  VCenterPutVCenterOptionalParams,
  VCenterPutVCenterResponse,
  VCenterDeleteVCenterOptionalParams,
  VCenterGetAllVCentersInSiteNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing VCenterOperations operations. */
export class VCenterOperationsImpl implements VCenterOperations {
  private readonly client: AzureMigrateV2;

  /**
   * Initialize a new instance of the class VCenterOperations class.
   * @param client Reference to the service client
   */
  constructor(client: AzureMigrateV2) {
    this.client = client;
  }

  /**
   * Method to get all vCenters in a site.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name.
   * @param options The options parameters.
   */
  public listAllVCentersInSite(
    resourceGroupName: string,
    siteName: string,
    options?: VCenterGetAllVCentersInSiteOptionalParams
  ): PagedAsyncIterableIterator<VCenter> {
    const iter = this.getAllVCentersInSitePagingAll(
      resourceGroupName,
      siteName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.getAllVCentersInSitePagingPage(
          resourceGroupName,
          siteName,
          options,
          settings
        );
      }
    };
  }

  private async *getAllVCentersInSitePagingPage(
    resourceGroupName: string,
    siteName: string,
    options?: VCenterGetAllVCentersInSiteOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<VCenter[]> {
    let result: VCenterGetAllVCentersInSiteResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._getAllVCentersInSite(
        resourceGroupName,
        siteName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._getAllVCentersInSiteNext(
        resourceGroupName,
        siteName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *getAllVCentersInSitePagingAll(
    resourceGroupName: string,
    siteName: string,
    options?: VCenterGetAllVCentersInSiteOptionalParams
  ): AsyncIterableIterator<VCenter> {
    for await (const page of this.getAllVCentersInSitePagingPage(
      resourceGroupName,
      siteName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Method to get a vCenter.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name.
   * @param vcenterName VCenter ARM name.
   * @param options The options parameters.
   */
  getVCenter(
    resourceGroupName: string,
    siteName: string,
    vcenterName: string,
    options?: VCenterGetVCenterOptionalParams
  ): Promise<VCenterGetVCenterResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, vcenterName, options },
      getVCenterOperationSpec
    );
  }

  /**
   * Method to create or update a vCenter in site.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name.
   * @param vcenterName VCenter ARM name.
   * @param body Put vCenter body.
   * @param options The options parameters.
   */
  putVCenter(
    resourceGroupName: string,
    siteName: string,
    vcenterName: string,
    body: VCenter,
    options?: VCenterPutVCenterOptionalParams
  ): Promise<VCenterPutVCenterResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, vcenterName, body, options },
      putVCenterOperationSpec
    );
  }

  /**
   * Method to delete vCenter in site.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name.
   * @param vcenterName VCenter ARM name.
   * @param options The options parameters.
   */
  deleteVCenter(
    resourceGroupName: string,
    siteName: string,
    vcenterName: string,
    options?: VCenterDeleteVCenterOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, vcenterName, options },
      deleteVCenterOperationSpec
    );
  }

  /**
   * Method to get all vCenters in a site.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name.
   * @param options The options parameters.
   */
  private _getAllVCentersInSite(
    resourceGroupName: string,
    siteName: string,
    options?: VCenterGetAllVCentersInSiteOptionalParams
  ): Promise<VCenterGetAllVCentersInSiteResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, options },
      getAllVCentersInSiteOperationSpec
    );
  }

  /**
   * GetAllVCentersInSiteNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name.
   * @param nextLink The nextLink from the previous successful call to the GetAllVCentersInSite method.
   * @param options The options parameters.
   */
  private _getAllVCentersInSiteNext(
    resourceGroupName: string,
    siteName: string,
    nextLink: string,
    options?: VCenterGetAllVCentersInSiteNextOptionalParams
  ): Promise<VCenterGetAllVCentersInSiteNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, nextLink, options },
      getAllVCentersInSiteNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getVCenterOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/VMwareSites/{siteName}/vCenters/{vcenterName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VCenter
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.vcenterName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const putVCenterOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/VMwareSites/{siteName}/vCenters/{vcenterName}",
  httpMethod: "PUT",
  responses: {
    202: {
      headersMapper: Mappers.VCenterPutVCenterHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.body4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.vcenterName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteVCenterOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/VMwareSites/{siteName}/vCenters/{vcenterName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.vcenterName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getAllVCentersInSiteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/VMwareSites/{siteName}/vCenters",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VCenterCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getAllVCentersInSiteNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VCenterCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
