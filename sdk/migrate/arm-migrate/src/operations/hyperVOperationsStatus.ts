/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { HyperVOperationsStatus } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureMigrateV2 } from "../azureMigrateV2";
import {
  HyperVOperationsStatusGetOperationStatusOptionalParams,
  HyperVOperationsStatusGetOperationStatusResponse
} from "../models";

/** Class containing HyperVOperationsStatus operations. */
export class HyperVOperationsStatusImpl implements HyperVOperationsStatus {
  private readonly client: AzureMigrateV2;

  /**
   * Initialize a new instance of the class HyperVOperationsStatus class.
   * @param client Reference to the service client
   */
  constructor(client: AzureMigrateV2) {
    this.client = client;
  }

  /**
   * Method to get operation status.
   * @param subscriptionId The ID of the target subscription.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name.
   * @param operationStatusName Operation status ARM name.
   * @param options The options parameters.
   */
  getOperationStatus(
    subscriptionId: string,
    resourceGroupName: string,
    siteName: string,
    operationStatusName: string,
    options?: HyperVOperationsStatusGetOperationStatusOptionalParams
  ): Promise<HyperVOperationsStatusGetOperationStatusResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        resourceGroupName,
        siteName,
        operationStatusName,
        options
      },
      getOperationStatusOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationStatusOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/HyperVSites/{siteName}/operationsStatus/{operationStatusName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.operationStatusName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
