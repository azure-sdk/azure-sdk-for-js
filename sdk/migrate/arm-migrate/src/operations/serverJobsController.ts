/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { ServerJobsController } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureMigrateDiscoveryService } from "../azureMigrateDiscoveryService";
import {
  ServerJob,
  ServerJobsControllerListByServerSiteResourceNextOptionalParams,
  ServerJobsControllerListByServerSiteResourceOptionalParams,
  ServerJobsControllerListByServerSiteResourceResponse,
  ServerJobsControllerGetOptionalParams,
  ServerJobsControllerGetResponse,
  ServerJobsControllerListByServerSiteResourceNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ServerJobsController operations. */
export class ServerJobsControllerImpl implements ServerJobsController {
  private readonly client: AzureMigrateDiscoveryService;

  /**
   * Initialize a new instance of the class ServerJobsController class.
   * @param client Reference to the service client
   */
  constructor(client: AzureMigrateDiscoveryService) {
    this.client = client;
  }

  /**
   * List ServerJob resources by ServerSiteResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param options The options parameters.
   */
  public listByServerSiteResource(
    resourceGroupName: string,
    siteName: string,
    options?: ServerJobsControllerListByServerSiteResourceOptionalParams,
  ): PagedAsyncIterableIterator<ServerJob> {
    const iter = this.listByServerSiteResourcePagingAll(
      resourceGroupName,
      siteName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByServerSiteResourcePagingPage(
          resourceGroupName,
          siteName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByServerSiteResourcePagingPage(
    resourceGroupName: string,
    siteName: string,
    options?: ServerJobsControllerListByServerSiteResourceOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<ServerJob[]> {
    let result: ServerJobsControllerListByServerSiteResourceResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByServerSiteResource(
        resourceGroupName,
        siteName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByServerSiteResourceNext(
        resourceGroupName,
        siteName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByServerSiteResourcePagingAll(
    resourceGroupName: string,
    siteName: string,
    options?: ServerJobsControllerListByServerSiteResourceOptionalParams,
  ): AsyncIterableIterator<ServerJob> {
    for await (const page of this.listByServerSiteResourcePagingPage(
      resourceGroupName,
      siteName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List ServerJob resources by ServerSiteResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param options The options parameters.
   */
  private _listByServerSiteResource(
    resourceGroupName: string,
    siteName: string,
    options?: ServerJobsControllerListByServerSiteResourceOptionalParams,
  ): Promise<ServerJobsControllerListByServerSiteResourceResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, options },
      listByServerSiteResourceOperationSpec,
    );
  }

  /**
   * Get a ServerJob
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param jobName  Jobs name
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    siteName: string,
    jobName: string,
    options?: ServerJobsControllerGetOptionalParams,
  ): Promise<ServerJobsControllerGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, jobName, options },
      getOperationSpec,
    );
  }

  /**
   * ListByServerSiteResourceNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param nextLink The nextLink from the previous successful call to the ListByServerSiteResource
   *                 method.
   * @param options The options parameters.
   */
  private _listByServerSiteResourceNext(
    resourceGroupName: string,
    siteName: string,
    nextLink: string,
    options?: ServerJobsControllerListByServerSiteResourceNextOptionalParams,
  ): Promise<ServerJobsControllerListByServerSiteResourceNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, nextLink, options },
      listByServerSiteResourceNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByServerSiteResourceOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/serverSites/{siteName}/jobs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ServerJobListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/serverSites/{siteName}/jobs/{jobName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ServerJob,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.jobName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByServerSiteResourceNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ServerJobListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
