/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { VmwarePropertiesController } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureMigrateDiscoveryService } from "../azureMigrateDiscoveryService";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  UpdateMachineDepMapStatus,
  VmwarePropertiesControllerUpdateDependencyMapStatusOptionalParams,
  VmwarePropertiesControllerUpdateDependencyMapStatusResponse,
  MachineMetadataCollection,
  VmwarePropertiesControllerUpdatePropertiesOptionalParams,
  VmwarePropertiesControllerUpdatePropertiesResponse,
  UpdateMachineRunAsAccount,
  VmwarePropertiesControllerUpdateRunAsAccountOptionalParams,
  VmwarePropertiesControllerUpdateRunAsAccountResponse,
  UpdateMachineTags,
  VmwarePropertiesControllerUpdateTagsOptionalParams,
  VmwarePropertiesControllerUpdateTagsResponse,
} from "../models";

/** Class containing VmwarePropertiesController operations. */
export class VmwarePropertiesControllerImpl
  implements VmwarePropertiesController
{
  private readonly client: AzureMigrateDiscoveryService;

  /**
   * Initialize a new instance of the class VmwarePropertiesController class.
   * @param client Reference to the service client
   */
  constructor(client: AzureMigrateDiscoveryService) {
    this.client = client;
  }

  /**
   * Method to enable disable dependency map status for machines
   *             in a
   * site.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param updateMachineDepMapStatus The content of the action request
   * @param options The options parameters.
   */
  async beginUpdateDependencyMapStatus(
    resourceGroupName: string,
    siteName: string,
    updateMachineDepMapStatus: UpdateMachineDepMapStatus,
    options?: VmwarePropertiesControllerUpdateDependencyMapStatusOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<VmwarePropertiesControllerUpdateDependencyMapStatusResponse>,
      VmwarePropertiesControllerUpdateDependencyMapStatusResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<VmwarePropertiesControllerUpdateDependencyMapStatusResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, siteName, updateMachineDepMapStatus, options },
      spec: updateDependencyMapStatusOperationSpec,
    });
    const poller = await createHttpPoller<
      VmwarePropertiesControllerUpdateDependencyMapStatusResponse,
      OperationState<VmwarePropertiesControllerUpdateDependencyMapStatusResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Method to enable disable dependency map status for machines
   *             in a
   * site.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param updateMachineDepMapStatus The content of the action request
   * @param options The options parameters.
   */
  async beginUpdateDependencyMapStatusAndWait(
    resourceGroupName: string,
    siteName: string,
    updateMachineDepMapStatus: UpdateMachineDepMapStatus,
    options?: VmwarePropertiesControllerUpdateDependencyMapStatusOptionalParams,
  ): Promise<VmwarePropertiesControllerUpdateDependencyMapStatusResponse> {
    const poller = await this.beginUpdateDependencyMapStatus(
      resourceGroupName,
      siteName,
      updateMachineDepMapStatus,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Method to update properties for machines   in a site.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param metaData The content of the action request
   * @param options The options parameters.
   */
  async beginUpdateProperties(
    resourceGroupName: string,
    siteName: string,
    metaData: MachineMetadataCollection,
    options?: VmwarePropertiesControllerUpdatePropertiesOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<VmwarePropertiesControllerUpdatePropertiesResponse>,
      VmwarePropertiesControllerUpdatePropertiesResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<VmwarePropertiesControllerUpdatePropertiesResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, siteName, metaData, options },
      spec: updatePropertiesOperationSpec,
    });
    const poller = await createHttpPoller<
      VmwarePropertiesControllerUpdatePropertiesResponse,
      OperationState<VmwarePropertiesControllerUpdatePropertiesResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Method to update properties for machines   in a site.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param metaData The content of the action request
   * @param options The options parameters.
   */
  async beginUpdatePropertiesAndWait(
    resourceGroupName: string,
    siteName: string,
    metaData: MachineMetadataCollection,
    options?: VmwarePropertiesControllerUpdatePropertiesOptionalParams,
  ): Promise<VmwarePropertiesControllerUpdatePropertiesResponse> {
    const poller = await this.beginUpdateProperties(
      resourceGroupName,
      siteName,
      metaData,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Method to associate Run as account to machine
   *             in a site.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param updateMachineRunAsAccount The content of the action request
   * @param options The options parameters.
   */
  async beginUpdateRunAsAccount(
    resourceGroupName: string,
    siteName: string,
    updateMachineRunAsAccount: UpdateMachineRunAsAccount,
    options?: VmwarePropertiesControllerUpdateRunAsAccountOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<VmwarePropertiesControllerUpdateRunAsAccountResponse>,
      VmwarePropertiesControllerUpdateRunAsAccountResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<VmwarePropertiesControllerUpdateRunAsAccountResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, siteName, updateMachineRunAsAccount, options },
      spec: updateRunAsAccountOperationSpec,
    });
    const poller = await createHttpPoller<
      VmwarePropertiesControllerUpdateRunAsAccountResponse,
      OperationState<VmwarePropertiesControllerUpdateRunAsAccountResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Method to associate Run as account to machine
   *             in a site.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param updateMachineRunAsAccount The content of the action request
   * @param options The options parameters.
   */
  async beginUpdateRunAsAccountAndWait(
    resourceGroupName: string,
    siteName: string,
    updateMachineRunAsAccount: UpdateMachineRunAsAccount,
    options?: VmwarePropertiesControllerUpdateRunAsAccountOptionalParams,
  ): Promise<VmwarePropertiesControllerUpdateRunAsAccountResponse> {
    const poller = await this.beginUpdateRunAsAccount(
      resourceGroupName,
      siteName,
      updateMachineRunAsAccount,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Method to associate Run as account to machine
   *             in a site.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param updateMachineTags The content of the action request
   * @param options The options parameters.
   */
  async beginUpdateTags(
    resourceGroupName: string,
    siteName: string,
    updateMachineTags: UpdateMachineTags,
    options?: VmwarePropertiesControllerUpdateTagsOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<VmwarePropertiesControllerUpdateTagsResponse>,
      VmwarePropertiesControllerUpdateTagsResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<VmwarePropertiesControllerUpdateTagsResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, siteName, updateMachineTags, options },
      spec: updateTagsOperationSpec,
    });
    const poller = await createHttpPoller<
      VmwarePropertiesControllerUpdateTagsResponse,
      OperationState<VmwarePropertiesControllerUpdateTagsResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Method to associate Run as account to machine
   *             in a site.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param updateMachineTags The content of the action request
   * @param options The options parameters.
   */
  async beginUpdateTagsAndWait(
    resourceGroupName: string,
    siteName: string,
    updateMachineTags: UpdateMachineTags,
    options?: VmwarePropertiesControllerUpdateTagsOptionalParams,
  ): Promise<VmwarePropertiesControllerUpdateTagsResponse> {
    const poller = await this.beginUpdateTags(
      resourceGroupName,
      siteName,
      updateMachineTags,
      options,
    );
    return poller.pollUntilDone();
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const updateDependencyMapStatusOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/vmwareSites/{siteName}/updateDependencyMapStatus",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    201: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    202: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    204: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.updateMachineDepMapStatus,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const updatePropertiesOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/vmwareSites/{siteName}/updateProperties",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    201: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    202: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    204: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.metaData,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const updateRunAsAccountOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/vmwareSites/{siteName}/updateRunAsAccount",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    201: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    202: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    204: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.updateMachineRunAsAccount,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const updateTagsOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/vmwareSites/{siteName}/updateTags",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    201: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    202: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    204: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.updateMachineTags,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
