/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { HypervSitesController } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureMigrateDiscoveryService } from "../azureMigrateDiscoveryService";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  HypervSitesControllerGetOptionalParams,
  HypervSitesControllerGetResponse,
  HypervSite,
  HypervSitesControllerCreateOptionalParams,
  HypervSitesControllerCreateResponse,
  HypervSiteUpdate,
  HypervSitesControllerUpdateOptionalParams,
  HypervSitesControllerUpdateResponse,
  HypervSitesControllerDeleteOptionalParams,
  HypervSitesControllerComputeErrorSummaryOptionalParams,
  HypervSitesControllerComputeErrorSummaryResponse,
  HypervSitesControllerComputeusageOptionalParams,
  HypervSitesControllerComputeusageResponse,
  HypervSitesControllerExportApplicationsOptionalParams,
  HypervSitesControllerExportApplicationsResponse,
  ExportMachineErrorsRequest,
  HypervSitesControllerExportMachineErrorsOptionalParams,
  HypervSitesControllerExportMachineErrorsResponse,
  HypervSitesControllerListHealthSummaryOptionalParams,
  HypervSitesControllerListHealthSummaryResponse,
  HypervSitesControllerSummaryOptionalParams,
  HypervSitesControllerSummaryResponse,
} from "../models";

/** Class containing HypervSitesController operations. */
export class HypervSitesControllerImpl implements HypervSitesController {
  private readonly client: AzureMigrateDiscoveryService;

  /**
   * Initialize a new instance of the class HypervSitesController class.
   * @param client Reference to the service client
   */
  constructor(client: AzureMigrateDiscoveryService) {
    this.client = client;
  }

  /**
   * Get a HypervSite
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    siteName: string,
    options?: HypervSitesControllerGetOptionalParams,
  ): Promise<HypervSitesControllerGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, options },
      getOperationSpec,
    );
  }

  /**
   * Create a HypervSite
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param body Resource create parameters.
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    siteName: string,
    body: HypervSite,
    options?: HypervSitesControllerCreateOptionalParams,
  ): Promise<HypervSitesControllerCreateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, body, options },
      createOperationSpec,
    );
  }

  /**
   * Update a HypervSite
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param body The resource properties to be updated.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    siteName: string,
    body: HypervSiteUpdate,
    options?: HypervSitesControllerUpdateOptionalParams,
  ): Promise<HypervSitesControllerUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, body, options },
      updateOperationSpec,
    );
  }

  /**
   * Delete a HypervSite
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    siteName: string,
    options?: HypervSitesControllerDeleteOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, options },
      deleteOperationSpec,
    );
  }

  /**
   * Method to get site error summary.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param body The content of the action request
   * @param options The options parameters.
   */
  computeErrorSummary(
    resourceGroupName: string,
    siteName: string,
    body: Record<string, unknown>,
    options?: HypervSitesControllerComputeErrorSummaryOptionalParams,
  ): Promise<HypervSitesControllerComputeErrorSummaryResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, body, options },
      computeErrorSummaryOperationSpec,
    );
  }

  /**
   * Get a hyperv site usage.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param body The content of the action request
   * @param options The options parameters.
   */
  computeusage(
    resourceGroupName: string,
    siteName: string,
    body: Record<string, unknown>,
    options?: HypervSitesControllerComputeusageOptionalParams,
  ): Promise<HypervSitesControllerComputeusageResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, body, options },
      computeusageOperationSpec,
    );
  }

  /**
   * Method to generate report containing
   *             machine and the deep discovery of the application installed in the machine.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginExportApplications(
    resourceGroupName: string,
    siteName: string,
    body: Record<string, unknown>,
    options?: HypervSitesControllerExportApplicationsOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<HypervSitesControllerExportApplicationsResponse>,
      HypervSitesControllerExportApplicationsResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<HypervSitesControllerExportApplicationsResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, siteName, body, options },
      spec: exportApplicationsOperationSpec,
    });
    const poller = await createHttpPoller<
      HypervSitesControllerExportApplicationsResponse,
      OperationState<HypervSitesControllerExportApplicationsResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Method to generate report containing
   *             machine and the deep discovery of the application installed in the machine.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginExportApplicationsAndWait(
    resourceGroupName: string,
    siteName: string,
    body: Record<string, unknown>,
    options?: HypervSitesControllerExportApplicationsOptionalParams,
  ): Promise<HypervSitesControllerExportApplicationsResponse> {
    const poller = await this.beginExportApplications(
      resourceGroupName,
      siteName,
      body,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Method to generate report containing
   *             machine and the errors encountered during guest discovery of the machine.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginExportMachineErrors(
    resourceGroupName: string,
    siteName: string,
    body: ExportMachineErrorsRequest,
    options?: HypervSitesControllerExportMachineErrorsOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<HypervSitesControllerExportMachineErrorsResponse>,
      HypervSitesControllerExportMachineErrorsResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<HypervSitesControllerExportMachineErrorsResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, siteName, body, options },
      spec: exportMachineErrorsOperationSpec,
    });
    const poller = await createHttpPoller<
      HypervSitesControllerExportMachineErrorsResponse,
      OperationState<HypervSitesControllerExportMachineErrorsResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Method to generate report containing
   *             machine and the errors encountered during guest discovery of the machine.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginExportMachineErrorsAndWait(
    resourceGroupName: string,
    siteName: string,
    body: ExportMachineErrorsRequest,
    options?: HypervSitesControllerExportMachineErrorsOptionalParams,
  ): Promise<HypervSitesControllerExportMachineErrorsResponse> {
    const poller = await this.beginExportMachineErrors(
      resourceGroupName,
      siteName,
      body,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Method to get site health summary.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param options The options parameters.
   */
  listHealthSummary(
    resourceGroupName: string,
    siteName: string,
    options?: HypervSitesControllerListHealthSummaryOptionalParams,
  ): Promise<HypervSitesControllerListHealthSummaryResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, options },
      listHealthSummaryOperationSpec,
    );
  }

  /**
   * Method to get site usage.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param options The options parameters.
   */
  summary(
    resourceGroupName: string,
    siteName: string,
    options?: HypervSitesControllerSummaryOptionalParams,
  ): Promise<HypervSitesControllerSummaryResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, options },
      summaryOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/hypervSites/{siteName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HypervSite,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/hypervSites/{siteName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.HypervSite,
    },
    201: {
      bodyMapper: Mappers.HypervSite,
      headersMapper: Mappers.HypervSitesControllerCreateHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body12,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/hypervSites/{siteName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.HypervSite,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body13,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/hypervSites/{siteName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const computeErrorSummaryOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/hypervSites/{siteName}/computeErrorSummary",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SiteErrorSummary,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const computeusageOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/hypervSites/{siteName}/computeusage",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.HypervSiteUsage,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const exportApplicationsOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/hypervSites/{siteName}/exportApplications",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    201: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    202: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    204: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const exportMachineErrorsOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/hypervSites/{siteName}/exportMachineErrors",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    201: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    202: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    204: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body8,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const listHealthSummaryOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/hypervSites/{siteName}/listHealthSummary",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SiteHealthSummaryCollection,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const summaryOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/hypervSites/{siteName}/summary",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.HypervSiteUsage,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
