/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { WebAppPropertiesController } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { AzureMigrateDiscoveryService } from "../azureMigrateDiscoveryService.js";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl.js";
import {
  WebAppPropertiesCollection,
  WebAppPropertiesControllerUpdatePropertiesOptionalParams,
  WebAppPropertiesControllerUpdatePropertiesResponse,
} from "../models/index.js";

/** Class containing WebAppPropertiesController operations. */
export class WebAppPropertiesControllerImpl
  implements WebAppPropertiesController
{
  private readonly client: AzureMigrateDiscoveryService;

  /**
   * Initialize a new instance of the class WebAppPropertiesController class.
   * @param client Reference to the service client
   */
  constructor(client: AzureMigrateDiscoveryService) {
    this.client = client;
  }

  /**
   * Method to update properties for web applications.
   *             in a site.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param webAppSiteName Web app site name.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginUpdateProperties(
    resourceGroupName: string,
    siteName: string,
    webAppSiteName: string,
    body: WebAppPropertiesCollection,
    options?: WebAppPropertiesControllerUpdatePropertiesOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<WebAppPropertiesControllerUpdatePropertiesResponse>,
      WebAppPropertiesControllerUpdatePropertiesResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<WebAppPropertiesControllerUpdatePropertiesResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, siteName, webAppSiteName, body, options },
      spec: updatePropertiesOperationSpec,
    });
    const poller = await createHttpPoller<
      WebAppPropertiesControllerUpdatePropertiesResponse,
      OperationState<WebAppPropertiesControllerUpdatePropertiesResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Method to update properties for web applications.
   *             in a site.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param webAppSiteName Web app site name.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginUpdatePropertiesAndWait(
    resourceGroupName: string,
    siteName: string,
    webAppSiteName: string,
    body: WebAppPropertiesCollection,
    options?: WebAppPropertiesControllerUpdatePropertiesOptionalParams,
  ): Promise<WebAppPropertiesControllerUpdatePropertiesResponse> {
    const poller = await this.beginUpdateProperties(
      resourceGroupName,
      siteName,
      webAppSiteName,
      body,
      options,
    );
    return poller.pollUntilDone();
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const updatePropertiesOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/masterSites/{siteName}/webAppSites/{webAppSiteName}/updateProperties",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    201: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    202: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    204: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body29,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.webAppSiteName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
