/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { WebServersController } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureMigrateDiscoveryService } from "../azureMigrateDiscoveryService";
import {
  WebServer,
  WebServersControllerListByWebAppSiteNextOptionalParams,
  WebServersControllerListByWebAppSiteOptionalParams,
  WebServersControllerListByWebAppSiteResponse,
  WebServersControllerListByWebAppSiteNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing WebServersController operations. */
export class WebServersControllerImpl implements WebServersController {
  private readonly client: AzureMigrateDiscoveryService;

  /**
   * Initialize a new instance of the class WebServersController class.
   * @param client Reference to the service client
   */
  constructor(client: AzureMigrateDiscoveryService) {
    this.client = client;
  }

  /**
   * Method to get all web servers.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param webAppSiteName Web app site name.
   * @param options The options parameters.
   */
  public listByWebAppSite(
    resourceGroupName: string,
    siteName: string,
    webAppSiteName: string,
    options?: WebServersControllerListByWebAppSiteOptionalParams,
  ): PagedAsyncIterableIterator<WebServer> {
    const iter = this.listByWebAppSitePagingAll(
      resourceGroupName,
      siteName,
      webAppSiteName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByWebAppSitePagingPage(
          resourceGroupName,
          siteName,
          webAppSiteName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByWebAppSitePagingPage(
    resourceGroupName: string,
    siteName: string,
    webAppSiteName: string,
    options?: WebServersControllerListByWebAppSiteOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<WebServer[]> {
    let result: WebServersControllerListByWebAppSiteResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByWebAppSite(
        resourceGroupName,
        siteName,
        webAppSiteName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByWebAppSiteNext(
        resourceGroupName,
        siteName,
        webAppSiteName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByWebAppSitePagingAll(
    resourceGroupName: string,
    siteName: string,
    webAppSiteName: string,
    options?: WebServersControllerListByWebAppSiteOptionalParams,
  ): AsyncIterableIterator<WebServer> {
    for await (const page of this.listByWebAppSitePagingPage(
      resourceGroupName,
      siteName,
      webAppSiteName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Method to get all web servers.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param webAppSiteName Web app site name.
   * @param options The options parameters.
   */
  private _listByWebAppSite(
    resourceGroupName: string,
    siteName: string,
    webAppSiteName: string,
    options?: WebServersControllerListByWebAppSiteOptionalParams,
  ): Promise<WebServersControllerListByWebAppSiteResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, webAppSiteName, options },
      listByWebAppSiteOperationSpec,
    );
  }

  /**
   * ListByWebAppSiteNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param webAppSiteName Web app site name.
   * @param nextLink The nextLink from the previous successful call to the ListByWebAppSite method.
   * @param options The options parameters.
   */
  private _listByWebAppSiteNext(
    resourceGroupName: string,
    siteName: string,
    webAppSiteName: string,
    nextLink: string,
    options?: WebServersControllerListByWebAppSiteNextOptionalParams,
  ): Promise<WebServersControllerListByWebAppSiteNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, webAppSiteName, nextLink, options },
      listByWebAppSiteNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByWebAppSiteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/masterSites/{siteName}/webAppSites/{webAppSiteName}/webServers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WebServerListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.continuationToken,
    Parameters.totalRecordCount,
    Parameters.top1,
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.webAppSiteName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByWebAppSiteNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WebServerListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.webAppSiteName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
