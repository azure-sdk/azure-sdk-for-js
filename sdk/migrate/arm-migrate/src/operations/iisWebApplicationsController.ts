/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { IisWebApplicationsController } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { AzureMigrateDiscoveryService } from "../azureMigrateDiscoveryService.js";
import {
  IisWebApplications,
  IisWebApplicationsControllerListByWebAppSiteNextOptionalParams,
  IisWebApplicationsControllerListByWebAppSiteOptionalParams,
  IisWebApplicationsControllerListByWebAppSiteResponse,
  IisWebApplicationsControllerGetOptionalParams,
  IisWebApplicationsControllerGetResponse,
  IisWebApplicationsUpdate,
  IisWebApplicationsControllerUpdateOptionalParams,
  IisWebApplicationsControllerUpdateResponse,
  IisWebApplicationsControllerListByWebAppSiteNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing IisWebApplicationsController operations. */
export class IisWebApplicationsControllerImpl
  implements IisWebApplicationsController
{
  private readonly client: AzureMigrateDiscoveryService;

  /**
   * Initialize a new instance of the class IisWebApplicationsController class.
   * @param client Reference to the service client
   */
  constructor(client: AzureMigrateDiscoveryService) {
    this.client = client;
  }

  /**
   * Method to get all IIS web application.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param webAppSiteName Web app site name.
   * @param options The options parameters.
   */
  public listByWebAppSite(
    resourceGroupName: string,
    siteName: string,
    webAppSiteName: string,
    options?: IisWebApplicationsControllerListByWebAppSiteOptionalParams,
  ): PagedAsyncIterableIterator<IisWebApplications> {
    const iter = this.listByWebAppSitePagingAll(
      resourceGroupName,
      siteName,
      webAppSiteName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByWebAppSitePagingPage(
          resourceGroupName,
          siteName,
          webAppSiteName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByWebAppSitePagingPage(
    resourceGroupName: string,
    siteName: string,
    webAppSiteName: string,
    options?: IisWebApplicationsControllerListByWebAppSiteOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<IisWebApplications[]> {
    let result: IisWebApplicationsControllerListByWebAppSiteResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByWebAppSite(
        resourceGroupName,
        siteName,
        webAppSiteName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByWebAppSiteNext(
        resourceGroupName,
        siteName,
        webAppSiteName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByWebAppSitePagingAll(
    resourceGroupName: string,
    siteName: string,
    webAppSiteName: string,
    options?: IisWebApplicationsControllerListByWebAppSiteOptionalParams,
  ): AsyncIterableIterator<IisWebApplications> {
    for await (const page of this.listByWebAppSitePagingPage(
      resourceGroupName,
      siteName,
      webAppSiteName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Method to get all IIS web application.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param webAppSiteName Web app site name.
   * @param options The options parameters.
   */
  private _listByWebAppSite(
    resourceGroupName: string,
    siteName: string,
    webAppSiteName: string,
    options?: IisWebApplicationsControllerListByWebAppSiteOptionalParams,
  ): Promise<IisWebApplicationsControllerListByWebAppSiteResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, webAppSiteName, options },
      listByWebAppSiteOperationSpec,
    );
  }

  /**
   * Method to get an IIS web application.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param webAppSiteName Web app site name.
   * @param webApplicationName Web application name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    siteName: string,
    webAppSiteName: string,
    webApplicationName: string,
    options?: IisWebApplicationsControllerGetOptionalParams,
  ): Promise<IisWebApplicationsControllerGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        siteName,
        webAppSiteName,
        webApplicationName,
        options,
      },
      getOperationSpec,
    );
  }

  /**
   * Method to update tags on IIS web application.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param webAppSiteName Web app site name.
   * @param webApplicationName Web application name.
   * @param body The resource properties to be updated.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    siteName: string,
    webAppSiteName: string,
    webApplicationName: string,
    body: IisWebApplicationsUpdate,
    options?: IisWebApplicationsControllerUpdateOptionalParams,
  ): Promise<IisWebApplicationsControllerUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        siteName,
        webAppSiteName,
        webApplicationName,
        body,
        options,
      },
      updateOperationSpec,
    );
  }

  /**
   * ListByWebAppSiteNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param webAppSiteName Web app site name.
   * @param nextLink The nextLink from the previous successful call to the ListByWebAppSite method.
   * @param options The options parameters.
   */
  private _listByWebAppSiteNext(
    resourceGroupName: string,
    siteName: string,
    webAppSiteName: string,
    nextLink: string,
    options?: IisWebApplicationsControllerListByWebAppSiteNextOptionalParams,
  ): Promise<IisWebApplicationsControllerListByWebAppSiteNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, webAppSiteName, nextLink, options },
      listByWebAppSiteNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByWebAppSiteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/masterSites/{siteName}/webAppSites/{webAppSiteName}/iisWebApplications",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IisWebApplicationsListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.continuationToken,
    Parameters.totalRecordCount,
    Parameters.top1,
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.webAppSiteName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/masterSites/{siteName}/webAppSites/{webAppSiteName}/iisWebApplications/{webApplicationName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IisWebApplications,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.webAppSiteName,
    Parameters.webApplicationName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/masterSites/{siteName}/webAppSites/{webAppSiteName}/iisWebApplications/{webApplicationName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.IisWebApplications,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body28,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.webAppSiteName,
    Parameters.webApplicationName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const listByWebAppSiteNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IisWebApplicationsListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.webAppSiteName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
