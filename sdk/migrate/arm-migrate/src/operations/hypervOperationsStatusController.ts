/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { HypervOperationsStatusController } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureMigrateDiscoveryService } from "../azureMigrateDiscoveryService";
import {
  HypervOperationsStatusControllerGetHypervOperationsStatusOptionalParams,
  HypervOperationsStatusControllerGetHypervOperationsStatusResponse,
} from "../models";

/** Class containing HypervOperationsStatusController operations. */
export class HypervOperationsStatusControllerImpl
  implements HypervOperationsStatusController
{
  private readonly client: AzureMigrateDiscoveryService;

  /**
   * Initialize a new instance of the class HypervOperationsStatusController class.
   * @param client Reference to the service client
   */
  constructor(client: AzureMigrateDiscoveryService) {
    this.client = client;
  }

  /**
   * Method to get operation status.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param operationStatusName Operation status  Arm Name.
   * @param options The options parameters.
   */
  getHypervOperationsStatus(
    resourceGroupName: string,
    siteName: string,
    operationStatusName: string,
    options?: HypervOperationsStatusControllerGetHypervOperationsStatusOptionalParams,
  ): Promise<HypervOperationsStatusControllerGetHypervOperationsStatusResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, operationStatusName, options },
      getHypervOperationsStatusOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getHypervOperationsStatusOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/hypervSites/{siteName}/operationsStatus/{operationStatusName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.operationStatusName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
