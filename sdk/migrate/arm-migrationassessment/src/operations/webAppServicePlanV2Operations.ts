/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { WebAppServicePlanV2Operations } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { AzureMigrateAssessmentService } from "../azureMigrateAssessmentService.js";
import {
  WebAppServicePlanV2,
  WebAppServicePlanV2OperationsListByWebAppAssessmentV2NextOptionalParams,
  WebAppServicePlanV2OperationsListByWebAppAssessmentV2OptionalParams,
  WebAppServicePlanV2OperationsListByWebAppAssessmentV2Response,
  WebAppServicePlanV2OperationsGetOptionalParams,
  WebAppServicePlanV2OperationsGetResponse,
  WebAppServicePlanV2OperationsListByWebAppAssessmentV2NextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing WebAppServicePlanV2Operations operations. */
export class WebAppServicePlanV2OperationsImpl
  implements WebAppServicePlanV2Operations
{
  private readonly client: AzureMigrateAssessmentService;

  /**
   * Initialize a new instance of the class WebAppServicePlanV2Operations class.
   * @param client Reference to the service client
   */
  constructor(client: AzureMigrateAssessmentService) {
    this.client = client;
  }

  /**
   * List WebAppServicePlanV2 resources by WebAppAssessmentV2
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param projectName Assessment Project Name
   * @param groupName Group ARM name
   * @param assessmentName Web app Assessment arm name.
   * @param options The options parameters.
   */
  public listByWebAppAssessmentV2(
    resourceGroupName: string,
    projectName: string,
    groupName: string,
    assessmentName: string,
    options?: WebAppServicePlanV2OperationsListByWebAppAssessmentV2OptionalParams,
  ): PagedAsyncIterableIterator<WebAppServicePlanV2> {
    const iter = this.listByWebAppAssessmentV2PagingAll(
      resourceGroupName,
      projectName,
      groupName,
      assessmentName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByWebAppAssessmentV2PagingPage(
          resourceGroupName,
          projectName,
          groupName,
          assessmentName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByWebAppAssessmentV2PagingPage(
    resourceGroupName: string,
    projectName: string,
    groupName: string,
    assessmentName: string,
    options?: WebAppServicePlanV2OperationsListByWebAppAssessmentV2OptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<WebAppServicePlanV2[]> {
    let result: WebAppServicePlanV2OperationsListByWebAppAssessmentV2Response;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByWebAppAssessmentV2(
        resourceGroupName,
        projectName,
        groupName,
        assessmentName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByWebAppAssessmentV2Next(
        resourceGroupName,
        projectName,
        groupName,
        assessmentName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByWebAppAssessmentV2PagingAll(
    resourceGroupName: string,
    projectName: string,
    groupName: string,
    assessmentName: string,
    options?: WebAppServicePlanV2OperationsListByWebAppAssessmentV2OptionalParams,
  ): AsyncIterableIterator<WebAppServicePlanV2> {
    for await (const page of this.listByWebAppAssessmentV2PagingPage(
      resourceGroupName,
      projectName,
      groupName,
      assessmentName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List WebAppServicePlanV2 resources by WebAppAssessmentV2
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param projectName Assessment Project Name
   * @param groupName Group ARM name
   * @param assessmentName Web app Assessment arm name.
   * @param options The options parameters.
   */
  private _listByWebAppAssessmentV2(
    resourceGroupName: string,
    projectName: string,
    groupName: string,
    assessmentName: string,
    options?: WebAppServicePlanV2OperationsListByWebAppAssessmentV2OptionalParams,
  ): Promise<WebAppServicePlanV2OperationsListByWebAppAssessmentV2Response> {
    return this.client.sendOperationRequest(
      { resourceGroupName, projectName, groupName, assessmentName, options },
      listByWebAppAssessmentV2OperationSpec,
    );
  }

  /**
   * Get a WebAppServicePlanV2
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param projectName Assessment Project Name
   * @param groupName Group ARM name
   * @param assessmentName Web app Assessment arm name.
   * @param webAppServicePlanName Web app service plan ARM name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    projectName: string,
    groupName: string,
    assessmentName: string,
    webAppServicePlanName: string,
    options?: WebAppServicePlanV2OperationsGetOptionalParams,
  ): Promise<WebAppServicePlanV2OperationsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        projectName,
        groupName,
        assessmentName,
        webAppServicePlanName,
        options,
      },
      getOperationSpec,
    );
  }

  /**
   * ListByWebAppAssessmentV2Next
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param projectName Assessment Project Name
   * @param groupName Group ARM name
   * @param assessmentName Web app Assessment arm name.
   * @param nextLink The nextLink from the previous successful call to the ListByWebAppAssessmentV2
   *                 method.
   * @param options The options parameters.
   */
  private _listByWebAppAssessmentV2Next(
    resourceGroupName: string,
    projectName: string,
    groupName: string,
    assessmentName: string,
    nextLink: string,
    options?: WebAppServicePlanV2OperationsListByWebAppAssessmentV2NextOptionalParams,
  ): Promise<WebAppServicePlanV2OperationsListByWebAppAssessmentV2NextResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        projectName,
        groupName,
        assessmentName,
        nextLink,
        options,
      },
      listByWebAppAssessmentV2NextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByWebAppAssessmentV2OperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/webAppAssessments/{assessmentName}/webAppServicePlans",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WebAppServicePlanV2ListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.continuationToken,
    Parameters.filter,
    Parameters.totalRecordCount,
    Parameters.pageSize,
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.projectName,
    Parameters.assessmentName,
    Parameters.groupName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/webAppAssessments/{assessmentName}/webAppServicePlans/{webAppServicePlanName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WebAppServicePlanV2,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.projectName,
    Parameters.assessmentName,
    Parameters.groupName,
    Parameters.webAppServicePlanName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByWebAppAssessmentV2NextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WebAppServicePlanV2ListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.projectName,
    Parameters.assessmentName,
    Parameters.groupName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
