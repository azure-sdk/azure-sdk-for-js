/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { AksCostDetailOperations } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { AzureMigrateAssessmentService } from "../azureMigrateAssessmentService.js";
import {
  AKSCostDetail,
  AksCostDetailOperationsListByAksAssessmentNextOptionalParams,
  AksCostDetailOperationsListByAksAssessmentOptionalParams,
  AksCostDetailOperationsListByAksAssessmentResponse,
  AksCostDetailOperationsListByAksAssessmentNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing AksCostDetailOperations operations. */
export class AksCostDetailOperationsImpl implements AksCostDetailOperations {
  private readonly client: AzureMigrateAssessmentService;

  /**
   * Initialize a new instance of the class AksCostDetailOperations class.
   * @param client Reference to the service client
   */
  constructor(client: AzureMigrateAssessmentService) {
    this.client = client;
  }

  /**
   * List AKSCostDetail resources by AKSAssessment
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param projectName Assessment Project Name
   * @param assessmentName AKS Assessment Name.
   * @param options The options parameters.
   */
  public listByAksAssessment(
    resourceGroupName: string,
    projectName: string,
    assessmentName: string,
    options?: AksCostDetailOperationsListByAksAssessmentOptionalParams,
  ): PagedAsyncIterableIterator<AKSCostDetail> {
    const iter = this.listByAksAssessmentPagingAll(
      resourceGroupName,
      projectName,
      assessmentName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByAksAssessmentPagingPage(
          resourceGroupName,
          projectName,
          assessmentName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByAksAssessmentPagingPage(
    resourceGroupName: string,
    projectName: string,
    assessmentName: string,
    options?: AksCostDetailOperationsListByAksAssessmentOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<AKSCostDetail[]> {
    let result: AksCostDetailOperationsListByAksAssessmentResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByAksAssessment(
        resourceGroupName,
        projectName,
        assessmentName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByAksAssessmentNext(
        resourceGroupName,
        projectName,
        assessmentName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByAksAssessmentPagingAll(
    resourceGroupName: string,
    projectName: string,
    assessmentName: string,
    options?: AksCostDetailOperationsListByAksAssessmentOptionalParams,
  ): AsyncIterableIterator<AKSCostDetail> {
    for await (const page of this.listByAksAssessmentPagingPage(
      resourceGroupName,
      projectName,
      assessmentName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List AKSCostDetail resources by AKSAssessment
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param projectName Assessment Project Name
   * @param assessmentName AKS Assessment Name.
   * @param options The options parameters.
   */
  private _listByAksAssessment(
    resourceGroupName: string,
    projectName: string,
    assessmentName: string,
    options?: AksCostDetailOperationsListByAksAssessmentOptionalParams,
  ): Promise<AksCostDetailOperationsListByAksAssessmentResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, projectName, assessmentName, options },
      listByAksAssessmentOperationSpec,
    );
  }

  /**
   * ListByAksAssessmentNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param projectName Assessment Project Name
   * @param assessmentName AKS Assessment Name.
   * @param nextLink The nextLink from the previous successful call to the ListByAksAssessment method.
   * @param options The options parameters.
   */
  private _listByAksAssessmentNext(
    resourceGroupName: string,
    projectName: string,
    assessmentName: string,
    nextLink: string,
    options?: AksCostDetailOperationsListByAksAssessmentNextOptionalParams,
  ): Promise<AksCostDetailOperationsListByAksAssessmentNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, projectName, assessmentName, nextLink, options },
      listByAksAssessmentNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByAksAssessmentOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/aksAssessments/{assessmentName}/costDetails",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AKSCostDetailListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.projectName,
    Parameters.assessmentName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByAksAssessmentNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AKSCostDetailListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.projectName,
    Parameters.assessmentName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
