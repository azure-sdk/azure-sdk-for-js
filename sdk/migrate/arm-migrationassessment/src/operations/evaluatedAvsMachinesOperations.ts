/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { EvaluatedAvsMachinesOperations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureMigrateAssessmentService } from "../azureMigrateAssessmentService";
import {
  EvaluatedAvsMachine,
  EvaluatedAvsMachinesOperationsListByBusinessCaseNextOptionalParams,
  EvaluatedAvsMachinesOperationsListByBusinessCaseOptionalParams,
  EvaluatedAvsMachinesOperationsListByBusinessCaseResponse,
  EvaluatedAvsMachinesOperationsGetOptionalParams,
  EvaluatedAvsMachinesOperationsGetResponse,
  EvaluatedAvsMachinesOperationsListByBusinessCaseNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing EvaluatedAvsMachinesOperations operations. */
export class EvaluatedAvsMachinesOperationsImpl
  implements EvaluatedAvsMachinesOperations
{
  private readonly client: AzureMigrateAssessmentService;

  /**
   * Initialize a new instance of the class EvaluatedAvsMachinesOperations class.
   * @param client Reference to the service client
   */
  constructor(client: AzureMigrateAssessmentService) {
    this.client = client;
  }

  /**
   * List EvaluatedAvsMachine resources by BusinessCase
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param projectName Assessment Project Name
   * @param businessCaseName Business case ARM name
   * @param options The options parameters.
   */
  public listByBusinessCase(
    resourceGroupName: string,
    projectName: string,
    businessCaseName: string,
    options?: EvaluatedAvsMachinesOperationsListByBusinessCaseOptionalParams,
  ): PagedAsyncIterableIterator<EvaluatedAvsMachine> {
    const iter = this.listByBusinessCasePagingAll(
      resourceGroupName,
      projectName,
      businessCaseName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByBusinessCasePagingPage(
          resourceGroupName,
          projectName,
          businessCaseName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByBusinessCasePagingPage(
    resourceGroupName: string,
    projectName: string,
    businessCaseName: string,
    options?: EvaluatedAvsMachinesOperationsListByBusinessCaseOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<EvaluatedAvsMachine[]> {
    let result: EvaluatedAvsMachinesOperationsListByBusinessCaseResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByBusinessCase(
        resourceGroupName,
        projectName,
        businessCaseName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByBusinessCaseNext(
        resourceGroupName,
        projectName,
        businessCaseName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByBusinessCasePagingAll(
    resourceGroupName: string,
    projectName: string,
    businessCaseName: string,
    options?: EvaluatedAvsMachinesOperationsListByBusinessCaseOptionalParams,
  ): AsyncIterableIterator<EvaluatedAvsMachine> {
    for await (const page of this.listByBusinessCasePagingPage(
      resourceGroupName,
      projectName,
      businessCaseName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List EvaluatedAvsMachine resources by BusinessCase
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param projectName Assessment Project Name
   * @param businessCaseName Business case ARM name
   * @param options The options parameters.
   */
  private _listByBusinessCase(
    resourceGroupName: string,
    projectName: string,
    businessCaseName: string,
    options?: EvaluatedAvsMachinesOperationsListByBusinessCaseOptionalParams,
  ): Promise<EvaluatedAvsMachinesOperationsListByBusinessCaseResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, projectName, businessCaseName, options },
      listByBusinessCaseOperationSpec,
    );
  }

  /**
   * Get a EvaluatedAvsMachine
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param projectName Assessment Project Name
   * @param businessCaseName Business case ARM name
   * @param evaluatedAvsMachineName Business case Evaluated AVS machine ARM name
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    projectName: string,
    businessCaseName: string,
    evaluatedAvsMachineName: string,
    options?: EvaluatedAvsMachinesOperationsGetOptionalParams,
  ): Promise<EvaluatedAvsMachinesOperationsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        projectName,
        businessCaseName,
        evaluatedAvsMachineName,
        options,
      },
      getOperationSpec,
    );
  }

  /**
   * ListByBusinessCaseNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param projectName Assessment Project Name
   * @param businessCaseName Business case ARM name
   * @param nextLink The nextLink from the previous successful call to the ListByBusinessCase method.
   * @param options The options parameters.
   */
  private _listByBusinessCaseNext(
    resourceGroupName: string,
    projectName: string,
    businessCaseName: string,
    nextLink: string,
    options?: EvaluatedAvsMachinesOperationsListByBusinessCaseNextOptionalParams,
  ): Promise<EvaluatedAvsMachinesOperationsListByBusinessCaseNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, projectName, businessCaseName, nextLink, options },
      listByBusinessCaseNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByBusinessCaseOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/businessCases/{businessCaseName}/evaluatedAvsMachines",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EvaluatedAvsMachineListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.continuationToken,
    Parameters.filter,
    Parameters.totalRecordCount,
    Parameters.pageSize,
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.projectName,
    Parameters.businessCaseName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/businessCases/{businessCaseName}/evaluatedAvsMachines/{evaluatedAvsMachineName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EvaluatedAvsMachine,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.projectName,
    Parameters.businessCaseName,
    Parameters.evaluatedAvsMachineName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByBusinessCaseNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EvaluatedAvsMachineListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.projectName,
    Parameters.businessCaseName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
