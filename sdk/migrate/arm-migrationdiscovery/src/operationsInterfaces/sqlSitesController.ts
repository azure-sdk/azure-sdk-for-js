/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  SqlSite,
  SqlSitesControllerListByMasterSiteOptionalParams,
  SqlSitesControllerGetOptionalParams,
  SqlSitesControllerGetResponse,
  SqlSitesControllerCreateOptionalParams,
  SqlSitesControllerCreateResponse,
  SqlSiteUpdate,
  SqlSitesControllerUpdateOptionalParams,
  SqlSitesControllerUpdateResponse,
  SqlSitesControllerDeleteOptionalParams,
  ErrorSummaryRequest,
  SqlSitesControllerErrorSummaryOptionalParams,
  SqlSitesControllerErrorSummaryResponse,
  SqlSitesControllerExportSqlServerErrorsOptionalParams,
  SqlSitesControllerExportSqlServerErrorsResponse,
  ExportSqlServersRequest,
  SqlSitesControllerExportSqlServersOptionalParams,
  SqlSitesControllerExportSqlServersResponse,
  SqlSiteRefreshBody,
  SqlSitesControllerRefreshOptionalParams,
  SqlSitesControllerRefreshResponse,
  SqlSitesControllerSummaryOptionalParams,
  SqlSitesControllerSummaryResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a SqlSitesController. */
export interface SqlSitesController {
  /**
   * Method to get all sites.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param options The options parameters.
   */
  listByMasterSite(
    resourceGroupName: string,
    siteName: string,
    options?: SqlSitesControllerListByMasterSiteOptionalParams,
  ): PagedAsyncIterableIterator<SqlSite>;
  /**
   * Method to get a site.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param sqlSiteName SQL site name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    siteName: string,
    sqlSiteName: string,
    options?: SqlSitesControllerGetOptionalParams,
  ): Promise<SqlSitesControllerGetResponse>;
  /**
   * Method to create a SQL site.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param sqlSiteName SQL site name.
   * @param body Resource create parameters.
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    siteName: string,
    sqlSiteName: string,
    body: SqlSite,
    options?: SqlSitesControllerCreateOptionalParams,
  ): Promise<SqlSitesControllerCreateResponse>;
  /**
   * Method to update an existing site.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param sqlSiteName SQL site name.
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    siteName: string,
    sqlSiteName: string,
    properties: SqlSiteUpdate,
    options?: SqlSitesControllerUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<SqlSitesControllerUpdateResponse>,
      SqlSitesControllerUpdateResponse
    >
  >;
  /**
   * Method to update an existing site.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param sqlSiteName SQL site name.
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    siteName: string,
    sqlSiteName: string,
    properties: SqlSiteUpdate,
    options?: SqlSitesControllerUpdateOptionalParams,
  ): Promise<SqlSitesControllerUpdateResponse>;
  /**
   * Deletes the SQL site.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param sqlSiteName SQL site name.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    siteName: string,
    sqlSiteName: string,
    options?: SqlSitesControllerDeleteOptionalParams,
  ): Promise<void>;
  /**
   * Method to get error summary from SQL site.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param sqlSiteName SQL site name.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  errorSummary(
    resourceGroupName: string,
    siteName: string,
    sqlSiteName: string,
    body: ErrorSummaryRequest,
    options?: SqlSitesControllerErrorSummaryOptionalParams,
  ): Promise<SqlSitesControllerErrorSummaryResponse>;
  /**
   * Method to generate report containing SQL servers.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param sqlSiteName SQL site name.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  beginExportSqlServerErrors(
    resourceGroupName: string,
    siteName: string,
    sqlSiteName: string,
    body: Record<string, unknown>,
    options?: SqlSitesControllerExportSqlServerErrorsOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<SqlSitesControllerExportSqlServerErrorsResponse>,
      SqlSitesControllerExportSqlServerErrorsResponse
    >
  >;
  /**
   * Method to generate report containing SQL servers.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param sqlSiteName SQL site name.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  beginExportSqlServerErrorsAndWait(
    resourceGroupName: string,
    siteName: string,
    sqlSiteName: string,
    body: Record<string, unknown>,
    options?: SqlSitesControllerExportSqlServerErrorsOptionalParams,
  ): Promise<SqlSitesControllerExportSqlServerErrorsResponse>;
  /**
   * Method to generate report containing SQL servers.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param sqlSiteName SQL site name.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  beginExportSqlServers(
    resourceGroupName: string,
    siteName: string,
    sqlSiteName: string,
    body: ExportSqlServersRequest,
    options?: SqlSitesControllerExportSqlServersOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<SqlSitesControllerExportSqlServersResponse>,
      SqlSitesControllerExportSqlServersResponse
    >
  >;
  /**
   * Method to generate report containing SQL servers.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param sqlSiteName SQL site name.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  beginExportSqlServersAndWait(
    resourceGroupName: string,
    siteName: string,
    sqlSiteName: string,
    body: ExportSqlServersRequest,
    options?: SqlSitesControllerExportSqlServersOptionalParams,
  ): Promise<SqlSitesControllerExportSqlServersResponse>;
  /**
   * Method to refresh a site.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param sqlSiteName SQL site name.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  beginRefresh(
    resourceGroupName: string,
    siteName: string,
    sqlSiteName: string,
    body: SqlSiteRefreshBody,
    options?: SqlSitesControllerRefreshOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<SqlSitesControllerRefreshResponse>,
      SqlSitesControllerRefreshResponse
    >
  >;
  /**
   * Method to refresh a site.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param sqlSiteName SQL site name.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  beginRefreshAndWait(
    resourceGroupName: string,
    siteName: string,
    sqlSiteName: string,
    body: SqlSiteRefreshBody,
    options?: SqlSitesControllerRefreshOptionalParams,
  ): Promise<SqlSitesControllerRefreshResponse>;
  /**
   * Method to get site usage/summary.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param sqlSiteName SQL site name.
   * @param options The options parameters.
   */
  summary(
    resourceGroupName: string,
    siteName: string,
    sqlSiteName: string,
    options?: SqlSitesControllerSummaryOptionalParams,
  ): Promise<SqlSitesControllerSummaryResponse>;
}
