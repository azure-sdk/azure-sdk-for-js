/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  HypervHost,
  HypervHostControllerListByHypervSiteOptionalParams,
  HypervHostControllerGetOptionalParams,
  HypervHostControllerGetResponse,
  HypervHostControllerCreateOptionalParams,
  HypervHostControllerCreateResponse,
  HypervHostControllerDeleteOptionalParams,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a HypervHostController. */
export interface HypervHostController {
  /**
   * List HypervHost resources by HypervSite
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param options The options parameters.
   */
  listByHypervSite(
    resourceGroupName: string,
    siteName: string,
    options?: HypervHostControllerListByHypervSiteOptionalParams,
  ): PagedAsyncIterableIterator<HypervHost>;
  /**
   * Get a HypervHost
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param hostName  Host name
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    siteName: string,
    hostName: string,
    options?: HypervHostControllerGetOptionalParams,
  ): Promise<HypervHostControllerGetResponse>;
  /**
   * Create a HypervHost
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param hostName  Host name
   * @param body Resource create parameters.
   * @param options The options parameters.
   */
  beginCreate(
    resourceGroupName: string,
    siteName: string,
    hostName: string,
    body: HypervHost,
    options?: HypervHostControllerCreateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<HypervHostControllerCreateResponse>,
      HypervHostControllerCreateResponse
    >
  >;
  /**
   * Create a HypervHost
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param hostName  Host name
   * @param body Resource create parameters.
   * @param options The options parameters.
   */
  beginCreateAndWait(
    resourceGroupName: string,
    siteName: string,
    hostName: string,
    body: HypervHost,
    options?: HypervHostControllerCreateOptionalParams,
  ): Promise<HypervHostControllerCreateResponse>;
  /**
   * Delete a HypervHost
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param hostName  Host name
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    siteName: string,
    hostName: string,
    options?: HypervHostControllerDeleteOptionalParams,
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Delete a HypervHost
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param hostName  Host name
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    siteName: string,
    hostName: string,
    options?: HypervHostControllerDeleteOptionalParams,
  ): Promise<void>;
}
