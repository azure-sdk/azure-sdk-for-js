/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { HypervHostController } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { AzureMigrateDiscoveryService } from "../azureMigrateDiscoveryService.js";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl.js";
import {
  HypervHost,
  HypervHostControllerListByHypervSiteNextOptionalParams,
  HypervHostControllerListByHypervSiteOptionalParams,
  HypervHostControllerListByHypervSiteResponse,
  HypervHostControllerGetOptionalParams,
  HypervHostControllerGetResponse,
  HypervHostControllerCreateOptionalParams,
  HypervHostControllerCreateResponse,
  HypervHostControllerDeleteOptionalParams,
  HypervHostControllerListByHypervSiteNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing HypervHostController operations. */
export class HypervHostControllerImpl implements HypervHostController {
  private readonly client: AzureMigrateDiscoveryService;

  /**
   * Initialize a new instance of the class HypervHostController class.
   * @param client Reference to the service client
   */
  constructor(client: AzureMigrateDiscoveryService) {
    this.client = client;
  }

  /**
   * List HypervHost resources by HypervSite
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param options The options parameters.
   */
  public listByHypervSite(
    resourceGroupName: string,
    siteName: string,
    options?: HypervHostControllerListByHypervSiteOptionalParams,
  ): PagedAsyncIterableIterator<HypervHost> {
    const iter = this.listByHypervSitePagingAll(
      resourceGroupName,
      siteName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByHypervSitePagingPage(
          resourceGroupName,
          siteName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByHypervSitePagingPage(
    resourceGroupName: string,
    siteName: string,
    options?: HypervHostControllerListByHypervSiteOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<HypervHost[]> {
    let result: HypervHostControllerListByHypervSiteResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByHypervSite(
        resourceGroupName,
        siteName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByHypervSiteNext(
        resourceGroupName,
        siteName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByHypervSitePagingAll(
    resourceGroupName: string,
    siteName: string,
    options?: HypervHostControllerListByHypervSiteOptionalParams,
  ): AsyncIterableIterator<HypervHost> {
    for await (const page of this.listByHypervSitePagingPage(
      resourceGroupName,
      siteName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List HypervHost resources by HypervSite
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param options The options parameters.
   */
  private _listByHypervSite(
    resourceGroupName: string,
    siteName: string,
    options?: HypervHostControllerListByHypervSiteOptionalParams,
  ): Promise<HypervHostControllerListByHypervSiteResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, options },
      listByHypervSiteOperationSpec,
    );
  }

  /**
   * Get a HypervHost
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param hostName  Host name
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    siteName: string,
    hostName: string,
    options?: HypervHostControllerGetOptionalParams,
  ): Promise<HypervHostControllerGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, hostName, options },
      getOperationSpec,
    );
  }

  /**
   * Create a HypervHost
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param hostName  Host name
   * @param body Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreate(
    resourceGroupName: string,
    siteName: string,
    hostName: string,
    body: HypervHost,
    options?: HypervHostControllerCreateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<HypervHostControllerCreateResponse>,
      HypervHostControllerCreateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<HypervHostControllerCreateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, siteName, hostName, body, options },
      spec: createOperationSpec,
    });
    const poller = await createHttpPoller<
      HypervHostControllerCreateResponse,
      OperationState<HypervHostControllerCreateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create a HypervHost
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param hostName  Host name
   * @param body Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreateAndWait(
    resourceGroupName: string,
    siteName: string,
    hostName: string,
    body: HypervHost,
    options?: HypervHostControllerCreateOptionalParams,
  ): Promise<HypervHostControllerCreateResponse> {
    const poller = await this.beginCreate(
      resourceGroupName,
      siteName,
      hostName,
      body,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Delete a HypervHost
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param hostName  Host name
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    siteName: string,
    hostName: string,
    options?: HypervHostControllerDeleteOptionalParams,
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, siteName, hostName, options },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete a HypervHost
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param hostName  Host name
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    siteName: string,
    hostName: string,
    options?: HypervHostControllerDeleteOptionalParams,
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      siteName,
      hostName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * ListByHypervSiteNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param nextLink The nextLink from the previous successful call to the ListByHypervSite method.
   * @param options The options parameters.
   */
  private _listByHypervSiteNext(
    resourceGroupName: string,
    siteName: string,
    nextLink: string,
    options?: HypervHostControllerListByHypervSiteNextOptionalParams,
  ): Promise<HypervHostControllerListByHypervSiteNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, nextLink, options },
      listByHypervSiteNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByHypervSiteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/hypervSites/{siteName}/hosts",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HypervHostListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/hypervSites/{siteName}/hosts/{hostName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HypervHost,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.hostName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/hypervSites/{siteName}/hosts/{hostName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.HypervHost,
    },
    201: {
      bodyMapper: Mappers.HypervHost,
    },
    202: {
      bodyMapper: Mappers.HypervHost,
    },
    204: {
      bodyMapper: Mappers.HypervHost,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body15,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.hostName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/hypervSites/{siteName}/hosts/{hostName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.hostName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByHypervSiteNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HypervHostListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
