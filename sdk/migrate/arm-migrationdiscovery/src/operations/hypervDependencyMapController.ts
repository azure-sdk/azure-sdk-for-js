/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { HypervDependencyMapController } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { AzureMigrateDiscoveryService } from "../azureMigrateDiscoveryService.js";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl.js";
import {
  DependencyMapServiceMapextensionsClientGroupMembersRequest,
  HypervDependencyMapControllerClientGroupMembersOptionalParams,
  HypervDependencyMapControllerClientGroupMembersResponse,
  DependencyMapServiceMapextensionsExportDependenciesRequest,
  HypervDependencyMapControllerExportDependenciesOptionalParams,
  HypervDependencyMapControllerExportDependenciesResponse,
  DependencyMapServiceMapextensionsScopeMapRequest,
  HypervDependencyMapControllerGenerateCoarseMapOptionalParams,
  HypervDependencyMapControllerGenerateCoarseMapResponse,
  DependencyMapServiceMapextensionsSingleMachineDetailedMapRequest,
  HypervDependencyMapControllerGenerateDetailedMapOptionalParams,
  HypervDependencyMapControllerGenerateDetailedMapResponse,
  DependencyMapServiceMapextensionsServerGroupMembersRequest,
  HypervDependencyMapControllerServerGroupMembersOptionalParams,
  HypervDependencyMapControllerServerGroupMembersResponse,
  UpdateMachineDepMapStatus,
  HypervDependencyMapControllerUpdateDependencyMapStatusOptionalParams,
  HypervDependencyMapControllerUpdateDependencyMapStatusResponse,
} from "../models/index.js";

/** Class containing HypervDependencyMapController operations. */
export class HypervDependencyMapControllerImpl
  implements HypervDependencyMapController
{
  private readonly client: AzureMigrateDiscoveryService;

  /**
   * Initialize a new instance of the class HypervDependencyMapController class.
   * @param client Reference to the service client
   */
  constructor(client: AzureMigrateDiscoveryService) {
    this.client = client;
  }

  /**
   * API to list client group members for the selected client group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param mapRequest The content of the action request
   * @param options The options parameters.
   */
  async beginClientGroupMembers(
    resourceGroupName: string,
    siteName: string,
    mapRequest: DependencyMapServiceMapextensionsClientGroupMembersRequest,
    options?: HypervDependencyMapControllerClientGroupMembersOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<HypervDependencyMapControllerClientGroupMembersResponse>,
      HypervDependencyMapControllerClientGroupMembersResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<HypervDependencyMapControllerClientGroupMembersResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, siteName, mapRequest, options },
      spec: clientGroupMembersOperationSpec,
    });
    const poller = await createHttpPoller<
      HypervDependencyMapControllerClientGroupMembersResponse,
      OperationState<HypervDependencyMapControllerClientGroupMembersResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * API to list client group members for the selected client group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param mapRequest The content of the action request
   * @param options The options parameters.
   */
  async beginClientGroupMembersAndWait(
    resourceGroupName: string,
    siteName: string,
    mapRequest: DependencyMapServiceMapextensionsClientGroupMembersRequest,
    options?: HypervDependencyMapControllerClientGroupMembersOptionalParams,
  ): Promise<HypervDependencyMapControllerClientGroupMembersResponse> {
    const poller = await this.beginClientGroupMembers(
      resourceGroupName,
      siteName,
      mapRequest,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * API to generate report containing agentless dependencies.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param requestBody The content of the action request
   * @param options The options parameters.
   */
  async beginExportDependencies(
    resourceGroupName: string,
    siteName: string,
    requestBody: DependencyMapServiceMapextensionsExportDependenciesRequest,
    options?: HypervDependencyMapControllerExportDependenciesOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<HypervDependencyMapControllerExportDependenciesResponse>,
      HypervDependencyMapControllerExportDependenciesResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<HypervDependencyMapControllerExportDependenciesResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, siteName, requestBody, options },
      spec: exportDependenciesOperationSpec,
    });
    const poller = await createHttpPoller<
      HypervDependencyMapControllerExportDependenciesResponse,
      OperationState<HypervDependencyMapControllerExportDependenciesResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * API to generate report containing agentless dependencies.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param requestBody The content of the action request
   * @param options The options parameters.
   */
  async beginExportDependenciesAndWait(
    resourceGroupName: string,
    siteName: string,
    requestBody: DependencyMapServiceMapextensionsExportDependenciesRequest,
    options?: HypervDependencyMapControllerExportDependenciesOptionalParams,
  ): Promise<HypervDependencyMapControllerExportDependenciesResponse> {
    const poller = await this.beginExportDependencies(
      resourceGroupName,
      siteName,
      requestBody,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * API to generate coarse map for the list of machines.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param mapRequest The content of the action request
   * @param options The options parameters.
   */
  async beginGenerateCoarseMap(
    resourceGroupName: string,
    siteName: string,
    mapRequest: DependencyMapServiceMapextensionsScopeMapRequest,
    options?: HypervDependencyMapControllerGenerateCoarseMapOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<HypervDependencyMapControllerGenerateCoarseMapResponse>,
      HypervDependencyMapControllerGenerateCoarseMapResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<HypervDependencyMapControllerGenerateCoarseMapResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, siteName, mapRequest, options },
      spec: generateCoarseMapOperationSpec,
    });
    const poller = await createHttpPoller<
      HypervDependencyMapControllerGenerateCoarseMapResponse,
      OperationState<HypervDependencyMapControllerGenerateCoarseMapResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * API to generate coarse map for the list of machines.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param mapRequest The content of the action request
   * @param options The options parameters.
   */
  async beginGenerateCoarseMapAndWait(
    resourceGroupName: string,
    siteName: string,
    mapRequest: DependencyMapServiceMapextensionsScopeMapRequest,
    options?: HypervDependencyMapControllerGenerateCoarseMapOptionalParams,
  ): Promise<HypervDependencyMapControllerGenerateCoarseMapResponse> {
    const poller = await this.beginGenerateCoarseMap(
      resourceGroupName,
      siteName,
      mapRequest,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * API to generate detailed map for a selected machine.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param mapRequest The content of the action request
   * @param options The options parameters.
   */
  async beginGenerateDetailedMap(
    resourceGroupName: string,
    siteName: string,
    mapRequest: DependencyMapServiceMapextensionsSingleMachineDetailedMapRequest,
    options?: HypervDependencyMapControllerGenerateDetailedMapOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<HypervDependencyMapControllerGenerateDetailedMapResponse>,
      HypervDependencyMapControllerGenerateDetailedMapResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<HypervDependencyMapControllerGenerateDetailedMapResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, siteName, mapRequest, options },
      spec: generateDetailedMapOperationSpec,
    });
    const poller = await createHttpPoller<
      HypervDependencyMapControllerGenerateDetailedMapResponse,
      OperationState<HypervDependencyMapControllerGenerateDetailedMapResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * API to generate detailed map for a selected machine.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param mapRequest The content of the action request
   * @param options The options parameters.
   */
  async beginGenerateDetailedMapAndWait(
    resourceGroupName: string,
    siteName: string,
    mapRequest: DependencyMapServiceMapextensionsSingleMachineDetailedMapRequest,
    options?: HypervDependencyMapControllerGenerateDetailedMapOptionalParams,
  ): Promise<HypervDependencyMapControllerGenerateDetailedMapResponse> {
    const poller = await this.beginGenerateDetailedMap(
      resourceGroupName,
      siteName,
      mapRequest,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * API to list server group members for the selected server group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param mapRequest The content of the action request
   * @param options The options parameters.
   */
  async beginServerGroupMembers(
    resourceGroupName: string,
    siteName: string,
    mapRequest: DependencyMapServiceMapextensionsServerGroupMembersRequest,
    options?: HypervDependencyMapControllerServerGroupMembersOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<HypervDependencyMapControllerServerGroupMembersResponse>,
      HypervDependencyMapControllerServerGroupMembersResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<HypervDependencyMapControllerServerGroupMembersResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, siteName, mapRequest, options },
      spec: serverGroupMembersOperationSpec,
    });
    const poller = await createHttpPoller<
      HypervDependencyMapControllerServerGroupMembersResponse,
      OperationState<HypervDependencyMapControllerServerGroupMembersResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * API to list server group members for the selected server group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param mapRequest The content of the action request
   * @param options The options parameters.
   */
  async beginServerGroupMembersAndWait(
    resourceGroupName: string,
    siteName: string,
    mapRequest: DependencyMapServiceMapextensionsServerGroupMembersRequest,
    options?: HypervDependencyMapControllerServerGroupMembersOptionalParams,
  ): Promise<HypervDependencyMapControllerServerGroupMembersResponse> {
    const poller = await this.beginServerGroupMembers(
      resourceGroupName,
      siteName,
      mapRequest,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Method to enable disable dependency map status for machines
   *             in a site.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param mapRequest The content of the action request
   * @param options The options parameters.
   */
  async beginUpdateDependencyMapStatus(
    resourceGroupName: string,
    siteName: string,
    mapRequest: UpdateMachineDepMapStatus,
    options?: HypervDependencyMapControllerUpdateDependencyMapStatusOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<HypervDependencyMapControllerUpdateDependencyMapStatusResponse>,
      HypervDependencyMapControllerUpdateDependencyMapStatusResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<HypervDependencyMapControllerUpdateDependencyMapStatusResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, siteName, mapRequest, options },
      spec: updateDependencyMapStatusOperationSpec,
    });
    const poller = await createHttpPoller<
      HypervDependencyMapControllerUpdateDependencyMapStatusResponse,
      OperationState<HypervDependencyMapControllerUpdateDependencyMapStatusResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Method to enable disable dependency map status for machines
   *             in a site.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param mapRequest The content of the action request
   * @param options The options parameters.
   */
  async beginUpdateDependencyMapStatusAndWait(
    resourceGroupName: string,
    siteName: string,
    mapRequest: UpdateMachineDepMapStatus,
    options?: HypervDependencyMapControllerUpdateDependencyMapStatusOptionalParams,
  ): Promise<HypervDependencyMapControllerUpdateDependencyMapStatusResponse> {
    const poller = await this.beginUpdateDependencyMapStatus(
      resourceGroupName,
      siteName,
      mapRequest,
      options,
    );
    return poller.pollUntilDone();
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const clientGroupMembersOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/hypervSites/{siteName}/clientGroupMembers",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    201: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    202: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    204: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.mapRequest1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const exportDependenciesOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/hypervSites/{siteName}/exportDependencies",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    201: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    202: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    204: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.requestBody,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const generateCoarseMapOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/hypervSites/{siteName}/generateCoarseMap",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    201: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    202: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    204: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.mapRequest2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const generateDetailedMapOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/hypervSites/{siteName}/generateDetailedMap",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    201: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    202: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    204: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.mapRequest3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const serverGroupMembersOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/hypervSites/{siteName}/serverGroupMembers",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    201: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    202: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    204: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.mapRequest4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const updateDependencyMapStatusOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/hypervSites/{siteName}/updateDependencyMapStatus",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    201: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    202: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    204: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.mapRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
