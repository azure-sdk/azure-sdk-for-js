/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { ImportMachinesController } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { AzureMigrateDiscoveryService } from "../azureMigrateDiscoveryService.js";
import {
  ImportMachine,
  ImportMachinesControllerListByImportSiteNextOptionalParams,
  ImportMachinesControllerListByImportSiteOptionalParams,
  ImportMachinesControllerListByImportSiteResponse,
  ImportMachinesControllerGetOptionalParams,
  ImportMachinesControllerGetResponse,
  ImportMachinesControllerDeleteOptionalParams,
  ImportMachinesControllerListByImportSiteNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing ImportMachinesController operations. */
export class ImportMachinesControllerImpl implements ImportMachinesController {
  private readonly client: AzureMigrateDiscoveryService;

  /**
   * Initialize a new instance of the class ImportMachinesController class.
   * @param client Reference to the service client
   */
  constructor(client: AzureMigrateDiscoveryService) {
    this.client = client;
  }

  /**
   * List ImportMachine resources by ImportSite
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param options The options parameters.
   */
  public listByImportSite(
    resourceGroupName: string,
    siteName: string,
    options?: ImportMachinesControllerListByImportSiteOptionalParams,
  ): PagedAsyncIterableIterator<ImportMachine> {
    const iter = this.listByImportSitePagingAll(
      resourceGroupName,
      siteName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByImportSitePagingPage(
          resourceGroupName,
          siteName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByImportSitePagingPage(
    resourceGroupName: string,
    siteName: string,
    options?: ImportMachinesControllerListByImportSiteOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<ImportMachine[]> {
    let result: ImportMachinesControllerListByImportSiteResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByImportSite(
        resourceGroupName,
        siteName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByImportSiteNext(
        resourceGroupName,
        siteName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByImportSitePagingAll(
    resourceGroupName: string,
    siteName: string,
    options?: ImportMachinesControllerListByImportSiteOptionalParams,
  ): AsyncIterableIterator<ImportMachine> {
    for await (const page of this.listByImportSitePagingPage(
      resourceGroupName,
      siteName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List ImportMachine resources by ImportSite
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param options The options parameters.
   */
  private _listByImportSite(
    resourceGroupName: string,
    siteName: string,
    options?: ImportMachinesControllerListByImportSiteOptionalParams,
  ): Promise<ImportMachinesControllerListByImportSiteResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, options },
      listByImportSiteOperationSpec,
    );
  }

  /**
   * Get a ImportMachine
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param machineName Machine name
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    siteName: string,
    machineName: string,
    options?: ImportMachinesControllerGetOptionalParams,
  ): Promise<ImportMachinesControllerGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, machineName, options },
      getOperationSpec,
    );
  }

  /**
   * Delete a ImportMachine
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param machineName Machine name
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    siteName: string,
    machineName: string,
    options?: ImportMachinesControllerDeleteOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, machineName, options },
      deleteOperationSpec,
    );
  }

  /**
   * ListByImportSiteNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName Site name
   * @param nextLink The nextLink from the previous successful call to the ListByImportSite method.
   * @param options The options parameters.
   */
  private _listByImportSiteNext(
    resourceGroupName: string,
    siteName: string,
    nextLink: string,
    options?: ImportMachinesControllerListByImportSiteNextOptionalParams,
  ): Promise<ImportMachinesControllerListByImportSiteNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, nextLink, options },
      listByImportSiteNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByImportSiteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/importSites/{siteName}/machines",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ImportMachineListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.continuationToken,
    Parameters.totalRecordCount,
    Parameters.top1,
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/importSites/{siteName}/machines/{machineName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ImportMachine,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.machineName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/importSites/{siteName}/machines/{machineName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.machineName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByImportSiteNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ImportMachineListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
