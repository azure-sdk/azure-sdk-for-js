/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { CGProfile } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ContainerInstanceManagementClient } from "../containerInstanceManagementClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  ContainerGroupProfile,
  CGProfileListAllRevisionsNextOptionalParams,
  CGProfileListAllRevisionsOptionalParams,
  CGProfileListAllRevisionsResponse,
  CGProfileCreateOrUpdateOptionalParams,
  CGProfileCreateOrUpdateResponse,
  ContainerGroupProfilePatch,
  CGProfileUpdateOptionalParams,
  CGProfileUpdateResponse,
  CGProfileGetOptionalParams,
  CGProfileGetResponse,
  CGProfileDeleteOptionalParams,
  CGProfileDeleteResponse,
  CGProfileGetByRevisionNumberOptionalParams,
  CGProfileGetByRevisionNumberResponse,
  CGProfileListAllRevisionsNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing CGProfile operations. */
export class CGProfileImpl implements CGProfile {
  private readonly client: ContainerInstanceManagementClient;

  /**
   * Initialize a new instance of the class CGProfile class.
   * @param client Reference to the service client
   */
  constructor(client: ContainerInstanceManagementClient) {
    this.client = client;
  }

  /**
   * Get a list of all the revisions of the specified container group profile in the given subscription
   * and resource group. This operation returns properties of each revision of the specified container
   * group profile including containers, image registry credentials, restart policy, IP address type, OS
   * type volumes, revision number, etc.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerGroupProfileName ContainerGroupProfile name.
   * @param options The options parameters.
   */
  public listAllRevisions(
    resourceGroupName: string,
    containerGroupProfileName: string,
    options?: CGProfileListAllRevisionsOptionalParams,
  ): PagedAsyncIterableIterator<ContainerGroupProfile> {
    const iter = this.listAllRevisionsPagingAll(
      resourceGroupName,
      containerGroupProfileName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listAllRevisionsPagingPage(
          resourceGroupName,
          containerGroupProfileName,
          options,
          settings,
        );
      },
    };
  }

  private async *listAllRevisionsPagingPage(
    resourceGroupName: string,
    containerGroupProfileName: string,
    options?: CGProfileListAllRevisionsOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<ContainerGroupProfile[]> {
    let result: CGProfileListAllRevisionsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listAllRevisions(
        resourceGroupName,
        containerGroupProfileName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listAllRevisionsNext(
        resourceGroupName,
        containerGroupProfileName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listAllRevisionsPagingAll(
    resourceGroupName: string,
    containerGroupProfileName: string,
    options?: CGProfileListAllRevisionsOptionalParams,
  ): AsyncIterableIterator<ContainerGroupProfile> {
    for await (const page of this.listAllRevisionsPagingPage(
      resourceGroupName,
      containerGroupProfileName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Create a CGProfile if it doesn't exist or update an existing CGProfile.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerGroupProfileName ContainerGroupProfile name.
   * @param containerGroupProfile The ContainerGroupProfile object.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    containerGroupProfileName: string,
    containerGroupProfile: ContainerGroupProfile,
    options?: CGProfileCreateOrUpdateOptionalParams,
  ): Promise<CGProfileCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        containerGroupProfileName,
        containerGroupProfile,
        options,
      },
      createOrUpdateOperationSpec,
    );
  }

  /**
   * Update a specified container group profile.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerGroupProfileName ContainerGroupProfile name.
   * @param properties The container group profile properties that need to be updated.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    containerGroupProfileName: string,
    properties: ContainerGroupProfilePatch,
    options?: CGProfileUpdateOptionalParams,
  ): Promise<CGProfileUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, containerGroupProfileName, properties, options },
      updateOperationSpec,
    );
  }

  /**
   * Get the properties of the specified container group profile.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerGroupProfileName ContainerGroupProfile name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    containerGroupProfileName: string,
    options?: CGProfileGetOptionalParams,
  ): Promise<CGProfileGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, containerGroupProfileName, options },
      getOperationSpec,
    );
  }

  /**
   * Deletes a container group profile.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerGroupProfileName ContainerGroupProfile name.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    containerGroupProfileName: string,
    options?: CGProfileDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<CGProfileDeleteResponse>,
      CGProfileDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<CGProfileDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, containerGroupProfileName, options },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<
      CGProfileDeleteResponse,
      OperationState<CGProfileDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
    });
    await poller.poll();
    return poller;
  }

  /**
   * Deletes a container group profile.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerGroupProfileName ContainerGroupProfile name.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    containerGroupProfileName: string,
    options?: CGProfileDeleteOptionalParams,
  ): Promise<CGProfileDeleteResponse> {
    const poller = await this.beginDelete(
      resourceGroupName,
      containerGroupProfileName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Get a list of all the revisions of the specified container group profile in the given subscription
   * and resource group. This operation returns properties of each revision of the specified container
   * group profile including containers, image registry credentials, restart policy, IP address type, OS
   * type volumes, revision number, etc.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerGroupProfileName ContainerGroupProfile name.
   * @param options The options parameters.
   */
  private _listAllRevisions(
    resourceGroupName: string,
    containerGroupProfileName: string,
    options?: CGProfileListAllRevisionsOptionalParams,
  ): Promise<CGProfileListAllRevisionsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, containerGroupProfileName, options },
      listAllRevisionsOperationSpec,
    );
  }

  /**
   * Gets the properties of the specified revision of the container group profile in the given
   * subscription and resource group. The operation returns the properties of container group profile
   * including containers, image registry credentials, restart policy, IP address type, OS type, volumes,
   * current revision number, etc.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerGroupProfileName ContainerGroupProfile name.
   * @param revisionNumber The revision number of the container group profile.
   * @param options The options parameters.
   */
  getByRevisionNumber(
    resourceGroupName: string,
    containerGroupProfileName: string,
    revisionNumber: string,
    options?: CGProfileGetByRevisionNumberOptionalParams,
  ): Promise<CGProfileGetByRevisionNumberResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, containerGroupProfileName, revisionNumber, options },
      getByRevisionNumberOperationSpec,
    );
  }

  /**
   * ListAllRevisionsNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerGroupProfileName ContainerGroupProfile name.
   * @param nextLink The nextLink from the previous successful call to the ListAllRevisions method.
   * @param options The options parameters.
   */
  private _listAllRevisionsNext(
    resourceGroupName: string,
    containerGroupProfileName: string,
    nextLink: string,
    options?: CGProfileListAllRevisionsNextOptionalParams,
  ): Promise<CGProfileListAllRevisionsNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, containerGroupProfileName, nextLink, options },
      listAllRevisionsNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroupProfiles/{containerGroupProfileName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ContainerGroupProfile,
      headersMapper: Mappers.CGProfileCreateOrUpdateHeaders,
    },
    201: {
      bodyMapper: Mappers.ContainerGroupProfile,
      headersMapper: Mappers.CGProfileCreateOrUpdateHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.containerGroupProfile,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.containerGroupProfileName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroupProfiles/{containerGroupProfileName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.ContainerGroupProfile,
      headersMapper: Mappers.CGProfileUpdateHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.properties,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.containerGroupProfileName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroupProfiles/{containerGroupProfileName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ContainerGroupProfile,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.containerGroupProfileName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroupProfiles/{containerGroupProfileName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.CGProfileDeleteHeaders,
    },
    201: {
      headersMapper: Mappers.CGProfileDeleteHeaders,
    },
    202: {
      headersMapper: Mappers.CGProfileDeleteHeaders,
    },
    204: {
      headersMapper: Mappers.CGProfileDeleteHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.containerGroupProfileName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listAllRevisionsOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroupProfiles/{containerGroupProfileName}/revisions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ContainerGroupProfileListResult,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.containerGroupProfileName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getByRevisionNumberOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroupProfiles/{containerGroupProfileName}/revisions/{revisionNumber}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ContainerGroupProfile,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.containerGroupProfileName,
    Parameters.revisionNumber,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listAllRevisionsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ContainerGroupProfileListResult,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
    Parameters.containerGroupProfileName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
