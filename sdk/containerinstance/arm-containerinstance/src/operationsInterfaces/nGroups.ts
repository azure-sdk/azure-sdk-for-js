/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  NGroup,
  NGroupsListByResourceGroupOptionalParams,
  NGroupsListOptionalParams,
  NGroupsGetOptionalParams,
  NGroupsGetResponse,
  NGroupsCreateOrUpdateOptionalParams,
  NGroupsCreateOrUpdateResponse,
  NGroupsUpdateOptionalParams,
  NGroupsUpdateResponse,
  NGroupsDeleteOptionalParams,
  NGroupsDeleteResponse,
  NGroupsStartOptionalParams,
  NGroupsStartResponse,
  NGroupsStopOptionalParams,
  NGroupsRestartOptionalParams,
  NGroupsRestartResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a NGroups. */
export interface NGroups {
  /**
   * Gets a list of all NGroups resources under a resource group.
   * @param resourceGroupName The name of the resource group.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: NGroupsListByResourceGroupOptionalParams,
  ): PagedAsyncIterableIterator<NGroup>;
  /**
   * Gets a list of all NGroups resources under a subscription.
   * @param options The options parameters.
   */
  list(options?: NGroupsListOptionalParams): PagedAsyncIterableIterator<NGroup>;
  /**
   * Get the properties of the specified NGroups resource.
   * @param resourceGroupName The name of the resource group.
   * @param ngroupsName The NGroups name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    ngroupsName: string,
    options?: NGroupsGetOptionalParams,
  ): Promise<NGroupsGetResponse>;
  /**
   * Create or update a NGroups resource.
   * @param resourceGroupName The name of the resource group.
   * @param ngroupsName The NGroups name.
   * @param nGroup The NGroup object.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    ngroupsName: string,
    nGroup: NGroup,
    options?: NGroupsCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<NGroupsCreateOrUpdateResponse>,
      NGroupsCreateOrUpdateResponse
    >
  >;
  /**
   * Create or update a NGroups resource.
   * @param resourceGroupName The name of the resource group.
   * @param ngroupsName The NGroups name.
   * @param nGroup The NGroup object.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    ngroupsName: string,
    nGroup: NGroup,
    options?: NGroupsCreateOrUpdateOptionalParams,
  ): Promise<NGroupsCreateOrUpdateResponse>;
  /**
   * Update a specified NGroups resource.
   * @param resourceGroupName The name of the resource group.
   * @param ngroupsName The NGroups name.
   * @param nGroup The NGroup object.
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    ngroupsName: string,
    nGroup: NGroup,
    options?: NGroupsUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<NGroupsUpdateResponse>,
      NGroupsUpdateResponse
    >
  >;
  /**
   * Update a specified NGroups resource.
   * @param resourceGroupName The name of the resource group.
   * @param ngroupsName The NGroups name.
   * @param nGroup The NGroup object.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    ngroupsName: string,
    nGroup: NGroup,
    options?: NGroupsUpdateOptionalParams,
  ): Promise<NGroupsUpdateResponse>;
  /**
   * Deletes the NGroups resource.
   * @param resourceGroupName The name of the resource group.
   * @param ngroupsName The NGroups name.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    ngroupsName: string,
    options?: NGroupsDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<NGroupsDeleteResponse>,
      NGroupsDeleteResponse
    >
  >;
  /**
   * Deletes the NGroups resource.
   * @param resourceGroupName The name of the resource group.
   * @param ngroupsName The NGroups name.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    ngroupsName: string,
    options?: NGroupsDeleteOptionalParams,
  ): Promise<NGroupsDeleteResponse>;
  /**
   * Starts all container groups in the specified NGroups resource. Compute resources will be allocated
   * and billing will start.
   * @param resourceGroupName The name of the resource group.
   * @param ngroupsName The NGroups name.
   * @param options The options parameters.
   */
  beginStart(
    resourceGroupName: string,
    ngroupsName: string,
    options?: NGroupsStartOptionalParams,
  ): Promise<
    SimplePollerLike<OperationState<NGroupsStartResponse>, NGroupsStartResponse>
  >;
  /**
   * Starts all container groups in the specified NGroups resource. Compute resources will be allocated
   * and billing will start.
   * @param resourceGroupName The name of the resource group.
   * @param ngroupsName The NGroups name.
   * @param options The options parameters.
   */
  beginStartAndWait(
    resourceGroupName: string,
    ngroupsName: string,
    options?: NGroupsStartOptionalParams,
  ): Promise<NGroupsStartResponse>;
  /**
   * Stops all container groups in the specified NGroups resource. Compute resources will be deallocated
   * and billing will stop.
   * @param resourceGroupName The name of the resource group.
   * @param ngroupsName The NGroups name.
   * @param options The options parameters.
   */
  stop(
    resourceGroupName: string,
    ngroupsName: string,
    options?: NGroupsStopOptionalParams,
  ): Promise<void>;
  /**
   * Restarts all container groups in the specified NGroups resource in place. If container image has
   * updates, new image will be downloaded.
   * @param resourceGroupName The name of the resource group.
   * @param ngroupsName The NGroups name.
   * @param options The options parameters.
   */
  beginRestart(
    resourceGroupName: string,
    ngroupsName: string,
    options?: NGroupsRestartOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<NGroupsRestartResponse>,
      NGroupsRestartResponse
    >
  >;
  /**
   * Restarts all container groups in the specified NGroups resource in place. If container image has
   * updates, new image will be downloaded.
   * @param resourceGroupName The name of the resource group.
   * @param ngroupsName The NGroups name.
   * @param options The options parameters.
   */
  beginRestartAndWait(
    resourceGroupName: string,
    ngroupsName: string,
    options?: NGroupsRestartOptionalParams,
  ): Promise<NGroupsRestartResponse>;
}
