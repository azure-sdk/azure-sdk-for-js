/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { PrivateLinkResources } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { OpenEnergyPlatformManagementServiceAPIs } from "../openEnergyPlatformManagementServiceAPIs";
import {
  GroupInformation,
  PrivateLinkResourcesListByOAKInstanceOptionalParams,
  PrivateLinkResourcesListByOAKInstanceResponse,
  PrivateLinkResourcesGetOptionalParams,
  PrivateLinkResourcesGetResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing PrivateLinkResources operations. */
export class PrivateLinkResourcesImpl implements PrivateLinkResources {
  private readonly client: OpenEnergyPlatformManagementServiceAPIs;

  /**
   * Initialize a new instance of the class PrivateLinkResources class.
   * @param client Reference to the service client
   */
  constructor(client: OpenEnergyPlatformManagementServiceAPIs) {
    this.client = client;
  }

  /**
   * List all private link resources in a OAK instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The resource name.
   * @param options The options parameters.
   */
  public listByOAKInstance(
    resourceGroupName: string,
    resourceName: string,
    options?: PrivateLinkResourcesListByOAKInstanceOptionalParams
  ): PagedAsyncIterableIterator<GroupInformation> {
    const iter = this.listByOAKInstancePagingAll(
      resourceGroupName,
      resourceName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByOAKInstancePagingPage(
          resourceGroupName,
          resourceName,
          options,
          settings
        );
      }
    };
  }

  private async *listByOAKInstancePagingPage(
    resourceGroupName: string,
    resourceName: string,
    options?: PrivateLinkResourcesListByOAKInstanceOptionalParams,
    _settings?: PageSettings
  ): AsyncIterableIterator<GroupInformation[]> {
    let result: PrivateLinkResourcesListByOAKInstanceResponse;
    result = await this._listByOAKInstance(
      resourceGroupName,
      resourceName,
      options
    );
    yield result.value || [];
  }

  private async *listByOAKInstancePagingAll(
    resourceGroupName: string,
    resourceName: string,
    options?: PrivateLinkResourcesListByOAKInstanceOptionalParams
  ): AsyncIterableIterator<GroupInformation> {
    for await (const page of this.listByOAKInstancePagingPage(
      resourceGroupName,
      resourceName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List all private link resources in a OAK instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The resource name.
   * @param options The options parameters.
   */
  private _listByOAKInstance(
    resourceGroupName: string,
    resourceName: string,
    options?: PrivateLinkResourcesListByOAKInstanceOptionalParams
  ): Promise<PrivateLinkResourcesListByOAKInstanceResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, options },
      listByOAKInstanceOperationSpec
    );
  }

  /**
   * Get the specified private link resource associated with the OAK instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The resource name.
   * @param groupId The group ID of the private link resource.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    resourceName: string,
    groupId: string,
    options?: PrivateLinkResourcesGetOptionalParams
  ): Promise<PrivateLinkResourcesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, groupId, options },
      getOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByOAKInstanceOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OpenEnergyPlatform/energyServices/{resourceName}/privateLinkResources",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PrivateLinkResourceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OpenEnergyPlatform/energyServices/{resourceName}/privateLinkResources/{groupId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GroupInformation
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName,
    Parameters.groupId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
