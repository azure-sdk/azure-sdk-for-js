/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const IacProfileListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IacProfileListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IacProfile",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const StageProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StageProperties",
    modelProperties: {
      stageName: {
        serializedName: "stageName",
        type: {
          name: "String",
        },
      },
      dependencies: {
        serializedName: "dependencies",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      gitEnvironment: {
        serializedName: "gitEnvironment",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const IacTemplateProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IacTemplateProperties",
    modelProperties: {
      templateName: {
        serializedName: "templateName",
        type: {
          name: "String",
        },
      },
      sourceResourceId: {
        serializedName: "sourceResourceId",
        type: {
          name: "String",
        },
      },
      instanceStage: {
        serializedName: "instanceStage",
        type: {
          name: "String",
        },
      },
      instanceName: {
        serializedName: "instanceName",
        type: {
          name: "String",
        },
      },
      templateDetails: {
        serializedName: "templateDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IacTemplateDetails",
            },
          },
        },
      },
      quickStartTemplateType: {
        serializedName: "quickStartTemplateType",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const IacTemplateDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IacTemplateDetails",
    modelProperties: {
      productName: {
        serializedName: "productName",
        type: {
          name: "String",
        },
      },
      count: {
        serializedName: "count",
        type: {
          name: "Number",
        },
      },
      namingConvention: {
        serializedName: "namingConvention",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData",
        },
      },
    },
  },
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String",
        },
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String",
        },
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime",
        },
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String",
        },
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String",
        },
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail",
        },
      },
    },
  },
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail",
            },
          },
        },
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo",
            },
          },
        },
      },
    },
  },
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } },
        },
      },
    },
  },
};

export const TagsObject: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TagsObject",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
    },
  },
};

export const ExportTemplateRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExportTemplateRequest",
    modelProperties: {
      templateName: {
        serializedName: "templateName",
        type: {
          name: "String",
        },
      },
      resourceGroupIds: {
        serializedName: "resourceGroupIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      siteId: {
        serializedName: "siteId",
        type: {
          name: "String",
        },
      },
      instanceName: {
        serializedName: "instanceName",
        type: {
          name: "String",
        },
      },
      instanceStage: {
        serializedName: "instanceStage",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PrLinkResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrLinkResponse",
    modelProperties: {
      prLink: {
        serializedName: "prLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ScaleTemplateRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScaleTemplateRequest",
    modelProperties: {
      templateName: {
        serializedName: "templateName",
        type: {
          name: "String",
        },
      },
      scaleRequirement: {
        serializedName: "scaleRequirement",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ScaleProperty",
            },
          },
        },
      },
    },
  },
};

export const ScaleProperty: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScaleProperty",
    modelProperties: {
      region: {
        serializedName: "region",
        type: {
          name: "String",
        },
      },
      stage: {
        serializedName: "stage",
        type: {
          name: "String",
        },
      },
      numberOfStore: {
        serializedName: "numberOfStore",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      isDataAction: {
        serializedName: "isDataAction",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay",
        },
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      actionType: {
        serializedName: "actionType",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const GitHubOAuthCallRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GitHubOAuthCallRequest",
    modelProperties: {
      redirectUrl: {
        serializedName: "redirectUrl",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const GitHubOAuthInfoResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GitHubOAuthInfoResponse",
    modelProperties: {
      authURL: {
        serializedName: "authURL",
        type: {
          name: "String",
        },
      },
      token: {
        serializedName: "token",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const GitHubOAuthProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GitHubOAuthProperties",
    modelProperties: {
      username: {
        serializedName: "username",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const GitHubOAuthListResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GitHubOAuthListResponse",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GitHubOAuthResponse",
            },
          },
        },
      },
    },
  },
};

export const WorkflowListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkflowListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Workflow",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const WorkflowProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkflowProperties",
    modelProperties: {
      githubWorkflowProfile: {
        serializedName: "githubWorkflowProfile",
        type: {
          name: "Composite",
          className: "GitHubWorkflowProfile",
        },
      },
      artifactGenerationProperties: {
        serializedName: "artifactGenerationProperties",
        type: {
          name: "Composite",
          className: "ArtifactGenerationProperties",
        },
      },
      azurePipelineProfile: {
        serializedName: "azurePipelineProfile",
        type: {
          name: "Composite",
          className: "AzurePipelineProfile",
        },
      },
      templateWorkflowProfile: {
        serializedName: "templateWorkflowProfile",
        type: {
          name: "Composite",
          className: "TemplateWorkflowProfile",
        },
      },
    },
  },
};

export const GitHubWorkflowProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GitHubWorkflowProfile",
    modelProperties: {
      repositoryOwner: {
        serializedName: "repositoryOwner",
        type: {
          name: "String",
        },
      },
      repositoryName: {
        serializedName: "repositoryName",
        type: {
          name: "String",
        },
      },
      branchName: {
        serializedName: "branchName",
        type: {
          name: "String",
        },
      },
      dockerfile: {
        serializedName: "dockerfile",
        type: {
          name: "String",
        },
      },
      dockerBuildContext: {
        serializedName: "dockerBuildContext",
        type: {
          name: "String",
        },
      },
      deploymentProperties: {
        serializedName: "deploymentProperties",
        type: {
          name: "Composite",
          className: "Deployment",
        },
      },
      namespace: {
        serializedName: "namespace",
        type: {
          name: "String",
        },
      },
      acr: {
        serializedName: "acr",
        type: {
          name: "Composite",
          className: "Acr",
        },
      },
      oidcCredentials: {
        serializedName: "oidcCredentials",
        type: {
          name: "Composite",
          className: "GitHubWorkflowProfileOidcCredentials",
        },
      },
      aksResourceId: {
        serializedName: "aksResourceId",
        type: {
          name: "String",
        },
      },
      prURL: {
        serializedName: "prURL",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      pullNumber: {
        serializedName: "pullNumber",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      prStatus: {
        serializedName: "prStatus",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      lastWorkflowRun: {
        serializedName: "lastWorkflowRun",
        type: {
          name: "Composite",
          className: "WorkflowRun",
        },
      },
      authStatus: {
        serializedName: "authStatus",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Deployment: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Deployment",
    modelProperties: {
      manifestType: {
        serializedName: "manifestType",
        type: {
          name: "String",
        },
      },
      kubeManifestLocations: {
        serializedName: "kubeManifestLocations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      helmChartPath: {
        serializedName: "helmChartPath",
        type: {
          name: "String",
        },
      },
      helmValues: {
        serializedName: "helmValues",
        type: {
          name: "String",
        },
      },
      overrides: {
        serializedName: "overrides",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
    },
  },
};

export const Acr: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Acr",
    modelProperties: {
      acrSubscriptionId: {
        serializedName: "acrSubscriptionId",
        type: {
          name: "String",
        },
      },
      acrResourceGroup: {
        serializedName: "acrResourceGroup",
        type: {
          name: "String",
        },
      },
      acrRegistryName: {
        serializedName: "acrRegistryName",
        type: {
          name: "String",
        },
      },
      acrRepositoryName: {
        serializedName: "acrRepositoryName",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const GitHubWorkflowProfileOidcCredentials: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "GitHubWorkflowProfileOidcCredentials",
      modelProperties: {
        azureClientId: {
          serializedName: "azureClientId",
          type: {
            name: "String",
          },
        },
        azureTenantId: {
          serializedName: "azureTenantId",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const WorkflowRun: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkflowRun",
    modelProperties: {
      succeeded: {
        serializedName: "succeeded",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      workflowRunURL: {
        serializedName: "workflowRunURL",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      lastRunAt: {
        serializedName: "lastRunAt",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      workflowRunStatus: {
        serializedName: "workflowRunStatus",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ArtifactGenerationProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ArtifactGenerationProperties",
    modelProperties: {
      generationLanguage: {
        serializedName: "generationLanguage",
        type: {
          name: "String",
        },
      },
      languageVersion: {
        serializedName: "languageVersion",
        type: {
          name: "String",
        },
      },
      builderVersion: {
        serializedName: "builderVersion",
        type: {
          name: "String",
        },
      },
      port: {
        serializedName: "port",
        type: {
          name: "String",
        },
      },
      appName: {
        serializedName: "appName",
        type: {
          name: "String",
        },
      },
      dockerfileOutputDirectory: {
        serializedName: "dockerfileOutputDirectory",
        type: {
          name: "String",
        },
      },
      manifestOutputDirectory: {
        serializedName: "manifestOutputDirectory",
        type: {
          name: "String",
        },
      },
      dockerfileGenerationMode: {
        serializedName: "dockerfileGenerationMode",
        type: {
          name: "String",
        },
      },
      manifestGenerationMode: {
        serializedName: "manifestGenerationMode",
        type: {
          name: "String",
        },
      },
      manifestType: {
        serializedName: "manifestType",
        type: {
          name: "String",
        },
      },
      imageName: {
        serializedName: "imageName",
        type: {
          name: "String",
        },
      },
      namespace: {
        serializedName: "namespace",
        type: {
          name: "String",
        },
      },
      imageTag: {
        serializedName: "imageTag",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AzurePipelineProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzurePipelineProfile",
    modelProperties: {
      repository: {
        serializedName: "repository",
        type: {
          name: "Composite",
          className: "ADORepository",
        },
      },
      armServiceConnection: {
        serializedName: "armServiceConnection",
        type: {
          name: "String",
        },
      },
      build: {
        serializedName: "build",
        type: {
          name: "Composite",
          className: "Build",
        },
      },
      deployment: {
        serializedName: "deployment",
        type: {
          name: "Composite",
          className: "Deployment",
        },
      },
      namespace: {
        serializedName: "namespace",
        type: {
          name: "String",
        },
      },
      acr: {
        serializedName: "acr",
        type: {
          name: "String",
        },
      },
      clusterId: {
        serializedName: "clusterId",
        type: {
          name: "String",
        },
      },
      pullRequest: {
        serializedName: "pullRequest",
        type: {
          name: "Composite",
          className: "PullRequest",
        },
      },
      lastWorkflowRun: {
        serializedName: "lastWorkflowRun",
        type: {
          name: "Composite",
          className: "WorkflowRun",
        },
      },
      authStatus: {
        serializedName: "authStatus",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ADORepository: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ADORepository",
    modelProperties: {
      repositoryOwner: {
        serializedName: "repositoryOwner",
        type: {
          name: "String",
        },
      },
      repositoryName: {
        serializedName: "repositoryName",
        type: {
          name: "String",
        },
      },
      branchName: {
        serializedName: "branchName",
        type: {
          name: "String",
        },
      },
      adoOrganization: {
        serializedName: "adoOrganization",
        type: {
          name: "String",
        },
      },
      projectName: {
        serializedName: "projectName",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Build: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Build",
    modelProperties: {
      dockerfile: {
        serializedName: "dockerfile",
        type: {
          name: "String",
        },
      },
      dockerBuildContext: {
        serializedName: "dockerBuildContext",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PullRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PullRequest",
    modelProperties: {
      prURL: {
        serializedName: "prURL",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      pullNumber: {
        serializedName: "pullNumber",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      prStatus: {
        serializedName: "prStatus",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const TemplateWorkflowProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TemplateWorkflowProfile",
    modelProperties: {
      repositoryProvider: {
        serializedName: "repositoryProvider",
        type: {
          name: "String",
        },
      },
      workflowTemplate: {
        serializedName: "workflowTemplate",
        type: {
          name: "Composite",
          className: "TemplateReference",
        },
      },
      deploymentTemplate: {
        serializedName: "deploymentTemplate",
        type: {
          name: "Composite",
          className: "TemplateReference",
        },
      },
      dockerfileTemplate: {
        serializedName: "dockerfileTemplate",
        type: {
          name: "Composite",
          className: "TemplateReference",
        },
      },
      manifestTemplates: {
        serializedName: "manifestTemplates",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TemplateReference",
            },
          },
        },
      },
      gitHubProviderProfile: {
        serializedName: "gitHubProviderProfile",
        type: {
          name: "Composite",
          className: "GitHubProviderProfile",
        },
      },
      adoProviderProfile: {
        serializedName: "adoProviderProfile",
        type: {
          name: "Composite",
          className: "ADOProviderProfile",
        },
      },
      pullRequest: {
        serializedName: "pullRequest",
        type: {
          name: "Composite",
          className: "PullRequest",
        },
      },
      lastWorkflowRun: {
        serializedName: "lastWorkflowRun",
        type: {
          name: "Composite",
          className: "WorkflowRun",
        },
      },
      authStatus: {
        serializedName: "authStatus",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const TemplateReference: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TemplateReference",
    modelProperties: {
      templateId: {
        serializedName: "templateId",
        type: {
          name: "String",
        },
      },
      destination: {
        serializedName: "destination",
        type: {
          name: "String",
        },
      },
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
    },
  },
};

export const GitHubProviderProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GitHubProviderProfile",
    modelProperties: {
      repository: {
        serializedName: "repository",
        type: {
          name: "Composite",
          className: "GitHubRepository",
        },
      },
      oidcCredentials: {
        serializedName: "oidcCredentials",
        type: {
          name: "Composite",
          className: "OidcCredentials",
        },
      },
    },
  },
};

export const GitHubRepository: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GitHubRepository",
    modelProperties: {
      repositoryOwner: {
        serializedName: "repositoryOwner",
        type: {
          name: "String",
        },
      },
      repositoryName: {
        serializedName: "repositoryName",
        type: {
          name: "String",
        },
      },
      branchName: {
        serializedName: "branchName",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OidcCredentials: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OidcCredentials",
    modelProperties: {
      azureClientId: {
        serializedName: "azureClientId",
        type: {
          name: "String",
        },
      },
      azureTenantId: {
        serializedName: "azureTenantId",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ADOProviderProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ADOProviderProfile",
    modelProperties: {
      repository: {
        serializedName: "repository",
        type: {
          name: "Composite",
          className: "ADORepository",
        },
      },
      armServiceConnection: {
        serializedName: "armServiceConnection",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const DeleteWorkflowResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeleteWorkflowResponse",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AdooAuthCallRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AdooAuthCallRequest",
    modelProperties: {
      redirectUrl: {
        serializedName: "redirectUrl",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AdooAuthInfoResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AdooAuthInfoResponse",
    modelProperties: {
      authURL: {
        serializedName: "authURL",
        type: {
          name: "String",
        },
      },
      token: {
        serializedName: "token",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AdooAuth: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AdooAuth",
    modelProperties: {
      username: {
        serializedName: "username",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AdooAuthListResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AdooAuthListResponse",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AdooAuthResponse",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const TemplateListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TemplateListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Template",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const TemplateProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TemplateProperties",
    modelProperties: {
      templateName: {
        serializedName: "templateName",
        type: {
          name: "String",
        },
      },
      defaultVersion: {
        serializedName: "defaultVersion",
        type: {
          name: "String",
        },
      },
      versions: {
        serializedName: "versions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      description: {
        serializedName: "description",
        type: {
          name: "String",
        },
      },
      templateType: {
        serializedName: "templateType",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const VersionedTemplateListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VersionedTemplateListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VersionedTemplate",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const VersionedTemplateProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VersionedTemplateProperties",
    modelProperties: {
      version: {
        serializedName: "version",
        type: {
          name: "String",
        },
      },
      templateType: {
        serializedName: "templateType",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Parameter",
            },
          },
        },
      },
    },
  },
};

export const Parameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Parameter",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "description",
        type: {
          name: "String",
        },
      },
      parameterType: {
        serializedName: "parameterType",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      parameterKind: {
        serializedName: "parameterKind",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      required: {
        serializedName: "required",
        type: {
          name: "Boolean",
        },
      },
      default: {
        serializedName: "default",
        type: {
          name: "Composite",
          className: "ParameterDefault",
        },
      },
    },
  },
};

export const ParameterDefault: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ParameterDefault",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "String",
        },
      },
      referenceParameter: {
        serializedName: "referenceParameter",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const GenerateVersionedTemplateResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GenerateVersionedTemplateResponse",
    modelProperties: {
      generatedFiles: {
        serializedName: "generatedFiles",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
    },
  },
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties,
    },
  },
};

export const IacProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IacProfile",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      stages: {
        serializedName: "properties.stages",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StageProperties",
            },
          },
        },
      },
      templates: {
        serializedName: "properties.templates",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IacTemplateProperties",
            },
          },
        },
      },
      storageAccountSubscription: {
        serializedName:
          "properties.terraformProfile.storageAccountSubscription",
        type: {
          name: "String",
        },
      },
      storageAccountResourceGroup: {
        serializedName:
          "properties.terraformProfile.storageAccountResourceGroup",
        type: {
          name: "String",
        },
      },
      storageAccountName: {
        serializedName: "properties.terraformProfile.storageAccountName",
        type: {
          name: "String",
        },
      },
      storageContainerName: {
        serializedName: "properties.terraformProfile.storageContainerName",
        type: {
          name: "String",
        },
      },
      repositoryName: {
        serializedName: "properties.githubProfile.repositoryName",
        type: {
          name: "String",
        },
      },
      repositoryMainBranch: {
        serializedName: "properties.githubProfile.repositoryMainBranch",
        type: {
          name: "String",
        },
      },
      repositoryOwner: {
        serializedName: "properties.githubProfile.repositoryOwner",
        type: {
          name: "String",
        },
      },
      authStatus: {
        serializedName: "properties.githubProfile.authStatus",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      pullNumber: {
        serializedName: "properties.githubProfile.pullNumber",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      prStatus: {
        serializedName: "properties.githubProfile.prStatus",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      branchName: {
        serializedName: "properties.githubProfile.branchName",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Workflow: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Workflow",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "WorkflowProperties",
        },
      },
    },
  },
};

export const GitHubOAuthResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GitHubOAuthResponse",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "GitHubOAuthProperties",
        },
      },
    },
  },
};

export const AdooAuthResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AdooAuthResponse",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "AdooAuth",
        },
      },
    },
  },
};

export const Template: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Template",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "TemplateProperties",
        },
      },
    },
  },
};

export const VersionedTemplate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VersionedTemplate",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "VersionedTemplateProperties",
        },
      },
    },
  },
};
