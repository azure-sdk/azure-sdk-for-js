/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { VersionedTemplateOperations } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { DeveloperHubServiceClient } from "../developerHubServiceClient.js";
import {
  VersionedTemplate,
  VersionedTemplateListNextOptionalParams,
  VersionedTemplateListOptionalParams,
  VersionedTemplateListResponse,
  VersionedTemplateGetOptionalParams,
  VersionedTemplateGetResponse,
  VersionedTemplateGenerateOptionalParams,
  VersionedTemplateGenerateResponse,
  VersionedTemplateListNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing VersionedTemplateOperations operations. */
export class VersionedTemplateOperationsImpl
  implements VersionedTemplateOperations
{
  private readonly client: DeveloperHubServiceClient;

  /**
   * Initialize a new instance of the class VersionedTemplateOperations class.
   * @param client Reference to the service client
   */
  constructor(client: DeveloperHubServiceClient) {
    this.client = client;
  }

  /**
   * Gets a list of VersionedTemplate.
   * @param templateName The name of the Template.
   * @param options The options parameters.
   */
  public list(
    templateName: string,
    options?: VersionedTemplateListOptionalParams,
  ): PagedAsyncIterableIterator<VersionedTemplate> {
    const iter = this.listPagingAll(templateName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(templateName, options, settings);
      },
    };
  }

  private async *listPagingPage(
    templateName: string,
    options?: VersionedTemplateListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<VersionedTemplate[]> {
    let result: VersionedTemplateListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(templateName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(templateName, continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    templateName: string,
    options?: VersionedTemplateListOptionalParams,
  ): AsyncIterableIterator<VersionedTemplate> {
    for await (const page of this.listPagingPage(templateName, options)) {
      yield* page;
    }
  }

  /**
   * Gets a list of VersionedTemplate.
   * @param templateName The name of the Template.
   * @param options The options parameters.
   */
  private _list(
    templateName: string,
    options?: VersionedTemplateListOptionalParams,
  ): Promise<VersionedTemplateListResponse> {
    return this.client.sendOperationRequest(
      { templateName, options },
      listOperationSpec,
    );
  }

  /**
   * Gets a VersionedTemplate.
   * @param templateName The name of the Template.
   * @param templateVersion The template version.
   * @param options The options parameters.
   */
  get(
    templateName: string,
    templateVersion: string,
    options?: VersionedTemplateGetOptionalParams,
  ): Promise<VersionedTemplateGetResponse> {
    return this.client.sendOperationRequest(
      { templateName, templateVersion, options },
      getOperationSpec,
    );
  }

  /**
   * Generates a VersionedTemplate.
   * @param templateName The name of the Template.
   * @param templateVersion The template version.
   * @param parameters Generated template parameter input as a map<string,string>
   * @param options The options parameters.
   */
  generate(
    templateName: string,
    templateVersion: string,
    parameters: { [propertyName: string]: string },
    options?: VersionedTemplateGenerateOptionalParams,
  ): Promise<VersionedTemplateGenerateResponse> {
    return this.client.sendOperationRequest(
      { templateName, templateVersion, parameters, options },
      generateOperationSpec,
    );
  }

  /**
   * ListNext
   * @param templateName The name of the Template.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    templateName: string,
    nextLink: string,
    options?: VersionedTemplateListNextOptionalParams,
  ): Promise<VersionedTemplateListNextResponse> {
    return this.client.sendOperationRequest(
      { templateName, nextLink, options },
      listNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.DevHub/templates/{templateName}/versions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VersionedTemplateListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.templateName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.DevHub/templates/{templateName}/versions/{templateVersion}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VersionedTemplate,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.templateName,
    Parameters.templateVersion,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const generateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.DevHub/templates/{templateName}/versions/{templateVersion}/generate",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.GenerateVersionedTemplateResponse,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.parameters8,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.templateName,
    Parameters.templateVersion,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VersionedTemplateListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.templateName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
