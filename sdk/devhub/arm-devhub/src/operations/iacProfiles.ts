/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { IacProfiles } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { DeveloperHubServiceClient } from "../developerHubServiceClient.js";
import {
  IacProfile,
  IacProfilesListNextOptionalParams,
  IacProfilesListOptionalParams,
  IacProfilesListResponse,
  IacProfilesListByResourceGroupNextOptionalParams,
  IacProfilesListByResourceGroupOptionalParams,
  IacProfilesListByResourceGroupResponse,
  IacProfilesGetOptionalParams,
  IacProfilesGetResponse,
  IacProfilesCreateOrUpdateOptionalParams,
  IacProfilesCreateOrUpdateResponse,
  IacProfilesDeleteOptionalParams,
  TagsObject,
  IacProfilesUpdateTagsOptionalParams,
  IacProfilesUpdateTagsResponse,
  ExportTemplateRequest,
  IacProfilesExportOptionalParams,
  IacProfilesExportResponse,
  ScaleTemplateRequest,
  IacProfilesScaleOptionalParams,
  IacProfilesScaleResponse,
  IacProfilesSyncOptionalParams,
  IacProfilesListNextResponse,
  IacProfilesListByResourceGroupNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing IacProfiles operations. */
export class IacProfilesImpl implements IacProfiles {
  private readonly client: DeveloperHubServiceClient;

  /**
   * Initialize a new instance of the class IacProfiles class.
   * @param client Reference to the service client
   */
  constructor(client: DeveloperHubServiceClient) {
    this.client = client;
  }

  /**
   * Gets a list of IacProfiles associated with the specified subscription.
   * @param options The options parameters.
   */
  public list(
    options?: IacProfilesListOptionalParams,
  ): PagedAsyncIterableIterator<IacProfile> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(options, settings);
      },
    };
  }

  private async *listPagingPage(
    options?: IacProfilesListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<IacProfile[]> {
    let result: IacProfilesListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    options?: IacProfilesListOptionalParams,
  ): AsyncIterableIterator<IacProfile> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Gets a list of iacProfiles within a resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: IacProfilesListByResourceGroupOptionalParams,
  ): PagedAsyncIterableIterator<IacProfile> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByResourceGroupPagingPage(
          resourceGroupName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: IacProfilesListByResourceGroupOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<IacProfile[]> {
    let result: IacProfilesListByResourceGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByResourceGroup(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: IacProfilesListByResourceGroupOptionalParams,
  ): AsyncIterableIterator<IacProfile> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Gets a list of IacProfiles associated with the specified subscription.
   * @param options The options parameters.
   */
  private _list(
    options?: IacProfilesListOptionalParams,
  ): Promise<IacProfilesListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * Gets a list of iacProfiles within a resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: IacProfilesListByResourceGroupOptionalParams,
  ): Promise<IacProfilesListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec,
    );
  }

  /**
   * Gets a IacProfile.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param iacProfileName The name of the IacProfile.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    iacProfileName: string,
    options?: IacProfilesGetOptionalParams,
  ): Promise<IacProfilesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, iacProfileName, options },
      getOperationSpec,
    );
  }

  /**
   * Creates or updates a IacProfile
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param iacProfileName The name of the IacProfile.
   * @param parameters Resource representation of a IacProfile.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    iacProfileName: string,
    parameters: IacProfile,
    options?: IacProfilesCreateOrUpdateOptionalParams,
  ): Promise<IacProfilesCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, iacProfileName, parameters, options },
      createOrUpdateOperationSpec,
    );
  }

  /**
   * Deletes a IacProfile
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param iacProfileName The name of the IacProfile.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    iacProfileName: string,
    options?: IacProfilesDeleteOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, iacProfileName, options },
      deleteOperationSpec,
    );
  }

  /**
   * Updates tags on a IacProfile.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param iacProfileName The name of the IacProfile.
   * @param parameters Parameters supplied to the Update TagsObject Tags operation.
   * @param options The options parameters.
   */
  updateTags(
    resourceGroupName: string,
    iacProfileName: string,
    parameters: TagsObject,
    options?: IacProfilesUpdateTagsOptionalParams,
  ): Promise<IacProfilesUpdateTagsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, iacProfileName, parameters, options },
      updateTagsOperationSpec,
    );
  }

  /**
   * Export a template
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param iacProfileName The name of the IacProfile.
   * @param parameters
   * @param options The options parameters.
   */
  export(
    resourceGroupName: string,
    iacProfileName: string,
    parameters: ExportTemplateRequest,
    options?: IacProfilesExportOptionalParams,
  ): Promise<IacProfilesExportResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, iacProfileName, parameters, options },
      exportOperationSpec,
    );
  }

  /**
   * Scale by template
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param iacProfileName The name of the IacProfile.
   * @param parameters
   * @param options The options parameters.
   */
  scale(
    resourceGroupName: string,
    iacProfileName: string,
    parameters: ScaleTemplateRequest,
    options?: IacProfilesScaleOptionalParams,
  ): Promise<IacProfilesScaleResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, iacProfileName, parameters, options },
      scaleOperationSpec,
    );
  }

  /**
   * Sync template
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param iacProfileName The name of the IacProfile.
   * @param options The options parameters.
   */
  sync(
    resourceGroupName: string,
    iacProfileName: string,
    options?: IacProfilesSyncOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, iacProfileName, options },
      syncOperationSpec,
    );
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    nextLink: string,
    options?: IacProfilesListNextOptionalParams,
  ): Promise<IacProfilesListNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextOperationSpec,
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: IacProfilesListByResourceGroupNextOptionalParams,
  ): Promise<IacProfilesListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.DevHub/iacProfiles",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IacProfileListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevHub/iacProfiles",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IacProfileListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevHub/iacProfiles/{iacProfileName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IacProfile,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.iacProfileName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevHub/iacProfiles/{iacProfileName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.IacProfile,
    },
    201: {
      bodyMapper: Mappers.IacProfile,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.parameters5,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.iacProfileName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevHub/iacProfiles/{iacProfileName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.iacProfileName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const updateTagsOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevHub/iacProfiles/{iacProfileName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.IacProfile,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.parameters4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.iacProfileName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const exportOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevHub/iacProfiles/{iacProfileName}/export",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.PrLinkResponse,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.parameters6,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.iacProfileName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const scaleOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevHub/iacProfiles/{iacProfileName}/scale",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.PrLinkResponse,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.parameters7,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.iacProfileName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const syncOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevHub/iacProfiles/{iacProfileName}/sync",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.iacProfileName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IacProfileListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IacProfileListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
