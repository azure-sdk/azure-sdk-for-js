/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { Generate } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { ViManagementClient } from "../viManagementClient.js";
import {
  PermissionType,
  Scope,
  GenerateAccessTokenOptionalParams,
  GenerateAccessTokenResponse,
  GenerateRestrictedViewerAccessTokenOptionalParams,
  GenerateRestrictedViewerAccessTokenResponse,
  GenerateExtensionAccessTokenOptionalParams,
  GenerateExtensionAccessTokenResponse,
  GenerateExtensionRestrictedViewerAccessTokenOptionalParams,
  GenerateExtensionRestrictedViewerAccessTokenResponse,
} from "../models/index.js";

/** Class containing Generate operations. */
export class GenerateImpl implements Generate {
  private readonly client: ViManagementClient;

  /**
   * Initialize a new instance of the class Generate class.
   * @param client Reference to the service client
   */
  constructor(client: ViManagementClient) {
    this.client = client;
  }

  /**
   * Generate an Azure Video Indexer access token.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the Azure Video Indexer account.
   * @param permissionType The requested permission
   * @param scope The requested media type
   * @param options The options parameters.
   */
  accessToken(
    resourceGroupName: string,
    accountName: string,
    permissionType: PermissionType,
    scope: Scope,
    options?: GenerateAccessTokenOptionalParams,
  ): Promise<GenerateAccessTokenResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, permissionType, scope, options },
      accessTokenOperationSpec,
    );
  }

  /**
   * Generate an Azure Video Indexer restricted viewer access token.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the Azure Video Indexer account.
   * @param scope The requested media type
   * @param options The options parameters.
   */
  restrictedViewerAccessToken(
    resourceGroupName: string,
    accountName: string,
    scope: Scope,
    options?: GenerateRestrictedViewerAccessTokenOptionalParams,
  ): Promise<GenerateRestrictedViewerAccessTokenResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, scope, options },
      restrictedViewerAccessTokenOperationSpec,
    );
  }

  /**
   * Generate an Azure Video Indexer access token.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the Azure Video Indexer account.
   * @param permissionType The requested permission
   * @param scope The requested media type
   * @param extensionId The extension's resource ID
   * @param options The options parameters.
   */
  extensionAccessToken(
    resourceGroupName: string,
    accountName: string,
    permissionType: PermissionType,
    scope: Scope,
    extensionId: string,
    options?: GenerateExtensionAccessTokenOptionalParams,
  ): Promise<GenerateExtensionAccessTokenResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        permissionType,
        scope,
        extensionId,
        options,
      },
      extensionAccessTokenOperationSpec,
    );
  }

  /**
   * Generate an Azure Video Indexer restricted viewer access token.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the Azure Video Indexer account.
   * @param scope The requested media type
   * @param extensionId The extension's resource ID
   * @param options The options parameters.
   */
  extensionRestrictedViewerAccessToken(
    resourceGroupName: string,
    accountName: string,
    scope: Scope,
    extensionId: string,
    options?: GenerateExtensionRestrictedViewerAccessTokenOptionalParams,
  ): Promise<GenerateExtensionRestrictedViewerAccessTokenResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, scope, extensionId, options },
      extensionRestrictedViewerAccessTokenOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const accessTokenOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VideoIndexer/accounts/{accountName}/generateAccessToken",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AccessToken,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: {
    parameterPath: {
      permissionType: ["permissionType"],
      scope: ["scope"],
      videoId: ["options", "videoId"],
      projectId: ["options", "projectId"],
    },
    mapper: { ...Mappers.GenerateAccessTokenParameters, required: true },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const restrictedViewerAccessTokenOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VideoIndexer/accounts/{accountName}/generateRestrictedViewerAccessToken",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AccessToken,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: {
    parameterPath: {
      scope: ["scope"],
      videoId: ["options", "videoId"],
      projectId: ["options", "projectId"],
    },
    mapper: {
      ...Mappers.GenerateRestrictedViewerAccessTokenParameters,
      required: true,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const extensionAccessTokenOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VideoIndexer/accounts/{accountName}/generateExtensionAccessToken",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AccessToken,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: {
    parameterPath: {
      permissionType: ["permissionType"],
      scope: ["scope"],
      extensionId: ["extensionId"],
      videoId: ["options", "videoId"],
      tokenLifetimeInSeconds: ["options", "tokenLifetimeInSeconds"],
    },
    mapper: {
      ...Mappers.GenerateExtensionAccessTokenParameters,
      required: true,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const extensionRestrictedViewerAccessTokenOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VideoIndexer/accounts/{accountName}/generateExtensionRestrictedViewerAccessToken",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AccessToken,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: {
    parameterPath: {
      scope: ["scope"],
      extensionId: ["extensionId"],
      videoId: ["options", "videoId"],
      tokenLifetimeInSeconds: ["options", "tokenLifetimeInSeconds"],
    },
    mapper: {
      ...Mappers.GenerateExtensionRestrictedViewerAccessTokenParameters,
      required: true,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
