/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter,
} from "@azure/core-client";
import {
  AccountCheckNameAvailabilityParameters as AccountCheckNameAvailabilityParametersMapper,
  AccountPatch as AccountPatchMapper,
  Account as AccountMapper,
  GenerateAccessTokenParameters as GenerateAccessTokenParametersMapper,
  GenerateRestrictedViewerAccessTokenParameters as GenerateRestrictedViewerAccessTokenParametersMapper,
  GenerateExtensionAccessTokenParameters as GenerateExtensionAccessTokenParametersMapper,
  GenerateExtensionRestrictedViewerAccessTokenParameters as GenerateExtensionRestrictedViewerAccessTokenParametersMapper,
  PrivateEndpointConnection as PrivateEndpointConnectionMapper,
} from "../models/mappers.js";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String",
    },
  },
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2025-04-01",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String",
    },
  },
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String",
    },
  },
};

export const checkNameAvailabilityParameters: OperationParameter = {
  parameterPath: "checkNameAvailabilityParameters",
  mapper: AccountCheckNameAvailabilityParametersMapper,
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    constraints: {
      MinLength: 1,
    },
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    constraints: {
      MaxLength: 90,
      MinLength: 1,
    },
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const accountName: OperationURLParameter = {
  parameterPath: "accountName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[A-Za-z0-9-]+$"),
      MaxLength: 50,
      MinLength: 3,
    },
    serializedName: "accountName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const parameters: OperationParameter = {
  parameterPath: ["options", "parameters"],
  mapper: AccountPatchMapper,
};

export const parameters1: OperationParameter = {
  parameterPath: ["options", "parameters"],
  mapper: AccountMapper,
};

export const permissionType: OperationParameter = {
  parameterPath: "permissionType",
  mapper: GenerateAccessTokenParametersMapper,
};

export const scope: OperationParameter = {
  parameterPath: "scope",
  mapper: GenerateAccessTokenParametersMapper,
};

export const videoId: OperationParameter = {
  parameterPath: ["options", "videoId"],
  mapper: GenerateAccessTokenParametersMapper,
};

export const projectId: OperationParameter = {
  parameterPath: ["options", "projectId"],
  mapper: GenerateAccessTokenParametersMapper,
};

export const scope1: OperationParameter = {
  parameterPath: "scope",
  mapper: GenerateRestrictedViewerAccessTokenParametersMapper,
};

export const videoId1: OperationParameter = {
  parameterPath: ["options", "videoId"],
  mapper: GenerateRestrictedViewerAccessTokenParametersMapper,
};

export const projectId1: OperationParameter = {
  parameterPath: ["options", "projectId"],
  mapper: GenerateRestrictedViewerAccessTokenParametersMapper,
};

export const permissionType1: OperationParameter = {
  parameterPath: "permissionType",
  mapper: GenerateExtensionAccessTokenParametersMapper,
};

export const scope2: OperationParameter = {
  parameterPath: "scope",
  mapper: GenerateExtensionAccessTokenParametersMapper,
};

export const extensionId: OperationParameter = {
  parameterPath: "extensionId",
  mapper: GenerateExtensionAccessTokenParametersMapper,
};

export const videoId2: OperationParameter = {
  parameterPath: ["options", "videoId"],
  mapper: GenerateExtensionAccessTokenParametersMapper,
};

export const tokenLifetimeInSeconds: OperationParameter = {
  parameterPath: ["options", "tokenLifetimeInSeconds"],
  mapper: GenerateExtensionAccessTokenParametersMapper,
};

export const scope3: OperationParameter = {
  parameterPath: "scope",
  mapper: GenerateExtensionRestrictedViewerAccessTokenParametersMapper,
};

export const extensionId1: OperationParameter = {
  parameterPath: "extensionId",
  mapper: GenerateExtensionRestrictedViewerAccessTokenParametersMapper,
};

export const videoId3: OperationParameter = {
  parameterPath: ["options", "videoId"],
  mapper: GenerateExtensionRestrictedViewerAccessTokenParametersMapper,
};

export const tokenLifetimeInSeconds1: OperationParameter = {
  parameterPath: ["options", "tokenLifetimeInSeconds"],
  mapper: GenerateExtensionRestrictedViewerAccessTokenParametersMapper,
};

export const privateEndpointConnectionName: OperationURLParameter = {
  parameterPath: "privateEndpointConnectionName",
  mapper: {
    serializedName: "privateEndpointConnectionName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const body: OperationParameter = {
  parameterPath: "body",
  mapper: PrivateEndpointConnectionMapper,
};

export const groupId: OperationURLParameter = {
  parameterPath: "groupId",
  mapper: {
    serializedName: "groupId",
    required: true,
    type: {
      name: "String",
    },
  },
};
