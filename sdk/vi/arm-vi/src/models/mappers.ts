/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      isDataAction: {
        serializedName: "isDataAction",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      actionType: {
        serializedName: "actionType",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay",
        },
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDefinition",
        },
      },
    },
  },
};

export const ErrorDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDefinition",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDefinition",
            },
          },
        },
      },
    },
  },
};

export const AccountCheckNameAvailabilityParameters: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "AccountCheckNameAvailabilityParameters",
      modelProperties: {
        name: {
          serializedName: "name",
          required: true,
          type: {
            name: "String",
          },
        },
        type: {
          serializedName: "type",
          required: true,
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const CheckNameAvailabilityResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityResult",
    modelProperties: {
      nameAvailable: {
        serializedName: "nameAvailable",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      reason: {
        serializedName: "reason",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AccountList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccountList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Account",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const StorageServicesForPutRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageServicesForPutRequest",
    modelProperties: {
      resourceId: {
        serializedName: "resourceId",
        type: {
          name: "String",
        },
      },
      userAssignedIdentity: {
        serializedName: "userAssignedIdentity",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OpenAiServicesForPutRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OpenAiServicesForPutRequest",
    modelProperties: {
      resourceId: {
        serializedName: "resourceId",
        type: {
          name: "String",
        },
      },
      userAssignedIdentity: {
        serializedName: "userAssignedIdentity",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PrivateEndpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpoint",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PrivateLinkServiceConnectionState: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkServiceConnectionState",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "description",
        type: {
          name: "String",
        },
      },
      actionsRequired: {
        serializedName: "actionsRequired",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData",
        },
      },
    },
  },
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String",
        },
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String",
        },
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime",
        },
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String",
        },
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String",
        },
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const ManagedServiceIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedServiceIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "Uuid",
        },
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "Uuid",
        },
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String",
        },
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "UserAssignedIdentity" },
          },
        },
      },
    },
  },
};

export const UserAssignedIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserAssignedIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "Uuid",
        },
      },
      clientId: {
        serializedName: "clientId",
        readOnly: true,
        type: {
          name: "Uuid",
        },
      },
    },
  },
};

export const ResourceAutoGenerated: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceAutoGenerated",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const StorageServicesForPatchRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageServicesForPatchRequest",
    modelProperties: {
      userAssignedIdentity: {
        serializedName: "userAssignedIdentity",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OpenAiServicesForPatchRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OpenAiServicesForPatchRequest",
    modelProperties: {
      resourceId: {
        serializedName: "resourceId",
        type: {
          name: "String",
        },
      },
      userAssignedIdentity: {
        serializedName: "userAssignedIdentity",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Tags: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Tags",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
    },
  },
};

export const GenerateAccessTokenParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GenerateAccessTokenParameters",
    modelProperties: {
      permissionType: {
        serializedName: "permissionType",
        required: true,
        type: {
          name: "String",
        },
      },
      scope: {
        serializedName: "scope",
        required: true,
        type: {
          name: "String",
        },
      },
      videoId: {
        serializedName: "videoId",
        type: {
          name: "String",
        },
      },
      projectId: {
        serializedName: "projectId",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AccessToken: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccessToken",
    modelProperties: {
      accessToken: {
        serializedName: "accessToken",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const GenerateRestrictedViewerAccessTokenParameters: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "GenerateRestrictedViewerAccessTokenParameters",
      modelProperties: {
        scope: {
          serializedName: "scope",
          required: true,
          type: {
            name: "String",
          },
        },
        videoId: {
          serializedName: "videoId",
          type: {
            name: "String",
          },
        },
        projectId: {
          serializedName: "projectId",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const GenerateExtensionAccessTokenParameters: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "GenerateExtensionAccessTokenParameters",
      modelProperties: {
        permissionType: {
          serializedName: "permissionType",
          required: true,
          type: {
            name: "String",
          },
        },
        scope: {
          serializedName: "scope",
          required: true,
          type: {
            name: "String",
          },
        },
        extensionId: {
          serializedName: "extensionId",
          required: true,
          type: {
            name: "String",
          },
        },
        videoId: {
          serializedName: "videoId",
          type: {
            name: "String",
          },
        },
        tokenLifetimeInSeconds: {
          serializedName: "tokenLifetimeInSeconds",
          type: {
            name: "Number",
          },
        },
      },
    },
  };

export const ErrorResponseAutoGenerated: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponseAutoGenerated",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail",
        },
      },
    },
  },
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail",
            },
          },
        },
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo",
            },
          },
        },
      },
    },
  },
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } },
        },
      },
    },
  },
};

export const GenerateExtensionRestrictedViewerAccessTokenParameters: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "GenerateExtensionRestrictedViewerAccessTokenParameters",
      modelProperties: {
        scope: {
          serializedName: "scope",
          required: true,
          type: {
            name: "String",
          },
        },
        extensionId: {
          serializedName: "extensionId",
          required: true,
          type: {
            name: "String",
          },
        },
        videoId: {
          serializedName: "videoId",
          type: {
            name: "String",
          },
        },
        tokenLifetimeInSeconds: {
          serializedName: "tokenLifetimeInSeconds",
          type: {
            name: "Number",
          },
        },
      },
    },
  };

export const PrivateEndpointConnectionListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ErrorResponseAutoGenerated2: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponseAutoGenerated2",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetailAutoGenerated",
        },
      },
    },
  },
};

export const ErrorDetailAutoGenerated: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetailAutoGenerated",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetailAutoGenerated",
            },
          },
        },
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo",
            },
          },
        },
      },
    },
  },
};

export const PrivateLinkResourceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateLinkResource",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PrivateEndpointConnection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnection",
    modelProperties: {
      ...Resource.type.modelProperties,
      groupIds: {
        serializedName: "properties.groupIds",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      privateEndpoint: {
        serializedName: "properties.privateEndpoint",
        type: {
          name: "Composite",
          className: "PrivateEndpoint",
        },
      },
      privateLinkServiceConnectionState: {
        serializedName: "properties.privateLinkServiceConnectionState",
        type: {
          name: "Composite",
          className: "PrivateLinkServiceConnectionState",
        },
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PrivateLinkResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      groupId: {
        serializedName: "properties.groupId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      requiredMembers: {
        serializedName: "properties.requiredMembers",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      requiredZoneNames: {
        serializedName: "properties.requiredZoneNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...ResourceAutoGenerated.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AccountPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccountPatch",
    modelProperties: {
      ...Tags.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity",
        },
      },
      tenantId: {
        serializedName: "properties.tenantId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      accountId: {
        serializedName: "properties.accountId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      storageServices: {
        serializedName: "properties.storageServices",
        type: {
          name: "Composite",
          className: "StorageServicesForPatchRequest",
        },
      },
      openAiServices: {
        serializedName: "properties.openAiServices",
        type: {
          name: "Composite",
          className: "OpenAiServicesForPatchRequest",
        },
      },
      publicNetworkAccess: {
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "String",
        },
      },
      privateEndpointConnections: {
        serializedName: "properties.privateEndpointConnections",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection",
            },
          },
        },
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Account: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Account",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity",
        },
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData",
        },
      },
      tenantId: {
        serializedName: "properties.tenantId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      accountId: {
        defaultValue: "00000000-0000-0000-0000-000000000000",
        serializedName: "properties.accountId",
        type: {
          name: "String",
        },
      },
      accountName: {
        serializedName: "properties.accountName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      storageServices: {
        serializedName: "properties.storageServices",
        type: {
          name: "Composite",
          className: "StorageServicesForPutRequest",
        },
      },
      openAiServices: {
        serializedName: "properties.openAiServices",
        type: {
          name: "Composite",
          className: "OpenAiServicesForPutRequest",
        },
      },
      totalSecondsIndexed: {
        serializedName: "properties.totalSecondsIndexed",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      totalMinutesIndexed: {
        serializedName: "properties.totalMinutesIndexed",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      publicNetworkAccess: {
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "String",
        },
      },
      privateEndpointConnections: {
        serializedName: "properties.privateEndpointConnections",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection",
            },
          },
        },
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PrivateEndpointConnectionsDeleteHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "PrivateEndpointConnectionsDeleteHeaders",
      modelProperties: {
        retryAfter: {
          serializedName: "retry-after",
          type: {
            name: "Number",
          },
        },
        location: {
          serializedName: "location",
          type: {
            name: "String",
          },
        },
      },
    },
  };
