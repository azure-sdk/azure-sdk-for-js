/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      isDataAction: {
        serializedName: "isDataAction",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay",
        },
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      actionType: {
        serializedName: "actionType",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail",
        },
      },
    },
  },
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail",
            },
          },
        },
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo",
            },
          },
        },
      },
    },
  },
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } },
        },
      },
    },
  },
};

export const WatcherListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WatcherListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Watcher",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Datastore: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Datastore",
    modelProperties: {
      adxClusterResourceId: {
        serializedName: "adxClusterResourceId",
        type: {
          name: "String",
        },
      },
      kustoClusterDisplayName: {
        serializedName: "kustoClusterDisplayName",
        type: {
          name: "String",
        },
      },
      kustoClusterUri: {
        serializedName: "kustoClusterUri",
        required: true,
        type: {
          name: "String",
        },
      },
      kustoDataIngestionUri: {
        serializedName: "kustoDataIngestionUri",
        required: true,
        type: {
          name: "String",
        },
      },
      kustoDatabaseName: {
        serializedName: "kustoDatabaseName",
        required: true,
        type: {
          name: "String",
        },
      },
      kustoManagementUrl: {
        serializedName: "kustoManagementUrl",
        required: true,
        type: {
          name: "String",
        },
      },
      kustoOfferingType: {
        serializedName: "kustoOfferingType",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ManagedServiceIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedServiceIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "Uuid",
        },
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "Uuid",
        },
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String",
        },
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "UserAssignedIdentity" },
          },
        },
      },
    },
  },
};

export const UserAssignedIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserAssignedIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "Uuid",
        },
      },
      clientId: {
        serializedName: "clientId",
        readOnly: true,
        type: {
          name: "Uuid",
        },
      },
    },
  },
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData",
        },
      },
    },
  },
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String",
        },
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String",
        },
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime",
        },
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String",
        },
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String",
        },
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const WatcherUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WatcherUpdate",
    modelProperties: {
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity",
        },
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      datastore: {
        serializedName: "properties.datastore",
        type: {
          name: "Composite",
          className: "DatastoreUpdate",
        },
      },
      defaultAlertRuleIdentityResourceId: {
        serializedName: "properties.defaultAlertRuleIdentityResourceId",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const DatastoreUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatastoreUpdate",
    modelProperties: {
      adxClusterResourceId: {
        serializedName: "adxClusterResourceId",
        type: {
          name: "String",
        },
      },
      kustoClusterDisplayName: {
        serializedName: "kustoClusterDisplayName",
        type: {
          name: "String",
        },
      },
      kustoClusterUri: {
        serializedName: "kustoClusterUri",
        type: {
          name: "String",
        },
      },
      kustoDataIngestionUri: {
        serializedName: "kustoDataIngestionUri",
        type: {
          name: "String",
        },
      },
      kustoDatabaseName: {
        serializedName: "kustoDatabaseName",
        type: {
          name: "String",
        },
      },
      kustoManagementUrl: {
        serializedName: "kustoManagementUrl",
        type: {
          name: "String",
        },
      },
      kustoOfferingType: {
        serializedName: "kustoOfferingType",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AlertRuleResourceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AlertRuleResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AlertRuleResource",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const HealthValidationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HealthValidationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HealthValidation",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ValidationIssue: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ValidationIssue",
    modelProperties: {
      errorCode: {
        serializedName: "errorCode",
        required: true,
        readOnly: true,
        type: {
          name: "String",
        },
      },
      errorMessage: {
        serializedName: "errorMessage",
        required: true,
        readOnly: true,
        type: {
          name: "String",
        },
      },
      additionalDetails: {
        serializedName: "additionalDetails",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      recommendationMessage: {
        serializedName: "recommendationMessage",
        required: true,
        readOnly: true,
        type: {
          name: "String",
        },
      },
      recommendationUrl: {
        serializedName: "recommendationUrl",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      relatedResourceId: {
        serializedName: "relatedResourceId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      relatedResourceType: {
        serializedName: "relatedResourceType",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SharedPrivateLinkResourceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SharedPrivateLinkResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SharedPrivateLinkResource",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const TargetListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TargetListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Target",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const TargetProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TargetProperties",
    uberParent: "TargetProperties",
    polymorphicDiscriminator: {
      serializedName: "targetType",
      clientName: "targetType",
    },
    modelProperties: {
      targetType: {
        serializedName: "targetType",
        required: true,
        type: {
          name: "String",
        },
      },
      targetAuthenticationType: {
        serializedName: "targetAuthenticationType",
        required: true,
        type: {
          name: "String",
        },
      },
      targetVault: {
        serializedName: "targetVault",
        type: {
          name: "Composite",
          className: "VaultSecret",
        },
      },
      connectionServerName: {
        constraints: {
          MaxLength: 200,
        },
        serializedName: "connectionServerName",
        required: true,
        type: {
          name: "String",
        },
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const VaultSecret: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VaultSecret",
    modelProperties: {
      akvResourceId: {
        serializedName: "akvResourceId",
        type: {
          name: "String",
        },
      },
      akvTargetUser: {
        constraints: {
          Pattern: new RegExp("^[a-zA-Z0-9-]{1,127}$"),
        },
        serializedName: "akvTargetUser",
        type: {
          name: "String",
        },
      },
      akvTargetPassword: {
        constraints: {
          Pattern: new RegExp("^[a-zA-Z0-9-]{1,127}$"),
        },
        serializedName: "akvTargetPassword",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties,
    },
  },
};

export const SqlDbElasticPoolTargetProperties: coreClient.CompositeMapper = {
  serializedName: "SqlEp",
  type: {
    name: "Composite",
    className: "SqlDbElasticPoolTargetProperties",
    uberParent: "TargetProperties",
    polymorphicDiscriminator: TargetProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...TargetProperties.type.modelProperties,
      sqlEpResourceId: {
        serializedName: "sqlEpResourceId",
        required: true,
        type: {
          name: "String",
        },
      },
      anchorDatabaseResourceId: {
        serializedName: "anchorDatabaseResourceId",
        required: true,
        type: {
          name: "String",
        },
      },
      readIntent: {
        defaultValue: false,
        serializedName: "readIntent",
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const SqlDbSingleDatabaseTargetProperties: coreClient.CompositeMapper = {
  serializedName: "SqlDb",
  type: {
    name: "Composite",
    className: "SqlDbSingleDatabaseTargetProperties",
    uberParent: "TargetProperties",
    polymorphicDiscriminator: TargetProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...TargetProperties.type.modelProperties,
      sqlDbResourceId: {
        serializedName: "sqlDbResourceId",
        required: true,
        type: {
          name: "String",
        },
      },
      readIntent: {
        defaultValue: false,
        serializedName: "readIntent",
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const SqlMiTargetProperties: coreClient.CompositeMapper = {
  serializedName: "SqlMi",
  type: {
    name: "Composite",
    className: "SqlMiTargetProperties",
    uberParent: "TargetProperties",
    polymorphicDiscriminator: TargetProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...TargetProperties.type.modelProperties,
      sqlMiResourceId: {
        serializedName: "sqlMiResourceId",
        required: true,
        type: {
          name: "String",
        },
      },
      connectionTcpPort: {
        defaultValue: 1433,
        serializedName: "connectionTcpPort",
        type: {
          name: "Number",
        },
      },
      readIntent: {
        defaultValue: false,
        serializedName: "readIntent",
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const SqlVmTargetProperties: coreClient.CompositeMapper = {
  serializedName: "SqlVm",
  type: {
    name: "Composite",
    className: "SqlVmTargetProperties",
    uberParent: "TargetProperties",
    polymorphicDiscriminator: TargetProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...TargetProperties.type.modelProperties,
      sqlVmResourceId: {
        serializedName: "sqlVmResourceId",
        required: true,
        type: {
          name: "String",
        },
      },
      connectionTcpPort: {
        defaultValue: 1433,
        serializedName: "connectionTcpPort",
        type: {
          name: "Number",
        },
      },
      sqlNamedInstanceName: {
        serializedName: "sqlNamedInstanceName",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Watcher: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Watcher",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity",
        },
      },
      datastore: {
        serializedName: "properties.datastore",
        type: {
          name: "Composite",
          className: "Datastore",
        },
      },
      status: {
        serializedName: "properties.status",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      defaultAlertRuleIdentityResourceId: {
        serializedName: "properties.defaultAlertRuleIdentityResourceId",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AlertRuleResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AlertRuleResource",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      alertRuleResourceId: {
        serializedName: "properties.alertRuleResourceId",
        type: {
          name: "String",
        },
      },
      createdWithProperties: {
        serializedName: "properties.createdWithProperties",
        type: {
          name: "String",
        },
      },
      creationTime: {
        serializedName: "properties.creationTime",
        type: {
          name: "DateTime",
        },
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      alertRuleTemplateId: {
        serializedName: "properties.alertRuleTemplateId",
        type: {
          name: "String",
        },
      },
      alertRuleTemplateVersion: {
        serializedName: "properties.alertRuleTemplateVersion",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const HealthValidation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HealthValidation",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      startTime: {
        serializedName: "properties.startTime",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      endTime: {
        serializedName: "properties.endTime",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      status: {
        serializedName: "properties.status",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      issues: {
        serializedName: "properties.issues",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ValidationIssue",
            },
          },
        },
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SharedPrivateLinkResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SharedPrivateLinkResource",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      privateLinkResourceId: {
        serializedName: "properties.privateLinkResourceId",
        type: {
          name: "String",
        },
      },
      groupId: {
        serializedName: "properties.groupId",
        type: {
          name: "String",
        },
      },
      requestMessage: {
        serializedName: "properties.requestMessage",
        type: {
          name: "String",
        },
      },
      dnsZone: {
        serializedName: "properties.dnsZone",
        type: {
          name: "String",
        },
      },
      status: {
        serializedName: "properties.status",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Target: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Target",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      targetType: {
        serializedName: "properties.targetType",
        type: {
          name: "String",
        },
      },
      targetAuthenticationType: {
        serializedName: "properties.targetAuthenticationType",
        type: {
          name: "String",
        },
      },
      targetVault: {
        serializedName: "properties.targetVault",
        type: {
          name: "Composite",
          className: "VaultSecret",
        },
      },
      connectionServerName: {
        constraints: {
          MaxLength: 200,
        },
        serializedName: "properties.connectionServerName",
        type: {
          name: "String",
        },
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const WatchersCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WatchersCreateOrUpdateHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const WatchersUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WatchersUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const WatchersDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WatchersDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const WatchersStartHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WatchersStartHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const WatchersStopHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WatchersStopHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const HealthValidationsStartValidationHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "HealthValidationsStartValidationHeaders",
      modelProperties: {
        location: {
          serializedName: "location",
          type: {
            name: "String",
          },
        },
        retryAfter: {
          serializedName: "retry-after",
          type: {
            name: "Number",
          },
        },
      },
    },
  };

export const SharedPrivateLinkResourcesCreateHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "SharedPrivateLinkResourcesCreateHeaders",
      modelProperties: {
        retryAfter: {
          serializedName: "retry-after",
          type: {
            name: "Number",
          },
        },
      },
    },
  };

export const SharedPrivateLinkResourcesDeleteHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "SharedPrivateLinkResourcesDeleteHeaders",
      modelProperties: {
        location: {
          serializedName: "location",
          type: {
            name: "String",
          },
        },
        retryAfter: {
          serializedName: "retry-after",
          type: {
            name: "Number",
          },
        },
      },
    },
  };

export let discriminators = {
  TargetProperties: TargetProperties,
  "TargetProperties.SqlEp": SqlDbElasticPoolTargetProperties,
  "TargetProperties.SqlDb": SqlDbSingleDatabaseTargetProperties,
  "TargetProperties.SqlMi": SqlMiTargetProperties,
  "TargetProperties.SqlVm": SqlVmTargetProperties,
};
