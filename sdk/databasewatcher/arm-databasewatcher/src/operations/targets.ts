/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { Targets } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MicrosoftDatabaseWatcher } from "../microsoftDatabaseWatcher";
import {
  Target,
  TargetsListByWatcherNextOptionalParams,
  TargetsListByWatcherOptionalParams,
  TargetsListByWatcherResponse,
  TargetsGetOptionalParams,
  TargetsGetResponse,
  TargetsCreateOrUpdateOptionalParams,
  TargetsCreateOrUpdateResponse,
  TargetsDeleteOptionalParams,
  TargetsListByWatcherNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Targets operations. */
export class TargetsImpl implements Targets {
  private readonly client: MicrosoftDatabaseWatcher;

  /**
   * Initialize a new instance of the class Targets class.
   * @param client Reference to the service client
   */
  constructor(client: MicrosoftDatabaseWatcher) {
    this.client = client;
  }

  /**
   * List Target resources by Watcher
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param watcherName The database watcher name.
   * @param options The options parameters.
   */
  public listByWatcher(
    resourceGroupName: string,
    watcherName: string,
    options?: TargetsListByWatcherOptionalParams,
  ): PagedAsyncIterableIterator<Target> {
    const iter = this.listByWatcherPagingAll(
      resourceGroupName,
      watcherName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByWatcherPagingPage(
          resourceGroupName,
          watcherName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByWatcherPagingPage(
    resourceGroupName: string,
    watcherName: string,
    options?: TargetsListByWatcherOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<Target[]> {
    let result: TargetsListByWatcherResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByWatcher(
        resourceGroupName,
        watcherName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByWatcherNext(
        resourceGroupName,
        watcherName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByWatcherPagingAll(
    resourceGroupName: string,
    watcherName: string,
    options?: TargetsListByWatcherOptionalParams,
  ): AsyncIterableIterator<Target> {
    for await (const page of this.listByWatcherPagingPage(
      resourceGroupName,
      watcherName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List Target resources by Watcher
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param watcherName The database watcher name.
   * @param options The options parameters.
   */
  private _listByWatcher(
    resourceGroupName: string,
    watcherName: string,
    options?: TargetsListByWatcherOptionalParams,
  ): Promise<TargetsListByWatcherResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, watcherName, options },
      listByWatcherOperationSpec,
    );
  }

  /**
   * Get a Target
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param watcherName The database watcher name.
   * @param targetName The target resource name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    watcherName: string,
    targetName: string,
    options?: TargetsGetOptionalParams,
  ): Promise<TargetsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, watcherName, targetName, options },
      getOperationSpec,
    );
  }

  /**
   * Create a Target
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param watcherName The database watcher name.
   * @param targetName The target resource name.
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    watcherName: string,
    targetName: string,
    resource: Target,
    options?: TargetsCreateOrUpdateOptionalParams,
  ): Promise<TargetsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, watcherName, targetName, resource, options },
      createOrUpdateOperationSpec,
    );
  }

  /**
   * Delete a Target
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param watcherName The database watcher name.
   * @param targetName The target resource name.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    watcherName: string,
    targetName: string,
    options?: TargetsDeleteOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, watcherName, targetName, options },
      deleteOperationSpec,
    );
  }

  /**
   * ListByWatcherNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param watcherName The database watcher name.
   * @param nextLink The nextLink from the previous successful call to the ListByWatcher method.
   * @param options The options parameters.
   */
  private _listByWatcherNext(
    resourceGroupName: string,
    watcherName: string,
    nextLink: string,
    options?: TargetsListByWatcherNextOptionalParams,
  ): Promise<TargetsListByWatcherNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, watcherName, nextLink, options },
      listByWatcherNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByWatcherOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DatabaseWatcher/watchers/{watcherName}/targets",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TargetListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.watcherName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DatabaseWatcher/watchers/{watcherName}/targets/{targetName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Target,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.watcherName,
    Parameters.targetName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DatabaseWatcher/watchers/{watcherName}/targets/{targetName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Target,
    },
    201: {
      bodyMapper: Mappers.Target,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.resource2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.watcherName,
    Parameters.targetName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DatabaseWatcher/watchers/{watcherName}/targets/{targetName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.watcherName,
    Parameters.targetName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByWatcherNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TargetListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.watcherName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
