/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { AlertRuleResources } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { MicrosoftDatabaseWatcher } from "../microsoftDatabaseWatcher.js";
import {
  AlertRuleResource,
  AlertRuleResourcesListByParentNextOptionalParams,
  AlertRuleResourcesListByParentOptionalParams,
  AlertRuleResourcesListByParentResponse,
  AlertRuleResourcesGetOptionalParams,
  AlertRuleResourcesGetResponse,
  AlertRuleResourcesCreateOrUpdateOptionalParams,
  AlertRuleResourcesCreateOrUpdateResponse,
  AlertRuleResourcesDeleteOptionalParams,
  AlertRuleResourcesListByParentNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing AlertRuleResources operations. */
export class AlertRuleResourcesImpl implements AlertRuleResources {
  private readonly client: MicrosoftDatabaseWatcher;

  /**
   * Initialize a new instance of the class AlertRuleResources class.
   * @param client Reference to the service client
   */
  constructor(client: MicrosoftDatabaseWatcher) {
    this.client = client;
  }

  /**
   * List AlertRuleResource resources by Watcher
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param watcherName The database watcher name.
   * @param options The options parameters.
   */
  public listByParent(
    resourceGroupName: string,
    watcherName: string,
    options?: AlertRuleResourcesListByParentOptionalParams,
  ): PagedAsyncIterableIterator<AlertRuleResource> {
    const iter = this.listByParentPagingAll(
      resourceGroupName,
      watcherName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByParentPagingPage(
          resourceGroupName,
          watcherName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByParentPagingPage(
    resourceGroupName: string,
    watcherName: string,
    options?: AlertRuleResourcesListByParentOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<AlertRuleResource[]> {
    let result: AlertRuleResourcesListByParentResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByParent(
        resourceGroupName,
        watcherName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByParentNext(
        resourceGroupName,
        watcherName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByParentPagingAll(
    resourceGroupName: string,
    watcherName: string,
    options?: AlertRuleResourcesListByParentOptionalParams,
  ): AsyncIterableIterator<AlertRuleResource> {
    for await (const page of this.listByParentPagingPage(
      resourceGroupName,
      watcherName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List AlertRuleResource resources by Watcher
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param watcherName The database watcher name.
   * @param options The options parameters.
   */
  private _listByParent(
    resourceGroupName: string,
    watcherName: string,
    options?: AlertRuleResourcesListByParentOptionalParams,
  ): Promise<AlertRuleResourcesListByParentResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, watcherName, options },
      listByParentOperationSpec,
    );
  }

  /**
   * Get a AlertRuleResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param watcherName The database watcher name.
   * @param alertRuleResourceName The alert rule proxy resource name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    watcherName: string,
    alertRuleResourceName: string,
    options?: AlertRuleResourcesGetOptionalParams,
  ): Promise<AlertRuleResourcesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, watcherName, alertRuleResourceName, options },
      getOperationSpec,
    );
  }

  /**
   * Create a AlertRuleResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param watcherName The database watcher name.
   * @param alertRuleResourceName The alert rule proxy resource name.
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    watcherName: string,
    alertRuleResourceName: string,
    resource: AlertRuleResource,
    options?: AlertRuleResourcesCreateOrUpdateOptionalParams,
  ): Promise<AlertRuleResourcesCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        watcherName,
        alertRuleResourceName,
        resource,
        options,
      },
      createOrUpdateOperationSpec,
    );
  }

  /**
   * Delete a AlertRuleResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param watcherName The database watcher name.
   * @param alertRuleResourceName The alert rule proxy resource name.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    watcherName: string,
    alertRuleResourceName: string,
    options?: AlertRuleResourcesDeleteOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, watcherName, alertRuleResourceName, options },
      deleteOperationSpec,
    );
  }

  /**
   * ListByParentNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param watcherName The database watcher name.
   * @param nextLink The nextLink from the previous successful call to the ListByParent method.
   * @param options The options parameters.
   */
  private _listByParentNext(
    resourceGroupName: string,
    watcherName: string,
    nextLink: string,
    options?: AlertRuleResourcesListByParentNextOptionalParams,
  ): Promise<AlertRuleResourcesListByParentNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, watcherName, nextLink, options },
      listByParentNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByParentOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DatabaseWatcher/watchers/{watcherName}/alertRuleResources",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AlertRuleResourceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.watcherName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DatabaseWatcher/watchers/{watcherName}/alertRuleResources/{alertRuleResourceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AlertRuleResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.watcherName,
    Parameters.alertRuleResourceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DatabaseWatcher/watchers/{watcherName}/alertRuleResources/{alertRuleResourceName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.AlertRuleResource,
    },
    201: {
      bodyMapper: Mappers.AlertRuleResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.resource1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.watcherName,
    Parameters.alertRuleResourceName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DatabaseWatcher/watchers/{watcherName}/alertRuleResources/{alertRuleResourceName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.watcherName,
    Parameters.alertRuleResourceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByParentNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AlertRuleResourceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.watcherName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
