/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  Watcher,
  WatchersListBySubscriptionOptionalParams,
  WatchersListByResourceGroupOptionalParams,
  WatchersGetOptionalParams,
  WatchersGetResponse,
  WatchersCreateOrUpdateOptionalParams,
  WatchersCreateOrUpdateResponse,
  WatcherUpdate,
  WatchersUpdateOptionalParams,
  WatchersUpdateResponse,
  WatchersDeleteOptionalParams,
  WatchersDeleteResponse,
  WatchersStartOptionalParams,
  WatchersStartResponse,
  WatchersStopOptionalParams,
  WatchersStopResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Watchers. */
export interface Watchers {
  /**
   * List Watcher resources by subscription ID
   * @param options The options parameters.
   */
  listBySubscription(
    options?: WatchersListBySubscriptionOptionalParams,
  ): PagedAsyncIterableIterator<Watcher>;
  /**
   * List Watcher resources by resource group
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: WatchersListByResourceGroupOptionalParams,
  ): PagedAsyncIterableIterator<Watcher>;
  /**
   * Get a Watcher
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param watcherName The database watcher name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    watcherName: string,
    options?: WatchersGetOptionalParams,
  ): Promise<WatchersGetResponse>;
  /**
   * Create a Watcher
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param watcherName The database watcher name.
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    watcherName: string,
    resource: Watcher,
    options?: WatchersCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<WatchersCreateOrUpdateResponse>,
      WatchersCreateOrUpdateResponse
    >
  >;
  /**
   * Create a Watcher
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param watcherName The database watcher name.
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    watcherName: string,
    resource: Watcher,
    options?: WatchersCreateOrUpdateOptionalParams,
  ): Promise<WatchersCreateOrUpdateResponse>;
  /**
   * Update a Watcher
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param watcherName The database watcher name.
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    watcherName: string,
    properties: WatcherUpdate,
    options?: WatchersUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<WatchersUpdateResponse>,
      WatchersUpdateResponse
    >
  >;
  /**
   * Update a Watcher
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param watcherName The database watcher name.
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    watcherName: string,
    properties: WatcherUpdate,
    options?: WatchersUpdateOptionalParams,
  ): Promise<WatchersUpdateResponse>;
  /**
   * Delete a Watcher
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param watcherName The database watcher name.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    watcherName: string,
    options?: WatchersDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<WatchersDeleteResponse>,
      WatchersDeleteResponse
    >
  >;
  /**
   * Delete a Watcher
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param watcherName The database watcher name.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    watcherName: string,
    options?: WatchersDeleteOptionalParams,
  ): Promise<WatchersDeleteResponse>;
  /**
   * The action to start monitoring all targets configured for a database watcher.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param watcherName The database watcher name.
   * @param options The options parameters.
   */
  beginStart(
    resourceGroupName: string,
    watcherName: string,
    options?: WatchersStartOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<WatchersStartResponse>,
      WatchersStartResponse
    >
  >;
  /**
   * The action to start monitoring all targets configured for a database watcher.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param watcherName The database watcher name.
   * @param options The options parameters.
   */
  beginStartAndWait(
    resourceGroupName: string,
    watcherName: string,
    options?: WatchersStartOptionalParams,
  ): Promise<WatchersStartResponse>;
  /**
   * The action to stop monitoring all targets configured for a database watcher.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param watcherName The database watcher name.
   * @param options The options parameters.
   */
  beginStop(
    resourceGroupName: string,
    watcherName: string,
    options?: WatchersStopOptionalParams,
  ): Promise<
    SimplePollerLike<OperationState<WatchersStopResponse>, WatchersStopResponse>
  >;
  /**
   * The action to stop monitoring all targets configured for a database watcher.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param watcherName The database watcher name.
   * @param options The options parameters.
   */
  beginStopAndWait(
    resourceGroupName: string,
    watcherName: string,
    options?: WatchersStopOptionalParams,
  ): Promise<WatchersStopResponse>;
}
