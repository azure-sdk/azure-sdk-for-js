/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  DryrunResource,
  LinkersListDryrunOptionalParams,
  DaprConfigurationResource,
  LinkersListDaprConfigurationsOptionalParams,
  LinkersGetDryrunOptionalParams,
  LinkersGetDryrunResponse,
  LinkersCreateDryrunOptionalParams,
  LinkersCreateDryrunResponse,
  DryrunPatch,
  LinkersUpdateDryrunOptionalParams,
  LinkersUpdateDryrunResponse,
  LinkersDeleteDryrunOptionalParams,
  LinkersGenerateConfigurationsOptionalParams,
  LinkersGenerateConfigurationsResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Linkers. */
export interface Linkers {
  /**
   * list dryrun jobs
   * @param providers {resourceUri}
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   *                    connected.
   * @param options The options parameters.
   */
  listDryrun(
    providers: string,
    resourceUri: string,
    options?: LinkersListDryrunOptionalParams,
  ): PagedAsyncIterableIterator<DryrunResource>;
  /**
   * List the dapr configuration supported by Service Connector.
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   *                    connected.
   * @param options The options parameters.
   */
  listDaprConfigurations(
    resourceUri: string,
    options?: LinkersListDaprConfigurationsOptionalParams,
  ): PagedAsyncIterableIterator<DaprConfigurationResource>;
  /**
   * get a dryrun job
   * @param providers {resourceUri}
   * @param dryruns The name of the DryrunResource
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   *                    connected.
   * @param dryrunName The name of dryrun.
   * @param options The options parameters.
   */
  getDryrun(
    providers: string,
    dryruns: string,
    resourceUri: string,
    dryrunName: string,
    options?: LinkersGetDryrunOptionalParams,
  ): Promise<LinkersGetDryrunResponse>;
  /**
   * create a dryrun job to do necessary check before actual creation
   * @param providers {resourceUri}
   * @param dryruns The name of the DryrunResource
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   *                    connected.
   * @param dryrunName The name of dryrun.
   * @param parameters dryrun resource.
   * @param options The options parameters.
   */
  beginCreateDryrun(
    providers: string,
    dryruns: string,
    resourceUri: string,
    dryrunName: string,
    parameters: DryrunResource,
    options?: LinkersCreateDryrunOptionalParams,
  ): Promise<
    SimplePollerLike<OperationState<LinkersCreateDryrunResponse>, LinkersCreateDryrunResponse>
  >;
  /**
   * create a dryrun job to do necessary check before actual creation
   * @param providers {resourceUri}
   * @param dryruns The name of the DryrunResource
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   *                    connected.
   * @param dryrunName The name of dryrun.
   * @param parameters dryrun resource.
   * @param options The options parameters.
   */
  beginCreateDryrunAndWait(
    providers: string,
    dryruns: string,
    resourceUri: string,
    dryrunName: string,
    parameters: DryrunResource,
    options?: LinkersCreateDryrunOptionalParams,
  ): Promise<LinkersCreateDryrunResponse>;
  /**
   * add a dryrun job to do necessary check before actual creation
   * @param providers {resourceUri}
   * @param dryruns The name of the DryrunResource
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   *                    connected.
   * @param dryrunName The name of dryrun.
   * @param parameters dryrun resource.
   * @param options The options parameters.
   */
  beginUpdateDryrun(
    providers: string,
    dryruns: string,
    resourceUri: string,
    dryrunName: string,
    parameters: DryrunPatch,
    options?: LinkersUpdateDryrunOptionalParams,
  ): Promise<
    SimplePollerLike<OperationState<LinkersUpdateDryrunResponse>, LinkersUpdateDryrunResponse>
  >;
  /**
   * add a dryrun job to do necessary check before actual creation
   * @param providers {resourceUri}
   * @param dryruns The name of the DryrunResource
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   *                    connected.
   * @param dryrunName The name of dryrun.
   * @param parameters dryrun resource.
   * @param options The options parameters.
   */
  beginUpdateDryrunAndWait(
    providers: string,
    dryruns: string,
    resourceUri: string,
    dryrunName: string,
    parameters: DryrunPatch,
    options?: LinkersUpdateDryrunOptionalParams,
  ): Promise<LinkersUpdateDryrunResponse>;
  /**
   * delete a dryrun job
   * @param providers {resourceUri}
   * @param dryruns The name of the DryrunResource
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   *                    connected.
   * @param dryrunName The name of dryrun.
   * @param options The options parameters.
   */
  deleteDryrun(
    providers: string,
    dryruns: string,
    resourceUri: string,
    dryrunName: string,
    options?: LinkersDeleteDryrunOptionalParams,
  ): Promise<void>;
  /**
   * Generate configurations for a Linker.
   * @param providers {resourceUri}
   * @param linkers The name of the LinkerResource
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   *                    connected.
   * @param linkerName The name Linker resource.
   * @param options The options parameters.
   */
  generateConfigurations(
    providers: string,
    linkers: string,
    resourceUri: string,
    linkerName: string,
    options?: LinkersGenerateConfigurationsOptionalParams,
  ): Promise<LinkersGenerateConfigurationsResponse>;
}
