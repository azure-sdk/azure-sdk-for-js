/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter,
} from "@azure/core-client";
import {
  StorageAccountCheckNameAvailabilityParameters as StorageAccountCheckNameAvailabilityParametersMapper,
  StorageAccountCreateParameters as StorageAccountCreateParametersMapper,
  StorageAccountUpdateParameters as StorageAccountUpdateParametersMapper,
  AccountSasParameters as AccountSasParametersMapper,
  ServiceSasParameters as ServiceSasParametersMapper,
  StorageAccountRegenerateKeyParameters as StorageAccountRegenerateKeyParametersMapper,
  BlobRestoreParameters as BlobRestoreParametersMapper,
  StorageAccountMigration as StorageAccountMigrationMapper,
  BlobServiceProperties as BlobServicePropertiesMapper,
  BlobContainer as BlobContainerMapper,
  LegalHold as LegalHoldMapper,
  ImmutabilityPolicy as ImmutabilityPolicyMapper,
  LeaseContainerRequest as LeaseContainerRequestMapper,
  EncryptionScope as EncryptionScopeMapper,
  FileServiceProperties as FileServicePropertiesMapper,
  FileShare as FileShareMapper,
  LeaseShareRequest as LeaseShareRequestMapper,
  DeletedShare as DeletedShareMapper,
  BlobInventoryPolicy as BlobInventoryPolicyMapper,
  LocalUser as LocalUserMapper,
  ManagementPolicy as ManagementPolicyMapper,
  ObjectReplicationPolicy as ObjectReplicationPolicyMapper,
  PrivateEndpointConnection as PrivateEndpointConnectionMapper,
  QueueServiceProperties as QueueServicePropertiesMapper,
  StorageQueue as StorageQueueMapper,
  StorageTaskAssignment as StorageTaskAssignmentMapper,
  StorageTaskAssignmentUpdateParameters as StorageTaskAssignmentUpdateParametersMapper,
  TableServiceProperties as TableServicePropertiesMapper,
  Table as TableMapper,
} from "../models/mappers.js";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String",
    },
  },
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2024-01-01",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String",
    },
  },
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String",
    },
  },
};

export const accountName: OperationParameter = {
  parameterPath: "accountName",
  mapper: StorageAccountCheckNameAvailabilityParametersMapper,
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    constraints: {
      MinLength: 1,
    },
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    constraints: {
      MaxLength: 90,
      MinLength: 1,
    },
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const accountName1: OperationURLParameter = {
  parameterPath: "accountName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-z0-9]+$"),
      MaxLength: 24,
      MinLength: 3,
    },
    serializedName: "accountName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const expand: OperationQueryParameter = {
  parameterPath: ["options", "expand"],
  mapper: {
    serializedName: "$expand",
    type: {
      name: "Enum",
      allowedValues: ["geoReplicationStats", "blobRestoreStatus"],
    },
  },
};

export const parameters: OperationParameter = {
  parameterPath: "parameters",
  mapper: StorageAccountCreateParametersMapper,
};

export const parameters1: OperationParameter = {
  parameterPath: "parameters",
  mapper: StorageAccountUpdateParametersMapper,
};

export const migrationName: OperationURLParameter = {
  parameterPath: "migrationName",
  mapper: {
    serializedName: "migrationName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const failoverType: OperationQueryParameter = {
  parameterPath: ["options", "failoverType"],
  mapper: {
    defaultValue: "Planned",
    serializedName: "failoverType",
    type: {
      name: "String",
    },
  },
};

export const requestType: OperationQueryParameter = {
  parameterPath: "requestType",
  mapper: {
    serializedName: "requestType",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const parameters2: OperationParameter = {
  parameterPath: "parameters",
  mapper: AccountSasParametersMapper,
};

export const expand1: OperationQueryParameter = {
  parameterPath: ["options", "expand"],
  mapper: {
    defaultValue: "kerb",
    serializedName: "$expand",
    type: {
      name: "String",
    },
  },
};

export const parameters3: OperationParameter = {
  parameterPath: "parameters",
  mapper: ServiceSasParametersMapper,
};

export const regenerateKey: OperationParameter = {
  parameterPath: "regenerateKey",
  mapper: StorageAccountRegenerateKeyParametersMapper,
};

export const parameters4: OperationParameter = {
  parameterPath: "parameters",
  mapper: BlobRestoreParametersMapper,
};

export const parameters5: OperationParameter = {
  parameterPath: "parameters",
  mapper: StorageAccountMigrationMapper,
};

export const location: OperationURLParameter = {
  parameterPath: "location",
  mapper: {
    constraints: {
      MinLength: 1,
    },
    serializedName: "location",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const deletedAccountName: OperationURLParameter = {
  parameterPath: "deletedAccountName",
  mapper: {
    constraints: {
      MaxLength: 24,
      MinLength: 3,
    },
    serializedName: "deletedAccountName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const parameters6: OperationParameter = {
  parameterPath: "parameters",
  mapper: BlobServicePropertiesMapper,
};

export const maxpagesize: OperationQueryParameter = {
  parameterPath: ["options", "maxpagesize"],
  mapper: {
    serializedName: "$maxpagesize",
    type: {
      name: "Number",
    },
  },
};

export const filter: OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String",
    },
  },
};

export const include: OperationQueryParameter = {
  parameterPath: ["options", "include"],
  mapper: {
    serializedName: "$include",
    type: {
      name: "String",
    },
  },
};

export const containerName: OperationURLParameter = {
  parameterPath: "containerName",
  mapper: {
    constraints: {
      MaxLength: 63,
      MinLength: 3,
    },
    serializedName: "containerName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const blobContainer: OperationParameter = {
  parameterPath: "blobContainer",
  mapper: BlobContainerMapper,
};

export const legalHold: OperationParameter = {
  parameterPath: "legalHold",
  mapper: LegalHoldMapper,
};

export const ifMatch: OperationParameter = {
  parameterPath: ["options", "ifMatch"],
  mapper: {
    serializedName: "if-match",
    type: {
      name: "String",
    },
  },
};

export const parameters7: OperationParameter = {
  parameterPath: "parameters",
  mapper: ImmutabilityPolicyMapper,
};

export const ifMatch1: OperationParameter = {
  parameterPath: "ifMatch",
  mapper: {
    serializedName: "if-match",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const parameters8: OperationParameter = {
  parameterPath: ["options", "parameters"],
  mapper: ImmutabilityPolicyMapper,
};

export const parameters9: OperationParameter = {
  parameterPath: ["options", "parameters"],
  mapper: LeaseContainerRequestMapper,
};

export const maxpagesize1: OperationQueryParameter = {
  parameterPath: ["options", "maxpagesize"],
  mapper: {
    constraints: {
      InclusiveMaximum: 5000,
      InclusiveMinimum: 1,
    },
    serializedName: "$maxpagesize",
    type: {
      name: "Number",
    },
  },
};

export const include1: OperationQueryParameter = {
  parameterPath: ["options", "include"],
  mapper: {
    serializedName: "$include",
    type: {
      name: "String",
    },
  },
};

export const encryptionScopeName: OperationURLParameter = {
  parameterPath: "encryptionScopeName",
  mapper: {
    constraints: {
      MaxLength: 63,
      MinLength: 3,
    },
    serializedName: "encryptionScopeName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const encryptionScope: OperationParameter = {
  parameterPath: "encryptionScope",
  mapper: EncryptionScopeMapper,
};

export const parameters10: OperationParameter = {
  parameterPath: "parameters",
  mapper: FileServicePropertiesMapper,
};

export const expand2: OperationQueryParameter = {
  parameterPath: ["options", "expand"],
  mapper: {
    serializedName: "$expand",
    type: {
      name: "String",
    },
  },
};

export const shareName: OperationURLParameter = {
  parameterPath: "shareName",
  mapper: {
    constraints: {
      MaxLength: 63,
      MinLength: 3,
    },
    serializedName: "shareName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const xMsSnapshot: OperationParameter = {
  parameterPath: ["options", "xMsSnapshot"],
  mapper: {
    serializedName: "x-ms-snapshot",
    type: {
      name: "String",
    },
  },
};

export const fileShare: OperationParameter = {
  parameterPath: "fileShare",
  mapper: FileShareMapper,
};

export const include2: OperationQueryParameter = {
  parameterPath: ["options", "include"],
  mapper: {
    serializedName: "$include",
    type: {
      name: "String",
    },
  },
};

export const parameters11: OperationParameter = {
  parameterPath: ["options", "parameters"],
  mapper: LeaseShareRequestMapper,
};

export const deletedShare: OperationParameter = {
  parameterPath: "deletedShare",
  mapper: DeletedShareMapper,
};

export const blobInventoryPolicyName: OperationURLParameter = {
  parameterPath: "blobInventoryPolicyName",
  mapper: {
    serializedName: "blobInventoryPolicyName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const properties: OperationParameter = {
  parameterPath: "properties",
  mapper: BlobInventoryPolicyMapper,
};

export const include3: OperationQueryParameter = {
  parameterPath: ["options", "include"],
  mapper: {
    serializedName: "$include",
    type: {
      name: "String",
    },
  },
};

export const username: OperationURLParameter = {
  parameterPath: "username",
  mapper: {
    constraints: {
      MaxLength: 64,
      MinLength: 3,
    },
    serializedName: "username",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const properties1: OperationParameter = {
  parameterPath: "properties",
  mapper: LocalUserMapper,
};

export const managementPolicyName: OperationURLParameter = {
  parameterPath: "managementPolicyName",
  mapper: {
    serializedName: "managementPolicyName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const properties2: OperationParameter = {
  parameterPath: "properties",
  mapper: ManagementPolicyMapper,
};

export const networkSecurityPerimeterConfigurationName: OperationURLParameter =
  {
    parameterPath: "networkSecurityPerimeterConfigurationName",
    mapper: {
      constraints: {
        Pattern: new RegExp("^.*$"),
      },
      serializedName: "networkSecurityPerimeterConfigurationName",
      required: true,
      type: {
        name: "String",
      },
    },
  };

export const objectReplicationPolicyId: OperationURLParameter = {
  parameterPath: "objectReplicationPolicyId",
  mapper: {
    constraints: {
      MinLength: 1,
    },
    serializedName: "objectReplicationPolicyId",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const properties3: OperationParameter = {
  parameterPath: "properties",
  mapper: ObjectReplicationPolicyMapper,
};

export const privateEndpointConnectionName: OperationURLParameter = {
  parameterPath: "privateEndpointConnectionName",
  mapper: {
    serializedName: "privateEndpointConnectionName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const properties4: OperationParameter = {
  parameterPath: "properties",
  mapper: PrivateEndpointConnectionMapper,
};

export const parameters12: OperationParameter = {
  parameterPath: "parameters",
  mapper: QueueServicePropertiesMapper,
};

export const queueName: OperationURLParameter = {
  parameterPath: "queueName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-z0-9]([a-z0-9]|(-(?!-))){1,61}[a-z0-9]$"),
      MaxLength: 63,
      MinLength: 3,
    },
    serializedName: "queueName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const queue: OperationParameter = {
  parameterPath: "queue",
  mapper: StorageQueueMapper,
};

export const storageTaskAssignmentName: OperationURLParameter = {
  parameterPath: "storageTaskAssignmentName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-z0-9]{3,24}$"),
      MaxLength: 24,
      MinLength: 3,
    },
    serializedName: "storageTaskAssignmentName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const parameters13: OperationParameter = {
  parameterPath: "parameters",
  mapper: StorageTaskAssignmentMapper,
};

export const parameters14: OperationParameter = {
  parameterPath: "parameters",
  mapper: StorageTaskAssignmentUpdateParametersMapper,
};

export const parameters15: OperationParameter = {
  parameterPath: "parameters",
  mapper: TableServicePropertiesMapper,
};

export const tableName: OperationURLParameter = {
  parameterPath: "tableName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[A-Za-z][A-Za-z0-9]{2,62}$"),
      MaxLength: 63,
      MinLength: 3,
    },
    serializedName: "tableName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const parameters16: OperationParameter = {
  parameterPath: "parameters",
  mapper: TableMapper,
};
