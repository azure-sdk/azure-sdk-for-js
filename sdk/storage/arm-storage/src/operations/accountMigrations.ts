/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { AccountMigrations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { StorageManagementClient } from "../storageManagementClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  AccountMigrationName,
  AccountMigrationsGetOptionalParams,
  AccountMigrationsGetResponse,
  StorageAccountMigration,
  AccountMigrationsPutOptionalParams
} from "../models";

/** Class containing AccountMigrations operations. */
export class AccountMigrationsImpl implements AccountMigrations {
  private readonly client: StorageManagementClient;

  /**
   * Initialize a new instance of the class AccountMigrations class.
   * @param client Reference to the service client
   */
  constructor(client: StorageManagementClient) {
    this.client = client;
  }

  /**
   * Gets the status of the ongoing migration for the specified storage account.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param accountName The name of the storage account within the specified resource group. Storage
   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
   *                    only.
   * @param accountMigrationName storage account migration name. It should always be 'default'
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    accountName: string,
    accountMigrationName: AccountMigrationName,
    options?: AccountMigrationsGetOptionalParams
  ): Promise<AccountMigrationsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, accountMigrationName, options },
      getOperationSpec
    );
  }

  /**
   * Account Migration request can be triggered for a storage account to change its redundancy level. The
   * migration updates the non-zonal redundant storage account to a zonal redundant account or vice-versa
   * in order to have better reliability and availability. Zone-redundant storage (ZRS) replicates your
   * storage account synchronously across three Azure availability zones in the primary region.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param accountName The name of the storage account within the specified resource group. Storage
   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
   *                    only.
   * @param accountMigrationName storage account migration name. It should always be 'default'
   * @param properties The request parameters required to perform storage account migration.
   * @param options The options parameters.
   */
  async beginPut(
    resourceGroupName: string,
    accountName: string,
    accountMigrationName: AccountMigrationName,
    properties: StorageAccountMigration,
    options?: AccountMigrationsPutOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        resourceGroupName,
        accountName,
        accountMigrationName,
        properties,
        options
      },
      putOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Account Migration request can be triggered for a storage account to change its redundancy level. The
   * migration updates the non-zonal redundant storage account to a zonal redundant account or vice-versa
   * in order to have better reliability and availability. Zone-redundant storage (ZRS) replicates your
   * storage account synchronously across three Azure availability zones in the primary region.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param accountName The name of the storage account within the specified resource group. Storage
   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
   *                    only.
   * @param accountMigrationName storage account migration name. It should always be 'default'
   * @param properties The request parameters required to perform storage account migration.
   * @param options The options parameters.
   */
  async beginPutAndWait(
    resourceGroupName: string,
    accountName: string,
    accountMigrationName: AccountMigrationName,
    properties: StorageAccountMigration,
    options?: AccountMigrationsPutOptionalParams
  ): Promise<void> {
    const poller = await this.beginPut(
      resourceGroupName,
      accountName,
      accountMigrationName,
      properties,
      options
    );
    return poller.pollUntilDone();
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/accountMigrations/{accountMigrationName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StorageAccountMigration
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName1,
    Parameters.accountMigrationName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const putOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/accountMigrations/{accountMigrationName}",
  httpMethod: "PUT",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.properties,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName1,
    Parameters.accountMigrationName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
