/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { CacheRules } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ContainerRegistryManagementClient } from "../containerRegistryManagementClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  CacheRule,
  CacheRulesListAsyncNextOptionalParams,
  CacheRulesListAsyncOptionalParams,
  CacheRulesListAsyncResponse,
  CacheRulesGetAsyncOptionalParams,
  CacheRulesGetAsyncResponse,
  CacheRulesCreateOptionalParams,
  CacheRulesCreateResponse,
  CacheRulesDeleteOptionalParams,
  CacheRuleUpdateParameters,
  CacheRulesUpdateOptionalParams,
  CacheRulesUpdateResponse,
  CacheRulesListAsyncNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing CacheRules operations. */
export class CacheRulesImpl implements CacheRules {
  private readonly client: ContainerRegistryManagementClient;

  /**
   * Initialize a new instance of the class CacheRules class.
   * @param client Reference to the service client
   */
  constructor(client: ContainerRegistryManagementClient) {
    this.client = client;
  }

  /**
   * Lists all cache rule resources for the specified container registry.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param options The options parameters.
   */
  public listAsync(
    resourceGroupName: string,
    registryName: string,
    options?: CacheRulesListAsyncOptionalParams
  ): PagedAsyncIterableIterator<CacheRule> {
    const iter = this.listAsyncPagingAll(
      resourceGroupName,
      registryName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAsyncPagingPage(
          resourceGroupName,
          registryName,
          options
        );
      }
    };
  }

  private async *listAsyncPagingPage(
    resourceGroupName: string,
    registryName: string,
    options?: CacheRulesListAsyncOptionalParams
  ): AsyncIterableIterator<CacheRule[]> {
    let result = await this._listAsync(
      resourceGroupName,
      registryName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAsyncNext(
        resourceGroupName,
        registryName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAsyncPagingAll(
    resourceGroupName: string,
    registryName: string,
    options?: CacheRulesListAsyncOptionalParams
  ): AsyncIterableIterator<CacheRule> {
    for await (const page of this.listAsyncPagingPage(
      resourceGroupName,
      registryName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists all cache rule resources for the specified container registry.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param options The options parameters.
   */
  private _listAsync(
    resourceGroupName: string,
    registryName: string,
    options?: CacheRulesListAsyncOptionalParams
  ): Promise<CacheRulesListAsyncResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, registryName, options },
      listAsyncOperationSpec
    );
  }

  /**
   * Gets the properties of the specified cache rule resource.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param cacheRuleName The name of the cache rule.
   * @param options The options parameters.
   */
  getAsync(
    resourceGroupName: string,
    registryName: string,
    cacheRuleName: string,
    options?: CacheRulesGetAsyncOptionalParams
  ): Promise<CacheRulesGetAsyncResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, registryName, cacheRuleName, options },
      getAsyncOperationSpec
    );
  }

  /**
   * Creates a cache rule for a container registry with the specified parameters.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param cacheRuleName The name of the cache rule.
   * @param cacheRuleCreateParameters The parameters for creating a cache rule.
   * @param options The options parameters.
   */
  async beginCreate(
    resourceGroupName: string,
    registryName: string,
    cacheRuleName: string,
    cacheRuleCreateParameters: CacheRule,
    options?: CacheRulesCreateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<CacheRulesCreateResponse>,
      CacheRulesCreateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<CacheRulesCreateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        resourceGroupName,
        registryName,
        cacheRuleName,
        cacheRuleCreateParameters,
        options
      },
      createOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Creates a cache rule for a container registry with the specified parameters.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param cacheRuleName The name of the cache rule.
   * @param cacheRuleCreateParameters The parameters for creating a cache rule.
   * @param options The options parameters.
   */
  async beginCreateAndWait(
    resourceGroupName: string,
    registryName: string,
    cacheRuleName: string,
    cacheRuleCreateParameters: CacheRule,
    options?: CacheRulesCreateOptionalParams
  ): Promise<CacheRulesCreateResponse> {
    const poller = await this.beginCreate(
      resourceGroupName,
      registryName,
      cacheRuleName,
      cacheRuleCreateParameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Deletes a cache rule resource from a container registry.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param cacheRuleName The name of the cache rule.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    registryName: string,
    cacheRuleName: string,
    options?: CacheRulesDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, registryName, cacheRuleName, options },
      deleteOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Deletes a cache rule resource from a container registry.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param cacheRuleName The name of the cache rule.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    registryName: string,
    cacheRuleName: string,
    options?: CacheRulesDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      registryName,
      cacheRuleName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Updates a cache rule for a container registry with the specified parameters.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param cacheRuleName The name of the cache rule.
   * @param cacheRuleUpdateParameters The parameters for updating a cache rule.
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    registryName: string,
    cacheRuleName: string,
    cacheRuleUpdateParameters: CacheRuleUpdateParameters,
    options?: CacheRulesUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<CacheRulesUpdateResponse>,
      CacheRulesUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<CacheRulesUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        resourceGroupName,
        registryName,
        cacheRuleName,
        cacheRuleUpdateParameters,
        options
      },
      updateOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Updates a cache rule for a container registry with the specified parameters.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param cacheRuleName The name of the cache rule.
   * @param cacheRuleUpdateParameters The parameters for updating a cache rule.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    registryName: string,
    cacheRuleName: string,
    cacheRuleUpdateParameters: CacheRuleUpdateParameters,
    options?: CacheRulesUpdateOptionalParams
  ): Promise<CacheRulesUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      registryName,
      cacheRuleName,
      cacheRuleUpdateParameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * ListAsyncNext
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param nextLink The nextLink from the previous successful call to the ListAsync method.
   * @param options The options parameters.
   */
  private _listAsyncNext(
    resourceGroupName: string,
    registryName: string,
    nextLink: string,
    options?: CacheRulesListAsyncNextOptionalParams
  ): Promise<CacheRulesListAsyncNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, registryName, nextLink, options },
      listAsyncNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listAsyncOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/cacheRules",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CacheRulesListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getAsyncOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/cacheRules/{cacheRuleName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CacheRule
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName,
    Parameters.cacheRuleName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/cacheRules/{cacheRuleName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.CacheRule
    },
    201: {
      bodyMapper: Mappers.CacheRule
    },
    202: {
      bodyMapper: Mappers.CacheRule
    },
    204: {
      bodyMapper: Mappers.CacheRule
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.cacheRuleCreateParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName,
    Parameters.cacheRuleName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/cacheRules/{cacheRuleName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName,
    Parameters.cacheRuleName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/cacheRules/{cacheRuleName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.CacheRule
    },
    201: {
      bodyMapper: Mappers.CacheRule
    },
    202: {
      bodyMapper: Mappers.CacheRule
    },
    204: {
      bodyMapper: Mappers.CacheRule
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.cacheRuleUpdateParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName,
    Parameters.cacheRuleName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listAsyncNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CacheRulesListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
