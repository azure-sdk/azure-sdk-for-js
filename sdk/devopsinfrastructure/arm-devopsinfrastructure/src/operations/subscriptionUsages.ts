/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { SubscriptionUsages } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ManagedDevOpsInfrastructureForTesting } from "../managedDevOpsInfrastructureForTesting";
import {
  Quota,
  SubscriptionUsagesUsagesNextOptionalParams,
  SubscriptionUsagesUsagesOptionalParams,
  SubscriptionUsagesUsagesResponse,
  SubscriptionUsagesUsagesNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing SubscriptionUsages operations. */
export class SubscriptionUsagesImpl implements SubscriptionUsages {
  private readonly client: ManagedDevOpsInfrastructureForTesting;

  /**
   * Initialize a new instance of the class SubscriptionUsages class.
   * @param client Reference to the service client
   */
  constructor(client: ManagedDevOpsInfrastructureForTesting) {
    this.client = client;
  }

  /**
   * List Quota resources by subscription ID
   * @param location The name of the Azure region.
   * @param options The options parameters.
   */
  public listUsages(
    location: string,
    options?: SubscriptionUsagesUsagesOptionalParams,
  ): PagedAsyncIterableIterator<Quota> {
    const iter = this.usagesPagingAll(location, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.usagesPagingPage(location, options, settings);
      },
    };
  }

  private async *usagesPagingPage(
    location: string,
    options?: SubscriptionUsagesUsagesOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<Quota[]> {
    let result: SubscriptionUsagesUsagesResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._usages(location, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._usagesNext(location, continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *usagesPagingAll(
    location: string,
    options?: SubscriptionUsagesUsagesOptionalParams,
  ): AsyncIterableIterator<Quota> {
    for await (const page of this.usagesPagingPage(location, options)) {
      yield* page;
    }
  }

  /**
   * List Quota resources by subscription ID
   * @param location The name of the Azure region.
   * @param options The options parameters.
   */
  private _usages(
    location: string,
    options?: SubscriptionUsagesUsagesOptionalParams,
  ): Promise<SubscriptionUsagesUsagesResponse> {
    return this.client.sendOperationRequest(
      { location, options },
      usagesOperationSpec,
    );
  }

  /**
   * UsagesNext
   * @param location The name of the Azure region.
   * @param nextLink The nextLink from the previous successful call to the Usages method.
   * @param options The options parameters.
   */
  private _usagesNext(
    location: string,
    nextLink: string,
    options?: SubscriptionUsagesUsagesNextOptionalParams,
  ): Promise<SubscriptionUsagesUsagesNextResponse> {
    return this.client.sendOperationRequest(
      { location, nextLink, options },
      usagesNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const usagesOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.DevOpsInfrastructure/locations/{location}/usages",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PagedQuota,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const usagesNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PagedQuota,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.location,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
