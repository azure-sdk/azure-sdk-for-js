/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { DataManagerForAgricultureSolutions } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AgriFoodMgmtClient } from "../agriFoodMgmtClient";
import {
  DataManagerForAgricultureSolution,
  DataManagerForAgricultureSolutionsListByTenantNextOptionalParams,
  DataManagerForAgricultureSolutionsListByTenantOptionalParams,
  DataManagerForAgricultureSolutionsListByTenantResponse,
  DataManagerForAgricultureSolutionsGetOptionalParams,
  DataManagerForAgricultureSolutionsGetResponse,
  DataManagerForAgricultureSolutionsListByTenantNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing DataManagerForAgricultureSolutions operations. */
export class DataManagerForAgricultureSolutionsImpl
  implements DataManagerForAgricultureSolutions {
  private readonly client: AgriFoodMgmtClient;

  /**
   * Initialize a new instance of the class DataManagerForAgricultureSolutions class.
   * @param client Reference to the service client
   */
  constructor(client: AgriFoodMgmtClient) {
    this.client = client;
  }

  /**
   * Get list of Data Manager For Agriculture solutions.
   * @param options The options parameters.
   */
  public listByTenant(
    options?: DataManagerForAgricultureSolutionsListByTenantOptionalParams
  ): PagedAsyncIterableIterator<DataManagerForAgricultureSolution> {
    const iter = this.listByTenantPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByTenantPagingPage(options, settings);
      }
    };
  }

  private async *listByTenantPagingPage(
    options?: DataManagerForAgricultureSolutionsListByTenantOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<DataManagerForAgricultureSolution[]> {
    let result: DataManagerForAgricultureSolutionsListByTenantResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByTenant(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByTenantNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByTenantPagingAll(
    options?: DataManagerForAgricultureSolutionsListByTenantOptionalParams
  ): AsyncIterableIterator<DataManagerForAgricultureSolution> {
    for await (const page of this.listByTenantPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Get list of Data Manager For Agriculture solutions.
   * @param options The options parameters.
   */
  private _listByTenant(
    options?: DataManagerForAgricultureSolutionsListByTenantOptionalParams
  ): Promise<DataManagerForAgricultureSolutionsListByTenantResponse> {
    return this.client.sendOperationRequest(
      { options },
      listByTenantOperationSpec
    );
  }

  /**
   * Get Data Manager For Agriculture solution by id.
   * @param dataManagerForAgricultureSolutionId dataManagerForAgricultureSolutionId to be queried.
   * @param options The options parameters.
   */
  get(
    dataManagerForAgricultureSolutionId: string,
    options?: DataManagerForAgricultureSolutionsGetOptionalParams
  ): Promise<DataManagerForAgricultureSolutionsGetResponse> {
    return this.client.sendOperationRequest(
      { dataManagerForAgricultureSolutionId, options },
      getOperationSpec
    );
  }

  /**
   * ListByTenantNext
   * @param nextLink The nextLink from the previous successful call to the ListByTenant method.
   * @param options The options parameters.
   */
  private _listByTenantNext(
    nextLink: string,
    options?: DataManagerForAgricultureSolutionsListByTenantNextOptionalParams
  ): Promise<DataManagerForAgricultureSolutionsListByTenantNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listByTenantNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByTenantOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.AgFoodPlatform/farmBeatsSolutionDefinitions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DataManagerForAgricultureSolutionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.maxPageSize,
    Parameters.farmBeatsSolutionIds,
    Parameters.farmBeatsSolutionNames
  ],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.AgFoodPlatform/farmBeatsSolutionDefinitions/{dataManagerForAgricultureSolutionId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DataManagerForAgricultureSolution
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.dataManagerForAgricultureSolutionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByTenantNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DataManagerForAgricultureSolutionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
