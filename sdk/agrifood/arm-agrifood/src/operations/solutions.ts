/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { Solutions } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AgriFoodMgmtClient } from "../agriFoodMgmtClient";
import {
  Solution,
  SolutionsListByDataManagerForAgricultureNextOptionalParams,
  SolutionsListByDataManagerForAgricultureOptionalParams,
  SolutionsListByDataManagerForAgricultureResponse,
  SolutionsGetOptionalParams,
  SolutionsGetResponse,
  SolutionsCreateOrUpdateOptionalParams,
  SolutionsCreateOrUpdateResponse,
  SolutionsDeleteOptionalParams,
  SolutionsListByDataManagerForAgricultureNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Solutions operations. */
export class SolutionsImpl implements Solutions {
  private readonly client: AgriFoodMgmtClient;

  /**
   * Initialize a new instance of the class Solutions class.
   * @param client Reference to the service client
   */
  constructor(client: AgriFoodMgmtClient) {
    this.client = client;
  }

  /**
   * Get installed Solutions details.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
   * @param options The options parameters.
   */
  public listByDataManagerForAgriculture(
    resourceGroupName: string,
    dataManagerForAgricultureResourceName: string,
    options?: SolutionsListByDataManagerForAgricultureOptionalParams
  ): PagedAsyncIterableIterator<Solution> {
    const iter = this.listByDataManagerForAgriculturePagingAll(
      resourceGroupName,
      dataManagerForAgricultureResourceName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByDataManagerForAgriculturePagingPage(
          resourceGroupName,
          dataManagerForAgricultureResourceName,
          options,
          settings
        );
      }
    };
  }

  private async *listByDataManagerForAgriculturePagingPage(
    resourceGroupName: string,
    dataManagerForAgricultureResourceName: string,
    options?: SolutionsListByDataManagerForAgricultureOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Solution[]> {
    let result: SolutionsListByDataManagerForAgricultureResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByDataManagerForAgriculture(
        resourceGroupName,
        dataManagerForAgricultureResourceName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByDataManagerForAgricultureNext(
        resourceGroupName,
        dataManagerForAgricultureResourceName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByDataManagerForAgriculturePagingAll(
    resourceGroupName: string,
    dataManagerForAgricultureResourceName: string,
    options?: SolutionsListByDataManagerForAgricultureOptionalParams
  ): AsyncIterableIterator<Solution> {
    for await (const page of this.listByDataManagerForAgriculturePagingPage(
      resourceGroupName,
      dataManagerForAgricultureResourceName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Get installed Solutions details.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
   * @param options The options parameters.
   */
  private _listByDataManagerForAgriculture(
    resourceGroupName: string,
    dataManagerForAgricultureResourceName: string,
    options?: SolutionsListByDataManagerForAgricultureOptionalParams
  ): Promise<SolutionsListByDataManagerForAgricultureResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, dataManagerForAgricultureResourceName, options },
      listByDataManagerForAgricultureOperationSpec
    );
  }

  /**
   * Get installed Solution details by Solution id.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
   * @param solutionId SolutionId for Data Manager For Agriculture Resource.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    dataManagerForAgricultureResourceName: string,
    solutionId: string,
    options?: SolutionsGetOptionalParams
  ): Promise<SolutionsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        dataManagerForAgricultureResourceName,
        solutionId,
        options
      },
      getOperationSpec
    );
  }

  /**
   * Install Or Update Solution.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
   * @param solutionId SolutionId for Data Manager For Agriculture Resource.
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    dataManagerForAgricultureResourceName: string,
    solutionId: string,
    resource: Solution,
    options?: SolutionsCreateOrUpdateOptionalParams
  ): Promise<SolutionsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        dataManagerForAgricultureResourceName,
        solutionId,
        resource,
        options
      },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Uninstall Solution.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
   * @param solutionId SolutionId for Data Manager For Agriculture Resource.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    dataManagerForAgricultureResourceName: string,
    solutionId: string,
    options?: SolutionsDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        dataManagerForAgricultureResourceName,
        solutionId,
        options
      },
      deleteOperationSpec
    );
  }

  /**
   * ListByDataManagerForAgricultureNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByDataManagerForAgriculture method.
   * @param options The options parameters.
   */
  private _listByDataManagerForAgricultureNext(
    resourceGroupName: string,
    dataManagerForAgricultureResourceName: string,
    nextLink: string,
    options?: SolutionsListByDataManagerForAgricultureNextOptionalParams
  ): Promise<SolutionsListByDataManagerForAgricultureNextResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        dataManagerForAgricultureResourceName,
        nextLink,
        options
      },
      listByDataManagerForAgricultureNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByDataManagerForAgricultureOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AgFoodPlatform/farmBeats/{dataManagerForAgricultureResourceName}/solutions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SolutionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.maxPageSize,
    Parameters.skipToken,
    Parameters.solutionIds,
    Parameters.ids,
    Parameters.names,
    Parameters.propertyFilters,
    Parameters.statuses,
    Parameters.minCreatedDateTime,
    Parameters.maxCreatedDateTime,
    Parameters.minLastModifiedDateTime,
    Parameters.maxLastModifiedDateTime
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId1,
    Parameters.resourceGroupName,
    Parameters.dataManagerForAgricultureResourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AgFoodPlatform/farmBeats/{dataManagerForAgricultureResourceName}/solutions/{solutionId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Solution
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId1,
    Parameters.resourceGroupName,
    Parameters.dataManagerForAgricultureResourceName,
    Parameters.solutionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AgFoodPlatform/farmBeats/{dataManagerForAgricultureResourceName}/solutions/{solutionId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Solution
    },
    201: {
      bodyMapper: Mappers.Solution
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.resource4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId1,
    Parameters.resourceGroupName,
    Parameters.dataManagerForAgricultureResourceName,
    Parameters.solutionId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AgFoodPlatform/farmBeats/{dataManagerForAgricultureResourceName}/solutions/{solutionId}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId1,
    Parameters.resourceGroupName,
    Parameters.dataManagerForAgricultureResourceName,
    Parameters.solutionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByDataManagerForAgricultureNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SolutionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId1,
    Parameters.resourceGroupName,
    Parameters.dataManagerForAgricultureResourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
