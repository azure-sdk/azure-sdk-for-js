/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { AzureAgFoodPlatformRpServicePrivateEndpointConnections } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AgriFoodMgmtClient } from "../agriFoodMgmtClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  AzureAgFoodPlatformRPServicePrivateEndpointConnection,
  AzureAgFoodPlatformRpServicePrivateEndpointConnectionsListByDataManagerForAgricultureNextOptionalParams,
  AzureAgFoodPlatformRpServicePrivateEndpointConnectionsListByDataManagerForAgricultureOptionalParams,
  AzureAgFoodPlatformRpServicePrivateEndpointConnectionsListByDataManagerForAgricultureResponse,
  AzureAgFoodPlatformRpServicePrivateEndpointConnectionsGetOptionalParams,
  AzureAgFoodPlatformRpServicePrivateEndpointConnectionsGetResponse,
  AzureAgFoodPlatformRpServicePrivateEndpointConnectionsCreateOrUpdateOptionalParams,
  AzureAgFoodPlatformRpServicePrivateEndpointConnectionsCreateOrUpdateResponse,
  AzureAgFoodPlatformRpServicePrivateEndpointConnectionsDeleteOptionalParams,
  AzureAgFoodPlatformRpServicePrivateEndpointConnectionsListByDataManagerForAgricultureNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing AzureAgFoodPlatformRpServicePrivateEndpointConnections operations. */
export class AzureAgFoodPlatformRpServicePrivateEndpointConnectionsImpl
  implements AzureAgFoodPlatformRpServicePrivateEndpointConnections {
  private readonly client: AgriFoodMgmtClient;

  /**
   * Initialize a new instance of the class AzureAgFoodPlatformRpServicePrivateEndpointConnections class.
   * @param client Reference to the service client
   */
  constructor(client: AgriFoodMgmtClient) {
    this.client = client;
  }

  /**
   * Get list of Private endpoint connections.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
   * @param options The options parameters.
   */
  public listByDataManagerForAgriculture(
    resourceGroupName: string,
    dataManagerForAgricultureResourceName: string,
    options?: AzureAgFoodPlatformRpServicePrivateEndpointConnectionsListByDataManagerForAgricultureOptionalParams
  ): PagedAsyncIterableIterator<
    AzureAgFoodPlatformRPServicePrivateEndpointConnection
  > {
    const iter = this.listByDataManagerForAgriculturePagingAll(
      resourceGroupName,
      dataManagerForAgricultureResourceName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByDataManagerForAgriculturePagingPage(
          resourceGroupName,
          dataManagerForAgricultureResourceName,
          options,
          settings
        );
      }
    };
  }

  private async *listByDataManagerForAgriculturePagingPage(
    resourceGroupName: string,
    dataManagerForAgricultureResourceName: string,
    options?: AzureAgFoodPlatformRpServicePrivateEndpointConnectionsListByDataManagerForAgricultureOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<
    AzureAgFoodPlatformRPServicePrivateEndpointConnection[]
  > {
    let result: AzureAgFoodPlatformRpServicePrivateEndpointConnectionsListByDataManagerForAgricultureResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByDataManagerForAgriculture(
        resourceGroupName,
        dataManagerForAgricultureResourceName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByDataManagerForAgricultureNext(
        resourceGroupName,
        dataManagerForAgricultureResourceName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByDataManagerForAgriculturePagingAll(
    resourceGroupName: string,
    dataManagerForAgricultureResourceName: string,
    options?: AzureAgFoodPlatformRpServicePrivateEndpointConnectionsListByDataManagerForAgricultureOptionalParams
  ): AsyncIterableIterator<
    AzureAgFoodPlatformRPServicePrivateEndpointConnection
  > {
    for await (const page of this.listByDataManagerForAgriculturePagingPage(
      resourceGroupName,
      dataManagerForAgricultureResourceName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Get list of Private endpoint connections.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
   * @param options The options parameters.
   */
  private _listByDataManagerForAgriculture(
    resourceGroupName: string,
    dataManagerForAgricultureResourceName: string,
    options?: AzureAgFoodPlatformRpServicePrivateEndpointConnectionsListByDataManagerForAgricultureOptionalParams
  ): Promise<
    AzureAgFoodPlatformRpServicePrivateEndpointConnectionsListByDataManagerForAgricultureResponse
  > {
    return this.client.sendOperationRequest(
      { resourceGroupName, dataManagerForAgricultureResourceName, options },
      listByDataManagerForAgricultureOperationSpec
    );
  }

  /**
   * Get Private endpoint connection object.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
   * @param privateEndpointConnectionName Private endpoint connection name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    dataManagerForAgricultureResourceName: string,
    privateEndpointConnectionName: string,
    options?: AzureAgFoodPlatformRpServicePrivateEndpointConnectionsGetOptionalParams
  ): Promise<
    AzureAgFoodPlatformRpServicePrivateEndpointConnectionsGetResponse
  > {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        dataManagerForAgricultureResourceName,
        privateEndpointConnectionName,
        options
      },
      getOperationSpec
    );
  }

  /**
   * Approves or Rejects a Private endpoint connection request.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
   * @param privateEndpointConnectionName Private endpoint connection name.
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    dataManagerForAgricultureResourceName: string,
    privateEndpointConnectionName: string,
    resource: AzureAgFoodPlatformRPServicePrivateEndpointConnection,
    options?: AzureAgFoodPlatformRpServicePrivateEndpointConnectionsCreateOrUpdateOptionalParams
  ): Promise<
    AzureAgFoodPlatformRpServicePrivateEndpointConnectionsCreateOrUpdateResponse
  > {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        dataManagerForAgricultureResourceName,
        privateEndpointConnectionName,
        resource,
        options
      },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Delete Private endpoint connection request.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
   * @param privateEndpointConnectionName Private endpoint connection name.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    dataManagerForAgricultureResourceName: string,
    privateEndpointConnectionName: string,
    options?: AzureAgFoodPlatformRpServicePrivateEndpointConnectionsDeleteOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        dataManagerForAgricultureResourceName,
        privateEndpointConnectionName,
        options
      },
      spec: deleteOperationSpec
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete Private endpoint connection request.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
   * @param privateEndpointConnectionName Private endpoint connection name.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    dataManagerForAgricultureResourceName: string,
    privateEndpointConnectionName: string,
    options?: AzureAgFoodPlatformRpServicePrivateEndpointConnectionsDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      dataManagerForAgricultureResourceName,
      privateEndpointConnectionName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * ListByDataManagerForAgricultureNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByDataManagerForAgriculture method.
   * @param options The options parameters.
   */
  private _listByDataManagerForAgricultureNext(
    resourceGroupName: string,
    dataManagerForAgricultureResourceName: string,
    nextLink: string,
    options?: AzureAgFoodPlatformRpServicePrivateEndpointConnectionsListByDataManagerForAgricultureNextOptionalParams
  ): Promise<
    AzureAgFoodPlatformRpServicePrivateEndpointConnectionsListByDataManagerForAgricultureNextResponse
  > {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        dataManagerForAgricultureResourceName,
        nextLink,
        options
      },
      listByDataManagerForAgricultureNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByDataManagerForAgricultureOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AgFoodPlatform/farmBeats/{dataManagerForAgricultureResourceName}/privateEndpointConnections",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper:
        Mappers.AzureAgFoodPlatformRPServicePrivateEndpointConnectionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId1,
    Parameters.resourceGroupName,
    Parameters.dataManagerForAgricultureResourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AgFoodPlatform/farmBeats/{dataManagerForAgricultureResourceName}/privateEndpointConnections/{privateEndpointConnectionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AzureAgFoodPlatformRPServicePrivateEndpointConnection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId1,
    Parameters.resourceGroupName,
    Parameters.dataManagerForAgricultureResourceName,
    Parameters.privateEndpointConnectionName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AgFoodPlatform/farmBeats/{dataManagerForAgricultureResourceName}/privateEndpointConnections/{privateEndpointConnectionName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.AzureAgFoodPlatformRPServicePrivateEndpointConnection
    },
    201: {
      bodyMapper: Mappers.AzureAgFoodPlatformRPServicePrivateEndpointConnection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.resource3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId1,
    Parameters.resourceGroupName,
    Parameters.dataManagerForAgricultureResourceName,
    Parameters.privateEndpointConnectionName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AgFoodPlatform/farmBeats/{dataManagerForAgricultureResourceName}/privateEndpointConnections/{privateEndpointConnectionName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId1,
    Parameters.resourceGroupName,
    Parameters.dataManagerForAgricultureResourceName,
    Parameters.privateEndpointConnectionName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByDataManagerForAgricultureNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper:
        Mappers.AzureAgFoodPlatformRPServicePrivateEndpointConnectionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId1,
    Parameters.resourceGroupName,
    Parameters.dataManagerForAgricultureResourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
