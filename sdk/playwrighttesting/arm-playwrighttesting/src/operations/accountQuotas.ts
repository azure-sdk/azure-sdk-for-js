/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { AccountQuotas } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { PlaywrightTestingClient } from "../playwrightTestingClient";
import {
  AccountQuota,
  AccountQuotasListByAccountNextOptionalParams,
  AccountQuotasListByAccountOptionalParams,
  AccountQuotasListByAccountResponse,
  QuotaNames,
  AccountQuotasGetOptionalParams,
  AccountQuotasGetResponse,
  AccountQuotasListByAccountNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing AccountQuotas operations. */
export class AccountQuotasImpl implements AccountQuotas {
  private readonly client: PlaywrightTestingClient;

  /**
   * Initialize a new instance of the class AccountQuotas class.
   * @param client Reference to the service client
   */
  constructor(client: PlaywrightTestingClient) {
    this.client = client;
  }

  /**
   * List quotas for a given account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Name of account.
   * @param options The options parameters.
   */
  public listByAccount(
    resourceGroupName: string,
    accountName: string,
    options?: AccountQuotasListByAccountOptionalParams,
  ): PagedAsyncIterableIterator<AccountQuota> {
    const iter = this.listByAccountPagingAll(
      resourceGroupName,
      accountName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByAccountPagingPage(
          resourceGroupName,
          accountName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByAccountPagingPage(
    resourceGroupName: string,
    accountName: string,
    options?: AccountQuotasListByAccountOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<AccountQuota[]> {
    let result: AccountQuotasListByAccountResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByAccount(
        resourceGroupName,
        accountName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByAccountNext(
        resourceGroupName,
        accountName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByAccountPagingAll(
    resourceGroupName: string,
    accountName: string,
    options?: AccountQuotasListByAccountOptionalParams,
  ): AsyncIterableIterator<AccountQuota> {
    for await (const page of this.listByAccountPagingPage(
      resourceGroupName,
      accountName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List quotas for a given account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Name of account.
   * @param options The options parameters.
   */
  private _listByAccount(
    resourceGroupName: string,
    accountName: string,
    options?: AccountQuotasListByAccountOptionalParams,
  ): Promise<AccountQuotasListByAccountResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, options },
      listByAccountOperationSpec,
    );
  }

  /**
   * Get quota by name for an account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Name of account.
   * @param quotaName The Playwright service account quota name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    accountName: string,
    quotaName: QuotaNames,
    options?: AccountQuotasGetOptionalParams,
  ): Promise<AccountQuotasGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, quotaName, options },
      getOperationSpec,
    );
  }

  /**
   * ListByAccountNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Name of account.
   * @param nextLink The nextLink from the previous successful call to the ListByAccount method.
   * @param options The options parameters.
   */
  private _listByAccountNext(
    resourceGroupName: string,
    accountName: string,
    nextLink: string,
    options?: AccountQuotasListByAccountNextOptionalParams,
  ): Promise<AccountQuotasListByAccountNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, nextLink, options },
      listByAccountNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByAccountOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzurePlaywrightService/accounts/{accountName}/quotas",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AccountQuotaListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzurePlaywrightService/accounts/{accountName}/quotas/{quotaName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AccountQuota,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.quotaName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByAccountNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AccountQuotaListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
