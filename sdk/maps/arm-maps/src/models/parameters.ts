/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter,
} from "@azure/core-client";
import {
  MapsAccount as MapsAccountMapper,
  MapsAccountUpdateParameters as MapsAccountUpdateParametersMapper,
  AccountSasParameters as AccountSasParametersMapper,
  MapsKeySpecification as MapsKeySpecificationMapper,
  Creator as CreatorMapper,
  CreatorUpdateParameters as CreatorUpdateParametersMapper,
  PrivateEndpointConnection as PrivateEndpointConnectionMapper,
} from "../models/mappers";

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String",
    },
  },
};

export const mapsAccount: OperationParameter = {
  parameterPath: "mapsAccount",
  mapper: MapsAccountMapper,
};

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String",
    },
  },
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "Uuid",
    },
  },
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    constraints: {
      MaxLength: 90,
      MinLength: 1,
    },
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2024-01-01-preview",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String",
    },
  },
};

export const accountName: OperationURLParameter = {
  parameterPath: "accountName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z][a-zA-Z0-9-]{3,98}[a-zA-Z0-9]$"),
      MaxLength: 98,
      MinLength: 3,
    },
    serializedName: "accountName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const mapsAccountUpdateParameters: OperationParameter = {
  parameterPath: "mapsAccountUpdateParameters",
  mapper: MapsAccountUpdateParametersMapper,
};

export const mapsAccountSasParameters: OperationParameter = {
  parameterPath: "mapsAccountSasParameters",
  mapper: AccountSasParametersMapper,
};

export const keySpecification: OperationParameter = {
  parameterPath: "keySpecification",
  mapper: MapsKeySpecificationMapper,
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const creatorResource: OperationParameter = {
  parameterPath: "creatorResource",
  mapper: CreatorMapper,
};

export const creatorName: OperationURLParameter = {
  parameterPath: "creatorName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z][a-zA-Z0-9-]{3,98}[a-zA-Z0-9]$"),
      MaxLength: 98,
      MinLength: 3,
    },
    serializedName: "creatorName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const creatorUpdateParameters: OperationParameter = {
  parameterPath: "creatorUpdateParameters",
  mapper: CreatorUpdateParametersMapper,
};

export const privateLinkResourceName: OperationURLParameter = {
  parameterPath: "privateLinkResourceName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^.*$"),
    },
    serializedName: "privateLinkResourceName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const privateEndpointConnectionName: OperationURLParameter = {
  parameterPath: "privateEndpointConnectionName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z][a-zA-Z0-9-]{3,98}[a-zA-Z0-9]$"),
      MaxLength: 98,
      MinLength: 3,
    },
    serializedName: "privateEndpointConnectionName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const properties: OperationParameter = {
  parameterPath: "properties",
  mapper: PrivateEndpointConnectionMapper,
};
