/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { Inventory } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { HybridConnectivityManagementAPI } from "../hybridConnectivityManagementAPI";
import {
  InventoryResource,
  InventoryListByWidgetNextOptionalParams,
  InventoryListByWidgetOptionalParams,
  InventoryListByWidgetResponse,
  InventoryGetOptionalParams,
  InventoryGetResponse,
  InventoryListByWidgetNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Inventory operations. */
export class InventoryImpl implements Inventory {
  private readonly client: HybridConnectivityManagementAPI;

  /**
   * Initialize a new instance of the class Inventory class.
   * @param client Reference to the service client
   */
  constructor(client: HybridConnectivityManagementAPI) {
    this.client = client;
  }

  /**
   * List InventoryResource resources by SolutionConfiguration
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param solutionConfiguration Represent Solution Configuration Resource.
   * @param options The options parameters.
   */
  public listByWidget(
    resourceUri: string,
    solutionConfiguration: string,
    options?: InventoryListByWidgetOptionalParams,
  ): PagedAsyncIterableIterator<InventoryResource> {
    const iter = this.listByWidgetPagingAll(
      resourceUri,
      solutionConfiguration,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByWidgetPagingPage(
          resourceUri,
          solutionConfiguration,
          options,
          settings,
        );
      },
    };
  }

  private async *listByWidgetPagingPage(
    resourceUri: string,
    solutionConfiguration: string,
    options?: InventoryListByWidgetOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<InventoryResource[]> {
    let result: InventoryListByWidgetResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByWidget(
        resourceUri,
        solutionConfiguration,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByWidgetNext(
        resourceUri,
        solutionConfiguration,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByWidgetPagingAll(
    resourceUri: string,
    solutionConfiguration: string,
    options?: InventoryListByWidgetOptionalParams,
  ): AsyncIterableIterator<InventoryResource> {
    for await (const page of this.listByWidgetPagingPage(
      resourceUri,
      solutionConfiguration,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List InventoryResource resources by SolutionConfiguration
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param solutionConfiguration Represent Solution Configuration Resource.
   * @param options The options parameters.
   */
  private _listByWidget(
    resourceUri: string,
    solutionConfiguration: string,
    options?: InventoryListByWidgetOptionalParams,
  ): Promise<InventoryListByWidgetResponse> {
    return this.client.sendOperationRequest(
      { resourceUri, solutionConfiguration, options },
      listByWidgetOperationSpec,
    );
  }

  /**
   * Get a InventoryResource
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param solutionConfiguration Represent Solution Configuration Resource.
   * @param inventoryId Inventory resource
   * @param options The options parameters.
   */
  get(
    resourceUri: string,
    solutionConfiguration: string,
    inventoryId: string,
    options?: InventoryGetOptionalParams,
  ): Promise<InventoryGetResponse> {
    return this.client.sendOperationRequest(
      { resourceUri, solutionConfiguration, inventoryId, options },
      getOperationSpec,
    );
  }

  /**
   * ListByWidgetNext
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param solutionConfiguration Represent Solution Configuration Resource.
   * @param nextLink The nextLink from the previous successful call to the ListByWidget method.
   * @param options The options parameters.
   */
  private _listByWidgetNext(
    resourceUri: string,
    solutionConfiguration: string,
    nextLink: string,
    options?: InventoryListByWidgetNextOptionalParams,
  ): Promise<InventoryListByWidgetNextResponse> {
    return this.client.sendOperationRequest(
      { resourceUri, solutionConfiguration, nextLink, options },
      listByWidgetNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByWidgetOperationSpec: coreClient.OperationSpec = {
  path: "/{resourceUri}/providers/Microsoft.HybridConnectivity/solutionConfigurations/{solutionConfiguration}/inventory",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.InventoryResourceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceUri,
    Parameters.solutionConfiguration,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/{resourceUri}/providers/Microsoft.HybridConnectivity/solutionConfigurations/{solutionConfiguration}/inventory/{inventoryId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.InventoryResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceUri,
    Parameters.solutionConfiguration,
    Parameters.inventoryId,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByWidgetNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.InventoryResourceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.resourceUri,
    Parameters.solutionConfiguration,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
