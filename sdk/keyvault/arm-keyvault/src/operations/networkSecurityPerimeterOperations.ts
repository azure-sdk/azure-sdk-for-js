/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { NetworkSecurityPerimeterOperations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { KeyVaultManagementClient } from "../keyVaultManagementClient";
import {
  NetworkSecurityPerimeterConfiguration,
  NetworkSecurityPerimeterListConfigurationOptionalParams,
  NetworkSecurityPerimeterListConfigurationResponse,
  NetworkSecurityPerimeterGetConfigurationOptionalParams,
  NetworkSecurityPerimeterGetConfigurationResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing NetworkSecurityPerimeterOperations operations. */
export class NetworkSecurityPerimeterOperationsImpl
  implements NetworkSecurityPerimeterOperations
{
  private readonly client: KeyVaultManagementClient;

  /**
   * Initialize a new instance of the class NetworkSecurityPerimeterOperations class.
   * @param client Reference to the service client
   */
  constructor(client: KeyVaultManagementClient) {
    this.client = client;
  }

  /**
   * The List operation gets information about the network security perimeter associations for the key
   * vault.
   * @param resourceGroupName Name of the resource group that contains the key vault.
   * @param vaultName The name of the key vault.
   * @param options The options parameters.
   */
  public listConfiguration(
    resourceGroupName: string,
    vaultName: string,
    options?: NetworkSecurityPerimeterListConfigurationOptionalParams,
  ): PagedAsyncIterableIterator<NetworkSecurityPerimeterConfiguration> {
    const iter = this.listConfigurationPagingAll(
      resourceGroupName,
      vaultName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listConfigurationPagingPage(
          resourceGroupName,
          vaultName,
          options,
          settings,
        );
      },
    };
  }

  private async *listConfigurationPagingPage(
    resourceGroupName: string,
    vaultName: string,
    options?: NetworkSecurityPerimeterListConfigurationOptionalParams,
    _settings?: PageSettings,
  ): AsyncIterableIterator<NetworkSecurityPerimeterConfiguration[]> {
    let result: NetworkSecurityPerimeterListConfigurationResponse;
    result = await this._listConfiguration(
      resourceGroupName,
      vaultName,
      options,
    );
    yield result.value || [];
  }

  private async *listConfigurationPagingAll(
    resourceGroupName: string,
    vaultName: string,
    options?: NetworkSecurityPerimeterListConfigurationOptionalParams,
  ): AsyncIterableIterator<NetworkSecurityPerimeterConfiguration> {
    for await (const page of this.listConfigurationPagingPage(
      resourceGroupName,
      vaultName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * The List operation gets information about the network security perimeter associations for the key
   * vault.
   * @param resourceGroupName Name of the resource group that contains the key vault.
   * @param vaultName The name of the key vault.
   * @param options The options parameters.
   */
  private _listConfiguration(
    resourceGroupName: string,
    vaultName: string,
    options?: NetworkSecurityPerimeterListConfigurationOptionalParams,
  ): Promise<NetworkSecurityPerimeterListConfigurationResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, vaultName, options },
      listConfigurationOperationSpec,
    );
  }

  /**
   * The Get operation gets information about the network security perimeter associations for the key
   * vault.
   * @param resourceGroupName Name of the resource group that contains the key vault.
   * @param vaultName The name of the key vault.
   * @param associationProxyName Association proxy name associated with the key vault.
   * @param options The options parameters.
   */
  getConfiguration(
    resourceGroupName: string,
    vaultName: string,
    associationProxyName: string,
    options?: NetworkSecurityPerimeterGetConfigurationOptionalParams,
  ): Promise<NetworkSecurityPerimeterGetConfigurationResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, vaultName, associationProxyName, options },
      getConfigurationOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listConfigurationOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}/networkSecurityPerimeterConfigurations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NetworkSecurityPerimeterConfigurationListResult,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vaultName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getConfigurationOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}/networkSecurityPerimeterConfigurations/{associationProxyName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NetworkSecurityPerimeterConfiguration,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vaultName,
    Parameters.associationProxyName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
