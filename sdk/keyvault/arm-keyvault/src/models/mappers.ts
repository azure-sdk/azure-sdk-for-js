/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      isDataAction: {
        serializedName: "isDataAction",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay",
        },
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      actionType: {
        serializedName: "actionType",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail",
        },
      },
    },
  },
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail",
            },
          },
        },
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo",
            },
          },
        },
      },
    },
  },
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } },
        },
      },
    },
  },
};

export const CheckMhsmNameAvailabilityParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckMhsmNameAvailabilityParameters",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const CheckMhsmNameAvailabilityResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckMhsmNameAvailabilityResult",
    modelProperties: {
      nameAvailable: {
        serializedName: "nameAvailable",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      reason: {
        serializedName: "reason",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const VaultCheckNameAvailabilityParameters: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "VaultCheckNameAvailabilityParameters",
      modelProperties: {
        name: {
          serializedName: "name",
          required: true,
          type: {
            name: "String",
          },
        },
        type: {
          defaultValue: "Microsoft.KeyVault/vaults",
          isConstant: true,
          serializedName: "type",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const CheckNameAvailabilityResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityResult",
    modelProperties: {
      nameAvailable: {
        serializedName: "nameAvailable",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      reason: {
        serializedName: "reason",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["AccountNameInvalid", "AlreadyExists"],
        },
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const DeletedManagedHsmListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeletedManagedHsmListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeletedManagedHsm",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData",
        },
      },
    },
  },
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String",
        },
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String",
        },
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime",
        },
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String",
        },
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String",
        },
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const DeletedVaultListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeletedVaultListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeletedVault",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ManagedHsmListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedHsmListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedHsm",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const MhsmNetworkRuleSet: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MhsmNetworkRuleSet",
    modelProperties: {
      bypass: {
        serializedName: "bypass",
        type: {
          name: "String",
        },
      },
      defaultAction: {
        serializedName: "defaultAction",
        type: {
          name: "String",
        },
      },
      ipRules: {
        serializedName: "ipRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MhsmipRule",
            },
          },
        },
      },
      virtualNetworkRules: {
        serializedName: "virtualNetworkRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MhsmVirtualNetworkRule",
            },
          },
        },
      },
    },
  },
};

export const MhsmipRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MhsmipRule",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const MhsmVirtualNetworkRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MhsmVirtualNetworkRule",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const MhsmGeoReplicatedRegion: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MhsmGeoReplicatedRegion",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      isPrimary: {
        serializedName: "isPrimary",
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const MhsmPrivateEndpointConnectionItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MhsmPrivateEndpointConnectionItem",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String",
        },
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String",
        },
      },
      privateEndpoint: {
        serializedName: "properties.privateEndpoint",
        type: {
          name: "Composite",
          className: "MhsmPrivateEndpoint",
        },
      },
      privateLinkServiceConnectionState: {
        serializedName: "properties.privateLinkServiceConnectionState",
        type: {
          name: "Composite",
          className: "MhsmPrivateLinkServiceConnectionState",
        },
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const MhsmPrivateEndpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MhsmPrivateEndpoint",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const MhsmPrivateLinkServiceConnectionState: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "MhsmPrivateLinkServiceConnectionState",
      modelProperties: {
        status: {
          serializedName: "status",
          type: {
            name: "String",
          },
        },
        description: {
          serializedName: "description",
          type: {
            name: "String",
          },
        },
        actionsRequired: {
          serializedName: "actionsRequired",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const ManagedHSMSecurityDomainProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedHSMSecurityDomainProperties",
    modelProperties: {
      activationStatus: {
        serializedName: "activationStatus",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      activationStatusMessage: {
        serializedName: "activationStatusMessage",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const VaultListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VaultListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Vault",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Sku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      family: {
        serializedName: "family",
        required: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["standard", "premium"],
        },
      },
    },
  },
};

export const AccessPolicyEntry: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccessPolicyEntry",
    modelProperties: {
      tenantId: {
        serializedName: "tenantId",
        required: true,
        type: {
          name: "Uuid",
        },
      },
      objectId: {
        serializedName: "objectId",
        required: true,
        type: {
          name: "String",
        },
      },
      applicationId: {
        serializedName: "applicationId",
        type: {
          name: "Uuid",
        },
      },
      permissions: {
        serializedName: "permissions",
        type: {
          name: "Composite",
          className: "Permissions",
        },
      },
    },
  },
};

export const Permissions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Permissions",
    modelProperties: {
      keys: {
        serializedName: "keys",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      secrets: {
        serializedName: "secrets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      certificates: {
        serializedName: "certificates",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      storage: {
        serializedName: "storage",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const NetworkRuleSet: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkRuleSet",
    modelProperties: {
      bypass: {
        serializedName: "bypass",
        type: {
          name: "String",
        },
      },
      defaultAction: {
        serializedName: "defaultAction",
        type: {
          name: "String",
        },
      },
      ipRules: {
        serializedName: "ipRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IPRule",
            },
          },
        },
      },
      virtualNetworkRules: {
        serializedName: "virtualNetworkRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualNetworkRule",
            },
          },
        },
      },
    },
  },
};

export const IPRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IPRule",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const VirtualNetworkRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworkRule",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String",
        },
      },
      ignoreMissingVnetServiceEndpoint: {
        serializedName: "ignoreMissingVnetServiceEndpoint",
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const PrivateEndpointConnectionItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionItem",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String",
        },
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String",
        },
      },
      privateEndpoint: {
        serializedName: "properties.privateEndpoint",
        type: {
          name: "Composite",
          className: "PrivateEndpoint",
        },
      },
      privateLinkServiceConnectionState: {
        serializedName: "properties.privateLinkServiceConnectionState",
        type: {
          name: "Composite",
          className: "PrivateLinkServiceConnectionState",
        },
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PrivateEndpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpoint",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PrivateLinkServiceConnectionState: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkServiceConnectionState",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "description",
        type: {
          name: "String",
        },
      },
      actionsRequired: {
        serializedName: "actionsRequired",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const MhsmPrivateEndpointConnectionListResult: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "MhsmPrivateEndpointConnectionListResult",
      modelProperties: {
        value: {
          serializedName: "value",
          required: true,
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "Composite",
                className: "MhsmPrivateEndpointConnection",
              },
            },
          },
        },
        nextLink: {
          serializedName: "nextLink",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const MhsmPrivateLinkResourceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MhsmPrivateLinkResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MhsmPrivateLinkResource",
            },
          },
        },
      },
    },
  },
};

export const ManagedHsmResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedHsmResource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "ManagedHsmSku",
        },
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData",
        },
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity",
        },
      },
    },
  },
};

export const ManagedHsmSku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedHsmSku",
    modelProperties: {
      family: {
        serializedName: "family",
        required: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "Standard_B1",
            "Custom_B32",
            "Custom_B6",
            "Custom_C42",
            "Custom_C10",
          ],
        },
      },
    },
  },
};

export const ManagedServiceIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedServiceIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "Uuid",
        },
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "Uuid",
        },
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String",
        },
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "UserAssignedIdentity" },
          },
        },
      },
    },
  },
};

export const UserAssignedIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserAssignedIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "Uuid",
        },
      },
      clientId: {
        serializedName: "clientId",
        readOnly: true,
        type: {
          name: "Uuid",
        },
      },
    },
  },
};

export const MhsmRegionsListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MhsmRegionsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MhsmGeoReplicatedRegion",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const VaultPatchParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VaultPatchParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "VaultPatchProperties",
        },
      },
    },
  },
};

export const VaultPatchProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VaultPatchProperties",
    modelProperties: {
      tenantId: {
        serializedName: "tenantId",
        type: {
          name: "Uuid",
        },
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku",
        },
      },
      accessPolicies: {
        serializedName: "accessPolicies",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AccessPolicyEntry",
            },
          },
        },
      },
      enabledForDeployment: {
        serializedName: "enabledForDeployment",
        type: {
          name: "Boolean",
        },
      },
      enabledForDiskEncryption: {
        serializedName: "enabledForDiskEncryption",
        type: {
          name: "Boolean",
        },
      },
      enabledForTemplateDeployment: {
        serializedName: "enabledForTemplateDeployment",
        type: {
          name: "Boolean",
        },
      },
      enableSoftDelete: {
        serializedName: "enableSoftDelete",
        type: {
          name: "Boolean",
        },
      },
      enableRbacAuthorization: {
        serializedName: "enableRbacAuthorization",
        type: {
          name: "Boolean",
        },
      },
      softDeleteRetentionInDays: {
        serializedName: "softDeleteRetentionInDays",
        type: {
          name: "Number",
        },
      },
      createMode: {
        serializedName: "createMode",
        type: {
          name: "Enum",
          allowedValues: ["recover", "default"],
        },
      },
      enablePurgeProtection: {
        serializedName: "enablePurgeProtection",
        type: {
          name: "Boolean",
        },
      },
      networkAcls: {
        serializedName: "networkAcls",
        type: {
          name: "Composite",
          className: "NetworkRuleSet",
        },
      },
      publicNetworkAccess: {
        serializedName: "publicNetworkAccess",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const VaultAccessPolicyParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VaultAccessPolicyParameters",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      location: {
        serializedName: "location",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "VaultAccessPolicyProperties",
        },
      },
    },
  },
};

export const VaultAccessPolicyProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VaultAccessPolicyProperties",
    modelProperties: {
      accessPolicies: {
        serializedName: "accessPolicies",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AccessPolicyEntry",
            },
          },
        },
      },
    },
  },
};

export const PrivateEndpointConnectionListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PrivateLinkResourceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateLinkResource",
            },
          },
        },
      },
    },
  },
};

export const ResourceAutoGenerated: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceAutoGenerated",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      location: {
        serializedName: "location",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      tags: {
        serializedName: "tags",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
    },
  },
};

export const SecretListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecretListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Secret",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Attributes: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Attributes",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean",
        },
      },
      nbf: {
        serializedName: "nbf",
        type: {
          name: "UnixTime",
        },
      },
      exp: {
        serializedName: "exp",
        type: {
          name: "UnixTime",
        },
      },
      created: {
        serializedName: "created",
        readOnly: true,
        type: {
          name: "UnixTime",
        },
      },
      updated: {
        serializedName: "updated",
        readOnly: true,
        type: {
          name: "UnixTime",
        },
      },
    },
  },
};

export const SecretPatchParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecretPatchParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "SecretPatchProperties",
        },
      },
    },
  },
};

export const SecretPatchProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecretPatchProperties",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "String",
        },
      },
      contentType: {
        serializedName: "contentType",
        type: {
          name: "String",
        },
      },
      attributes: {
        serializedName: "attributes",
        type: {
          name: "Composite",
          className: "SecretAttributes",
        },
      },
    },
  },
};

export const Action: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Action",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "Enum",
          allowedValues: ["rotate", "notify"],
        },
      },
    },
  },
};

export const KeyAttributes: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KeyAttributes",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean",
        },
      },
      nbf: {
        serializedName: "nbf",
        type: {
          name: "Number",
        },
      },
      exp: {
        serializedName: "exp",
        type: {
          name: "Number",
        },
      },
      created: {
        serializedName: "created",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      updated: {
        serializedName: "updated",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      recoveryLevel: {
        serializedName: "recoveryLevel",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      exportable: {
        serializedName: "exportable",
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const RotationPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RotationPolicy",
    modelProperties: {
      attributes: {
        serializedName: "attributes",
        type: {
          name: "Composite",
          className: "KeyRotationPolicyAttributes",
        },
      },
      lifetimeActions: {
        serializedName: "lifetimeActions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LifetimeAction",
            },
          },
        },
      },
    },
  },
};

export const KeyRotationPolicyAttributes: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KeyRotationPolicyAttributes",
    modelProperties: {
      created: {
        serializedName: "created",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      updated: {
        serializedName: "updated",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      expiryTime: {
        serializedName: "expiryTime",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const LifetimeAction: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LifetimeAction",
    modelProperties: {
      trigger: {
        serializedName: "trigger",
        type: {
          name: "Composite",
          className: "Trigger",
        },
      },
      action: {
        serializedName: "action",
        type: {
          name: "Composite",
          className: "Action",
        },
      },
    },
  },
};

export const Trigger: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Trigger",
    modelProperties: {
      timeAfterCreate: {
        serializedName: "timeAfterCreate",
        type: {
          name: "String",
        },
      },
      timeBeforeExpiry: {
        serializedName: "timeBeforeExpiry",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const KeyReleasePolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KeyReleasePolicy",
    modelProperties: {
      contentType: {
        defaultValue: "application/json; charset=utf-8",
        serializedName: "contentType",
        type: {
          name: "String",
        },
      },
      data: {
        serializedName: "data",
        type: {
          name: "ByteArray",
        },
      },
    },
  },
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties,
    },
  },
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const MhsmPrivateLinkResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MhsmPrivateLinkResource",
    modelProperties: {
      ...ManagedHsmResource.type.modelProperties,
      groupId: {
        serializedName: "properties.groupId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      requiredMembers: {
        serializedName: "properties.requiredMembers",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      requiredZoneNames: {
        serializedName: "properties.requiredZoneNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const PrivateLinkResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResource",
    modelProperties: {
      ...ResourceAutoGenerated.type.modelProperties,
      groupId: {
        serializedName: "properties.groupId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      requiredMembers: {
        serializedName: "properties.requiredMembers",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      requiredZoneNames: {
        serializedName: "properties.requiredZoneNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const Key: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Key",
    modelProperties: {
      ...ResourceAutoGenerated.type.modelProperties,
      attributes: {
        serializedName: "properties.attributes",
        type: {
          name: "Composite",
          className: "KeyAttributes",
        },
      },
      kty: {
        serializedName: "properties.kty",
        type: {
          name: "String",
        },
      },
      keyOps: {
        serializedName: "properties.keyOps",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      keySize: {
        serializedName: "properties.keySize",
        type: {
          name: "Number",
        },
      },
      curveName: {
        serializedName: "properties.curveName",
        type: {
          name: "String",
        },
      },
      keyUri: {
        serializedName: "properties.keyUri",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      keyUriWithVersion: {
        serializedName: "properties.keyUriWithVersion",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      rotationPolicy: {
        serializedName: "properties.rotationPolicy",
        type: {
          name: "Composite",
          className: "RotationPolicy",
        },
      },
      releasePolicy: {
        serializedName: "properties.release_policy",
        type: {
          name: "Composite",
          className: "KeyReleasePolicy",
        },
      },
    },
  },
};

export const SecretAttributes: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecretAttributes",
    modelProperties: {
      ...Attributes.type.modelProperties,
    },
  },
};

export const DeletedManagedHsm: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeletedManagedHsm",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      mhsmId: {
        serializedName: "properties.mhsmId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      location: {
        serializedName: "properties.location",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      deletionDate: {
        serializedName: "properties.deletionDate",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      scheduledPurgeDate: {
        serializedName: "properties.scheduledPurgeDate",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      purgeProtectionEnabled: {
        serializedName: "properties.purgeProtectionEnabled",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      tags: {
        serializedName: "properties.tags",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
    },
  },
};

export const DeletedVault: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeletedVault",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      vaultId: {
        serializedName: "properties.vaultId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      location: {
        serializedName: "properties.location",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      deletionDate: {
        serializedName: "properties.deletionDate",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      scheduledPurgeDate: {
        serializedName: "properties.scheduledPurgeDate",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      tags: {
        serializedName: "properties.tags",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      purgeProtectionEnabled: {
        serializedName: "properties.purgeProtectionEnabled",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const ManagedHsm: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedHsm",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      tenantId: {
        serializedName: "properties.tenantId",
        type: {
          name: "Uuid",
        },
      },
      initialAdminObjectIds: {
        serializedName: "properties.initialAdminObjectIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      hsmUri: {
        serializedName: "properties.hsmUri",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      enableSoftDelete: {
        defaultValue: true,
        serializedName: "properties.enableSoftDelete",
        type: {
          name: "Boolean",
        },
      },
      softDeleteRetentionInDays: {
        defaultValue: 90,
        serializedName: "properties.softDeleteRetentionInDays",
        type: {
          name: "Number",
        },
      },
      enablePurgeProtection: {
        defaultValue: true,
        serializedName: "properties.enablePurgeProtection",
        type: {
          name: "Boolean",
        },
      },
      createMode: {
        serializedName: "properties.createMode",
        type: {
          name: "Enum",
          allowedValues: ["recover", "default"],
        },
      },
      statusMessage: {
        serializedName: "properties.statusMessage",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      networkAcls: {
        serializedName: "properties.networkAcls",
        type: {
          name: "Composite",
          className: "MhsmNetworkRuleSet",
        },
      },
      regions: {
        serializedName: "properties.regions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MhsmGeoReplicatedRegion",
            },
          },
        },
      },
      privateEndpointConnections: {
        serializedName: "properties.privateEndpointConnections",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MhsmPrivateEndpointConnectionItem",
            },
          },
        },
      },
      publicNetworkAccess: {
        defaultValue: "Enabled",
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "String",
        },
      },
      scheduledPurgeDate: {
        serializedName: "properties.scheduledPurgeDate",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      securityDomainProperties: {
        serializedName: "properties.securityDomainProperties",
        type: {
          name: "Composite",
          className: "ManagedHSMSecurityDomainProperties",
        },
      },
    },
  },
};

export const Vault: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Vault",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      tenantId: {
        serializedName: "properties.tenantId",
        required: true,
        type: {
          name: "Uuid",
        },
      },
      sku: {
        serializedName: "properties.sku",
        type: {
          name: "Composite",
          className: "Sku",
        },
      },
      accessPolicies: {
        serializedName: "properties.accessPolicies",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AccessPolicyEntry",
            },
          },
        },
      },
      vaultUri: {
        serializedName: "properties.vaultUri",
        type: {
          name: "String",
        },
      },
      hsmPoolResourceId: {
        serializedName: "properties.hsmPoolResourceId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      enabledForDeployment: {
        serializedName: "properties.enabledForDeployment",
        type: {
          name: "Boolean",
        },
      },
      enabledForDiskEncryption: {
        serializedName: "properties.enabledForDiskEncryption",
        type: {
          name: "Boolean",
        },
      },
      enabledForTemplateDeployment: {
        serializedName: "properties.enabledForTemplateDeployment",
        type: {
          name: "Boolean",
        },
      },
      enableSoftDelete: {
        defaultValue: true,
        serializedName: "properties.enableSoftDelete",
        type: {
          name: "Boolean",
        },
      },
      softDeleteRetentionInDays: {
        defaultValue: 90,
        serializedName: "properties.softDeleteRetentionInDays",
        type: {
          name: "Number",
        },
      },
      enableRbacAuthorization: {
        serializedName: "properties.enableRbacAuthorization",
        type: {
          name: "Boolean",
        },
      },
      createMode: {
        serializedName: "properties.createMode",
        type: {
          name: "Enum",
          allowedValues: ["recover", "default"],
        },
      },
      enablePurgeProtection: {
        serializedName: "properties.enablePurgeProtection",
        type: {
          name: "Boolean",
        },
      },
      networkAcls: {
        serializedName: "properties.networkAcls",
        type: {
          name: "Composite",
          className: "NetworkRuleSet",
        },
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String",
        },
      },
      privateEndpointConnections: {
        serializedName: "properties.privateEndpointConnections",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnectionItem",
            },
          },
        },
      },
      publicNetworkAccess: {
        defaultValue: "enabled",
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const MhsmPrivateEndpointConnection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MhsmPrivateEndpointConnection",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      etag: {
        serializedName: "etag",
        type: {
          name: "String",
        },
      },
      privateEndpoint: {
        serializedName: "properties.privateEndpoint",
        type: {
          name: "Composite",
          className: "MhsmPrivateEndpoint",
        },
      },
      privateLinkServiceConnectionState: {
        serializedName: "properties.privateLinkServiceConnectionState",
        type: {
          name: "Composite",
          className: "MhsmPrivateLinkServiceConnectionState",
        },
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PrivateEndpointConnection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnection",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      etag: {
        serializedName: "etag",
        type: {
          name: "String",
        },
      },
      privateEndpoint: {
        serializedName: "properties.privateEndpoint",
        type: {
          name: "Composite",
          className: "PrivateEndpoint",
        },
      },
      privateLinkServiceConnectionState: {
        serializedName: "properties.privateLinkServiceConnectionState",
        type: {
          name: "Composite",
          className: "PrivateLinkServiceConnectionState",
        },
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Secret: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Secret",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      value: {
        serializedName: "properties.value",
        type: {
          name: "String",
        },
      },
      contentType: {
        serializedName: "properties.contentType",
        type: {
          name: "String",
        },
      },
      attributes: {
        serializedName: "properties.attributes",
        type: {
          name: "Composite",
          className: "SecretAttributes",
        },
      },
      secretUri: {
        serializedName: "properties.secretUri",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      secretUriWithVersion: {
        serializedName: "properties.secretUriWithVersion",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ManagedHsmsPurgeDeletedHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedHsmsPurgeDeletedHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const ManagedHsmsCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedHsmsCreateOrUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const ManagedHsmsUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedHsmsUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const ManagedHsmsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedHsmsDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const VaultsPurgeDeletedHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VaultsPurgeDeletedHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const VaultsCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VaultsCreateOrUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const VaultsUpdateAccessPolicyHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VaultsUpdateAccessPolicyHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const MhsmPrivateEndpointConnectionsDeleteHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "MhsmPrivateEndpointConnectionsDeleteHeaders",
      modelProperties: {
        location: {
          serializedName: "location",
          type: {
            name: "String",
          },
        },
        retryAfter: {
          serializedName: "retry-after",
          type: {
            name: "Number",
          },
        },
      },
    },
  };

export const PrivateEndpointConnectionsDeleteHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "PrivateEndpointConnectionsDeleteHeaders",
      modelProperties: {
        location: {
          serializedName: "location",
          type: {
            name: "String",
          },
        },
        retryAfter: {
          serializedName: "retry-after",
          type: {
            name: "Number",
          },
        },
      },
    },
  };
