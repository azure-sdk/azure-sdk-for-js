/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of results. */
export interface OperationListResult {
  /**
   * List of operations supported by the resource provider
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Operation[];
  /**
   * URL to get the next set of operation list results (if there are any).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Details of a REST API operation, returned from the Resource Provider Operations API */
export interface Operation {
  /**
   * The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for ARM/control-plane operations.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isDataAction?: boolean;
  /** Localized display information for this particular operation. */
  display?: OperationDisplay;
  /**
   * The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is "user,system"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly origin?: Origin;
  /**
   * Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly actionType?: ActionType;
}

/** Localized display information for this particular operation. */
export interface OperationDisplay {
  /**
   * The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft Compute".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provider?: string;
  /**
   * The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job Schedule Collections".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resource?: string;
  /**
   * The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operation?: string;
  /**
   * The short, localized friendly description of the operation; suitable for tool tips and detailed views.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export interface ErrorResponse {
  /** The error object. */
  error?: ErrorDetail;
}

/** The error detail. */
export interface ErrorDetail {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDetail[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
}

/** The parameters used to check the availability of the managed hsm name. */
export interface CheckMhsmNameAvailabilityParameters {
  /** The managed hsm name. */
  name: string;
}

/** The CheckMhsmNameAvailability operation response. */
export interface CheckMhsmNameAvailabilityResult {
  /**
   * A boolean value that indicates whether the name is available for you to use. If true, the name is available. If false, the name has already been taken or is invalid and cannot be used.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nameAvailable?: boolean;
  /**
   * The reason that a managed hsm name could not be used. The reason element is only returned if NameAvailable is false.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly reason?: Reason;
  /**
   * An error message explaining the Reason value in more detail.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
}

/** The parameters used to check the availability of the vault name. */
export interface VaultCheckNameAvailabilityParameters {
  /** The vault name. */
  name: string;
  /** The type of resource, Microsoft.KeyVault/vaults */
  type: "Microsoft.KeyVault/vaults";
}

/** The CheckNameAvailability operation response. */
export interface CheckNameAvailabilityResult {
  /**
   * A boolean value that indicates whether the name is available for you to use. If true, the name is available. If false, the name has already been taken or is invalid and cannot be used.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nameAvailable?: boolean;
  /**
   * The reason that a vault name could not be used. The Reason element is only returned if NameAvailable is false.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly reason?: KeyVaultNameUnavailableReason;
  /**
   * An error message explaining the Reason value in more detail.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
}

/** The response of a DeletedManagedHsm list operation. */
export interface DeletedManagedHsmListResult {
  /** The DeletedManagedHsm items on this page */
  value: DeletedManagedHsm[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export interface Resource {
  /**
   * Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Azure Resource Manager metadata containing createdBy and modifiedBy information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The timestamp of resource last modification (UTC) */
  lastModifiedAt?: Date;
}

/** The response of a DeletedVault list operation. */
export interface DeletedVaultListResult {
  /** The DeletedVault items on this page */
  value: DeletedVault[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** The response of a ManagedHsm list operation. */
export interface ManagedHsmListResult {
  /** The ManagedHsm items on this page */
  value: ManagedHsm[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** A set of rules governing the network accessibility of a managed hsm pool. */
export interface MhsmNetworkRuleSet {
  /** Tells what traffic can bypass network rules. This can be 'AzureServices' or 'None'.  If not specified the default is 'AzureServices'. */
  bypass?: NetworkRuleBypassOptions;
  /** The default action when no rule from ipRules and from virtualNetworkRules match. This is only used after the bypass property has been evaluated. */
  defaultAction?: NetworkRuleAction;
  /** The list of IP address rules. */
  ipRules?: MhsmipRule[];
  /** The list of virtual network rules. */
  virtualNetworkRules?: MhsmVirtualNetworkRule[];
}

/** A rule governing the accessibility of a managed HSM pool from a specific IP address or IP range. */
export interface MhsmipRule {
  /** An IPv4 address range in CIDR notation, such as '124.56.78.91' (simple IP address) or '124.56.78.0/24' (all addresses that start with 124.56.78). */
  value: string;
}

/** A rule governing the accessibility of a managed hsm pool from a specific virtual network. */
export interface MhsmVirtualNetworkRule {
  /** Full resource id of a vnet subnet, such as '/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1'. */
  id: string;
}

/** A region that this managed HSM Pool has been extended to. */
export interface MhsmGeoReplicatedRegion {
  /** Name of the geo replicated region. */
  name?: string;
  /**
   * Provisioning state of the geo replicated region.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: GeoReplicationRegionProvisioningState;
  /** A boolean value that indicates whether the region is the primary region or a secondary region. */
  isPrimary?: boolean;
}

/** Private endpoint connection item. */
export interface MhsmPrivateEndpointConnectionItem {
  /** Id of private endpoint connection. */
  id?: string;
  /** Modified whenever there is a change in the state of private endpoint connection. */
  etag?: string;
  /** Properties of the private endpoint object. */
  privateEndpoint?: MhsmPrivateEndpoint;
  /** Approval state of the private link connection. */
  privateLinkServiceConnectionState?: MhsmPrivateLinkServiceConnectionState;
  /**
   * Provisioning state of the private endpoint connection.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ManagedHsmPrivateEndpointConnectionProvisioningState;
}

/** Private endpoint object properties. */
export interface MhsmPrivateEndpoint {
  /**
   * Full identifier of the private endpoint resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
}

/** An object that represents the approval state of the private link connection. */
export interface MhsmPrivateLinkServiceConnectionState {
  /** Indicates whether the connection has been approved, rejected or removed by the key vault owner. */
  status?: ManagedHsmPrivateEndpointServiceConnectionStatus;
  /** The reason for approval or rejection. */
  description?: string;
  /** A message indicating if changes on the service provider require any updates on the consumer. */
  actionsRequired?: ActionsRequired;
}

/** The security domain properties of the managed hsm. */
export interface ManagedHSMSecurityDomainProperties {
  /**
   * Activation Status
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly activationStatus?: ActivationStatus;
  /**
   * Activation Status Message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly activationStatusMessage?: string;
}

/** The response of a Vault list operation. */
export interface VaultListResult {
  /** The Vault items on this page */
  value: Vault[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** SKU details */
export interface Sku {
  /** SKU family name */
  family: SkuFamily;
  /** SKU name to specify whether the key vault is a standard vault or a premium vault. */
  name: SkuName;
}

/** An identity that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID. */
export interface AccessPolicyEntry {
  /** The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault. */
  tenantId: string;
  /** The object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The object ID must be unique for the list of access policies. */
  objectId: string;
  /** Application ID of the client making request on behalf of a principal */
  applicationId?: string;
  /** Permissions the identity has for keys, secrets and certificates. */
  permissions: Permissions;
}

/** Permissions the identity has for keys, secrets, certificates and storage. */
export interface Permissions {
  /** Permissions to keys */
  keys?: KeyPermissions[];
  /** Permissions to secrets */
  secrets?: SecretPermissions[];
  /** Permissions to certificates */
  certificates?: CertificatePermissions[];
  /** Permissions to storage accounts */
  storage?: StoragePermissions[];
}

/** A set of rules governing the network accessibility of a vault. */
export interface NetworkRuleSet {
  /** Tells what traffic can bypass network rules. This can be 'AzureServices' or 'None'.  If not specified the default is 'AzureServices'. */
  bypass?: KeyVaultNetworkRuleBypassOption;
  /** The default action when no rule from ipRules and from virtualNetworkRules match. This is only used after the bypass property has been evaluated. */
  defaultAction?: KeyVaultNetworkRuleAction;
  /** The list of IP address rules. */
  ipRules?: IPRule[];
  /** The list of virtual network rules. */
  virtualNetworkRules?: VirtualNetworkRule[];
}

/** A rule governing the accessibility of a vault from a specific ip address or ip range. */
export interface IPRule {
  /** An IPv4 address range in CIDR notation, such as '124.56.78.91' (simple IP address) or '124.56.78.0/24' (all addresses that start with 124.56.78). */
  value: string;
}

/** A rule governing the accessibility of a vault from a specific virtual network. */
export interface VirtualNetworkRule {
  /** Full resource id of a vnet subnet, such as '/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1'. */
  id: string;
  /** Property to specify whether NRP will ignore the check if parent subnet has serviceEndpoints configured. */
  ignoreMissingVnetServiceEndpoint?: boolean;
}

/** Private endpoint connection item. */
export interface PrivateEndpointConnectionItem {
  /** Id of private endpoint connection. */
  id?: string;
  /** Modified whenever there is a change in the state of private endpoint connection. */
  etag?: string;
  /** Properties of the private endpoint object. */
  privateEndpoint?: PrivateEndpoint;
  /** Approval state of the private link connection. */
  privateLinkServiceConnectionState?: PrivateLinkServiceConnectionState;
  /**
   * Provisioning state of the private endpoint connection.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: PrivateEndpointConnectionProvisioningState;
}

/** Private endpoint object properties. */
export interface PrivateEndpoint {
  /**
   * Full identifier of the private endpoint resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
}

/** An object that represents the approval state of the private link connection. */
export interface PrivateLinkServiceConnectionState {
  /** Indicates whether the connection has been approved, rejected or removed by the key vault owner. */
  status?: PrivateEndpointServiceConnectionStatus;
  /** The reason for approval or rejection. */
  description?: string;
  /** A message indicating if changes on the service provider require any updates on the consumer. */
  actionsRequired?: KeyVaultActionsRequiredMessage;
}

/** The response of a MhsmPrivateEndpointConnection list operation. */
export interface MhsmPrivateEndpointConnectionListResult {
  /** The MhsmPrivateEndpointConnection items on this page */
  value: MhsmPrivateEndpointConnection[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** A list of private link resources */
export interface MhsmPrivateLinkResourceListResult {
  /** Array of private link resources */
  value?: MhsmPrivateLinkResource[];
}

/** Managed HSM resource */
export interface ManagedHsmResource {
  /**
   * The Azure Resource Manager resource ID for the managed HSM Pool.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the managed HSM Pool.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The resource type of the managed HSM Pool.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** The supported Azure location where the managed HSM Pool should be created. */
  location?: string;
  /** SKU details */
  sku?: ManagedHsmSku;
  /** Resource tags */
  tags?: { [propertyName: string]: string };
  /**
   * Metadata pertaining to creation and last modification of the key vault resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** Managed service identity (system assigned and/or user assigned identities) */
  identity?: ManagedServiceIdentity;
}

/** SKU details */
export interface ManagedHsmSku {
  /** SKU Family of the managed HSM Pool */
  family: ManagedHsmSkuFamily;
  /** SKU of the managed HSM Pool */
  name: ManagedHsmSkuName;
}

/** Managed service identity (system assigned and/or user assigned identities) */
export interface ManagedServiceIdentity {
  /**
   * The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /** Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed). */
  type: ManagedServiceIdentityType;
  /** The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests. */
  userAssignedIdentities?: { [propertyName: string]: UserAssignedIdentity };
}

/** User assigned identity properties */
export interface UserAssignedIdentity {
  /**
   * The principal ID of the assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The client ID of the assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly clientId?: string;
}

/** List of regions associated with a managed HSM Pools */
export interface MhsmRegionsListResult {
  /** The MhsmGeoReplicatedRegion items on this page */
  value: MhsmGeoReplicatedRegion[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** Parameters for creating or updating a vault */
export interface VaultPatchParameters {
  /** The tags that will be assigned to the key vault. */
  tags?: { [propertyName: string]: string };
  /** Properties of the vault */
  properties?: VaultPatchProperties;
}

/** Properties of the vault */
export interface VaultPatchProperties {
  /** The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault. */
  tenantId?: string;
  /** SKU details */
  sku?: Sku;
  /** An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID. */
  accessPolicies?: AccessPolicyEntry[];
  /** Property to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault. */
  enabledForDeployment?: boolean;
  /** Property to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys. */
  enabledForDiskEncryption?: boolean;
  /** Property to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault. */
  enabledForTemplateDeployment?: boolean;
  /** Property to specify whether the 'soft delete' functionality is enabled for this key vault. Once set to true, it cannot be reverted to false. */
  enableSoftDelete?: boolean;
  /** Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be  ignored. When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the value of this property will not change. */
  enableRbacAuthorization?: boolean;
  /** softDelete data retention days. It accepts >=7 and <=90. */
  softDeleteRetentionInDays?: number;
  /** The vault's create mode to indicate whether the vault need to be recovered or not. */
  createMode?: KeyVaultPatchMode;
  /** Property specifying whether protection against purge is enabled for this vault. Setting this property to true activates protection against purge for this vault and its content - only the Key Vault service may initiate a hard, irrecoverable deletion. The setting is effective only if soft delete is also enabled. Enabling this functionality is irreversible - that is, the property does not accept false as its value. */
  enablePurgeProtection?: boolean;
  /** A collection of rules governing the accessibility of the vault from specific network locations. */
  networkAcls?: NetworkRuleSet;
  /** Property to specify whether the vault will accept traffic from public internet. If set to 'disabled' all traffic except private endpoint traffic and that that originates from trusted services will be blocked. This will override the set firewall rules, meaning that even if the firewall rules are present we will not honor the rules. */
  publicNetworkAccess?: string;
}

/** Parameters for updating the access policy in a vault */
export interface VaultAccessPolicyParameters {
  /**
   * The resource id of the access policy.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The resource name of the access policy.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The resource name of the access policy.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The resource type of the access policy.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly location?: string;
  /** Properties of the access policy */
  properties: VaultAccessPolicyProperties;
}

/** Properties of the vault access policy */
export interface VaultAccessPolicyProperties {
  /** An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID. */
  accessPolicies: AccessPolicyEntry[];
}

/** The response of a PrivateEndpointConnection list operation. */
export interface PrivateEndpointConnectionListResult {
  /** The PrivateEndpointConnection items on this page */
  value: PrivateEndpointConnection[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** A list of private link resources */
export interface PrivateLinkResourceListResult {
  /** Array of private link resources */
  value?: PrivateLinkResource[];
}

/** Key Vault resource */
export interface ResourceAutoGenerated {
  /**
   * Fully qualified identifier of the key vault resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Name of the key vault resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Resource type of the key vault resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Azure location of the key vault resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly location?: string;
  /**
   * Tags assigned to the key vault resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tags?: { [propertyName: string]: string };
}

/** The response of a Secret list operation. */
export interface SecretListResult {
  /** The Secret items on this page */
  value: Secret[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** The object attributes managed by the KeyVault service. */
export interface Attributes {
  /** Determines whether the object is enabled. */
  enabled?: boolean;
  /** Not before date in seconds since 1970-01-01T00:00:00Z. */
  nbf?: Date;
  /** Expiry date in seconds since 1970-01-01T00:00:00Z. */
  exp?: Date;
  /**
   * Creation time in seconds since 1970-01-01T00:00:00Z.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly created?: Date;
  /**
   * Last updated time in seconds since 1970-01-01T00:00:00Z.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly updated?: Date;
}

/** Parameters for patching a secret */
export interface SecretPatchParameters {
  /** The tags that will be assigned to the secret. */
  tags?: { [propertyName: string]: string };
  /** Properties of the secret */
  properties?: SecretPatchProperties;
}

/** Properties of the secret */
export interface SecretPatchProperties {
  /** The value of the secret. */
  value?: string;
  /** The content type of the secret. */
  contentType?: string;
  /** The attributes of the secret. */
  attributes?: SecretAttributes;
}

export interface Action {
  /** The type of action. */
  type?: KeyRotationPolicyActionType;
}

/** The object attributes managed by the Azure Key Vault service. */
export interface KeyAttributes {
  /** Determines whether or not the object is enabled. */
  enabled?: boolean;
  /** Not before date in seconds since 1970-01-01T00:00:00Z. */
  nbf?: number;
  /** Expiry date in seconds since 1970-01-01T00:00:00Z. */
  exp?: number;
  /**
   * Creation time in seconds since 1970-01-01T00:00:00Z.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly created?: number;
  /**
   * Last updated time in seconds since 1970-01-01T00:00:00Z.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly updated?: number;
  /**
   * The deletion recovery level currently in effect for the object. If it contains 'Purgeable', then the object can be permanently deleted by a privileged user; otherwise, only the system can purge the object at the end of the retention interval.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly recoveryLevel?: DeletionRecoveryLevel;
  /** Indicates if the private key can be exported. */
  exportable?: boolean;
}

export interface RotationPolicy {
  /** The attributes of key rotation policy. */
  attributes?: KeyRotationPolicyAttributes;
  /** The lifetimeActions for key rotation action. */
  lifetimeActions?: LifetimeAction[];
}

export interface KeyRotationPolicyAttributes {
  /**
   * Creation time in seconds since 1970-01-01T00:00:00Z.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly created?: number;
  /**
   * Last updated time in seconds since 1970-01-01T00:00:00Z.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly updated?: number;
  /** The expiration time for the new key version. It should be in ISO8601 format. Eg: 'P90D', 'P1Y'. */
  expiryTime?: string;
}

export interface LifetimeAction {
  /** The trigger of key rotation policy lifetimeAction. */
  trigger?: Trigger;
  /** The action of key rotation policy lifetimeAction. */
  action?: Action;
}

export interface Trigger {
  /** The time duration after key creation to rotate the key. It only applies to rotate. It will be in ISO 8601 duration format. Eg: 'P90D', 'P1Y'. */
  timeAfterCreate?: string;
  /** The time duration before key expiring to rotate or notify. It will be in ISO 8601 duration format. Eg: 'P90D', 'P1Y'. */
  timeBeforeExpiry?: string;
}

export interface KeyReleasePolicy {
  /** Content type and version of key release policy */
  contentType?: string;
  /** Blob encoding the policy rules under which the key can be released. */
  data?: Uint8Array;
}

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export interface ProxyResource extends Resource {}

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export interface TrackedResource extends Resource {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The geo-location where the resource lives */
  location: string;
}

/** A private link resource */
export interface MhsmPrivateLinkResource extends ManagedHsmResource {
  /**
   * Group identifier of private link resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly groupId?: string;
  /**
   * Required member names of private link resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly requiredMembers?: string[];
  /** Required DNS zone names of the the private link resource. */
  requiredZoneNames?: string[];
}

/** A private link resource */
export interface PrivateLinkResource extends ResourceAutoGenerated {
  /**
   * Group identifier of private link resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly groupId?: string;
  /**
   * Required member names of private link resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly requiredMembers?: string[];
  /** Required DNS zone names of the the private link resource. */
  requiredZoneNames?: string[];
}

/** The key resource. */
export interface Key extends ResourceAutoGenerated {
  /** The attributes of the key. */
  attributes?: KeyAttributes;
  /** The type of the key. For valid values, see JsonWebKeyType. */
  kty?: JsonWebKeyType;
  keyOps?: JsonWebKeyOperation[];
  /** The key size in bits. For example: 2048, 3072, or 4096 for RSA. Default for RSA and RSA-HSM keys is 2048. Exception made for bring your own key (BYOK), key exchange keys default to 4096. */
  keySize?: number;
  /** The elliptic curve name. For valid values, see JsonWebKeyCurveName. Default for EC and EC-HSM keys is P-256 */
  curveName?: JsonWebKeyCurveName;
  /**
   * The URI to retrieve the current version of the key.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly keyUri?: string;
  /**
   * The URI to retrieve the specific version of the key.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly keyUriWithVersion?: string;
  /** Key rotation policy in response. It will be used for both output and input. Omitted if empty */
  rotationPolicy?: RotationPolicy;
  /** Key release policy in response. It will be used for both output and input. Omitted if empty */
  releasePolicy?: KeyReleasePolicy;
}

/** The secret management attributes. */
export interface SecretAttributes extends Attributes {}

/** Concrete proxy resource types can be created by aliasing this type using a specific property type. */
export interface DeletedManagedHsm extends ProxyResource {
  /**
   * The resource id of the original managed HSM.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly mhsmId?: string;
  /**
   * The location of the original managed HSM.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly location?: string;
  /**
   * The deleted date.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly deletionDate?: Date;
  /**
   * The scheduled purged date.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly scheduledPurgeDate?: Date;
  /**
   * Purge protection status of the original managed HSM.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly purgeProtectionEnabled?: boolean;
  /**
   * Tags of the original managed HSM.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tags?: { [propertyName: string]: string };
}

/** Deleted vault information with extended details. */
export interface DeletedVault extends ProxyResource {
  /**
   * The resource id of the original vault.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly vaultId?: string;
  /**
   * The location of the original vault.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly location?: string;
  /**
   * The deleted date.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly deletionDate?: Date;
  /**
   * The scheduled purged date.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly scheduledPurgeDate?: Date;
  /**
   * Tags of the original vault.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tags?: { [propertyName: string]: string };
  /**
   * Purge protection status of the original vault.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly purgeProtectionEnabled?: boolean;
}

/** Resource information with extended details. */
export interface ManagedHsm extends TrackedResource {
  /** The Azure Active Directory tenant ID that should be used for authenticating requests to the managed HSM pool. */
  tenantId?: string;
  /** Array of initial administrators object ids for this managed hsm pool. */
  initialAdminObjectIds?: string[];
  /**
   * The URI of the managed hsm pool for performing operations on keys.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly hsmUri?: string;
  /** Property to specify whether the 'soft delete' functionality is enabled for this managed HSM pool. Soft delete is enabled by default for all managed HSMs and is immutable. */
  enableSoftDelete?: boolean;
  /** Soft deleted data retention days. When you delete an HSM or a key, it will remain recoverable for the configured retention period or for a default period of 90 days. It accepts values between 7 and 90. */
  softDeleteRetentionInDays?: number;
  /** Property specifying whether protection against purge is enabled for this managed HSM pool. Setting this property to true activates protection against purge for this managed HSM pool and its content - only the Managed HSM service may initiate a hard, irrecoverable deletion. Enabling this functionality is irreversible. */
  enablePurgeProtection?: boolean;
  /** The create mode to indicate whether the resource is being created or is being recovered from a deleted resource. */
  createMode?: CreateMode;
  /**
   * Resource Status Message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statusMessage?: string;
  /**
   * Provisioning state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ManagedHsmProvisioningState;
  /** Rules governing the accessibility of the key vault from specific network locations. */
  networkAcls?: MhsmNetworkRuleSet;
  /** List of all regions associated with the managed hsm pool. */
  regions?: MhsmGeoReplicatedRegion[];
  /**
   * List of private endpoint connections associated with the managed hsm pool.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly privateEndpointConnections?: MhsmPrivateEndpointConnectionItem[];
  /** Control permission to the managed HSM from public networks. */
  publicNetworkAccess?: PublicNetworkAccess;
  /**
   * The scheduled purge date in UTC.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly scheduledPurgeDate?: Date;
  /**
   * Managed HSM security domain properties.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly securityDomainProperties?: ManagedHSMSecurityDomainProperties;
}

/** Resource information with extended details. */
export interface Vault extends TrackedResource {
  /** The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault. */
  tenantId: string;
  /** SKU details */
  sku: Sku;
  /** An array of 0 to 1024 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID. When `createMode` is set to `recover`, access policies are not required. Otherwise, access policies are required. */
  accessPolicies?: AccessPolicyEntry[];
  /** The URI of the vault for performing operations on keys and secrets. */
  vaultUri?: string;
  /**
   * The resource id of HSM Pool.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly hsmPoolResourceId?: string;
  /** Property to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault. */
  enabledForDeployment?: boolean;
  /** Property to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys. */
  enabledForDiskEncryption?: boolean;
  /** Property to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault. */
  enabledForTemplateDeployment?: boolean;
  /** Property to specify whether the 'soft delete' functionality is enabled for this key vault. If it's not set to any value(true or false) when creating new key vault, it will be set to true by default. Once set to true, it cannot be reverted to false. */
  enableSoftDelete?: boolean;
  /** softDelete data retention days. It accepts >=7 and <=90. */
  softDeleteRetentionInDays?: number;
  /** Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be  ignored. When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the vault is created with the default value of false. Note that management actions are always authorized with RBAC. */
  enableRbacAuthorization?: boolean;
  /** The vault's create mode to indicate whether the vault need to be recovered or not. */
  createMode?: KeyVaultCreateMode;
  /** Property specifying whether protection against purge is enabled for this vault. Setting this property to true activates protection against purge for this vault and its content - only the Key Vault service may initiate a hard, irrecoverable deletion. The setting is effective only if soft delete is also enabled. Enabling this functionality is irreversible - that is, the property does not accept false as its value. */
  enablePurgeProtection?: boolean;
  /** Rules governing the accessibility of the key vault from specific network locations. */
  networkAcls?: NetworkRuleSet;
  /** Provisioning state of the vault. */
  provisioningState?: KeyVaultProvisioningState;
  /**
   * List of private endpoint connections associated with the key vault.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly privateEndpointConnections?: PrivateEndpointConnectionItem[];
  /** Property to specify whether the vault will accept traffic from public internet. If set to 'disabled' all traffic except private endpoint traffic and that that originates from trusted services will be blocked. This will override the set firewall rules, meaning that even if the firewall rules are present we will not honor the rules. */
  publicNetworkAccess?: string;
}

/** Private endpoint connection resource. */
export interface MhsmPrivateEndpointConnection extends TrackedResource {
  /** Modified whenever there is a change in the state of private endpoint connection. */
  etag?: string;
  /** Properties of the private endpoint object. */
  privateEndpoint?: MhsmPrivateEndpoint;
  /** Approval state of the private link connection. */
  privateLinkServiceConnectionState?: MhsmPrivateLinkServiceConnectionState;
  /**
   * Provisioning state of the private endpoint connection.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ManagedHsmPrivateEndpointConnectionProvisioningState;
}

/** Private endpoint connection resource. */
export interface PrivateEndpointConnection extends TrackedResource {
  /** Modified whenever there is a change in the state of private endpoint connection. */
  etag?: string;
  /** Properties of the private endpoint object. */
  privateEndpoint?: PrivateEndpoint;
  /** Approval state of the private link connection. */
  privateLinkServiceConnectionState?: PrivateLinkServiceConnectionState;
  /**
   * Provisioning state of the private endpoint connection.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: PrivateEndpointConnectionProvisioningState;
}

/** Resource information with extended details. */
export interface Secret extends TrackedResource {
  /** The value of the secret. NOTE: 'value' will never be returned from the service, as APIs using this model are is intended for internal use in ARM deployments. Users should use the data-plane REST service for interaction with vault secrets. */
  value?: string;
  /** The content type of the secret. */
  contentType?: string;
  /** The attributes of the secret. */
  attributes?: SecretAttributes;
  /**
   * The URI to retrieve the current version of the secret.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly secretUri?: string;
  /**
   * The URI to retrieve the specific version of the secret.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly secretUriWithVersion?: string;
}

/** Defines headers for ManagedHsms_purgeDeleted operation. */
export interface ManagedHsmsPurgeDeletedHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for ManagedHsms_createOrUpdate operation. */
export interface ManagedHsmsCreateOrUpdateHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for ManagedHsms_update operation. */
export interface ManagedHsmsUpdateHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for ManagedHsms_delete operation. */
export interface ManagedHsmsDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Vaults_purgeDeleted operation. */
export interface VaultsPurgeDeletedHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Vaults_createOrUpdate operation. */
export interface VaultsCreateOrUpdateHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Vaults_updateAccessPolicy operation. */
export interface VaultsUpdateAccessPolicyHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for MhsmPrivateEndpointConnections_delete operation. */
export interface MhsmPrivateEndpointConnectionsDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for PrivateEndpointConnections_delete operation. */
export interface PrivateEndpointConnectionsDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Known values of {@link Origin} that the service accepts. */
export enum KnownOrigin {
  /** User */
  User = "user",
  /** System */
  System = "system",
  /** UserSystem */
  UserSystem = "user,system",
}

/**
 * Defines values for Origin. \
 * {@link KnownOrigin} can be used interchangeably with Origin,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **user** \
 * **system** \
 * **user,system**
 */
export type Origin = string;

/** Known values of {@link ActionType} that the service accepts. */
export enum KnownActionType {
  /** Internal */
  Internal = "Internal",
}

/**
 * Defines values for ActionType. \
 * {@link KnownActionType} can be used interchangeably with ActionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Internal**
 */
export type ActionType = string;

/** Known values of {@link Reason} that the service accepts. */
export enum KnownReason {
  /** AccountNameInvalid */
  AccountNameInvalid = "AccountNameInvalid",
  /** AlreadyExists */
  AlreadyExists = "AlreadyExists",
}

/**
 * Defines values for Reason. \
 * {@link KnownReason} can be used interchangeably with Reason,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AccountNameInvalid** \
 * **AlreadyExists**
 */
export type Reason = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  /** User */
  User = "User",
  /** Application */
  Application = "Application",
  /** ManagedIdentity */
  ManagedIdentity = "ManagedIdentity",
  /** Key */
  Key = "Key",
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link ManagedHsmProvisioningState} that the service accepts. */
export enum KnownManagedHsmProvisioningState {
  /** The managed HSM Pool has been full provisioned. */
  Succeeded = "Succeeded",
  /** The managed HSM Pool is currently being provisioned. */
  Provisioning = "Provisioning",
  /** Provisioning of the managed HSM Pool has failed. */
  Failed = "Failed",
  /** The managed HSM Pool is currently being updated. */
  Updating = "Updating",
  /** The managed HSM Pool is currently being deleted. */
  Deleting = "Deleting",
  /** The managed HSM pool is ready for normal use. */
  Activated = "Activated",
  /** The managed HSM pool is waiting for a security domain restore action. */
  SecurityDomainRestore = "SecurityDomainRestore",
  /** The managed HSM pool is being restored from full HSM backup. */
  Restoring = "Restoring",
}

/**
 * Defines values for ManagedHsmProvisioningState. \
 * {@link KnownManagedHsmProvisioningState} can be used interchangeably with ManagedHsmProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded**: The managed HSM Pool has been full provisioned. \
 * **Provisioning**: The managed HSM Pool is currently being provisioned. \
 * **Failed**: Provisioning of the managed HSM Pool has failed. \
 * **Updating**: The managed HSM Pool is currently being updated. \
 * **Deleting**: The managed HSM Pool is currently being deleted. \
 * **Activated**: The managed HSM pool is ready for normal use. \
 * **SecurityDomainRestore**: The managed HSM pool is waiting for a security domain restore action. \
 * **Restoring**: The managed HSM pool is being restored from full HSM backup.
 */
export type ManagedHsmProvisioningState = string;

/** Known values of {@link NetworkRuleBypassOptions} that the service accepts. */
export enum KnownNetworkRuleBypassOptions {
  /** AzureServices */
  AzureServices = "AzureServices",
  /** None */
  None = "None",
}

/**
 * Defines values for NetworkRuleBypassOptions. \
 * {@link KnownNetworkRuleBypassOptions} can be used interchangeably with NetworkRuleBypassOptions,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AzureServices** \
 * **None**
 */
export type NetworkRuleBypassOptions = string;

/** Known values of {@link NetworkRuleAction} that the service accepts. */
export enum KnownNetworkRuleAction {
  /** Allow */
  Allow = "Allow",
  /** Deny */
  Deny = "Deny",
}

/**
 * Defines values for NetworkRuleAction. \
 * {@link KnownNetworkRuleAction} can be used interchangeably with NetworkRuleAction,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Allow** \
 * **Deny**
 */
export type NetworkRuleAction = string;

/** Known values of {@link GeoReplicationRegionProvisioningState} that the service accepts. */
export enum KnownGeoReplicationRegionProvisioningState {
  /** Preprovisioning */
  Preprovisioning = "Preprovisioning",
  /** Provisioning */
  Provisioning = "Provisioning",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Deleting */
  Deleting = "Deleting",
  /** Cleanup */
  Cleanup = "Cleanup",
}

/**
 * Defines values for GeoReplicationRegionProvisioningState. \
 * {@link KnownGeoReplicationRegionProvisioningState} can be used interchangeably with GeoReplicationRegionProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Preprovisioning** \
 * **Provisioning** \
 * **Succeeded** \
 * **Failed** \
 * **Deleting** \
 * **Cleanup**
 */
export type GeoReplicationRegionProvisioningState = string;

/** Known values of {@link ManagedHsmPrivateEndpointServiceConnectionStatus} that the service accepts. */
export enum KnownManagedHsmPrivateEndpointServiceConnectionStatus {
  /** Pending */
  Pending = "Pending",
  /** Approved */
  Approved = "Approved",
  /** Rejected */
  Rejected = "Rejected",
  /** Disconnected */
  Disconnected = "Disconnected",
}

/**
 * Defines values for ManagedHsmPrivateEndpointServiceConnectionStatus. \
 * {@link KnownManagedHsmPrivateEndpointServiceConnectionStatus} can be used interchangeably with ManagedHsmPrivateEndpointServiceConnectionStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Pending** \
 * **Approved** \
 * **Rejected** \
 * **Disconnected**
 */
export type ManagedHsmPrivateEndpointServiceConnectionStatus = string;

/** Known values of {@link ActionsRequired} that the service accepts. */
export enum KnownActionsRequired {
  /** None */
  None = "None",
}

/**
 * Defines values for ActionsRequired. \
 * {@link KnownActionsRequired} can be used interchangeably with ActionsRequired,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None**
 */
export type ActionsRequired = string;

/** Known values of {@link ManagedHsmPrivateEndpointConnectionProvisioningState} that the service accepts. */
export enum KnownManagedHsmPrivateEndpointConnectionProvisioningState {
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Creating */
  Creating = "Creating",
  /** Updating */
  Updating = "Updating",
  /** Deleting */
  Deleting = "Deleting",
  /** Failed */
  Failed = "Failed",
  /** Disconnected */
  Disconnected = "Disconnected",
}

/**
 * Defines values for ManagedHsmPrivateEndpointConnectionProvisioningState. \
 * {@link KnownManagedHsmPrivateEndpointConnectionProvisioningState} can be used interchangeably with ManagedHsmPrivateEndpointConnectionProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Creating** \
 * **Updating** \
 * **Deleting** \
 * **Failed** \
 * **Disconnected**
 */
export type ManagedHsmPrivateEndpointConnectionProvisioningState = string;

/** Known values of {@link PublicNetworkAccess} that the service accepts. */
export enum KnownPublicNetworkAccess {
  /** Enabled */
  Enabled = "Enabled",
  /** Disabled */
  Disabled = "Disabled",
}

/**
 * Defines values for PublicNetworkAccess. \
 * {@link KnownPublicNetworkAccess} can be used interchangeably with PublicNetworkAccess,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export type PublicNetworkAccess = string;

/** Known values of {@link ActivationStatus} that the service accepts. */
export enum KnownActivationStatus {
  /** The managed HSM Pool is active. */
  Active = "Active",
  /** The managed HSM Pool is not yet activated. */
  NotActivated = "NotActivated",
  /** An unknown error occurred while activating managed hsm. */
  Unknown = "Unknown",
  /** Failed to activate managed hsm. */
  Failed = "Failed",
}

/**
 * Defines values for ActivationStatus. \
 * {@link KnownActivationStatus} can be used interchangeably with ActivationStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Active**: The managed HSM Pool is active. \
 * **NotActivated**: The managed HSM Pool is not yet activated. \
 * **Unknown**: An unknown error occurred while activating managed hsm. \
 * **Failed**: Failed to activate managed hsm.
 */
export type ActivationStatus = string;

/** Known values of {@link SkuFamily} that the service accepts. */
export enum KnownSkuFamily {
  /** A */
  A = "A",
}

/**
 * Defines values for SkuFamily. \
 * {@link KnownSkuFamily} can be used interchangeably with SkuFamily,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **A**
 */
export type SkuFamily = string;

/** Known values of {@link KeyPermissions} that the service accepts. */
export enum KnownKeyPermissions {
  /** All */
  All = "all",
  /** Encrypt */
  Encrypt = "encrypt",
  /** Decrypt */
  Decrypt = "decrypt",
  /** WrapKey */
  WrapKey = "wrapKey",
  /** UnwrapKey */
  UnwrapKey = "unwrapKey",
  /** Sign */
  Sign = "sign",
  /** Verify */
  Verify = "verify",
  /** Get */
  Get = "get",
  /** List */
  List = "list",
  /** Create */
  Create = "create",
  /** Update */
  Update = "update",
  /** Import */
  Import = "import",
  /** Delete */
  Delete = "delete",
  /** Backup */
  Backup = "backup",
  /** Restore */
  Restore = "restore",
  /** Recover */
  Recover = "recover",
  /** Purge */
  Purge = "purge",
  /** Release */
  Release = "release",
  /** Rotate */
  Rotate = "rotate",
  /** Getrotationpolicy */
  Getrotationpolicy = "getrotationpolicy",
  /** Setrotationpolicy */
  Setrotationpolicy = "setrotationpolicy",
}

/**
 * Defines values for KeyPermissions. \
 * {@link KnownKeyPermissions} can be used interchangeably with KeyPermissions,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **all** \
 * **encrypt** \
 * **decrypt** \
 * **wrapKey** \
 * **unwrapKey** \
 * **sign** \
 * **verify** \
 * **get** \
 * **list** \
 * **create** \
 * **update** \
 * **import** \
 * **delete** \
 * **backup** \
 * **restore** \
 * **recover** \
 * **purge** \
 * **release** \
 * **rotate** \
 * **getrotationpolicy** \
 * **setrotationpolicy**
 */
export type KeyPermissions = string;

/** Known values of {@link SecretPermissions} that the service accepts. */
export enum KnownSecretPermissions {
  /** All */
  All = "all",
  /** Get */
  Get = "get",
  /** List */
  List = "list",
  /** Set */
  Set = "set",
  /** Delete */
  Delete = "delete",
  /** Backup */
  Backup = "backup",
  /** Restore */
  Restore = "restore",
  /** Recover */
  Recover = "recover",
  /** Purge */
  Purge = "purge",
}

/**
 * Defines values for SecretPermissions. \
 * {@link KnownSecretPermissions} can be used interchangeably with SecretPermissions,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **all** \
 * **get** \
 * **list** \
 * **set** \
 * **delete** \
 * **backup** \
 * **restore** \
 * **recover** \
 * **purge**
 */
export type SecretPermissions = string;

/** Known values of {@link CertificatePermissions} that the service accepts. */
export enum KnownCertificatePermissions {
  /** All */
  All = "all",
  /** Get */
  Get = "get",
  /** List */
  List = "list",
  /** Delete */
  Delete = "delete",
  /** Create */
  Create = "create",
  /** Import */
  Import = "import",
  /** Update */
  Update = "update",
  /** Managecontacts */
  Managecontacts = "managecontacts",
  /** Getissuers */
  Getissuers = "getissuers",
  /** Listissuers */
  Listissuers = "listissuers",
  /** Setissuers */
  Setissuers = "setissuers",
  /** Deleteissuers */
  Deleteissuers = "deleteissuers",
  /** Manageissuers */
  Manageissuers = "manageissuers",
  /** Recover */
  Recover = "recover",
  /** Purge */
  Purge = "purge",
  /** Backup */
  Backup = "backup",
  /** Restore */
  Restore = "restore",
}

/**
 * Defines values for CertificatePermissions. \
 * {@link KnownCertificatePermissions} can be used interchangeably with CertificatePermissions,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **all** \
 * **get** \
 * **list** \
 * **delete** \
 * **create** \
 * **import** \
 * **update** \
 * **managecontacts** \
 * **getissuers** \
 * **listissuers** \
 * **setissuers** \
 * **deleteissuers** \
 * **manageissuers** \
 * **recover** \
 * **purge** \
 * **backup** \
 * **restore**
 */
export type CertificatePermissions = string;

/** Known values of {@link StoragePermissions} that the service accepts. */
export enum KnownStoragePermissions {
  /** All */
  All = "all",
  /** Get */
  Get = "get",
  /** List */
  List = "list",
  /** Delete */
  Delete = "delete",
  /** Set */
  Set = "set",
  /** Update */
  Update = "update",
  /** Regeneratekey */
  Regeneratekey = "regeneratekey",
  /** Recover */
  Recover = "recover",
  /** Purge */
  Purge = "purge",
  /** Backup */
  Backup = "backup",
  /** Restore */
  Restore = "restore",
  /** Setsas */
  Setsas = "setsas",
  /** Listsas */
  Listsas = "listsas",
  /** Getsas */
  Getsas = "getsas",
  /** Deletesas */
  Deletesas = "deletesas",
}

/**
 * Defines values for StoragePermissions. \
 * {@link KnownStoragePermissions} can be used interchangeably with StoragePermissions,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **all** \
 * **get** \
 * **list** \
 * **delete** \
 * **set** \
 * **update** \
 * **regeneratekey** \
 * **recover** \
 * **purge** \
 * **backup** \
 * **restore** \
 * **setsas** \
 * **listsas** \
 * **getsas** \
 * **deletesas**
 */
export type StoragePermissions = string;

/** Known values of {@link KeyVaultNetworkRuleBypassOption} that the service accepts. */
export enum KnownKeyVaultNetworkRuleBypassOption {
  /** AzureServices */
  AzureServices = "AzureServices",
  /** None */
  None = "None",
}

/**
 * Defines values for KeyVaultNetworkRuleBypassOption. \
 * {@link KnownKeyVaultNetworkRuleBypassOption} can be used interchangeably with KeyVaultNetworkRuleBypassOption,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AzureServices** \
 * **None**
 */
export type KeyVaultNetworkRuleBypassOption = string;

/** Known values of {@link KeyVaultNetworkRuleAction} that the service accepts. */
export enum KnownKeyVaultNetworkRuleAction {
  /** Allow */
  Allow = "Allow",
  /** Deny */
  Deny = "Deny",
}

/**
 * Defines values for KeyVaultNetworkRuleAction. \
 * {@link KnownKeyVaultNetworkRuleAction} can be used interchangeably with KeyVaultNetworkRuleAction,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Allow** \
 * **Deny**
 */
export type KeyVaultNetworkRuleAction = string;

/** Known values of {@link KeyVaultProvisioningState} that the service accepts. */
export enum KnownKeyVaultProvisioningState {
  /** Succeeded */
  Succeeded = "Succeeded",
  /** RegisteringDns */
  RegisteringDns = "RegisteringDns",
}

/**
 * Defines values for KeyVaultProvisioningState. \
 * {@link KnownKeyVaultProvisioningState} can be used interchangeably with KeyVaultProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **RegisteringDns**
 */
export type KeyVaultProvisioningState = string;

/** Known values of {@link PrivateEndpointServiceConnectionStatus} that the service accepts. */
export enum KnownPrivateEndpointServiceConnectionStatus {
  /** Pending */
  Pending = "Pending",
  /** Approved */
  Approved = "Approved",
  /** Rejected */
  Rejected = "Rejected",
  /** Disconnected */
  Disconnected = "Disconnected",
}

/**
 * Defines values for PrivateEndpointServiceConnectionStatus. \
 * {@link KnownPrivateEndpointServiceConnectionStatus} can be used interchangeably with PrivateEndpointServiceConnectionStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Pending** \
 * **Approved** \
 * **Rejected** \
 * **Disconnected**
 */
export type PrivateEndpointServiceConnectionStatus = string;

/** Known values of {@link KeyVaultActionsRequiredMessage} that the service accepts. */
export enum KnownKeyVaultActionsRequiredMessage {
  /** None */
  None = "None",
}

/**
 * Defines values for KeyVaultActionsRequiredMessage. \
 * {@link KnownKeyVaultActionsRequiredMessage} can be used interchangeably with KeyVaultActionsRequiredMessage,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None**
 */
export type KeyVaultActionsRequiredMessage = string;

/** Known values of {@link PrivateEndpointConnectionProvisioningState} that the service accepts. */
export enum KnownPrivateEndpointConnectionProvisioningState {
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Creating */
  Creating = "Creating",
  /** Updating */
  Updating = "Updating",
  /** Deleting */
  Deleting = "Deleting",
  /** Failed */
  Failed = "Failed",
  /** Disconnected */
  Disconnected = "Disconnected",
}

/**
 * Defines values for PrivateEndpointConnectionProvisioningState. \
 * {@link KnownPrivateEndpointConnectionProvisioningState} can be used interchangeably with PrivateEndpointConnectionProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Creating** \
 * **Updating** \
 * **Deleting** \
 * **Failed** \
 * **Disconnected**
 */
export type PrivateEndpointConnectionProvisioningState = string;

/** Known values of {@link ManagedHsmSkuFamily} that the service accepts. */
export enum KnownManagedHsmSkuFamily {
  /** B */
  B = "B",
  /** C */
  C = "C",
}

/**
 * Defines values for ManagedHsmSkuFamily. \
 * {@link KnownManagedHsmSkuFamily} can be used interchangeably with ManagedHsmSkuFamily,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **B** \
 * **C**
 */
export type ManagedHsmSkuFamily = string;

/** Known values of {@link ManagedServiceIdentityType} that the service accepts. */
export enum KnownManagedServiceIdentityType {
  /** None */
  None = "None",
  /** SystemAssigned */
  SystemAssigned = "SystemAssigned",
  /** UserAssigned */
  UserAssigned = "UserAssigned",
  /** SystemAssignedUserAssigned */
  SystemAssignedUserAssigned = "SystemAssigned,UserAssigned",
}

/**
 * Defines values for ManagedServiceIdentityType. \
 * {@link KnownManagedServiceIdentityType} can be used interchangeably with ManagedServiceIdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **SystemAssigned** \
 * **UserAssigned** \
 * **SystemAssigned,UserAssigned**
 */
export type ManagedServiceIdentityType = string;

/** Known values of {@link DeletionRecoveryLevel} that the service accepts. */
export enum KnownDeletionRecoveryLevel {
  /** Purgeable */
  Purgeable = "Purgeable",
  /** RecoverablePurgeable */
  RecoverablePurgeable = "Recoverable+Purgeable",
  /** Recoverable */
  Recoverable = "Recoverable",
  /** RecoverableProtectedSubscription */
  RecoverableProtectedSubscription = "Recoverable+ProtectedSubscription",
}

/**
 * Defines values for DeletionRecoveryLevel. \
 * {@link KnownDeletionRecoveryLevel} can be used interchangeably with DeletionRecoveryLevel,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Purgeable** \
 * **Recoverable+Purgeable** \
 * **Recoverable** \
 * **Recoverable+ProtectedSubscription**
 */
export type DeletionRecoveryLevel = string;

/** Known values of {@link JsonWebKeyType} that the service accepts. */
export enum KnownJsonWebKeyType {
  /** EC */
  EC = "EC",
  /** ECHSM */
  ECHSM = "EC-HSM",
  /** RSA */
  RSA = "RSA",
  /** RSAHSM */
  RSAHSM = "RSA-HSM",
}

/**
 * Defines values for JsonWebKeyType. \
 * {@link KnownJsonWebKeyType} can be used interchangeably with JsonWebKeyType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **EC** \
 * **EC-HSM** \
 * **RSA** \
 * **RSA-HSM**
 */
export type JsonWebKeyType = string;

/** Known values of {@link JsonWebKeyOperation} that the service accepts. */
export enum KnownJsonWebKeyOperation {
  /** Encrypt */
  Encrypt = "encrypt",
  /** Decrypt */
  Decrypt = "decrypt",
  /** Sign */
  Sign = "sign",
  /** Verify */
  Verify = "verify",
  /** WrapKey */
  WrapKey = "wrapKey",
  /** UnwrapKey */
  UnwrapKey = "unwrapKey",
  /** Import */
  Import = "import",
  /** Release */
  Release = "release",
}

/**
 * Defines values for JsonWebKeyOperation. \
 * {@link KnownJsonWebKeyOperation} can be used interchangeably with JsonWebKeyOperation,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **encrypt** \
 * **decrypt** \
 * **sign** \
 * **verify** \
 * **wrapKey** \
 * **unwrapKey** \
 * **import** \
 * **release**
 */
export type JsonWebKeyOperation = string;

/** Known values of {@link JsonWebKeyCurveName} that the service accepts. */
export enum KnownJsonWebKeyCurveName {
  /** P256 */
  P256 = "P-256",
  /** P384 */
  P384 = "P-384",
  /** P521 */
  P521 = "P-521",
  /** P256K */
  P256K = "P-256K",
}

/**
 * Defines values for JsonWebKeyCurveName. \
 * {@link KnownJsonWebKeyCurveName} can be used interchangeably with JsonWebKeyCurveName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **P-256** \
 * **P-384** \
 * **P-521** \
 * **P-256K**
 */
export type JsonWebKeyCurveName = string;
/** Defines values for KeyVaultNameUnavailableReason. */
export type KeyVaultNameUnavailableReason =
  | "AccountNameInvalid"
  | "AlreadyExists";
/** Defines values for CreateMode. */
export type CreateMode = "recover" | "default";
/** Defines values for SkuName. */
export type SkuName = "standard" | "premium";
/** Defines values for KeyVaultCreateMode. */
export type KeyVaultCreateMode = "recover" | "default";
/** Defines values for ManagedHsmSkuName. */
export type ManagedHsmSkuName =
  | "Standard_B1"
  | "Custom_B32"
  | "Custom_B6"
  | "Custom_C42"
  | "Custom_C10";
/** Defines values for KeyVaultPatchMode. */
export type KeyVaultPatchMode = "recover" | "default";
/** Defines values for AccessPolicyUpdateKind. */
export type AccessPolicyUpdateKind = "add" | "replace" | "remove";
/** Defines values for KeyRotationPolicyActionType. */
export type KeyRotationPolicyActionType = "rotate" | "notify";

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationListResult;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export interface ManagedHsmsCheckMhsmNameAvailabilityOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the checkMhsmNameAvailability operation. */
export type ManagedHsmsCheckMhsmNameAvailabilityResponse =
  CheckMhsmNameAvailabilityResult;

/** Optional parameters. */
export interface ManagedHsmsListDeletedOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listDeleted operation. */
export type ManagedHsmsListDeletedResponse = DeletedManagedHsmListResult;

/** Optional parameters. */
export interface ManagedHsmsGetDeletedOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getDeleted operation. */
export type ManagedHsmsGetDeletedResponse = DeletedManagedHsm;

/** Optional parameters. */
export interface ManagedHsmsPurgeDeletedOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the purgeDeleted operation. */
export type ManagedHsmsPurgeDeletedResponse = ManagedHsmsPurgeDeletedHeaders;

/** Optional parameters. */
export interface ManagedHsmsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {
  /** Maximum number of results to return. */
  top?: number;
}

/** Contains response data for the listBySubscription operation. */
export type ManagedHsmsListBySubscriptionResponse = ManagedHsmListResult;

/** Optional parameters. */
export interface ManagedHsmsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {
  /** Maximum number of results to return. */
  top?: number;
}

/** Contains response data for the listByResourceGroup operation. */
export type ManagedHsmsListByResourceGroupResponse = ManagedHsmListResult;

/** Optional parameters. */
export interface ManagedHsmsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ManagedHsmsGetResponse = ManagedHsm;

/** Optional parameters. */
export interface ManagedHsmsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type ManagedHsmsCreateOrUpdateResponse = ManagedHsm;

/** Optional parameters. */
export interface ManagedHsmsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type ManagedHsmsUpdateResponse = ManagedHsm;

/** Optional parameters. */
export interface ManagedHsmsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ManagedHsmsListDeletedNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listDeletedNext operation. */
export type ManagedHsmsListDeletedNextResponse = DeletedManagedHsmListResult;

/** Optional parameters. */
export interface ManagedHsmsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type ManagedHsmsListBySubscriptionNextResponse = ManagedHsmListResult;

/** Optional parameters. */
export interface ManagedHsmsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type ManagedHsmsListByResourceGroupNextResponse = ManagedHsmListResult;

/** Optional parameters. */
export interface VaultsCheckNameAvailabilityOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the checkNameAvailability operation. */
export type VaultsCheckNameAvailabilityResponse = CheckNameAvailabilityResult;

/** Optional parameters. */
export interface VaultsListDeletedOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listDeleted operation. */
export type VaultsListDeletedResponse = DeletedVaultListResult;

/** Optional parameters. */
export interface VaultsGetDeletedOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getDeleted operation. */
export type VaultsGetDeletedResponse = DeletedVault;

/** Optional parameters. */
export interface VaultsPurgeDeletedOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VaultsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {
  /** Maximum number of results to return. */
  top?: number;
}

/** Contains response data for the listBySubscription operation. */
export type VaultsListBySubscriptionResponse = VaultListResult;

/** Optional parameters. */
export interface VaultsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {
  /** Maximum number of results to return. */
  top?: number;
}

/** Contains response data for the listByResourceGroup operation. */
export type VaultsListByResourceGroupResponse = VaultListResult;

/** Optional parameters. */
export interface VaultsGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type VaultsGetResponse = Vault;

/** Optional parameters. */
export interface VaultsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type VaultsCreateOrUpdateResponse = Vault;

/** Optional parameters. */
export interface VaultsUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type VaultsUpdateResponse = Vault;

/** Optional parameters. */
export interface VaultsDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface VaultsUpdateAccessPolicyOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the updateAccessPolicy operation. */
export type VaultsUpdateAccessPolicyResponse = VaultAccessPolicyParameters;

/** Optional parameters. */
export interface VaultsListDeletedNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listDeletedNext operation. */
export type VaultsListDeletedNextResponse = DeletedVaultListResult;

/** Optional parameters. */
export interface VaultsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type VaultsListBySubscriptionNextResponse = VaultListResult;

/** Optional parameters. */
export interface VaultsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type VaultsListByResourceGroupNextResponse = VaultListResult;

/** Optional parameters. */
export interface MhsmPrivateEndpointConnectionsListByResourceOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResource operation. */
export type MhsmPrivateEndpointConnectionsListByResourceResponse =
  MhsmPrivateEndpointConnectionListResult;

/** Optional parameters. */
export interface MhsmPrivateEndpointConnectionsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type MhsmPrivateEndpointConnectionsGetResponse =
  MhsmPrivateEndpointConnection;

/** Optional parameters. */
export interface MhsmPrivateEndpointConnectionsPutOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the put operation. */
export type MhsmPrivateEndpointConnectionsPutResponse =
  MhsmPrivateEndpointConnection;

/** Optional parameters. */
export interface MhsmPrivateEndpointConnectionsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type MhsmPrivateEndpointConnectionsDeleteResponse =
  MhsmPrivateEndpointConnection;

/** Optional parameters. */
export interface MhsmPrivateEndpointConnectionsListByResourceNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceNext operation. */
export type MhsmPrivateEndpointConnectionsListByResourceNextResponse =
  MhsmPrivateEndpointConnectionListResult;

/** Optional parameters. */
export interface MhsmPrivateLinkResourcesListByMhsmResourceOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByMhsmResource operation. */
export type MhsmPrivateLinkResourcesListByMhsmResourceResponse =
  MhsmPrivateLinkResourceListResult;

/** Optional parameters. */
export interface MhsmRegionsListByResourceOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResource operation. */
export type MhsmRegionsListByResourceResponse = MhsmRegionsListResult;

/** Optional parameters. */
export interface MhsmRegionsListByResourceNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceNext operation. */
export type MhsmRegionsListByResourceNextResponse = MhsmRegionsListResult;

/** Optional parameters. */
export interface PrivateEndpointConnectionsListByResourceOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResource operation. */
export type PrivateEndpointConnectionsListByResourceResponse =
  PrivateEndpointConnectionListResult;

/** Optional parameters. */
export interface PrivateEndpointConnectionsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type PrivateEndpointConnectionsGetResponse = PrivateEndpointConnection;

/** Optional parameters. */
export interface PrivateEndpointConnectionsPutOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the put operation. */
export type PrivateEndpointConnectionsPutResponse = PrivateEndpointConnection;

/** Optional parameters. */
export interface PrivateEndpointConnectionsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type PrivateEndpointConnectionsDeleteResponse =
  PrivateEndpointConnection;

/** Optional parameters. */
export interface PrivateEndpointConnectionsListByResourceNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceNext operation. */
export type PrivateEndpointConnectionsListByResourceNextResponse =
  PrivateEndpointConnectionListResult;

/** Optional parameters. */
export interface PrivateLinkResourcesListByVaultOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByVault operation. */
export type PrivateLinkResourcesListByVaultResponse =
  PrivateLinkResourceListResult;

/** Optional parameters. */
export interface SecretsListOptionalParams extends coreClient.OperationOptions {
  /** Maximum number of results to return. */
  top?: number;
}

/** Contains response data for the list operation. */
export type SecretsListResponse = SecretListResult;

/** Optional parameters. */
export interface SecretsGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type SecretsGetResponse = Secret;

/** Optional parameters. */
export interface SecretsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type SecretsCreateOrUpdateResponse = Secret;

/** Optional parameters. */
export interface SecretsUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type SecretsUpdateResponse = Secret;

/** Optional parameters. */
export interface SecretsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type SecretsListNextResponse = SecretListResult;

/** Optional parameters. */
export interface AzureStorageResourceManagementAPIOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
