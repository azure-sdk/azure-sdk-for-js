/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  DeletedVault,
  VaultsListDeletedOptionalParams,
  Vault,
  VaultsListBySubscriptionOptionalParams,
  VaultsListByResourceGroupOptionalParams,
  ResourceAutoGenerated,
  VaultsListOptionalParams,
  VaultCheckNameAvailabilityParameters,
  VaultsCheckNameAvailabilityOptionalParams,
  VaultsCheckNameAvailabilityResponse,
  VaultsGetDeletedOptionalParams,
  VaultsGetDeletedResponse,
  VaultsPurgeDeletedOptionalParams,
  VaultsGetOptionalParams,
  VaultsGetResponse,
  VaultsCreateOrUpdateOptionalParams,
  VaultsCreateOrUpdateResponse,
  VaultPatchParameters,
  VaultsUpdateOptionalParams,
  VaultsUpdateResponse,
  VaultsDeleteOptionalParams,
  VaultAccessPolicyParameters,
  AccessPolicyUpdateKind,
  VaultsUpdateAccessPolicyOptionalParams,
  VaultsUpdateAccessPolicyResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Vaults. */
export interface Vaults {
  /**
   * Gets information about the deleted vaults in a subscription.
   * @param options The options parameters.
   */
  listDeleted(
    options?: VaultsListDeletedOptionalParams,
  ): PagedAsyncIterableIterator<DeletedVault>;
  /**
   * The List operation gets information about the vaults associated with the subscription.
   * @param options The options parameters.
   */
  listBySubscription(
    options?: VaultsListBySubscriptionOptionalParams,
  ): PagedAsyncIterableIterator<Vault>;
  /**
   * The List operation gets information about the vaults associated with the subscription and within the
   * specified resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: VaultsListByResourceGroupOptionalParams,
  ): PagedAsyncIterableIterator<Vault>;
  /**
   * The List operation gets information about the vaults associated with the subscription.
   * @param options The options parameters.
   */
  list(
    options?: VaultsListOptionalParams,
  ): PagedAsyncIterableIterator<ResourceAutoGenerated>;
  /**
   * Checks that the vault name is valid and is not already in use.
   * @param vaultName The name of the vault.
   * @param options The options parameters.
   */
  checkNameAvailability(
    vaultName: VaultCheckNameAvailabilityParameters,
    options?: VaultsCheckNameAvailabilityOptionalParams,
  ): Promise<VaultsCheckNameAvailabilityResponse>;
  /**
   * Gets the deleted Azure key vault.
   * @param location The name of the Azure region.
   * @param vaultName The name of the vault.
   * @param options The options parameters.
   */
  getDeleted(
    location: string,
    vaultName: string,
    options?: VaultsGetDeletedOptionalParams,
  ): Promise<VaultsGetDeletedResponse>;
  /**
   * Permanently deletes the specified vault. aka Purges the deleted Azure key vault.
   * @param location The name of the Azure region.
   * @param vaultName The name of the vault.
   * @param options The options parameters.
   */
  beginPurgeDeleted(
    location: string,
    vaultName: string,
    options?: VaultsPurgeDeletedOptionalParams,
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Permanently deletes the specified vault. aka Purges the deleted Azure key vault.
   * @param location The name of the Azure region.
   * @param vaultName The name of the vault.
   * @param options The options parameters.
   */
  beginPurgeDeletedAndWait(
    location: string,
    vaultName: string,
    options?: VaultsPurgeDeletedOptionalParams,
  ): Promise<void>;
  /**
   * Gets the specified Azure key vault.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param vaultName The name of the vault.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    vaultName: string,
    options?: VaultsGetOptionalParams,
  ): Promise<VaultsGetResponse>;
  /**
   * Create or update a key vault in the specified subscription.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param vaultName The name of the vault.
   * @param parameters Parameters to create or update the vault
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    vaultName: string,
    parameters: Vault,
    options?: VaultsCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<VaultsCreateOrUpdateResponse>,
      VaultsCreateOrUpdateResponse
    >
  >;
  /**
   * Create or update a key vault in the specified subscription.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param vaultName The name of the vault.
   * @param parameters Parameters to create or update the vault
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    vaultName: string,
    parameters: Vault,
    options?: VaultsCreateOrUpdateOptionalParams,
  ): Promise<VaultsCreateOrUpdateResponse>;
  /**
   * Update a key vault in the specified subscription.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param vaultName The name of the vault.
   * @param parameters Parameters to patch the vault
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    vaultName: string,
    parameters: VaultPatchParameters,
    options?: VaultsUpdateOptionalParams,
  ): Promise<VaultsUpdateResponse>;
  /**
   * Deletes the specified Azure key vault.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param vaultName The name of the vault.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    vaultName: string,
    options?: VaultsDeleteOptionalParams,
  ): Promise<void>;
  /**
   * Update access policies in a key vault in the specified subscription.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param vaultName The name of the vault.
   * @param operationKind Name of the operation
   * @param parameters Access policy to merge into the vault
   * @param options The options parameters.
   */
  updateAccessPolicy(
    resourceGroupName: string,
    vaultName: string,
    operationKind: AccessPolicyUpdateKind,
    parameters: VaultAccessPolicyParameters,
    options?: VaultsUpdateAccessPolicyOptionalParams,
  ): Promise<VaultsUpdateAccessPolicyResponse>;
}
