/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { RegistrationHubMachines } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { NetworkCloud } from "../networkCloud";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  RegistrationHubMachine,
  RegistrationHubMachinesListByRegistrationHubNextOptionalParams,
  RegistrationHubMachinesListByRegistrationHubOptionalParams,
  RegistrationHubMachinesListByRegistrationHubResponse,
  RegistrationHubMachinesGetOptionalParams,
  RegistrationHubMachinesGetResponse,
  RegistrationHubMachinesCreateOrUpdateOptionalParams,
  RegistrationHubMachinesCreateOrUpdateResponse,
  RegistrationHubMachinesDeleteOptionalParams,
  RegistrationHubMachinesDeleteResponse,
  RegistrationHubMachinesUpdateOptionalParams,
  RegistrationHubMachinesUpdateResponse,
  RegistrationHubMachinesDeclineOptionalParams,
  RegistrationHubMachinesDeclineResponse,
  RegistrationHubMachinesListByRegistrationHubNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing RegistrationHubMachines operations. */
export class RegistrationHubMachinesImpl implements RegistrationHubMachines {
  private readonly client: NetworkCloud;

  /**
   * Initialize a new instance of the class RegistrationHubMachines class.
   * @param client Reference to the service client
   */
  constructor(client: NetworkCloud) {
    this.client = client;
  }

  /**
   * Get a list of machines in the provided registration hub.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param registrationHubName The name of the registration hub.
   * @param options The options parameters.
   */
  public listByRegistrationHub(
    resourceGroupName: string,
    registrationHubName: string,
    options?: RegistrationHubMachinesListByRegistrationHubOptionalParams,
  ): PagedAsyncIterableIterator<RegistrationHubMachine> {
    const iter = this.listByRegistrationHubPagingAll(
      resourceGroupName,
      registrationHubName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByRegistrationHubPagingPage(
          resourceGroupName,
          registrationHubName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByRegistrationHubPagingPage(
    resourceGroupName: string,
    registrationHubName: string,
    options?: RegistrationHubMachinesListByRegistrationHubOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<RegistrationHubMachine[]> {
    let result: RegistrationHubMachinesListByRegistrationHubResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByRegistrationHub(
        resourceGroupName,
        registrationHubName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByRegistrationHubNext(
        resourceGroupName,
        registrationHubName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByRegistrationHubPagingAll(
    resourceGroupName: string,
    registrationHubName: string,
    options?: RegistrationHubMachinesListByRegistrationHubOptionalParams,
  ): AsyncIterableIterator<RegistrationHubMachine> {
    for await (const page of this.listByRegistrationHubPagingPage(
      resourceGroupName,
      registrationHubName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Get a list of machines in the provided registration hub.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param registrationHubName The name of the registration hub.
   * @param options The options parameters.
   */
  private _listByRegistrationHub(
    resourceGroupName: string,
    registrationHubName: string,
    options?: RegistrationHubMachinesListByRegistrationHubOptionalParams,
  ): Promise<RegistrationHubMachinesListByRegistrationHubResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, registrationHubName, options },
      listByRegistrationHubOperationSpec,
    );
  }

  /**
   * Get properties of the provided registration hub machine.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param registrationHubName The name of the registration hub.
   * @param machineName The name of the registration hub machine.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    registrationHubName: string,
    machineName: string,
    options?: RegistrationHubMachinesGetOptionalParams,
  ): Promise<RegistrationHubMachinesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, registrationHubName, machineName, options },
      getOperationSpec,
    );
  }

  /**
   * Create a new registration hub machine or update properties of the existing one.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param registrationHubName The name of the registration hub.
   * @param machineName The name of the registration hub machine.
   * @param registrationHubMachineParameters The request body.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    registrationHubName: string,
    machineName: string,
    registrationHubMachineParameters: RegistrationHubMachine,
    options?: RegistrationHubMachinesCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<RegistrationHubMachinesCreateOrUpdateResponse>,
      RegistrationHubMachinesCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<RegistrationHubMachinesCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        registrationHubName,
        machineName,
        registrationHubMachineParameters,
        options,
      },
      spec: createOrUpdateOperationSpec,
    });
    const poller = await createHttpPoller<
      RegistrationHubMachinesCreateOrUpdateResponse,
      OperationState<RegistrationHubMachinesCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create a new registration hub machine or update properties of the existing one.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param registrationHubName The name of the registration hub.
   * @param machineName The name of the registration hub machine.
   * @param registrationHubMachineParameters The request body.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    registrationHubName: string,
    machineName: string,
    registrationHubMachineParameters: RegistrationHubMachine,
    options?: RegistrationHubMachinesCreateOrUpdateOptionalParams,
  ): Promise<RegistrationHubMachinesCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      registrationHubName,
      machineName,
      registrationHubMachineParameters,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Delete the provided registration hub machine.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param registrationHubName The name of the registration hub.
   * @param machineName The name of the registration hub machine.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    registrationHubName: string,
    machineName: string,
    options?: RegistrationHubMachinesDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<RegistrationHubMachinesDeleteResponse>,
      RegistrationHubMachinesDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<RegistrationHubMachinesDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, registrationHubName, machineName, options },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<
      RegistrationHubMachinesDeleteResponse,
      OperationState<RegistrationHubMachinesDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete the provided registration hub machine.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param registrationHubName The name of the registration hub.
   * @param machineName The name of the registration hub machine.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    registrationHubName: string,
    machineName: string,
    options?: RegistrationHubMachinesDeleteOptionalParams,
  ): Promise<RegistrationHubMachinesDeleteResponse> {
    const poller = await this.beginDelete(
      resourceGroupName,
      registrationHubName,
      machineName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Patch properties of the provided registration hub machine, or update the tags associated with the
   * registration hub machine. Properties and tag updates can be done independently.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param registrationHubName The name of the registration hub.
   * @param machineName The name of the registration hub machine.
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    registrationHubName: string,
    machineName: string,
    options?: RegistrationHubMachinesUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<RegistrationHubMachinesUpdateResponse>,
      RegistrationHubMachinesUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<RegistrationHubMachinesUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, registrationHubName, machineName, options },
      spec: updateOperationSpec,
    });
    const poller = await createHttpPoller<
      RegistrationHubMachinesUpdateResponse,
      OperationState<RegistrationHubMachinesUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Patch properties of the provided registration hub machine, or update the tags associated with the
   * registration hub machine. Properties and tag updates can be done independently.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param registrationHubName The name of the registration hub.
   * @param machineName The name of the registration hub machine.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    registrationHubName: string,
    machineName: string,
    options?: RegistrationHubMachinesUpdateOptionalParams,
  ): Promise<RegistrationHubMachinesUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      registrationHubName,
      machineName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Declines a machine that is pending approval during registration. This effectively “dead ends” this
   * machine and is an explicit refusal to let the machine proceed with further provisioning.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param registrationHubName The name of the registration hub.
   * @param machineName The name of the registration hub machine.
   * @param options The options parameters.
   */
  async beginDecline(
    resourceGroupName: string,
    registrationHubName: string,
    machineName: string,
    options?: RegistrationHubMachinesDeclineOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<RegistrationHubMachinesDeclineResponse>,
      RegistrationHubMachinesDeclineResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<RegistrationHubMachinesDeclineResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, registrationHubName, machineName, options },
      spec: declineOperationSpec,
    });
    const poller = await createHttpPoller<
      RegistrationHubMachinesDeclineResponse,
      OperationState<RegistrationHubMachinesDeclineResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Declines a machine that is pending approval during registration. This effectively “dead ends” this
   * machine and is an explicit refusal to let the machine proceed with further provisioning.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param registrationHubName The name of the registration hub.
   * @param machineName The name of the registration hub machine.
   * @param options The options parameters.
   */
  async beginDeclineAndWait(
    resourceGroupName: string,
    registrationHubName: string,
    machineName: string,
    options?: RegistrationHubMachinesDeclineOptionalParams,
  ): Promise<RegistrationHubMachinesDeclineResponse> {
    const poller = await this.beginDecline(
      resourceGroupName,
      registrationHubName,
      machineName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * ListByRegistrationHubNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param registrationHubName The name of the registration hub.
   * @param nextLink The nextLink from the previous successful call to the ListByRegistrationHub method.
   * @param options The options parameters.
   */
  private _listByRegistrationHubNext(
    resourceGroupName: string,
    registrationHubName: string,
    nextLink: string,
    options?: RegistrationHubMachinesListByRegistrationHubNextOptionalParams,
  ): Promise<RegistrationHubMachinesListByRegistrationHubNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, registrationHubName, nextLink, options },
      listByRegistrationHubNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByRegistrationHubOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/registrationHubs/{registrationHubName}/machines",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RegistrationHubMachineList,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registrationHubName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/registrationHubs/{registrationHubName}/machines/{machineName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RegistrationHubMachine,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registrationHubName,
    Parameters.machineName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/registrationHubs/{registrationHubName}/machines/{machineName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.RegistrationHubMachine,
    },
    201: {
      bodyMapper: Mappers.RegistrationHubMachine,
    },
    202: {
      bodyMapper: Mappers.RegistrationHubMachine,
    },
    204: {
      bodyMapper: Mappers.RegistrationHubMachine,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.registrationHubMachineParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registrationHubName,
    Parameters.machineName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/registrationHubs/{registrationHubName}/machines/{machineName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    201: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    202: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    204: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registrationHubName,
    Parameters.machineName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/registrationHubs/{registrationHubName}/machines/{machineName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.RegistrationHubMachine,
    },
    201: {
      bodyMapper: Mappers.RegistrationHubMachine,
    },
    202: {
      bodyMapper: Mappers.RegistrationHubMachine,
    },
    204: {
      bodyMapper: Mappers.RegistrationHubMachine,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.registrationHubMachineUpdateParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registrationHubName,
    Parameters.machineName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const declineOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/registrationHubs/{registrationHubName}/machines/{machineName}/decline",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    201: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    202: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    204: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registrationHubName,
    Parameters.machineName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByRegistrationHubNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RegistrationHubMachineList,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registrationHubName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
