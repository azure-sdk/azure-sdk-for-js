/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { RegistrationHubImages } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { NetworkCloud } from "../networkCloud";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  RegistrationHubImage,
  RegistrationHubImagesListByRegistrationHubNextOptionalParams,
  RegistrationHubImagesListByRegistrationHubOptionalParams,
  RegistrationHubImagesListByRegistrationHubResponse,
  RegistrationHubImagesGetOptionalParams,
  RegistrationHubImagesGetResponse,
  RegistrationHubImagesCreateOrUpdateOptionalParams,
  RegistrationHubImagesCreateOrUpdateResponse,
  RegistrationHubImagesDeleteOptionalParams,
  RegistrationHubImagesDeleteResponse,
  RegistrationHubImagesUpdateOptionalParams,
  RegistrationHubImagesUpdateResponse,
  RegistrationHubImagesListByRegistrationHubNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing RegistrationHubImages operations. */
export class RegistrationHubImagesImpl implements RegistrationHubImages {
  private readonly client: NetworkCloud;

  /**
   * Initialize a new instance of the class RegistrationHubImages class.
   * @param client Reference to the service client
   */
  constructor(client: NetworkCloud) {
    this.client = client;
  }

  /**
   * Get a list of images in the provided registration hub.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param registrationHubName The name of the registration hub.
   * @param options The options parameters.
   */
  public listByRegistrationHub(
    resourceGroupName: string,
    registrationHubName: string,
    options?: RegistrationHubImagesListByRegistrationHubOptionalParams,
  ): PagedAsyncIterableIterator<RegistrationHubImage> {
    const iter = this.listByRegistrationHubPagingAll(
      resourceGroupName,
      registrationHubName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByRegistrationHubPagingPage(
          resourceGroupName,
          registrationHubName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByRegistrationHubPagingPage(
    resourceGroupName: string,
    registrationHubName: string,
    options?: RegistrationHubImagesListByRegistrationHubOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<RegistrationHubImage[]> {
    let result: RegistrationHubImagesListByRegistrationHubResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByRegistrationHub(
        resourceGroupName,
        registrationHubName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByRegistrationHubNext(
        resourceGroupName,
        registrationHubName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByRegistrationHubPagingAll(
    resourceGroupName: string,
    registrationHubName: string,
    options?: RegistrationHubImagesListByRegistrationHubOptionalParams,
  ): AsyncIterableIterator<RegistrationHubImage> {
    for await (const page of this.listByRegistrationHubPagingPage(
      resourceGroupName,
      registrationHubName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Get a list of images in the provided registration hub.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param registrationHubName The name of the registration hub.
   * @param options The options parameters.
   */
  private _listByRegistrationHub(
    resourceGroupName: string,
    registrationHubName: string,
    options?: RegistrationHubImagesListByRegistrationHubOptionalParams,
  ): Promise<RegistrationHubImagesListByRegistrationHubResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, registrationHubName, options },
      listByRegistrationHubOperationSpec,
    );
  }

  /**
   * Get properties of the provided registration hub image.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param registrationHubName The name of the registration hub.
   * @param imageName The name of the registration hub image.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    registrationHubName: string,
    imageName: string,
    options?: RegistrationHubImagesGetOptionalParams,
  ): Promise<RegistrationHubImagesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, registrationHubName, imageName, options },
      getOperationSpec,
    );
  }

  /**
   * Create a new registration hub image or update properties of the existing one.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param registrationHubName The name of the registration hub.
   * @param imageName The name of the registration hub image.
   * @param registrationHubImageParameters The request body.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    registrationHubName: string,
    imageName: string,
    registrationHubImageParameters: RegistrationHubImage,
    options?: RegistrationHubImagesCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<RegistrationHubImagesCreateOrUpdateResponse>,
      RegistrationHubImagesCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<RegistrationHubImagesCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        registrationHubName,
        imageName,
        registrationHubImageParameters,
        options,
      },
      spec: createOrUpdateOperationSpec,
    });
    const poller = await createHttpPoller<
      RegistrationHubImagesCreateOrUpdateResponse,
      OperationState<RegistrationHubImagesCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create a new registration hub image or update properties of the existing one.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param registrationHubName The name of the registration hub.
   * @param imageName The name of the registration hub image.
   * @param registrationHubImageParameters The request body.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    registrationHubName: string,
    imageName: string,
    registrationHubImageParameters: RegistrationHubImage,
    options?: RegistrationHubImagesCreateOrUpdateOptionalParams,
  ): Promise<RegistrationHubImagesCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      registrationHubName,
      imageName,
      registrationHubImageParameters,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Delete the provided registration hub image.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param registrationHubName The name of the registration hub.
   * @param imageName The name of the registration hub image.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    registrationHubName: string,
    imageName: string,
    options?: RegistrationHubImagesDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<RegistrationHubImagesDeleteResponse>,
      RegistrationHubImagesDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<RegistrationHubImagesDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, registrationHubName, imageName, options },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<
      RegistrationHubImagesDeleteResponse,
      OperationState<RegistrationHubImagesDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete the provided registration hub image.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param registrationHubName The name of the registration hub.
   * @param imageName The name of the registration hub image.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    registrationHubName: string,
    imageName: string,
    options?: RegistrationHubImagesDeleteOptionalParams,
  ): Promise<RegistrationHubImagesDeleteResponse> {
    const poller = await this.beginDelete(
      resourceGroupName,
      registrationHubName,
      imageName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Patch properties of the provided registration hub image, or update the tags associated with the
   * registration hub image. Properties and tag updates can be done independently.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param registrationHubName The name of the registration hub.
   * @param imageName The name of the registration hub image.
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    registrationHubName: string,
    imageName: string,
    options?: RegistrationHubImagesUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<RegistrationHubImagesUpdateResponse>,
      RegistrationHubImagesUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<RegistrationHubImagesUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, registrationHubName, imageName, options },
      spec: updateOperationSpec,
    });
    const poller = await createHttpPoller<
      RegistrationHubImagesUpdateResponse,
      OperationState<RegistrationHubImagesUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Patch properties of the provided registration hub image, or update the tags associated with the
   * registration hub image. Properties and tag updates can be done independently.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param registrationHubName The name of the registration hub.
   * @param imageName The name of the registration hub image.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    registrationHubName: string,
    imageName: string,
    options?: RegistrationHubImagesUpdateOptionalParams,
  ): Promise<RegistrationHubImagesUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      registrationHubName,
      imageName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * ListByRegistrationHubNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param registrationHubName The name of the registration hub.
   * @param nextLink The nextLink from the previous successful call to the ListByRegistrationHub method.
   * @param options The options parameters.
   */
  private _listByRegistrationHubNext(
    resourceGroupName: string,
    registrationHubName: string,
    nextLink: string,
    options?: RegistrationHubImagesListByRegistrationHubNextOptionalParams,
  ): Promise<RegistrationHubImagesListByRegistrationHubNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, registrationHubName, nextLink, options },
      listByRegistrationHubNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByRegistrationHubOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/registrationHubs/{registrationHubName}/images",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RegistrationHubImageList,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registrationHubName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/registrationHubs/{registrationHubName}/images/{imageName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RegistrationHubImage,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registrationHubName,
    Parameters.imageName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/registrationHubs/{registrationHubName}/images/{imageName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.RegistrationHubImage,
    },
    201: {
      bodyMapper: Mappers.RegistrationHubImage,
    },
    202: {
      bodyMapper: Mappers.RegistrationHubImage,
    },
    204: {
      bodyMapper: Mappers.RegistrationHubImage,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.registrationHubImageParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registrationHubName,
    Parameters.imageName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/registrationHubs/{registrationHubName}/images/{imageName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    201: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    202: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    204: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registrationHubName,
    Parameters.imageName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/registrationHubs/{registrationHubName}/images/{imageName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.RegistrationHubImage,
    },
    201: {
      bodyMapper: Mappers.RegistrationHubImage,
    },
    202: {
      bodyMapper: Mappers.RegistrationHubImage,
    },
    204: {
      bodyMapper: Mappers.RegistrationHubImage,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.registrationHubImageUpdateParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registrationHubName,
    Parameters.imageName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const listByRegistrationHubNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RegistrationHubImageList,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registrationHubName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
