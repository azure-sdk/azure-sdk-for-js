/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { EdgeClusterMachineSkus } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { NetworkCloud } from "../networkCloud";
import {
  EdgeClusterMachineSku,
  EdgeClusterMachineSkusListBySubscriptionNextOptionalParams,
  EdgeClusterMachineSkusListBySubscriptionOptionalParams,
  EdgeClusterMachineSkusListBySubscriptionResponse,
  EdgeClusterMachineSkusGetOptionalParams,
  EdgeClusterMachineSkusGetResponse,
  EdgeClusterMachineSkusListBySubscriptionNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing EdgeClusterMachineSkus operations. */
export class EdgeClusterMachineSkusImpl implements EdgeClusterMachineSkus {
  private readonly client: NetworkCloud;

  /**
   * Initialize a new instance of the class EdgeClusterMachineSkus class.
   * @param client Reference to the service client
   */
  constructor(client: NetworkCloud) {
    this.client = client;
  }

  /**
   * Get a list of edge cluster machine SKUs in the provided subscription.
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: EdgeClusterMachineSkusListBySubscriptionOptionalParams,
  ): PagedAsyncIterableIterator<EdgeClusterMachineSku> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionPagingPage(options, settings);
      },
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: EdgeClusterMachineSkusListBySubscriptionOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<EdgeClusterMachineSku[]> {
    let result: EdgeClusterMachineSkusListBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySubscription(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySubscriptionPagingAll(
    options?: EdgeClusterMachineSkusListBySubscriptionOptionalParams,
  ): AsyncIterableIterator<EdgeClusterMachineSku> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Get a list of edge cluster machine SKUs in the provided subscription.
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: EdgeClusterMachineSkusListBySubscriptionOptionalParams,
  ): Promise<EdgeClusterMachineSkusListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec,
    );
  }

  /**
   * Get the properties of the specified edge cluster machine SKU.
   * @param edgeClusterMachineSkuName The name of the edge cluster machine SKU.
   * @param options The options parameters.
   */
  get(
    edgeClusterMachineSkuName: string,
    options?: EdgeClusterMachineSkusGetOptionalParams,
  ): Promise<EdgeClusterMachineSkusGetResponse> {
    return this.client.sendOperationRequest(
      { edgeClusterMachineSkuName, options },
      getOperationSpec,
    );
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: EdgeClusterMachineSkusListBySubscriptionNextOptionalParams,
  ): Promise<EdgeClusterMachineSkusListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.NetworkCloud/edgeClusterMachineSkus",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EdgeClusterMachineSkuList,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.NetworkCloud/edgeClusterMachineSkus/{edgeClusterMachineSkuName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EdgeClusterMachineSku,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.edgeClusterMachineSkuName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EdgeClusterMachineSkuList,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
