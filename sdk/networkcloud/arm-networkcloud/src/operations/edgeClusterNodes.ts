/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { EdgeClusterNodes } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { NetworkCloud } from "../networkCloud";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  EdgeClusterNode,
  EdgeClusterNodesListByEdgeClusterNextOptionalParams,
  EdgeClusterNodesListByEdgeClusterOptionalParams,
  EdgeClusterNodesListByEdgeClusterResponse,
  EdgeClusterNodesGetOptionalParams,
  EdgeClusterNodesGetResponse,
  EdgeClusterNodesCreateOrUpdateOptionalParams,
  EdgeClusterNodesCreateOrUpdateResponse,
  EdgeClusterNodesDeleteOptionalParams,
  EdgeClusterNodesDeleteResponse,
  EdgeClusterNodesUpdateOptionalParams,
  EdgeClusterNodesUpdateResponse,
  EdgeClusterNodesReimageOptionalParams,
  EdgeClusterNodesReimageResponse,
  EdgeClusterNodesRestartOptionalParams,
  EdgeClusterNodesRestartResponse,
  EdgeClusterNodesSynchronizeTimeOptionalParams,
  EdgeClusterNodesSynchronizeTimeResponse,
  EdgeClusterNodesListByEdgeClusterNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing EdgeClusterNodes operations. */
export class EdgeClusterNodesImpl implements EdgeClusterNodes {
  private readonly client: NetworkCloud;

  /**
   * Initialize a new instance of the class EdgeClusterNodes class.
   * @param client Reference to the service client
   */
  constructor(client: NetworkCloud) {
    this.client = client;
  }

  /**
   * Get a list of edge cluster nodes in the provided edge cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param edgeClusterName The name of the edge cluster.
   * @param options The options parameters.
   */
  public listByEdgeCluster(
    resourceGroupName: string,
    edgeClusterName: string,
    options?: EdgeClusterNodesListByEdgeClusterOptionalParams,
  ): PagedAsyncIterableIterator<EdgeClusterNode> {
    const iter = this.listByEdgeClusterPagingAll(
      resourceGroupName,
      edgeClusterName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByEdgeClusterPagingPage(
          resourceGroupName,
          edgeClusterName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByEdgeClusterPagingPage(
    resourceGroupName: string,
    edgeClusterName: string,
    options?: EdgeClusterNodesListByEdgeClusterOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<EdgeClusterNode[]> {
    let result: EdgeClusterNodesListByEdgeClusterResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByEdgeCluster(
        resourceGroupName,
        edgeClusterName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByEdgeClusterNext(
        resourceGroupName,
        edgeClusterName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByEdgeClusterPagingAll(
    resourceGroupName: string,
    edgeClusterName: string,
    options?: EdgeClusterNodesListByEdgeClusterOptionalParams,
  ): AsyncIterableIterator<EdgeClusterNode> {
    for await (const page of this.listByEdgeClusterPagingPage(
      resourceGroupName,
      edgeClusterName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Get a list of edge cluster nodes in the provided edge cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param edgeClusterName The name of the edge cluster.
   * @param options The options parameters.
   */
  private _listByEdgeCluster(
    resourceGroupName: string,
    edgeClusterName: string,
    options?: EdgeClusterNodesListByEdgeClusterOptionalParams,
  ): Promise<EdgeClusterNodesListByEdgeClusterResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, edgeClusterName, options },
      listByEdgeClusterOperationSpec,
    );
  }

  /**
   * Get properties of the provided the edge cluster node.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param edgeClusterName The name of the edge cluster.
   * @param nodeName The name of the node.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    edgeClusterName: string,
    nodeName: string,
    options?: EdgeClusterNodesGetOptionalParams,
  ): Promise<EdgeClusterNodesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, edgeClusterName, nodeName, options },
      getOperationSpec,
    );
  }

  /**
   * Create a new edge cluster node or update properties of the edge cluster node if it exists.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param edgeClusterName The name of the edge cluster.
   * @param nodeName The name of the node.
   * @param edgeClusterNodeParameters The request body.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    edgeClusterName: string,
    nodeName: string,
    edgeClusterNodeParameters: EdgeClusterNode,
    options?: EdgeClusterNodesCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<EdgeClusterNodesCreateOrUpdateResponse>,
      EdgeClusterNodesCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<EdgeClusterNodesCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        edgeClusterName,
        nodeName,
        edgeClusterNodeParameters,
        options,
      },
      spec: createOrUpdateOperationSpec,
    });
    const poller = await createHttpPoller<
      EdgeClusterNodesCreateOrUpdateResponse,
      OperationState<EdgeClusterNodesCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create a new edge cluster node or update properties of the edge cluster node if it exists.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param edgeClusterName The name of the edge cluster.
   * @param nodeName The name of the node.
   * @param edgeClusterNodeParameters The request body.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    edgeClusterName: string,
    nodeName: string,
    edgeClusterNodeParameters: EdgeClusterNode,
    options?: EdgeClusterNodesCreateOrUpdateOptionalParams,
  ): Promise<EdgeClusterNodesCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      edgeClusterName,
      nodeName,
      edgeClusterNodeParameters,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Delete the provided edge cluster node.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param edgeClusterName The name of the edge cluster.
   * @param nodeName The name of the node.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    edgeClusterName: string,
    nodeName: string,
    options?: EdgeClusterNodesDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<EdgeClusterNodesDeleteResponse>,
      EdgeClusterNodesDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<EdgeClusterNodesDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, edgeClusterName, nodeName, options },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<
      EdgeClusterNodesDeleteResponse,
      OperationState<EdgeClusterNodesDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete the provided edge cluster node.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param edgeClusterName The name of the edge cluster.
   * @param nodeName The name of the node.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    edgeClusterName: string,
    nodeName: string,
    options?: EdgeClusterNodesDeleteOptionalParams,
  ): Promise<EdgeClusterNodesDeleteResponse> {
    const poller = await this.beginDelete(
      resourceGroupName,
      edgeClusterName,
      nodeName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Patch properties of the provided edge cluster node, or update the tags assigned to the edge cluster
   * node. Properties and tag updates can be done independently.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param edgeClusterName The name of the edge cluster.
   * @param nodeName The name of the node.
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    edgeClusterName: string,
    nodeName: string,
    options?: EdgeClusterNodesUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<EdgeClusterNodesUpdateResponse>,
      EdgeClusterNodesUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<EdgeClusterNodesUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, edgeClusterName, nodeName, options },
      spec: updateOperationSpec,
    });
    const poller = await createHttpPoller<
      EdgeClusterNodesUpdateResponse,
      OperationState<EdgeClusterNodesUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Patch properties of the provided edge cluster node, or update the tags assigned to the edge cluster
   * node. Properties and tag updates can be done independently.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param edgeClusterName The name of the edge cluster.
   * @param nodeName The name of the node.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    edgeClusterName: string,
    nodeName: string,
    options?: EdgeClusterNodesUpdateOptionalParams,
  ): Promise<EdgeClusterNodesUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      edgeClusterName,
      nodeName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Reimages the edge cluster node, returning it to a refreshed OS image.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param edgeClusterName The name of the edge cluster.
   * @param nodeName The name of the node.
   * @param options The options parameters.
   */
  async beginReimage(
    resourceGroupName: string,
    edgeClusterName: string,
    nodeName: string,
    options?: EdgeClusterNodesReimageOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<EdgeClusterNodesReimageResponse>,
      EdgeClusterNodesReimageResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<EdgeClusterNodesReimageResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, edgeClusterName, nodeName, options },
      spec: reimageOperationSpec,
    });
    const poller = await createHttpPoller<
      EdgeClusterNodesReimageResponse,
      OperationState<EdgeClusterNodesReimageResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Reimages the edge cluster node, returning it to a refreshed OS image.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param edgeClusterName The name of the edge cluster.
   * @param nodeName The name of the node.
   * @param options The options parameters.
   */
  async beginReimageAndWait(
    resourceGroupName: string,
    edgeClusterName: string,
    nodeName: string,
    options?: EdgeClusterNodesReimageOptionalParams,
  ): Promise<EdgeClusterNodesReimageResponse> {
    const poller = await this.beginReimage(
      resourceGroupName,
      edgeClusterName,
      nodeName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Restarts the edge cluster node.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param edgeClusterName The name of the edge cluster.
   * @param nodeName The name of the node.
   * @param options The options parameters.
   */
  async beginRestart(
    resourceGroupName: string,
    edgeClusterName: string,
    nodeName: string,
    options?: EdgeClusterNodesRestartOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<EdgeClusterNodesRestartResponse>,
      EdgeClusterNodesRestartResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<EdgeClusterNodesRestartResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, edgeClusterName, nodeName, options },
      spec: restartOperationSpec,
    });
    const poller = await createHttpPoller<
      EdgeClusterNodesRestartResponse,
      OperationState<EdgeClusterNodesRestartResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Restarts the edge cluster node.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param edgeClusterName The name of the edge cluster.
   * @param nodeName The name of the node.
   * @param options The options parameters.
   */
  async beginRestartAndWait(
    resourceGroupName: string,
    edgeClusterName: string,
    nodeName: string,
    options?: EdgeClusterNodesRestartOptionalParams,
  ): Promise<EdgeClusterNodesRestartResponse> {
    const poller = await this.beginRestart(
      resourceGroupName,
      edgeClusterName,
      nodeName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Synchronizes the time for the edge cluster node.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param edgeClusterName The name of the edge cluster.
   * @param nodeName The name of the node.
   * @param options The options parameters.
   */
  async beginSynchronizeTime(
    resourceGroupName: string,
    edgeClusterName: string,
    nodeName: string,
    options?: EdgeClusterNodesSynchronizeTimeOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<EdgeClusterNodesSynchronizeTimeResponse>,
      EdgeClusterNodesSynchronizeTimeResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<EdgeClusterNodesSynchronizeTimeResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, edgeClusterName, nodeName, options },
      spec: synchronizeTimeOperationSpec,
    });
    const poller = await createHttpPoller<
      EdgeClusterNodesSynchronizeTimeResponse,
      OperationState<EdgeClusterNodesSynchronizeTimeResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Synchronizes the time for the edge cluster node.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param edgeClusterName The name of the edge cluster.
   * @param nodeName The name of the node.
   * @param options The options parameters.
   */
  async beginSynchronizeTimeAndWait(
    resourceGroupName: string,
    edgeClusterName: string,
    nodeName: string,
    options?: EdgeClusterNodesSynchronizeTimeOptionalParams,
  ): Promise<EdgeClusterNodesSynchronizeTimeResponse> {
    const poller = await this.beginSynchronizeTime(
      resourceGroupName,
      edgeClusterName,
      nodeName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * ListByEdgeClusterNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param edgeClusterName The name of the edge cluster.
   * @param nextLink The nextLink from the previous successful call to the ListByEdgeCluster method.
   * @param options The options parameters.
   */
  private _listByEdgeClusterNext(
    resourceGroupName: string,
    edgeClusterName: string,
    nextLink: string,
    options?: EdgeClusterNodesListByEdgeClusterNextOptionalParams,
  ): Promise<EdgeClusterNodesListByEdgeClusterNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, edgeClusterName, nextLink, options },
      listByEdgeClusterNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByEdgeClusterOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/edgeClusters/{edgeClusterName}/nodes",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EdgeClusterNodeList,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.edgeClusterName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/edgeClusters/{edgeClusterName}/nodes/{nodeName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EdgeClusterNode,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.edgeClusterName,
    Parameters.nodeName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/edgeClusters/{edgeClusterName}/nodes/{nodeName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.EdgeClusterNode,
    },
    201: {
      bodyMapper: Mappers.EdgeClusterNode,
    },
    202: {
      bodyMapper: Mappers.EdgeClusterNode,
    },
    204: {
      bodyMapper: Mappers.EdgeClusterNode,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.edgeClusterNodeParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.edgeClusterName,
    Parameters.nodeName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/edgeClusters/{edgeClusterName}/nodes/{nodeName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    201: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    202: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    204: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.edgeClusterName,
    Parameters.nodeName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/edgeClusters/{edgeClusterName}/nodes/{nodeName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.EdgeClusterNode,
    },
    201: {
      bodyMapper: Mappers.EdgeClusterNode,
    },
    202: {
      bodyMapper: Mappers.EdgeClusterNode,
    },
    204: {
      bodyMapper: Mappers.EdgeClusterNode,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.edgeClusterNodeUpdateParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.edgeClusterName,
    Parameters.nodeName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const reimageOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/edgeClusters/{edgeClusterName}/nodes/{nodeName}/reimage",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    201: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    202: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    204: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.edgeClusterName,
    Parameters.nodeName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const restartOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/edgeClusters/{edgeClusterName}/nodes/{nodeName}/restart",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    201: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    202: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    204: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.edgeClusterName,
    Parameters.nodeName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const synchronizeTimeOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/edgeClusters/{edgeClusterName}/nodes/{nodeName}/synchronizeTime",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    201: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    202: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    204: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.edgeClusterName,
    Parameters.nodeName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByEdgeClusterNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EdgeClusterNodeList,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.edgeClusterName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
