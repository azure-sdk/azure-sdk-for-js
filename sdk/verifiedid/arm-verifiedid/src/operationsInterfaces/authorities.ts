/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  Authority,
  AuthoritiesListBySubscriptionOptionalParams,
  AuthoritiesListByResourceGroupOptionalParams,
  AuthoritiesGetOptionalParams,
  AuthoritiesGetResponse,
  AuthoritiesCreateOrUpdateOptionalParams,
  AuthoritiesCreateOrUpdateResponse,
  AuthorityUpdate,
  AuthoritiesUpdateOptionalParams,
  AuthoritiesUpdateResponse,
  AuthoritiesDeleteOptionalParams,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Authorities. */
export interface Authorities {
  /**
   * List Authority resources by subscription ID
   * @param options The options parameters.
   */
  listBySubscription(
    options?: AuthoritiesListBySubscriptionOptionalParams,
  ): PagedAsyncIterableIterator<Authority>;
  /**
   * List Authority resources by resource group
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: AuthoritiesListByResourceGroupOptionalParams,
  ): PagedAsyncIterableIterator<Authority>;
  /**
   * Get a Authority
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param authorityName The ID of the authority
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    authorityName: string,
    options?: AuthoritiesGetOptionalParams,
  ): Promise<AuthoritiesGetResponse>;
  /**
   * Create a Authority
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param authorityName The ID of the authority
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    authorityName: string,
    resource: Authority,
    options?: AuthoritiesCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<AuthoritiesCreateOrUpdateResponse>,
      AuthoritiesCreateOrUpdateResponse
    >
  >;
  /**
   * Create a Authority
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param authorityName The ID of the authority
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    authorityName: string,
    resource: Authority,
    options?: AuthoritiesCreateOrUpdateOptionalParams,
  ): Promise<AuthoritiesCreateOrUpdateResponse>;
  /**
   * Update a Authority
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param authorityName The ID of the authority
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    authorityName: string,
    properties: AuthorityUpdate,
    options?: AuthoritiesUpdateOptionalParams,
  ): Promise<AuthoritiesUpdateResponse>;
  /**
   * Delete a Authority
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param authorityName The ID of the authority
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    authorityName: string,
    options?: AuthoritiesDeleteOptionalParams,
  ): Promise<void>;
}
