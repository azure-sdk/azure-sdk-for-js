/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { Authorities } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { VerifiedIdMgmtClientForTesting } from "../verifiedIdMgmtClientForTesting";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  Authority,
  AuthoritiesListBySubscriptionNextOptionalParams,
  AuthoritiesListBySubscriptionOptionalParams,
  AuthoritiesListBySubscriptionResponse,
  AuthoritiesListByResourceGroupNextOptionalParams,
  AuthoritiesListByResourceGroupOptionalParams,
  AuthoritiesListByResourceGroupResponse,
  AuthoritiesGetOptionalParams,
  AuthoritiesGetResponse,
  AuthoritiesCreateOrUpdateOptionalParams,
  AuthoritiesCreateOrUpdateResponse,
  AuthorityUpdate,
  AuthoritiesUpdateOptionalParams,
  AuthoritiesUpdateResponse,
  AuthoritiesDeleteOptionalParams,
  AuthoritiesListBySubscriptionNextResponse,
  AuthoritiesListByResourceGroupNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Authorities operations. */
export class AuthoritiesImpl implements Authorities {
  private readonly client: VerifiedIdMgmtClientForTesting;

  /**
   * Initialize a new instance of the class Authorities class.
   * @param client Reference to the service client
   */
  constructor(client: VerifiedIdMgmtClientForTesting) {
    this.client = client;
  }

  /**
   * List Authority resources by subscription ID
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: AuthoritiesListBySubscriptionOptionalParams,
  ): PagedAsyncIterableIterator<Authority> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionPagingPage(options, settings);
      },
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: AuthoritiesListBySubscriptionOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<Authority[]> {
    let result: AuthoritiesListBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySubscription(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySubscriptionPagingAll(
    options?: AuthoritiesListBySubscriptionOptionalParams,
  ): AsyncIterableIterator<Authority> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * List Authority resources by resource group
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: AuthoritiesListByResourceGroupOptionalParams,
  ): PagedAsyncIterableIterator<Authority> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByResourceGroupPagingPage(
          resourceGroupName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: AuthoritiesListByResourceGroupOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<Authority[]> {
    let result: AuthoritiesListByResourceGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByResourceGroup(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: AuthoritiesListByResourceGroupOptionalParams,
  ): AsyncIterableIterator<Authority> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List Authority resources by subscription ID
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: AuthoritiesListBySubscriptionOptionalParams,
  ): Promise<AuthoritiesListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec,
    );
  }

  /**
   * List Authority resources by resource group
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: AuthoritiesListByResourceGroupOptionalParams,
  ): Promise<AuthoritiesListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec,
    );
  }

  /**
   * Get a Authority
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param authorityName The ID of the authority
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    authorityName: string,
    options?: AuthoritiesGetOptionalParams,
  ): Promise<AuthoritiesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, authorityName, options },
      getOperationSpec,
    );
  }

  /**
   * Create a Authority
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param authorityName The ID of the authority
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    authorityName: string,
    resource: Authority,
    options?: AuthoritiesCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<AuthoritiesCreateOrUpdateResponse>,
      AuthoritiesCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<AuthoritiesCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, authorityName, resource, options },
      spec: createOrUpdateOperationSpec,
    });
    const poller = await createHttpPoller<
      AuthoritiesCreateOrUpdateResponse,
      OperationState<AuthoritiesCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create a Authority
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param authorityName The ID of the authority
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    authorityName: string,
    resource: Authority,
    options?: AuthoritiesCreateOrUpdateOptionalParams,
  ): Promise<AuthoritiesCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      authorityName,
      resource,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Update a Authority
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param authorityName The ID of the authority
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    authorityName: string,
    properties: AuthorityUpdate,
    options?: AuthoritiesUpdateOptionalParams,
  ): Promise<AuthoritiesUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, authorityName, properties, options },
      updateOperationSpec,
    );
  }

  /**
   * Delete a Authority
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param authorityName The ID of the authority
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    authorityName: string,
    options?: AuthoritiesDeleteOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, authorityName, options },
      deleteOperationSpec,
    );
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: AuthoritiesListBySubscriptionNextOptionalParams,
  ): Promise<AuthoritiesListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec,
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: AuthoritiesListByResourceGroupNextOptionalParams,
  ): Promise<AuthoritiesListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.VerifiedId/authorities",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AuthorityListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VerifiedId/authorities",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AuthorityListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VerifiedId/authorities/{authorityName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Authority,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.authorityName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VerifiedId/authorities/{authorityName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Authority,
    },
    201: {
      bodyMapper: Mappers.Authority,
    },
    202: {
      bodyMapper: Mappers.Authority,
    },
    204: {
      bodyMapper: Mappers.Authority,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.resource,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.authorityName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VerifiedId/authorities/{authorityName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Authority,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.properties,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.authorityName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VerifiedId/authorities/{authorityName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.authorityName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AuthorityListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AuthorityListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
