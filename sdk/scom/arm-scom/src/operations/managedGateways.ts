/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { ManagedGateways } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureAPIForManagingScomManagedInstancesAndMonitoredResources } from "../azureAPIForManagingScomManagedInstancesAndMonitoredResources";
import {
  ManagedGateway,
  ManagedGatewaysListByManagedInstanceNextOptionalParams,
  ManagedGatewaysListByManagedInstanceOptionalParams,
  ManagedGatewaysListByManagedInstanceResponse,
  ManagedGatewaysGetOptionalParams,
  ManagedGatewaysGetResponse,
  ManagedGatewaysCreateOrUpdateOptionalParams,
  ManagedGatewaysCreateOrUpdateResponse,
  ManagedGatewaysDeleteOptionalParams,
  ManagedGatewaysListByManagedInstanceNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ManagedGateways operations. */
export class ManagedGatewaysImpl implements ManagedGateways {
  private readonly client: AzureAPIForManagingScomManagedInstancesAndMonitoredResources;

  /**
   * Initialize a new instance of the class ManagedGateways class.
   * @param client Reference to the service client
   */
  constructor(
    client: AzureAPIForManagingScomManagedInstancesAndMonitoredResources
  ) {
    this.client = client;
  }

  /**
   * A comprehensive list of all gateway resources within a SCOM managed instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI)
   * @param options The options parameters.
   */
  public listByManagedInstance(
    resourceGroupName: string,
    instanceName: string,
    options?: ManagedGatewaysListByManagedInstanceOptionalParams
  ): PagedAsyncIterableIterator<ManagedGateway> {
    const iter = this.listByManagedInstancePagingAll(
      resourceGroupName,
      instanceName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByManagedInstancePagingPage(
          resourceGroupName,
          instanceName,
          options,
          settings
        );
      }
    };
  }

  private async *listByManagedInstancePagingPage(
    resourceGroupName: string,
    instanceName: string,
    options?: ManagedGatewaysListByManagedInstanceOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<ManagedGateway[]> {
    let result: ManagedGatewaysListByManagedInstanceResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByManagedInstance(
        resourceGroupName,
        instanceName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByManagedInstanceNext(
        resourceGroupName,
        instanceName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByManagedInstancePagingAll(
    resourceGroupName: string,
    instanceName: string,
    options?: ManagedGatewaysListByManagedInstanceOptionalParams
  ): AsyncIterableIterator<ManagedGateway> {
    for await (const page of this.listByManagedInstancePagingPage(
      resourceGroupName,
      instanceName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * A comprehensive list of all gateway resources within a SCOM managed instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI)
   * @param options The options parameters.
   */
  private _listByManagedInstance(
    resourceGroupName: string,
    instanceName: string,
    options?: ManagedGatewaysListByManagedInstanceOptionalParams
  ): Promise<ManagedGatewaysListByManagedInstanceResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, instanceName, options },
      listByManagedInstanceOperationSpec
    );
  }

  /**
   * Retrieve the details of the gateway resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI)
   * @param managedGatewayName The gateway resource name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    instanceName: string,
    managedGatewayName: string,
    options?: ManagedGatewaysGetOptionalParams
  ): Promise<ManagedGatewaysGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, instanceName, managedGatewayName, options },
      getOperationSpec
    );
  }

  /**
   * Create or update a gateway resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI)
   * @param managedGatewayName The gateway resource name.
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    instanceName: string,
    managedGatewayName: string,
    resource: ManagedGateway,
    options?: ManagedGatewaysCreateOrUpdateOptionalParams
  ): Promise<ManagedGatewaysCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        instanceName,
        managedGatewayName,
        resource,
        options
      },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Remove a gateway resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI)
   * @param managedGatewayName The gateway resource name.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    instanceName: string,
    managedGatewayName: string,
    options?: ManagedGatewaysDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, instanceName, managedGatewayName, options },
      deleteOperationSpec
    );
  }

  /**
   * ListByManagedInstanceNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI)
   * @param nextLink The nextLink from the previous successful call to the ListByManagedInstance method.
   * @param options The options parameters.
   */
  private _listByManagedInstanceNext(
    resourceGroupName: string,
    instanceName: string,
    nextLink: string,
    options?: ManagedGatewaysListByManagedInstanceNextOptionalParams
  ): Promise<ManagedGatewaysListByManagedInstanceNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, instanceName, nextLink, options },
      listByManagedInstanceNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByManagedInstanceOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scom/managedInstances/{instanceName}/managedGateways",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ManagedGatewayListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.instanceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scom/managedInstances/{instanceName}/managedGateways/{managedGatewayName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ManagedGateway
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.instanceName,
    Parameters.managedGatewayName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scom/managedInstances/{instanceName}/managedGateways/{managedGatewayName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ManagedGateway
    },
    201: {
      bodyMapper: Mappers.ManagedGateway
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.resource,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.instanceName,
    Parameters.managedGatewayName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scom/managedInstances/{instanceName}/managedGateways/{managedGatewayName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.instanceName,
    Parameters.managedGatewayName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByManagedInstanceNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ManagedGatewayListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
    Parameters.instanceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
