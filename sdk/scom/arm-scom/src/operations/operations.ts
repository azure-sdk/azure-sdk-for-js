/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { Operations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureAPIForManagingScomManagedInstancesAndMonitoredResources } from "../azureAPIForManagingScomManagedInstancesAndMonitoredResources";
import {
  Operation,
  OperationsListV2NextOptionalParams,
  OperationsListV2OptionalParams,
  OperationsListV2Response,
  OperationsListV2NextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Operations operations. */
export class OperationsImpl implements Operations {
  private readonly client: AzureAPIForManagingScomManagedInstancesAndMonitoredResources;

  /**
   * Initialize a new instance of the class Operations class.
   * @param client Reference to the service client
   */
  constructor(
    client: AzureAPIForManagingScomManagedInstancesAndMonitoredResources,
  ) {
    this.client = client;
  }

  /**
   * Lists all available operations on SCOM managed instance (SCOM MI)
   * @param options The options parameters.
   */
  public listV2(
    options?: OperationsListV2OptionalParams,
  ): PagedAsyncIterableIterator<Operation> {
    const iter = this.listV2PagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listV2PagingPage(options, settings);
      },
    };
  }

  private async *listV2PagingPage(
    options?: OperationsListV2OptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<Operation[]> {
    let result: OperationsListV2Response;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listV2(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listV2Next(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listV2PagingAll(
    options?: OperationsListV2OptionalParams,
  ): AsyncIterableIterator<Operation> {
    for await (const page of this.listV2PagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Lists all available operations on SCOM managed instance (SCOM MI)
   * @param options The options parameters.
   */
  private _listV2(
    options?: OperationsListV2OptionalParams,
  ): Promise<OperationsListV2Response> {
    return this.client.sendOperationRequest({ options }, listV2OperationSpec);
  }

  /**
   * ListV2Next
   * @param nextLink The nextLink from the previous successful call to the ListV2 method.
   * @param options The options parameters.
   */
  private _listV2Next(
    nextLink: string,
    options?: OperationsListV2NextOptionalParams,
  ): Promise<OperationsListV2NextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listV2NextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listV2OperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Scom/operations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OperationListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer,
};
const listV2NextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OperationListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer,
};
