/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter,
} from "@azure/core-client";
import {
  ManagedInstance as ManagedInstanceMapper,
  MonitoringInstancePatch as MonitoringInstancePatchMapper,
  ScalingProperties as ScalingPropertiesMapper,
  LogAnalyticsConfiguration as LogAnalyticsConfigurationMapper,
  LogAnalyticsUpdateConfiguration as LogAnalyticsUpdateConfigurationMapper,
  GetResourceListProperties as GetResourceListPropertiesMapper,
  GatewayOnboardingProperties as GatewayOnboardingPropertiesMapper,
  MonitoredResourceOffboardingProperties as MonitoredResourceOffboardingPropertiesMapper,
  MonitoredResource as MonitoredResourceMapper,
  ManagedGateway as ManagedGatewayMapper,
} from "../models/mappers";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String",
    },
  },
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2023-10-30",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String",
    },
  },
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "Uuid",
    },
  },
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    constraints: {
      MaxLength: 90,
      MinLength: 1,
    },
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const instanceName: OperationURLParameter = {
  parameterPath: "instanceName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9-_]*$"),
    },
    serializedName: "instanceName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String",
    },
  },
};

export const managedInstance: OperationParameter = {
  parameterPath: "managedInstance",
  mapper: ManagedInstanceMapper,
};

export const validationMode: OperationQueryParameter = {
  parameterPath: ["options", "validationMode"],
  mapper: {
    serializedName: "validationMode",
    type: {
      name: "Boolean",
    },
  },
};

export const managedInstance1: OperationParameter = {
  parameterPath: ["options", "managedInstance"],
  mapper: MonitoringInstancePatchMapper,
};

export const body: OperationParameter = {
  parameterPath: "body",
  mapper: ScalingPropertiesMapper,
};

export const body1: OperationParameter = {
  parameterPath: "body",
  mapper: LogAnalyticsConfigurationMapper,
};

export const body2: OperationParameter = {
  parameterPath: "body",
  mapper: LogAnalyticsUpdateConfigurationMapper,
};

export const body3: OperationParameter = {
  parameterPath: "body",
  mapper: GetResourceListPropertiesMapper,
};

export const body4: OperationParameter = {
  parameterPath: "body",
  mapper: GatewayOnboardingPropertiesMapper,
};

export const body5: OperationParameter = {
  parameterPath: "body",
  mapper: MonitoredResourceOffboardingPropertiesMapper,
};

export const instanceName1: OperationURLParameter = {
  parameterPath: "instanceName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9-_]*$"),
    },
    serializedName: "instanceName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const monitoredResourceName: OperationURLParameter = {
  parameterPath: "monitoredResourceName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9-_]*$"),
    },
    serializedName: "monitoredResourceName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const monitoredResource: OperationParameter = {
  parameterPath: "monitoredResource",
  mapper: MonitoredResourceMapper,
};

export const managedGatewayName: OperationURLParameter = {
  parameterPath: "managedGatewayName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9-_]*$"),
    },
    serializedName: "managedGatewayName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const managedGateway: OperationParameter = {
  parameterPath: "managedGateway",
  mapper: ManagedGatewayMapper,
};
