/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  DescendantInfo,
  ManagementGroupsGetDescendantsOptionalParams,
  HierarchySettings,
  ManagementGroupsListSettingsOptionalParams,
  ManagementGroupsGetOptionalParams,
  ManagementGroupsGetResponse,
  ManagementGroup,
  ManagementGroupsCreateOrUpdateOptionalParams,
  ManagementGroupsCreateOrUpdateResponse,
  PatchManagementGroupRequest,
  ManagementGroupsUpdateOptionalParams,
  ManagementGroupsUpdateResponse,
  ManagementGroupsDeleteOptionalParams,
  ManagementGroupsDeleteResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a ManagementGroups. */
export interface ManagementGroups {
  /**
   * List all entities that descend from a management group.
   * @param groupId Management Group ID.
   * @param options The options parameters.
   */
  listDescendants(
    groupId: string,
    options?: ManagementGroupsGetDescendantsOptionalParams,
  ): PagedAsyncIterableIterator<DescendantInfo>;
  /**
   * Gets all the hierarchy settings defined at the Management Group level. Settings can only be set on
   * the root Management Group of the hierarchy.
   * @param groupId Management Group ID.
   * @param options The options parameters.
   */
  listSettings(
    groupId: string,
    options?: ManagementGroupsListSettingsOptionalParams,
  ): PagedAsyncIterableIterator<HierarchySettings>;
  /**
   * Get the details of the management group.
   * @param groupId Management Group ID.
   * @param options The options parameters.
   */
  get(
    groupId: string,
    options?: ManagementGroupsGetOptionalParams,
  ): Promise<ManagementGroupsGetResponse>;
  /**
   * Create or update a management group.
   * If a management group is already created and a subsequent create request is issued with different
   * properties, the management group properties will be updated.
   * @param groupId Management Group ID.
   * @param resource Management group creation parameters.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    groupId: string,
    resource: ManagementGroup,
    options?: ManagementGroupsCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ManagementGroupsCreateOrUpdateResponse>,
      ManagementGroupsCreateOrUpdateResponse
    >
  >;
  /**
   * Create or update a management group.
   * If a management group is already created and a subsequent create request is issued with different
   * properties, the management group properties will be updated.
   * @param groupId Management Group ID.
   * @param resource Management group creation parameters.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    groupId: string,
    resource: ManagementGroup,
    options?: ManagementGroupsCreateOrUpdateOptionalParams,
  ): Promise<ManagementGroupsCreateOrUpdateResponse>;
  /**
   * Update a management group.
   * @param groupId Management Group ID.
   * @param properties Management group patch parameters.
   * @param options The options parameters.
   */
  update(
    groupId: string,
    properties: PatchManagementGroupRequest,
    options?: ManagementGroupsUpdateOptionalParams,
  ): Promise<ManagementGroupsUpdateResponse>;
  /**
   * Delete management group.
   * If a management group contains child resources, the request will fail.
   * @param groupId Management Group ID.
   * @param options The options parameters.
   */
  beginDelete(
    groupId: string,
    options?: ManagementGroupsDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ManagementGroupsDeleteResponse>,
      ManagementGroupsDeleteResponse
    >
  >;
  /**
   * Delete management group.
   * If a management group contains child resources, the request will fail.
   * @param groupId Management Group ID.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    groupId: string,
    options?: ManagementGroupsDeleteOptionalParams,
  ): Promise<ManagementGroupsDeleteResponse>;
}
