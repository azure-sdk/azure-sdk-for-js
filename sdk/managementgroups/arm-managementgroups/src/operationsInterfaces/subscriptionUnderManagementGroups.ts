/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  SubscriptionUnderManagementGroup,
  SubscriptionUnderManagementGroupsGetSubscriptionsUnderManagementGroupOptionalParams,
  SubscriptionUnderManagementGroupsGetSubscriptionOptionalParams,
  SubscriptionUnderManagementGroupsGetSubscriptionResponse,
  SubscriptionUnderManagementGroupsCreateOptionalParams,
  SubscriptionUnderManagementGroupsCreateResponse,
  SubscriptionUnderManagementGroupsDeleteOptionalParams,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a SubscriptionUnderManagementGroups. */
export interface SubscriptionUnderManagementGroups {
  /**
   * Retrieves details about all subscriptions which are associated with the management group.
   * @param groupId Management Group ID.
   * @param options The options parameters.
   */
  listSubscriptionsUnderManagementGroup(
    groupId: string,
    options?: SubscriptionUnderManagementGroupsGetSubscriptionsUnderManagementGroupOptionalParams,
  ): PagedAsyncIterableIterator<SubscriptionUnderManagementGroup>;
  /**
   * Retrieves details about given subscription which is associated with the management group.
   * @param groupId Management Group ID.
   * @param subscriptionId Subscription ID.
   * @param options The options parameters.
   */
  getSubscription(
    groupId: string,
    subscriptionId: string,
    options?: SubscriptionUnderManagementGroupsGetSubscriptionOptionalParams,
  ): Promise<SubscriptionUnderManagementGroupsGetSubscriptionResponse>;
  /**
   * Associates existing subscription with the management group.
   * @param groupId Management Group ID.
   * @param subscriptionId Subscription ID.
   * @param options The options parameters.
   */
  create(
    groupId: string,
    subscriptionId: string,
    options?: SubscriptionUnderManagementGroupsCreateOptionalParams,
  ): Promise<SubscriptionUnderManagementGroupsCreateResponse>;
  /**
   * De-associates subscription from the management group.
   * @param groupId Management Group ID.
   * @param subscriptionId Subscription ID.
   * @param options The options parameters.
   */
  delete(
    groupId: string,
    subscriptionId: string,
    options?: SubscriptionUnderManagementGroupsDeleteOptionalParams,
  ): Promise<void>;
}
