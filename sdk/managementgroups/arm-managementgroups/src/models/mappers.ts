/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const PathsItdwrvProvidersMicrosoftManagementChecknameavailabilityPostRequestbodyContentApplicationJsonSchema: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className:
        "PathsItdwrvProvidersMicrosoftManagementChecknameavailabilityPostRequestbodyContentApplicationJsonSchema",
      modelProperties: {
        checkNameAvailabilityRequest: {
          serializedName: "CheckNameAvailabilityRequest",
          type: {
            name: "Composite",
            className: "CheckNameAvailabilityRequest",
          },
        },
      },
    },
  };

export const CheckNameAvailabilityRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityRequest",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      type: {
        defaultValue: "Microsoft.Management/managementGroups",
        isConstant: true,
        serializedName: "type",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const CheckNameAvailabilityResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityResult",
    modelProperties: {
      nameAvailable: {
        serializedName: "nameAvailable",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      reason: {
        serializedName: "reason",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Invalid", "AlreadyExists"],
        },
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail",
        },
      },
    },
  },
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail",
            },
          },
        },
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo",
            },
          },
        },
      },
    },
  },
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } },
        },
      },
    },
  },
};

export const EntityListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EntityListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EntityInfo",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
      count: {
        serializedName: "count",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const EntityInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EntityInfo",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "EntityInfoProperties",
        },
      },
    },
  },
};

export const EntityInfoProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EntityInfoProperties",
    modelProperties: {
      tenantId: {
        serializedName: "tenantId",
        type: {
          name: "String",
        },
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String",
        },
      },
      parent: {
        serializedName: "parent",
        type: {
          name: "Composite",
          className: "EntityParentGroupInfo",
        },
      },
      permissions: {
        serializedName: "permissions",
        type: {
          name: "Enum",
          allowedValues: ["noaccess", "view", "edit", "delete"],
        },
      },
      inheritedPermissions: {
        serializedName: "inheritedPermissions",
        type: {
          name: "Enum",
          allowedValues: ["noaccess", "view", "edit", "delete"],
        },
      },
      numberOfDescendants: {
        serializedName: "numberOfDescendants",
        type: {
          name: "Number",
        },
      },
      numberOfChildren: {
        serializedName: "numberOfChildren",
        type: {
          name: "Number",
        },
      },
      numberOfChildGroups: {
        serializedName: "numberOfChildGroups",
        type: {
          name: "Number",
        },
      },
      parentDisplayNameChain: {
        serializedName: "parentDisplayNameChain",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      parentNameChain: {
        serializedName: "parentNameChain",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const EntityParentGroupInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EntityParentGroupInfo",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ManagementGroupProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagementGroupProperties",
    modelProperties: {
      tenantId: {
        serializedName: "tenantId",
        type: {
          name: "String",
        },
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String",
        },
      },
      details: {
        serializedName: "details",
        type: {
          name: "Composite",
          className: "ManagementGroupDetails",
        },
      },
      children: {
        serializedName: "children",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagementGroupChildInfo",
            },
          },
        },
      },
    },
  },
};

export const ManagementGroupDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagementGroupDetails",
    modelProperties: {
      version: {
        serializedName: "version",
        type: {
          name: "Number",
        },
      },
      updatedTime: {
        serializedName: "updatedTime",
        type: {
          name: "DateTime",
        },
      },
      updatedBy: {
        serializedName: "updatedBy",
        type: {
          name: "String",
        },
      },
      parent: {
        serializedName: "parent",
        type: {
          name: "Composite",
          className: "ParentGroupInfo",
        },
      },
      path: {
        serializedName: "path",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagementGroupPathElement",
            },
          },
        },
      },
      managementGroupAncestors: {
        serializedName: "managementGroupAncestors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      managementGroupAncestorsChain: {
        serializedName: "managementGroupAncestorsChain",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagementGroupPathElement",
            },
          },
        },
      },
    },
  },
};

export const ParentGroupInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ParentGroupInfo",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ManagementGroupPathElement: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagementGroupPathElement",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ManagementGroupChildInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagementGroupChildInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "Enum",
          allowedValues: [
            "Microsoft.Management/managementGroups",
            "/subscriptions",
          ],
        },
      },
      id: {
        serializedName: "id",
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String",
        },
      },
      children: {
        serializedName: "children",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagementGroupChildInfo",
            },
          },
        },
      },
    },
  },
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData",
        },
      },
    },
  },
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String",
        },
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String",
        },
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime",
        },
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String",
        },
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String",
        },
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const ManagementGroupOperationAcceptance: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagementGroupOperationAcceptance",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PatchManagementGroupRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PatchManagementGroupRequest",
    modelProperties: {
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String",
        },
      },
      parentGroupId: {
        serializedName: "parentGroupId",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const DescendantListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DescendantListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DescendantInfo",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const DescendantInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DescendantInfo",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "DescendantInfoProperties",
        },
      },
    },
  },
};

export const DescendantInfoProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DescendantInfoProperties",
    modelProperties: {
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String",
        },
      },
      parent: {
        serializedName: "parent",
        type: {
          name: "Composite",
          className: "DescendantParentGroupInfo",
        },
      },
    },
  },
};

export const DescendantParentGroupInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DescendantParentGroupInfo",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const HierarchySettingsListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HierarchySettingsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HierarchySettings",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const HierarchySettingsProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HierarchySettingsProperties",
    modelProperties: {
      tenantId: {
        serializedName: "tenantId",
        type: {
          name: "String",
        },
      },
      requireAuthorizationForGroupCreation: {
        serializedName: "requireAuthorizationForGroupCreation",
        type: {
          name: "Boolean",
        },
      },
      defaultManagementGroup: {
        serializedName: "defaultManagementGroup",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const CreateOrUpdateSettingsRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CreateOrUpdateSettingsRequest",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "CreateOrUpdateSettingsProperties",
        },
      },
    },
  },
};

export const CreateOrUpdateSettingsProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CreateOrUpdateSettingsProperties",
    modelProperties: {
      requireAuthorizationForGroupCreation: {
        serializedName: "requireAuthorizationForGroupCreation",
        type: {
          name: "Boolean",
        },
      },
      defaultManagementGroup: {
        serializedName: "defaultManagementGroup",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SubscriptionUnderManagementGroupListResult: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "SubscriptionUnderManagementGroupListResult",
      modelProperties: {
        value: {
          serializedName: "value",
          required: true,
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "Composite",
                className: "SubscriptionUnderManagementGroup",
              },
            },
          },
        },
        nextLink: {
          serializedName: "nextLink",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const SubscriptionUnderManagementGroupProperties: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "SubscriptionUnderManagementGroupProperties",
      modelProperties: {
        tenant: {
          serializedName: "tenant",
          type: {
            name: "String",
          },
        },
        displayName: {
          serializedName: "displayName",
          type: {
            name: "String",
          },
        },
        parent: {
          serializedName: "parent",
          type: {
            name: "Composite",
            className: "DescendantParentGroupInfo",
          },
        },
        state: {
          serializedName: "state",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      isDataAction: {
        serializedName: "isDataAction",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay",
        },
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      actionType: {
        serializedName: "actionType",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const TenantBackfillStatusResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TenantBackfillStatusResult",
    modelProperties: {
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "NotStarted",
            "NotStartedButGroupsExist",
            "Started",
            "Failed",
            "Cancelled",
            "Completed",
          ],
        },
      },
    },
  },
};

export const ManagementGroupListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagementGroupListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagementGroup",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties,
    },
  },
};

export const ManagementGroup: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagementGroup",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ManagementGroupProperties",
        },
      },
    },
  },
};

export const HierarchySettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HierarchySettings",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "HierarchySettingsProperties",
        },
      },
    },
  },
};

export const SubscriptionUnderManagementGroup: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SubscriptionUnderManagementGroup",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "SubscriptionUnderManagementGroupProperties",
        },
      },
    },
  },
};

export const ManagementGroupsCreateOrUpdateHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "ManagementGroupsCreateOrUpdateHeaders",
      modelProperties: {
        azureAsyncOperation: {
          serializedName: "azure-asyncoperation",
          type: {
            name: "String",
          },
        },
        retryAfter: {
          serializedName: "retry-after",
          type: {
            name: "Number",
          },
        },
      },
    },
  };

export const ManagementGroupsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagementGroupsDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};
