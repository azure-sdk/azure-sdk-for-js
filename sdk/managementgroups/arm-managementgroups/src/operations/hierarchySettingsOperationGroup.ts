/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { HierarchySettingsOperationGroup } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ManagementGroupsAPI } from "../managementGroupsAPI";
import {
  HierarchySettings,
  HierarchySettingsOperationGroupListNextOptionalParams,
  HierarchySettingsOperationGroupListOptionalParams,
  HierarchySettingsOperationGroupListResponse,
  HierarchySettingsOperationGroupGetOptionalParams,
  HierarchySettingsOperationGroupGetResponse,
  HierarchySettingsOperationGroupCreateOrUpdateOptionalParams,
  HierarchySettingsOperationGroupCreateOrUpdateResponse,
  CreateOrUpdateSettingsRequest,
  HierarchySettingsOperationGroupUpdateOptionalParams,
  HierarchySettingsOperationGroupUpdateResponse,
  HierarchySettingsOperationGroupDeleteOptionalParams,
  HierarchySettingsOperationGroupListNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing HierarchySettingsOperationGroup operations. */
export class HierarchySettingsOperationGroupImpl
  implements HierarchySettingsOperationGroup
{
  private readonly client: ManagementGroupsAPI;

  /**
   * Initialize a new instance of the class HierarchySettingsOperationGroup class.
   * @param client Reference to the service client
   */
  constructor(client: ManagementGroupsAPI) {
    this.client = client;
  }

  /**
   * Gets all the hierarchy settings defined at the Management Group level. Settings can only be set on
   * the root Management Group of the hierarchy.
   * @param groupId Management Group ID.
   * @param options The options parameters.
   */
  public list(
    groupId: string,
    options?: HierarchySettingsOperationGroupListOptionalParams,
  ): PagedAsyncIterableIterator<HierarchySettings> {
    const iter = this.listPagingAll(groupId, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(groupId, options, settings);
      },
    };
  }

  private async *listPagingPage(
    groupId: string,
    options?: HierarchySettingsOperationGroupListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<HierarchySettings[]> {
    let result: HierarchySettingsOperationGroupListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(groupId, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(groupId, continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    groupId: string,
    options?: HierarchySettingsOperationGroupListOptionalParams,
  ): AsyncIterableIterator<HierarchySettings> {
    for await (const page of this.listPagingPage(groupId, options)) {
      yield* page;
    }
  }

  /**
   * Gets all the hierarchy settings defined at the Management Group level. Settings can only be set on
   * the root Management Group of the hierarchy.
   * @param groupId Management Group ID.
   * @param options The options parameters.
   */
  private _list(
    groupId: string,
    options?: HierarchySettingsOperationGroupListOptionalParams,
  ): Promise<HierarchySettingsOperationGroupListResponse> {
    return this.client.sendOperationRequest(
      { groupId, options },
      listOperationSpec,
    );
  }

  /**
   * Gets the hierarchy settings defined at the Management Group level. Settings can only be set on the
   * root Management Group of the hierarchy.
   * @param groupId Management Group ID.
   * @param options The options parameters.
   */
  get(
    groupId: string,
    options?: HierarchySettingsOperationGroupGetOptionalParams,
  ): Promise<HierarchySettingsOperationGroupGetResponse> {
    return this.client.sendOperationRequest(
      { groupId, options },
      getOperationSpec,
    );
  }

  /**
   * Creates or updates the hierarchy settings defined at the Management Group level.
   * @param groupId Management Group ID.
   * @param resource Tenant level settings request parameter.
   * @param options The options parameters.
   */
  createOrUpdate(
    groupId: string,
    resource: HierarchySettings,
    options?: HierarchySettingsOperationGroupCreateOrUpdateOptionalParams,
  ): Promise<HierarchySettingsOperationGroupCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { groupId, resource, options },
      createOrUpdateOperationSpec,
    );
  }

  /**
   * Updates the hierarchy settings defined at the Management Group level.
   * @param groupId Management Group ID.
   * @param properties Tenant level settings request parameter.
   * @param options The options parameters.
   */
  update(
    groupId: string,
    properties: CreateOrUpdateSettingsRequest,
    options?: HierarchySettingsOperationGroupUpdateOptionalParams,
  ): Promise<HierarchySettingsOperationGroupUpdateResponse> {
    return this.client.sendOperationRequest(
      { groupId, properties, options },
      updateOperationSpec,
    );
  }

  /**
   * Deletes the hierarchy settings defined at the Management Group level.
   * @param groupId Management Group ID.
   * @param options The options parameters.
   */
  delete(
    groupId: string,
    options?: HierarchySettingsOperationGroupDeleteOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { groupId, options },
      deleteOperationSpec,
    );
  }

  /**
   * ListNext
   * @param groupId Management Group ID.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    groupId: string,
    nextLink: string,
    options?: HierarchySettingsOperationGroupListNextOptionalParams,
  ): Promise<HierarchySettingsOperationGroupListNextResponse> {
    return this.client.sendOperationRequest(
      { groupId, nextLink, options },
      listNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Management/managementGroups/{groupId}/settings",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HierarchySettingsListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.groupId],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Management/managementGroups/{groupId}/settings/default",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HierarchySettings,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.groupId],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Management/managementGroups/{groupId}/settings/default",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.HierarchySettings,
    },
    201: {
      bodyMapper: Mappers.HierarchySettings,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.resource1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.groupId],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Management/managementGroups/{groupId}/settings/default",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.HierarchySettings,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.properties1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.groupId],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Management/managementGroups/{groupId}/settings/default",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.groupId],
  headerParameters: [Parameters.accept],
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HierarchySettingsListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.groupId],
  headerParameters: [Parameters.accept],
  serializer,
};
