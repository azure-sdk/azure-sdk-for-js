/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { ManagementGroups } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ManagementGroupsAPI } from "../managementGroupsAPI";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  DescendantInfo,
  ManagementGroupsGetDescendantsNextOptionalParams,
  ManagementGroupsGetDescendantsOptionalParams,
  ManagementGroupsGetDescendantsResponse,
  HierarchySettings,
  ManagementGroupsListSettingsNextOptionalParams,
  ManagementGroupsListSettingsOptionalParams,
  ManagementGroupsListSettingsResponse,
  ManagementGroupsGetOptionalParams,
  ManagementGroupsGetResponse,
  ManagementGroup,
  ManagementGroupsCreateOrUpdateOptionalParams,
  ManagementGroupsCreateOrUpdateResponse,
  PatchManagementGroupRequest,
  ManagementGroupsUpdateOptionalParams,
  ManagementGroupsUpdateResponse,
  ManagementGroupsDeleteOptionalParams,
  ManagementGroupsDeleteResponse,
  ManagementGroupsGetDescendantsNextResponse,
  ManagementGroupsListSettingsNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ManagementGroups operations. */
export class ManagementGroupsImpl implements ManagementGroups {
  private readonly client: ManagementGroupsAPI;

  /**
   * Initialize a new instance of the class ManagementGroups class.
   * @param client Reference to the service client
   */
  constructor(client: ManagementGroupsAPI) {
    this.client = client;
  }

  /**
   * List all entities that descend from a management group.
   * @param groupId Management Group ID.
   * @param options The options parameters.
   */
  public listDescendants(
    groupId: string,
    options?: ManagementGroupsGetDescendantsOptionalParams,
  ): PagedAsyncIterableIterator<DescendantInfo> {
    const iter = this.getDescendantsPagingAll(groupId, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.getDescendantsPagingPage(groupId, options, settings);
      },
    };
  }

  private async *getDescendantsPagingPage(
    groupId: string,
    options?: ManagementGroupsGetDescendantsOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<DescendantInfo[]> {
    let result: ManagementGroupsGetDescendantsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._getDescendants(groupId, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._getDescendantsNext(
        groupId,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *getDescendantsPagingAll(
    groupId: string,
    options?: ManagementGroupsGetDescendantsOptionalParams,
  ): AsyncIterableIterator<DescendantInfo> {
    for await (const page of this.getDescendantsPagingPage(groupId, options)) {
      yield* page;
    }
  }

  /**
   * Gets all the hierarchy settings defined at the Management Group level. Settings can only be set on
   * the root Management Group of the hierarchy.
   * @param groupId Management Group ID.
   * @param options The options parameters.
   */
  public listSettings(
    groupId: string,
    options?: ManagementGroupsListSettingsOptionalParams,
  ): PagedAsyncIterableIterator<HierarchySettings> {
    const iter = this.listSettingsPagingAll(groupId, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listSettingsPagingPage(groupId, options, settings);
      },
    };
  }

  private async *listSettingsPagingPage(
    groupId: string,
    options?: ManagementGroupsListSettingsOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<HierarchySettings[]> {
    let result: ManagementGroupsListSettingsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listSettings(groupId, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listSettingsNext(
        groupId,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listSettingsPagingAll(
    groupId: string,
    options?: ManagementGroupsListSettingsOptionalParams,
  ): AsyncIterableIterator<HierarchySettings> {
    for await (const page of this.listSettingsPagingPage(groupId, options)) {
      yield* page;
    }
  }

  /**
   * Get the details of the management group.
   * @param groupId Management Group ID.
   * @param options The options parameters.
   */
  get(
    groupId: string,
    options?: ManagementGroupsGetOptionalParams,
  ): Promise<ManagementGroupsGetResponse> {
    return this.client.sendOperationRequest(
      { groupId, options },
      getOperationSpec,
    );
  }

  /**
   * Create or update a management group.
   * If a management group is already created and a subsequent create request is issued with different
   * properties, the management group properties will be updated.
   * @param groupId Management Group ID.
   * @param resource Management group creation parameters.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    groupId: string,
    resource: ManagementGroup,
    options?: ManagementGroupsCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ManagementGroupsCreateOrUpdateResponse>,
      ManagementGroupsCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ManagementGroupsCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { groupId, resource, options },
      spec: createOrUpdateOperationSpec,
    });
    const poller = await createHttpPoller<
      ManagementGroupsCreateOrUpdateResponse,
      OperationState<ManagementGroupsCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create or update a management group.
   * If a management group is already created and a subsequent create request is issued with different
   * properties, the management group properties will be updated.
   * @param groupId Management Group ID.
   * @param resource Management group creation parameters.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    groupId: string,
    resource: ManagementGroup,
    options?: ManagementGroupsCreateOrUpdateOptionalParams,
  ): Promise<ManagementGroupsCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(groupId, resource, options);
    return poller.pollUntilDone();
  }

  /**
   * Update a management group.
   * @param groupId Management Group ID.
   * @param properties Management group patch parameters.
   * @param options The options parameters.
   */
  update(
    groupId: string,
    properties: PatchManagementGroupRequest,
    options?: ManagementGroupsUpdateOptionalParams,
  ): Promise<ManagementGroupsUpdateResponse> {
    return this.client.sendOperationRequest(
      { groupId, properties, options },
      updateOperationSpec,
    );
  }

  /**
   * Delete management group.
   * If a management group contains child resources, the request will fail.
   * @param groupId Management Group ID.
   * @param options The options parameters.
   */
  async beginDelete(
    groupId: string,
    options?: ManagementGroupsDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ManagementGroupsDeleteResponse>,
      ManagementGroupsDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ManagementGroupsDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { groupId, options },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<
      ManagementGroupsDeleteResponse,
      OperationState<ManagementGroupsDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete management group.
   * If a management group contains child resources, the request will fail.
   * @param groupId Management Group ID.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    groupId: string,
    options?: ManagementGroupsDeleteOptionalParams,
  ): Promise<ManagementGroupsDeleteResponse> {
    const poller = await this.beginDelete(groupId, options);
    return poller.pollUntilDone();
  }

  /**
   * List all entities that descend from a management group.
   * @param groupId Management Group ID.
   * @param options The options parameters.
   */
  private _getDescendants(
    groupId: string,
    options?: ManagementGroupsGetDescendantsOptionalParams,
  ): Promise<ManagementGroupsGetDescendantsResponse> {
    return this.client.sendOperationRequest(
      { groupId, options },
      getDescendantsOperationSpec,
    );
  }

  /**
   * Gets all the hierarchy settings defined at the Management Group level. Settings can only be set on
   * the root Management Group of the hierarchy.
   * @param groupId Management Group ID.
   * @param options The options parameters.
   */
  private _listSettings(
    groupId: string,
    options?: ManagementGroupsListSettingsOptionalParams,
  ): Promise<ManagementGroupsListSettingsResponse> {
    return this.client.sendOperationRequest(
      { groupId, options },
      listSettingsOperationSpec,
    );
  }

  /**
   * GetDescendantsNext
   * @param groupId Management Group ID.
   * @param nextLink The nextLink from the previous successful call to the GetDescendants method.
   * @param options The options parameters.
   */
  private _getDescendantsNext(
    groupId: string,
    nextLink: string,
    options?: ManagementGroupsGetDescendantsNextOptionalParams,
  ): Promise<ManagementGroupsGetDescendantsNextResponse> {
    return this.client.sendOperationRequest(
      { groupId, nextLink, options },
      getDescendantsNextOperationSpec,
    );
  }

  /**
   * ListSettingsNext
   * @param groupId Management Group ID.
   * @param nextLink The nextLink from the previous successful call to the ListSettings method.
   * @param options The options parameters.
   */
  private _listSettingsNext(
    groupId: string,
    nextLink: string,
    options?: ManagementGroupsListSettingsNextOptionalParams,
  ): Promise<ManagementGroupsListSettingsNextResponse> {
    return this.client.sendOperationRequest(
      { groupId, nextLink, options },
      listSettingsNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Management/managementGroups/{groupId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ManagementGroup,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.expand,
    Parameters.recurse,
  ],
  urlParameters: [Parameters.$host, Parameters.groupId],
  headerParameters: [Parameters.accept, Parameters.cacheControl],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Management/managementGroups/{groupId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ManagementGroup,
    },
    201: {
      bodyMapper: Mappers.ManagementGroup,
    },
    202: {
      bodyMapper: Mappers.ManagementGroup,
    },
    204: {
      bodyMapper: Mappers.ManagementGroup,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.resource,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.groupId],
  headerParameters: [
    Parameters.contentType,
    Parameters.accept,
    Parameters.cacheControl,
  ],
  mediaType: "json",
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Management/managementGroups/{groupId}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.ManagementGroup,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.properties,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.groupId],
  headerParameters: [
    Parameters.contentType,
    Parameters.accept,
    Parameters.cacheControl,
  ],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Management/managementGroups/{groupId}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.ManagementGroupOperationAcceptance,
      headersMapper: Mappers.ManagementGroupsDeleteHeaders,
    },
    201: {
      bodyMapper: Mappers.ManagementGroupOperationAcceptance,
      headersMapper: Mappers.ManagementGroupsDeleteHeaders,
    },
    202: {
      bodyMapper: Mappers.ManagementGroupOperationAcceptance,
      headersMapper: Mappers.ManagementGroupsDeleteHeaders,
    },
    204: {
      bodyMapper: Mappers.ManagementGroupOperationAcceptance,
      headersMapper: Mappers.ManagementGroupsDeleteHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.groupId],
  headerParameters: [Parameters.accept, Parameters.cacheControl],
  serializer,
};
const getDescendantsOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Management/managementGroups/{groupId}/descendants/{groupId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DescendantListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.skiptoken,
    Parameters.top,
  ],
  urlParameters: [Parameters.$host, Parameters.groupId],
  headerParameters: [Parameters.accept],
  serializer,
};
const listSettingsOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Management/managementGroups/{groupId}/settings/{groupId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HierarchySettingsListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.groupId],
  headerParameters: [Parameters.accept],
  serializer,
};
const getDescendantsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DescendantListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.groupId],
  headerParameters: [Parameters.accept],
  serializer,
};
const listSettingsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HierarchySettingsListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.groupId],
  headerParameters: [Parameters.accept],
  serializer,
};
