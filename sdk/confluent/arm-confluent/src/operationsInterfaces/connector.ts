/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  ConnectorResource,
  ConnectorListOptionalParams,
  ConnectorGetOptionalParams,
  ConnectorGetResponse,
  ConnectorCreateOrUpdateOptionalParams,
  ConnectorCreateOrUpdateResponse,
  ConnectorDeleteOptionalParams,
  ConnectorDeleteResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Connector. */
export interface Connector {
  /**
   * Lists all the connectors in a cluster
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param organizationName Organization resource name
   * @param environmentId Confluent environment id
   * @param clusterId Confluent kafka or schema registry cluster id
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    organizationName: string,
    environmentId: string,
    clusterId: string,
    options?: ConnectorListOptionalParams,
  ): PagedAsyncIterableIterator<ConnectorResource>;
  /**
   * Get confluent connector by Name
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param organizationName Organization resource name
   * @param environmentId Confluent environment id
   * @param clusterId Confluent kafka or schema registry cluster id
   * @param connectorName Confluent connector name
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    organizationName: string,
    environmentId: string,
    clusterId: string,
    connectorName: string,
    options?: ConnectorGetOptionalParams,
  ): Promise<ConnectorGetResponse>;
  /**
   * Create confluent connector by Name
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param organizationName Organization resource name
   * @param environmentId Confluent environment id
   * @param clusterId Confluent kafka or schema registry cluster id
   * @param connectorName Confluent connector name
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    organizationName: string,
    environmentId: string,
    clusterId: string,
    connectorName: string,
    options?: ConnectorCreateOrUpdateOptionalParams,
  ): Promise<ConnectorCreateOrUpdateResponse>;
  /**
   * Delete confluent connector by name
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param organizationName Organization resource name
   * @param environmentId Confluent environment id
   * @param clusterId Confluent kafka or schema registry cluster id
   * @param connectorName Confluent connector name
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    organizationName: string,
    environmentId: string,
    clusterId: string,
    connectorName: string,
    options?: ConnectorDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ConnectorDeleteResponse>,
      ConnectorDeleteResponse
    >
  >;
  /**
   * Delete confluent connector by name
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param organizationName Organization resource name
   * @param environmentId Confluent environment id
   * @param clusterId Confluent kafka or schema registry cluster id
   * @param connectorName Confluent connector name
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    organizationName: string,
    environmentId: string,
    clusterId: string,
    connectorName: string,
    options?: ConnectorDeleteOptionalParams,
  ): Promise<ConnectorDeleteResponse>;
}
