/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  TopicRecord,
  TopicsListOptionalParams,
  TopicsGetOptionalParams,
  TopicsGetResponse,
  TopicsCreateOptionalParams,
  TopicsCreateResponse,
  TopicsDeleteOptionalParams,
  TopicsDeleteResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Topics. */
export interface Topics {
  /**
   * Lists of all the topics in a clusters
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param organizationName Organization resource name
   * @param environmentId Confluent environment id
   * @param clusterId Confluent kafka or schema registry cluster id
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    organizationName: string,
    environmentId: string,
    clusterId: string,
    options?: TopicsListOptionalParams,
  ): PagedAsyncIterableIterator<TopicRecord>;
  /**
   * Get confluent topic by Name
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param organizationName Organization resource name
   * @param environmentId Confluent environment id
   * @param clusterId Confluent kafka or schema registry cluster id
   * @param topicName Confluent kafka or schema registry topic name
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    organizationName: string,
    environmentId: string,
    clusterId: string,
    topicName: string,
    options?: TopicsGetOptionalParams,
  ): Promise<TopicsGetResponse>;
  /**
   * Create confluent topics by Name
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param organizationName Organization resource name
   * @param environmentId Confluent environment id
   * @param clusterId Confluent kafka or schema registry cluster id
   * @param topicName Confluent kafka or schema registry topic name
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    organizationName: string,
    environmentId: string,
    clusterId: string,
    topicName: string,
    options?: TopicsCreateOptionalParams,
  ): Promise<TopicsCreateResponse>;
  /**
   * Delete confluent topic by name
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param organizationName Organization resource name
   * @param environmentId Confluent environment id
   * @param clusterId Confluent kafka or schema registry cluster id
   * @param topicName Confluent kafka or schema registry topic name
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    organizationName: string,
    environmentId: string,
    clusterId: string,
    topicName: string,
    options?: TopicsDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<OperationState<TopicsDeleteResponse>, TopicsDeleteResponse>
  >;
  /**
   * Delete confluent topic by name
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param organizationName Organization resource name
   * @param environmentId Confluent environment id
   * @param clusterId Confluent kafka or schema registry cluster id
   * @param topicName Confluent kafka or schema registry topic name
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    organizationName: string,
    environmentId: string,
    clusterId: string,
    topicName: string,
    options?: TopicsDeleteOptionalParams,
  ): Promise<TopicsDeleteResponse>;
}
