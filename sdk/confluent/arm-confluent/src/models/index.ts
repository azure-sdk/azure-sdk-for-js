/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export type ConnectorServiceTypeInfoBaseUnion =
  | ConnectorServiceTypeInfoBase
  | AzureBlobStorageSinkConnectorServiceInfo
  | AzureBlobStorageSourceConnectorServiceInfo
  | AzureCosmosDBSinkConnectorServiceInfo
  | AzureCosmosDBSourceConnectorServiceInfo
  | AzureSynapseAnalyticsSinkConnectorServiceInfo;
export type PartnerInfoBaseUnion =
  | PartnerInfoBase
  | KafkaAzureBlobStorageSinkConnectorInfo
  | KafkaAzureBlobStorageSourceConnectorInfo
  | KafkaAzureCosmosDBSinkConnectorInfo
  | KafkaAzureCosmosDBSourceConnectorInfo
  | KafkaAzureSynapseAnalyticsSinkConnectorInfo;

/** Response of a list operation. */
export interface ConfluentAgreementResourceListResponse {
  /** Results of a list operation. */
  value?: ConfluentAgreementResource[];
  /** Link to the next set of results, if any. */
  nextLink?: string;
}

/** Agreement Terms definition */
export interface ConfluentAgreementResource {
  /**
   * The ARM id of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the agreement.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the agreement.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Metadata pertaining to creation and last modification of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** Publisher identifier string. */
  publisher?: string;
  /** Product identifier string. */
  product?: string;
  /** Plan identifier string. */
  plan?: string;
  /** Link to HTML with Microsoft and Publisher terms. */
  licenseTextLink?: string;
  /** Link to the privacy policy of the publisher. */
  privacyPolicyLink?: string;
  /** Date and time in UTC of when the terms were accepted. This is empty if Accepted is false. */
  retrieveDatetime?: Date;
  /** Terms signature. */
  signature?: string;
  /** If any version of the terms have been accepted, otherwise false. */
  accepted?: boolean;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The timestamp of resource last modification (UTC) */
  lastModifiedAt?: Date;
}

/** Default error response for resource provider */
export interface ResourceProviderDefaultErrorResponse {
  /**
   * Response body of Error
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly error?: ErrorResponseBody;
}

/** Response body of Error */
export interface ErrorResponseBody {
  /**
   * Error code
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * Error message
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * Error target
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * Error detail
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorResponseBody[];
}

/** Result of GET request to list Confluent operations. */
export interface OperationListResult {
  /** List of Confluent operations supported by the Microsoft.Confluent provider. */
  value?: OperationResult[];
  /** URL to get the next set of operation list results if there are any. */
  nextLink?: string;
}

/** An Confluent REST API operation. */
export interface OperationResult {
  /** Operation name: {provider}/{resource}/{operation} */
  name?: string;
  /** The object that represents the operation. */
  display?: OperationDisplay;
  /** Indicates whether the operation is a data action */
  isDataAction?: boolean;
}

/** The object that represents the operation. */
export interface OperationDisplay {
  /** Service provider: Microsoft.Confluent */
  provider?: string;
  /** Type on which the operation is performed, e.g., 'clusters'. */
  resource?: string;
  /** Operation type, e.g., read, write, delete, etc. */
  operation?: string;
  /** Description of the operation, e.g., 'Write confluent'. */
  description?: string;
}

/** The response of a list operation. */
export interface OrganizationResourceListResult {
  /** Result of a list operation. */
  value?: OrganizationResource[];
  /** Link to the next set of results, if any. */
  nextLink?: string;
}

/** Organization resource. */
export interface OrganizationResource {
  /**
   * The ARM id of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Metadata pertaining to creation and last modification of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** Organization resource tags */
  tags?: { [propertyName: string]: string };
  /** Location of Organization resource */
  location?: string;
  /**
   * The creation time of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdTime?: Date;
  /**
   * Provision states for confluent RP
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisionState;
  /**
   * Id of the Confluent organization.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly organizationId?: string;
  /**
   * SSO url for the Confluent organization.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ssoUrl?: string;
  /** Confluent offer detail */
  offerDetail: OfferDetail;
  /** Subscriber detail */
  userDetail: UserDetail;
  /** Link an existing Confluent organization */
  linkOrganization?: LinkOrganization;
}

/** Confluent Offer detail */
export interface OfferDetail {
  /** Publisher Id */
  publisherId: string;
  /** Offer Id */
  id: string;
  /** Offer Plan Id */
  planId: string;
  /** Offer Plan Name */
  planName: string;
  /** Offer Plan Term unit */
  termUnit: string;
  /** Offer Plan Term Id */
  termId?: string;
  /** Private Offer Id */
  privateOfferId?: string;
  /** Array of Private Offer Ids */
  privateOfferIds?: string[];
  /** SaaS Offer Status */
  status?: SaaSOfferStatus;
}

/** Subscriber detail */
export interface UserDetail {
  /** First name */
  firstName?: string;
  /** Last name */
  lastName?: string;
  /** Email address */
  emailAddress: string;
  /** User principal name */
  userPrincipalName?: string;
  /** AAD email address */
  aadEmail?: string;
}

/** Link an existing Confluent organization */
export interface LinkOrganization {
  /** User auth token */
  token: string;
}

/** Organization Resource update */
export interface OrganizationResourceUpdate {
  /** ARM resource tags */
  tags?: { [propertyName: string]: string };
}

/** Validation response from the provider */
export interface ValidationResponse {
  /** Info from the response */
  info?: { [propertyName: string]: string };
}

/** List Access Request Model */
export interface ListAccessRequestModel {
  /** Search filters for the request */
  searchFilters?: { [propertyName: string]: string };
}

/** List users success response */
export interface AccessListUsersSuccessResponse {
  /** Type of response */
  kind?: string;
  /** Metadata of the list */
  metadata?: ConfluentListMetadata;
  /** Data of the users list */
  data?: UserRecord[];
}

/** Metadata of the list */
export interface ConfluentListMetadata {
  /** First page of the list */
  first?: string;
  /** Last page of the list */
  last?: string;
  /** Previous page of the list */
  prev?: string;
  /** Next page of the list */
  next?: string;
  /** Total size of the list */
  totalSize?: number;
}

/** Record of the user */
export interface UserRecord {
  /** Type of account */
  kind?: string;
  /** Id of the user */
  id?: string;
  /** Metadata of the record */
  metadata?: MetadataEntity;
  /** Email of the user */
  email?: string;
  /** Name of the user */
  fullName?: string;
  /** Auth type of the user */
  authType?: string;
}

/** Metadata of the data record */
export interface MetadataEntity {
  /** Self lookup url */
  self?: string;
  /** Resource name of the record */
  resourceName?: string;
  /** Created Date Time */
  createdAt?: string;
  /** Updated Date time */
  updatedAt?: string;
  /** Deleted Date time */
  deletedAt?: string;
}

/** List service accounts success response */
export interface AccessListServiceAccountsSuccessResponse {
  /** Type of response */
  kind?: string;
  /** Metadata of the list */
  metadata?: ConfluentListMetadata;
  /** Data of the service accounts list */
  data?: ServiceAccountRecord[];
}

/** Record of the service account */
export interface ServiceAccountRecord {
  /** Type of account */
  kind?: string;
  /** Id of the service account */
  id?: string;
  /** Metadata of the record */
  metadata?: MetadataEntity;
  /** Name of the service account */
  displayName?: string;
  /** Description of the service account */
  description?: string;
}

/** List invitations success response */
export interface AccessListInvitationsSuccessResponse {
  /** Type of response */
  kind?: string;
  /** Metadata of the list */
  metadata?: ConfluentListMetadata;
  /** Data of the invitations list */
  data?: InvitationRecord[];
}

/** Record of the invitation */
export interface InvitationRecord {
  /** Type of account */
  kind?: string;
  /** Id of the invitation */
  id?: string;
  /** Metadata of the record */
  metadata?: MetadataEntity;
  /** Email of the user */
  email?: string;
  /** Auth type of the user */
  authType?: string;
  /** Status of the invitation */
  status?: string;
  /** Accepted date time of the invitation */
  acceptedAt?: string;
  /** Expiration date time of the invitation */
  expiresAt?: string;
}

/** Invite User Account model */
export interface AccessInviteUserAccountModel {
  /** Id of the organization */
  organizationId?: string;
  /** Email of the logged in user */
  email?: string;
  /** Upn of the logged in user */
  upn?: string;
  /** Details of the user who is being invited */
  invitedUserDetails?: AccessInvitedUserDetails;
}

/** Details of the user being invited */
export interface AccessInvitedUserDetails {
  /** UPN/Email of the user who is being invited */
  invitedEmail?: string;
  /** Auth type of the user */
  authType?: string;
}

/** Details of the environments returned on successful response */
export interface AccessListEnvironmentsSuccessResponse {
  /** Type of response */
  kind?: string;
  /** Metadata of the  environment list */
  metadata?: ConfluentListMetadata;
  /** Environment list data */
  data?: EnvironmentRecord[];
}

/** Details about environment name, metadata and environment id of an environment */
export interface EnvironmentRecord {
  /** Type of environment */
  kind?: string;
  /** Id of the environment */
  id?: string;
  /** Metadata of the record */
  metadata?: MetadataEntity;
  /** Display name of the user */
  displayName?: string;
}

/** Details of the clusters returned on successful response */
export interface AccessListClusterSuccessResponse {
  /** Type of response */
  kind?: string;
  /** Metadata of the list */
  metadata?: ConfluentListMetadata;
  /** List of clusters */
  data?: ClusterRecord[];
}

/** Details of cluster record */
export interface ClusterRecord {
  /** Type of cluster */
  kind?: string;
  /** Id of the cluster */
  id?: string;
  /** Metadata of the record */
  metadata?: MetadataEntity;
  /** Display name of the cluster */
  displayName?: string;
  /** Specification of the cluster */
  spec?: ClusterSpecEntity;
  /** Specification of the cluster */
  status?: ClusterStatusEntity;
}

/** Spec of the cluster record */
export interface ClusterSpecEntity {
  /** The name of the cluster */
  displayName?: string;
  /** The availability zone configuration of the cluster */
  availability?: string;
  /** The cloud service provider */
  cloud?: string;
  /** type of zone availability */
  zone?: string;
  /** The cloud service provider region */
  region?: string;
  /** The bootstrap endpoint used by Kafka clients to connect to the cluster */
  kafkaBootstrapEndpoint?: string;
  /** The cluster HTTP request URL. */
  httpEndpoint?: string;
  /** The Kafka API cluster endpoint */
  apiEndpoint?: string;
  /** Specification of the cluster */
  config?: ClusterConfigEntity;
  /** Specification of the cluster */
  environment?: ClusterEnvironmentEntity;
  /** Specification of the cluster */
  network?: ClusterNetworkEntity;
  /** Specification of the cluster */
  byok?: ClusterByokEntity;
}

/** The configuration of the Kafka cluster */
export interface ClusterConfigEntity {
  /** The lifecycle phase of the cluster */
  kind?: string;
}

/** The environment to which cluster belongs */
export interface ClusterEnvironmentEntity {
  /** ID of the referred resource */
  id?: string;
  /** Environment of the referred resource */
  environment?: string;
  /** API URL for accessing or modifying the referred object */
  related?: string;
  /** CRN reference to the referred resource */
  resourceName?: string;
}

/** The network associated with this object */
export interface ClusterNetworkEntity {
  /** ID of the referred resource */
  id?: string;
  /** Environment of the referred resource */
  environment?: string;
  /** API URL for accessing or modifying the referred object */
  related?: string;
  /** CRN reference to the referred resource */
  resourceName?: string;
}

/** The network associated with this object */
export interface ClusterByokEntity {
  /** ID of the referred resource */
  id?: string;
  /** API URL for accessing or modifying the referred object */
  related?: string;
  /** CRN reference to the referred resource */
  resourceName?: string;
}

/** Status of the cluster record */
export interface ClusterStatusEntity {
  /** The lifecycle phase of the cluster */
  phase?: string;
  /** The number of Confluent Kafka Units */
  cku?: number;
}

/** Details of the role bindings returned on successful response */
export interface AccessListRoleBindingsSuccessResponse {
  /** Type of response */
  kind?: string;
  /** Metadata of the list */
  metadata?: ConfluentListMetadata;
  /** List of role binding */
  data?: RoleBindingRecord[];
}

/** Details on principal, role name and crn pattern of a role binding */
export interface RoleBindingRecord {
  /** The type of the resource. */
  kind?: string;
  /** Id of the role binding */
  id?: string;
  /** Metadata of the record */
  metadata?: MetadataEntity;
  /** The principal User or Group to bind the role to */
  principal?: string;
  /** The name of the role to bind to the principal */
  roleName?: string;
  /** A CRN that specifies the scope and resource patterns necessary for the role to bind */
  crnPattern?: string;
}

/** Create role binding request model */
export interface AccessCreateRoleBindingRequestModel {
  /** The principal User or Group to bind the role to */
  principal?: string;
  /** The name of the role to bind to the principal */
  roleName?: string;
  /** A CRN that specifies the scope and resource patterns necessary for the role to bind */
  crnPattern?: string;
}

/** Details of the role binding names returned on successful response */
export interface AccessRoleBindingNameListSuccessResponse {
  /** Type of response */
  kind?: string;
  /** Metadata of the list */
  metadata?: ConfluentListMetadata;
  /** List of role binding names */
  data?: string[];
}

/** Result of GET request to list Confluent operations. */
export interface GetEnvironmentsResponse {
  /** List of environments in a confluent organization */
  value?: SCEnvironmentRecord[];
  /** URL to get the next set of environment records if there are any. */
  nextLink?: string;
}

/** Details about environment name, metadata and environment id of an environment */
export interface SCEnvironmentRecord {
  /** Type of environment */
  kind?: string;
  /** Id of the environment */
  id?: string;
  /** Type of the resource */
  type?: string;
  /** Display name of the environment */
  name?: string;
  /** Stream governance configuration */
  streamGovernanceConfig?: StreamGovernanceConfig;
  /** Metadata of the record */
  metadata?: SCMetadataEntity;
}

/** Stream governance configuration */
export interface StreamGovernanceConfig {
  /** Stream governance configuration */
  package?: Package;
}

/** Metadata of the data record */
export interface SCMetadataEntity {
  /** Self lookup url */
  self?: string;
  /** Resource name of the record */
  resourceName?: string;
  /** Created Date Time */
  createdTimestamp?: string;
  /** Updated Date time */
  updatedTimestamp?: string;
  /** Deleted Date time */
  deletedTimestamp?: string;
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export interface ErrorResponse {
  /** The error object. */
  error?: ErrorDetail;
}

/** The error detail. */
export interface ErrorDetail {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDetail[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
}

/** Result of GET request to list clusters in the environment of a confluent organization */
export interface ListClustersSuccessResponse {
  /** List of clusters in an environment of a confluent organization */
  value?: SCClusterRecord[];
  /** URL to get the next set of cluster records if there are any. */
  nextLink?: string;
}

/** Details of cluster record */
export interface SCClusterRecord {
  /** Type of cluster */
  kind?: string;
  /** Id of the cluster */
  id?: string;
  /** Type of the resource */
  type?: string;
  /** Display name of the cluster */
  name?: string;
  /** Metadata of the record */
  metadata?: SCMetadataEntity;
  /** Specification of the cluster */
  spec?: SCClusterSpecEntity;
  /** Specification of the cluster status */
  status?: ClusterStatusEntity;
}

/** Spec of the cluster record */
export interface SCClusterSpecEntity {
  /** The name of the cluster */
  name?: string;
  /** The availability zone configuration of the cluster */
  availability?: string;
  /** The cloud service provider */
  cloud?: string;
  /** type of zone availability */
  zone?: string;
  /** Stream governance configuration */
  package?: Package;
  /** The cloud service provider region */
  region?: string;
  /** The bootstrap endpoint used by Kafka clients to connect to the cluster */
  kafkaBootstrapEndpoint?: string;
  /** The cluster HTTP request URL. */
  httpEndpoint?: string;
  /** The Kafka API cluster endpoint */
  apiEndpoint?: string;
  /** Specification of the cluster configuration */
  config?: ClusterConfigEntity;
  /** Specification of the cluster environment */
  environment?: SCClusterNetworkEnvironmentEntity;
  /** Specification of the cluster network */
  network?: SCClusterNetworkEnvironmentEntity;
  /** Specification of the cluster byok */
  byok?: SCClusterByokEntity;
}

/** The environment or the network to which cluster belongs */
export interface SCClusterNetworkEnvironmentEntity {
  /** ID of the referred resource */
  id?: string;
  /** Environment of the referred resource */
  environment?: string;
  /** API URL for accessing or modifying the referred object */
  related?: string;
  /** CRN reference to the referred resource */
  resourceName?: string;
}

/** The network associated with this object */
export interface SCClusterByokEntity {
  /** ID of the referred resource */
  id?: string;
  /** API URL for accessing or modifying the referred object */
  related?: string;
  /** CRN reference to the referred resource */
  resourceName?: string;
}

/** Result of GET request to list schema registry clusters in the environment of a confluent organization */
export interface ListSchemaRegistryClustersResponse {
  /** List of schema registry clusters in an environment of a confluent organization */
  value?: SchemaRegistryClusterRecord[];
  /** URL to get the next set of schema registry cluster records if there are any. */
  nextLink?: string;
}

/** Details of schema registry cluster record */
export interface SchemaRegistryClusterRecord {
  /** Kind of the cluster */
  kind?: string;
  /** Id of the cluster */
  id?: string;
  /** Metadata of the record */
  metadata?: SCMetadataEntity;
  /** Specification of the schema registry cluster */
  spec?: SchemaRegistryClusterSpecEntity;
  /** Specification of the cluster status */
  status?: SchemaRegistryClusterStatusEntity;
}

/** Details of schema registry cluster spec */
export interface SchemaRegistryClusterSpecEntity {
  /** Name of the schema registry cluster */
  name?: string;
  /** Http endpoint of the cluster */
  httpEndpoint?: string;
  /** Type of the cluster package Advanced, essentials */
  package?: string;
  /** Region details of the schema registry cluster */
  region?: SchemaRegistryClusterEnvironmentRegionEntity;
  /** Environment details of the schema registry cluster */
  environment?: SchemaRegistryClusterEnvironmentRegionEntity;
  /** The cloud service provider */
  cloud?: string;
}

/** The environment associated with this object */
export interface SchemaRegistryClusterEnvironmentRegionEntity {
  /** ID of the referred resource */
  id?: string;
  /** API URL for accessing or modifying the referred object */
  related?: string;
  /** CRN reference to the referred resource */
  resourceName?: string;
}

/** Status of the schema registry cluster record */
export interface SchemaRegistryClusterStatusEntity {
  /** The lifecycle phase of the cluster */
  phase?: string;
}

/** Result of POST request to list regions supported by confluent */
export interface ListRegionsSuccessResponse {
  /** List of regions supported by confluent */
  data?: RegionRecord[];
}

/** Details of region record */
export interface RegionRecord {
  /** Kind of the cluster */
  kind?: string;
  /** Id of the cluster */
  id?: string;
  /** Metadata of the record */
  metadata?: SCMetadataEntity;
  /** Specification of the region */
  spec?: RegionSpecEntity;
}

/** Region spec details */
export interface RegionSpecEntity {
  /** Display Name of the region */
  name?: string;
  /** Cloud provider name */
  cloud?: string;
  /** Region name */
  regionName?: string;
  packages?: string[];
}

/** Create API Key model */
export interface CreateAPIKeyModel {
  /** Name of the API Key */
  name?: string;
  /** Description of the API Key */
  description?: string;
}

/** Details API key */
export interface APIKeyRecord {
  /** Type of api key */
  kind?: string;
  /** Id of the api key */
  id?: string;
  /** Metadata of the record */
  metadata?: SCMetadataEntity;
  /** Specification of the API Key */
  spec?: APIKeySpecEntity;
}

/** Spec of the API Key record */
export interface APIKeySpecEntity {
  /** The description of the API Key */
  description?: string;
  /** The name of the API Key */
  name?: string;
  /** API Key Secret */
  secret?: string;
  /** Specification of the cluster */
  resource?: APIKeyResourceEntity;
  /** Specification of the cluster */
  owner?: APIKeyOwnerEntity;
}

/** API Key Resource details which can be kafka cluster or schema registry cluster */
export interface APIKeyResourceEntity {
  /** Id of the resource */
  id?: string;
  /** The environment of the api key */
  environment?: string;
  /** API URL for accessing or modifying the api key resource object */
  related?: string;
  /** CRN reference to the referred resource */
  resourceName?: string;
  /** Type of the owner which can be service or user account */
  kind?: string;
}

/** API Key Owner details which can be a user or service account */
export interface APIKeyOwnerEntity {
  /** API Key owner id */
  id?: string;
  /** API URL for accessing or modifying the referred object */
  related?: string;
  /** CRN reference to the referred resource */
  resourceName?: string;
  /** Type of the owner service or user account */
  kind?: string;
}

/** Connector Info Base properties */
export interface ConnectorInfoBase {
  /** Connector Type */
  connectorType?: ConnectorType;
  /** Connector Class */
  connectorClass?: ConnectorClass;
  /** Connector Name */
  connectorName?: string;
  /** Connector Id */
  connectorId?: string;
  /** Connector Status */
  connectorState?: ConnectorStatus;
}

/** The connector service type info */
export interface ConnectorServiceTypeInfoBase {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  connectorServiceType:
    | "AzureBlobStorageSinkConnector"
    | "AzureBlobStorageSourceConnector"
    | "AzureCosmosDBSinkConnector"
    | "AzureCosmosDBSourceConnector"
    | "AzureSynapseAnalyticsSinkConnector";
}

/** The partner info base */
export interface PartnerInfoBase {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  partnerConnectorType:
    | "KafkaAzureBlobStorageSink"
    | "KafkaAzureBlobStorageSource"
    | "KafkaAzureCosmosDBSink"
    | "KafkaAzureCosmosDBSource"
    | "KafkaAzureSynapseAnalyticsSink";
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export interface Resource {
  /**
   * Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Azure Resource Manager metadata containing createdBy and modifiedBy information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** Result of GET request to list connectors in the cluster of a confluent organization */
export interface ListConnectorsSuccessResponse {
  /** List of connectors in a cluster of a confluent organization */
  value?: ConnectorResource[];
  /** URL to get the next set of connectors records if there are any. */
  nextLink?: string;
}

/** Result of GET request to list topics in the cluster of a confluent organization */
export interface ListTopicsSuccessResponse {
  /** List of topics in a cluster of a confluent organization */
  value?: TopicRecord[];
  /** URL to get the next set of topics records if there are any. */
  nextLink?: string;
}

/** Details of topic record */
export interface TopicRecord {
  /**
   * The ARM Resource Id of the Topic
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Display name of the topic
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Type of topic */
  kind?: string;
  /** Topic Id returned by Confluent */
  topicId?: string;
  /** Metadata of the record */
  metadata?: TopicMetadataEntity;
  /** Partition Specification of the topic */
  partitions?: TopicsRelatedLink;
  /** Config Specification of the topic */
  configs?: TopicsRelatedLink;
  /** Input Config Specification of the topic */
  inputConfigs?: TopicsInputConfig[];
  /** Partition Reassignment Specification of the topic */
  partitionsReassignments?: TopicsRelatedLink;
  /** Partition count of the topic */
  partitionsCount?: string;
  /** Replication factor of the topic */
  replicationFactor?: string;
}

/** Metadata of the data record */
export interface TopicMetadataEntity {
  /** Self lookup url */
  self?: string;
  /** Resource name of the record */
  resourceName?: string;
}

/** Partition Config spec of the topic record */
export interface TopicsRelatedLink {
  /** Relationship of the topic */
  related?: string;
}

/** Topics input config */
export interface TopicsInputConfig {
  /** Name of the topic input config */
  name?: string;
  /** Value of the topic input config */
  value?: string;
}

/** Metadata of the list */
export interface SCConfluentListMetadata {
  /** First page of the list */
  first?: string;
  /** Last page of the list */
  last?: string;
  /** Previous page of the list */
  prev?: string;
  /** Next page of the list */
  next?: string;
  /** Total size of the list */
  totalSize?: number;
}

/** The authentication info when auth_type is azureBlobStorageSinkConnector */
export interface AzureBlobStorageSinkConnectorServiceInfo
  extends ConnectorServiceTypeInfoBase {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  connectorServiceType: "AzureBlobStorageSinkConnector";
  /** Azure Blob Storage Account Name */
  storageAccountName?: string;
  /** Azure Blob Storage Account Key */
  storageAccountKey?: string;
  /** Azure Blob Storage Account Container Name */
  storageContainerName?: string;
}

/** The connector service type is AzureBlobStorageSourceConnector */
export interface AzureBlobStorageSourceConnectorServiceInfo
  extends ConnectorServiceTypeInfoBase {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  connectorServiceType: "AzureBlobStorageSourceConnector";
  /** Azure Blob Storage Account Name */
  storageAccountName?: string;
  /** Azure Blob Storage Account Key */
  storageAccountKey?: string;
  /** Azure Blob Storage Account Container Name */
  storageContainerName?: string;
}

/** The authentication info when auth_type is AzureCosmosDBSinkConnector */
export interface AzureCosmosDBSinkConnectorServiceInfo
  extends ConnectorServiceTypeInfoBase {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  connectorServiceType: "AzureCosmosDBSinkConnector";
  /** Azure Cosmos Database Name */
  cosmosDatabaseName?: string;
  /** Azure Cosmos Database Master Key */
  cosmosMasterKey?: string;
  /** Azure Cosmos Database Connection Endpoint */
  cosmosConnectionEndpoint?: string;
  /** Azure Cosmos Database Containers Topic Mapping */
  cosmosContainersTopicMapping?: string;
  /** Azure Cosmos Database Id Strategy */
  cosmosIdStrategy?: string;
}

/** The authentication info when auth_type is AzureCosmosDBSourceConnector */
export interface AzureCosmosDBSourceConnectorServiceInfo
  extends ConnectorServiceTypeInfoBase {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  connectorServiceType: "AzureCosmosDBSourceConnector";
  /** Azure Cosmos Database Name */
  cosmosDatabaseName?: string;
  /** Azure Cosmos Database Master Key */
  cosmosMasterKey?: string;
  /** Azure Cosmos Database Connection Endpoint */
  cosmosConnectionEndpoint?: string;
  /** Azure Cosmos Database Containers Topic Mapping */
  cosmosContainersTopicMapping?: string;
  /** Azure Cosmos Database Message Key Enabled */
  cosmosMessageKeyEnabled?: boolean;
  /** Azure Cosmos Database Message Key Field */
  cosmosMessageKeyField?: string;
}

/** The authentication info when auth_type is AzureSynapseAnalyticsSinkConnector */
export interface AzureSynapseAnalyticsSinkConnectorServiceInfo
  extends ConnectorServiceTypeInfoBase {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  connectorServiceType: "AzureSynapseAnalyticsSinkConnector";
  /** Azure Synapse Analytics SQL Server Name */
  synapseSqlServerName?: string;
  /** Azure Synapse SQL login details */
  synapseSqlUser?: string;
  /** Azure Synapse SQL login details */
  synapseSqlPassword?: string;
  /** Azure Synapse Dedicated SQL Pool Database Name */
  synapseSqlDatabaseName?: string;
}

/** The partner connector type is KafkaAzureBlobStorageSink */
export interface KafkaAzureBlobStorageSinkConnectorInfo
  extends PartnerInfoBase {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  partnerConnectorType: "KafkaAzureBlobStorageSink";
  /** Kafka Auth Type */
  authType?: AuthType;
  /** Kafka Input Data Format Type */
  inputFormat?: DataFormatType;
  /** Kafka Output Data Format Type */
  outputFormat?: DataFormatType;
  /** Kafka API Key */
  apiKey?: string;
  /** Kafka API Key Secret */
  apiSecret?: string;
  /** Kafka Service Account Id */
  serviceAccountId?: string;
  /** Kafka topics list */
  topics?: string[];
  /** Kafka topics directory */
  topicsDir?: string;
  /** Flush size */
  flushSize?: string;
  /** Maximum Tasks */
  maxTasks?: string;
  /** Time Interval */
  timeInterval?: string;
}

/** The partner connector type is KafkaAzureBlobStorageSource */
export interface KafkaAzureBlobStorageSourceConnectorInfo
  extends PartnerInfoBase {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  partnerConnectorType: "KafkaAzureBlobStorageSource";
  /** Kafka Auth Type */
  authType?: AuthType;
  /** Kafka Input Data Format Type */
  inputFormat?: DataFormatType;
  /** Kafka Output Data Format Type */
  outputFormat?: DataFormatType;
  /** Kafka API Key */
  apiKey?: string;
  /** Kafka API Secret */
  apiSecret?: string;
  /** Kafka Service Account Id */
  serviceAccountId?: string;
  /** Kafka topics Regex pattern */
  topicRegex?: string;
  /** Kafka topics directory */
  topicsDir?: string;
  /** Maximum Tasks */
  maxTasks?: string;
}

/** The partner connector type is KafkaAzureCosmosDBSink */
export interface KafkaAzureCosmosDBSinkConnectorInfo extends PartnerInfoBase {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  partnerConnectorType: "KafkaAzureCosmosDBSink";
  /** Kafka Auth Type */
  authType?: AuthType;
  /** Kafka Input Data Format Type */
  inputFormat?: DataFormatType;
  /** Kafka Output Data Format Type */
  outputFormat?: DataFormatType;
  /** Kafka API Key */
  apiKey?: string;
  /** Kafka API Key Secret */
  apiSecret?: string;
  /** Kafka Service Account Id */
  serviceAccountId?: string;
  /** Kafka topics list */
  topics?: string[];
  /** Kafka topics directory */
  topicsDir?: string;
  /** Flush size */
  flushSize?: string;
  /** Maximum Tasks */
  maxTasks?: string;
  /** Time Interval */
  timeInterval?: string;
}

/** The partner connector type is KafkaAzureCosmosDBSource */
export interface KafkaAzureCosmosDBSourceConnectorInfo extends PartnerInfoBase {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  partnerConnectorType: "KafkaAzureCosmosDBSource";
  /** Kafka Auth Type */
  authType?: AuthType;
  /** Kafka Input Data Format Type */
  inputFormat?: DataFormatType;
  /** Kafka Output Data Format Type */
  outputFormat?: DataFormatType;
  /** Kafka API Key */
  apiKey?: string;
  /** Kafka API Secret */
  apiSecret?: string;
  /** Kafka Service Account Id */
  serviceAccountId?: string;
  /** Kafka topics Regex pattern */
  topicRegex?: string;
  /** Kafka topics directory */
  topicsDir?: string;
  /** Maximum Tasks */
  maxTasks?: string;
}

/** The partner connector type is KafkaAzureSynapseAnalyticsSink */
export interface KafkaAzureSynapseAnalyticsSinkConnectorInfo
  extends PartnerInfoBase {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  partnerConnectorType: "KafkaAzureSynapseAnalyticsSink";
  /** Kafka Auth Type */
  authType?: AuthType;
  /** Kafka Input Data Format Type */
  inputFormat?: DataFormatType;
  /** Kafka Output Data Format Type */
  outputFormat?: DataFormatType;
  /** Kafka API Key */
  apiKey?: string;
  /** Kafka API Key Secret */
  apiSecret?: string;
  /** Kafka Service Account Id */
  serviceAccountId?: string;
  /** Kafka topics list */
  topics?: string[];
  /** Kafka topics directory */
  topicsDir?: string;
  /** Flush size */
  flushSize?: string;
  /** Maximum Tasks */
  maxTasks?: string;
  /** Time Interval */
  timeInterval?: string;
}

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export interface ProxyResource extends Resource {}

/** Details of connector record */
export interface ConnectorResource extends ProxyResource {
  /** Connector Info Base */
  connectorBasicInfo?: ConnectorInfoBase;
  /** Connector Service type info base properties. */
  connectorServiceTypeInfo?: ConnectorServiceTypeInfoBaseUnion;
  /** The connection information consumed by applications. */
  partnerConnectorInfo?: PartnerInfoBaseUnion;
}

/** Defines headers for Environment_delete operation. */
export interface EnvironmentDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
}

/** Defines headers for Cluster_delete operation. */
export interface ClusterDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
}

/** Defines headers for Connector_delete operation. */
export interface ConnectorDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
}

/** Defines headers for Topics_delete operation. */
export interface TopicsDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
}

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  /** User */
  User = "User",
  /** Application */
  Application = "Application",
  /** ManagedIdentity */
  ManagedIdentity = "ManagedIdentity",
  /** Key */
  Key = "Key",
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link ProvisionState} that the service accepts. */
export enum KnownProvisionState {
  /** Accepted */
  Accepted = "Accepted",
  /** Creating */
  Creating = "Creating",
  /** Updating */
  Updating = "Updating",
  /** Deleting */
  Deleting = "Deleting",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Canceled */
  Canceled = "Canceled",
  /** Deleted */
  Deleted = "Deleted",
  /** NotSpecified */
  NotSpecified = "NotSpecified",
}

/**
 * Defines values for ProvisionState. \
 * {@link KnownProvisionState} can be used interchangeably with ProvisionState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Accepted** \
 * **Creating** \
 * **Updating** \
 * **Deleting** \
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Deleted** \
 * **NotSpecified**
 */
export type ProvisionState = string;

/** Known values of {@link SaaSOfferStatus} that the service accepts. */
export enum KnownSaaSOfferStatus {
  /** Started */
  Started = "Started",
  /** PendingFulfillmentStart */
  PendingFulfillmentStart = "PendingFulfillmentStart",
  /** InProgress */
  InProgress = "InProgress",
  /** Subscribed */
  Subscribed = "Subscribed",
  /** Suspended */
  Suspended = "Suspended",
  /** Reinstated */
  Reinstated = "Reinstated",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Unsubscribed */
  Unsubscribed = "Unsubscribed",
  /** Updating */
  Updating = "Updating",
}

/**
 * Defines values for SaaSOfferStatus. \
 * {@link KnownSaaSOfferStatus} can be used interchangeably with SaaSOfferStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Started** \
 * **PendingFulfillmentStart** \
 * **InProgress** \
 * **Subscribed** \
 * **Suspended** \
 * **Reinstated** \
 * **Succeeded** \
 * **Failed** \
 * **Unsubscribed** \
 * **Updating**
 */
export type SaaSOfferStatus = string;

/** Known values of {@link Package} that the service accepts. */
export enum KnownPackage {
  /** Essentials */
  Essentials = "ESSENTIALS",
  /** Advanced */
  Advanced = "ADVANCED",
}

/**
 * Defines values for Package. \
 * {@link KnownPackage} can be used interchangeably with Package,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ESSENTIALS** \
 * **ADVANCED**
 */
export type Package = string;

/** Known values of {@link ConnectorType} that the service accepts. */
export enum KnownConnectorType {
  /** Sink */
  Sink = "SINK",
  /** Source */
  Source = "SOURCE",
}

/**
 * Defines values for ConnectorType. \
 * {@link KnownConnectorType} can be used interchangeably with ConnectorType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SINK** \
 * **SOURCE**
 */
export type ConnectorType = string;

/** Known values of {@link ConnectorClass} that the service accepts. */
export enum KnownConnectorClass {
  /** Azureblobsource */
  Azureblobsource = "AZUREBLOBSOURCE",
  /** Azureblobsink */
  Azureblobsink = "AZUREBLOBSINK",
}

/**
 * Defines values for ConnectorClass. \
 * {@link KnownConnectorClass} can be used interchangeably with ConnectorClass,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AZUREBLOBSOURCE** \
 * **AZUREBLOBSINK**
 */
export type ConnectorClass = string;

/** Known values of {@link ConnectorStatus} that the service accepts. */
export enum KnownConnectorStatus {
  /** Provisioning */
  Provisioning = "PROVISIONING",
  /** Running */
  Running = "RUNNING",
  /** Paused */
  Paused = "PAUSED",
  /** Failed */
  Failed = "FAILED",
}

/**
 * Defines values for ConnectorStatus. \
 * {@link KnownConnectorStatus} can be used interchangeably with ConnectorStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **PROVISIONING** \
 * **RUNNING** \
 * **PAUSED** \
 * **FAILED**
 */
export type ConnectorStatus = string;

/** Known values of {@link ConnectorServiceType} that the service accepts. */
export enum KnownConnectorServiceType {
  /** AzureBlobStorageSinkConnector */
  AzureBlobStorageSinkConnector = "AzureBlobStorageSinkConnector",
  /** AzureBlobStorageSourceConnector */
  AzureBlobStorageSourceConnector = "AzureBlobStorageSourceConnector",
  /** AzureCosmosDBSinkConnector */
  AzureCosmosDBSinkConnector = "AzureCosmosDBSinkConnector",
  /** AzureCosmosDBSourceConnector */
  AzureCosmosDBSourceConnector = "AzureCosmosDBSourceConnector",
  /** AzureSynapseAnalyticsSinkConnector */
  AzureSynapseAnalyticsSinkConnector = "AzureSynapseAnalyticsSinkConnector",
}

/**
 * Defines values for ConnectorServiceType. \
 * {@link KnownConnectorServiceType} can be used interchangeably with ConnectorServiceType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AzureBlobStorageSinkConnector** \
 * **AzureBlobStorageSourceConnector** \
 * **AzureCosmosDBSinkConnector** \
 * **AzureCosmosDBSourceConnector** \
 * **AzureSynapseAnalyticsSinkConnector**
 */
export type ConnectorServiceType = string;

/** Known values of {@link PartnerConnectorType} that the service accepts. */
export enum KnownPartnerConnectorType {
  /** KafkaAzureBlobStorageSource */
  KafkaAzureBlobStorageSource = "KafkaAzureBlobStorageSource",
  /** KafkaAzureBlobStorageSink */
  KafkaAzureBlobStorageSink = "KafkaAzureBlobStorageSink",
  /** KafkaAzureCosmosDBSource */
  KafkaAzureCosmosDBSource = "KafkaAzureCosmosDBSource",
  /** KafkaAzureCosmosDBSink */
  KafkaAzureCosmosDBSink = "KafkaAzureCosmosDBSink",
  /** KafkaAzureSynapseAnalyticsSink */
  KafkaAzureSynapseAnalyticsSink = "KafkaAzureSynapseAnalyticsSink",
}

/**
 * Defines values for PartnerConnectorType. \
 * {@link KnownPartnerConnectorType} can be used interchangeably with PartnerConnectorType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **KafkaAzureBlobStorageSource** \
 * **KafkaAzureBlobStorageSink** \
 * **KafkaAzureCosmosDBSource** \
 * **KafkaAzureCosmosDBSink** \
 * **KafkaAzureSynapseAnalyticsSink**
 */
export type PartnerConnectorType = string;

/** Known values of {@link AuthType} that the service accepts. */
export enum KnownAuthType {
  /** ServiceAccount */
  ServiceAccount = "SERVICE_ACCOUNT",
  /** KafkaAPIKEY */
  KafkaAPIKEY = "KAFKA_API_KEY",
}

/**
 * Defines values for AuthType. \
 * {@link KnownAuthType} can be used interchangeably with AuthType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SERVICE_ACCOUNT** \
 * **KAFKA_API_KEY**
 */
export type AuthType = string;

/** Known values of {@link DataFormatType} that the service accepts. */
export enum KnownDataFormatType {
  /** Avro */
  Avro = "AVRO",
  /** Json */
  Json = "JSON",
  /** String */
  String = "STRING",
  /** Bytes */
  Bytes = "BYTES",
  /** Protobuf */
  Protobuf = "PROTOBUF",
}

/**
 * Defines values for DataFormatType. \
 * {@link KnownDataFormatType} can be used interchangeably with DataFormatType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AVRO** \
 * **JSON** \
 * **STRING** \
 * **BYTES** \
 * **PROTOBUF**
 */
export type DataFormatType = string;

/** Optional parameters. */
export interface MarketplaceAgreementsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type MarketplaceAgreementsListResponse =
  ConfluentAgreementResourceListResponse;

/** Optional parameters. */
export interface MarketplaceAgreementsCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Confluent Marketplace Agreement resource */
  body?: ConfluentAgreementResource;
}

/** Contains response data for the create operation. */
export type MarketplaceAgreementsCreateResponse = ConfluentAgreementResource;

/** Optional parameters. */
export interface MarketplaceAgreementsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type MarketplaceAgreementsListNextResponse =
  ConfluentAgreementResourceListResponse;

/** Optional parameters. */
export interface OrganizationOperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OrganizationOperationsListResponse = OperationListResult;

/** Optional parameters. */
export interface OrganizationOperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OrganizationOperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export interface OrganizationListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type OrganizationListBySubscriptionResponse =
  OrganizationResourceListResult;

/** Optional parameters. */
export interface OrganizationListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type OrganizationListByResourceGroupResponse =
  OrganizationResourceListResult;

/** Optional parameters. */
export interface OrganizationGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type OrganizationGetResponse = OrganizationResource;

/** Optional parameters. */
export interface OrganizationCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Organization resource model */
  body?: OrganizationResource;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type OrganizationCreateResponse = OrganizationResource;

/** Optional parameters. */
export interface OrganizationUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Updated Organization resource */
  body?: OrganizationResourceUpdate;
}

/** Contains response data for the update operation. */
export type OrganizationUpdateResponse = OrganizationResource;

/** Optional parameters. */
export interface OrganizationDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface OrganizationListEnvironmentsOptionalParams
  extends coreClient.OperationOptions {
  /** Pagination size */
  pageSize?: number;
  /** An opaque pagination token to fetch the next set of records */
  pageToken?: string;
}

/** Contains response data for the listEnvironments operation. */
export type OrganizationListEnvironmentsResponse = GetEnvironmentsResponse;

/** Optional parameters. */
export interface OrganizationGetEnvironmentByIdOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getEnvironmentById operation. */
export type OrganizationGetEnvironmentByIdResponse = SCEnvironmentRecord;

/** Optional parameters. */
export interface OrganizationListClustersOptionalParams
  extends coreClient.OperationOptions {
  /** Pagination size */
  pageSize?: number;
  /** An opaque pagination token to fetch the next set of records */
  pageToken?: string;
}

/** Contains response data for the listClusters operation. */
export type OrganizationListClustersResponse = ListClustersSuccessResponse;

/** Optional parameters. */
export interface OrganizationListSchemaRegistryClustersOptionalParams
  extends coreClient.OperationOptions {
  /** Pagination size */
  pageSize?: number;
  /** An opaque pagination token to fetch the next set of records */
  pageToken?: string;
}

/** Contains response data for the listSchemaRegistryClusters operation. */
export type OrganizationListSchemaRegistryClustersResponse =
  ListSchemaRegistryClustersResponse;

/** Optional parameters. */
export interface OrganizationListRegionsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listRegions operation. */
export type OrganizationListRegionsResponse = ListRegionsSuccessResponse;

/** Optional parameters. */
export interface OrganizationCreateAPIKeyOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createAPIKey operation. */
export type OrganizationCreateAPIKeyResponse = APIKeyRecord;

/** Optional parameters. */
export interface OrganizationDeleteClusterAPIKeyOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface OrganizationGetClusterAPIKeyOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getClusterAPIKey operation. */
export type OrganizationGetClusterAPIKeyResponse = APIKeyRecord;

/** Optional parameters. */
export interface OrganizationGetSchemaRegistryClusterByIdOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getSchemaRegistryClusterById operation. */
export type OrganizationGetSchemaRegistryClusterByIdResponse =
  SchemaRegistryClusterRecord;

/** Optional parameters. */
export interface OrganizationGetClusterByIdOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getClusterById operation. */
export type OrganizationGetClusterByIdResponse = SCClusterRecord;

/** Optional parameters. */
export interface OrganizationListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type OrganizationListBySubscriptionNextResponse =
  OrganizationResourceListResult;

/** Optional parameters. */
export interface OrganizationListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type OrganizationListByResourceGroupNextResponse =
  OrganizationResourceListResult;

/** Optional parameters. */
export interface OrganizationListEnvironmentsNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listEnvironmentsNext operation. */
export type OrganizationListEnvironmentsNextResponse = GetEnvironmentsResponse;

/** Optional parameters. */
export interface OrganizationListClustersNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listClustersNext operation. */
export type OrganizationListClustersNextResponse = ListClustersSuccessResponse;

/** Optional parameters. */
export interface OrganizationListSchemaRegistryClustersNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listSchemaRegistryClustersNext operation. */
export type OrganizationListSchemaRegistryClustersNextResponse =
  ListSchemaRegistryClustersResponse;

/** Optional parameters. */
export interface ValidationsValidateOrganizationOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the validateOrganization operation. */
export type ValidationsValidateOrganizationResponse = OrganizationResource;

/** Optional parameters. */
export interface ValidationsValidateOrganizationV2OptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the validateOrganizationV2 operation. */
export type ValidationsValidateOrganizationV2Response = ValidationResponse;

/** Optional parameters. */
export interface AccessListUsersOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listUsers operation. */
export type AccessListUsersResponse = AccessListUsersSuccessResponse;

/** Optional parameters. */
export interface AccessListServiceAccountsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listServiceAccounts operation. */
export type AccessListServiceAccountsResponse =
  AccessListServiceAccountsSuccessResponse;

/** Optional parameters. */
export interface AccessListInvitationsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listInvitations operation. */
export type AccessListInvitationsResponse =
  AccessListInvitationsSuccessResponse;

/** Optional parameters. */
export interface AccessInviteUserOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the inviteUser operation. */
export type AccessInviteUserResponse = InvitationRecord;

/** Optional parameters. */
export interface AccessListEnvironmentsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listEnvironments operation. */
export type AccessListEnvironmentsResponse =
  AccessListEnvironmentsSuccessResponse;

/** Optional parameters. */
export interface AccessListClustersOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listClusters operation. */
export type AccessListClustersResponse = AccessListClusterSuccessResponse;

/** Optional parameters. */
export interface AccessListRoleBindingsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listRoleBindings operation. */
export type AccessListRoleBindingsResponse =
  AccessListRoleBindingsSuccessResponse;

/** Optional parameters. */
export interface AccessCreateRoleBindingOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createRoleBinding operation. */
export type AccessCreateRoleBindingResponse = RoleBindingRecord;

/** Optional parameters. */
export interface AccessDeleteRoleBindingOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface AccessListRoleBindingNameListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listRoleBindingNameList operation. */
export type AccessListRoleBindingNameListResponse =
  AccessRoleBindingNameListSuccessResponse;

/** Optional parameters. */
export interface EnvironmentCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Confluent Environment resource model */
  body?: SCEnvironmentRecord;
}

/** Contains response data for the createOrUpdate operation. */
export type EnvironmentCreateOrUpdateResponse = SCEnvironmentRecord;

/** Optional parameters. */
export interface EnvironmentDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type EnvironmentDeleteResponse = EnvironmentDeleteHeaders;

/** Optional parameters. */
export interface ClusterCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Confluent Cluster resource model */
  body?: SCClusterRecord;
}

/** Contains response data for the createOrUpdate operation. */
export type ClusterCreateOrUpdateResponse = SCClusterRecord;

/** Optional parameters. */
export interface ClusterDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type ClusterDeleteResponse = ClusterDeleteHeaders;

/** Optional parameters. */
export interface ConnectorGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ConnectorGetResponse = ConnectorResource;

/** Optional parameters. */
export interface ConnectorCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Confluent Connector resource model */
  body?: ConnectorResource;
}

/** Contains response data for the createOrUpdate operation. */
export type ConnectorCreateOrUpdateResponse = ConnectorResource;

/** Optional parameters. */
export interface ConnectorDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type ConnectorDeleteResponse = ConnectorDeleteHeaders;

/** Optional parameters. */
export interface ConnectorListOptionalParams
  extends coreClient.OperationOptions {
  /** Pagination size */
  pageSize?: number;
  /** An opaque pagination token to fetch the next set of records */
  pageToken?: string;
}

/** Contains response data for the list operation. */
export type ConnectorListResponse = ListConnectorsSuccessResponse;

/** Optional parameters. */
export interface ConnectorListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type ConnectorListNextResponse = ListConnectorsSuccessResponse;

/** Optional parameters. */
export interface TopicsListOptionalParams extends coreClient.OperationOptions {
  /** Pagination size */
  pageSize?: number;
  /** An opaque pagination token to fetch the next set of records */
  pageToken?: string;
}

/** Contains response data for the list operation. */
export type TopicsListResponse = ListTopicsSuccessResponse;

/** Optional parameters. */
export interface TopicsGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type TopicsGetResponse = TopicRecord;

/** Optional parameters. */
export interface TopicsCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Confluent Topics resource model */
  body?: TopicRecord;
}

/** Contains response data for the create operation. */
export type TopicsCreateResponse = TopicRecord;

/** Optional parameters. */
export interface TopicsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type TopicsDeleteResponse = TopicsDeleteHeaders;

/** Optional parameters. */
export interface TopicsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type TopicsListNextResponse = ListTopicsSuccessResponse;

/** Optional parameters. */
export interface ConfluentManagementClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
