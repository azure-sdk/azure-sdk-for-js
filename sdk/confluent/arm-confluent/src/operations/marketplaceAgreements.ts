/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { MarketplaceAgreements } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ConfluentManagementClient } from "../confluentManagementClient";
import {
  MarketplaceAgreementsCreateOptionalParams,
  MarketplaceAgreementsCreateResponse,
} from "../models";

/** Class containing MarketplaceAgreements operations. */
export class MarketplaceAgreementsImpl implements MarketplaceAgreements {
  private readonly client: ConfluentManagementClient;

  /**
   * Initialize a new instance of the class MarketplaceAgreements class.
   * @param client Reference to the service client
   */
  constructor(client: ConfluentManagementClient) {
    this.client = client;
  }

  /**
   * Create Confluent Marketplace agreement in the subscription.
   * @param options The options parameters.
   */
  create(
    options?: MarketplaceAgreementsCreateOptionalParams,
  ): Promise<MarketplaceAgreementsCreateResponse> {
    return this.client.sendOperationRequest({ options }, createOperationSpec);
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Confluent/agreements/default",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ConfluentAgreementResource,
    },
    default: {
      bodyMapper: Mappers.ResourceProviderDefaultErrorResponse,
    },
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
