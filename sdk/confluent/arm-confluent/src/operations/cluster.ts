/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { Cluster } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ConfluentManagementClient } from "../confluentManagementClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  ClusterCreateOrUpdateOptionalParams,
  ClusterCreateOrUpdateResponse,
  ClusterDeleteOptionalParams,
  ClusterDeleteResponse,
} from "../models";

/** Class containing Cluster operations. */
export class ClusterImpl implements Cluster {
  private readonly client: ConfluentManagementClient;

  /**
   * Initialize a new instance of the class Cluster class.
   * @param client Reference to the service client
   */
  constructor(client: ConfluentManagementClient) {
    this.client = client;
  }

  /**
   * Create confluent clusters
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param organizationName Organization resource name
   * @param environmentId Confluent environment id
   * @param clusterId Confluent kafka or schema registry cluster id
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    organizationName: string,
    environmentId: string,
    clusterId: string,
    options?: ClusterCreateOrUpdateOptionalParams,
  ): Promise<ClusterCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        organizationName,
        environmentId,
        clusterId,
        options,
      },
      createOrUpdateOperationSpec,
    );
  }

  /**
   * Delete confluent cluster by id
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param organizationName Organization resource name
   * @param environmentId Confluent environment id
   * @param clusterId Confluent kafka or schema registry cluster id
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    organizationName: string,
    environmentId: string,
    clusterId: string,
    options?: ClusterDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ClusterDeleteResponse>,
      ClusterDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ClusterDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        organizationName,
        environmentId,
        clusterId,
        options,
      },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<
      ClusterDeleteResponse,
      OperationState<ClusterDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete confluent cluster by id
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param organizationName Organization resource name
   * @param environmentId Confluent environment id
   * @param clusterId Confluent kafka or schema registry cluster id
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    organizationName: string,
    environmentId: string,
    clusterId: string,
    options?: ClusterDeleteOptionalParams,
  ): Promise<ClusterDeleteResponse> {
    const poller = await this.beginDelete(
      resourceGroupName,
      organizationName,
      environmentId,
      clusterId,
      options,
    );
    return poller.pollUntilDone();
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/environments/{environmentId}/clusters/{clusterId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SCClusterRecord,
    },
    201: {
      bodyMapper: Mappers.SCClusterRecord,
    },
    default: {
      bodyMapper: Mappers.ResourceProviderDefaultErrorResponse,
    },
  },
  requestBody: Parameters.body9,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.organizationName,
    Parameters.resourceGroupName1,
    Parameters.environmentId,
    Parameters.clusterId,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/environments/{environmentId}/clusters/{clusterId}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.ClusterDeleteHeaders,
    },
    201: {
      headersMapper: Mappers.ClusterDeleteHeaders,
    },
    202: {
      headersMapper: Mappers.ClusterDeleteHeaders,
    },
    204: {
      headersMapper: Mappers.ClusterDeleteHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.organizationName,
    Parameters.resourceGroupName1,
    Parameters.environmentId,
    Parameters.clusterId,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
