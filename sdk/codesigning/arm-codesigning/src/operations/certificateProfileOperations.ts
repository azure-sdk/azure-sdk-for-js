/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { CertificateProfileOperations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { CodeSigningManagementClient } from "../codeSigningManagementClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  CertificateProfile,
  CertificateProfileListByCodeSigningAccountNextOptionalParams,
  CertificateProfileListByCodeSigningAccountOptionalParams,
  CertificateProfileListByCodeSigningAccountResponse,
  CertificateProfileCreateOptionalParams,
  CertificateProfileCreateResponse,
  CertificateProfileGetOptionalParams,
  CertificateProfileGetResponse,
  CertificateProfilePatch,
  CertificateProfileUpdateOptionalParams,
  CertificateProfileUpdateResponse,
  CertificateProfileDeleteOptionalParams,
  CertificateProfileListByCodeSigningAccountNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing CertificateProfileOperations operations. */
export class CertificateProfileOperationsImpl
  implements CertificateProfileOperations {
  private readonly client: CodeSigningManagementClient;

  /**
   * Initialize a new instance of the class CertificateProfileOperations class.
   * @param client Reference to the service client
   */
  constructor(client: CodeSigningManagementClient) {
    this.client = client;
  }

  /**
   * List certificate profiles within a code signing account
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Code Signing account name
   * @param options The options parameters.
   */
  public listByCodeSigningAccount(
    resourceGroupName: string,
    accountName: string,
    options?: CertificateProfileListByCodeSigningAccountOptionalParams
  ): PagedAsyncIterableIterator<CertificateProfile> {
    const iter = this.listByCodeSigningAccountPagingAll(
      resourceGroupName,
      accountName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByCodeSigningAccountPagingPage(
          resourceGroupName,
          accountName,
          options,
          settings
        );
      }
    };
  }

  private async *listByCodeSigningAccountPagingPage(
    resourceGroupName: string,
    accountName: string,
    options?: CertificateProfileListByCodeSigningAccountOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<CertificateProfile[]> {
    let result: CertificateProfileListByCodeSigningAccountResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByCodeSigningAccount(
        resourceGroupName,
        accountName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByCodeSigningAccountNext(
        resourceGroupName,
        accountName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByCodeSigningAccountPagingAll(
    resourceGroupName: string,
    accountName: string,
    options?: CertificateProfileListByCodeSigningAccountOptionalParams
  ): AsyncIterableIterator<CertificateProfile> {
    for await (const page of this.listByCodeSigningAccountPagingPage(
      resourceGroupName,
      accountName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List certificate profiles within a code signing account
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Code Signing account name
   * @param options The options parameters.
   */
  private _listByCodeSigningAccount(
    resourceGroupName: string,
    accountName: string,
    options?: CertificateProfileListByCodeSigningAccountOptionalParams
  ): Promise<CertificateProfileListByCodeSigningAccountResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, options },
      listByCodeSigningAccountOperationSpec
    );
  }

  /**
   * Create a certificate profile
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Code Signing account name
   * @param profileName Certificate profile name
   * @param certificateProfile Parameters to create the certificate profile
   * @param options The options parameters.
   */
  async beginCreate(
    resourceGroupName: string,
    accountName: string,
    profileName: string,
    certificateProfile: CertificateProfile,
    options?: CertificateProfileCreateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<CertificateProfileCreateResponse>,
      CertificateProfileCreateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<CertificateProfileCreateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        accountName,
        profileName,
        certificateProfile,
        options
      },
      spec: createOperationSpec
    });
    const poller = await createHttpPoller<
      CertificateProfileCreateResponse,
      OperationState<CertificateProfileCreateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create a certificate profile
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Code Signing account name
   * @param profileName Certificate profile name
   * @param certificateProfile Parameters to create the certificate profile
   * @param options The options parameters.
   */
  async beginCreateAndWait(
    resourceGroupName: string,
    accountName: string,
    profileName: string,
    certificateProfile: CertificateProfile,
    options?: CertificateProfileCreateOptionalParams
  ): Promise<CertificateProfileCreateResponse> {
    const poller = await this.beginCreate(
      resourceGroupName,
      accountName,
      profileName,
      certificateProfile,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Get details of a certificate profile
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Code Signing account name
   * @param profileName Certificate profile name
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    accountName: string,
    profileName: string,
    options?: CertificateProfileGetOptionalParams
  ): Promise<CertificateProfileGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, profileName, options },
      getOperationSpec
    );
  }

  /**
   * Update a certificate profile
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Code Signing account name
   * @param profileName Certificate profile name
   * @param certificateProfilePatch Parameters supplied to update certificate profile
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    accountName: string,
    profileName: string,
    certificateProfilePatch: CertificateProfilePatch,
    options?: CertificateProfileUpdateOptionalParams
  ): Promise<CertificateProfileUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        profileName,
        certificateProfilePatch,
        options
      },
      updateOperationSpec
    );
  }

  /**
   * Delete a Certificate Profile
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Code Signing account name
   * @param profileName Certificate profile name
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    accountName: string,
    profileName: string,
    options?: CertificateProfileDeleteOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, accountName, profileName, options },
      spec: deleteOperationSpec
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete a Certificate Profile
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Code Signing account name
   * @param profileName Certificate profile name
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    accountName: string,
    profileName: string,
    options?: CertificateProfileDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      accountName,
      profileName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * ListByCodeSigningAccountNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Code Signing account name
   * @param nextLink The nextLink from the previous successful call to the ListByCodeSigningAccount
   *                 method.
   * @param options The options parameters.
   */
  private _listByCodeSigningAccountNext(
    resourceGroupName: string,
    accountName: string,
    nextLink: string,
    options?: CertificateProfileListByCodeSigningAccountNextOptionalParams
  ): Promise<CertificateProfileListByCodeSigningAccountNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, nextLink, options },
      listByCodeSigningAccountNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByCodeSigningAccountOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CodeSigning/codeSigningAccounts/{accountName}/certificateProfiles",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateProfiles
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CodeSigning/codeSigningAccounts/{accountName}/certificateProfiles/{profileName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateProfile
    },
    201: {
      bodyMapper: Mappers.CertificateProfile
    },
    202: {
      bodyMapper: Mappers.CertificateProfile
    },
    204: {
      bodyMapper: Mappers.CertificateProfile
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.certificateProfile,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.profileName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CodeSigning/codeSigningAccounts/{accountName}/certificateProfiles/{profileName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateProfile
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.profileName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CodeSigning/codeSigningAccounts/{accountName}/certificateProfiles/{profileName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateProfile
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.certificateProfilePatch,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.profileName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CodeSigning/codeSigningAccounts/{accountName}/certificateProfiles/{profileName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.profileName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByCodeSigningAccountNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateProfiles
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
