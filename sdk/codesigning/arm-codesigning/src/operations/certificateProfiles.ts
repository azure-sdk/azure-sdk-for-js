/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { CertificateProfiles } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { CodeSigningManagementClient } from "../codeSigningManagementClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  CertificateProfile,
  CertificateProfilesListByCodeSigningAccountNextOptionalParams,
  CertificateProfilesListByCodeSigningAccountOptionalParams,
  CertificateProfilesListByCodeSigningAccountResponse,
  CertificateProfilesGetOptionalParams,
  CertificateProfilesGetResponse,
  CertificateProfilesCreateOptionalParams,
  CertificateProfilesCreateResponse,
  CertificateProfilesDeleteOptionalParams,
  CertificateProfilesDeleteResponse,
  RevokeCertificate,
  CertificateProfilesRevokeCertificateOptionalParams,
  CertificateProfilesListByCodeSigningAccountNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing CertificateProfiles operations. */
export class CertificateProfilesImpl implements CertificateProfiles {
  private readonly client: CodeSigningManagementClient;

  /**
   * Initialize a new instance of the class CertificateProfiles class.
   * @param client Reference to the service client
   */
  constructor(client: CodeSigningManagementClient) {
    this.client = client;
  }

  /**
   * List certificate profiles under a trusted signing account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Trusted Signing account name.
   * @param options The options parameters.
   */
  public listByCodeSigningAccount(
    resourceGroupName: string,
    accountName: string,
    options?: CertificateProfilesListByCodeSigningAccountOptionalParams,
  ): PagedAsyncIterableIterator<CertificateProfile> {
    const iter = this.listByCodeSigningAccountPagingAll(
      resourceGroupName,
      accountName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByCodeSigningAccountPagingPage(
          resourceGroupName,
          accountName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByCodeSigningAccountPagingPage(
    resourceGroupName: string,
    accountName: string,
    options?: CertificateProfilesListByCodeSigningAccountOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<CertificateProfile[]> {
    let result: CertificateProfilesListByCodeSigningAccountResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByCodeSigningAccount(
        resourceGroupName,
        accountName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByCodeSigningAccountNext(
        resourceGroupName,
        accountName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByCodeSigningAccountPagingAll(
    resourceGroupName: string,
    accountName: string,
    options?: CertificateProfilesListByCodeSigningAccountOptionalParams,
  ): AsyncIterableIterator<CertificateProfile> {
    for await (const page of this.listByCodeSigningAccountPagingPage(
      resourceGroupName,
      accountName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List certificate profiles under a trusted signing account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Trusted Signing account name.
   * @param options The options parameters.
   */
  private _listByCodeSigningAccount(
    resourceGroupName: string,
    accountName: string,
    options?: CertificateProfilesListByCodeSigningAccountOptionalParams,
  ): Promise<CertificateProfilesListByCodeSigningAccountResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, options },
      listByCodeSigningAccountOperationSpec,
    );
  }

  /**
   * Get details of a certificate profile.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Trusted Signing account name.
   * @param profileName Certificate profile name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    accountName: string,
    profileName: string,
    options?: CertificateProfilesGetOptionalParams,
  ): Promise<CertificateProfilesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, profileName, options },
      getOperationSpec,
    );
  }

  /**
   * Create a certificate profile.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Trusted Signing account name.
   * @param profileName Certificate profile name.
   * @param resource Parameters to create the certificate profile
   * @param options The options parameters.
   */
  async beginCreate(
    resourceGroupName: string,
    accountName: string,
    profileName: string,
    resource: CertificateProfile,
    options?: CertificateProfilesCreateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<CertificateProfilesCreateResponse>,
      CertificateProfilesCreateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<CertificateProfilesCreateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, accountName, profileName, resource, options },
      spec: createOperationSpec,
    });
    const poller = await createHttpPoller<
      CertificateProfilesCreateResponse,
      OperationState<CertificateProfilesCreateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create a certificate profile.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Trusted Signing account name.
   * @param profileName Certificate profile name.
   * @param resource Parameters to create the certificate profile
   * @param options The options parameters.
   */
  async beginCreateAndWait(
    resourceGroupName: string,
    accountName: string,
    profileName: string,
    resource: CertificateProfile,
    options?: CertificateProfilesCreateOptionalParams,
  ): Promise<CertificateProfilesCreateResponse> {
    const poller = await this.beginCreate(
      resourceGroupName,
      accountName,
      profileName,
      resource,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Delete a certificate profile.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Trusted Signing account name.
   * @param profileName Certificate profile name.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    accountName: string,
    profileName: string,
    options?: CertificateProfilesDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<CertificateProfilesDeleteResponse>,
      CertificateProfilesDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<CertificateProfilesDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, accountName, profileName, options },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<
      CertificateProfilesDeleteResponse,
      OperationState<CertificateProfilesDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete a certificate profile.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Trusted Signing account name.
   * @param profileName Certificate profile name.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    accountName: string,
    profileName: string,
    options?: CertificateProfilesDeleteOptionalParams,
  ): Promise<CertificateProfilesDeleteResponse> {
    const poller = await this.beginDelete(
      resourceGroupName,
      accountName,
      profileName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Revoke a certificate under a certificate profile.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Trusted Signing account name.
   * @param profileName Certificate profile name.
   * @param body Parameters to revoke the certificate profile
   * @param options The options parameters.
   */
  revokeCertificate(
    resourceGroupName: string,
    accountName: string,
    profileName: string,
    body: RevokeCertificate,
    options?: CertificateProfilesRevokeCertificateOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, profileName, body, options },
      revokeCertificateOperationSpec,
    );
  }

  /**
   * ListByCodeSigningAccountNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Trusted Signing account name.
   * @param nextLink The nextLink from the previous successful call to the ListByCodeSigningAccount
   *                 method.
   * @param options The options parameters.
   */
  private _listByCodeSigningAccountNext(
    resourceGroupName: string,
    accountName: string,
    nextLink: string,
    options?: CertificateProfilesListByCodeSigningAccountNextOptionalParams,
  ): Promise<CertificateProfilesListByCodeSigningAccountNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, nextLink, options },
      listByCodeSigningAccountNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByCodeSigningAccountOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CodeSigning/codeSigningAccounts/{accountName}/certificateProfiles",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateProfileListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CodeSigning/codeSigningAccounts/{accountName}/certificateProfiles/{profileName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateProfile,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.profileName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CodeSigning/codeSigningAccounts/{accountName}/certificateProfiles/{profileName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateProfile,
    },
    201: {
      bodyMapper: Mappers.CertificateProfile,
    },
    202: {
      bodyMapper: Mappers.CertificateProfile,
    },
    204: {
      bodyMapper: Mappers.CertificateProfile,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.resource1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.profileName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CodeSigning/codeSigningAccounts/{accountName}/certificateProfiles/{profileName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.CertificateProfilesDeleteHeaders,
    },
    201: {
      headersMapper: Mappers.CertificateProfilesDeleteHeaders,
    },
    202: {
      headersMapper: Mappers.CertificateProfilesDeleteHeaders,
    },
    204: {
      headersMapper: Mappers.CertificateProfilesDeleteHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.profileName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const revokeCertificateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CodeSigning/codeSigningAccounts/{accountName}/certificateProfiles/{profileName}/revokeCertificate",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.profileName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const listByCodeSigningAccountNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateProfileListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
