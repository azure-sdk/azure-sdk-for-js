/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  CertificateProfile,
  CertificateProfileListByCodeSigningAccountOptionalParams,
  CertificateProfileCreateOptionalParams,
  CertificateProfileCreateResponse,
  CertificateProfileGetOptionalParams,
  CertificateProfileGetResponse,
  CertificateProfilePatch,
  CertificateProfileUpdateOptionalParams,
  CertificateProfileUpdateResponse,
  CertificateProfileDeleteOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a CertificateProfileOperations. */
export interface CertificateProfileOperations {
  /**
   * List certificate profiles within a code signing account
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Code Signing account name
   * @param options The options parameters.
   */
  listByCodeSigningAccount(
    resourceGroupName: string,
    accountName: string,
    options?: CertificateProfileListByCodeSigningAccountOptionalParams
  ): PagedAsyncIterableIterator<CertificateProfile>;
  /**
   * Create a certificate profile
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Code Signing account name
   * @param profileName Certificate profile name
   * @param certificateProfile Parameters to create the certificate profile
   * @param options The options parameters.
   */
  beginCreate(
    resourceGroupName: string,
    accountName: string,
    profileName: string,
    certificateProfile: CertificateProfile,
    options?: CertificateProfileCreateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<CertificateProfileCreateResponse>,
      CertificateProfileCreateResponse
    >
  >;
  /**
   * Create a certificate profile
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Code Signing account name
   * @param profileName Certificate profile name
   * @param certificateProfile Parameters to create the certificate profile
   * @param options The options parameters.
   */
  beginCreateAndWait(
    resourceGroupName: string,
    accountName: string,
    profileName: string,
    certificateProfile: CertificateProfile,
    options?: CertificateProfileCreateOptionalParams
  ): Promise<CertificateProfileCreateResponse>;
  /**
   * Get details of a certificate profile
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Code Signing account name
   * @param profileName Certificate profile name
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    accountName: string,
    profileName: string,
    options?: CertificateProfileGetOptionalParams
  ): Promise<CertificateProfileGetResponse>;
  /**
   * Update a certificate profile
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Code Signing account name
   * @param profileName Certificate profile name
   * @param certificateProfilePatch Parameters supplied to update certificate profile
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    accountName: string,
    profileName: string,
    certificateProfilePatch: CertificateProfilePatch,
    options?: CertificateProfileUpdateOptionalParams
  ): Promise<CertificateProfileUpdateResponse>;
  /**
   * Delete a Certificate Profile
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Code Signing account name
   * @param profileName Certificate profile name
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    accountName: string,
    profileName: string,
    options?: CertificateProfileDeleteOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Delete a Certificate Profile
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Code Signing account name
   * @param profileName Certificate profile name
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    accountName: string,
    profileName: string,
    options?: CertificateProfileDeleteOptionalParams
  ): Promise<void>;
}
