/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  CodeSigningAccount,
  CodeSigningAccountsListBySubscriptionOptionalParams,
  CodeSigningAccountsListByResourceGroupOptionalParams,
  CheckNameAvailability,
  CodeSigningAccountsCheckNameAvailabilityOptionalParams,
  CodeSigningAccountsCheckNameAvailabilityResponse,
  CodeSigningAccountsGetOptionalParams,
  CodeSigningAccountsGetResponse,
  CodeSigningAccountsCreateOptionalParams,
  CodeSigningAccountsCreateResponse,
  CodeSigningAccountPatch,
  CodeSigningAccountsUpdateOptionalParams,
  CodeSigningAccountsUpdateResponse,
  CodeSigningAccountsDeleteOptionalParams,
  CodeSigningAccountsDeleteResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a CodeSigningAccounts. */
export interface CodeSigningAccounts {
  /**
   * Lists trusted signing accounts within a subscription.
   * @param options The options parameters.
   */
  listBySubscription(
    options?: CodeSigningAccountsListBySubscriptionOptionalParams,
  ): PagedAsyncIterableIterator<CodeSigningAccount>;
  /**
   * Lists trusted signing accounts within a resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: CodeSigningAccountsListByResourceGroupOptionalParams,
  ): PagedAsyncIterableIterator<CodeSigningAccount>;
  /**
   * Checks that the trusted signing account name is valid and is not already in use.
   * @param body The CheckAvailability request
   * @param options The options parameters.
   */
  checkNameAvailability(
    body: CheckNameAvailability,
    options?: CodeSigningAccountsCheckNameAvailabilityOptionalParams,
  ): Promise<CodeSigningAccountsCheckNameAvailabilityResponse>;
  /**
   * Get a trusted Signing Account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Trusted Signing account name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    accountName: string,
    options?: CodeSigningAccountsGetOptionalParams,
  ): Promise<CodeSigningAccountsGetResponse>;
  /**
   * Create a trusted Signing Account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Trusted Signing account name.
   * @param resource Parameters to create the trusted signing account
   * @param options The options parameters.
   */
  beginCreate(
    resourceGroupName: string,
    accountName: string,
    resource: CodeSigningAccount,
    options?: CodeSigningAccountsCreateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<CodeSigningAccountsCreateResponse>,
      CodeSigningAccountsCreateResponse
    >
  >;
  /**
   * Create a trusted Signing Account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Trusted Signing account name.
   * @param resource Parameters to create the trusted signing account
   * @param options The options parameters.
   */
  beginCreateAndWait(
    resourceGroupName: string,
    accountName: string,
    resource: CodeSigningAccount,
    options?: CodeSigningAccountsCreateOptionalParams,
  ): Promise<CodeSigningAccountsCreateResponse>;
  /**
   * Update a trusted signing account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Trusted Signing account name.
   * @param properties Parameters supplied to update the trusted signing account
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    accountName: string,
    properties: CodeSigningAccountPatch,
    options?: CodeSigningAccountsUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<CodeSigningAccountsUpdateResponse>,
      CodeSigningAccountsUpdateResponse
    >
  >;
  /**
   * Update a trusted signing account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Trusted Signing account name.
   * @param properties Parameters supplied to update the trusted signing account
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    accountName: string,
    properties: CodeSigningAccountPatch,
    options?: CodeSigningAccountsUpdateOptionalParams,
  ): Promise<CodeSigningAccountsUpdateResponse>;
  /**
   * Delete a trusted signing account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Trusted Signing account name.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    accountName: string,
    options?: CodeSigningAccountsDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<CodeSigningAccountsDeleteResponse>,
      CodeSigningAccountsDeleteResponse
    >
  >;
  /**
   * Delete a trusted signing account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Trusted Signing account name.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    accountName: string,
    options?: CodeSigningAccountsDeleteOptionalParams,
  ): Promise<CodeSigningAccountsDeleteResponse>;
}
