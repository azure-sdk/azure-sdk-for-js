/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { GiMinorVersions } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { OracleDatabaseResourceManager } from "../oracleDatabaseResourceManager.js";
import {
  GiMinorVersion,
  GiMinorVersionsListByParentNextOptionalParams,
  GiMinorVersionsListByParentOptionalParams,
  GiMinorVersionsListByParentResponse,
  GiMinorVersionsGetOptionalParams,
  GiMinorVersionsGetResponse,
  GiMinorVersionsListByParentNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing GiMinorVersions operations. */
export class GiMinorVersionsImpl implements GiMinorVersions {
  private readonly client: OracleDatabaseResourceManager;

  /**
   * Initialize a new instance of the class GiMinorVersions class.
   * @param client Reference to the service client
   */
  constructor(client: OracleDatabaseResourceManager) {
    this.client = client;
  }

  /**
   * List GiMinorVersion resources by GiVersion
   * @param location The name of the Azure region.
   * @param giversionname GiVersion name
   * @param options The options parameters.
   */
  public listByParent(
    location: string,
    giversionname: string,
    options?: GiMinorVersionsListByParentOptionalParams,
  ): PagedAsyncIterableIterator<GiMinorVersion> {
    const iter = this.listByParentPagingAll(location, giversionname, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByParentPagingPage(
          location,
          giversionname,
          options,
          settings,
        );
      },
    };
  }

  private async *listByParentPagingPage(
    location: string,
    giversionname: string,
    options?: GiMinorVersionsListByParentOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<GiMinorVersion[]> {
    let result: GiMinorVersionsListByParentResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByParent(location, giversionname, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByParentNext(
        location,
        giversionname,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByParentPagingAll(
    location: string,
    giversionname: string,
    options?: GiMinorVersionsListByParentOptionalParams,
  ): AsyncIterableIterator<GiMinorVersion> {
    for await (const page of this.listByParentPagingPage(
      location,
      giversionname,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List GiMinorVersion resources by GiVersion
   * @param location The name of the Azure region.
   * @param giversionname GiVersion name
   * @param options The options parameters.
   */
  private _listByParent(
    location: string,
    giversionname: string,
    options?: GiMinorVersionsListByParentOptionalParams,
  ): Promise<GiMinorVersionsListByParentResponse> {
    return this.client.sendOperationRequest(
      { location, giversionname, options },
      listByParentOperationSpec,
    );
  }

  /**
   * Get a GiMinorVersion
   * @param location The name of the Azure region.
   * @param giversionname GiVersion name
   * @param giMinorVersionName The name of the GiMinorVersion
   * @param options The options parameters.
   */
  get(
    location: string,
    giversionname: string,
    giMinorVersionName: string,
    options?: GiMinorVersionsGetOptionalParams,
  ): Promise<GiMinorVersionsGetResponse> {
    return this.client.sendOperationRequest(
      { location, giversionname, giMinorVersionName, options },
      getOperationSpec,
    );
  }

  /**
   * ListByParentNext
   * @param location The name of the Azure region.
   * @param giversionname GiVersion name
   * @param nextLink The nextLink from the previous successful call to the ListByParent method.
   * @param options The options parameters.
   */
  private _listByParentNext(
    location: string,
    giversionname: string,
    nextLink: string,
    options?: GiMinorVersionsListByParentNextOptionalParams,
  ): Promise<GiMinorVersionsListByParentNextResponse> {
    return this.client.sendOperationRequest(
      { location, giversionname, nextLink, options },
      listByParentNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByParentOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Oracle.Database/locations/{location}/giVersions/{giversionname}/giMinorVersions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GiMinorVersionListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.zone,
    Parameters.shapeFamily,
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
    Parameters.giversionname,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Oracle.Database/locations/{location}/giVersions/{giversionname}/giMinorVersions/{giMinorVersionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GiMinorVersion,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
    Parameters.giversionname,
    Parameters.giMinorVersionName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByParentNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GiMinorVersionListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.location,
    Parameters.giversionname,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
