/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { HybridIdentityMetadataOperations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { HybridContainerServiceClient } from "../hybridContainerServiceClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  HybridIdentityMetadata,
  HybridIdentityMetadataListByProvisionedClusterNextOptionalParams,
  HybridIdentityMetadataListByProvisionedClusterOptionalParams,
  HybridIdentityMetadataListByProvisionedClusterResponse,
  HybridIdentityMetadataGetOptionalParams,
  HybridIdentityMetadataGetResponse,
  HybridIdentityMetadataPutOptionalParams,
  HybridIdentityMetadataPutResponse,
  HybridIdentityMetadataDeleteOptionalParams,
  HybridIdentityMetadataDeleteResponse,
  HybridIdentityMetadataListByProvisionedClusterNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing HybridIdentityMetadataOperations operations. */
export class HybridIdentityMetadataOperationsImpl
  implements HybridIdentityMetadataOperations {
  private readonly client: HybridContainerServiceClient;

  /**
   * Initialize a new instance of the class HybridIdentityMetadataOperations class.
   * @param client Reference to the service client
   */
  constructor(client: HybridContainerServiceClient) {
    this.client = client;
  }

  /**
   * Lists the hybrid identity metadata proxy resource in a provisioned cluster instance.
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param options The options parameters.
   */
  public listByProvisionedCluster(
    resourceUri: string,
    options?: HybridIdentityMetadataListByProvisionedClusterOptionalParams
  ): PagedAsyncIterableIterator<HybridIdentityMetadata> {
    const iter = this.listByProvisionedClusterPagingAll(resourceUri, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByProvisionedClusterPagingPage(
          resourceUri,
          options,
          settings
        );
      }
    };
  }

  private async *listByProvisionedClusterPagingPage(
    resourceUri: string,
    options?: HybridIdentityMetadataListByProvisionedClusterOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<HybridIdentityMetadata[]> {
    let result: HybridIdentityMetadataListByProvisionedClusterResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByProvisionedCluster(resourceUri, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByProvisionedClusterNext(
        resourceUri,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByProvisionedClusterPagingAll(
    resourceUri: string,
    options?: HybridIdentityMetadataListByProvisionedClusterOptionalParams
  ): AsyncIterableIterator<HybridIdentityMetadata> {
    for await (const page of this.listByProvisionedClusterPagingPage(
      resourceUri,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists the hybrid identity metadata proxy resource in a provisioned cluster instance.
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param options The options parameters.
   */
  private _listByProvisionedCluster(
    resourceUri: string,
    options?: HybridIdentityMetadataListByProvisionedClusterOptionalParams
  ): Promise<HybridIdentityMetadataListByProvisionedClusterResponse> {
    return this.client.sendOperationRequest(
      { resourceUri, options },
      listByProvisionedClusterOperationSpec
    );
  }

  /**
   * Get the hybrid identity metadata proxy resource.
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param options The options parameters.
   */
  get(
    resourceUri: string,
    options?: HybridIdentityMetadataGetOptionalParams
  ): Promise<HybridIdentityMetadataGetResponse> {
    return this.client.sendOperationRequest(
      { resourceUri, options },
      getOperationSpec
    );
  }

  /**
   * Creates the hybrid identity metadata proxy resource that facilitates the managed identity
   * provisioning.
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  put(
    resourceUri: string,
    resource: HybridIdentityMetadata,
    options?: HybridIdentityMetadataPutOptionalParams
  ): Promise<HybridIdentityMetadataPutResponse> {
    return this.client.sendOperationRequest(
      { resourceUri, resource, options },
      putOperationSpec
    );
  }

  /**
   * Deletes the hybrid identity metadata proxy resource.
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceUri: string,
    options?: HybridIdentityMetadataDeleteOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<HybridIdentityMetadataDeleteResponse>,
      HybridIdentityMetadataDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<HybridIdentityMetadataDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceUri, options },
      spec: deleteOperationSpec
    });
    const poller = await createHttpPoller<
      HybridIdentityMetadataDeleteResponse,
      OperationState<HybridIdentityMetadataDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Deletes the hybrid identity metadata proxy resource.
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceUri: string,
    options?: HybridIdentityMetadataDeleteOptionalParams
  ): Promise<HybridIdentityMetadataDeleteResponse> {
    const poller = await this.beginDelete(resourceUri, options);
    return poller.pollUntilDone();
  }

  /**
   * ListByProvisionedClusterNext
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param nextLink The nextLink from the previous successful call to the ListByProvisionedCluster
   *                 method.
   * @param options The options parameters.
   */
  private _listByProvisionedClusterNext(
    resourceUri: string,
    nextLink: string,
    options?: HybridIdentityMetadataListByProvisionedClusterNextOptionalParams
  ): Promise<HybridIdentityMetadataListByProvisionedClusterNextResponse> {
    return this.client.sendOperationRequest(
      { resourceUri, nextLink, options },
      listByProvisionedClusterNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByProvisionedClusterOperationSpec: coreClient.OperationSpec = {
  path:
    "/{resourceUri}/providers/Microsoft.HybridContainerService/provisionedClusterInstances/default/hybridIdentityMetadata",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HybridIdentityMetadataListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.resourceUri],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/{resourceUri}/providers/Microsoft.HybridContainerService/provisionedClusterInstances/default/hybridIdentityMetadata/default",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HybridIdentityMetadata
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.resourceUri],
  headerParameters: [Parameters.accept],
  serializer
};
const putOperationSpec: coreClient.OperationSpec = {
  path:
    "/{resourceUri}/providers/Microsoft.HybridContainerService/provisionedClusterInstances/default/hybridIdentityMetadata/default",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.HybridIdentityMetadata
    },
    201: {
      bodyMapper: Mappers.HybridIdentityMetadata
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.resource4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.resourceUri],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/{resourceUri}/providers/Microsoft.HybridContainerService/provisionedClusterInstances/default/hybridIdentityMetadata/default",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.HybridIdentityMetadataDeleteHeaders
    },
    201: {
      headersMapper: Mappers.HybridIdentityMetadataDeleteHeaders
    },
    202: {
      headersMapper: Mappers.HybridIdentityMetadataDeleteHeaders
    },
    204: {
      headersMapper: Mappers.HybridIdentityMetadataDeleteHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.resourceUri],
  headerParameters: [Parameters.accept],
  serializer
};
const listByProvisionedClusterNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HybridIdentityMetadataListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.resourceUri,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
