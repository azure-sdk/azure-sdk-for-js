/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { AzureLargeInstances } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureLargeInstance } from "../azureLargeInstance";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  AzureLargeInstance,
  AzureLargeInstancesListBySubscriptionNextOptionalParams,
  AzureLargeInstancesListBySubscriptionOptionalParams,
  AzureLargeInstancesListBySubscriptionResponse,
  AzureLargeInstancesListByResourceGroupNextOptionalParams,
  AzureLargeInstancesListByResourceGroupOptionalParams,
  AzureLargeInstancesListByResourceGroupResponse,
  AzureLargeInstancesGetOptionalParams,
  AzureLargeInstancesGetResponse,
  AzureLargeInstanceTagsUpdate,
  AzureLargeInstancesUpdateOptionalParams,
  AzureLargeInstancesUpdateResponse,
  ForceState,
  AzureLargeInstancesRestartOptionalParams,
  AzureLargeInstancesRestartResponse,
  AzureLargeInstancesShutdownOptionalParams,
  AzureLargeInstancesShutdownResponse,
  AzureLargeInstancesStartOptionalParams,
  AzureLargeInstancesStartResponse,
  AzureLargeInstancesListBySubscriptionNextResponse,
  AzureLargeInstancesListByResourceGroupNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing AzureLargeInstances operations. */
export class AzureLargeInstancesImpl implements AzureLargeInstances {
  private readonly client: AzureLargeInstance;

  /**
   * Initialize a new instance of the class AzureLargeInstances class.
   * @param client Reference to the service client
   */
  constructor(client: AzureLargeInstance) {
    this.client = client;
  }

  /**
   * Gets a list of Azure Large Instances in the specified subscription. The operations returns various
   * properties of each Azure Large Instance.
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: AzureLargeInstancesListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<AzureLargeInstance> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionPagingPage(options, settings);
      }
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: AzureLargeInstancesListBySubscriptionOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<AzureLargeInstance[]> {
    let result: AzureLargeInstancesListBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySubscription(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySubscriptionPagingAll(
    options?: AzureLargeInstancesListBySubscriptionOptionalParams
  ): AsyncIterableIterator<AzureLargeInstance> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Gets a list of Azure Large Instances in the specified subscription and resource group. The
   * operations returns various properties of each Azure Large Instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: AzureLargeInstancesListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<AzureLargeInstance> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByResourceGroupPagingPage(
          resourceGroupName,
          options,
          settings
        );
      }
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: AzureLargeInstancesListByResourceGroupOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<AzureLargeInstance[]> {
    let result: AzureLargeInstancesListByResourceGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByResourceGroup(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: AzureLargeInstancesListByResourceGroupOptionalParams
  ): AsyncIterableIterator<AzureLargeInstance> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets a list of Azure Large Instances in the specified subscription. The operations returns various
   * properties of each Azure Large Instance.
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: AzureLargeInstancesListBySubscriptionOptionalParams
  ): Promise<AzureLargeInstancesListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec
    );
  }

  /**
   * Gets a list of Azure Large Instances in the specified subscription and resource group. The
   * operations returns various properties of each Azure Large Instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: AzureLargeInstancesListByResourceGroupOptionalParams
  ): Promise<AzureLargeInstancesListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec
    );
  }

  /**
   * Gets an Azure Large Instance for the specified subscription, resource group, and instance name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param azureLargeInstanceName Name of the AzureLargeInstance.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    azureLargeInstanceName: string,
    options?: AzureLargeInstancesGetOptionalParams
  ): Promise<AzureLargeInstancesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, azureLargeInstanceName, options },
      getOperationSpec
    );
  }

  /**
   * Patches the Tags field of an Azure Large Instance for the specified subscription, resource group,
   * and instance name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param azureLargeInstanceName Name of the AzureLargeInstance.
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    azureLargeInstanceName: string,
    properties: AzureLargeInstanceTagsUpdate,
    options?: AzureLargeInstancesUpdateOptionalParams
  ): Promise<AzureLargeInstancesUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, azureLargeInstanceName, properties, options },
      updateOperationSpec
    );
  }

  /**
   * The operation to restart an Azure Large Instance (only for compute instances)
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param azureLargeInstanceName Name of the AzureLargeInstance.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginRestart(
    resourceGroupName: string,
    azureLargeInstanceName: string,
    body: ForceState,
    options?: AzureLargeInstancesRestartOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<AzureLargeInstancesRestartResponse>,
      AzureLargeInstancesRestartResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<AzureLargeInstancesRestartResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, azureLargeInstanceName, body, options },
      spec: restartOperationSpec
    });
    const poller = await createHttpPoller<
      AzureLargeInstancesRestartResponse,
      OperationState<AzureLargeInstancesRestartResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * The operation to restart an Azure Large Instance (only for compute instances)
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param azureLargeInstanceName Name of the AzureLargeInstance.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginRestartAndWait(
    resourceGroupName: string,
    azureLargeInstanceName: string,
    body: ForceState,
    options?: AzureLargeInstancesRestartOptionalParams
  ): Promise<AzureLargeInstancesRestartResponse> {
    const poller = await this.beginRestart(
      resourceGroupName,
      azureLargeInstanceName,
      body,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * The operation to shutdown an Azure Large Instance (only for compute instances)
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param azureLargeInstanceName Name of the AzureLargeInstance.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginShutdown(
    resourceGroupName: string,
    azureLargeInstanceName: string,
    body: Record<string, unknown>,
    options?: AzureLargeInstancesShutdownOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<AzureLargeInstancesShutdownResponse>,
      AzureLargeInstancesShutdownResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<AzureLargeInstancesShutdownResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, azureLargeInstanceName, body, options },
      spec: shutdownOperationSpec
    });
    const poller = await createHttpPoller<
      AzureLargeInstancesShutdownResponse,
      OperationState<AzureLargeInstancesShutdownResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * The operation to shutdown an Azure Large Instance (only for compute instances)
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param azureLargeInstanceName Name of the AzureLargeInstance.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginShutdownAndWait(
    resourceGroupName: string,
    azureLargeInstanceName: string,
    body: Record<string, unknown>,
    options?: AzureLargeInstancesShutdownOptionalParams
  ): Promise<AzureLargeInstancesShutdownResponse> {
    const poller = await this.beginShutdown(
      resourceGroupName,
      azureLargeInstanceName,
      body,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * The operation to start an Azure Large Instance (only for compute instances)
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param azureLargeInstanceName Name of the AzureLargeInstance.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginStart(
    resourceGroupName: string,
    azureLargeInstanceName: string,
    body: Record<string, unknown>,
    options?: AzureLargeInstancesStartOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<AzureLargeInstancesStartResponse>,
      AzureLargeInstancesStartResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<AzureLargeInstancesStartResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, azureLargeInstanceName, body, options },
      spec: startOperationSpec
    });
    const poller = await createHttpPoller<
      AzureLargeInstancesStartResponse,
      OperationState<AzureLargeInstancesStartResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * The operation to start an Azure Large Instance (only for compute instances)
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param azureLargeInstanceName Name of the AzureLargeInstance.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginStartAndWait(
    resourceGroupName: string,
    azureLargeInstanceName: string,
    body: Record<string, unknown>,
    options?: AzureLargeInstancesStartOptionalParams
  ): Promise<AzureLargeInstancesStartResponse> {
    const poller = await this.beginStart(
      resourceGroupName,
      azureLargeInstanceName,
      body,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: AzureLargeInstancesListBySubscriptionNextOptionalParams
  ): Promise<AzureLargeInstancesListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: AzureLargeInstancesListByResourceGroupNextOptionalParams
  ): Promise<AzureLargeInstancesListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.AzureLargeInstance/azureLargeInstances",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AzureLargeInstanceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureLargeInstance/azureLargeInstances",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AzureLargeInstanceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureLargeInstance/azureLargeInstances/{azureLargeInstanceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AzureLargeInstance
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.azureLargeInstanceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureLargeInstance/azureLargeInstances/{azureLargeInstanceName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.AzureLargeInstance
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.properties,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.azureLargeInstanceName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const restartOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureLargeInstance/azureLargeInstances/{azureLargeInstanceName}/restart",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatusResult
    },
    201: {
      bodyMapper: Mappers.OperationStatusResult
    },
    202: {
      bodyMapper: Mappers.OperationStatusResult
    },
    204: {
      bodyMapper: Mappers.OperationStatusResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.azureLargeInstanceName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const shutdownOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureLargeInstance/azureLargeInstances/{azureLargeInstanceName}/shutdown",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatusResult
    },
    201: {
      bodyMapper: Mappers.OperationStatusResult
    },
    202: {
      bodyMapper: Mappers.OperationStatusResult
    },
    204: {
      bodyMapper: Mappers.OperationStatusResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.azureLargeInstanceName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const startOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureLargeInstance/azureLargeInstances/{azureLargeInstanceName}/start",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatusResult
    },
    201: {
      bodyMapper: Mappers.OperationStatusResult
    },
    202: {
      bodyMapper: Mappers.OperationStatusResult
    },
    204: {
      bodyMapper: Mappers.OperationStatusResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.azureLargeInstanceName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AzureLargeInstanceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AzureLargeInstanceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
