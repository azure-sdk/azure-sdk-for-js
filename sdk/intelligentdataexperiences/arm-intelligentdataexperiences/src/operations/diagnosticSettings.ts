/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { DiagnosticSettings } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { Aadcustomsecurityattributesdiagnosticsettings } from "../aadcustomsecurityattributesdiagnosticsettings";
import {
  DiagnosticSettingsListOptionalParams,
  DiagnosticSettingsListResponse,
  DiagnosticSettingsGetOptionalParams,
  DiagnosticSettingsGetResponse,
  DiagnosticSettingsResource,
  DiagnosticSettingsCreateOrUpdateOptionalParams,
  DiagnosticSettingsCreateOrUpdateResponse,
  DiagnosticSettingsDeleteOptionalParams
} from "../models";

/** Class containing DiagnosticSettings operations. */
export class DiagnosticSettingsImpl implements DiagnosticSettings {
  private readonly client: Aadcustomsecurityattributesdiagnosticsettings;

  /**
   * Initialize a new instance of the class DiagnosticSettings class.
   * @param client Reference to the service client
   */
  constructor(client: Aadcustomsecurityattributesdiagnosticsettings) {
    this.client = client;
  }

  /**
   * Gets the active diagnostic settings list for AadCustomSecurityAttributesDiagnosticSettings.
   * @param options The options parameters.
   */
  list(
    options?: DiagnosticSettingsListOptionalParams
  ): Promise<DiagnosticSettingsListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * Gets the active diagnostic setting for AadCustomSecurityAttributesDiagnosticSettings.
   * @param diagnosticSettingName The name of the diagnostic setting.
   * @param options The options parameters.
   */
  get(
    diagnosticSettingName: string,
    options?: DiagnosticSettingsGetOptionalParams
  ): Promise<DiagnosticSettingsGetResponse> {
    return this.client.sendOperationRequest(
      { diagnosticSettingName, options },
      getOperationSpec
    );
  }

  /**
   * Creates or updates diagnostic settings for AadCustomSecurityAttributesDiagnosticSettings.
   * @param diagnosticSettingName The name of the diagnostic setting.
   * @param parameters Parameters supplied to the operation.
   * @param options The options parameters.
   */
  createOrUpdate(
    diagnosticSettingName: string,
    parameters: DiagnosticSettingsResource,
    options?: DiagnosticSettingsCreateOrUpdateOptionalParams
  ): Promise<DiagnosticSettingsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { diagnosticSettingName, parameters, options },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Deletes existing diagnostic setting for AadCustomSecurityAttributesDiagnosticSettings.
   * @param diagnosticSettingName The name of the diagnostic setting.
   * @param options The options parameters.
   */
  delete(
    diagnosticSettingName: string,
    options?: DiagnosticSettingsDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { diagnosticSettingName, options },
      deleteOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.AadCustomSecurityAttributesDiagnosticSettings/diagnosticSettings",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DiagnosticSettingsResourceCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.AadCustomSecurityAttributesDiagnosticSettings/diagnosticSettings/{diagnosticSettingName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DiagnosticSettingsResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.diagnosticSettingName],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.AadCustomSecurityAttributesDiagnosticSettings/diagnosticSettings/{diagnosticSettingName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.DiagnosticSettingsResource
    },
    201: {
      bodyMapper: Mappers.DiagnosticSettingsResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.diagnosticSettingName],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.AadCustomSecurityAttributesDiagnosticSettings/diagnosticSettings/{diagnosticSettingName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.diagnosticSettingName],
  headerParameters: [Parameters.accept],
  serializer
};
