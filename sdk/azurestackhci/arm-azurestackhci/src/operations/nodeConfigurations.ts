/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { NodeConfigurations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureStackHCIClient } from "../azureStackHCIClient";
import {
  NodeConfigurationResources,
  NodeConfigurationsValidateOptionalParams
} from "../models";

/** Class containing NodeConfigurations operations. */
export class NodeConfigurationsImpl implements NodeConfigurations {
  private readonly client: AzureStackHCIClient;

  /**
   * Initialize a new instance of the class NodeConfigurations class.
   * @param client Reference to the service client
   */
  constructor(client: AzureStackHCIClient) {
    this.client = client;
  }

  /**
   * Validate the Node Configuration Resources
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   *                    connected.
   * @param nodeConfigurationName The name of the node configuration resource
   * @param nodeConfigurationResources The list of node Configuration Resources.
   * @param options The options parameters.
   */
  validate(
    resourceUri: string,
    nodeConfigurationName: string,
    nodeConfigurationResources: NodeConfigurationResources,
    options?: NodeConfigurationsValidateOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      {
        resourceUri,
        nodeConfigurationName,
        nodeConfigurationResources,
        options
      },
      validateOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const validateOperationSpec: coreClient.OperationSpec = {
  path:
    "/{resourceUri}/providers/Microsoft.AzureStackHCI/nodeConfigurations/{nodeConfigurationName}/validate",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponseAutoGenerated
    }
  },
  requestBody: Parameters.nodeConfigurationResources,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceUri,
    Parameters.nodeConfigurationName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
