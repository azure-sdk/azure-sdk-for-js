/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { EdgeDeviceJobs } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { AzureStackHCIClient } from "../azureStackHCIClient.js";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl.js";
import {
  EdgeDeviceJobUnion,
  EdgeDeviceJobsListByEdgeDeviceNextOptionalParams,
  EdgeDeviceJobsListByEdgeDeviceOptionalParams,
  EdgeDeviceJobsListByEdgeDeviceResponse,
  EdgeDeviceJobsGetOptionalParams,
  EdgeDeviceJobsGetResponse,
  EdgeDeviceJobsCreateOrUpdateOptionalParams,
  EdgeDeviceJobsCreateOrUpdateResponse,
  EdgeDeviceJobsDeleteOptionalParams,
  EdgeDeviceJobsDeleteResponse,
  EdgeDeviceJobsListByEdgeDeviceNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing EdgeDeviceJobs operations. */
export class EdgeDeviceJobsImpl implements EdgeDeviceJobs {
  private readonly client: AzureStackHCIClient;

  /**
   * Initialize a new instance of the class EdgeDeviceJobs class.
   * @param client Reference to the service client
   */
  constructor(client: AzureStackHCIClient) {
    this.client = client;
  }

  /**
   * List EdgeDeviceJob resources by EdgeDevice
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param edgeDeviceName The name of the EdgeDevice
   * @param options The options parameters.
   */
  public listByEdgeDevice(
    resourceUri: string,
    edgeDeviceName: string,
    options?: EdgeDeviceJobsListByEdgeDeviceOptionalParams,
  ): PagedAsyncIterableIterator<EdgeDeviceJobUnion> {
    const iter = this.listByEdgeDevicePagingAll(
      resourceUri,
      edgeDeviceName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByEdgeDevicePagingPage(
          resourceUri,
          edgeDeviceName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByEdgeDevicePagingPage(
    resourceUri: string,
    edgeDeviceName: string,
    options?: EdgeDeviceJobsListByEdgeDeviceOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<EdgeDeviceJobUnion[]> {
    let result: EdgeDeviceJobsListByEdgeDeviceResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByEdgeDevice(
        resourceUri,
        edgeDeviceName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByEdgeDeviceNext(
        resourceUri,
        edgeDeviceName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByEdgeDevicePagingAll(
    resourceUri: string,
    edgeDeviceName: string,
    options?: EdgeDeviceJobsListByEdgeDeviceOptionalParams,
  ): AsyncIterableIterator<EdgeDeviceJobUnion> {
    for await (const page of this.listByEdgeDevicePagingPage(
      resourceUri,
      edgeDeviceName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List EdgeDeviceJob resources by EdgeDevice
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param edgeDeviceName The name of the EdgeDevice
   * @param options The options parameters.
   */
  private _listByEdgeDevice(
    resourceUri: string,
    edgeDeviceName: string,
    options?: EdgeDeviceJobsListByEdgeDeviceOptionalParams,
  ): Promise<EdgeDeviceJobsListByEdgeDeviceResponse> {
    return this.client.sendOperationRequest(
      { resourceUri, edgeDeviceName, options },
      listByEdgeDeviceOperationSpec,
    );
  }

  /**
   * Get a EdgeDeviceJob
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param edgeDeviceName The name of the EdgeDevice
   * @param jobsName Name of EdgeDevice Job
   * @param options The options parameters.
   */
  get(
    resourceUri: string,
    edgeDeviceName: string,
    jobsName: string,
    options?: EdgeDeviceJobsGetOptionalParams,
  ): Promise<EdgeDeviceJobsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceUri, edgeDeviceName, jobsName, options },
      getOperationSpec,
    );
  }

  /**
   * Create a EdgeDeviceJob
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param edgeDeviceName The name of the EdgeDevice
   * @param jobsName Name of EdgeDevice Job
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceUri: string,
    edgeDeviceName: string,
    jobsName: string,
    resource: EdgeDeviceJobUnion,
    options?: EdgeDeviceJobsCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<EdgeDeviceJobsCreateOrUpdateResponse>,
      EdgeDeviceJobsCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<EdgeDeviceJobsCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceUri, edgeDeviceName, jobsName, resource, options },
      spec: createOrUpdateOperationSpec,
    });
    const poller = await createHttpPoller<
      EdgeDeviceJobsCreateOrUpdateResponse,
      OperationState<EdgeDeviceJobsCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create a EdgeDeviceJob
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param edgeDeviceName The name of the EdgeDevice
   * @param jobsName Name of EdgeDevice Job
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceUri: string,
    edgeDeviceName: string,
    jobsName: string,
    resource: EdgeDeviceJobUnion,
    options?: EdgeDeviceJobsCreateOrUpdateOptionalParams,
  ): Promise<EdgeDeviceJobsCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceUri,
      edgeDeviceName,
      jobsName,
      resource,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Delete a EdgeDeviceJob
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param edgeDeviceName The name of the EdgeDevice
   * @param jobsName Name of EdgeDevice Job
   * @param options The options parameters.
   */
  async beginDelete(
    resourceUri: string,
    edgeDeviceName: string,
    jobsName: string,
    options?: EdgeDeviceJobsDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<EdgeDeviceJobsDeleteResponse>,
      EdgeDeviceJobsDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<EdgeDeviceJobsDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceUri, edgeDeviceName, jobsName, options },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<
      EdgeDeviceJobsDeleteResponse,
      OperationState<EdgeDeviceJobsDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete a EdgeDeviceJob
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param edgeDeviceName The name of the EdgeDevice
   * @param jobsName Name of EdgeDevice Job
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceUri: string,
    edgeDeviceName: string,
    jobsName: string,
    options?: EdgeDeviceJobsDeleteOptionalParams,
  ): Promise<EdgeDeviceJobsDeleteResponse> {
    const poller = await this.beginDelete(
      resourceUri,
      edgeDeviceName,
      jobsName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * ListByEdgeDeviceNext
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param edgeDeviceName The name of the EdgeDevice
   * @param nextLink The nextLink from the previous successful call to the ListByEdgeDevice method.
   * @param options The options parameters.
   */
  private _listByEdgeDeviceNext(
    resourceUri: string,
    edgeDeviceName: string,
    nextLink: string,
    options?: EdgeDeviceJobsListByEdgeDeviceNextOptionalParams,
  ): Promise<EdgeDeviceJobsListByEdgeDeviceNextResponse> {
    return this.client.sendOperationRequest(
      { resourceUri, edgeDeviceName, nextLink, options },
      listByEdgeDeviceNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByEdgeDeviceOperationSpec: coreClient.OperationSpec = {
  path: "/{resourceUri}/providers/Microsoft.AzureStackHCI/edgeDevices/{edgeDeviceName}/jobs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EdgeDeviceJobListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceUri,
    Parameters.edgeDeviceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/{resourceUri}/providers/Microsoft.AzureStackHCI/edgeDevices/{edgeDeviceName}/jobs/{jobsName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EdgeDeviceJob,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceUri,
    Parameters.edgeDeviceName,
    Parameters.jobsName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/{resourceUri}/providers/Microsoft.AzureStackHCI/edgeDevices/{edgeDeviceName}/jobs/{jobsName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.EdgeDeviceJob,
    },
    201: {
      bodyMapper: Mappers.EdgeDeviceJob,
    },
    202: {
      bodyMapper: Mappers.EdgeDeviceJob,
    },
    204: {
      bodyMapper: Mappers.EdgeDeviceJob,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.resource1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceUri,
    Parameters.edgeDeviceName,
    Parameters.jobsName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/{resourceUri}/providers/Microsoft.AzureStackHCI/edgeDevices/{edgeDeviceName}/jobs/{jobsName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.EdgeDeviceJobsDeleteHeaders,
    },
    201: {
      headersMapper: Mappers.EdgeDeviceJobsDeleteHeaders,
    },
    202: {
      headersMapper: Mappers.EdgeDeviceJobsDeleteHeaders,
    },
    204: {
      headersMapper: Mappers.EdgeDeviceJobsDeleteHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceUri,
    Parameters.edgeDeviceName,
    Parameters.jobsName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByEdgeDeviceNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EdgeDeviceJobListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.resourceUri,
    Parameters.edgeDeviceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
