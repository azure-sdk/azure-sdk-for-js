/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { HybridIdentityMetadataOperations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MicrosoftAzureStackHCI } from "../microsoftAzureStackHCI";
import {
  HybridIdentityMetadata,
  HybridIdentityMetadataListByVirtualMachineInstanceNextOptionalParams,
  HybridIdentityMetadataListByVirtualMachineInstanceOptionalParams,
  HybridIdentityMetadataListByVirtualMachineInstanceResponse,
  HybridIdentityMetadataGetOptionalParams,
  HybridIdentityMetadataGetResponse,
  HybridIdentityMetadataListByVirtualMachineInstanceNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing HybridIdentityMetadataOperations operations. */
export class HybridIdentityMetadataOperationsImpl
  implements HybridIdentityMetadataOperations
{
  private readonly client: MicrosoftAzureStackHCI;

  /**
   * Initialize a new instance of the class HybridIdentityMetadataOperations class.
   * @param client Reference to the service client
   */
  constructor(client: MicrosoftAzureStackHCI) {
    this.client = client;
  }

  /**
   * Returns the list of HybridIdentityMetadata of the given vm.
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param options The options parameters.
   */
  public listByVirtualMachineInstance(
    resourceUri: string,
    options?: HybridIdentityMetadataListByVirtualMachineInstanceOptionalParams,
  ): PagedAsyncIterableIterator<HybridIdentityMetadata> {
    const iter = this.listByVirtualMachineInstancePagingAll(
      resourceUri,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByVirtualMachineInstancePagingPage(
          resourceUri,
          options,
          settings,
        );
      },
    };
  }

  private async *listByVirtualMachineInstancePagingPage(
    resourceUri: string,
    options?: HybridIdentityMetadataListByVirtualMachineInstanceOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<HybridIdentityMetadata[]> {
    let result: HybridIdentityMetadataListByVirtualMachineInstanceResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByVirtualMachineInstance(resourceUri, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByVirtualMachineInstanceNext(
        resourceUri,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByVirtualMachineInstancePagingAll(
    resourceUri: string,
    options?: HybridIdentityMetadataListByVirtualMachineInstanceOptionalParams,
  ): AsyncIterableIterator<HybridIdentityMetadata> {
    for await (const page of this.listByVirtualMachineInstancePagingPage(
      resourceUri,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Returns the list of HybridIdentityMetadata of the given vm.
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param options The options parameters.
   */
  private _listByVirtualMachineInstance(
    resourceUri: string,
    options?: HybridIdentityMetadataListByVirtualMachineInstanceOptionalParams,
  ): Promise<HybridIdentityMetadataListByVirtualMachineInstanceResponse> {
    return this.client.sendOperationRequest(
      { resourceUri, options },
      listByVirtualMachineInstanceOperationSpec,
    );
  }

  /**
   * Implements HybridIdentityMetadata GET method.
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param options The options parameters.
   */
  get(
    resourceUri: string,
    options?: HybridIdentityMetadataGetOptionalParams,
  ): Promise<HybridIdentityMetadataGetResponse> {
    return this.client.sendOperationRequest(
      { resourceUri, options },
      getOperationSpec,
    );
  }

  /**
   * ListByVirtualMachineInstanceNext
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param nextLink The nextLink from the previous successful call to the ListByVirtualMachineInstance
   *                 method.
   * @param options The options parameters.
   */
  private _listByVirtualMachineInstanceNext(
    resourceUri: string,
    nextLink: string,
    options?: HybridIdentityMetadataListByVirtualMachineInstanceNextOptionalParams,
  ): Promise<HybridIdentityMetadataListByVirtualMachineInstanceNextResponse> {
    return this.client.sendOperationRequest(
      { resourceUri, nextLink, options },
      listByVirtualMachineInstanceNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByVirtualMachineInstanceOperationSpec: coreClient.OperationSpec = {
  path: "/{resourceUri}/providers/Microsoft.AzureStackHCI/virtualMachineInstances/default/hybridIdentityMetadata",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HybridIdentityMetadataListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.resourceUri],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/{resourceUri}/providers/Microsoft.AzureStackHCI/virtualMachineInstances/default/hybridIdentityMetadata/default",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HybridIdentityMetadata,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.resourceUri],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByVirtualMachineInstanceNextOperationSpec: coreClient.OperationSpec =
  {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
      200: {
        bodyMapper: Mappers.HybridIdentityMetadataListResult,
      },
      default: {
        bodyMapper: Mappers.ErrorResponse,
      },
    },
    urlParameters: [
      Parameters.$host,
      Parameters.resourceUri,
      Parameters.nextLink,
    ],
    headerParameters: [Parameters.accept],
    serializer,
  };
