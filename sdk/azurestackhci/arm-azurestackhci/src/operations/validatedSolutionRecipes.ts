/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { ValidatedSolutionRecipes } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { AzureStackHCIClient } from "../azureStackHCIClient.js";
import {
  ValidatedSolutionRecipe,
  ValidatedSolutionRecipesListBySubscriptionLocationResourceNextOptionalParams,
  ValidatedSolutionRecipesListBySubscriptionLocationResourceOptionalParams,
  ValidatedSolutionRecipesListBySubscriptionLocationResourceResponse,
  ValidatedSolutionRecipesGetOptionalParams,
  ValidatedSolutionRecipesGetResponse,
  ValidatedSolutionRecipesListBySubscriptionLocationResourceNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing ValidatedSolutionRecipes operations. */
export class ValidatedSolutionRecipesImpl implements ValidatedSolutionRecipes {
  private readonly client: AzureStackHCIClient;

  /**
   * Initialize a new instance of the class ValidatedSolutionRecipes class.
   * @param client Reference to the service client
   */
  constructor(client: AzureStackHCIClient) {
    this.client = client;
  }

  /**
   * List all validated solution recipes.
   * @param location The name of the Azure region.
   * @param options The options parameters.
   */
  public listBySubscriptionLocationResource(
    location: string,
    options?: ValidatedSolutionRecipesListBySubscriptionLocationResourceOptionalParams,
  ): PagedAsyncIterableIterator<ValidatedSolutionRecipe> {
    const iter = this.listBySubscriptionLocationResourcePagingAll(
      location,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionLocationResourcePagingPage(
          location,
          options,
          settings,
        );
      },
    };
  }

  private async *listBySubscriptionLocationResourcePagingPage(
    location: string,
    options?: ValidatedSolutionRecipesListBySubscriptionLocationResourceOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<ValidatedSolutionRecipe[]> {
    let result: ValidatedSolutionRecipesListBySubscriptionLocationResourceResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySubscriptionLocationResource(
        location,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySubscriptionLocationResourceNext(
        location,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySubscriptionLocationResourcePagingAll(
    location: string,
    options?: ValidatedSolutionRecipesListBySubscriptionLocationResourceOptionalParams,
  ): AsyncIterableIterator<ValidatedSolutionRecipe> {
    for await (const page of this.listBySubscriptionLocationResourcePagingPage(
      location,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List all validated solution recipes.
   * @param location The name of the Azure region.
   * @param options The options parameters.
   */
  private _listBySubscriptionLocationResource(
    location: string,
    options?: ValidatedSolutionRecipesListBySubscriptionLocationResourceOptionalParams,
  ): Promise<ValidatedSolutionRecipesListBySubscriptionLocationResourceResponse> {
    return this.client.sendOperationRequest(
      { location, options },
      listBySubscriptionLocationResourceOperationSpec,
    );
  }

  /**
   * Get a validated solution recipe.
   * @param location The name of the Azure region.
   * @param validatedSolutionRecipeName The name of the ValidatedSolutionRecipe
   * @param options The options parameters.
   */
  get(
    location: string,
    validatedSolutionRecipeName: string,
    options?: ValidatedSolutionRecipesGetOptionalParams,
  ): Promise<ValidatedSolutionRecipesGetResponse> {
    return this.client.sendOperationRequest(
      { location, validatedSolutionRecipeName, options },
      getOperationSpec,
    );
  }

  /**
   * ListBySubscriptionLocationResourceNext
   * @param location The name of the Azure region.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListBySubscriptionLocationResource method.
   * @param options The options parameters.
   */
  private _listBySubscriptionLocationResourceNext(
    location: string,
    nextLink: string,
    options?: ValidatedSolutionRecipesListBySubscriptionLocationResourceNextOptionalParams,
  ): Promise<ValidatedSolutionRecipesListBySubscriptionLocationResourceNextResponse> {
    return this.client.sendOperationRequest(
      { location, nextLink, options },
      listBySubscriptionLocationResourceNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listBySubscriptionLocationResourceOperationSpec: coreClient.OperationSpec =
  {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.AzureStackHCI/locations/{location}/validatedSolutionRecipes",
    httpMethod: "GET",
    responses: {
      200: {
        bodyMapper: Mappers.ValidatedSolutionRecipeListResult,
      },
      default: {
        bodyMapper: Mappers.ErrorResponse,
      },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
      Parameters.$host,
      Parameters.subscriptionId,
      Parameters.location,
    ],
    headerParameters: [Parameters.accept],
    serializer,
  };
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.AzureStackHCI/locations/{location}/validatedSolutionRecipes/{validatedSolutionRecipeName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ValidatedSolutionRecipe,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
    Parameters.validatedSolutionRecipeName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listBySubscriptionLocationResourceNextOperationSpec: coreClient.OperationSpec =
  {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
      200: {
        bodyMapper: Mappers.ValidatedSolutionRecipeListResult,
      },
      default: {
        bodyMapper: Mappers.ErrorResponse,
      },
    },
    urlParameters: [
      Parameters.$host,
      Parameters.subscriptionId,
      Parameters.nextLink,
      Parameters.location,
    ],
    headerParameters: [Parameters.accept],
    serializer,
  };
