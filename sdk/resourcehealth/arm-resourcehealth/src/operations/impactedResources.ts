/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { ImpactedResources } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MicrosoftResourceHealth } from "../microsoftResourceHealth";
import {
  EventImpactedResource,
  ImpactedResourcesListBySubscriptionIdAndEventIdNextOptionalParams,
  ImpactedResourcesListBySubscriptionIdAndEventIdOptionalParams,
  ImpactedResourcesListBySubscriptionIdAndEventIdResponse,
  ImpactedResourcesGetOptionalParams,
  ImpactedResourcesGetResponse,
  ImpactedResourcesListBySubscriptionIdAndEventIdNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ImpactedResources operations. */
export class ImpactedResourcesImpl implements ImpactedResources {
  private readonly client: MicrosoftResourceHealth;

  /**
   * Initialize a new instance of the class ImpactedResources class.
   * @param client Reference to the service client
   */
  constructor(client: MicrosoftResourceHealth) {
    this.client = client;
  }

  /**
   * Lists impacted resources in the subscription by an event.
   * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
   * @param options The options parameters.
   */
  public listBySubscriptionIdAndEventId(
    eventTrackingId: string,
    options?: ImpactedResourcesListBySubscriptionIdAndEventIdOptionalParams
  ): PagedAsyncIterableIterator<EventImpactedResource> {
    const iter = this.listBySubscriptionIdAndEventIdPagingAll(
      eventTrackingId,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionIdAndEventIdPagingPage(
          eventTrackingId,
          options,
          settings
        );
      }
    };
  }

  private async *listBySubscriptionIdAndEventIdPagingPage(
    eventTrackingId: string,
    options?: ImpactedResourcesListBySubscriptionIdAndEventIdOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<EventImpactedResource[]> {
    let result: ImpactedResourcesListBySubscriptionIdAndEventIdResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySubscriptionIdAndEventId(
        eventTrackingId,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySubscriptionIdAndEventIdNext(
        eventTrackingId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySubscriptionIdAndEventIdPagingAll(
    eventTrackingId: string,
    options?: ImpactedResourcesListBySubscriptionIdAndEventIdOptionalParams
  ): AsyncIterableIterator<EventImpactedResource> {
    for await (const page of this.listBySubscriptionIdAndEventIdPagingPage(
      eventTrackingId,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists impacted resources in the subscription by an event.
   * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
   * @param options The options parameters.
   */
  private _listBySubscriptionIdAndEventId(
    eventTrackingId: string,
    options?: ImpactedResourcesListBySubscriptionIdAndEventIdOptionalParams
  ): Promise<ImpactedResourcesListBySubscriptionIdAndEventIdResponse> {
    return this.client.sendOperationRequest(
      { eventTrackingId, options },
      listBySubscriptionIdAndEventIdOperationSpec
    );
  }

  /**
   * Gets the specific impacted resource in the subscription by an event.
   * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
   * @param impactedResourceName Name of the Impacted Resource.
   * @param options The options parameters.
   */
  get(
    eventTrackingId: string,
    impactedResourceName: string,
    options?: ImpactedResourcesGetOptionalParams
  ): Promise<ImpactedResourcesGetResponse> {
    return this.client.sendOperationRequest(
      { eventTrackingId, impactedResourceName, options },
      getOperationSpec
    );
  }

  /**
   * ListBySubscriptionIdAndEventIdNext
   * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
   * @param nextLink The nextLink from the previous successful call to the ListBySubscriptionIdAndEventId
   *                 method.
   * @param options The options parameters.
   */
  private _listBySubscriptionIdAndEventIdNext(
    eventTrackingId: string,
    nextLink: string,
    options?: ImpactedResourcesListBySubscriptionIdAndEventIdNextOptionalParams
  ): Promise<ImpactedResourcesListBySubscriptionIdAndEventIdNextResponse> {
    return this.client.sendOperationRequest(
      { eventTrackingId, nextLink, options },
      listBySubscriptionIdAndEventIdNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listBySubscriptionIdAndEventIdOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.ResourceHealth/events/{eventTrackingId}/impactedResources",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventImpactedResourceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.eventTrackingId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.ResourceHealth/events/{eventTrackingId}/impactedResources/{impactedResourceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventImpactedResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.eventTrackingId,
    Parameters.impactedResourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionIdAndEventIdNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventImpactedResourceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.eventTrackingId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
