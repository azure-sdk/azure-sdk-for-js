/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** ProfessionalService REST API resource definition. */
export interface ProfessionalServiceResource {
  /** ProfessionalService properties */
  properties?: ProfessionalServiceResourceProperties;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The resource uri
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Resource type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** the resource tags. */
  tags?: { [propertyName: string]: string };
}

/** ProfessionalService resource properties */
export interface ProfessionalServiceProperties {
  /** The ProfessionalService Subscription Status. */
  status?: ProfessionalServiceResourceStatus;
  /** The current Term object. */
  term?: ProfessionalServicePropertiesTerm;
  /** Whether the current term is a Free Trial term */
  isFreeTrial?: boolean;
  /**
   * The created date of this resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly created?: string;
  /** The last modifier date if this resource. */
  lastModified?: string;
}

/** The current Term object. */
export interface ProfessionalServicePropertiesTerm {
  /** The unit indicating Monthly / Yearly */
  termUnit?: string;
  /** The start date of the current term */
  startDate?: string;
  /** The end date of the current term */
  endDate?: string;
}

/** properties for creation ProfessionalService */
export interface ProfessionalServiceCreationProperties {
  /** The offer id. */
  offerId?: string;
  /** The publisher id. */
  publisherId?: string;
  /** The seat count. */
  quantity?: number;
  /** The plan id. */
  skuId?: string;
  /** The metadata about the ProfessionalService subscription such as the OrganizationId. */
  paymentChannelMetadata?: { [propertyName: string]: string };
  /** The current Term id. */
  termId?: string;
  /** The quote id which the ProfessionalService will be purchase with. */
  quoteId?: string;
  /** The store front which initiates the purchase. */
  storeFront?: string;
  /** Whether the ProfessionalService subscription will auto renew upon term end. */
  autoRenew?: boolean;
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export interface ErrorResponse {
  /** The error object. */
  error?: ErrorDetail;
}

/** The error detail. */
export interface ErrorDetail {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDetail[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
}

/** ProfessionalService REST API resource definition for creation. */
export interface ProfessionalServiceResourceCreation {
  /**
   * The resource uri
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /** The resource name */
  name?: string;
  /**
   * Resource type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** the resource tags. */
  tags?: { [propertyName: string]: string };
  /** Resource location. Only value allowed for professional service is 'global' */
  location?: string;
  /** Properties of the professional service resource that are relevant for creation. */
  properties?: ProfessionalServiceCreationProperties;
}

/** professional service operation response with continuation. */
export interface ProfessionalServiceRpOperationsResponseWithContinuation {
  /** the next link to query to get the remaining results. */
  nextLink?: string;
  /** the value of response. */
  value?: ProfessionalServiceRpOperation[];
}

/** professional service operations */
export interface ProfessionalServiceRpOperation {
  /** the operation name */
  name?: string;
  /** the operation display */
  display?: ProfessionalServiceRpOperationDisplay;
  /** the operation origin */
  origin?: string;
  /** whether the operation is a data action or not. */
  isDataAction?: boolean;
}

/** professional service operation display */
export interface ProfessionalServiceRpOperationDisplay {
  /** Name of the provider for display purposes */
  provider?: string;
  /** Name of the resource type for display purposes */
  resource?: string;
  /** Name of the operation for display purposes */
  operation?: string;
  /** Description of the operation for display purposes */
  description?: string;
}

/** ProfessionalService resources response with continuation. */
export interface ProfessionalServiceResourceResponseWithContinuation {
  /** the next link to query to get the remaining results. */
  nextLink?: string;
  /** the value of response. */
  value?: ProfessionalServiceResource[];
}

/** ProfessionalService properties */
export interface ProfessionalServiceResourceProperties
  extends ProfessionalServiceProperties,
    ProfessionalServiceCreationProperties {}

/** Defines headers for ProfessionalService_createOrUpdate operation. */
export interface ProfessionalServiceCreateOrUpdateHeaders {
  /** The URL to check the status of the asynchronous operation. */
  location?: string;
  /** The amount of delay to use while the status of the operation is checked. The value is expressed in seconds. */
  retryAfter?: number;
}

/** Defines headers for ProfessionalService_delete operation. */
export interface ProfessionalServiceDeleteHeaders {
  /** The URL to check the status of the asynchronous operation. */
  location?: string;
  /** The amount of delay to use while the status of the operation is checked. The value is expressed in seconds. */
  retryAfter?: number;
}

/** Defines headers for ProfessionalServiceForEnrollment_createOrUpdate operation. */
export interface ProfessionalServiceForEnrollmentCreateOrUpdateHeaders {
  /** The URL to check the status of the asynchronous operation. */
  location?: string;
  /** The amount of delay to use while the status of the operation is checked. The value is expressed in seconds. */
  retryAfter?: number;
}

/** Defines headers for ProfessionalServiceForEnrollment_delete operation. */
export interface ProfessionalServiceForEnrollmentDeleteHeaders {
  /** The URL to check the status of the asynchronous operation. */
  location?: string;
  /** The amount of delay to use while the status of the operation is checked. The value is expressed in seconds. */
  retryAfter?: number;
}

/** Defines headers for ProfessionalServiceOperation_get operation. */
export interface ProfessionalServiceOperationGetHeaders {
  /** The URL to check the status of the asynchronous operation. */
  location?: string;
  /** The amount of delay to use while the status of the operation is checked. The value is expressed in seconds. */
  retryAfter?: number;
}

/** Known values of {@link ProfessionalServiceResourceStatus} that the service accepts. */
export enum KnownProfessionalServiceResourceStatus {
  /** NotStarted */
  NotStarted = "NotStarted",
  /** Subscribed */
  Subscribed = "Subscribed",
  /** Unsubscribed */
  Unsubscribed = "Unsubscribed",
  /** Suspended */
  Suspended = "Suspended"
}

/**
 * Defines values for ProfessionalServiceResourceStatus. \
 * {@link KnownProfessionalServiceResourceStatus} can be used interchangeably with ProfessionalServiceResourceStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotStarted** \
 * **Subscribed** \
 * **Unsubscribed** \
 * **Suspended**
 */
export type ProfessionalServiceResourceStatus = string;

/** Optional parameters. */
export interface GetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type GetResponse = ProfessionalServiceResource;

/** Optional parameters. */
export interface CreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type CreateOrUpdateResponse = ProfessionalServiceResource;

/** Optional parameters. */
export interface DeleteOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ProfessionalServiceForEnrollmentGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ProfessionalServiceForEnrollmentGetResponse = ProfessionalServiceResource;

/** Optional parameters. */
export interface ProfessionalServiceForEnrollmentCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type ProfessionalServiceForEnrollmentCreateOrUpdateResponse = ProfessionalServiceResource;

/** Optional parameters. */
export interface ProfessionalServiceForEnrollmentDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ProfessionalServiceOperationGetOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the get operation. */
export type ProfessionalServiceOperationGetResponse = ProfessionalServiceResource;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = ProfessionalServiceRpOperationsResponseWithContinuation;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = ProfessionalServiceRpOperationsResponseWithContinuation;

/** Optional parameters. */
export interface ProfessionalServiceOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
