/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export type AnalysisResultSingletonResourcePropertiesUnion =
  | AnalysisResultSingletonResourceProperties
  | ScriptExecutionResultSingletonResourceProperties
  | ReliabilityResultSingletonResourceProperties
  | CPUUtilizationResultSingletonResourceProperties
  | MemoryUtilizationResultSingletonResourceProperties
  | CPURegressionResultSingletonResourceProperties
  | MemoryRegressionResultSingletonResourceProperties;

/** A list of Test Base Account SKUs. */
export interface TestBaseAccountSKUListResult {
  /** The list of Test Base Account SKUs. */
  value?: TestBaseAccountSKU[];
  /**
   * Link to the next set of results. Not empty if value contains incomplete list of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Describes a Test Base Account SKU. */
export interface TestBaseAccountSKU {
  /** The type of resource the SKU applies to. */
  resourceType?: string;
  /** The name of the SKU. This is typically a letter + number code, such as B0 or S0. */
  name: string;
  /** The tier of this particular SKU. */
  tier: Tier;
  /**
   * The capabilities of a SKU.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly capabilities?: TestBaseAccountSKUCapability[];
  /** The locations that the SKU is available. */
  locations?: string[];
}

/** Properties of the Test Base Account SKU Capability. */
export interface TestBaseAccountSKUCapability {
  /** An invariant to describe the feature, such as 'SLA'. */
  name: string;
  /** An invariant if the feature is measured by quantity, such as 99.9%. */
  value: string;
}

/** The error response send when an operation fails. */
export interface ErrorResponse {
  /** The error details. */
  error?: ErrorDefinition;
}

/** Error definition. */
export interface ErrorDefinition {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The target of the particular error.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDefinition[];
}

/** A list of Test Base Accounts. */
export interface TestBaseAccountListResult {
  /** The list of Test Base Accounts. */
  value?: TestBaseAccountResource[];
  /**
   * Link to the next set of results. Not empty if value contains incomplete list of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The type of identity that last modified the resource. */
  lastModifiedAt?: Date;
}

/** The Resource definition. */
export interface Resource {
  /**
   * Resource ID.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Resource name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Resource type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
}

/** Parameters supplied to update a Test Base Account. */
export interface TestBaseAccountUpdateParameters {
  /** The tags of the Test Base Account. */
  tags?: { [propertyName: string]: string };
  /** The SKU of the Test Base Account. */
  sku?: TestBaseAccountSKU;
}

/** A list of Test Base Account usage data. */
export interface TestBaseAccountUsageDataList {
  /** The list of Test Base Account usage data. */
  value?: TestBaseAccountUsageData[];
  /**
   * Link to the next set of results. Not empty if value contains incomplete list of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** The usage data of a Test Base Account. */
export interface TestBaseAccountUsageData {
  /** Fully qualified ARM resource id */
  id?: string;
  /** Localizable String object containing the name and a localized value. */
  name?: TestBaseAccountUsageName;
  /** Representing the units of the usage quota. Possible values are: Count, Bytes, Seconds, Percent, CountPerSecond, BytesPerSecond. */
  unit?: string;
  /** The maximum permitted value for the usage quota. If there is no limit, this value will be -1. */
  limit?: number;
  /** Current value for the usage quota. */
  currentValue?: number;
}

/** Localizable String object containing the name and a localized value. */
export interface TestBaseAccountUsageName {
  /** The identifier of the usage. */
  value?: string;
  /** Localized name of the usage. */
  localizedValue?: string;
}

/** The parameters supplied to the Test Base Account GetFileUploadURL action. */
export interface GetFileUploadURLParameters {
  /** The custom file name of the uploaded blob. */
  blobName?: string;
}

/** The URL response */
export interface FileUploadURLResponse {
  /**
   * The URL used for uploading the package.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uploadUrl?: string;
  /**
   * The blob path of the uploaded package. It will be used as the 'blobPath' property of PackageResource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly blobPath?: string;
}

/** A list of available OSs. */
export interface AvailableOSListResult {
  /** The list of available OSs. */
  value?: AvailableOSResource[];
  /**
   * Link to the next set of results. Not empty if value contains incomplete list of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** A list of flighting rings. */
export interface FlightingRingListResult {
  /** The list of flighting rings. */
  value?: FlightingRingResource[];
  /**
   * Link to the next set of results. Not empty if value contains incomplete list of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** A list of test types. */
export interface TestTypeListResult {
  /** The list of test types. */
  value?: TestTypeResource[];
  /**
   * Link to the next set of results. Not empty if value contains incomplete list of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Parameters body to pass for Test Base Package name availability check. */
export interface PackageCheckNameAvailabilityParameters {
  /** Resource name to verify. */
  name: string;
  /** Application name to verify. */
  applicationName: string;
  /** Version name to verify. */
  version: string;
  /** fully qualified resource type which includes provider namespace. */
  type: string;
}

/** Description of a Check Name availability response properties. */
export interface CheckNameAvailabilityResult {
  /** Value indicating the availability of the name: true if the name is available; otherwise, false. */
  nameAvailable?: boolean;
  /** The reason for unavailability of a name. Required if nameAvailable == false. */
  reason?: Reason;
  /**
   * The detailed info regarding the reason associated with the name. Required if nameAvailable == false.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
}

/** A list of Test Base Packages. */
export interface PackageListResult {
  /** The list of Test Base Packages. */
  value?: PackageResource[];
  /**
   * Link to the next set of results. Not empty if value contains incomplete list of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** The information of the target OS to be tested. */
export interface TargetOSInfo {
  /** Specifies the OS update type to test against, e.g., 'Security updates' or 'Feature updates'. */
  osUpdateType: string;
  /** Specifies the target OSs to be tested. */
  targetOSs: string[];
}

/** The validation results. There's validation on package when it's created or updated. */
export interface PackageValidationResult {
  /**
   * Validation name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly validationName?: string;
  /**
   * Indicates whether the package passed the validation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isValid?: boolean;
  /**
   * Error information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly errors?: string[];
}

/** The definition of a Test. */
export interface Test {
  /** The type of the test. */
  testType: TestType;
  /**
   * The status of the validation run of the package.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly validationRunStatus?: ValidationRunStatus;
  /** Indicates if this test is active.It doesn't schedule test for not active Test. */
  isActive?: boolean;
  /** The commands used in the test. */
  commands: Command[];
}

/** The command used in the test */
export interface Command {
  /** The name of the command. */
  name: string;
  /** The action of the command. */
  action: Action;
  /** The type of command content. */
  contentType: ContentType;
  /** The content of the command. The content depends on source type. */
  content: string;
  /** Specifies whether to run the command as administrator. */
  runElevated?: boolean;
  /** Specifies whether to restart the VM after the command executed. */
  restartAfter?: boolean;
  /** Specifies the max run time of the command. */
  maxRunTime?: number;
  /** Specifies whether to run the command in interactive mode. */
  runAsInteractive?: boolean;
  /** Specifies whether to run the command even if a previous command is failed. */
  alwaysRun?: boolean;
  /** Specifies whether to apply update before the command. */
  applyUpdateBefore?: boolean;
}

/** Parameters supplied to update a Test Base Package. */
export interface PackageUpdateParameters {
  /** The tags of the Package. */
  tags?: { [propertyName: string]: string };
  /** Specifies the target OSs of specific OS Update types. */
  targetOSList?: TargetOSInfo[];
  /** The flighting ring for feature update. */
  flightingRing?: string;
  /** Specifies whether the package is enabled. It doesn't schedule test for package which is not enabled. */
  isEnabled?: boolean;
  /** The file name of the package. */
  blobPath?: string;
  /** The detailed test information. */
  tests?: Test[];
}

/** The response of getting a download URL. */
export interface DownloadURLResponse {
  /**
   * The download URL.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly downloadUrl?: string;
  /**
   * Expiry date of the download URL.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly expirationTime?: Date;
}

/** A list of Test Summaries. */
export interface TestSummaryListResult {
  /** The list of Test Summaries. */
  value?: TestSummaryResource[];
  /**
   * Link to the next set of results. Not empty if value contains incomplete list of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** The summary of some tests. */
export interface OSUpdatesTestSummary {
  /** The status of the last test. */
  executionStatus?: ExecutionStatus;
  /** The grade of last test. */
  grade?: Grade;
  /** The run time of the last test. */
  testRunTime?: string;
  /** Detailed summary for each OS update */
  osUpdateTestSummaries?: OSUpdateTestSummary[];
}

/** The summary of a test. */
export interface OSUpdateTestSummary {
  /** The operating system name. e.g. Windows 10 1809. */
  osName?: string;
  /** The name of the tested release (OS update). */
  releaseName?: string;
  /** The build version of the tested release (OS update) */
  buildVersion?: string;
  /** The build revision of the tested release (OS update) */
  buildRevision?: string;
  /** The release version date. */
  releaseVersionDate?: Date;
  /** The flighting ring, only for release of feature updates. */
  flightingRing?: string;
  /** The execution status of the test. */
  executionStatus?: ExecutionStatus;
  /** The grade of the test. */
  grade?: Grade;
  /** The run time of the test. */
  testRunTime?: string;
  /** The test type of the package */
  testType?: string;
}

/** A list of Test Results. */
export interface TestResultListResult {
  /** The list of Test Results. */
  value?: TestResultResource[];
  /**
   * Link to the next set of results. Not empty if value contains incomplete list of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** The summary of a Test Analysis Result. */
export interface TestResultAnalysisSummary {
  /** Metric name */
  name?: string;
  /** The analysis status. */
  analysisStatus?: AnalysisStatus;
  /** The grade of the test result. */
  grade?: Grade;
}

/** A list of OS Updates. */
export interface OSUpdateListResult {
  /** The list of OS Updates. */
  value?: OSUpdateResource[];
  /**
   * Link to the next set of results. Not empty if value contains incomplete list of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** A list of favorite processes for a package. */
export interface FavoriteProcessListResult {
  /** The list of favorite processes for a package. */
  value?: FavoriteProcessResource[];
  /**
   * Link to the next set of results. Not empty if value contains incomplete list of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** A list of Analysis Results. It will only contain one element as all the data will be nested in a singleton object. */
export interface AnalysisResultListResult {
  /** The list of Analysis Results. */
  value?: AnalysisResultSingletonResource[];
  /**
   * Link to the next set of results. Not empty if value contains incomplete list of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** The properties of Analysis Result resource. */
export interface AnalysisResultSingletonResourceProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  analysisResultType:
    | "ScriptExecution"
    | "Reliability"
    | "CPUUtilization"
    | "MemoryUtilization"
    | "CPURegression"
    | "MemoryRegression";
  /** The grade of the test. */
  grade?: Grade;
}

/** A list of operations supported by the resource provider. */
export interface OperationListResult {
  /** List of operations supported by the Test Base resource provider. */
  value?: Operation[];
  /**
   * URL to get the next set of operation list results if there are any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** REST API operation */
export interface Operation {
  /**
   * Operation name: {provider}/{resource}/{operation}.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Indicates whether the operation is a data action
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isDataAction?: boolean;
  /**
   * Origin of the operation
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly origin?: string;
  /** The object that describes the operation. */
  display?: OperationDisplay;
  /** Extra properties of the operation. */
  properties?: Record<string, unknown>;
}

/** The object that describes the operation. */
export interface OperationDisplay {
  /**
   * The resource provider name: Microsoft.TestBase.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provider?: string;
  /**
   * Operation type: read, write, delete, listPackages, etc.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operation?: string;
  /**
   * Resource type on which the operation is performed.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resource?: string;
  /**
   * Friendly name of the operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
}

/** The Script Execution Result. */
export interface ScriptExecutionResult {
  /** Name of script. */
  scriptName?: string;
  /** Start time of script execution. */
  startTime?: Date;
  /** End time of script execution. */
  endTime?: Date;
  /** Exit code. */
  exitCode?: number;
  /** Whether the subscription execution is timeout. */
  timeOut?: boolean;
}

/** The Reliability Result. */
export interface ReliabilityResult {
  /** File name. */
  fileName?: string;
  /** Count of number of launches. */
  launchCount?: number;
  /** Count of number of crashes. */
  crashCount?: number;
  /** Count of number of hangs. */
  hangCount?: number;
  /** The regression grade. */
  regressionGrade?: Grade;
  /** The statistic regression grade for crash signal. */
  crashRegressionGrade?: Grade;
  /** Details related to the crash regression analysis. */
  crashRegressionTestDetails?: RegressionTestDetails;
  /** The statistic regression grade for hang signal. */
  hangRegressionGrade?: Grade;
  /** Details related to the hang regression analysis. */
  hangRegressionTestDetails?: RegressionTestDetails;
}

/** The details of a regression test. */
export interface RegressionTestDetails {
  /** Difference between the two datasets being analyzed. */
  diff?: number;
  /** Indicates if a regression was inferred. */
  isRegressed?: boolean;
}

/** The Utilization Result. */
export interface UtilizationResult {
  /** Process name, or '_total' for all processes */
  process?: string;
  /** Upper bound */
  upperBound?: UtilizationBound;
  /** Lower bound */
  lowerBound?: UtilizationBound;
  /** Utilization data */
  utilization?: UtilizationEntry[];
}

/** The bound of a utilization result. */
export interface UtilizationBound {
  /** The percentile of the bound. */
  percentile?: number;
  /** The value of the bound. */
  value?: number;
}

/** The utilization entry. */
export interface UtilizationEntry {
  /** The timestamp. */
  timestamp?: Date;
  /** The value. */
  value?: number;
}

/** The regression result. */
export interface RegressionResult {
  /** FileName of the binary being analyzed. */
  fileName?: string;
  /** The grade of the test. */
  grade?: Grade;
  /** Message that facilitates debugging a particular regression, if any was inferred. */
  details?: string;
  /** Difference between the two datasets being analyzed. */
  diff?: number;
  /** Indicates if a regression was inferred. */
  isRegressed?: boolean;
}

/** The resource model definition for an ARM tracked top level resource */
export interface TrackedResource extends Resource {
  /** The tags of the resource. */
  tags?: { [propertyName: string]: string };
  /** The geo-location where the resource lives */
  location: string;
  /**
   * Resource Etag.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly etag?: string;
}

/** The resource model definition for an ARM proxy resource. It will have everything other than required location and tags */
export interface ProxyResource extends Resource {}

/** The properties of Script Execution Result. */
export interface ScriptExecutionResultSingletonResourceProperties
  extends AnalysisResultSingletonResourceProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  analysisResultType: "ScriptExecution";
  /** The result array data. */
  scriptExecutionResults?: ScriptExecutionResult[];
}

/** The properties of Reliability Result. */
export interface ReliabilityResultSingletonResourceProperties
  extends AnalysisResultSingletonResourceProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  analysisResultType: "Reliability";
  /** The result array data. */
  reliabilityResults?: ReliabilityResult[];
}

/** The properties of CPU Utilization Result. */
export interface CPUUtilizationResultSingletonResourceProperties
  extends AnalysisResultSingletonResourceProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  analysisResultType: "CPUUtilization";
  /** The result array data. */
  cpuUtilizationResults?: UtilizationResult[];
}

/** The properties of Memory Utilization Result. */
export interface MemoryUtilizationResultSingletonResourceProperties
  extends AnalysisResultSingletonResourceProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  analysisResultType: "MemoryUtilization";
  /** The result array data. */
  memoryUtilizationResults?: UtilizationResult[];
}

/** The properties of CPU Regression Result. */
export interface CPURegressionResultSingletonResourceProperties
  extends AnalysisResultSingletonResourceProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  analysisResultType: "CPURegression";
  /** The result array data. */
  cpuRegressionResults?: RegressionResult[];
}

/** The properties of Memory Regression Result. */
export interface MemoryRegressionResultSingletonResourceProperties
  extends AnalysisResultSingletonResourceProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  analysisResultType: "MemoryRegression";
  /** The result array data. */
  memoryRegressionResults?: RegressionResult[];
}

/** The Test Base Account resource. */
export interface TestBaseAccountResource extends TrackedResource {
  /**
   * The system metadata relating to this resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /**
   * The provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** The SKU of the Test Base Account. */
  sku?: TestBaseAccountSKU;
  /**
   * The access level of the Test Base Account.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly accessLevel?: string;
}

/** The Test Base Package resource. */
export interface PackageResource extends TrackedResource {
  /**
   * The system metadata relating to this resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /**
   * The provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** Application name */
  applicationName?: string;
  /** Application version */
  version?: string;
  /**
   * OOB, functional or both. Mapped to the data in 'tests' property.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly testTypes?: TestType[];
  /** Specifies the target OSs of specific OS Update types. */
  targetOSList?: TargetOSInfo[];
  /**
   * The status of the package.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly packageStatus?: PackageStatus;
  /**
   * The UTC timestamp when the package was last modified.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastModifiedTime?: Date;
  /** The flighting ring for feature update. */
  flightingRing?: string;
  /**
   * Flag showing that whether the package is enabled. It doesn't schedule test for package which is not enabled.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isEnabled?: boolean;
  /** The file path of the package. */
  blobPath?: string;
  /**
   * The validation results. There's validation on package when it's created or updated.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly validationResults?: PackageValidationResult[];
  /** The detailed test information. */
  tests?: Test[];
}

/** The Available OS resource. */
export interface AvailableOSResource extends ProxyResource {
  /**
   * The system metadata relating to this resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** The Id of an Available OS of a Test Base Account. */
  osId?: string;
  /** The name of an Available OS of a Test Base Account. */
  osName?: string;
  /** The version of an Available OS of a Test Base Account. */
  osVersion?: string;
  /** The insider channel of an Available OS of a Test Base Account. */
  insiderChannel?: string;
  /** The OS update type of an Available OS of a Test Base Account. */
  osUpdateType?: string;
  /** The Platform of an Available OS of a Test Base Account. */
  osPlatform?: string;
}

/** The flighting ring resource. */
export interface FlightingRingResource extends ProxyResource {
  /**
   * The system metadata relating to this resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** The actual name of a flighting ring of a Test Base Account. */
  actualFlightingRingName?: string;
}

/** The test type resource. */
export interface TestTypeResource extends ProxyResource {
  /**
   * The system metadata relating to this resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** The actual name of a test type of a Test Base Account. */
  actualTestTypeName?: string;
}

/** Summary of a Test. */
export interface TestSummaryResource extends ProxyResource {
  /**
   * The system metadata relating to this resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** The Id of the current Test Summary. */
  testSummaryId?: string;
  /** The Azure resource Id of package. */
  packageId?: string;
  /** Application name. */
  applicationName?: string;
  /** Application version. */
  applicationVersion?: string;
  /** The execution status of last test. */
  executionStatus?: ExecutionStatus;
  /** The grade of the test. */
  grade?: Grade;
  /** The run time of the last test. */
  testRunTime?: string;
  /** The result summary of tests triggered by feature updates */
  featureUpdatesTestSummary?: OSUpdatesTestSummary;
  /** The result summary of tests triggered by security updates */
  securityUpdatesTestSummary?: OSUpdatesTestSummary;
}

/** The Test Result Resource. */
export interface TestResultResource extends ProxyResource {
  /**
   * The system metadata relating to this resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** Azure Id of the baseline test result. */
  baselineTestResultId?: string;
  /** Resource Id of the package. */
  packageId?: string;
  /** Application name. */
  applicationName?: string;
  /** Application version. */
  applicationVersion?: string;
  /** The operating system name, e.g. Windows 10 1809. */
  osName?: string;
  /** The name of the tested release (OS update). */
  releaseName?: string;
  /** The release version date of the tested release. */
  releaseVersionDate?: Date;
  /** The flighting ring, only for release of feature updates. */
  flightingRing?: string;
  /** The build version of the tested release (OS update). */
  buildVersion?: string;
  /** The build revision of the tested release (OS update). */
  buildRevision?: string;
  /** Test type. E.g. 'Out of box test' or 'Functional test'. */
  testType?: string;
  /** The run time of the test. */
  testRunTime?: string;
  /** Whether download data is available. */
  isDownloadDataAvailable?: boolean;
  /** Whether video data is available. */
  isVideoAvailable?: boolean;
  /** The execution status of the test. */
  executionStatus?: ExecutionStatus;
  /** The grade of the test. */
  grade?: Grade;
  /** KB number. */
  kbNumber?: string;
  /** The version of the Windows update package. */
  packageVersion?: string;
  /** List of analysis summaries. */
  analysisSummaries?: TestResultAnalysisSummary[];
}

/** An OS Update. */
export interface OSUpdateResource extends ProxyResource {
  /**
   * The system metadata relating to this resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** The name of the OS. */
  osName?: string;
  /** The name of tested release. */
  release?: string;
  /** The flighting ring, only for release of feature updates. */
  flightingRing?: string;
  /** The build version of the tested release (OS update). */
  buildVersion?: string;
  /** The build revision of the tested release (OS update) */
  buildRevision?: string;
  /** The type of this release (OS update). */
  typePropertiesType?: Type;
  /** The release version date the tested release (OS update) */
  releaseVersionDate?: Date;
}

/** A favorite process identifier. */
export interface FavoriteProcessResource extends ProxyResource {
  /**
   * The system metadata relating to this resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** The actual name of the favorite process. It will be equal to resource name except for the scenario that the process name contains characters that are not allowed in the resource name. */
  actualProcessName?: string;
}

/** The Analysis Result Singleton Resource. */
export interface AnalysisResultSingletonResource extends ProxyResource {
  /**
   * The system metadata relating to this resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** The grade of the test. */
  grade?: Grade;
  /** Type of the Analysis Result. */
  analysisResultType?: AnalysisResultType;
}

/** Defines headers for TestBaseAccount_create operation. */
export interface TestBaseAccountCreateHeaders {
  /** URL to query for status of the operation. */
  azureAsyncOperation?: string;
}

/** Defines headers for TestBaseAccount_update operation. */
export interface TestBaseAccountUpdateHeaders {
  /** URL to query for status of the operation. */
  azureAsyncOperation?: string;
  /** URL to query for status of the operation. */
  location?: string;
}

/** Defines headers for TestBaseAccount_delete operation. */
export interface TestBaseAccountDeleteHeaders {
  /** URL to query for status of the operation. */
  azureAsyncOperation?: string;
  /** URL to query for status of the operation. */
  location?: string;
}

/** Defines headers for TestBaseAccount_offboard operation. */
export interface TestBaseAccountOffboardHeaders {
  /** URL to query for status of the operation. */
  azureAsyncOperation?: string;
  /** URL to query for status of the operation. */
  location?: string;
}

/** Defines headers for Package_create operation. */
export interface PackageCreateHeaders {
  /** URL to query for status of the operation. */
  azureAsyncOperation?: string;
}

/** Defines headers for Package_update operation. */
export interface PackageUpdateHeaders {
  /** URL to query for status of the operation. */
  azureAsyncOperation?: string;
  /** URL to query for status of the operation. */
  location?: string;
}

/** Defines headers for Package_delete operation. */
export interface PackageDeleteHeaders {
  /** URL to query for status of the operation. */
  azureAsyncOperation?: string;
  /** URL to query for status of the operation. */
  location?: string;
}

/** Defines headers for Package_hardDelete operation. */
export interface PackageHardDeleteHeaders {
  /** URL to query for status of the operation. */
  azureAsyncOperation?: string;
  /** URL to query for status of the operation. */
  location?: string;
}

/** Known values of {@link Tier} that the service accepts. */
export enum KnownTier {
  /** Basic */
  Basic = "Basic",
  /** Standard */
  Standard = "Standard"
}

/**
 * Defines values for Tier. \
 * {@link KnownTier} can be used interchangeably with Tier,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Basic** \
 * **Standard**
 */
export type Tier = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  /** User */
  User = "User",
  /** Application */
  Application = "Application",
  /** ManagedIdentity */
  ManagedIdentity = "ManagedIdentity",
  /** Key */
  Key = "Key"
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link ProvisioningState} that the service accepts. */
export enum KnownProvisioningState {
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Cancelled */
  Cancelled = "Cancelled",
  /** Creating */
  Creating = "Creating",
  /** Deleting */
  Deleting = "Deleting",
  /** Updating */
  Updating = "Updating"
}

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Cancelled** \
 * **Creating** \
 * **Deleting** \
 * **Updating**
 */
export type ProvisioningState = string;

/** Known values of {@link OsUpdateType} that the service accepts. */
export enum KnownOsUpdateType {
  /** SecurityUpdate */
  SecurityUpdate = "SecurityUpdate",
  /** FeatureUpdate */
  FeatureUpdate = "FeatureUpdate"
}

/**
 * Defines values for OsUpdateType. \
 * {@link KnownOsUpdateType} can be used interchangeably with OsUpdateType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SecurityUpdate** \
 * **FeatureUpdate**
 */
export type OsUpdateType = string;

/** Known values of {@link Reason} that the service accepts. */
export enum KnownReason {
  /** Invalid */
  Invalid = "Invalid",
  /** AlreadyExists */
  AlreadyExists = "AlreadyExists"
}

/**
 * Defines values for Reason. \
 * {@link KnownReason} can be used interchangeably with Reason,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Invalid** \
 * **AlreadyExists**
 */
export type Reason = string;

/** Known values of {@link TestType} that the service accepts. */
export enum KnownTestType {
  /** OutOfBoxTest */
  OutOfBoxTest = "OutOfBoxTest",
  /** FunctionalTest */
  FunctionalTest = "FunctionalTest"
}

/**
 * Defines values for TestType. \
 * {@link KnownTestType} can be used interchangeably with TestType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **OutOfBoxTest** \
 * **FunctionalTest**
 */
export type TestType = string;

/** Known values of {@link PackageStatus} that the service accepts. */
export enum KnownPackageStatus {
  /** Unknown */
  Unknown = "Unknown",
  /** Registered */
  Registered = "Registered",
  /** Ready */
  Ready = "Ready",
  /** Error */
  Error = "Error",
  /** ValidatingPackage */
  ValidatingPackage = "ValidatingPackage",
  /** PreValidationCheckPass */
  PreValidationCheckPass = "PreValidationCheckPass",
  /** Deleted */
  Deleted = "Deleted",
  /** ValidationLongerThanUsual */
  ValidationLongerThanUsual = "ValidationLongerThanUsual",
  /** VerifyingPackage */
  VerifyingPackage = "VerifyingPackage"
}

/**
 * Defines values for PackageStatus. \
 * {@link KnownPackageStatus} can be used interchangeably with PackageStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **Registered** \
 * **Ready** \
 * **Error** \
 * **ValidatingPackage** \
 * **PreValidationCheckPass** \
 * **Deleted** \
 * **ValidationLongerThanUsual** \
 * **VerifyingPackage**
 */
export type PackageStatus = string;

/** Known values of {@link ValidationRunStatus} that the service accepts. */
export enum KnownValidationRunStatus {
  /** Unknown */
  Unknown = "Unknown",
  /** Pending */
  Pending = "Pending",
  /** Passed */
  Passed = "Passed",
  /** Failed */
  Failed = "Failed"
}

/**
 * Defines values for ValidationRunStatus. \
 * {@link KnownValidationRunStatus} can be used interchangeably with ValidationRunStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **Pending** \
 * **Passed** \
 * **Failed**
 */
export type ValidationRunStatus = string;

/** Known values of {@link Action} that the service accepts. */
export enum KnownAction {
  /** Install */
  Install = "Install",
  /** Launch */
  Launch = "Launch",
  /** Close */
  Close = "Close",
  /** Uninstall */
  Uninstall = "Uninstall",
  /** Custom */
  Custom = "Custom"
}

/**
 * Defines values for Action. \
 * {@link KnownAction} can be used interchangeably with Action,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Install** \
 * **Launch** \
 * **Close** \
 * **Uninstall** \
 * **Custom**
 */
export type Action = string;

/** Known values of {@link ContentType} that the service accepts. */
export enum KnownContentType {
  /** Inline */
  Inline = "Inline",
  /** File */
  File = "File",
  /** Path */
  Path = "Path"
}

/**
 * Defines values for ContentType. \
 * {@link KnownContentType} can be used interchangeably with ContentType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Inline** \
 * **File** \
 * **Path**
 */
export type ContentType = string;

/** Known values of {@link ExecutionStatus} that the service accepts. */
export enum KnownExecutionStatus {
  /** None */
  None = "None",
  /** InProgress */
  InProgress = "InProgress",
  /** Processing */
  Processing = "Processing",
  /** Completed */
  Completed = "Completed",
  /** NotExecuted */
  NotExecuted = "NotExecuted",
  /** Incomplete */
  Incomplete = "Incomplete",
  /** Failed */
  Failed = "Failed",
  /** Succeeded */
  Succeeded = "Succeeded"
}

/**
 * Defines values for ExecutionStatus. \
 * {@link KnownExecutionStatus} can be used interchangeably with ExecutionStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **InProgress** \
 * **Processing** \
 * **Completed** \
 * **NotExecuted** \
 * **Incomplete** \
 * **Failed** \
 * **Succeeded**
 */
export type ExecutionStatus = string;

/** Known values of {@link Grade} that the service accepts. */
export enum KnownGrade {
  /** None */
  None = "None",
  /** NotAvailable */
  NotAvailable = "NotAvailable",
  /** Pass */
  Pass = "Pass",
  /** Fail */
  Fail = "Fail"
}

/**
 * Defines values for Grade. \
 * {@link KnownGrade} can be used interchangeably with Grade,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **NotAvailable** \
 * **Pass** \
 * **Fail**
 */
export type Grade = string;

/** Known values of {@link AnalysisStatus} that the service accepts. */
export enum KnownAnalysisStatus {
  /** None */
  None = "None",
  /** Completed */
  Completed = "Completed",
  /** InProgress */
  InProgress = "InProgress",
  /** Failed */
  Failed = "Failed",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Available */
  Available = "Available",
  /** NotAvailable */
  NotAvailable = "NotAvailable"
}

/**
 * Defines values for AnalysisStatus. \
 * {@link KnownAnalysisStatus} can be used interchangeably with AnalysisStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Completed** \
 * **InProgress** \
 * **Failed** \
 * **Succeeded** \
 * **Available** \
 * **NotAvailable**
 */
export type AnalysisStatus = string;

/** Known values of {@link Type} that the service accepts. */
export enum KnownType {
  /** SecurityUpdate */
  SecurityUpdate = "SecurityUpdate",
  /** FeatureUpdate */
  FeatureUpdate = "FeatureUpdate"
}

/**
 * Defines values for Type. \
 * {@link KnownType} can be used interchangeably with Type,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SecurityUpdate** \
 * **FeatureUpdate**
 */
export type Type = string;

/** Known values of {@link AnalysisResultType} that the service accepts. */
export enum KnownAnalysisResultType {
  /** ScriptExecution */
  ScriptExecution = "ScriptExecution",
  /** Reliability */
  Reliability = "Reliability",
  /** CPUUtilization */
  CPUUtilization = "CPUUtilization",
  /** MemoryUtilization */
  MemoryUtilization = "MemoryUtilization",
  /** CPURegression */
  CPURegression = "CPURegression",
  /** MemoryRegression */
  MemoryRegression = "MemoryRegression"
}

/**
 * Defines values for AnalysisResultType. \
 * {@link KnownAnalysisResultType} can be used interchangeably with AnalysisResultType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ScriptExecution** \
 * **Reliability** \
 * **CPUUtilization** \
 * **MemoryUtilization** \
 * **CPURegression** \
 * **MemoryRegression**
 */
export type AnalysisResultType = string;

/** Known values of {@link AnalysisResultName} that the service accepts. */
export enum KnownAnalysisResultName {
  /** ScriptExecution */
  ScriptExecution = "scriptExecution",
  /** Reliability */
  Reliability = "reliability",
  /** MemoryUtilization */
  MemoryUtilization = "memoryUtilization",
  /** CpuUtilization */
  CpuUtilization = "cpuUtilization",
  /** MemoryRegression */
  MemoryRegression = "memoryRegression",
  /** CpuRegression */
  CpuRegression = "cpuRegression"
}

/**
 * Defines values for AnalysisResultName. \
 * {@link KnownAnalysisResultName} can be used interchangeably with AnalysisResultName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **scriptExecution** \
 * **reliability** \
 * **memoryUtilization** \
 * **cpuUtilization** \
 * **memoryRegression** \
 * **cpuRegression**
 */
export type AnalysisResultName = string;

/** Optional parameters. */
export interface SKUsListOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type SKUsListResponse = TestBaseAccountSKUListResult;

/** Optional parameters. */
export interface SKUsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type SKUsListNextResponse = TestBaseAccountSKUListResult;

/** Optional parameters. */
export interface TestBaseAccountsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {
  /** The flag indicating if we need to include the Test Base Accounts which were soft deleted before. */
  getDeleted?: boolean;
}

/** Contains response data for the listBySubscription operation. */
export type TestBaseAccountsListBySubscriptionResponse = TestBaseAccountListResult;

/** Optional parameters. */
export interface TestBaseAccountsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {
  /** The flag indicating if we need to include the Test Base Accounts which were soft deleted before. */
  getDeleted?: boolean;
}

/** Contains response data for the listByResourceGroup operation. */
export type TestBaseAccountsListByResourceGroupResponse = TestBaseAccountListResult;

/** Optional parameters. */
export interface TestBaseAccountsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type TestBaseAccountsListBySubscriptionNextResponse = TestBaseAccountListResult;

/** Optional parameters. */
export interface TestBaseAccountsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type TestBaseAccountsListByResourceGroupNextResponse = TestBaseAccountListResult;

/** Optional parameters. */
export interface TestBaseAccountCreateOptionalParams
  extends coreClient.OperationOptions {
  /** The flag indicating if we would like to restore the Test Base Accounts which were soft deleted before. */
  restore?: boolean;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type TestBaseAccountCreateResponse = TestBaseAccountResource;

/** Optional parameters. */
export interface TestBaseAccountUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type TestBaseAccountUpdateResponse = TestBaseAccountResource;

/** Optional parameters. */
export interface TestBaseAccountDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface TestBaseAccountGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type TestBaseAccountGetResponse = TestBaseAccountResource;

/** Optional parameters. */
export interface TestBaseAccountOffboardOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface TestBaseAccountUsageListOptionalParams
  extends coreClient.OperationOptions {
  /** Odata filter */
  filter?: string;
}

/** Contains response data for the list operation. */
export type TestBaseAccountUsageListResponse = TestBaseAccountUsageDataList;

/** Optional parameters. */
export interface TestBaseAccountUsageListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type TestBaseAccountUsageListNextResponse = TestBaseAccountUsageDataList;

/** Optional parameters. */
export interface TestBaseAccountGetFileUploadUrlOptionalParams
  extends coreClient.OperationOptions {
  /** Parameters supplied to the Test Base Account GetFileUploadURL operation. */
  parameters?: GetFileUploadURLParameters;
}

/** Contains response data for the testBaseAccountGetFileUploadUrl operation. */
export type TestBaseAccountGetFileUploadUrlResponse = FileUploadURLResponse;

/** Optional parameters. */
export interface CheckPackageNameAvailabilityOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the checkPackageNameAvailability operation. */
export type CheckPackageNameAvailabilityResponse = CheckNameAvailabilityResult;

/** Optional parameters. */
export interface PackageGetDownloadURLOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the packageGetDownloadURL operation. */
export type PackageGetDownloadURLResponse = DownloadURLResponse;

/** Optional parameters. */
export interface TestResultGetDownloadURLOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the testResultGetDownloadURL operation. */
export type TestResultGetDownloadURLResponse = DownloadURLResponse;

/** Optional parameters. */
export interface TestResultGetVideoDownloadURLOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the testResultGetVideoDownloadURL operation. */
export type TestResultGetVideoDownloadURLResponse = DownloadURLResponse;

/** Optional parameters. */
export interface TestBaseAccountAvailableOSsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type TestBaseAccountAvailableOSsListResponse = AvailableOSListResult;

/** Optional parameters. */
export interface TestBaseAccountAvailableOSsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type TestBaseAccountAvailableOSsListNextResponse = AvailableOSListResult;

/** Optional parameters. */
export interface TestBaseAccountAvailableOSGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type TestBaseAccountAvailableOSGetResponse = AvailableOSResource;

/** Optional parameters. */
export interface TestBaseAccountFlightingRingsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type TestBaseAccountFlightingRingsListResponse = FlightingRingListResult;

/** Optional parameters. */
export interface TestBaseAccountFlightingRingsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type TestBaseAccountFlightingRingsListNextResponse = FlightingRingListResult;

/** Optional parameters. */
export interface TestBaseAccountFlightingRingGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type TestBaseAccountFlightingRingGetResponse = FlightingRingResource;

/** Optional parameters. */
export interface TestBaseAccountTestTypesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type TestBaseAccountTestTypesListResponse = TestTypeListResult;

/** Optional parameters. */
export interface TestBaseAccountTestTypesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type TestBaseAccountTestTypesListNextResponse = TestTypeListResult;

/** Optional parameters. */
export interface TestBaseAccountTestTypeGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type TestBaseAccountTestTypeGetResponse = TestTypeResource;

/** Optional parameters. */
export interface PackagesListByTestBaseAccountOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByTestBaseAccount operation. */
export type PackagesListByTestBaseAccountResponse = PackageListResult;

/** Optional parameters. */
export interface PackagesListByTestBaseAccountNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByTestBaseAccountNext operation. */
export type PackagesListByTestBaseAccountNextResponse = PackageListResult;

/** Optional parameters. */
export interface PackageCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type PackageCreateResponse = PackageResource;

/** Optional parameters. */
export interface PackageUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type PackageUpdateResponse = PackageResource;

/** Optional parameters. */
export interface PackageDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface PackageGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type PackageGetResponse = PackageResource;

/** Optional parameters. */
export interface PackageHardDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface TestSummariesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type TestSummariesListResponse = TestSummaryListResult;

/** Optional parameters. */
export interface TestSummariesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type TestSummariesListNextResponse = TestSummaryListResult;

/** Optional parameters. */
export interface TestSummaryGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type TestSummaryGetResponse = TestSummaryResource;

/** Optional parameters. */
export interface TestResultsListOptionalParams
  extends coreClient.OperationOptions {
  /** Odata filter */
  filter?: string;
}

/** Contains response data for the list operation. */
export type TestResultsListResponse = TestResultListResult;

/** Optional parameters. */
export interface TestResultsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type TestResultsListNextResponse = TestResultListResult;

/** Optional parameters. */
export interface TestResultGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type TestResultGetResponse = TestResultResource;

/** Optional parameters. */
export interface OSUpdatesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OSUpdatesListResponse = OSUpdateListResult;

/** Optional parameters. */
export interface OSUpdatesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OSUpdatesListNextResponse = OSUpdateListResult;

/** Optional parameters. */
export interface OSUpdateGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type OSUpdateGetResponse = OSUpdateResource;

/** Optional parameters. */
export interface FavoriteProcessesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type FavoriteProcessesListResponse = FavoriteProcessListResult;

/** Optional parameters. */
export interface FavoriteProcessesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type FavoriteProcessesListNextResponse = FavoriteProcessListResult;

/** Optional parameters. */
export interface FavoriteProcessCreateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the create operation. */
export type FavoriteProcessCreateResponse = FavoriteProcessResource;

/** Optional parameters. */
export interface FavoriteProcessDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface FavoriteProcessGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type FavoriteProcessGetResponse = FavoriteProcessResource;

/** Optional parameters. */
export interface AnalysisResultsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type AnalysisResultsListResponse = AnalysisResultListResult;

/** Optional parameters. */
export interface AnalysisResultGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type AnalysisResultGetResponse = AnalysisResultSingletonResource;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationListResult;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export interface RestAPIForTestBaseOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
