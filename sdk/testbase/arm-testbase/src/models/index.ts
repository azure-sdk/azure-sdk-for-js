/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export type AnalysisResultSingletonResourcePropertiesUnion =
  | AnalysisResultSingletonResourceProperties
  | ScriptExecutionResultSingletonResourceProperties
  | ReliabilityResultSingletonResourceProperties
  | CPUUtilizationResultSingletonResourceProperties
  | MemoryUtilizationResultSingletonResourceProperties
  | CPURegressionResultSingletonResourceProperties
  | MemoryRegressionResultSingletonResourceProperties
  | TestAnalysisResultSingletonResourceProperties;

export interface PreReleaseAccessRequestSpec {
  organizationName?: string;
  email?: string;
  engagements?: Engagements[];
  streetAddress?: string;
  city?: string;
  stateOrProvince?: string;
  zipCode?: string;
  countryAndRegion?: string;
  companyWebsite?: string;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export interface Resource {
  /**
   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Azure Resource Manager metadata containing createdBy and modifiedBy information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The timestamp of resource last modification (UTC) */
  lastModifiedAt?: Date;
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export interface ErrorResponse {
  /** The error object. */
  error?: ErrorDetail;
}

/** The error detail. */
export interface ErrorDetail {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDetail[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
}

export interface ActionRequests {
  value?: ActionRequest[];
  /**
   * Link to the next set of results. Not empty if value contains incomplete list of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** A list of Test Base Draft Packages. */
export interface DraftPackageListResult {
  /** The list of Test Base Draft Packages. */
  value?: DraftPackageResource[];
  /**
   * Link to the next set of results. Not empty if value contains incomplete list of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** The metadata of Intune app used for generation. */
export interface DraftPackageIntuneAppMetadata {
  /** The Metadata of the Intune App. */
  intuneApp?: DraftPackageIntuneAppMetadataItem;
  /** The Metadata of dependencies of the Intune App. */
  intuneAppDependencies?: DraftPackageIntuneAppMetadataItem[];
}

/** The Metadata of a single Intune App. */
export interface DraftPackageIntuneAppMetadataItem {
  /** Intune app name. */
  appName?: string;
  /** Intune app version. */
  version?: string;
  /** Intune app id. */
  appId?: string;
  /** Publisher of the app. */
  publisher?: string;
  /** Description of the app. */
  description?: string;
  /** Owner of the app. */
  owner?: string;
  /** Creation date of the app. */
  createDate?: Date;
  /** Count of dependency apps. */
  dependentAppCount?: number;
  /** Install command. */
  installCommand?: string;
  /** Uninstall command. */
  uninstallCommand?: string;
  /** last processed time tickets. */
  lastProcessed?: number;
  /** Ids of dependency apps. */
  dependencyIds?: string[];
  /** Setup file path. */
  setupFile?: string;
  /** Minimum supported OS. The OS version must be greater than this version to run this app. */
  minimumSupportedOS?: string;
  /** Extract status. */
  status?: IntuneExtractStatus;
  /** Expected exit codes returned from Intune App. */
  expectedExitCodes?: string[];
}

/** The information of a highlighted file that user should pay attention to. */
export interface HighlightedFile {
  /** The path of the highlighted file. */
  path: string;
  /** A flag to save whether this file is viewed by user. */
  visited?: boolean;
  /** The name of sections to highlight. */
  sections?: string[];
}

/** Specifies current state of tabs. */
export interface TabState {
  /** Current tab. */
  currentTab?: PackageStudioTabs;
  /** visited tabs. */
  visitedTabs?: PackageStudioTabs[];
}

/** The information of the target OS to be tested. */
export interface TargetOSInfo {
  /** Specifies the OS update type to test against, e.g., 'Security updates' or 'Feature updates'. */
  osUpdateType: string;
  /** Specifies the target OSs to be tested. */
  targetOSs?: string[];
  /** Insider Channel Ids. Only used for feature update. */
  insiderChannelIds?: string[];
  /** Specifies the baseline OSs to be tested. */
  baselineOSs?: string[];
}

/** Specifies the baseline os and target os for in-place upgrade tests. */
export interface InplaceUpgradeOSInfo {
  /** Specifies the baseline os for in-place upgrade tests. */
  baselineOS?: OsProperties;
  /** Specifies the target os for in-place upgrade tests. */
  targetOS?: string;
}

/** The properties of an operating system. */
export interface OsProperties {
  /** The name of the OS. */
  osName?: string;
  /** The properties of the OS release. */
  releaseProperties?: ReleaseProperties;
}

/** The properties of an operating system release. */
export interface ReleaseProperties {
  /** The name of the OS release. */
  releaseName?: string;
  /** The build number of the OS release. */
  buildNumber?: string;
  /** The build revision of the OS release. */
  buildRevision?: string;
  /** The release version date of the OS release. */
  releaseVersionDate?: Date;
}

/** Properties of the definition of a first party application of the Test Base package. */
export interface FirstPartyAppDefinition {
  /** The media name of a first party application of a Test Base Account. */
  name?: string;
  /** The architecture of a first party application of a Test Base Account. */
  architecture?: Architecture;
  /** The channel info of a first party application of a Test Base Account. */
  channel?: string;
  /** The ring info of a first party application of a Test Base Account. */
  ring?: string;
  /** Specifies how the first party applications should be interoperated with user's application. */
  interopExecutionMode?: InteropExecutionMode;
}

/** The definition of a Test. */
export interface Test {
  /** The type of the test. */
  testType: TestType;
  /**
   * The status of the validation run of the package.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly validationRunStatus?: ValidationRunStatus;
  /**
   * Resource identifier of the validation test result.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly validationResultId?: string;
  /** Indicates if this test is active.It doesn't schedule test for not active Test. */
  isActive?: boolean;
  /** The commands used in the test. */
  commands: Command[];
}

/** The command used in the test */
export interface Command {
  /** The name of the command. */
  name: string;
  /** The action of the command. */
  action: Action;
  /** The type of command content. */
  contentType: ContentType;
  /** The content of the command. The content depends on source type. */
  content: string;
  /** Specifies whether to run the command as administrator. */
  runElevated?: boolean;
  /** Specifies whether to restart the VM after the command executed. */
  restartAfter?: boolean;
  /** Specifies the max run time of the command. */
  maxRunTime?: number;
  /** Specifies whether to run the command in interactive mode. */
  runAsInteractive?: boolean;
  /** Specifies whether to run the command even if a previous command is failed. */
  alwaysRun?: boolean;
  /** Specifies whether to apply update before the command. */
  applyUpdateBefore?: boolean;
  /** Specifies whether to install first party applications before running the command. */
  install1PAppBefore?: boolean;
  /** Specifies whether the command is assigned to be executed before in-place upgrade. */
  preUpgrade?: boolean;
  /** Specifies whether the command is assigned to be executed after in-place upgrade. */
  postUpgrade?: boolean;
}

/** Parameters supplied to update a Test Base Draft Package. */
export interface DraftPackageUpdateParameters {
  /** Application name */
  applicationName?: string;
  /** Application version */
  version?: string;
  /** The name of the app file. */
  appFileName?: string;
  /** The source type. */
  sourceType?: DraftPackageSourceType;
  /** Specifies whether a sample package should be used instead of the one uploaded by the user. */
  useSample?: boolean;
  /** Comments added by user. */
  comments?: string;
  /** Metadata used to generate draft package folder and scripts. */
  intuneMetadata?: DraftPackageIntuneAppMetadata;
  /** The highlight files in the package. */
  highlightedFiles?: HighlightedFile[];
  /** Tags of the package to be created. */
  packageTags?: { [propertyName: string]: string };
  /** Specifies the package id from which the draft package copied. */
  packageId?: string;
  /** Indicates whether user choose to enable script auto-fill. */
  useAutofill?: boolean;
  /** The executable launch command for script auto-fill. Will be used to run the application. */
  executableLaunchCommand?: string;
  /** The process name for script auto-fill. Will be used to identify the application process. */
  processName?: string;
  /** Tab state. */
  tabState?: TabState;
  /** OOB, functional or flow driven. Mapped to the data in 'tests' property. */
  testTypes?: TestType[];
  /** Specifies the target OSs of specific OS Update types. */
  targetOSList?: TargetOSInfo[];
  /** Specifies the baseline os and target os for in-place upgrade. */
  inplaceUpgradeOSPair?: InplaceUpgradeOSInfo;
  /** The flighting ring for feature update. */
  flightingRing?: string;
  /** Specifies the list of first party applications to test along with user application. */
  firstPartyApps?: FirstPartyAppDefinition[];
  /** The detailed test information. */
  tests?: Test[];
}

/** The response of getting a download URL. */
export interface DraftPackageGetPathResponse {
  /**
   * The base URL of the storage account.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly baseUrl?: string;
  /**
   * The relative path of the folder hosting package files.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly draftPackagePath?: string;
  /**
   * The relative path for a temporary folder for package creation work.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly workingPath?: string;
  /**
   * A SAS token for the storage account to access workspace.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sasToken?: string;
  /**
   * Expiry date of the SAS token.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly expirationTime?: Date;
}

/** Parameters body to pass to copy-from-package operation of Draft Package. */
export interface CopyFromPackageOperationParameters {
  /** The id of the package to copy from. */
  packageId: string;
}

/** Parameters body to pass to extract file operation of Draft Package. */
export interface ExtractFileOperationParameters {
  /** The type of file to extract. */
  fileType?: ExtractFileType;
  /** Relative path of the file to be extracted, the path must under working path of this draft package. */
  sourceFile: string;
  /** Intune application id. */
  intuneAppId?: string;
}

/** Parameters body to pass to generate operation of Draft Package. */
export interface GenerateOperationParameters {
  /** Force to generate package files even if no metadata changed. */
  forceGenerate?: boolean;
}

/** A list of Test Base Account SKUs. */
export interface TestBaseAccountSKUListResult {
  /** The list of Test Base Account SKUs. */
  value?: TestBaseAccountSKU[];
  /**
   * Link to the next set of results. Not empty if value contains incomplete list of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Describes a Test Base Account SKU. */
export interface TestBaseAccountSKU {
  /** The type of resource the SKU applies to. */
  resourceType?: string;
  /** The name of the SKU. This is typically a letter + number code, such as B0 or S0. */
  name: string;
  /** The tier of this particular SKU. */
  tier: Tier;
  /**
   * The capabilities of a SKU.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly capabilities?: TestBaseAccountSKUCapability[];
  /** The locations that the SKU is available. */
  locations?: string[];
}

/** Properties of the Test Base Account SKU Capability. */
export interface TestBaseAccountSKUCapability {
  /** An invariant to describe the feature, such as 'SLA'. */
  name: string;
  /** An invariant if the feature is measured by quantity, such as 99.9%. */
  value: string;
}

/** A list of Test Base Accounts. */
export interface TestBaseAccountListResult {
  /** The list of Test Base Accounts. */
  value?: TestBaseAccountResource[];
  /**
   * Link to the next set of results. Not empty if value contains incomplete list of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Parameters supplied to update a Test Base Account. */
export interface TestBaseAccountUpdateParameters {
  /** The tags of the Test Base Account. */
  tags?: { [propertyName: string]: string };
  /** The SKU of the Test Base Account. */
  sku?: TestBaseAccountSKU;
}

/** A list of Test Base Account usage data. */
export interface TestBaseAccountUsageDataList {
  /** The list of Test Base Account usage data. */
  value?: TestBaseAccountUsageData[];
  /**
   * Link to the next set of results. Not empty if value contains incomplete list of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** The usage data of a Test Base Account. */
export interface TestBaseAccountUsageData {
  /** Fully qualified ARM resource id */
  id?: string;
  /** Localizable String object containing the name and a localized value. */
  name?: TestBaseAccountUsageName;
  /** Representing the units of the usage quota. Possible values are: Count, Bytes, Seconds, Percent, CountPerSecond, BytesPerSecond. */
  unit?: string;
  /** The maximum permitted value for the usage quota. If there is no limit, this value will be -1. */
  limit?: number;
  /** Current value for the usage quota. */
  currentValue?: number;
}

/** Localizable String object containing the name and a localized value. */
export interface TestBaseAccountUsageName {
  /** The identifier of the usage. */
  value?: string;
  /** Localized name of the usage. */
  localizedValue?: string;
}

/** The parameters supplied to the Test Base Account GetFileUploadURL action. */
export interface GetFileUploadURLParameters {
  /** The custom file name of the uploaded blob. */
  blobName?: string;
}

/** The URL response */
export interface FileUploadURLResponse {
  /**
   * The URL used for uploading the package.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uploadUrl?: string;
  /**
   * The blob path of the uploaded package. It will be used as the 'blobPath' property of PackageResource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly blobPath?: string;
}

/** A list of available OSs. */
export interface AvailableOSListResult {
  /** The list of available OSs. */
  value?: AvailableOSResource[];
  /**
   * Link to the next set of results. Not empty if value contains incomplete list of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Response schema of feature update supported OSes list API. */
export interface FeatureUpdateSupportedOsesResult {
  value?: FeatureUpdateSupportedOsesResource[];
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly nextLink?: string;
}

/** A list of flighting rings. */
export interface FlightingRingListResult {
  /** The list of flighting rings. */
  value?: FlightingRingResource[];
  /**
   * Link to the next set of results. Not empty if value contains incomplete list of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** A list of currently available first party applications. */
export interface FirstPartyAppListResult {
  /** The list of currently available first party applications. */
  value?: FirstPartyAppResource[];
  /**
   * Link to the next set of results. Not empty if value contains incomplete list of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** A list of test types. */
export interface TestTypeListResult {
  /** The list of test types. */
  value?: TestTypeResource[];
  /**
   * Link to the next set of results. Not empty if value contains incomplete list of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Parameters body to pass for Test Base Package name availability check. */
export interface PackageCheckNameAvailabilityParameters {
  /** Resource name to verify. */
  name: string;
  /** Application name to verify. */
  applicationName: string;
  /** Version name to verify. */
  version: string;
  /** fully qualified resource type which includes provider namespace. */
  type?: string;
}

/** Description of a Check Name availability response properties. */
export interface CheckNameAvailabilityResult {
  /** Value indicating the availability of the name: true if the name is available; otherwise, false. */
  nameAvailable?: boolean;
  /** The reason for unavailability of a name. Required if nameAvailable == false. */
  reason?: Reason;
  /**
   * The detailed info regarding the reason associated with the name. Required if nameAvailable == false.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
}

/** A list of Test Base Packages. */
export interface PackageListResult {
  /** The list of Test Base Packages. */
  value?: PackageResource[];
  /**
   * Link to the next set of results. Not empty if value contains incomplete list of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** The validation results. There's validation on package when it's created or updated. */
export interface PackageValidationResult {
  /**
   * Validation name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly validationName?: string;
  /**
   * Indicates whether the package passed the validation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isValid?: boolean;
  /**
   * Error information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly errors?: string[];
}

/** Parameters supplied to update a Test Base Package. */
export interface PackageUpdateParameters {
  /** The tags of the Package. */
  tags?: { [propertyName: string]: string };
  /** The id of draft package. Used to create or update this package from a draft package. */
  draftPackageId?: string;
  /** Specifies whether the package is enabled. It doesn't schedule test for package which is not enabled. */
  isEnabled?: boolean;
  /** The file name of the package. */
  blobPath?: string;
  /** Specifies the target OSs of specific OS Update types. */
  targetOSList?: TargetOSInfo[];
  /** Specifies the baseline os and target os for in-place upgrade. */
  inplaceUpgradeOSPair?: InplaceUpgradeOSInfo;
  /** The flighting ring for feature update. */
  flightingRing?: string;
  /** Specifies the list of first party applications to test along with user application. */
  firstPartyApps?: FirstPartyAppDefinition[];
  /** The detailed test information. */
  tests?: Test[];
}

/** The response of getting a download URL. */
export interface DownloadURLResponse {
  /**
   * The download URL.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly downloadUrl?: string;
  /**
   * Expiry date of the download URL.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly expirationTime?: Date;
}

/** The parameters supplied to the Test Base Package to start a Test Run. */
export interface PackageRunTestParameters {
  /** The type of the test. */
  testType?: TestType;
  /** Specifies the OS update type to test against. */
  osUpdateType?: OsUpdateType;
  /** The operating system name. e.g. Windows 10 1809. */
  osName?: string;
  /** The name of the tested release (OS update). */
  releaseName?: string;
  /** The flighting ring, only for release of feature updates. */
  flightingRing?: string;
}

/** A list of Test Summaries. */
export interface TestSummaryListResult {
  /** The list of Test Summaries. */
  value?: TestSummaryResource[];
  /**
   * Link to the next set of results. Not empty if value contains incomplete list of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** The summary of some tests. */
export interface OSUpdatesTestSummary {
  /** The status of the last test. */
  executionStatus?: ExecutionStatus;
  /** The status of last test. */
  testStatus?: TestStatus;
  /** The grade of last test. */
  grade?: Grade;
  /** The run time of the last test. */
  testRunTime?: string;
  /** Detailed summary for each OS update */
  osUpdateTestSummaries?: OSUpdateTestSummary[];
}

/** The summary of a test. */
export interface OSUpdateTestSummary {
  /** The operating system name. e.g. Windows 10 1809. */
  osName?: string;
  /** The name of the tested release (OS update). */
  releaseName?: string;
  /** The build version of the tested release (OS update) */
  buildVersion?: string;
  /** The build revision of the tested release (OS update) */
  buildRevision?: string;
  /** The release version date. */
  releaseVersionDate?: Date;
  /** The flighting ring, only for release of feature updates. */
  flightingRing?: string;
  /** The execution status of the test. */
  executionStatus?: ExecutionStatus;
  /** The status of the test. */
  testStatus?: TestStatus;
  /** The grade of the test. */
  grade?: Grade;
  /** The run time of the test. */
  testRunTime?: string;
  /** The test type of the package */
  testType?: string;
  /** The properties of baseline os for in-place upgrade test. */
  inplaceUpgradeBaselineProperties?: OsProperties;
}

/** A list of Test Results. */
export interface TestResultListResult {
  /** The list of Test Results. */
  value?: TestResultResource[];
  /**
   * Link to the next set of results. Not empty if value contains incomplete list of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** The summary of a Test Analysis Result. */
export interface TestResultAnalysisSummary {
  /** Metric name */
  name?: string;
  /** The analysis status. */
  analysisStatus?: AnalysisStatus;
  /** The grade of the test result. */
  grade?: Grade;
}

/** Properties for in-place upgrade test result. */
export interface InplaceUpgradeProperties {
  /** Time stamp for os upgrading start (UTC). */
  upgradeStartTime?: Date;
  /** Time stamp for os upgrading end (UTC). */
  upgradeEndTime?: Date;
  /** The name of the OS. */
  baselineOsName?: string;
  /** The name of the baseline OS release. */
  baselineReleaseName?: string;
  /** The build number of the baseline OS release. */
  baselineBuildNumber?: string;
  /** The build revision of the baseline OS release. */
  baselineBuildRevision?: string;
  /** The kb number of the baseline OS release. */
  baselineKbNumber?: string;
  /** The release version date of the baseline OS release. */
  baselineReleaseVersionDate?: Date;
}

/** A list of OS Updates. */
export interface OSUpdateListResult {
  /** The list of OS Updates. */
  value?: OSUpdateResource[];
  /**
   * Link to the next set of results. Not empty if value contains incomplete list of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** A list of favorite processes for a package. */
export interface FavoriteProcessListResult {
  /** The list of favorite processes for a package. */
  value?: FavoriteProcessResource[];
  /**
   * Link to the next set of results. Not empty if value contains incomplete list of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** A list of Analysis Results. It will only contain one element as all the data will be nested in a singleton object. */
export interface AnalysisResultListResult {
  /** The list of Analysis Results. */
  value?: AnalysisResultSingletonResource[];
  /**
   * Link to the next set of results. Not empty if value contains incomplete list of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** The properties of Analysis Result resource. */
export interface AnalysisResultSingletonResourceProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  analysisResultType:
    | "ScriptExecution"
    | "Reliability"
    | "CPUUtilization"
    | "MemoryUtilization"
    | "CPURegression"
    | "MemoryRegression"
    | "TestAnalysis";
  /** The grade of the test. */
  grade?: Grade;
}

/** Parameters body to pass for getting the download URL of the test execution console log file. */
export interface TestResultConsoleLogDownloadURLParameters {
  /** The log file name corresponding to the download URL. */
  logFileName: string;
}

/** A list of email events. */
export interface EmailEventListResult {
  /** The list of email events. */
  value?: EmailEventResource[];
  /**
   * Link to the next set of results. Not empty if value contains incomplete list of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** A list of Test Base Customer Events. */
export interface CustomerEventListResult {
  /** The list of Test Base Customer Events. */
  value?: CustomerEventResource[];
  /**
   * Link to the next set of results. Not empty if value contains incomplete list of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** A notification event receivers. */
export interface NotificationEventReceiver {
  /** The type of the notification event receiver. */
  receiverType?: string;
  /** The notification event receiver value. */
  receiverValue?: NotificationReceiverValue;
}

/** A notification event receiver value. */
export interface NotificationReceiverValue {
  /** The user object receiver value. */
  userObjectReceiverValue?: UserObjectReceiverValue;
  /** The user object receiver value. */
  subscriptionReceiverValue?: SubscriptionReceiverValue;
  /** The user object receiver value. */
  distributionGroupListReceiverValue?: DistributionGroupListReceiverValue;
}

/** The user object receiver value. */
export interface UserObjectReceiverValue {
  /** user object ids. */
  userObjectIds?: string[];
}

/** The subscription role receiver value. */
export interface SubscriptionReceiverValue {
  /** The subscription id of the notification receiver. */
  subscriptionId?: string;
  /** The subscription name of the notification receiver. */
  subscriptionName?: string;
  /** The role of the notification receiver. */
  role?: string;
}

/** The user object receiver value. */
export interface DistributionGroupListReceiverValue {
  /** The list of distribution groups. */
  distributionGroups?: string[];
}

/** A list of operations supported by the resource provider. */
export interface OperationListResult {
  /** List of operations supported by the Test Base resource provider. */
  value?: Operation[];
  /**
   * URL to get the next set of operation list results if there are any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** REST API operation */
export interface Operation {
  /**
   * Operation name: {provider}/{resource}/{operation}.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Indicates whether the operation is a data action
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isDataAction?: boolean;
  /**
   * Origin of the operation
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly origin?: string;
  /** The object that describes the operation. */
  display?: OperationDisplay;
  /** Extra properties of the operation. */
  properties?: Record<string, unknown>;
}

/** The object that describes the operation. */
export interface OperationDisplay {
  /**
   * The resource provider name: Microsoft.TestBase.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provider?: string;
  /**
   * Operation type: read, write, delete, listPackages, etc.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operation?: string;
  /**
   * Resource type on which the operation is performed.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resource?: string;
  /**
   * Friendly name of the operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
}

export interface BillingHubGetFreeHourBalanceResponse {
  totalRemainingFreeHours?: number;
  incrementEntries?: BillingHubFreeHourIncrementEntry[];
}

export interface BillingHubFreeHourIncrementEntry {
  createTimeStamp?: Date;
  expirationTimeStamp?: Date;
  incrementalFreeHours?: number;
  remainingFreeHours?: number;
}

export interface BillingHubGetUsageRequest {
  startTimeStamp: Date;
  endTimeStamp: Date;
  pageSize?: number;
  pageIndex?: number;
}

export interface BillingHubGetUsageResponse {
  totalUsedFreeHours?: number;
  totalUsedBillableHours?: number;
  totalCharges?: number;
  packageUsageEntries?: BillingHubPackageUsage[];
  nextRequest?: BillingHubGetUsageRequest;
}

export interface BillingHubPackageUsage {
  applicationName?: string;
  applicationVersion?: string;
  azureResourceUri?: string;
  totalUsedFreeHours?: number;
  totalUsedBillableHours?: number;
  totalCharges?: number;
  usageEntriesGroupedByUpdateType?: BillingHubUsageGroupedByUpdateType[];
}

export interface BillingHubUsageGroupedByUpdateType {
  updateType?: string;
  totalUsedFreeHours?: number;
  totalUsedBillableHours?: number;
  totalCharges?: number;
  usageGroups?: BillingHubUsageGroup[];
}

export interface BillingHubUsageGroup {
  totalUsedFreeHours?: number;
  totalUsedBillableHours?: number;
  totalCharges?: number;
  releaseBuildRevision?: number;
  releaseBuildNumber?: number;
  releaseBuildDate?: Date;
  osBuild?: string;
  release?: string;
  testType?: string;
  productFamily?: string;
  executionUsageDetails?: BillingHubExecutionUsageDetail[];
}

export interface BillingHubExecutionUsageDetail {
  applicationName?: string;
  applicationVersion?: string;
  executionRequestId?: string;
  sku?: string;
  meterId?: string;
  startTimeStamp?: Date;
  endTimeStamp?: Date;
  osBuild?: string;
  release?: string;
  testType?: string;
  updateType?: string;
  usedFreeHours?: number;
  usedBillableHours?: number;
  billedCharges?: number;
}

/** A list of available In-place Upgrade OSs. */
export interface AvailableInplaceUpgradeOSListResult {
  /** The list of available In-place Upgrade OS. */
  value?: AvailableInplaceUpgradeOSResource[];
  /**
   * Link to the next set of results. Not empty if value contains incomplete list of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** The Script Execution Result. */
export interface ScriptExecutionResult {
  /** Name of script. */
  scriptName?: string;
  /** Start time of script execution. */
  startTime?: Date;
  /** End time of script execution. */
  endTime?: Date;
  /** Exit code. */
  exitCode?: number;
  /** Whether the script execution is timed out. */
  timedOut?: boolean;
  /** The stdout log file name. */
  stdoutLogFileName?: string;
  /** The stderr log file name. */
  stderrLogFileName?: string;
}

/** The Reliability Result. */
export interface ReliabilityResult {
  /** File name. */
  fileName?: string;
  /** Count of number of launches. */
  launchCount?: number;
  /** Count of number of crashes. */
  crashCount?: number;
  /** Count of number of hangs. */
  hangCount?: number;
  /** The regression grade. */
  regressionGrade?: Grade;
  /** The statistic regression grade for crash signal. */
  crashRegressionGrade?: Grade;
  /** Details related to the crash regression analysis. */
  crashRegressionTestDetails?: RegressionTestDetails;
  /** The statistic regression grade for hang signal. */
  hangRegressionGrade?: Grade;
  /** Details related to the hang regression analysis. */
  hangRegressionTestDetails?: RegressionTestDetails;
}

/** The details of a regression test. */
export interface RegressionTestDetails {
  /** Difference between the two datasets being analyzed. */
  diff?: number;
  /** Indicates if a regression was inferred. */
  isRegressed?: boolean;
}

/** The Utilization Result. */
export interface UtilizationResult {
  /** Process name, or '_total' for all processes */
  process?: string;
  /** Upper bound */
  upperBound?: UtilizationBound;
  /** Lower bound */
  lowerBound?: UtilizationBound;
  /** Utilization data */
  utilization?: UtilizationEntry[];
}

/** The bound of a utilization result. */
export interface UtilizationBound {
  /** The percentile of the bound. */
  percentile?: number;
  /** The value of the bound. */
  value?: number;
}

/** The utilization entry. */
export interface UtilizationEntry {
  /** The timestamp. */
  timestamp?: Date;
  /** The value. */
  value?: number;
}

/** The regression result. */
export interface RegressionResult {
  /** FileName of the binary being analyzed. */
  fileName?: string;
  /** The grade of the test. */
  grade?: Grade;
  /** Message that facilitates debugging a particular regression, if any was inferred. */
  details?: string;
  /** Difference between the two datasets being analyzed. */
  diff?: number;
  /** Indicates if a regression was inferred. */
  isRegressed?: boolean;
}

/** The test analysis result. */
export interface TestAnalysisResult {
  /** The data to provide more failure analysis information. */
  blobData?: string;
  /** The status of the analysis. */
  testAnalysisStatus?: TestAnalysisStatus;
  /** The array of identified failures. */
  identifiedFailures?: IdentifiedFailure[];
}

/** The failure identified. */
export interface IdentifiedFailure {
  /** The Failure Id. */
  failureId?: string;
  /** The category of the failure. */
  category?: Category;
  /** Message that shows information about the failure. */
  errorMessage?: string;
  /** Guidance that shows what the customer needs to do for this failure. */
  guidance?: string;
}

export interface BillingHubUsage {
  applicationName?: string;
  applicationVersion?: string;
  azureResourceUri?: string;
  totalUsedFreeHours?: number;
  totalUsedBillableHours?: number;
  totalCharges?: number;
  usageGroups?: BillingHubUsageGroup[];
}

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export interface ProxyResource extends Resource {}

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export interface TrackedResource extends Resource {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The geo-location where the resource lives */
  location: string;
}

/** The properties of Script Execution Result. */
export interface ScriptExecutionResultSingletonResourceProperties
  extends AnalysisResultSingletonResourceProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  analysisResultType: "ScriptExecution";
  /** The result array data. */
  scriptExecutionResults?: ScriptExecutionResult[];
}

/** The properties of Reliability Result. */
export interface ReliabilityResultSingletonResourceProperties
  extends AnalysisResultSingletonResourceProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  analysisResultType: "Reliability";
  /** The result array data. */
  reliabilityResults?: ReliabilityResult[];
  /** The result array data for target os in an in-place upgrade test. */
  inplaceUpgradeBaselineReliabilityResults?: ReliabilityResult[];
}

/** The properties of CPU Utilization Result. */
export interface CPUUtilizationResultSingletonResourceProperties
  extends AnalysisResultSingletonResourceProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  analysisResultType: "CPUUtilization";
  /** The result array data. */
  cpuUtilizationResults?: UtilizationResult[];
}

/** The properties of Memory Utilization Result. */
export interface MemoryUtilizationResultSingletonResourceProperties
  extends AnalysisResultSingletonResourceProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  analysisResultType: "MemoryUtilization";
  /** The result array data. */
  memoryUtilizationResults?: UtilizationResult[];
}

/** The properties of CPU Regression Result. */
export interface CPURegressionResultSingletonResourceProperties
  extends AnalysisResultSingletonResourceProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  analysisResultType: "CPURegression";
  /** The result array data. */
  cpuRegressionResults?: RegressionResult[];
}

/** The properties of Memory Regression Result. */
export interface MemoryRegressionResultSingletonResourceProperties
  extends AnalysisResultSingletonResourceProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  analysisResultType: "MemoryRegression";
  /** The result array data. */
  memoryRegressionResults?: RegressionResult[];
}

/** The properties of Test Analysis Result. */
export interface TestAnalysisResultSingletonResourceProperties
  extends AnalysisResultSingletonResourceProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  analysisResultType: "TestAnalysis";
  /** The result of test analysis. */
  testAnalysisResult?: TestAnalysisResult;
}

export interface ActionRequest extends ProxyResource {
  /**
   * The provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  requestType?: RequestTypes;
  preReleaseAccessRequestSpec?: PreReleaseAccessRequestSpec;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly creationDate?: Date;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly status?: RequestStatus;
}

/** The Test Base Draft Package resource. */
export interface DraftPackageResource extends ProxyResource {
  /** Application name */
  applicationName?: string;
  /** Application version */
  version?: string;
  /**
   * The relative path of the folder hosting package files.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly draftPackagePath?: string;
  /**
   * The relative path for a temporarily folder for package creation work.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly workingPath?: string;
  /** The name of the app file. */
  appFileName?: string;
  /** The source type. */
  sourceType?: DraftPackageSourceType;
  /** Specifies whether a sample package should be used instead of the one uploaded by the user. */
  useSample?: boolean;
  /** Comments added by user. */
  comments?: string;
  /** Metadata used to generate draft package folder and scripts. */
  intuneMetadata?: DraftPackageIntuneAppMetadata;
  /** The highlight files in the package. */
  highlightedFiles?: HighlightedFile[];
  /** Tags of the package to be created. */
  packageTags?: { [propertyName: string]: string };
  /** Specifies whether this draft package is used to edit a package. */
  editPackage?: boolean;
  /** Specifies the package id from which the draft package copied. */
  packageId?: string;
  /** Indicates whether user choose to enable script auto-fill. */
  useAutofill?: boolean;
  /** The executable launch command for script auto-fill. Will be used to run the application. */
  executableLaunchCommand?: string;
  /** The process name for script auto-fill. Will be used to identify the application process. */
  processName?: string;
  /** Tab state. */
  tabState?: TabState;
  /** OOB, functional or flow driven. Mapped to the data in 'tests' property. */
  testTypes?: TestType[];
  /**
   * The provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** Specifies the target OSs of specific OS Update types. */
  targetOSList?: TargetOSInfo[];
  /** Specifies the baseline os and target os for inplace upgrade. */
  inplaceUpgradeOSPair?: InplaceUpgradeOSInfo;
  /**
   * The UTC timestamp when the package was last modified.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastModifiedTime?: Date;
  /** The flighting ring for feature update. */
  flightingRing?: string;
  /** The list of first party applications to test along with user application. */
  firstPartyApps?: FirstPartyAppDefinition[];
  /** The detailed test information. */
  tests?: Test[];
}

/** The Available OS resource. */
export interface AvailableOSResource extends ProxyResource {
  /** The Id of an Available OS of a Test Base Account. */
  osId?: string;
  /** The name of an Available OS of a Test Base Account. */
  osName?: string;
  /** The version of an Available OS of a Test Base Account. */
  osVersion?: string;
  /** The insider channel of an Available OS of a Test Base Account. */
  insiderChannel?: string;
  /** The OS update type of an Available OS of a Test Base Account. */
  osUpdateType?: string;
  /** The Platform of an Available OS of a Test Base Account. */
  osPlatform?: string;
}

/** Feature update supported OSes proxy resource. */
export interface FeatureUpdateSupportedOsesResource extends ProxyResource {
  osId?: string;
  osName?: string;
  insiderChannel?: string;
  version?: string;
  displayText?: string;
  baselineProducts?: string[];
  /** Timestamp when the OS starts to be supported. */
  startTime?: Date;
  /** State of the OS product. */
  state?: OsProductState;
}

/** The flighting ring resource. */
export interface FlightingRingResource extends ProxyResource {
  /** The actual name of a flighting ring of a Test Base Account. */
  actualFlightingRingName?: string;
}

/** The first party application resource. */
export interface FirstPartyAppResource extends ProxyResource {
  /**
   * The provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** The media type of a first party application of a Test Base Account. */
  mediaType?: string;
  /** The architecture of a first party application of a Test Base Account. */
  architecture?: Architecture;
  /** The channel info of a first party application of a Test Base Account. */
  channel?: string;
  /** The ring info of a first party application of a Test Base Account. */
  ring?: string;
  /** The supported OS products of a first party application of a Test Base Account. */
  supportedProducts?: string[];
}

/** The test type resource. */
export interface TestTypeResource extends ProxyResource {
  /** The actual name of a test type of a Test Base Account. */
  actualTestTypeName?: string;
}

/** Summary of a Test. */
export interface TestSummaryResource extends ProxyResource {
  /** The Id of the current Test Summary. */
  testSummaryId?: string;
  /** The Azure resource Id of package. */
  packageId?: string;
  /** Application name. */
  applicationName?: string;
  /** Application version. */
  applicationVersion?: string;
  /** The execution status of last test. */
  executionStatus?: ExecutionStatus;
  /** The status of last test. */
  testStatus?: TestStatus;
  /** The grade of the test. */
  grade?: Grade;
  /** The run time of the last test. */
  testRunTime?: string;
  /** The result summary of tests triggered by feature updates */
  featureUpdatesTestSummary?: OSUpdatesTestSummary;
  /** The result summary of tests triggered by security updates */
  securityUpdatesTestSummary?: OSUpdatesTestSummary;
  /** The result summary of tests triggered by in-place upgrades */
  inplaceUpgradesTestSummary?: OSUpdatesTestSummary;
  /** The tags of Package resource that are associated with the testSummary */
  packageTags?: { [propertyName: string]: string };
}

/** The Test Result Resource. */
export interface TestResultResource extends ProxyResource {
  /** Azure Id of the baseline test result. */
  baselineTestResultId?: string;
  /** Resource Id of the package. */
  packageId?: string;
  /** Application name. */
  applicationName?: string;
  /** Application version. */
  applicationVersion?: string;
  /** The operating system name, e.g. Windows 10 1809. */
  osName?: string;
  /** The name of the tested release (OS update). */
  releaseName?: string;
  /** The release version date of the tested release. */
  releaseVersionDate?: Date;
  /** The flighting ring, only for release of feature updates. */
  flightingRing?: string;
  /** The build version of the tested release (OS update). */
  buildVersion?: string;
  /** The build revision of the tested release (OS update). */
  buildRevision?: string;
  /** Test type. E.g. 'Out of box test' or 'Functional test'. */
  testType?: string;
  /** The run time of the test. */
  testRunTime?: string;
  /** Whether download data is available. */
  isDownloadDataAvailable?: boolean;
  /** Whether video data is available. */
  isVideoAvailable?: boolean;
  /** The execution status of the test. */
  executionStatus?: ExecutionStatus;
  /** The status of the test. */
  testStatus?: TestStatus;
  /** The grade of the test. */
  grade?: Grade;
  /** KB number. */
  kbNumber?: string;
  /** Interop media type. */
  interopMediaType?: string;
  /** Interop media version. */
  interopMediaVersion?: string;
  /** The version of the Windows update package. */
  packageVersion?: string;
  /** List of analysis summaries. */
  analysisSummaries?: TestResultAnalysisSummary[];
  /** Properties for inplace upgrade test. */
  inplaceUpgradeProperties?: InplaceUpgradeProperties;
}

/** An OS Update. */
export interface OSUpdateResource extends ProxyResource {
  /** The name of the OS. */
  osName?: string;
  /** The name of tested release. */
  release?: string;
  /** The flighting ring, only for release of feature updates. */
  flightingRing?: string;
  /** The build version of the tested release (OS update). */
  buildVersion?: string;
  /** The build revision of the tested release (OS update) */
  buildRevision?: string;
  /** The type of this release (OS update). */
  typePropertiesType?: Type;
  /** The release version date the tested release (OS update) */
  releaseVersionDate?: Date;
  /** The properties of baseline os for in-place upgrade test. */
  inplaceUpgradeBaselineProperties?: OsProperties;
}

/** A favorite process identifier. */
export interface FavoriteProcessResource extends ProxyResource {
  /** The actual name of the favorite process. It will be equal to resource name except for the scenario that the process name contains characters that are not allowed in the resource name. */
  actualProcessName?: string;
}

/** The Analysis Result Singleton Resource. */
export interface AnalysisResultSingletonResource extends ProxyResource {
  /** The grade of the test. */
  grade?: Grade;
  /** Type of the Analysis Result. */
  analysisResultType?: AnalysisResultType;
}

/** The email event resource. */
export interface EmailEventResource extends ProxyResource {
  /** The identifier of the email event. */
  eventId?: string;
  /** The name of the email event. */
  eventName?: string;
  /** The display name of the email event. */
  displayName?: string;
}

/** The Customer Notification Event resource. */
export interface CustomerEventResource extends ProxyResource {
  /** The name of the event subscribed to. */
  eventName?: string;
  /** The notification event receivers. */
  receivers?: NotificationEventReceiver[];
}

/** The Available In-place Upgrade OS Map resource. */
export interface AvailableInplaceUpgradeOSResource extends ProxyResource {
  /**
   * The provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** The name of an Available In-place Upgrade source OS of a Test Base Account. */
  sourceOsName?: string;
  /** The the release list of the source os. */
  sourceOsReleases?: ReleaseProperties[];
  /** The list of the corresponding Available In-place Upgrade target OS name of a Test Base Account. */
  supportedTargetOsNameList?: string[];
}

/** The Test Base Account resource. */
export interface TestBaseAccountResource extends TrackedResource {
  /**
   * The provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** The SKU of the Test Base Account. */
  sku?: TestBaseAccountSKU;
  /**
   * The access level of the Test Base Account.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly accessLevel?: string;
}

/** The Test Base Package resource. */
export interface PackageResource extends TrackedResource {
  /**
   * The provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** Application name */
  applicationName?: string;
  /** Application version */
  version?: string;
  /** The id of draft package. Used to create or update this package from a draft package. */
  draftPackageId?: string;
  /**
   * The status of the package.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly packageStatus?: PackageStatus;
  /**
   * Flag showing that whether the package is enabled. It doesn't schedule test for package which is not enabled.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isEnabled?: boolean;
  /** The file path of the package. */
  blobPath?: string;
  /**
   * The validation results. There's validation on package when it's created or updated.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly validationResults?: PackageValidationResult[];
  /**
   * OOB, functional or flow driven. Mapped to the data in 'tests' property.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly testTypes?: TestType[];
  /** Specifies the target OSs of specific OS Update types. */
  targetOSList?: TargetOSInfo[];
  /** Specifies the baseline os and target os for inplace upgrade. */
  inplaceUpgradeOSPair?: InplaceUpgradeOSInfo;
  /**
   * The UTC timestamp when the package was last modified.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastModifiedTime?: Date;
  /** The flighting ring for feature update. */
  flightingRing?: string;
  /** The list of first party applications to test along with user application. */
  firstPartyApps?: FirstPartyAppDefinition[];
  /** The detailed test information. */
  tests?: Test[];
}

/** Defines headers for DraftPackages_copyFromPackage operation. */
export interface DraftPackagesCopyFromPackageHeaders {
  /** URL to query for status of the operation. */
  azureAsyncOperation?: string;
  /** URL to query for status of the operation. */
  location?: string;
}

/** Defines headers for DraftPackages_extractFile operation. */
export interface DraftPackagesExtractFileHeaders {
  /** URL to query for status of the operation. */
  azureAsyncOperation?: string;
  /** URL to query for status of the operation. */
  location?: string;
}

/** Defines headers for DraftPackages_generateFoldersAndScripts operation. */
export interface DraftPackagesGenerateFoldersAndScriptsHeaders {
  /** URL to query for status of the operation. */
  azureAsyncOperation?: string;
  /** URL to query for status of the operation. */
  location?: string;
}

/** Defines headers for TestBaseAccounts_create operation. */
export interface TestBaseAccountsCreateHeaders {
  /** URL to query for status of the operation. */
  azureAsyncOperation?: string;
}

/** Defines headers for TestBaseAccounts_update operation. */
export interface TestBaseAccountsUpdateHeaders {
  /** URL to query for status of the operation. */
  azureAsyncOperation?: string;
  /** URL to query for status of the operation. */
  location?: string;
}

/** Defines headers for TestBaseAccounts_delete operation. */
export interface TestBaseAccountsDeleteHeaders {
  /** URL to query for status of the operation. */
  azureAsyncOperation?: string;
  /** URL to query for status of the operation. */
  location?: string;
}

/** Defines headers for TestBaseAccounts_offboard operation. */
export interface TestBaseAccountsOffboardHeaders {
  /** URL to query for status of the operation. */
  azureAsyncOperation?: string;
  /** URL to query for status of the operation. */
  location?: string;
}

/** Defines headers for Packages_create operation. */
export interface PackagesCreateHeaders {
  /** URL to query for status of the operation. */
  azureAsyncOperation?: string;
}

/** Defines headers for Packages_update operation. */
export interface PackagesUpdateHeaders {
  /** URL to query for status of the operation. */
  azureAsyncOperation?: string;
  /** URL to query for status of the operation. */
  location?: string;
}

/** Defines headers for Packages_delete operation. */
export interface PackagesDeleteHeaders {
  /** URL to query for status of the operation. */
  azureAsyncOperation?: string;
  /** URL to query for status of the operation. */
  location?: string;
}

/** Defines headers for Packages_hardDelete operation. */
export interface PackagesHardDeleteHeaders {
  /** URL to query for status of the operation. */
  azureAsyncOperation?: string;
  /** URL to query for status of the operation. */
  location?: string;
}

/** Defines headers for Packages_runTest operation. */
export interface PackagesRunTestHeaders {
  /** URL to query for status of the operation. */
  azureAsyncOperation?: string;
  /** URL to query for status of the operation. */
  location?: string;
}

/** Defines headers for CustomerEvents_create operation. */
export interface CustomerEventsCreateHeaders {
  /** URL to query for status of the operation. */
  azureAsyncOperation?: string;
}

/** Defines headers for CustomerEvents_delete operation. */
export interface CustomerEventsDeleteHeaders {
  /** URL to query for status of the operation. */
  azureAsyncOperation?: string;
  /** URL to query for status of the operation. */
  location?: string;
}

/** Known values of {@link ProvisioningState} that the service accepts. */
export enum KnownProvisioningState {
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Cancelled */
  Cancelled = "Cancelled",
  /** Creating */
  Creating = "Creating",
  /** Deleting */
  Deleting = "Deleting",
  /** Updating */
  Updating = "Updating"
}

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Cancelled** \
 * **Creating** \
 * **Deleting** \
 * **Updating**
 */
export type ProvisioningState = string;

/** Known values of {@link RequestTypes} that the service accepts. */
export enum KnownRequestTypes {
  /** PreReleaseAccess */
  PreReleaseAccess = "PreReleaseAccess"
}

/**
 * Defines values for RequestTypes. \
 * {@link KnownRequestTypes} can be used interchangeably with RequestTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **PreReleaseAccess**
 */
export type RequestTypes = string;

/** Known values of {@link Engagements} that the service accepts. */
export enum KnownEngagements {
  /** MVI */
  MVI = "MVI",
  /** MVP */
  MVP = "MVP",
  /** Suvp */
  Suvp = "SUVP",
  /** Mapp */
  Mapp = "MAPP",
  /** Other */
  Other = "Other"
}

/**
 * Defines values for Engagements. \
 * {@link KnownEngagements} can be used interchangeably with Engagements,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **MVI** \
 * **MVP** \
 * **SUVP** \
 * **MAPP** \
 * **Other**
 */
export type Engagements = string;

/** Known values of {@link RequestStatus} that the service accepts. */
export enum KnownRequestStatus {
  /** InReview */
  InReview = "InReview",
  /** Approved */
  Approved = "Approved",
  /** Declined */
  Declined = "Declined"
}

/**
 * Defines values for RequestStatus. \
 * {@link KnownRequestStatus} can be used interchangeably with RequestStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **InReview** \
 * **Approved** \
 * **Declined**
 */
export type RequestStatus = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  /** User */
  User = "User",
  /** Application */
  Application = "Application",
  /** ManagedIdentity */
  ManagedIdentity = "ManagedIdentity",
  /** Key */
  Key = "Key"
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link DraftPackageSourceType} that the service accepts. */
export enum KnownDraftPackageSourceType {
  /** Native */
  Native = "Native",
  /** IntuneWin */
  IntuneWin = "IntuneWin",
  /** TestBasePackage */
  TestBasePackage = "TestBasePackage"
}

/**
 * Defines values for DraftPackageSourceType. \
 * {@link KnownDraftPackageSourceType} can be used interchangeably with DraftPackageSourceType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Native** \
 * **IntuneWin** \
 * **TestBasePackage**
 */
export type DraftPackageSourceType = string;

/** Known values of {@link IntuneExtractStatus} that the service accepts. */
export enum KnownIntuneExtractStatus {
  /** Ready */
  Ready = "Ready",
  /** Uploading */
  Uploading = "Uploading",
  /** UploadFailed */
  UploadFailed = "UploadFailed",
  /** ExtractFailed */
  ExtractFailed = "ExtractFailed",
  /** NoDependencyApp */
  NoDependencyApp = "NoDependencyApp"
}

/**
 * Defines values for IntuneExtractStatus. \
 * {@link KnownIntuneExtractStatus} can be used interchangeably with IntuneExtractStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Ready** \
 * **Uploading** \
 * **UploadFailed** \
 * **ExtractFailed** \
 * **NoDependencyApp**
 */
export type IntuneExtractStatus = string;

/** Known values of {@link PackageStudioTabs} that the service accepts. */
export enum KnownPackageStudioTabs {
  /** Unspecified */
  Unspecified = "Unspecified",
  /** BasicsTab */
  BasicsTab = "BasicsTab",
  /** ConfigureTestTab */
  ConfigureTestTab = "ConfigureTestTab",
  /** EditPackageTab */
  EditPackageTab = "EditPackageTab",
  /** TestMatrixTab */
  TestMatrixTab = "TestMatrixTab",
  /** TagsTab */
  TagsTab = "TagsTab",
  /** ReviewAndCreateTab */
  ReviewAndCreateTab = "ReviewAndCreateTab"
}

/**
 * Defines values for PackageStudioTabs. \
 * {@link KnownPackageStudioTabs} can be used interchangeably with PackageStudioTabs,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unspecified** \
 * **BasicsTab** \
 * **ConfigureTestTab** \
 * **EditPackageTab** \
 * **TestMatrixTab** \
 * **TagsTab** \
 * **ReviewAndCreateTab**
 */
export type PackageStudioTabs = string;

/** Known values of {@link TestType} that the service accepts. */
export enum KnownTestType {
  /** OutOfBoxTest */
  OutOfBoxTest = "OutOfBoxTest",
  /** FunctionalTest */
  FunctionalTest = "FunctionalTest",
  /** FlowDrivenTest */
  FlowDrivenTest = "FlowDrivenTest"
}

/**
 * Defines values for TestType. \
 * {@link KnownTestType} can be used interchangeably with TestType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **OutOfBoxTest** \
 * **FunctionalTest** \
 * **FlowDrivenTest**
 */
export type TestType = string;

/** Known values of {@link Architecture} that the service accepts. */
export enum KnownArchitecture {
  /** X86 */
  X86 = "x86",
  /** X64 */
  X64 = "x64",
  /** Arm64 */
  Arm64 = "arm64",
  /** Arm */
  Arm = "arm",
  /** Ia64 */
  Ia64 = "ia64"
}

/**
 * Defines values for Architecture. \
 * {@link KnownArchitecture} can be used interchangeably with Architecture,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **x86** \
 * **x64** \
 * **arm64** \
 * **arm** \
 * **ia64**
 */
export type Architecture = string;

/** Known values of {@link InteropExecutionMode} that the service accepts. */
export enum KnownInteropExecutionMode {
  /** User application will test with the first party applications. For out-of-box tests, additional test cases for first party applications will also be run. */
  FirstPartyAppWithTests = "firstPartyAppWithTests",
  /** User application will test with the first party applications. */
  FirstPartyApp = "firstPartyApp"
}

/**
 * Defines values for InteropExecutionMode. \
 * {@link KnownInteropExecutionMode} can be used interchangeably with InteropExecutionMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **firstPartyAppWithTests**: User application will test with the first party applications. For out-of-box tests, additional test cases for first party applications will also be run. \
 * **firstPartyApp**: User application will test with the first party applications.
 */
export type InteropExecutionMode = string;

/** Known values of {@link ValidationRunStatus} that the service accepts. */
export enum KnownValidationRunStatus {
  /** Unknown */
  Unknown = "Unknown",
  /** Pending */
  Pending = "Pending",
  /** Passed */
  Passed = "Passed",
  /** Failed */
  Failed = "Failed"
}

/**
 * Defines values for ValidationRunStatus. \
 * {@link KnownValidationRunStatus} can be used interchangeably with ValidationRunStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **Pending** \
 * **Passed** \
 * **Failed**
 */
export type ValidationRunStatus = string;

/** Known values of {@link Action} that the service accepts. */
export enum KnownAction {
  /** Install */
  Install = "Install",
  /** Launch */
  Launch = "Launch",
  /** Close */
  Close = "Close",
  /** Uninstall */
  Uninstall = "Uninstall",
  /** Custom */
  Custom = "Custom",
  /** FlowDrivenCustom */
  FlowDrivenCustom = "FlowDrivenCustom"
}

/**
 * Defines values for Action. \
 * {@link KnownAction} can be used interchangeably with Action,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Install** \
 * **Launch** \
 * **Close** \
 * **Uninstall** \
 * **Custom** \
 * **FlowDrivenCustom**
 */
export type Action = string;

/** Known values of {@link ContentType} that the service accepts. */
export enum KnownContentType {
  /** Inline */
  Inline = "Inline",
  /** File */
  File = "File",
  /** Path */
  Path = "Path"
}

/**
 * Defines values for ContentType. \
 * {@link KnownContentType} can be used interchangeably with ContentType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Inline** \
 * **File** \
 * **Path**
 */
export type ContentType = string;

/** Known values of {@link ExtractFileType} that the service accepts. */
export enum KnownExtractFileType {
  /** TestBasePackage */
  TestBasePackage = "TestBasePackage",
  /** IntuneWinPackage */
  IntuneWinPackage = "IntuneWinPackage"
}

/**
 * Defines values for ExtractFileType. \
 * {@link KnownExtractFileType} can be used interchangeably with ExtractFileType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **TestBasePackage** \
 * **IntuneWinPackage**
 */
export type ExtractFileType = string;

/** Known values of {@link Tier} that the service accepts. */
export enum KnownTier {
  /** Standard */
  Standard = "Standard"
}

/**
 * Defines values for Tier. \
 * {@link KnownTier} can be used interchangeably with Tier,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Standard**
 */
export type Tier = string;

/** Known values of {@link OsUpdateType} that the service accepts. */
export enum KnownOsUpdateType {
  /** SecurityUpdate */
  SecurityUpdate = "SecurityUpdate",
  /** FeatureUpdate */
  FeatureUpdate = "FeatureUpdate",
  /** InplaceUpgrade */
  InplaceUpgrade = "InplaceUpgrade"
}

/**
 * Defines values for OsUpdateType. \
 * {@link KnownOsUpdateType} can be used interchangeably with OsUpdateType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SecurityUpdate** \
 * **FeatureUpdate** \
 * **InplaceUpgrade**
 */
export type OsUpdateType = string;

/** Known values of {@link OsProductState} that the service accepts. */
export enum KnownOsProductState {
  /** Disabled */
  Disabled = "Disabled",
  /** Active */
  Active = "Active"
}

/**
 * Defines values for OsProductState. \
 * {@link KnownOsProductState} can be used interchangeably with OsProductState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Disabled** \
 * **Active**
 */
export type OsProductState = string;

/** Known values of {@link Reason} that the service accepts. */
export enum KnownReason {
  /** Invalid */
  Invalid = "Invalid",
  /** AlreadyExists */
  AlreadyExists = "AlreadyExists"
}

/**
 * Defines values for Reason. \
 * {@link KnownReason} can be used interchangeably with Reason,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Invalid** \
 * **AlreadyExists**
 */
export type Reason = string;

/** Known values of {@link PackageStatus} that the service accepts. */
export enum KnownPackageStatus {
  /** Unknown */
  Unknown = "Unknown",
  /** Registered */
  Registered = "Registered",
  /** Ready */
  Ready = "Ready",
  /** Error */
  Error = "Error",
  /** ValidatingPackage */
  ValidatingPackage = "ValidatingPackage",
  /** PreValidationCheckPass */
  PreValidationCheckPass = "PreValidationCheckPass",
  /** Deleted */
  Deleted = "Deleted",
  /** ValidationLongerThanUsual */
  ValidationLongerThanUsual = "ValidationLongerThanUsual",
  /** VerifyingPackage */
  VerifyingPackage = "VerifyingPackage"
}

/**
 * Defines values for PackageStatus. \
 * {@link KnownPackageStatus} can be used interchangeably with PackageStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **Registered** \
 * **Ready** \
 * **Error** \
 * **ValidatingPackage** \
 * **PreValidationCheckPass** \
 * **Deleted** \
 * **ValidationLongerThanUsual** \
 * **VerifyingPackage**
 */
export type PackageStatus = string;

/** Known values of {@link ExecutionStatus} that the service accepts. */
export enum KnownExecutionStatus {
  /** None */
  None = "None",
  /** InProgress */
  InProgress = "InProgress",
  /** Processing */
  Processing = "Processing",
  /** Completed */
  Completed = "Completed",
  /** NotExecuted */
  NotExecuted = "NotExecuted",
  /** Incomplete */
  Incomplete = "Incomplete",
  /** Failed */
  Failed = "Failed",
  /** Succeeded */
  Succeeded = "Succeeded"
}

/**
 * Defines values for ExecutionStatus. \
 * {@link KnownExecutionStatus} can be used interchangeably with ExecutionStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **InProgress** \
 * **Processing** \
 * **Completed** \
 * **NotExecuted** \
 * **Incomplete** \
 * **Failed** \
 * **Succeeded**
 */
export type ExecutionStatus = string;

/** Known values of {@link TestStatus} that the service accepts. */
export enum KnownTestStatus {
  /** None */
  None = "None",
  /** TestExecutionInProgress */
  TestExecutionInProgress = "TestExecutionInProgress",
  /** DataProcessing */
  DataProcessing = "DataProcessing",
  /** TestFailure */
  TestFailure = "TestFailure",
  /** UpdateFailure */
  UpdateFailure = "UpdateFailure",
  /** TestAndUpdateFailure */
  TestAndUpdateFailure = "TestAndUpdateFailure",
  /** InfrastructureFailure */
  InfrastructureFailure = "InfrastructureFailure",
  /** Completed */
  Completed = "Completed"
}

/**
 * Defines values for TestStatus. \
 * {@link KnownTestStatus} can be used interchangeably with TestStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **TestExecutionInProgress** \
 * **DataProcessing** \
 * **TestFailure** \
 * **UpdateFailure** \
 * **TestAndUpdateFailure** \
 * **InfrastructureFailure** \
 * **Completed**
 */
export type TestStatus = string;

/** Known values of {@link Grade} that the service accepts. */
export enum KnownGrade {
  /** None */
  None = "None",
  /** NotAvailable */
  NotAvailable = "NotAvailable",
  /** Pass */
  Pass = "Pass",
  /** Fail */
  Fail = "Fail"
}

/**
 * Defines values for Grade. \
 * {@link KnownGrade} can be used interchangeably with Grade,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **NotAvailable** \
 * **Pass** \
 * **Fail**
 */
export type Grade = string;

/** Known values of {@link AnalysisStatus} that the service accepts. */
export enum KnownAnalysisStatus {
  /** None */
  None = "None",
  /** Completed */
  Completed = "Completed",
  /** InProgress */
  InProgress = "InProgress",
  /** Failed */
  Failed = "Failed",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Available */
  Available = "Available",
  /** NotAvailable */
  NotAvailable = "NotAvailable"
}

/**
 * Defines values for AnalysisStatus. \
 * {@link KnownAnalysisStatus} can be used interchangeably with AnalysisStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Completed** \
 * **InProgress** \
 * **Failed** \
 * **Succeeded** \
 * **Available** \
 * **NotAvailable**
 */
export type AnalysisStatus = string;

/** Known values of {@link Type} that the service accepts. */
export enum KnownType {
  /** SecurityUpdate */
  SecurityUpdate = "SecurityUpdate",
  /** FeatureUpdate */
  FeatureUpdate = "FeatureUpdate"
}

/**
 * Defines values for Type. \
 * {@link KnownType} can be used interchangeably with Type,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SecurityUpdate** \
 * **FeatureUpdate**
 */
export type Type = string;

/** Known values of {@link AnalysisResultType} that the service accepts. */
export enum KnownAnalysisResultType {
  /** ScriptExecution */
  ScriptExecution = "ScriptExecution",
  /** Reliability */
  Reliability = "Reliability",
  /** CPUUtilization */
  CPUUtilization = "CPUUtilization",
  /** MemoryUtilization */
  MemoryUtilization = "MemoryUtilization",
  /** CPURegression */
  CPURegression = "CPURegression",
  /** MemoryRegression */
  MemoryRegression = "MemoryRegression",
  /** TestAnalysis */
  TestAnalysis = "TestAnalysis"
}

/**
 * Defines values for AnalysisResultType. \
 * {@link KnownAnalysisResultType} can be used interchangeably with AnalysisResultType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ScriptExecution** \
 * **Reliability** \
 * **CPUUtilization** \
 * **MemoryUtilization** \
 * **CPURegression** \
 * **MemoryRegression** \
 * **TestAnalysis**
 */
export type AnalysisResultType = string;

/** Known values of {@link AnalysisResultName} that the service accepts. */
export enum KnownAnalysisResultName {
  /** ScriptExecution */
  ScriptExecution = "scriptExecution",
  /** Reliability */
  Reliability = "reliability",
  /** MemoryUtilization */
  MemoryUtilization = "memoryUtilization",
  /** CpuUtilization */
  CpuUtilization = "cpuUtilization",
  /** MemoryRegression */
  MemoryRegression = "memoryRegression",
  /** CpuRegression */
  CpuRegression = "cpuRegression",
  /** TestAnalysis */
  TestAnalysis = "testAnalysis"
}

/**
 * Defines values for AnalysisResultName. \
 * {@link KnownAnalysisResultName} can be used interchangeably with AnalysisResultName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **scriptExecution** \
 * **reliability** \
 * **memoryUtilization** \
 * **cpuUtilization** \
 * **memoryRegression** \
 * **cpuRegression** \
 * **testAnalysis**
 */
export type AnalysisResultName = string;

/** Known values of {@link TestAnalysisStatus} that the service accepts. */
export enum KnownTestAnalysisStatus {
  /** None */
  None = "None",
  /** Analyzing */
  Analyzing = "Analyzing",
  /** Completed */
  Completed = "Completed",
  /** Failed */
  Failed = "Failed"
}

/**
 * Defines values for TestAnalysisStatus. \
 * {@link KnownTestAnalysisStatus} can be used interchangeably with TestAnalysisStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Analyzing** \
 * **Completed** \
 * **Failed**
 */
export type TestAnalysisStatus = string;

/** Known values of {@link Category} that the service accepts. */
export enum KnownCategory {
  /** None */
  None = "None",
  /** Unidentified */
  Unidentified = "Unidentified",
  /** Package */
  Package = "Package",
  /** OSUpdate */
  OSUpdate = "OSUpdate",
  /** Infrastructure */
  Infrastructure = "Infrastructure"
}

/**
 * Defines values for Category. \
 * {@link KnownCategory} can be used interchangeably with Category,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Unidentified** \
 * **Package** \
 * **OSUpdate** \
 * **Infrastructure**
 */
export type Category = string;

/** Optional parameters. */
export interface ActionRequestsPutOptionalParams
  extends coreClient.OperationOptions {
  actionRequest?: ActionRequest;
}

/** Contains response data for the put operation. */
export type ActionRequestsPutResponse = ActionRequest;

/** Optional parameters. */
export interface ActionRequestsDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ActionRequestsListOptionalParams
  extends coreClient.OperationOptions {
  requestType?: string;
  /** According to the reverse order of time, how many first ones are taken. */
  top?: number;
}

/** Contains response data for the list operation. */
export type ActionRequestsListResponse = ActionRequests;

/** Optional parameters. */
export interface DraftPackagesListByTestBaseAccountOptionalParams
  extends coreClient.OperationOptions {
  /** Parameter used to filter draft packages by linked Test Base Package. */
  packageName?: string;
  /** Parameter used to filter draft packages by editPackage property. */
  editPackage?: boolean;
}

/** Contains response data for the listByTestBaseAccount operation. */
export type DraftPackagesListByTestBaseAccountResponse = DraftPackageListResult;

/** Optional parameters. */
export interface DraftPackagesCreateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the create operation. */
export type DraftPackagesCreateResponse = DraftPackageResource;

/** Optional parameters. */
export interface DraftPackagesUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type DraftPackagesUpdateResponse = DraftPackageResource;

/** Optional parameters. */
export interface DraftPackagesDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface DraftPackagesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type DraftPackagesGetResponse = DraftPackageResource;

/** Optional parameters. */
export interface DraftPackagesGetPathOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getPath operation. */
export type DraftPackagesGetPathResponse = DraftPackageGetPathResponse;

/** Optional parameters. */
export interface DraftPackagesCopyFromPackageOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DraftPackagesExtractFileOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DraftPackagesGenerateFoldersAndScriptsOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DraftPackagesListByTestBaseAccountNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByTestBaseAccountNext operation. */
export type DraftPackagesListByTestBaseAccountNextResponse = DraftPackageListResult;

/** Optional parameters. */
export interface SkusListOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type SkusListResponse = TestBaseAccountSKUListResult;

/** Optional parameters. */
export interface SkusListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type SkusListNextResponse = TestBaseAccountSKUListResult;

/** Optional parameters. */
export interface TestBaseAccountsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {
  /** The flag indicating if we need to include the Test Base Accounts which were soft deleted before. */
  getDeleted?: boolean;
}

/** Contains response data for the listBySubscription operation. */
export type TestBaseAccountsListBySubscriptionResponse = TestBaseAccountListResult;

/** Optional parameters. */
export interface TestBaseAccountsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {
  /** The flag indicating if we need to include the Test Base Accounts which were soft deleted before. */
  getDeleted?: boolean;
}

/** Contains response data for the listByResourceGroup operation. */
export type TestBaseAccountsListByResourceGroupResponse = TestBaseAccountListResult;

/** Optional parameters. */
export interface TestBaseAccountsCreateOptionalParams
  extends coreClient.OperationOptions {
  /** The flag indicating if we would like to restore the Test Base Accounts which were soft deleted before. */
  restore?: boolean;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type TestBaseAccountsCreateResponse = TestBaseAccountResource;

/** Optional parameters. */
export interface TestBaseAccountsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type TestBaseAccountsUpdateResponse = TestBaseAccountResource;

/** Optional parameters. */
export interface TestBaseAccountsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface TestBaseAccountsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type TestBaseAccountsGetResponse = TestBaseAccountResource;

/** Optional parameters. */
export interface TestBaseAccountsOffboardOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface TestBaseAccountsGetFileUploadUrlOptionalParams
  extends coreClient.OperationOptions {
  /** Parameters supplied to the Test Base Account GetFileUploadURL operation. */
  parameters?: GetFileUploadURLParameters;
}

/** Contains response data for the getFileUploadUrl operation. */
export type TestBaseAccountsGetFileUploadUrlResponse = FileUploadURLResponse;

/** Optional parameters. */
export interface TestBaseAccountsCheckPackageNameAvailabilityOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the checkPackageNameAvailability operation. */
export type TestBaseAccountsCheckPackageNameAvailabilityResponse = CheckNameAvailabilityResult;

/** Optional parameters. */
export interface TestBaseAccountsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type TestBaseAccountsListBySubscriptionNextResponse = TestBaseAccountListResult;

/** Optional parameters. */
export interface TestBaseAccountsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type TestBaseAccountsListByResourceGroupNextResponse = TestBaseAccountListResult;

/** Optional parameters. */
export interface UsageListOptionalParams extends coreClient.OperationOptions {
  /** Odata filter */
  filter?: string;
}

/** Contains response data for the list operation. */
export type UsageListResponse = TestBaseAccountUsageDataList;

/** Optional parameters. */
export interface UsageListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type UsageListNextResponse = TestBaseAccountUsageDataList;

/** Optional parameters. */
export interface AvailableOSListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type AvailableOSListResponse = AvailableOSListResult;

/** Optional parameters. */
export interface AvailableOSGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type AvailableOSGetResponse = AvailableOSResource;

/** Optional parameters. */
export interface AvailableOSListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type AvailableOSListNextResponse = AvailableOSListResult;

/** Optional parameters. */
export interface FeatureUpdateSupportedOsesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type FeatureUpdateSupportedOsesListResponse = FeatureUpdateSupportedOsesResult;

/** Optional parameters. */
export interface FeatureUpdateSupportedOsesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type FeatureUpdateSupportedOsesListNextResponse = FeatureUpdateSupportedOsesResult;

/** Optional parameters. */
export interface FlightingRingsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type FlightingRingsListResponse = FlightingRingListResult;

/** Optional parameters. */
export interface FlightingRingsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type FlightingRingsGetResponse = FlightingRingResource;

/** Optional parameters. */
export interface FlightingRingsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type FlightingRingsListNextResponse = FlightingRingListResult;

/** Optional parameters. */
export interface FirstPartyAppsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type FirstPartyAppsListResponse = FirstPartyAppListResult;

/** Optional parameters. */
export interface FirstPartyAppsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type FirstPartyAppsGetResponse = FirstPartyAppResource;

/** Optional parameters. */
export interface FirstPartyAppsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type FirstPartyAppsListNextResponse = FirstPartyAppListResult;

/** Optional parameters. */
export interface TestTypesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type TestTypesListResponse = TestTypeListResult;

/** Optional parameters. */
export interface TestTypesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type TestTypesGetResponse = TestTypeResource;

/** Optional parameters. */
export interface TestTypesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type TestTypesListNextResponse = TestTypeListResult;

/** Optional parameters. */
export interface PackagesListByTestBaseAccountOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByTestBaseAccount operation. */
export type PackagesListByTestBaseAccountResponse = PackageListResult;

/** Optional parameters. */
export interface PackagesCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type PackagesCreateResponse = PackageResource;

/** Optional parameters. */
export interface PackagesUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type PackagesUpdateResponse = PackageResource;

/** Optional parameters. */
export interface PackagesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface PackagesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type PackagesGetResponse = PackageResource;

/** Optional parameters. */
export interface PackagesHardDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface PackagesGetDownloadURLOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getDownloadURL operation. */
export type PackagesGetDownloadURLResponse = DownloadURLResponse;

/** Optional parameters. */
export interface PackagesRunTestOptionalParams
  extends coreClient.OperationOptions {
  /** The parameters supplied to the Test Base Package to start a Test Run. */
  parameters?: PackageRunTestParameters;
}

/** Contains response data for the runTest operation. */
export type PackagesRunTestResponse = PackagesRunTestHeaders;

/** Optional parameters. */
export interface PackagesListByTestBaseAccountNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByTestBaseAccountNext operation. */
export type PackagesListByTestBaseAccountNextResponse = PackageListResult;

/** Optional parameters. */
export interface TestSummariesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type TestSummariesListResponse = TestSummaryListResult;

/** Optional parameters. */
export interface TestSummariesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type TestSummariesGetResponse = TestSummaryResource;

/** Optional parameters. */
export interface TestSummariesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type TestSummariesListNextResponse = TestSummaryListResult;

/** Optional parameters. */
export interface TestResultsListOptionalParams
  extends coreClient.OperationOptions {
  /** Odata filter */
  filter?: string;
}

/** Contains response data for the list operation. */
export type TestResultsListResponse = TestResultListResult;

/** Optional parameters. */
export interface TestResultsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type TestResultsGetResponse = TestResultResource;

/** Optional parameters. */
export interface TestResultsGetDownloadURLOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getDownloadURL operation. */
export type TestResultsGetDownloadURLResponse = DownloadURLResponse;

/** Optional parameters. */
export interface TestResultsGetVideoDownloadURLOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getVideoDownloadURL operation. */
export type TestResultsGetVideoDownloadURLResponse = DownloadURLResponse;

/** Optional parameters. */
export interface TestResultsGetConsoleLogDownloadURLOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getConsoleLogDownloadURL operation. */
export type TestResultsGetConsoleLogDownloadURLResponse = DownloadURLResponse;

/** Optional parameters. */
export interface TestResultsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type TestResultsListNextResponse = TestResultListResult;

/** Optional parameters. */
export interface OSUpdatesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OSUpdatesListResponse = OSUpdateListResult;

/** Optional parameters. */
export interface OSUpdatesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type OSUpdatesGetResponse = OSUpdateResource;

/** Optional parameters. */
export interface OSUpdatesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OSUpdatesListNextResponse = OSUpdateListResult;

/** Optional parameters. */
export interface FavoriteProcessesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type FavoriteProcessesListResponse = FavoriteProcessListResult;

/** Optional parameters. */
export interface FavoriteProcessesCreateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the create operation. */
export type FavoriteProcessesCreateResponse = FavoriteProcessResource;

/** Optional parameters. */
export interface FavoriteProcessesDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface FavoriteProcessesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type FavoriteProcessesGetResponse = FavoriteProcessResource;

/** Optional parameters. */
export interface FavoriteProcessesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type FavoriteProcessesListNextResponse = FavoriteProcessListResult;

/** Optional parameters. */
export interface AnalysisResultsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type AnalysisResultsListResponse = AnalysisResultListResult;

/** Optional parameters. */
export interface AnalysisResultsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type AnalysisResultsGetResponse = AnalysisResultSingletonResource;

/** Optional parameters. */
export interface EmailEventsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type EmailEventsListResponse = EmailEventListResult;

/** Optional parameters. */
export interface EmailEventsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type EmailEventsGetResponse = EmailEventResource;

/** Optional parameters. */
export interface EmailEventsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type EmailEventsListNextResponse = EmailEventListResult;

/** Optional parameters. */
export interface CustomerEventsListByTestBaseAccountOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByTestBaseAccount operation. */
export type CustomerEventsListByTestBaseAccountResponse = CustomerEventListResult;

/** Optional parameters. */
export interface CustomerEventsCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type CustomerEventsCreateResponse = CustomerEventResource;

/** Optional parameters. */
export interface CustomerEventsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface CustomerEventsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type CustomerEventsGetResponse = CustomerEventResource;

/** Optional parameters. */
export interface CustomerEventsListByTestBaseAccountNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByTestBaseAccountNext operation. */
export type CustomerEventsListByTestBaseAccountNextResponse = CustomerEventListResult;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationListResult;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export interface BillingHubServiceGetFreeHourBalanceOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getFreeHourBalance operation. */
export type BillingHubServiceGetFreeHourBalanceResponse = BillingHubGetFreeHourBalanceResponse;

/** Optional parameters. */
export interface BillingHubServiceGetUsageOptionalParams
  extends coreClient.OperationOptions {
  getUsageRequest?: BillingHubGetUsageRequest;
}

/** Contains response data for the getUsage operation. */
export type BillingHubServiceGetUsageResponse = BillingHubGetUsageResponse;

/** Optional parameters. */
export interface AvailableInplaceUpgradeOSListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type AvailableInplaceUpgradeOSListResponse = AvailableInplaceUpgradeOSListResult;

/** Optional parameters. */
export interface AvailableInplaceUpgradeOSGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type AvailableInplaceUpgradeOSGetResponse = AvailableInplaceUpgradeOSResource;

/** Optional parameters. */
export interface AvailableInplaceUpgradeOSListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type AvailableInplaceUpgradeOSListNextResponse = AvailableInplaceUpgradeOSListResult;

/** Optional parameters. */
export interface TestBaseOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
