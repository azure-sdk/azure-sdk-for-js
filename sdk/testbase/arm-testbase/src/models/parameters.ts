/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter
} from "@azure/core-client";
import {
  ActionRequest as ActionRequestMapper,
  ChatRequest as ChatRequestMapper,
  CustomImageResource as CustomImageResourceMapper,
  ImageNameCheckAvailabilityParameters as ImageNameCheckAvailabilityParametersMapper,
  ImageDefinitionResource as ImageDefinitionResourceMapper,
  DraftPackageResource as DraftPackageResourceMapper,
  DraftPackageUpdateParameters as DraftPackageUpdateParametersMapper,
  CopyFromPackageOperationParameters as CopyFromPackageOperationParametersMapper,
  ExtractFileOperationParameters as ExtractFileOperationParametersMapper,
  GenerateOperationParameters as GenerateOperationParametersMapper,
  TestBaseAccountResource as TestBaseAccountResourceMapper,
  TestBaseAccountUpdateParameters as TestBaseAccountUpdateParametersMapper,
  GetFileUploadURLParameters as GetFileUploadURLParametersMapper,
  PackageCheckNameAvailabilityParameters as PackageCheckNameAvailabilityParametersMapper,
  PackageResource as PackageResourceMapper,
  PackageUpdateParameters as PackageUpdateParametersMapper,
  PackageRunTestParameters as PackageRunTestParametersMapper,
  TestResultConsoleLogDownloadURLParameters as TestResultConsoleLogDownloadURLParametersMapper,
  FavoriteProcessResource as FavoriteProcessResourceMapper,
  CustomerEventResource as CustomerEventResourceMapper,
  BillingHubGetUsageRequest as BillingHubGetUsageRequestMapper,
  CredentialResource as CredentialResourceMapper
} from "../models/mappers";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "Uuid"
    }
  }
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    constraints: {
      MaxLength: 90,
      MinLength: 1
    },
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const testBaseAccountName: OperationURLParameter = {
  parameterPath: "testBaseAccountName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[A-Za-z0-9]([A-Za-z0-9_]|([-. ][A-Za-z0-9]))+$")
    },
    serializedName: "testBaseAccountName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2023-11-01-preview",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const actionRequestName: OperationURLParameter = {
  parameterPath: "actionRequestName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[A-Za-z0-9]([A-Za-z0-9_]|([-. ][A-Za-z0-9]))+$")
    },
    serializedName: "actionRequestName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const actionRequest: OperationParameter = {
  parameterPath: ["options", "actionRequest"],
  mapper: ActionRequestMapper
};

export const requestType: OperationQueryParameter = {
  parameterPath: ["options", "requestType"],
  mapper: {
    serializedName: "requestType",
    type: {
      name: "String"
    }
  }
};

export const top: OperationQueryParameter = {
  parameterPath: ["options", "top"],
  mapper: {
    serializedName: "top",
    type: {
      name: "Number"
    }
  }
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const chatSessionName: OperationURLParameter = {
  parameterPath: "chatSessionName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[A-Za-z0-9]([A-Za-z0-9_]|([-. ][A-Za-z0-9]))+$")
    },
    serializedName: "chatSessionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters: OperationParameter = {
  parameterPath: "parameters",
  mapper: ChatRequestMapper
};

export const parameters1: OperationParameter = {
  parameterPath: "parameters",
  mapper: CustomImageResourceMapper
};

export const customImageName: OperationURLParameter = {
  parameterPath: "customImageName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[A-Za-z0-9]([A-Za-z0-9_]|([-. ][A-Za-z0-9]))+$")
    },
    serializedName: "customImageName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters2: OperationParameter = {
  parameterPath: "parameters",
  mapper: ImageNameCheckAvailabilityParametersMapper
};

export const parameters3: OperationParameter = {
  parameterPath: "parameters",
  mapper: ImageDefinitionResourceMapper
};

export const imageDefinitionName: OperationURLParameter = {
  parameterPath: "imageDefinitionName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[A-Za-z0-9]([A-Za-z0-9_]|([-. ][A-Za-z0-9]))+$")
    },
    serializedName: "imageDefinitionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const vhdName: OperationURLParameter = {
  parameterPath: "vhdName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9_.-]+$")
    },
    serializedName: "vhdName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const packageName: OperationQueryParameter = {
  parameterPath: ["options", "packageName"],
  mapper: {
    serializedName: "packageName",
    type: {
      name: "String"
    }
  }
};

export const editPackage: OperationQueryParameter = {
  parameterPath: ["options", "editPackage"],
  mapper: {
    serializedName: "editPackage",
    type: {
      name: "Boolean"
    }
  }
};

export const parameters4: OperationParameter = {
  parameterPath: "parameters",
  mapper: DraftPackageResourceMapper
};

export const draftPackageName: OperationURLParameter = {
  parameterPath: "draftPackageName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[A-Za-z0-9]([A-Za-z0-9_]|([-. ][A-Za-z0-9]))+$")
    },
    serializedName: "draftPackageName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters5: OperationParameter = {
  parameterPath: "parameters",
  mapper: DraftPackageUpdateParametersMapper
};

export const parameters6: OperationParameter = {
  parameterPath: "parameters",
  mapper: CopyFromPackageOperationParametersMapper
};

export const parameters7: OperationParameter = {
  parameterPath: "parameters",
  mapper: ExtractFileOperationParametersMapper
};

export const parameters8: OperationParameter = {
  parameterPath: "parameters",
  mapper: GenerateOperationParametersMapper
};

export const freeHourBalanceName: OperationURLParameter = {
  parameterPath: "freeHourBalanceName",
  mapper: {
    serializedName: "freeHourBalanceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const getDeleted: OperationQueryParameter = {
  parameterPath: ["options", "getDeleted"],
  mapper: {
    serializedName: "getDeleted",
    type: {
      name: "Boolean"
    }
  }
};

export const parameters9: OperationParameter = {
  parameterPath: "parameters",
  mapper: TestBaseAccountResourceMapper
};

export const restore: OperationQueryParameter = {
  parameterPath: ["options", "restore"],
  mapper: {
    serializedName: "restore",
    type: {
      name: "Boolean"
    }
  }
};

export const parameters10: OperationParameter = {
  parameterPath: "parameters",
  mapper: TestBaseAccountUpdateParametersMapper
};

export const parameters11: OperationParameter = {
  parameterPath: ["options", "parameters"],
  mapper: GetFileUploadURLParametersMapper
};

export const parameters12: OperationParameter = {
  parameterPath: "parameters",
  mapper: PackageCheckNameAvailabilityParametersMapper
};

export const filter: OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const osUpdateType: OperationQueryParameter = {
  parameterPath: "osUpdateType",
  mapper: {
    serializedName: "osUpdateType",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const availableOSResourceName: OperationURLParameter = {
  parameterPath: "availableOSResourceName",
  mapper: {
    serializedName: "availableOSResourceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const flightingRingResourceName: OperationURLParameter = {
  parameterPath: "flightingRingResourceName",
  mapper: {
    serializedName: "flightingRingResourceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const firstPartyAppResourceName: OperationURLParameter = {
  parameterPath: "firstPartyAppResourceName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[A-Za-z0-9]([A-Za-z0-9]|(-[A-Za-z0-9]))+$")
    },
    serializedName: "firstPartyAppResourceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const keyword: OperationQueryParameter = {
  parameterPath: ["options", "keyword"],
  mapper: {
    serializedName: "keyword",
    type: {
      name: "String"
    }
  }
};

export const applicationType: OperationQueryParameter = {
  parameterPath: ["options", "applicationType"],
  mapper: {
    serializedName: "applicationType",
    type: {
      name: "String"
    }
  }
};

export const orderBy: OperationQueryParameter = {
  parameterPath: ["options", "orderBy"],
  mapper: {
    defaultValue: "relevance",
    serializedName: "orderBy",
    type: {
      name: "String"
    }
  }
};

export const galleryAppName: OperationURLParameter = {
  parameterPath: "galleryAppName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[A-Za-z0-9]([A-Za-z0-9]|(-[A-Za-z0-9]))+$")
    },
    serializedName: "galleryAppName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const galleryAppSkuName: OperationURLParameter = {
  parameterPath: "galleryAppSkuName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[A-Za-z0-9]([A-Za-z0-9]|(-[A-Za-z0-9]))+$")
    },
    serializedName: "galleryAppSkuName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const testTypeResourceName: OperationURLParameter = {
  parameterPath: "testTypeResourceName",
  mapper: {
    serializedName: "testTypeResourceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters13: OperationParameter = {
  parameterPath: "parameters",
  mapper: PackageResourceMapper
};

export const packageName1: OperationURLParameter = {
  parameterPath: "packageName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[A-Za-z0-9]([A-Za-z0-9_]|([-. ][A-Za-z0-9]))+$")
    },
    serializedName: "packageName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters14: OperationParameter = {
  parameterPath: "parameters",
  mapper: PackageUpdateParametersMapper
};

export const parameters15: OperationParameter = {
  parameterPath: ["options", "parameters"],
  mapper: PackageRunTestParametersMapper
};

export const testSummaryName: OperationURLParameter = {
  parameterPath: "testSummaryName",
  mapper: {
    serializedName: "testSummaryName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const testResultName: OperationURLParameter = {
  parameterPath: "testResultName",
  mapper: {
    serializedName: "testResultName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters16: OperationParameter = {
  parameterPath: "parameters",
  mapper: TestResultConsoleLogDownloadURLParametersMapper
};

export const osUpdateResourceName: OperationURLParameter = {
  parameterPath: "osUpdateResourceName",
  mapper: {
    serializedName: "osUpdateResourceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters17: OperationParameter = {
  parameterPath: "parameters",
  mapper: FavoriteProcessResourceMapper
};

export const favoriteProcessResourceName: OperationURLParameter = {
  parameterPath: "favoriteProcessResourceName",
  mapper: {
    serializedName: "favoriteProcessResourceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const analysisResultType: OperationQueryParameter = {
  parameterPath: "analysisResultType",
  mapper: {
    serializedName: "analysisResultType",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const analysisResultName: OperationURLParameter = {
  parameterPath: "analysisResultName",
  mapper: {
    serializedName: "analysisResultName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const emailEventResourceName: OperationURLParameter = {
  parameterPath: "emailEventResourceName",
  mapper: {
    serializedName: "emailEventResourceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters18: OperationParameter = {
  parameterPath: "parameters",
  mapper: CustomerEventResourceMapper
};

export const customerEventName: OperationURLParameter = {
  parameterPath: "customerEventName",
  mapper: {
    serializedName: "customerEventName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const getUsageRequest: OperationParameter = {
  parameterPath: ["options", "getUsageRequest"],
  mapper: BillingHubGetUsageRequestMapper
};

export const availableInplaceUpgradeOSResourceName: OperationURLParameter = {
  parameterPath: "availableInplaceUpgradeOSResourceName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[A-Za-z0-9]([A-Za-z0-9_]|(-{1,3}[A-Za-z0-9]))+$")
    },
    serializedName: "availableInplaceUpgradeOSResourceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const credentialName: OperationURLParameter = {
  parameterPath: "credentialName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[A-Za-z0-9]([A-Za-z0-9_]|([-. ][A-Za-z0-9]))+$")
    },
    serializedName: "credentialName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters19: OperationParameter = {
  parameterPath: "parameters",
  mapper: CredentialResourceMapper
};
