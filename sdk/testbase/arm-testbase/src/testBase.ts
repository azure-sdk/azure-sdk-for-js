/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreRestPipeline from "@azure/core-rest-pipeline";
import {
  PipelineRequest,
  PipelineResponse,
  SendRequest
} from "@azure/core-rest-pipeline";
import * as coreAuth from "@azure/core-auth";
import {
  ActionRequestsOperationsImpl,
  ChatSessionsImpl,
  ChatSessionImpl,
  CustomImagesImpl,
  ImageDefinitionsImpl,
  VHDsImpl,
  DraftPackagesImpl,
  FreeHourBalancesImpl,
  SkusImpl,
  TestBaseAccountsImpl,
  UsageImpl,
  AvailableOSImpl,
  FeatureUpdateSupportedOsesImpl,
  FlightingRingsImpl,
  FirstPartyAppsImpl,
  GalleryAppsImpl,
  GalleryAppSkusImpl,
  TestTypesImpl,
  PackagesImpl,
  TestSummariesImpl,
  TestResultsImpl,
  OSUpdatesImpl,
  FavoriteProcessesImpl,
  AnalysisResultsImpl,
  EmailEventsImpl,
  CustomerEventsImpl,
  OperationsImpl,
  BillingHubServiceImpl,
  AvailableInplaceUpgradeOSImpl,
  CredentialImpl,
  CredentialsImpl
} from "./operations";
import {
  ActionRequestsOperations,
  ChatSessions,
  ChatSession,
  CustomImages,
  ImageDefinitions,
  VHDs,
  DraftPackages,
  FreeHourBalances,
  Skus,
  TestBaseAccounts,
  Usage,
  AvailableOS,
  FeatureUpdateSupportedOses,
  FlightingRings,
  FirstPartyApps,
  GalleryApps,
  GalleryAppSkus,
  TestTypes,
  Packages,
  TestSummaries,
  TestResults,
  OSUpdates,
  FavoriteProcesses,
  AnalysisResults,
  EmailEvents,
  CustomerEvents,
  Operations,
  BillingHubService,
  AvailableInplaceUpgradeOS,
  Credential,
  Credentials
} from "./operationsInterfaces";
import { TestBaseOptionalParams } from "./models";

export class TestBase extends coreClient.ServiceClient {
  $host: string;
  subscriptionId: string;
  apiVersion: string;

  /**
   * Initializes a new instance of the TestBase class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param subscriptionId The ID of the target subscription. The value must be an UUID.
   * @param options The parameter options
   */
  constructor(
    credentials: coreAuth.TokenCredential,
    subscriptionId: string,
    options?: TestBaseOptionalParams
  ) {
    if (credentials === undefined) {
      throw new Error("'credentials' cannot be null");
    }
    if (subscriptionId === undefined) {
      throw new Error("'subscriptionId' cannot be null");
    }

    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: TestBaseOptionalParams = {
      requestContentType: "application/json; charset=utf-8",
      credential: credentials
    };

    const packageDetails = `azsdk-js-arm-testbase/1.0.0-beta.1`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix
      },
      endpoint:
        options.endpoint ?? options.baseUri ?? "https://management.azure.com"
    };
    super(optionsWithDefaults);

    let bearerTokenAuthenticationPolicyFound: boolean = false;
    if (options?.pipeline && options.pipeline.getOrderedPolicies().length > 0) {
      const pipelinePolicies: coreRestPipeline.PipelinePolicy[] = options.pipeline.getOrderedPolicies();
      bearerTokenAuthenticationPolicyFound = pipelinePolicies.some(
        (pipelinePolicy) =>
          pipelinePolicy.name ===
          coreRestPipeline.bearerTokenAuthenticationPolicyName
      );
    }
    if (
      !options ||
      !options.pipeline ||
      options.pipeline.getOrderedPolicies().length == 0 ||
      !bearerTokenAuthenticationPolicyFound
    ) {
      this.pipeline.removePolicy({
        name: coreRestPipeline.bearerTokenAuthenticationPolicyName
      });
      this.pipeline.addPolicy(
        coreRestPipeline.bearerTokenAuthenticationPolicy({
          credential: credentials,
          scopes:
            optionsWithDefaults.credentialScopes ??
            `${optionsWithDefaults.endpoint}/.default`,
          challengeCallbacks: {
            authorizeRequestOnChallenge:
              coreClient.authorizeRequestOnClaimChallenge
          }
        })
      );
    }
    // Parameter assignments
    this.subscriptionId = subscriptionId;

    // Assigning values to Constant parameters
    this.$host = options.$host || "https://management.azure.com";
    this.apiVersion = options.apiVersion || "2023-11-01-preview";
    this.actionRequestsOperations = new ActionRequestsOperationsImpl(this);
    this.chatSessions = new ChatSessionsImpl(this);
    this.chatSession = new ChatSessionImpl(this);
    this.customImages = new CustomImagesImpl(this);
    this.imageDefinitions = new ImageDefinitionsImpl(this);
    this.vHDs = new VHDsImpl(this);
    this.draftPackages = new DraftPackagesImpl(this);
    this.freeHourBalances = new FreeHourBalancesImpl(this);
    this.skus = new SkusImpl(this);
    this.testBaseAccounts = new TestBaseAccountsImpl(this);
    this.usage = new UsageImpl(this);
    this.availableOS = new AvailableOSImpl(this);
    this.featureUpdateSupportedOses = new FeatureUpdateSupportedOsesImpl(this);
    this.flightingRings = new FlightingRingsImpl(this);
    this.firstPartyApps = new FirstPartyAppsImpl(this);
    this.galleryApps = new GalleryAppsImpl(this);
    this.galleryAppSkus = new GalleryAppSkusImpl(this);
    this.testTypes = new TestTypesImpl(this);
    this.packages = new PackagesImpl(this);
    this.testSummaries = new TestSummariesImpl(this);
    this.testResults = new TestResultsImpl(this);
    this.oSUpdates = new OSUpdatesImpl(this);
    this.favoriteProcesses = new FavoriteProcessesImpl(this);
    this.analysisResults = new AnalysisResultsImpl(this);
    this.emailEvents = new EmailEventsImpl(this);
    this.customerEvents = new CustomerEventsImpl(this);
    this.operations = new OperationsImpl(this);
    this.billingHubService = new BillingHubServiceImpl(this);
    this.availableInplaceUpgradeOS = new AvailableInplaceUpgradeOSImpl(this);
    this.credential = new CredentialImpl(this);
    this.credentials = new CredentialsImpl(this);
    this.addCustomApiVersionPolicy(options.apiVersion);
  }

  /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
  private addCustomApiVersionPolicy(apiVersion?: string) {
    if (!apiVersion) {
      return;
    }
    const apiVersionPolicy = {
      name: "CustomApiVersionPolicy",
      async sendRequest(
        request: PipelineRequest,
        next: SendRequest
      ): Promise<PipelineResponse> {
        const param = request.url.split("?");
        if (param.length > 1) {
          const newParams = param[1].split("&").map((item) => {
            if (item.indexOf("api-version") > -1) {
              return "api-version=" + apiVersion;
            } else {
              return item;
            }
          });
          request.url = param[0] + "?" + newParams.join("&");
        }
        return next(request);
      }
    };
    this.pipeline.addPolicy(apiVersionPolicy);
  }

  actionRequestsOperations: ActionRequestsOperations;
  chatSessions: ChatSessions;
  chatSession: ChatSession;
  customImages: CustomImages;
  imageDefinitions: ImageDefinitions;
  vHDs: VHDs;
  draftPackages: DraftPackages;
  freeHourBalances: FreeHourBalances;
  skus: Skus;
  testBaseAccounts: TestBaseAccounts;
  usage: Usage;
  availableOS: AvailableOS;
  featureUpdateSupportedOses: FeatureUpdateSupportedOses;
  flightingRings: FlightingRings;
  firstPartyApps: FirstPartyApps;
  galleryApps: GalleryApps;
  galleryAppSkus: GalleryAppSkus;
  testTypes: TestTypes;
  packages: Packages;
  testSummaries: TestSummaries;
  testResults: TestResults;
  oSUpdates: OSUpdates;
  favoriteProcesses: FavoriteProcesses;
  analysisResults: AnalysisResults;
  emailEvents: EmailEvents;
  customerEvents: CustomerEvents;
  operations: Operations;
  billingHubService: BillingHubService;
  availableInplaceUpgradeOS: AvailableInplaceUpgradeOS;
  credential: Credential;
  credentials: Credentials;
}
