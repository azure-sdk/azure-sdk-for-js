/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  TestBaseAccountResource,
  TestBaseAccountCreateOptionalParams,
  TestBaseAccountCreateResponse,
  TestBaseAccountUpdateParameters,
  TestBaseAccountUpdateOptionalParams,
  TestBaseAccountUpdateResponse,
  TestBaseAccountDeleteOptionalParams,
  TestBaseAccountGetOptionalParams,
  TestBaseAccountGetResponse,
  TestBaseAccountOffboardOptionalParams
} from "../models";

/** Interface representing a TestBaseAccount. */
export interface TestBaseAccount {
  /**
   * Create or replace (overwrite/recreate, with potential downtime) a Test Base Account in the specified
   * subscription.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param parameters Parameters supplied to create a Test Base Account.
   * @param options The options parameters.
   */
  beginCreate(
    resourceGroupName: string,
    testBaseAccountName: string,
    parameters: TestBaseAccountResource,
    options?: TestBaseAccountCreateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<TestBaseAccountCreateResponse>,
      TestBaseAccountCreateResponse
    >
  >;
  /**
   * Create or replace (overwrite/recreate, with potential downtime) a Test Base Account in the specified
   * subscription.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param parameters Parameters supplied to create a Test Base Account.
   * @param options The options parameters.
   */
  beginCreateAndWait(
    resourceGroupName: string,
    testBaseAccountName: string,
    parameters: TestBaseAccountResource,
    options?: TestBaseAccountCreateOptionalParams
  ): Promise<TestBaseAccountCreateResponse>;
  /**
   * Update an existing Test Base Account.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param parameters Parameters supplied to update a Test Base Account.
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    testBaseAccountName: string,
    parameters: TestBaseAccountUpdateParameters,
    options?: TestBaseAccountUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<TestBaseAccountUpdateResponse>,
      TestBaseAccountUpdateResponse
    >
  >;
  /**
   * Update an existing Test Base Account.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param parameters Parameters supplied to update a Test Base Account.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    testBaseAccountName: string,
    parameters: TestBaseAccountUpdateParameters,
    options?: TestBaseAccountUpdateOptionalParams
  ): Promise<TestBaseAccountUpdateResponse>;
  /**
   * Deletes a Test Base Account.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    testBaseAccountName: string,
    options?: TestBaseAccountDeleteOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Deletes a Test Base Account.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    testBaseAccountName: string,
    options?: TestBaseAccountDeleteOptionalParams
  ): Promise<void>;
  /**
   * Gets a Test Base Account.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    testBaseAccountName: string,
    options?: TestBaseAccountGetOptionalParams
  ): Promise<TestBaseAccountGetResponse>;
  /**
   * Offboard a Test Base Account.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param options The options parameters.
   */
  beginOffboard(
    resourceGroupName: string,
    testBaseAccountName: string,
    options?: TestBaseAccountOffboardOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Offboard a Test Base Account.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param options The options parameters.
   */
  beginOffboardAndWait(
    resourceGroupName: string,
    testBaseAccountName: string,
    options?: TestBaseAccountOffboardOptionalParams
  ): Promise<void>;
}
