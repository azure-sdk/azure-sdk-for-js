/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  PackageResource,
  PackagesListByTestBaseAccountOptionalParams,
  PackagesCreateOptionalParams,
  PackagesCreateResponse,
  PackageUpdateParameters,
  PackagesUpdateOptionalParams,
  PackagesUpdateResponse,
  PackagesDeleteOptionalParams,
  PackagesGetOptionalParams,
  PackagesGetResponse,
  PackagesHardDeleteOptionalParams,
  PackagesGetDownloadURLOptionalParams,
  PackagesGetDownloadURLResponse,
  PackagesRunTestOptionalParams,
  PackagesRunTestResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Packages. */
export interface Packages {
  /**
   * Lists all the packages under a Test Base Account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param options The options parameters.
   */
  listByTestBaseAccount(
    resourceGroupName: string,
    testBaseAccountName: string,
    options?: PackagesListByTestBaseAccountOptionalParams
  ): PagedAsyncIterableIterator<PackageResource>;
  /**
   * Create or replace (overwrite/recreate, with potential downtime) a Test Base Package.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param packageName The resource name of the Test Base Package.
   * @param parameters Parameters supplied to create a Test Base Package.
   * @param options The options parameters.
   */
  beginCreate(
    resourceGroupName: string,
    testBaseAccountName: string,
    packageName: string,
    parameters: PackageResource,
    options?: PackagesCreateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<PackagesCreateResponse>,
      PackagesCreateResponse
    >
  >;
  /**
   * Create or replace (overwrite/recreate, with potential downtime) a Test Base Package.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param packageName The resource name of the Test Base Package.
   * @param parameters Parameters supplied to create a Test Base Package.
   * @param options The options parameters.
   */
  beginCreateAndWait(
    resourceGroupName: string,
    testBaseAccountName: string,
    packageName: string,
    parameters: PackageResource,
    options?: PackagesCreateOptionalParams
  ): Promise<PackagesCreateResponse>;
  /**
   * Update an existing Test Base Package.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param packageName The resource name of the Test Base Package.
   * @param parameters Parameters supplied to update a Test Base Package.
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    testBaseAccountName: string,
    packageName: string,
    parameters: PackageUpdateParameters,
    options?: PackagesUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<PackagesUpdateResponse>,
      PackagesUpdateResponse
    >
  >;
  /**
   * Update an existing Test Base Package.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param packageName The resource name of the Test Base Package.
   * @param parameters Parameters supplied to update a Test Base Package.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    testBaseAccountName: string,
    packageName: string,
    parameters: PackageUpdateParameters,
    options?: PackagesUpdateOptionalParams
  ): Promise<PackagesUpdateResponse>;
  /**
   * Deletes a Test Base Package.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param packageName The resource name of the Test Base Package.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    testBaseAccountName: string,
    packageName: string,
    options?: PackagesDeleteOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Deletes a Test Base Package.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param packageName The resource name of the Test Base Package.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    testBaseAccountName: string,
    packageName: string,
    options?: PackagesDeleteOptionalParams
  ): Promise<void>;
  /**
   * Gets a Test Base Package.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param packageName The resource name of the Test Base Package.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    testBaseAccountName: string,
    packageName: string,
    options?: PackagesGetOptionalParams
  ): Promise<PackagesGetResponse>;
  /**
   * Hard Delete a Test Base Package.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param packageName The resource name of the Test Base Package.
   * @param options The options parameters.
   */
  beginHardDelete(
    resourceGroupName: string,
    testBaseAccountName: string,
    packageName: string,
    options?: PackagesHardDeleteOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Hard Delete a Test Base Package.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param packageName The resource name of the Test Base Package.
   * @param options The options parameters.
   */
  beginHardDeleteAndWait(
    resourceGroupName: string,
    testBaseAccountName: string,
    packageName: string,
    options?: PackagesHardDeleteOptionalParams
  ): Promise<void>;
  /**
   * Gets the download URL of a package.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param packageName The resource name of the Test Base Package.
   * @param options The options parameters.
   */
  getDownloadURL(
    resourceGroupName: string,
    testBaseAccountName: string,
    packageName: string,
    options?: PackagesGetDownloadURLOptionalParams
  ): Promise<PackagesGetDownloadURLResponse>;
  /**
   * Trigger a test run on the package.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param packageName The resource name of the Test Base Package.
   * @param options The options parameters.
   */
  runTest(
    resourceGroupName: string,
    testBaseAccountName: string,
    packageName: string,
    options?: PackagesRunTestOptionalParams
  ): Promise<PackagesRunTestResponse>;
}
