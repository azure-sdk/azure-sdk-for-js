/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  DraftPackageResource,
  DraftPackagesListByTestBaseAccountOptionalParams,
  DraftPackagesCreateOptionalParams,
  DraftPackagesCreateResponse,
  DraftPackageUpdateParameters,
  DraftPackagesUpdateOptionalParams,
  DraftPackagesUpdateResponse,
  DraftPackagesDeleteOptionalParams,
  DraftPackagesGetOptionalParams,
  DraftPackagesGetResponse,
  DraftPackagesGetPathOptionalParams,
  DraftPackagesGetPathResponse,
  CopyFromPackageOperationParameters,
  DraftPackagesCopyFromPackageOptionalParams,
  DraftPackagesCopyFromPackageResponse,
  ExtractFileOperationParameters,
  DraftPackagesExtractFileOptionalParams,
  DraftPackagesExtractFileResponse,
  GenerateOperationParameters,
  DraftPackagesGenerateFoldersAndScriptsOptionalParams,
  DraftPackagesGenerateFoldersAndScriptsResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a DraftPackages. */
export interface DraftPackages {
  /**
   * Lists all the draft packages under a test base account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param options The options parameters.
   */
  listByTestBaseAccount(
    resourceGroupName: string,
    testBaseAccountName: string,
    options?: DraftPackagesListByTestBaseAccountOptionalParams
  ): PagedAsyncIterableIterator<DraftPackageResource>;
  /**
   * Creates or replaces a Test Base Draft Package.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param draftPackageName The resource name of the Test Base Draft Package.
   * @param parameters Parameters supplied to create a Test Base Draft Package.
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    testBaseAccountName: string,
    draftPackageName: string,
    parameters: DraftPackageResource,
    options?: DraftPackagesCreateOptionalParams
  ): Promise<DraftPackagesCreateResponse>;
  /**
   * Updates an existing Test Base Draft Package.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param draftPackageName The resource name of the Test Base Draft Package.
   * @param parameters Parameters supplied to update a Test Base Draft Package.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    testBaseAccountName: string,
    draftPackageName: string,
    parameters: DraftPackageUpdateParameters,
    options?: DraftPackagesUpdateOptionalParams
  ): Promise<DraftPackagesUpdateResponse>;
  /**
   * Deletes a Test Base Draft Package.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param draftPackageName The resource name of the Test Base Draft Package.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    testBaseAccountName: string,
    draftPackageName: string,
    options?: DraftPackagesDeleteOptionalParams
  ): Promise<void>;
  /**
   * Gets a Test Base Draft Package.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param draftPackageName The resource name of the Test Base Draft Package.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    testBaseAccountName: string,
    draftPackageName: string,
    options?: DraftPackagesGetOptionalParams
  ): Promise<DraftPackagesGetResponse>;
  /**
   * Gets draft package path and temp working path with SAS.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param draftPackageName The resource name of the Test Base Draft Package.
   * @param options The options parameters.
   */
  getPath(
    resourceGroupName: string,
    testBaseAccountName: string,
    draftPackageName: string,
    options?: DraftPackagesGetPathOptionalParams
  ): Promise<DraftPackagesGetPathResponse>;
  /**
   * Copy package file and metadata from a package to this draft package
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param draftPackageName The resource name of the Test Base Draft Package.
   * @param parameters Parameters supplied to the Test Base Draft Package CopyFromPackage operation.
   * @param options The options parameters.
   */
  beginCopyFromPackage(
    resourceGroupName: string,
    testBaseAccountName: string,
    draftPackageName: string,
    parameters: CopyFromPackageOperationParameters,
    options?: DraftPackagesCopyFromPackageOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<DraftPackagesCopyFromPackageResponse>,
      DraftPackagesCopyFromPackageResponse
    >
  >;
  /**
   * Copy package file and metadata from a package to this draft package
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param draftPackageName The resource name of the Test Base Draft Package.
   * @param parameters Parameters supplied to the Test Base Draft Package CopyFromPackage operation.
   * @param options The options parameters.
   */
  beginCopyFromPackageAndWait(
    resourceGroupName: string,
    testBaseAccountName: string,
    draftPackageName: string,
    parameters: CopyFromPackageOperationParameters,
    options?: DraftPackagesCopyFromPackageOptionalParams
  ): Promise<DraftPackagesCopyFromPackageResponse>;
  /**
   * Performs extracting file operation for a Test Base Draft Package
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param draftPackageName The resource name of the Test Base Draft Package.
   * @param parameters Parameters supplied to the Test Base Draft Package ExtractFile operation.
   * @param options The options parameters.
   */
  beginExtractFile(
    resourceGroupName: string,
    testBaseAccountName: string,
    draftPackageName: string,
    parameters: ExtractFileOperationParameters,
    options?: DraftPackagesExtractFileOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<DraftPackagesExtractFileResponse>,
      DraftPackagesExtractFileResponse
    >
  >;
  /**
   * Performs extracting file operation for a Test Base Draft Package
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param draftPackageName The resource name of the Test Base Draft Package.
   * @param parameters Parameters supplied to the Test Base Draft Package ExtractFile operation.
   * @param options The options parameters.
   */
  beginExtractFileAndWait(
    resourceGroupName: string,
    testBaseAccountName: string,
    draftPackageName: string,
    parameters: ExtractFileOperationParameters,
    options?: DraftPackagesExtractFileOptionalParams
  ): Promise<DraftPackagesExtractFileResponse>;
  /**
   * Generates folders and scripts
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param draftPackageName The resource name of the Test Base Draft Package.
   * @param parameters Parameters supplied to the Test Base Draft Package Generate operation.
   * @param options The options parameters.
   */
  beginGenerateFoldersAndScripts(
    resourceGroupName: string,
    testBaseAccountName: string,
    draftPackageName: string,
    parameters: GenerateOperationParameters,
    options?: DraftPackagesGenerateFoldersAndScriptsOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<DraftPackagesGenerateFoldersAndScriptsResponse>,
      DraftPackagesGenerateFoldersAndScriptsResponse
    >
  >;
  /**
   * Generates folders and scripts
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param draftPackageName The resource name of the Test Base Draft Package.
   * @param parameters Parameters supplied to the Test Base Draft Package Generate operation.
   * @param options The options parameters.
   */
  beginGenerateFoldersAndScriptsAndWait(
    resourceGroupName: string,
    testBaseAccountName: string,
    draftPackageName: string,
    parameters: GenerateOperationParameters,
    options?: DraftPackagesGenerateFoldersAndScriptsOptionalParams
  ): Promise<DraftPackagesGenerateFoldersAndScriptsResponse>;
}
