/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { DraftPackages } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { TestBase } from "../testBase";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  DraftPackageResource,
  DraftPackagesListByTestBaseAccountNextOptionalParams,
  DraftPackagesListByTestBaseAccountOptionalParams,
  DraftPackagesListByTestBaseAccountResponse,
  DraftPackagesCreateOptionalParams,
  DraftPackagesCreateResponse,
  DraftPackageUpdateParameters,
  DraftPackagesUpdateOptionalParams,
  DraftPackagesUpdateResponse,
  DraftPackagesDeleteOptionalParams,
  DraftPackagesGetOptionalParams,
  DraftPackagesGetResponse,
  DraftPackagesGetPathOptionalParams,
  DraftPackagesGetPathResponse,
  CopyFromPackageOperationParameters,
  DraftPackagesCopyFromPackageOptionalParams,
  DraftPackagesCopyFromPackageResponse,
  ExtractFileOperationParameters,
  DraftPackagesExtractFileOptionalParams,
  DraftPackagesExtractFileResponse,
  GenerateOperationParameters,
  DraftPackagesGenerateFoldersAndScriptsOptionalParams,
  DraftPackagesGenerateFoldersAndScriptsResponse,
  DraftPackagesListByTestBaseAccountNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing DraftPackages operations. */
export class DraftPackagesImpl implements DraftPackages {
  private readonly client: TestBase;

  /**
   * Initialize a new instance of the class DraftPackages class.
   * @param client Reference to the service client
   */
  constructor(client: TestBase) {
    this.client = client;
  }

  /**
   * Lists all the draft packages under a test base account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param options The options parameters.
   */
  public listByTestBaseAccount(
    resourceGroupName: string,
    testBaseAccountName: string,
    options?: DraftPackagesListByTestBaseAccountOptionalParams
  ): PagedAsyncIterableIterator<DraftPackageResource> {
    const iter = this.listByTestBaseAccountPagingAll(
      resourceGroupName,
      testBaseAccountName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByTestBaseAccountPagingPage(
          resourceGroupName,
          testBaseAccountName,
          options,
          settings
        );
      }
    };
  }

  private async *listByTestBaseAccountPagingPage(
    resourceGroupName: string,
    testBaseAccountName: string,
    options?: DraftPackagesListByTestBaseAccountOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<DraftPackageResource[]> {
    let result: DraftPackagesListByTestBaseAccountResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByTestBaseAccount(
        resourceGroupName,
        testBaseAccountName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByTestBaseAccountNext(
        resourceGroupName,
        testBaseAccountName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByTestBaseAccountPagingAll(
    resourceGroupName: string,
    testBaseAccountName: string,
    options?: DraftPackagesListByTestBaseAccountOptionalParams
  ): AsyncIterableIterator<DraftPackageResource> {
    for await (const page of this.listByTestBaseAccountPagingPage(
      resourceGroupName,
      testBaseAccountName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists all the draft packages under a test base account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param options The options parameters.
   */
  private _listByTestBaseAccount(
    resourceGroupName: string,
    testBaseAccountName: string,
    options?: DraftPackagesListByTestBaseAccountOptionalParams
  ): Promise<DraftPackagesListByTestBaseAccountResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, testBaseAccountName, options },
      listByTestBaseAccountOperationSpec
    );
  }

  /**
   * Creates or replaces a Test Base Draft Package.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param draftPackageName The resource name of the Test Base Draft Package.
   * @param parameters Parameters supplied to create a Test Base Draft Package.
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    testBaseAccountName: string,
    draftPackageName: string,
    parameters: DraftPackageResource,
    options?: DraftPackagesCreateOptionalParams
  ): Promise<DraftPackagesCreateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        testBaseAccountName,
        draftPackageName,
        parameters,
        options
      },
      createOperationSpec
    );
  }

  /**
   * Updates an existing Test Base Draft Package.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param draftPackageName The resource name of the Test Base Draft Package.
   * @param parameters Parameters supplied to update a Test Base Draft Package.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    testBaseAccountName: string,
    draftPackageName: string,
    parameters: DraftPackageUpdateParameters,
    options?: DraftPackagesUpdateOptionalParams
  ): Promise<DraftPackagesUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        testBaseAccountName,
        draftPackageName,
        parameters,
        options
      },
      updateOperationSpec
    );
  }

  /**
   * Deletes a Test Base Draft Package.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param draftPackageName The resource name of the Test Base Draft Package.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    testBaseAccountName: string,
    draftPackageName: string,
    options?: DraftPackagesDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, testBaseAccountName, draftPackageName, options },
      deleteOperationSpec
    );
  }

  /**
   * Gets a Test Base Draft Package.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param draftPackageName The resource name of the Test Base Draft Package.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    testBaseAccountName: string,
    draftPackageName: string,
    options?: DraftPackagesGetOptionalParams
  ): Promise<DraftPackagesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, testBaseAccountName, draftPackageName, options },
      getOperationSpec
    );
  }

  /**
   * Gets draft package path and temp working path with SAS.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param draftPackageName The resource name of the Test Base Draft Package.
   * @param options The options parameters.
   */
  getPath(
    resourceGroupName: string,
    testBaseAccountName: string,
    draftPackageName: string,
    options?: DraftPackagesGetPathOptionalParams
  ): Promise<DraftPackagesGetPathResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, testBaseAccountName, draftPackageName, options },
      getPathOperationSpec
    );
  }

  /**
   * Copy package file and metadata from a package to this draft package
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param draftPackageName The resource name of the Test Base Draft Package.
   * @param parameters Parameters supplied to the Test Base Draft Package CopyFromPackage operation.
   * @param options The options parameters.
   */
  async beginCopyFromPackage(
    resourceGroupName: string,
    testBaseAccountName: string,
    draftPackageName: string,
    parameters: CopyFromPackageOperationParameters,
    options?: DraftPackagesCopyFromPackageOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<DraftPackagesCopyFromPackageResponse>,
      DraftPackagesCopyFromPackageResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<DraftPackagesCopyFromPackageResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        testBaseAccountName,
        draftPackageName,
        parameters,
        options
      },
      spec: copyFromPackageOperationSpec
    });
    const poller = await createHttpPoller<
      DraftPackagesCopyFromPackageResponse,
      OperationState<DraftPackagesCopyFromPackageResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Copy package file and metadata from a package to this draft package
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param draftPackageName The resource name of the Test Base Draft Package.
   * @param parameters Parameters supplied to the Test Base Draft Package CopyFromPackage operation.
   * @param options The options parameters.
   */
  async beginCopyFromPackageAndWait(
    resourceGroupName: string,
    testBaseAccountName: string,
    draftPackageName: string,
    parameters: CopyFromPackageOperationParameters,
    options?: DraftPackagesCopyFromPackageOptionalParams
  ): Promise<DraftPackagesCopyFromPackageResponse> {
    const poller = await this.beginCopyFromPackage(
      resourceGroupName,
      testBaseAccountName,
      draftPackageName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Performs extracting file operation for a Test Base Draft Package
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param draftPackageName The resource name of the Test Base Draft Package.
   * @param parameters Parameters supplied to the Test Base Draft Package ExtractFile operation.
   * @param options The options parameters.
   */
  async beginExtractFile(
    resourceGroupName: string,
    testBaseAccountName: string,
    draftPackageName: string,
    parameters: ExtractFileOperationParameters,
    options?: DraftPackagesExtractFileOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<DraftPackagesExtractFileResponse>,
      DraftPackagesExtractFileResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<DraftPackagesExtractFileResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        testBaseAccountName,
        draftPackageName,
        parameters,
        options
      },
      spec: extractFileOperationSpec
    });
    const poller = await createHttpPoller<
      DraftPackagesExtractFileResponse,
      OperationState<DraftPackagesExtractFileResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Performs extracting file operation for a Test Base Draft Package
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param draftPackageName The resource name of the Test Base Draft Package.
   * @param parameters Parameters supplied to the Test Base Draft Package ExtractFile operation.
   * @param options The options parameters.
   */
  async beginExtractFileAndWait(
    resourceGroupName: string,
    testBaseAccountName: string,
    draftPackageName: string,
    parameters: ExtractFileOperationParameters,
    options?: DraftPackagesExtractFileOptionalParams
  ): Promise<DraftPackagesExtractFileResponse> {
    const poller = await this.beginExtractFile(
      resourceGroupName,
      testBaseAccountName,
      draftPackageName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Generates folders and scripts
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param draftPackageName The resource name of the Test Base Draft Package.
   * @param parameters Parameters supplied to the Test Base Draft Package Generate operation.
   * @param options The options parameters.
   */
  async beginGenerateFoldersAndScripts(
    resourceGroupName: string,
    testBaseAccountName: string,
    draftPackageName: string,
    parameters: GenerateOperationParameters,
    options?: DraftPackagesGenerateFoldersAndScriptsOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<DraftPackagesGenerateFoldersAndScriptsResponse>,
      DraftPackagesGenerateFoldersAndScriptsResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<DraftPackagesGenerateFoldersAndScriptsResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        testBaseAccountName,
        draftPackageName,
        parameters,
        options
      },
      spec: generateFoldersAndScriptsOperationSpec
    });
    const poller = await createHttpPoller<
      DraftPackagesGenerateFoldersAndScriptsResponse,
      OperationState<DraftPackagesGenerateFoldersAndScriptsResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Generates folders and scripts
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param draftPackageName The resource name of the Test Base Draft Package.
   * @param parameters Parameters supplied to the Test Base Draft Package Generate operation.
   * @param options The options parameters.
   */
  async beginGenerateFoldersAndScriptsAndWait(
    resourceGroupName: string,
    testBaseAccountName: string,
    draftPackageName: string,
    parameters: GenerateOperationParameters,
    options?: DraftPackagesGenerateFoldersAndScriptsOptionalParams
  ): Promise<DraftPackagesGenerateFoldersAndScriptsResponse> {
    const poller = await this.beginGenerateFoldersAndScripts(
      resourceGroupName,
      testBaseAccountName,
      draftPackageName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * ListByTestBaseAccountNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param nextLink The nextLink from the previous successful call to the ListByTestBaseAccount method.
   * @param options The options parameters.
   */
  private _listByTestBaseAccountNext(
    resourceGroupName: string,
    testBaseAccountName: string,
    nextLink: string,
    options?: DraftPackagesListByTestBaseAccountNextOptionalParams
  ): Promise<DraftPackagesListByTestBaseAccountNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, testBaseAccountName, nextLink, options },
      listByTestBaseAccountNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByTestBaseAccountOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/draftPackages",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DraftPackageListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.packageName,
    Parameters.editPackage
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/draftPackages/{draftPackageName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.DraftPackageResource
    },
    201: {
      bodyMapper: Mappers.DraftPackageResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName,
    Parameters.draftPackageName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/draftPackages/{draftPackageName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.DraftPackageResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters5,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName,
    Parameters.draftPackageName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/draftPackages/{draftPackageName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName,
    Parameters.draftPackageName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/draftPackages/{draftPackageName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DraftPackageResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName,
    Parameters.draftPackageName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getPathOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/draftPackages/{draftPackageName}/getPath",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DraftPackageGetPathResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName,
    Parameters.draftPackageName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const copyFromPackageOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/draftPackages/{draftPackageName}/copyFromPackage",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.DraftPackagesCopyFromPackageHeaders
    },
    201: {
      headersMapper: Mappers.DraftPackagesCopyFromPackageHeaders
    },
    202: {
      headersMapper: Mappers.DraftPackagesCopyFromPackageHeaders
    },
    204: {
      headersMapper: Mappers.DraftPackagesCopyFromPackageHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters6,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName,
    Parameters.draftPackageName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const extractFileOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/draftPackages/{draftPackageName}/extractFile",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.DraftPackagesExtractFileHeaders
    },
    201: {
      headersMapper: Mappers.DraftPackagesExtractFileHeaders
    },
    202: {
      headersMapper: Mappers.DraftPackagesExtractFileHeaders
    },
    204: {
      headersMapper: Mappers.DraftPackagesExtractFileHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters7,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName,
    Parameters.draftPackageName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const generateFoldersAndScriptsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/draftPackages/{draftPackageName}/generateFoldersAndScripts",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.DraftPackagesGenerateFoldersAndScriptsHeaders
    },
    201: {
      headersMapper: Mappers.DraftPackagesGenerateFoldersAndScriptsHeaders
    },
    202: {
      headersMapper: Mappers.DraftPackagesGenerateFoldersAndScriptsHeaders
    },
    204: {
      headersMapper: Mappers.DraftPackagesGenerateFoldersAndScriptsHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters8,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName,
    Parameters.draftPackageName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listByTestBaseAccountNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DraftPackageListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
