/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { Credentials } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { TestBase } from "../testBase";
import {
  CredentialResource,
  CredentialsCreateOptionalParams,
  CredentialsCreateResponse,
  CredentialsUpdateOptionalParams,
  CredentialsUpdateResponse,
  CredentialsDeleteOptionalParams
} from "../models";

/** Class containing Credentials operations. */
export class CredentialsImpl implements Credentials {
  private readonly client: TestBase;

  /**
   * Initialize a new instance of the class Credentials class.
   * @param client Reference to the service client
   */
  constructor(client: TestBase) {
    this.client = client;
  }

  /**
   * Creates or replaces a Test Base Credential.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param credentialName The credential resource name.
   * @param parameters Parameters supplied to create a Test Base Credential.
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    testBaseAccountName: string,
    credentialName: string,
    parameters: CredentialResource,
    options?: CredentialsCreateOptionalParams
  ): Promise<CredentialsCreateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        testBaseAccountName,
        credentialName,
        parameters,
        options
      },
      createOperationSpec
    );
  }

  /**
   * Updates an existing test base credential.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param credentialName The credential resource name.
   * @param parameters Parameters supplied to create a test base credential.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    testBaseAccountName: string,
    credentialName: string,
    parameters: CredentialResource,
    options?: CredentialsUpdateOptionalParams
  ): Promise<CredentialsUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        testBaseAccountName,
        credentialName,
        parameters,
        options
      },
      updateOperationSpec
    );
  }

  /**
   * Deletes an existing test base credential.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param credentialName The credential resource name.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    testBaseAccountName: string,
    credentialName: string,
    options?: CredentialsDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, testBaseAccountName, credentialName, options },
      deleteOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/credentials/{credentialName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.CredentialResource
    },
    201: {
      bodyMapper: Mappers.CredentialResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters19,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName,
    Parameters.credentialName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/credentials/{credentialName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.CredentialResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters19,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName,
    Parameters.credentialName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/credentials/{credentialName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName,
    Parameters.credentialName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
