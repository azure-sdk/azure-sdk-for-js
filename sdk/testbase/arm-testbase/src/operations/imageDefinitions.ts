/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { ImageDefinitions } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { TestBase } from "../testBase";
import {
  ImageDefinitionResource,
  ImageDefinitionsListByTestBaseAccountNextOptionalParams,
  ImageDefinitionsListByTestBaseAccountOptionalParams,
  ImageDefinitionsListByTestBaseAccountResponse,
  ImageDefinitionsCreateOptionalParams,
  ImageDefinitionsCreateResponse,
  ImageDefinitionsGetOptionalParams,
  ImageDefinitionsGetResponse,
  ImageDefinitionsDeleteOptionalParams,
  ImageDefinitionsListByTestBaseAccountNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ImageDefinitions operations. */
export class ImageDefinitionsImpl implements ImageDefinitions {
  private readonly client: TestBase;

  /**
   * Initialize a new instance of the class ImageDefinitions class.
   * @param client Reference to the service client
   */
  constructor(client: TestBase) {
    this.client = client;
  }

  /**
   * List all image definition properties created by test base custom images which are derived from 'VHD'
   * source.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param options The options parameters.
   */
  public listByTestBaseAccount(
    resourceGroupName: string,
    testBaseAccountName: string,
    options?: ImageDefinitionsListByTestBaseAccountOptionalParams
  ): PagedAsyncIterableIterator<ImageDefinitionResource> {
    const iter = this.listByTestBaseAccountPagingAll(
      resourceGroupName,
      testBaseAccountName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByTestBaseAccountPagingPage(
          resourceGroupName,
          testBaseAccountName,
          options,
          settings
        );
      }
    };
  }

  private async *listByTestBaseAccountPagingPage(
    resourceGroupName: string,
    testBaseAccountName: string,
    options?: ImageDefinitionsListByTestBaseAccountOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<ImageDefinitionResource[]> {
    let result: ImageDefinitionsListByTestBaseAccountResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByTestBaseAccount(
        resourceGroupName,
        testBaseAccountName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByTestBaseAccountNext(
        resourceGroupName,
        testBaseAccountName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByTestBaseAccountPagingAll(
    resourceGroupName: string,
    testBaseAccountName: string,
    options?: ImageDefinitionsListByTestBaseAccountOptionalParams
  ): AsyncIterableIterator<ImageDefinitionResource> {
    for await (const page of this.listByTestBaseAccountPagingPage(
      resourceGroupName,
      testBaseAccountName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List all image definition properties created by test base custom images which are derived from 'VHD'
   * source.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param options The options parameters.
   */
  private _listByTestBaseAccount(
    resourceGroupName: string,
    testBaseAccountName: string,
    options?: ImageDefinitionsListByTestBaseAccountOptionalParams
  ): Promise<ImageDefinitionsListByTestBaseAccountResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, testBaseAccountName, options },
      listByTestBaseAccountOperationSpec
    );
  }

  /**
   * Create image definition for test base custom images which are derived from 'VHD' source.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param imageDefinitionName The resource name of the test base image definition.
   * @param parameters Parameters supplied to create a test base image definition.
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    testBaseAccountName: string,
    imageDefinitionName: string,
    parameters: ImageDefinitionResource,
    options?: ImageDefinitionsCreateOptionalParams
  ): Promise<ImageDefinitionsCreateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        testBaseAccountName,
        imageDefinitionName,
        parameters,
        options
      },
      createOperationSpec
    );
  }

  /**
   * Get image properties under the image definition name created by test base custom image which derived
   * from 'VHD' source.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param imageDefinitionName The resource name of the test base image definition.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    testBaseAccountName: string,
    imageDefinitionName: string,
    options?: ImageDefinitionsGetOptionalParams
  ): Promise<ImageDefinitionsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, testBaseAccountName, imageDefinitionName, options },
      getOperationSpec
    );
  }

  /**
   * Delete a test base image definition resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param imageDefinitionName The resource name of the test base image definition.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    testBaseAccountName: string,
    imageDefinitionName: string,
    options?: ImageDefinitionsDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, testBaseAccountName, imageDefinitionName, options },
      deleteOperationSpec
    );
  }

  /**
   * ListByTestBaseAccountNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param nextLink The nextLink from the previous successful call to the ListByTestBaseAccount method.
   * @param options The options parameters.
   */
  private _listByTestBaseAccountNext(
    resourceGroupName: string,
    testBaseAccountName: string,
    nextLink: string,
    options?: ImageDefinitionsListByTestBaseAccountNextOptionalParams
  ): Promise<ImageDefinitionsListByTestBaseAccountNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, testBaseAccountName, nextLink, options },
      listByTestBaseAccountNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByTestBaseAccountOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/imageDefinitions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ImageDefinitionsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/imageDefinitions/{imageDefinitionName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ImageDefinitionResource
    },
    201: {
      bodyMapper: Mappers.ImageDefinitionResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName,
    Parameters.imageDefinitionName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/imageDefinitions/{imageDefinitionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ImageDefinitionResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName,
    Parameters.imageDefinitionName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/imageDefinitions/{imageDefinitionName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName,
    Parameters.imageDefinitionName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByTestBaseAccountNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ImageDefinitionsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
