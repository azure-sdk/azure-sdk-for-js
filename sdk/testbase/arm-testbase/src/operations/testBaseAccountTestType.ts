/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { TestBaseAccountTestType } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { RestAPIForTestBase } from "../restAPIForTestBase";
import {
  TestBaseAccountTestTypeGetOptionalParams,
  TestBaseAccountTestTypeGetResponse
} from "../models";

/** Class containing TestBaseAccountTestType operations. */
export class TestBaseAccountTestTypeImpl implements TestBaseAccountTestType {
  private readonly client: RestAPIForTestBase;

  /**
   * Initialize a new instance of the class TestBaseAccountTestType class.
   * @param client Reference to the service client
   */
  constructor(client: RestAPIForTestBase) {
    this.client = client;
  }

  /**
   * Gets a test type of a Test Base Account.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param testTypeResourceName The resource name of a test type.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    testBaseAccountName: string,
    testTypeResourceName: string,
    options?: TestBaseAccountTestTypeGetOptionalParams
  ): Promise<TestBaseAccountTestTypeGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, testBaseAccountName, testTypeResourceName, options },
      getOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/testTypes/{testTypeResourceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TestTypeResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName,
    Parameters.testTypeResourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
