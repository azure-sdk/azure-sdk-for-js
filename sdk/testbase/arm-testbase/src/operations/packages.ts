/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { Packages } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { TestBase } from "../testBase";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  PackageResource,
  PackagesListByTestBaseAccountNextOptionalParams,
  PackagesListByTestBaseAccountOptionalParams,
  PackagesListByTestBaseAccountResponse,
  PackagesCreateOptionalParams,
  PackagesCreateResponse,
  PackageUpdateParameters,
  PackagesUpdateOptionalParams,
  PackagesUpdateResponse,
  PackagesDeleteOptionalParams,
  PackagesGetOptionalParams,
  PackagesGetResponse,
  PackagesHardDeleteOptionalParams,
  PackagesGetDownloadURLOptionalParams,
  PackagesGetDownloadURLResponse,
  PackagesRunTestOptionalParams,
  PackagesRunTestResponse,
  PackagesListByTestBaseAccountNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Packages operations. */
export class PackagesImpl implements Packages {
  private readonly client: TestBase;

  /**
   * Initialize a new instance of the class Packages class.
   * @param client Reference to the service client
   */
  constructor(client: TestBase) {
    this.client = client;
  }

  /**
   * Lists all the packages under a Test Base Account.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param options The options parameters.
   */
  public listByTestBaseAccount(
    resourceGroupName: string,
    testBaseAccountName: string,
    options?: PackagesListByTestBaseAccountOptionalParams
  ): PagedAsyncIterableIterator<PackageResource> {
    const iter = this.listByTestBaseAccountPagingAll(
      resourceGroupName,
      testBaseAccountName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByTestBaseAccountPagingPage(
          resourceGroupName,
          testBaseAccountName,
          options,
          settings
        );
      }
    };
  }

  private async *listByTestBaseAccountPagingPage(
    resourceGroupName: string,
    testBaseAccountName: string,
    options?: PackagesListByTestBaseAccountOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<PackageResource[]> {
    let result: PackagesListByTestBaseAccountResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByTestBaseAccount(
        resourceGroupName,
        testBaseAccountName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByTestBaseAccountNext(
        resourceGroupName,
        testBaseAccountName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByTestBaseAccountPagingAll(
    resourceGroupName: string,
    testBaseAccountName: string,
    options?: PackagesListByTestBaseAccountOptionalParams
  ): AsyncIterableIterator<PackageResource> {
    for await (const page of this.listByTestBaseAccountPagingPage(
      resourceGroupName,
      testBaseAccountName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists all the packages under a Test Base Account.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param options The options parameters.
   */
  private _listByTestBaseAccount(
    resourceGroupName: string,
    testBaseAccountName: string,
    options?: PackagesListByTestBaseAccountOptionalParams
  ): Promise<PackagesListByTestBaseAccountResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, testBaseAccountName, options },
      listByTestBaseAccountOperationSpec
    );
  }

  /**
   * Create or replace (overwrite/recreate, with potential downtime) a Test Base Package.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param packageName The resource name of the Test Base Package.
   * @param parameters Parameters supplied to create a Test Base Package.
   * @param options The options parameters.
   */
  async beginCreate(
    resourceGroupName: string,
    testBaseAccountName: string,
    packageName: string,
    parameters: PackageResource,
    options?: PackagesCreateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<PackagesCreateResponse>,
      PackagesCreateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<PackagesCreateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        testBaseAccountName,
        packageName,
        parameters,
        options
      },
      spec: createOperationSpec
    });
    const poller = await createHttpPoller<
      PackagesCreateResponse,
      OperationState<PackagesCreateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create or replace (overwrite/recreate, with potential downtime) a Test Base Package.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param packageName The resource name of the Test Base Package.
   * @param parameters Parameters supplied to create a Test Base Package.
   * @param options The options parameters.
   */
  async beginCreateAndWait(
    resourceGroupName: string,
    testBaseAccountName: string,
    packageName: string,
    parameters: PackageResource,
    options?: PackagesCreateOptionalParams
  ): Promise<PackagesCreateResponse> {
    const poller = await this.beginCreate(
      resourceGroupName,
      testBaseAccountName,
      packageName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Update an existing Test Base Package.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param packageName The resource name of the Test Base Package.
   * @param parameters Parameters supplied to update a Test Base Package.
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    testBaseAccountName: string,
    packageName: string,
    parameters: PackageUpdateParameters,
    options?: PackagesUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<PackagesUpdateResponse>,
      PackagesUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<PackagesUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        testBaseAccountName,
        packageName,
        parameters,
        options
      },
      spec: updateOperationSpec
    });
    const poller = await createHttpPoller<
      PackagesUpdateResponse,
      OperationState<PackagesUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Update an existing Test Base Package.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param packageName The resource name of the Test Base Package.
   * @param parameters Parameters supplied to update a Test Base Package.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    testBaseAccountName: string,
    packageName: string,
    parameters: PackageUpdateParameters,
    options?: PackagesUpdateOptionalParams
  ): Promise<PackagesUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      testBaseAccountName,
      packageName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Deletes a Test Base Package.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param packageName The resource name of the Test Base Package.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    testBaseAccountName: string,
    packageName: string,
    options?: PackagesDeleteOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, testBaseAccountName, packageName, options },
      spec: deleteOperationSpec
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Deletes a Test Base Package.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param packageName The resource name of the Test Base Package.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    testBaseAccountName: string,
    packageName: string,
    options?: PackagesDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      testBaseAccountName,
      packageName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Gets a Test Base Package.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param packageName The resource name of the Test Base Package.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    testBaseAccountName: string,
    packageName: string,
    options?: PackagesGetOptionalParams
  ): Promise<PackagesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, testBaseAccountName, packageName, options },
      getOperationSpec
    );
  }

  /**
   * Hard Delete a Test Base Package.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param packageName The resource name of the Test Base Package.
   * @param options The options parameters.
   */
  async beginHardDelete(
    resourceGroupName: string,
    testBaseAccountName: string,
    packageName: string,
    options?: PackagesHardDeleteOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, testBaseAccountName, packageName, options },
      spec: hardDeleteOperationSpec
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Hard Delete a Test Base Package.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param packageName The resource name of the Test Base Package.
   * @param options The options parameters.
   */
  async beginHardDeleteAndWait(
    resourceGroupName: string,
    testBaseAccountName: string,
    packageName: string,
    options?: PackagesHardDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginHardDelete(
      resourceGroupName,
      testBaseAccountName,
      packageName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Gets the download URL of a package.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param packageName The resource name of the Test Base Package.
   * @param options The options parameters.
   */
  getDownloadURL(
    resourceGroupName: string,
    testBaseAccountName: string,
    packageName: string,
    options?: PackagesGetDownloadURLOptionalParams
  ): Promise<PackagesGetDownloadURLResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, testBaseAccountName, packageName, options },
      getDownloadURLOperationSpec
    );
  }

  /**
   * Trigger a test run on the package.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param packageName The resource name of the Test Base Package.
   * @param options The options parameters.
   */
  runTest(
    resourceGroupName: string,
    testBaseAccountName: string,
    packageName: string,
    options?: PackagesRunTestOptionalParams
  ): Promise<PackagesRunTestResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, testBaseAccountName, packageName, options },
      runTestOperationSpec
    );
  }

  /**
   * ListByTestBaseAccountNext
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param nextLink The nextLink from the previous successful call to the ListByTestBaseAccount method.
   * @param options The options parameters.
   */
  private _listByTestBaseAccountNext(
    resourceGroupName: string,
    testBaseAccountName: string,
    nextLink: string,
    options?: PackagesListByTestBaseAccountNextOptionalParams
  ): Promise<PackagesListByTestBaseAccountNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, testBaseAccountName, nextLink, options },
      listByTestBaseAccountNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByTestBaseAccountOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/packages",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PackageListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/packages/{packageName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.PackageResource
    },
    201: {
      bodyMapper: Mappers.PackageResource
    },
    202: {
      bodyMapper: Mappers.PackageResource
    },
    204: {
      bodyMapper: Mappers.PackageResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName,
    Parameters.packageName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/packages/{packageName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.PackageResource
    },
    201: {
      bodyMapper: Mappers.PackageResource
    },
    202: {
      bodyMapper: Mappers.PackageResource
    },
    204: {
      bodyMapper: Mappers.PackageResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters5,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName,
    Parameters.packageName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/packages/{packageName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName,
    Parameters.packageName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/packages/{packageName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PackageResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName,
    Parameters.packageName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const hardDeleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/packages/{packageName}/hardDelete",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName,
    Parameters.packageName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getDownloadURLOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/packages/{packageName}/getDownloadUrl",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DownloadURLResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName,
    Parameters.packageName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const runTestOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/packages/{packageName}/runTest",
  httpMethod: "POST",
  responses: {
    200: {},
    202: {
      headersMapper: Mappers.PackagesRunTestHeaders
    },
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters6,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName,
    Parameters.packageName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listByTestBaseAccountNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PackageListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
