/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { CustomImages } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { TestBase } from "../testBase";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  CustomImageResource,
  CustomImagesListByTestBaseAccountNextOptionalParams,
  CustomImagesListByTestBaseAccountOptionalParams,
  CustomImagesListByTestBaseAccountResponse,
  CustomImagesCreateOptionalParams,
  CustomImagesCreateResponse,
  CustomImagesDeleteOptionalParams,
  CustomImagesDeleteResponse,
  CustomImagesGetOptionalParams,
  CustomImagesGetResponse,
  ImageNameCheckAvailabilityParameters,
  CustomImagesCheckImageNameAvailabilityOptionalParams,
  CustomImagesCheckImageNameAvailabilityResponse,
  CustomImagesListByTestBaseAccountNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing CustomImages operations. */
export class CustomImagesImpl implements CustomImages {
  private readonly client: TestBase;

  /**
   * Initialize a new instance of the class CustomImages class.
   * @param client Reference to the service client
   */
  constructor(client: TestBase) {
    this.client = client;
  }

  /**
   * Lists all the custom images under a test base account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param options The options parameters.
   */
  public listByTestBaseAccount(
    resourceGroupName: string,
    testBaseAccountName: string,
    options?: CustomImagesListByTestBaseAccountOptionalParams
  ): PagedAsyncIterableIterator<CustomImageResource> {
    const iter = this.listByTestBaseAccountPagingAll(
      resourceGroupName,
      testBaseAccountName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByTestBaseAccountPagingPage(
          resourceGroupName,
          testBaseAccountName,
          options,
          settings
        );
      }
    };
  }

  private async *listByTestBaseAccountPagingPage(
    resourceGroupName: string,
    testBaseAccountName: string,
    options?: CustomImagesListByTestBaseAccountOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<CustomImageResource[]> {
    let result: CustomImagesListByTestBaseAccountResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByTestBaseAccount(
        resourceGroupName,
        testBaseAccountName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByTestBaseAccountNext(
        resourceGroupName,
        testBaseAccountName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByTestBaseAccountPagingAll(
    resourceGroupName: string,
    testBaseAccountName: string,
    options?: CustomImagesListByTestBaseAccountOptionalParams
  ): AsyncIterableIterator<CustomImageResource> {
    for await (const page of this.listByTestBaseAccountPagingPage(
      resourceGroupName,
      testBaseAccountName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists all the custom images under a test base account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param options The options parameters.
   */
  private _listByTestBaseAccount(
    resourceGroupName: string,
    testBaseAccountName: string,
    options?: CustomImagesListByTestBaseAccountOptionalParams
  ): Promise<CustomImagesListByTestBaseAccountResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, testBaseAccountName, options },
      listByTestBaseAccountOperationSpec
    );
  }

  /**
   * Creates a test base custom image.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param customImageName The resource name of the test base custom image.
   * @param parameters Parameters supplied to create a test base custom image.
   * @param options The options parameters.
   */
  async beginCreate(
    resourceGroupName: string,
    testBaseAccountName: string,
    customImageName: string,
    parameters: CustomImageResource,
    options?: CustomImagesCreateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<CustomImagesCreateResponse>,
      CustomImagesCreateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<CustomImagesCreateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        testBaseAccountName,
        customImageName,
        parameters,
        options
      },
      spec: createOperationSpec
    });
    const poller = await createHttpPoller<
      CustomImagesCreateResponse,
      OperationState<CustomImagesCreateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Creates a test base custom image.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param customImageName The resource name of the test base custom image.
   * @param parameters Parameters supplied to create a test base custom image.
   * @param options The options parameters.
   */
  async beginCreateAndWait(
    resourceGroupName: string,
    testBaseAccountName: string,
    customImageName: string,
    parameters: CustomImageResource,
    options?: CustomImagesCreateOptionalParams
  ): Promise<CustomImagesCreateResponse> {
    const poller = await this.beginCreate(
      resourceGroupName,
      testBaseAccountName,
      customImageName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Deletes a test base custom image.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param customImageName The resource name of the test base custom image.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    testBaseAccountName: string,
    customImageName: string,
    options?: CustomImagesDeleteOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<CustomImagesDeleteResponse>,
      CustomImagesDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<CustomImagesDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        testBaseAccountName,
        customImageName,
        options
      },
      spec: deleteOperationSpec
    });
    const poller = await createHttpPoller<
      CustomImagesDeleteResponse,
      OperationState<CustomImagesDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Deletes a test base custom image.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param customImageName The resource name of the test base custom image.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    testBaseAccountName: string,
    customImageName: string,
    options?: CustomImagesDeleteOptionalParams
  ): Promise<CustomImagesDeleteResponse> {
    const poller = await this.beginDelete(
      resourceGroupName,
      testBaseAccountName,
      customImageName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Gets a test base custom image.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param customImageName The resource name of the test base custom image.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    testBaseAccountName: string,
    customImageName: string,
    options?: CustomImagesGetOptionalParams
  ): Promise<CustomImagesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, testBaseAccountName, customImageName, options },
      getOperationSpec
    );
  }

  /**
   * Checks that the test vase custom image generated from VHD resource has valid and unique definition
   * and version, return architecture and OS state of potential existing image definition.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param parameters Parameters supplied to the test base custom image CheckAvailability operation.
   * @param options The options parameters.
   */
  checkImageNameAvailability(
    resourceGroupName: string,
    testBaseAccountName: string,
    parameters: ImageNameCheckAvailabilityParameters,
    options?: CustomImagesCheckImageNameAvailabilityOptionalParams
  ): Promise<CustomImagesCheckImageNameAvailabilityResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, testBaseAccountName, parameters, options },
      checkImageNameAvailabilityOperationSpec
    );
  }

  /**
   * ListByTestBaseAccountNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param nextLink The nextLink from the previous successful call to the ListByTestBaseAccount method.
   * @param options The options parameters.
   */
  private _listByTestBaseAccountNext(
    resourceGroupName: string,
    testBaseAccountName: string,
    nextLink: string,
    options?: CustomImagesListByTestBaseAccountNextOptionalParams
  ): Promise<CustomImagesListByTestBaseAccountNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, testBaseAccountName, nextLink, options },
      listByTestBaseAccountNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByTestBaseAccountOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/customImages",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CustomImageListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/customImages/{customImageName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.CustomImageResource
    },
    201: {
      bodyMapper: Mappers.CustomImageResource
    },
    202: {
      bodyMapper: Mappers.CustomImageResource
    },
    204: {
      bodyMapper: Mappers.CustomImageResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName,
    Parameters.customImageName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/customImages/{customImageName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.CustomImagesDeleteHeaders
    },
    201: {
      headersMapper: Mappers.CustomImagesDeleteHeaders
    },
    202: {
      headersMapper: Mappers.CustomImagesDeleteHeaders
    },
    204: {
      headersMapper: Mappers.CustomImagesDeleteHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName,
    Parameters.customImageName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/customImages/{customImageName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CustomImageResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName,
    Parameters.customImageName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const checkImageNameAvailabilityOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/checkImageNameAvailability",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.VerificationResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listByTestBaseAccountNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CustomImageListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
