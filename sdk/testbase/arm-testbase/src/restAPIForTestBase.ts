/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreRestPipeline from "@azure/core-rest-pipeline";
import {
  PipelineRequest,
  PipelineResponse,
  SendRequest
} from "@azure/core-rest-pipeline";
import * as coreAuth from "@azure/core-auth";
import {
  SKUsImpl,
  TestBaseAccountsImpl,
  TestBaseAccountImpl,
  TestBaseAccountUsageImpl,
  TestBaseAccountAvailableOSsImpl,
  TestBaseAccountAvailableOSImpl,
  TestBaseAccountFlightingRingsImpl,
  TestBaseAccountFlightingRingImpl,
  TestBaseAccountTestTypesImpl,
  TestBaseAccountTestTypeImpl,
  PackagesImpl,
  PackageImpl,
  TestSummariesImpl,
  TestSummaryImpl,
  TestResultsImpl,
  TestResultImpl,
  OSUpdatesImpl,
  OSUpdateImpl,
  FavoriteProcessesImpl,
  FavoriteProcessImpl,
  AnalysisResultsImpl,
  AnalysisResultImpl,
  OperationsImpl
} from "./operations";
import {
  SKUs,
  TestBaseAccounts,
  TestBaseAccount,
  TestBaseAccountUsage,
  TestBaseAccountAvailableOSs,
  TestBaseAccountAvailableOS,
  TestBaseAccountFlightingRings,
  TestBaseAccountFlightingRing,
  TestBaseAccountTestTypes,
  TestBaseAccountTestType,
  Packages,
  Package,
  TestSummaries,
  TestSummary,
  TestResults,
  TestResult,
  OSUpdates,
  OSUpdate,
  FavoriteProcesses,
  FavoriteProcess,
  AnalysisResults,
  AnalysisResult,
  Operations
} from "./operationsInterfaces";
import * as Parameters from "./models/parameters";
import * as Mappers from "./models/mappers";
import {
  RestAPIForTestBaseOptionalParams,
  TestBaseAccountGetFileUploadUrlOptionalParams,
  TestBaseAccountGetFileUploadUrlResponse,
  PackageCheckNameAvailabilityParameters,
  CheckPackageNameAvailabilityOptionalParams,
  CheckPackageNameAvailabilityResponse,
  PackageGetDownloadURLOptionalParams,
  PackageGetDownloadURLResponse,
  TestResultGetDownloadURLOptionalParams,
  TestResultGetDownloadURLResponse,
  TestResultGetVideoDownloadURLOptionalParams,
  TestResultGetVideoDownloadURLResponse
} from "./models";

export class RestAPIForTestBase extends coreClient.ServiceClient {
  $host: string;
  subscriptionId: string;
  apiVersion: string;

  /**
   * Initializes a new instance of the RestAPIForTestBase class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string.
   * @param options The parameter options
   */
  constructor(
    credentials: coreAuth.TokenCredential,
    subscriptionId: string,
    options?: RestAPIForTestBaseOptionalParams
  ) {
    if (credentials === undefined) {
      throw new Error("'credentials' cannot be null");
    }
    if (subscriptionId === undefined) {
      throw new Error("'subscriptionId' cannot be null");
    }

    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: RestAPIForTestBaseOptionalParams = {
      requestContentType: "application/json; charset=utf-8",
      credential: credentials
    };

    const packageDetails = `azsdk-js-arm-testbase/1.0.0-beta.1`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix
      },
      endpoint:
        options.endpoint ?? options.baseUri ?? "https://management.azure.com"
    };
    super(optionsWithDefaults);

    let bearerTokenAuthenticationPolicyFound: boolean = false;
    if (options?.pipeline && options.pipeline.getOrderedPolicies().length > 0) {
      const pipelinePolicies: coreRestPipeline.PipelinePolicy[] = options.pipeline.getOrderedPolicies();
      bearerTokenAuthenticationPolicyFound = pipelinePolicies.some(
        (pipelinePolicy) =>
          pipelinePolicy.name ===
          coreRestPipeline.bearerTokenAuthenticationPolicyName
      );
    }
    if (
      !options ||
      !options.pipeline ||
      options.pipeline.getOrderedPolicies().length == 0 ||
      !bearerTokenAuthenticationPolicyFound
    ) {
      this.pipeline.removePolicy({
        name: coreRestPipeline.bearerTokenAuthenticationPolicyName
      });
      this.pipeline.addPolicy(
        coreRestPipeline.bearerTokenAuthenticationPolicy({
          credential: credentials,
          scopes:
            optionsWithDefaults.credentialScopes ??
            `${optionsWithDefaults.endpoint}/.default`,
          challengeCallbacks: {
            authorizeRequestOnChallenge:
              coreClient.authorizeRequestOnClaimChallenge
          }
        })
      );
    }
    // Parameter assignments
    this.subscriptionId = subscriptionId;

    // Assigning values to Constant parameters
    this.$host = options.$host || "https://management.azure.com";
    this.apiVersion = options.apiVersion || "2020-12-16-preview";
    this.sKUs = new SKUsImpl(this);
    this.testBaseAccounts = new TestBaseAccountsImpl(this);
    this.testBaseAccount = new TestBaseAccountImpl(this);
    this.testBaseAccountUsage = new TestBaseAccountUsageImpl(this);
    this.testBaseAccountAvailableOSs = new TestBaseAccountAvailableOSsImpl(
      this
    );
    this.testBaseAccountAvailableOS = new TestBaseAccountAvailableOSImpl(this);
    this.testBaseAccountFlightingRings = new TestBaseAccountFlightingRingsImpl(
      this
    );
    this.testBaseAccountFlightingRing = new TestBaseAccountFlightingRingImpl(
      this
    );
    this.testBaseAccountTestTypes = new TestBaseAccountTestTypesImpl(this);
    this.testBaseAccountTestType = new TestBaseAccountTestTypeImpl(this);
    this.packages = new PackagesImpl(this);
    this.package = new PackageImpl(this);
    this.testSummaries = new TestSummariesImpl(this);
    this.testSummary = new TestSummaryImpl(this);
    this.testResults = new TestResultsImpl(this);
    this.testResult = new TestResultImpl(this);
    this.oSUpdates = new OSUpdatesImpl(this);
    this.oSUpdate = new OSUpdateImpl(this);
    this.favoriteProcesses = new FavoriteProcessesImpl(this);
    this.favoriteProcess = new FavoriteProcessImpl(this);
    this.analysisResults = new AnalysisResultsImpl(this);
    this.analysisResult = new AnalysisResultImpl(this);
    this.operations = new OperationsImpl(this);
    this.addCustomApiVersionPolicy(options.apiVersion);
  }

  /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
  private addCustomApiVersionPolicy(apiVersion?: string) {
    if (!apiVersion) {
      return;
    }
    const apiVersionPolicy = {
      name: "CustomApiVersionPolicy",
      async sendRequest(
        request: PipelineRequest,
        next: SendRequest
      ): Promise<PipelineResponse> {
        const param = request.url.split("?");
        if (param.length > 1) {
          const newParams = param[1].split("&").map((item) => {
            if (item.indexOf("api-version") > -1) {
              return "api-version=" + apiVersion;
            } else {
              return item;
            }
          });
          request.url = param[0] + "?" + newParams.join("&");
        }
        return next(request);
      }
    };
    this.pipeline.addPolicy(apiVersionPolicy);
  }

  /**
   * Gets the file upload URL of a Test Base Account.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param options The options parameters.
   */
  testBaseAccountGetFileUploadUrl(
    resourceGroupName: string,
    testBaseAccountName: string,
    options?: TestBaseAccountGetFileUploadUrlOptionalParams
  ): Promise<TestBaseAccountGetFileUploadUrlResponse> {
    return this.sendOperationRequest(
      { resourceGroupName, testBaseAccountName, options },
      testBaseAccountGetFileUploadUrlOperationSpec
    );
  }

  /**
   * Checks that the Test Base Package name and version is valid and is not already in use.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param parameters Parameters supplied to the Test Base Package CheckNameAvailability operation.
   * @param options The options parameters.
   */
  checkPackageNameAvailability(
    resourceGroupName: string,
    testBaseAccountName: string,
    parameters: PackageCheckNameAvailabilityParameters,
    options?: CheckPackageNameAvailabilityOptionalParams
  ): Promise<CheckPackageNameAvailabilityResponse> {
    return this.sendOperationRequest(
      { resourceGroupName, testBaseAccountName, parameters, options },
      checkPackageNameAvailabilityOperationSpec
    );
  }

  /**
   * Gets the download URL of a package.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param packageName The resource name of the Test Base Package.
   * @param options The options parameters.
   */
  packageGetDownloadURL(
    resourceGroupName: string,
    testBaseAccountName: string,
    packageName: string,
    options?: PackageGetDownloadURLOptionalParams
  ): Promise<PackageGetDownloadURLResponse> {
    return this.sendOperationRequest(
      { resourceGroupName, testBaseAccountName, packageName, options },
      packageGetDownloadURLOperationSpec
    );
  }

  /**
   * Gets the download URL or the test result.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param packageName The resource name of the Test Base Package.
   * @param testResultName The Test Result Name. It equals to {osName}-{TestResultId} string.
   * @param options The options parameters.
   */
  testResultGetDownloadURL(
    resourceGroupName: string,
    testBaseAccountName: string,
    packageName: string,
    testResultName: string,
    options?: TestResultGetDownloadURLOptionalParams
  ): Promise<TestResultGetDownloadURLResponse> {
    return this.sendOperationRequest(
      {
        resourceGroupName,
        testBaseAccountName,
        packageName,
        testResultName,
        options
      },
      testResultGetDownloadURLOperationSpec
    );
  }

  /**
   * Gets the download URL of the test execution screen recording.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param packageName The resource name of the Test Base Package.
   * @param testResultName The Test Result Name. It equals to {osName}-{TestResultId} string.
   * @param options The options parameters.
   */
  testResultGetVideoDownloadURL(
    resourceGroupName: string,
    testBaseAccountName: string,
    packageName: string,
    testResultName: string,
    options?: TestResultGetVideoDownloadURLOptionalParams
  ): Promise<TestResultGetVideoDownloadURLResponse> {
    return this.sendOperationRequest(
      {
        resourceGroupName,
        testBaseAccountName,
        packageName,
        testResultName,
        options
      },
      testResultGetVideoDownloadURLOperationSpec
    );
  }

  sKUs: SKUs;
  testBaseAccounts: TestBaseAccounts;
  testBaseAccount: TestBaseAccount;
  testBaseAccountUsage: TestBaseAccountUsage;
  testBaseAccountAvailableOSs: TestBaseAccountAvailableOSs;
  testBaseAccountAvailableOS: TestBaseAccountAvailableOS;
  testBaseAccountFlightingRings: TestBaseAccountFlightingRings;
  testBaseAccountFlightingRing: TestBaseAccountFlightingRing;
  testBaseAccountTestTypes: TestBaseAccountTestTypes;
  testBaseAccountTestType: TestBaseAccountTestType;
  packages: Packages;
  package: Package;
  testSummaries: TestSummaries;
  testSummary: TestSummary;
  testResults: TestResults;
  testResult: TestResult;
  oSUpdates: OSUpdates;
  oSUpdate: OSUpdate;
  favoriteProcesses: FavoriteProcesses;
  favoriteProcess: FavoriteProcess;
  analysisResults: AnalysisResults;
  analysisResult: AnalysisResult;
  operations: Operations;
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const testBaseAccountGetFileUploadUrlOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/getFileUploadUrl",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.FileUploadURLResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const checkPackageNameAvailabilityOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/checkPackageNameAvailability",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CheckNameAvailabilityResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const packageGetDownloadURLOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/packages/{packageName}/getDownloadUrl",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DownloadURLResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName,
    Parameters.packageName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const testResultGetDownloadURLOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/packages/{packageName}/testResults/{testResultName}/getDownloadUrl",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DownloadURLResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName,
    Parameters.packageName,
    Parameters.testResultName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const testResultGetVideoDownloadURLOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/packages/{packageName}/testResults/{testResultName}/getVideoDownloadUrl",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DownloadURLResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName,
    Parameters.packageName,
    Parameters.testResultName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
