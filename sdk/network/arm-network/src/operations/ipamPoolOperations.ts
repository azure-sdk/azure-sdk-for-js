/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { IpamPoolOperations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { NetworkManagementClient } from "../networkManagementClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  IpamPool,
  IpamPoolListNextOptionalParams,
  IpamPoolListOptionalParams,
  IpamPoolListResponse,
  PoolAssociation,
  IpamPoolListAssociationNextOptionalParams,
  IpamPoolListAssociationOptionalParams,
  IpamPoolListAssociationResponse,
  IpamPoolCreateOptionalParams,
  IpamPoolCreateResponse,
  IpamPoolUpdateOptionalParams,
  IpamPoolUpdateResponse,
  IpamPoolGetOptionalParams,
  IpamPoolGetResponse,
  IpamPoolDeleteOptionalParams,
  IpamPoolDeleteResponse,
  IpamPoolAssociateResourcesOptionalParams,
  IpamPoolAssociateResourcesResponse,
  IpamPoolDisassociateResourcesOptionalParams,
  IpamPoolAllocateAzureResourceOptionalParams,
  IpamPoolAllocateAzureResourceResponse,
  IpamPoolAllocateNonAzureResourceOptionalParams,
  IpamPoolAllocateNonAzureResourceResponse,
  IpamPoolUsageOptionalParams,
  IpamPoolUsageResponse,
  IpamPoolListNextResponse,
  IpamPoolListAssociationNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing IpamPoolOperations operations. */
export class IpamPoolOperationsImpl implements IpamPoolOperations {
  private readonly client: NetworkManagementClient;

  /**
   * Initialize a new instance of the class IpamPoolOperations class.
   * @param client Reference to the service client
   */
  constructor(client: NetworkManagementClient) {
    this.client = client;
  }

  /**
   * Gets list of Pool resources at Network Manager level.
   * @param resourceGroupName Resource group name.
   * @param networkManagerName Network Manager resource name.
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    networkManagerName: string,
    options?: IpamPoolListOptionalParams
  ): PagedAsyncIterableIterator<IpamPool> {
    const iter = this.listPagingAll(
      resourceGroupName,
      networkManagerName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(
          resourceGroupName,
          networkManagerName,
          options,
          settings
        );
      }
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    networkManagerName: string,
    options?: IpamPoolListOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<IpamPool[]> {
    let result: IpamPoolListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(resourceGroupName, networkManagerName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        resourceGroupName,
        networkManagerName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    networkManagerName: string,
    options?: IpamPoolListOptionalParams
  ): AsyncIterableIterator<IpamPool> {
    for await (const page of this.listPagingPage(
      resourceGroupName,
      networkManagerName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List Associated Resource in the Pool.
   * @param resourceGroupName Resource group name.
   * @param networkManagerName Network Manager resource name.
   * @param poolName Pool resource name.
   * @param options The options parameters.
   */
  public listAssociation(
    resourceGroupName: string,
    networkManagerName: string,
    poolName: string,
    options?: IpamPoolListAssociationOptionalParams
  ): PagedAsyncIterableIterator<PoolAssociation> {
    const iter = this.listAssociationPagingAll(
      resourceGroupName,
      networkManagerName,
      poolName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listAssociationPagingPage(
          resourceGroupName,
          networkManagerName,
          poolName,
          options,
          settings
        );
      }
    };
  }

  private async *listAssociationPagingPage(
    resourceGroupName: string,
    networkManagerName: string,
    poolName: string,
    options?: IpamPoolListAssociationOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<PoolAssociation[]> {
    let result: IpamPoolListAssociationResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listAssociation(
        resourceGroupName,
        networkManagerName,
        poolName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listAssociationNext(
        resourceGroupName,
        networkManagerName,
        poolName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listAssociationPagingAll(
    resourceGroupName: string,
    networkManagerName: string,
    poolName: string,
    options?: IpamPoolListAssociationOptionalParams
  ): AsyncIterableIterator<PoolAssociation> {
    for await (const page of this.listAssociationPagingPage(
      resourceGroupName,
      networkManagerName,
      poolName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Creates/Updates the Pool resource.
   * @param resourceGroupName Resource group name.
   * @param networkManagerName Network Manager resource name.
   * @param poolName IP Address Manager Pool resource name.
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    networkManagerName: string,
    poolName: string,
    options?: IpamPoolCreateOptionalParams
  ): Promise<IpamPoolCreateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, networkManagerName, poolName, options },
      createOperationSpec
    );
  }

  /**
   * Updates the specific Pool resource.
   * @param resourceGroupName Resource group name.
   * @param networkManagerName Network Manager resource name.
   * @param poolName IP Address Manager Pool resource name.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    networkManagerName: string,
    poolName: string,
    options?: IpamPoolUpdateOptionalParams
  ): Promise<IpamPoolUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, networkManagerName, poolName, options },
      updateOperationSpec
    );
  }

  /**
   * Gets the specific Pool resource.
   * @param resourceGroupName Resource group name.
   * @param networkManagerName Network Manager resource name.
   * @param poolName Pool resource name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    networkManagerName: string,
    poolName: string,
    options?: IpamPoolGetOptionalParams
  ): Promise<IpamPoolGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, networkManagerName, poolName, options },
      getOperationSpec
    );
  }

  /**
   * Delete the Pool resource.
   * @param resourceGroupName Resource group name.
   * @param networkManagerName Network Manager resource name.
   * @param poolName Pool resource name.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    networkManagerName: string,
    poolName: string,
    options?: IpamPoolDeleteOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<IpamPoolDeleteResponse>,
      IpamPoolDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<IpamPoolDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, networkManagerName, poolName, options },
      spec: deleteOperationSpec
    });
    const poller = await createHttpPoller<
      IpamPoolDeleteResponse,
      OperationState<IpamPoolDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete the Pool resource.
   * @param resourceGroupName Resource group name.
   * @param networkManagerName Network Manager resource name.
   * @param poolName Pool resource name.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    networkManagerName: string,
    poolName: string,
    options?: IpamPoolDeleteOptionalParams
  ): Promise<IpamPoolDeleteResponse> {
    const poller = await this.beginDelete(
      resourceGroupName,
      networkManagerName,
      poolName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Gets list of Pool resources at Network Manager level.
   * @param resourceGroupName Resource group name.
   * @param networkManagerName Network Manager resource name.
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    networkManagerName: string,
    options?: IpamPoolListOptionalParams
  ): Promise<IpamPoolListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, networkManagerName, options },
      listOperationSpec
    );
  }

  /**
   * Associate a Resource to the Pool.
   * @param resourceGroupName Resource group name.
   * @param networkManagerName Network Manager resource name.
   * @param poolName Pool resource name.
   * @param options The options parameters.
   */
  associateResources(
    resourceGroupName: string,
    networkManagerName: string,
    poolName: string,
    options?: IpamPoolAssociateResourcesOptionalParams
  ): Promise<IpamPoolAssociateResourcesResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, networkManagerName, poolName, options },
      associateResourcesOperationSpec
    );
  }

  /**
   * Disassociate a Resource from the Pool.
   * @param resourceGroupName Resource group name.
   * @param networkManagerName Network Manager resource name.
   * @param poolName Pool resource name.
   * @param options The options parameters.
   */
  disassociateResources(
    resourceGroupName: string,
    networkManagerName: string,
    poolName: string,
    options?: IpamPoolDisassociateResourcesOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, networkManagerName, poolName, options },
      disassociateResourcesOperationSpec
    );
  }

  /**
   * Allocate Azure Resource.
   * @param resourceGroupName Resource group name.
   * @param networkManagerName Network Manager resource name.
   * @param poolName Pool resource name.
   * @param options The options parameters.
   */
  allocateAzureResource(
    resourceGroupName: string,
    networkManagerName: string,
    poolName: string,
    options?: IpamPoolAllocateAzureResourceOptionalParams
  ): Promise<IpamPoolAllocateAzureResourceResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, networkManagerName, poolName, options },
      allocateAzureResourceOperationSpec
    );
  }

  /**
   * Allocate Non-Azure Resource.
   * @param resourceGroupName Resource group name.
   * @param networkManagerName Network Manager resource name.
   * @param poolName Pool resource name.
   * @param options The options parameters.
   */
  allocateNonAzureResource(
    resourceGroupName: string,
    networkManagerName: string,
    poolName: string,
    options?: IpamPoolAllocateNonAzureResourceOptionalParams
  ): Promise<IpamPoolAllocateNonAzureResourceResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, networkManagerName, poolName, options },
      allocateNonAzureResourceOperationSpec
    );
  }

  /**
   * Get the Pool Usage.
   * @param resourceGroupName Resource group name.
   * @param networkManagerName Network Manager resource name.
   * @param poolName Pool resource name.
   * @param options The options parameters.
   */
  usage(
    resourceGroupName: string,
    networkManagerName: string,
    poolName: string,
    options?: IpamPoolUsageOptionalParams
  ): Promise<IpamPoolUsageResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, networkManagerName, poolName, options },
      usageOperationSpec
    );
  }

  /**
   * List Associated Resource in the Pool.
   * @param resourceGroupName Resource group name.
   * @param networkManagerName Network Manager resource name.
   * @param poolName Pool resource name.
   * @param options The options parameters.
   */
  private _listAssociation(
    resourceGroupName: string,
    networkManagerName: string,
    poolName: string,
    options?: IpamPoolListAssociationOptionalParams
  ): Promise<IpamPoolListAssociationResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, networkManagerName, poolName, options },
      listAssociationOperationSpec
    );
  }

  /**
   * ListNext
   * @param resourceGroupName Resource group name.
   * @param networkManagerName Network Manager resource name.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    networkManagerName: string,
    nextLink: string,
    options?: IpamPoolListNextOptionalParams
  ): Promise<IpamPoolListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, networkManagerName, nextLink, options },
      listNextOperationSpec
    );
  }

  /**
   * ListAssociationNext
   * @param resourceGroupName Resource group name.
   * @param networkManagerName Network Manager resource name.
   * @param poolName Pool resource name.
   * @param nextLink The nextLink from the previous successful call to the ListAssociation method.
   * @param options The options parameters.
   */
  private _listAssociationNext(
    resourceGroupName: string,
    networkManagerName: string,
    poolName: string,
    nextLink: string,
    options?: IpamPoolListAssociationNextOptionalParams
  ): Promise<IpamPoolListAssociationNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, networkManagerName, poolName, nextLink, options },
      listAssociationNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}/ipamPools/{poolName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.IpamPool
    },
    201: {
      bodyMapper: Mappers.IpamPool
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.networkManagerName,
    Parameters.poolName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}/ipamPools/{poolName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.IpamPool
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.networkManagerName,
    Parameters.poolName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}/ipamPools/{poolName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IpamPool
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.networkManagerName,
    Parameters.poolName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}/ipamPools/{poolName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.IpamPoolDeleteHeaders
    },
    201: {
      headersMapper: Mappers.IpamPoolDeleteHeaders
    },
    202: {
      headersMapper: Mappers.IpamPoolDeleteHeaders
    },
    204: {
      headersMapper: Mappers.IpamPoolDeleteHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.networkManagerName,
    Parameters.poolName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}/ipamPools",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IpamPoolList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.skipToken,
    Parameters.skip,
    Parameters.top,
    Parameters.sortKey,
    Parameters.sortValue
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.networkManagerName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const associateResourcesOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}/ipamPools/{poolName}/associateResourcesToPool",
  httpMethod: "POST",
  responses: {
    202: {
      bodyMapper: Mappers.PoolAssociation
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.networkManagerName,
    Parameters.poolName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const disassociateResourcesOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}/ipamPools/{poolName}/disassociateResourcesFromPool",
  httpMethod: "POST",
  responses: {
    202: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.networkManagerName,
    Parameters.poolName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const allocateAzureResourceOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}/ipamPools/{poolName}/allocateAzureResource",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.PoolAssociation
    },
    201: {
      bodyMapper: Mappers.PoolAssociation
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.networkManagerName,
    Parameters.poolName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const allocateNonAzureResourceOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}/ipamPools/{poolName}/allocateNonAzureResource",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.PoolAssociation
    },
    201: {
      bodyMapper: Mappers.PoolAssociation
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.networkManagerName,
    Parameters.poolName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const usageOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}/ipamPools/{poolName}/poolUsage",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.PoolUsage
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.networkManagerName,
    Parameters.poolName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listAssociationOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}/ipamPools/{poolName}/associatedResources",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.PoolAssociationList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.skipToken,
    Parameters.skip,
    Parameters.top,
    Parameters.sortKey,
    Parameters.sortValue
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.networkManagerName,
    Parameters.poolName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IpamPoolList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.networkManagerName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listAssociationNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PoolAssociationList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.networkManagerName,
    Parameters.poolName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
