/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { NspAccessRules } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { NetworkManagementClient } from "../networkManagementClient.js";
import {
  NspAccessRule,
  NspAccessRulesListNextOptionalParams,
  NspAccessRulesListOptionalParams,
  NspAccessRulesListResponse,
  NspAccessRulesGetOptionalParams,
  NspAccessRulesGetResponse,
  NspAccessRulesCreateOrUpdateOptionalParams,
  NspAccessRulesCreateOrUpdateResponse,
  NspAccessRulesDeleteOptionalParams,
  NspAccessRulesListNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing NspAccessRules operations. */
export class NspAccessRulesImpl implements NspAccessRules {
  private readonly client: NetworkManagementClient;

  /**
   * Initialize a new instance of the class NspAccessRules class.
   * @param client Reference to the service client
   */
  constructor(client: NetworkManagementClient) {
    this.client = client;
  }

  /**
   * Lists the NSP access rules in the specified NSP profile.
   * @param resourceGroupName The name of the resource group.
   * @param networkSecurityPerimeterName The name of the network security perimeter.
   * @param profileName The name of the NSP profile.
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    networkSecurityPerimeterName: string,
    profileName: string,
    options?: NspAccessRulesListOptionalParams,
  ): PagedAsyncIterableIterator<NspAccessRule> {
    const iter = this.listPagingAll(
      resourceGroupName,
      networkSecurityPerimeterName,
      profileName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(
          resourceGroupName,
          networkSecurityPerimeterName,
          profileName,
          options,
          settings,
        );
      },
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    networkSecurityPerimeterName: string,
    profileName: string,
    options?: NspAccessRulesListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<NspAccessRule[]> {
    let result: NspAccessRulesListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(
        resourceGroupName,
        networkSecurityPerimeterName,
        profileName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        resourceGroupName,
        networkSecurityPerimeterName,
        profileName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    networkSecurityPerimeterName: string,
    profileName: string,
    options?: NspAccessRulesListOptionalParams,
  ): AsyncIterableIterator<NspAccessRule> {
    for await (const page of this.listPagingPage(
      resourceGroupName,
      networkSecurityPerimeterName,
      profileName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Gets the specified NSP access rule by name.
   * @param resourceGroupName The name of the resource group.
   * @param networkSecurityPerimeterName The name of the network security perimeter.
   * @param profileName The name of the NSP profile.
   * @param accessRuleName The name of the NSP access rule.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    networkSecurityPerimeterName: string,
    profileName: string,
    accessRuleName: string,
    options?: NspAccessRulesGetOptionalParams,
  ): Promise<NspAccessRulesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        networkSecurityPerimeterName,
        profileName,
        accessRuleName,
        options,
      },
      getOperationSpec,
    );
  }

  /**
   * Creates or updates a network access rule.
   * @param resourceGroupName The name of the resource group.
   * @param networkSecurityPerimeterName The name of the network security perimeter.
   * @param profileName The name of the NSP profile.
   * @param accessRuleName The name of the NSP access rule.
   * @param parameters Parameters that hold the NspAccessRule resource to be created/updated.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    networkSecurityPerimeterName: string,
    profileName: string,
    accessRuleName: string,
    parameters: NspAccessRule,
    options?: NspAccessRulesCreateOrUpdateOptionalParams,
  ): Promise<NspAccessRulesCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        networkSecurityPerimeterName,
        profileName,
        accessRuleName,
        parameters,
        options,
      },
      createOrUpdateOperationSpec,
    );
  }

  /**
   * Deletes an NSP access rule.
   * @param resourceGroupName The name of the resource group.
   * @param networkSecurityPerimeterName The name of the network security perimeter.
   * @param profileName The name of the NSP profile.
   * @param accessRuleName The name of the NSP access rule.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    networkSecurityPerimeterName: string,
    profileName: string,
    accessRuleName: string,
    options?: NspAccessRulesDeleteOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        networkSecurityPerimeterName,
        profileName,
        accessRuleName,
        options,
      },
      deleteOperationSpec,
    );
  }

  /**
   * Lists the NSP access rules in the specified NSP profile.
   * @param resourceGroupName The name of the resource group.
   * @param networkSecurityPerimeterName The name of the network security perimeter.
   * @param profileName The name of the NSP profile.
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    networkSecurityPerimeterName: string,
    profileName: string,
    options?: NspAccessRulesListOptionalParams,
  ): Promise<NspAccessRulesListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, networkSecurityPerimeterName, profileName, options },
      listOperationSpec,
    );
  }

  /**
   * ListNext
   * @param resourceGroupName The name of the resource group.
   * @param networkSecurityPerimeterName The name of the network security perimeter.
   * @param profileName The name of the NSP profile.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    networkSecurityPerimeterName: string,
    profileName: string,
    nextLink: string,
    options?: NspAccessRulesListNextOptionalParams,
  ): Promise<NspAccessRulesListNextResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        networkSecurityPerimeterName,
        profileName,
        nextLink,
        options,
      },
      listNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityPerimeters/{networkSecurityPerimeterName}/profiles/{profileName}/accessRules/{accessRuleName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NspAccessRule,
    },
    default: {
      bodyMapper: Mappers.CloudErrorAutoGenerated,
    },
  },
  queryParameters: [Parameters.apiVersion2],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.networkSecurityPerimeterName,
    Parameters.profileName,
    Parameters.accessRuleName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityPerimeters/{networkSecurityPerimeterName}/profiles/{profileName}/accessRules/{accessRuleName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.NspAccessRule,
    },
    201: {
      bodyMapper: Mappers.NspAccessRule,
    },
    default: {
      bodyMapper: Mappers.CloudErrorAutoGenerated,
    },
  },
  requestBody: Parameters.parameters96,
  queryParameters: [Parameters.apiVersion2],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.networkSecurityPerimeterName,
    Parameters.profileName,
    Parameters.accessRuleName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityPerimeters/{networkSecurityPerimeterName}/profiles/{profileName}/accessRules/{accessRuleName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudErrorAutoGenerated,
    },
  },
  queryParameters: [Parameters.apiVersion2],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.networkSecurityPerimeterName,
    Parameters.profileName,
    Parameters.accessRuleName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityPerimeters/{networkSecurityPerimeterName}/profiles/{profileName}/accessRules",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NspAccessRuleListResult,
    },
    default: {
      bodyMapper: Mappers.CloudErrorAutoGenerated,
    },
  },
  queryParameters: [
    Parameters.top,
    Parameters.skipToken1,
    Parameters.apiVersion2,
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.networkSecurityPerimeterName,
    Parameters.profileName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NspAccessRuleListResult,
    },
    default: {
      bodyMapper: Mappers.CloudErrorAutoGenerated,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.networkSecurityPerimeterName,
    Parameters.profileName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
