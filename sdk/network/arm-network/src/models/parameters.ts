/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter
} from "@azure/core-client";
import {
  NetworkWatcher as NetworkWatcherMapper,
  TagsObject as TagsObjectMapper,
  TopologyParameters as TopologyParametersMapper,
  VerificationIPFlowParameters as VerificationIPFlowParametersMapper,
  NextHopParameters as NextHopParametersMapper,
  SecurityGroupViewParameters as SecurityGroupViewParametersMapper,
  TroubleshootingParameters as TroubleshootingParametersMapper,
  QueryTroubleshootingParameters as QueryTroubleshootingParametersMapper,
  FlowLogInformation as FlowLogInformationMapper,
  FlowLogStatusParameters as FlowLogStatusParametersMapper,
  ConnectivityParameters as ConnectivityParametersMapper,
  AzureReachabilityReportParameters as AzureReachabilityReportParametersMapper,
  AvailableProvidersListParameters as AvailableProvidersListParametersMapper,
  NetworkConfigurationDiagnosticParameters as NetworkConfigurationDiagnosticParametersMapper,
  PacketCapture as PacketCaptureMapper,
  ConnectionMonitor as ConnectionMonitorMapper,
  FlowLog as FlowLogMapper
} from "../models/mappers";

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const parameters: OperationParameter = {
  parameterPath: "parameters",
  mapper: NetworkWatcherMapper
};

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const networkWatcherName: OperationURLParameter = {
  parameterPath: "networkWatcherName",
  mapper: {
    serializedName: "networkWatcherName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2023-09-01-preview",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters1: OperationParameter = {
  parameterPath: "parameters",
  mapper: TagsObjectMapper
};

export const parameters2: OperationParameter = {
  parameterPath: "parameters",
  mapper: TopologyParametersMapper
};

export const parameters3: OperationParameter = {
  parameterPath: "parameters",
  mapper: VerificationIPFlowParametersMapper
};

export const parameters4: OperationParameter = {
  parameterPath: "parameters",
  mapper: NextHopParametersMapper
};

export const parameters5: OperationParameter = {
  parameterPath: "parameters",
  mapper: SecurityGroupViewParametersMapper
};

export const parameters6: OperationParameter = {
  parameterPath: "parameters",
  mapper: TroubleshootingParametersMapper
};

export const parameters7: OperationParameter = {
  parameterPath: "parameters",
  mapper: QueryTroubleshootingParametersMapper
};

export const parameters8: OperationParameter = {
  parameterPath: "parameters",
  mapper: FlowLogInformationMapper
};

export const parameters9: OperationParameter = {
  parameterPath: "parameters",
  mapper: FlowLogStatusParametersMapper
};

export const parameters10: OperationParameter = {
  parameterPath: "parameters",
  mapper: ConnectivityParametersMapper
};

export const parameters11: OperationParameter = {
  parameterPath: "parameters",
  mapper: AzureReachabilityReportParametersMapper
};

export const parameters12: OperationParameter = {
  parameterPath: "parameters",
  mapper: AvailableProvidersListParametersMapper
};

export const parameters13: OperationParameter = {
  parameterPath: "parameters",
  mapper: NetworkConfigurationDiagnosticParametersMapper
};

export const parameters14: OperationParameter = {
  parameterPath: "parameters",
  mapper: PacketCaptureMapper
};

export const packetCaptureName: OperationURLParameter = {
  parameterPath: "packetCaptureName",
  mapper: {
    serializedName: "packetCaptureName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters15: OperationParameter = {
  parameterPath: "parameters",
  mapper: ConnectionMonitorMapper
};

export const connectionMonitorName: OperationURLParameter = {
  parameterPath: "connectionMonitorName",
  mapper: {
    serializedName: "connectionMonitorName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const migrate: OperationQueryParameter = {
  parameterPath: ["options", "migrate"],
  mapper: {
    serializedName: "migrate",
    type: {
      name: "String"
    }
  }
};

export const parameters16: OperationParameter = {
  parameterPath: "parameters",
  mapper: FlowLogMapper
};

export const flowLogName: OperationURLParameter = {
  parameterPath: "flowLogName",
  mapper: {
    serializedName: "flowLogName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};
