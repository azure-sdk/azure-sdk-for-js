/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetails"
        }
      }
    }
  }
};

export const ErrorDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetails",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TagsObject: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TagsObject",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const NetworkWatcherListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkWatcherListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkWatcher"
            }
          }
        }
      }
    }
  }
};

export const TopologyParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TopologyParameters",
    modelProperties: {
      targetResourceGroupName: {
        serializedName: "targetResourceGroupName",
        type: {
          name: "String"
        }
      },
      targetVirtualNetwork: {
        serializedName: "targetVirtualNetwork",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      targetSubnet: {
        serializedName: "targetSubnet",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      }
    }
  }
};

export const SubResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SubResource",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Topology: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Topology",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      createdDateTime: {
        serializedName: "createdDateTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastModified: {
        serializedName: "lastModified",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      resources: {
        serializedName: "resources",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TopologyResource"
            }
          }
        }
      }
    }
  }
};

export const TopologyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TopologyResource",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      associations: {
        serializedName: "associations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TopologyAssociation"
            }
          }
        }
      }
    }
  }
};

export const TopologyAssociation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TopologyAssociation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      resourceId: {
        serializedName: "resourceId",
        type: {
          name: "String"
        }
      },
      associationType: {
        serializedName: "associationType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VerificationIPFlowParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VerificationIPFlowParameters",
    modelProperties: {
      targetResourceId: {
        serializedName: "targetResourceId",
        required: true,
        type: {
          name: "String"
        }
      },
      direction: {
        serializedName: "direction",
        required: true,
        type: {
          name: "String"
        }
      },
      protocol: {
        serializedName: "protocol",
        required: true,
        type: {
          name: "String"
        }
      },
      localPort: {
        serializedName: "localPort",
        required: true,
        type: {
          name: "String"
        }
      },
      remotePort: {
        serializedName: "remotePort",
        required: true,
        type: {
          name: "String"
        }
      },
      localIPAddress: {
        serializedName: "localIPAddress",
        required: true,
        type: {
          name: "String"
        }
      },
      remoteIPAddress: {
        serializedName: "remoteIPAddress",
        required: true,
        type: {
          name: "String"
        }
      },
      targetNicResourceId: {
        serializedName: "targetNicResourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VerificationIPFlowResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VerificationIPFlowResult",
    modelProperties: {
      access: {
        serializedName: "access",
        type: {
          name: "String"
        }
      },
      ruleName: {
        serializedName: "ruleName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NextHopParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NextHopParameters",
    modelProperties: {
      targetResourceId: {
        serializedName: "targetResourceId",
        required: true,
        type: {
          name: "String"
        }
      },
      sourceIPAddress: {
        serializedName: "sourceIPAddress",
        required: true,
        type: {
          name: "String"
        }
      },
      destinationIPAddress: {
        serializedName: "destinationIPAddress",
        required: true,
        type: {
          name: "String"
        }
      },
      targetNicResourceId: {
        serializedName: "targetNicResourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NextHopResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NextHopResult",
    modelProperties: {
      nextHopType: {
        serializedName: "nextHopType",
        type: {
          name: "String"
        }
      },
      nextHopIpAddress: {
        serializedName: "nextHopIpAddress",
        type: {
          name: "String"
        }
      },
      routeTableId: {
        serializedName: "routeTableId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SecurityGroupViewParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecurityGroupViewParameters",
    modelProperties: {
      targetResourceId: {
        serializedName: "targetResourceId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SecurityGroupViewResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecurityGroupViewResult",
    modelProperties: {
      networkInterfaces: {
        serializedName: "networkInterfaces",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SecurityGroupNetworkInterface"
            }
          }
        }
      }
    }
  }
};

export const SecurityGroupNetworkInterface: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecurityGroupNetworkInterface",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      securityRuleAssociations: {
        serializedName: "securityRuleAssociations",
        type: {
          name: "Composite",
          className: "SecurityRuleAssociations"
        }
      }
    }
  }
};

export const SecurityRuleAssociations: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecurityRuleAssociations",
    modelProperties: {
      networkInterfaceAssociation: {
        serializedName: "networkInterfaceAssociation",
        type: {
          name: "Composite",
          className: "NetworkInterfaceAssociation"
        }
      },
      subnetAssociation: {
        serializedName: "subnetAssociation",
        type: {
          name: "Composite",
          className: "SubnetAssociation"
        }
      },
      defaultSecurityRules: {
        serializedName: "defaultSecurityRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SecurityRule"
            }
          }
        }
      },
      effectiveSecurityRules: {
        serializedName: "effectiveSecurityRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EffectiveNetworkSecurityRule"
            }
          }
        }
      }
    }
  }
};

export const NetworkInterfaceAssociation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkInterfaceAssociation",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      securityRules: {
        serializedName: "securityRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SecurityRule"
            }
          }
        }
      }
    }
  }
};

export const SubnetAssociation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SubnetAssociation",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      securityRules: {
        serializedName: "securityRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SecurityRule"
            }
          }
        }
      }
    }
  }
};

export const EffectiveNetworkSecurityRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EffectiveNetworkSecurityRule",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      protocol: {
        serializedName: "protocol",
        type: {
          name: "String"
        }
      },
      sourcePortRange: {
        serializedName: "sourcePortRange",
        type: {
          name: "String"
        }
      },
      destinationPortRange: {
        serializedName: "destinationPortRange",
        type: {
          name: "String"
        }
      },
      sourcePortRanges: {
        serializedName: "sourcePortRanges",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      destinationPortRanges: {
        serializedName: "destinationPortRanges",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      sourceAddressPrefix: {
        serializedName: "sourceAddressPrefix",
        type: {
          name: "String"
        }
      },
      destinationAddressPrefix: {
        serializedName: "destinationAddressPrefix",
        type: {
          name: "String"
        }
      },
      sourceAddressPrefixes: {
        serializedName: "sourceAddressPrefixes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      destinationAddressPrefixes: {
        serializedName: "destinationAddressPrefixes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      expandedSourceAddressPrefix: {
        serializedName: "expandedSourceAddressPrefix",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      expandedDestinationAddressPrefix: {
        serializedName: "expandedDestinationAddressPrefix",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      access: {
        serializedName: "access",
        type: {
          name: "String"
        }
      },
      priority: {
        serializedName: "priority",
        type: {
          name: "Number"
        }
      },
      direction: {
        serializedName: "direction",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PacketCapture: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PacketCapture",
    modelProperties: {
      target: {
        serializedName: "properties.target",
        required: true,
        type: {
          name: "String"
        }
      },
      scope: {
        serializedName: "properties.scope",
        type: {
          name: "Composite",
          className: "PacketCaptureMachineScope"
        }
      },
      targetType: {
        serializedName: "properties.targetType",
        type: {
          name: "Enum",
          allowedValues: ["AzureVM", "AzureVMSS"]
        }
      },
      bytesToCapturePerPacket: {
        defaultValue: 0,
        constraints: {
          InclusiveMaximum: 4294967295,
          InclusiveMinimum: 0
        },
        serializedName: "properties.bytesToCapturePerPacket",
        type: {
          name: "Number"
        }
      },
      totalBytesPerSession: {
        defaultValue: 1073741824,
        constraints: {
          InclusiveMaximum: 4294967295,
          InclusiveMinimum: 0
        },
        serializedName: "properties.totalBytesPerSession",
        type: {
          name: "Number"
        }
      },
      timeLimitInSeconds: {
        defaultValue: 18000,
        constraints: {
          InclusiveMaximum: 18000,
          InclusiveMinimum: 0
        },
        serializedName: "properties.timeLimitInSeconds",
        type: {
          name: "Number"
        }
      },
      storageLocation: {
        serializedName: "properties.storageLocation",
        type: {
          name: "Composite",
          className: "PacketCaptureStorageLocation"
        }
      },
      filters: {
        serializedName: "properties.filters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PacketCaptureFilter"
            }
          }
        }
      }
    }
  }
};

export const PacketCaptureParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PacketCaptureParameters",
    modelProperties: {
      target: {
        serializedName: "target",
        required: true,
        type: {
          name: "String"
        }
      },
      scope: {
        serializedName: "scope",
        type: {
          name: "Composite",
          className: "PacketCaptureMachineScope"
        }
      },
      targetType: {
        serializedName: "targetType",
        type: {
          name: "Enum",
          allowedValues: ["AzureVM", "AzureVMSS"]
        }
      },
      bytesToCapturePerPacket: {
        defaultValue: 0,
        constraints: {
          InclusiveMaximum: 4294967295,
          InclusiveMinimum: 0
        },
        serializedName: "bytesToCapturePerPacket",
        type: {
          name: "Number"
        }
      },
      totalBytesPerSession: {
        defaultValue: 1073741824,
        constraints: {
          InclusiveMaximum: 4294967295,
          InclusiveMinimum: 0
        },
        serializedName: "totalBytesPerSession",
        type: {
          name: "Number"
        }
      },
      timeLimitInSeconds: {
        defaultValue: 18000,
        constraints: {
          InclusiveMaximum: 18000,
          InclusiveMinimum: 0
        },
        serializedName: "timeLimitInSeconds",
        type: {
          name: "Number"
        }
      },
      storageLocation: {
        serializedName: "storageLocation",
        type: {
          name: "Composite",
          className: "PacketCaptureStorageLocation"
        }
      },
      filters: {
        serializedName: "filters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PacketCaptureFilter"
            }
          }
        }
      }
    }
  }
};

export const PacketCaptureMachineScope: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PacketCaptureMachineScope",
    modelProperties: {
      include: {
        serializedName: "include",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      exclude: {
        serializedName: "exclude",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const PacketCaptureStorageLocation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PacketCaptureStorageLocation",
    modelProperties: {
      storageId: {
        serializedName: "storageId",
        type: {
          name: "String"
        }
      },
      storagePath: {
        serializedName: "storagePath",
        type: {
          name: "String"
        }
      },
      filePath: {
        serializedName: "filePath",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PacketCaptureFilter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PacketCaptureFilter",
    modelProperties: {
      protocol: {
        defaultValue: "Any",
        serializedName: "protocol",
        type: {
          name: "String"
        }
      },
      localIPAddress: {
        serializedName: "localIPAddress",
        type: {
          name: "String"
        }
      },
      remoteIPAddress: {
        serializedName: "remoteIPAddress",
        type: {
          name: "String"
        }
      },
      localPort: {
        serializedName: "localPort",
        type: {
          name: "String"
        }
      },
      remotePort: {
        serializedName: "remotePort",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PacketCaptureResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PacketCaptureResult",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "properties.target",
        type: {
          name: "String"
        }
      },
      scope: {
        serializedName: "properties.scope",
        type: {
          name: "Composite",
          className: "PacketCaptureMachineScope"
        }
      },
      targetType: {
        serializedName: "properties.targetType",
        type: {
          name: "Enum",
          allowedValues: ["AzureVM", "AzureVMSS"]
        }
      },
      bytesToCapturePerPacket: {
        defaultValue: 0,
        constraints: {
          InclusiveMaximum: 4294967295,
          InclusiveMinimum: 0
        },
        serializedName: "properties.bytesToCapturePerPacket",
        type: {
          name: "Number"
        }
      },
      totalBytesPerSession: {
        defaultValue: 1073741824,
        constraints: {
          InclusiveMaximum: 4294967295,
          InclusiveMinimum: 0
        },
        serializedName: "properties.totalBytesPerSession",
        type: {
          name: "Number"
        }
      },
      timeLimitInSeconds: {
        defaultValue: 18000,
        constraints: {
          InclusiveMaximum: 18000,
          InclusiveMinimum: 0
        },
        serializedName: "properties.timeLimitInSeconds",
        type: {
          name: "Number"
        }
      },
      storageLocation: {
        serializedName: "properties.storageLocation",
        type: {
          name: "Composite",
          className: "PacketCaptureStorageLocation"
        }
      },
      filters: {
        serializedName: "properties.filters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PacketCaptureFilter"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PacketCaptureQueryStatusResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PacketCaptureQueryStatusResult",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      captureStartTime: {
        serializedName: "captureStartTime",
        type: {
          name: "DateTime"
        }
      },
      packetCaptureStatus: {
        serializedName: "packetCaptureStatus",
        type: {
          name: "String"
        }
      },
      stopReason: {
        serializedName: "stopReason",
        type: {
          name: "String"
        }
      },
      packetCaptureError: {
        serializedName: "packetCaptureError",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const PacketCaptureListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PacketCaptureListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PacketCaptureResult"
            }
          }
        }
      }
    }
  }
};

export const TroubleshootingParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TroubleshootingParameters",
    modelProperties: {
      targetResourceId: {
        serializedName: "targetResourceId",
        required: true,
        type: {
          name: "String"
        }
      },
      storageId: {
        serializedName: "properties.storageId",
        required: true,
        type: {
          name: "String"
        }
      },
      storagePath: {
        serializedName: "properties.storagePath",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TroubleshootingResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TroubleshootingResult",
    modelProperties: {
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      results: {
        serializedName: "results",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TroubleshootingDetails"
            }
          }
        }
      }
    }
  }
};

export const TroubleshootingDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TroubleshootingDetails",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      reasonType: {
        serializedName: "reasonType",
        type: {
          name: "String"
        }
      },
      summary: {
        serializedName: "summary",
        type: {
          name: "String"
        }
      },
      detail: {
        serializedName: "detail",
        type: {
          name: "String"
        }
      },
      recommendedActions: {
        serializedName: "recommendedActions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TroubleshootingRecommendedActions"
            }
          }
        }
      }
    }
  }
};

export const TroubleshootingRecommendedActions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TroubleshootingRecommendedActions",
    modelProperties: {
      actionId: {
        serializedName: "actionId",
        type: {
          name: "String"
        }
      },
      actionText: {
        serializedName: "actionText",
        type: {
          name: "String"
        }
      },
      actionUri: {
        serializedName: "actionUri",
        type: {
          name: "String"
        }
      },
      actionUriText: {
        serializedName: "actionUriText",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const QueryTroubleshootingParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QueryTroubleshootingParameters",
    modelProperties: {
      targetResourceId: {
        serializedName: "targetResourceId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FlowLogInformation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FlowLogInformation",
    modelProperties: {
      targetResourceId: {
        serializedName: "targetResourceId",
        required: true,
        type: {
          name: "String"
        }
      },
      flowAnalyticsConfiguration: {
        serializedName: "flowAnalyticsConfiguration",
        type: {
          name: "Composite",
          className: "TrafficAnalyticsProperties"
        }
      },
      storageId: {
        serializedName: "properties.storageId",
        required: true,
        type: {
          name: "String"
        }
      },
      enabled: {
        serializedName: "properties.enabled",
        required: true,
        type: {
          name: "Boolean"
        }
      },
      retentionPolicy: {
        serializedName: "properties.retentionPolicy",
        type: {
          name: "Composite",
          className: "RetentionPolicyParameters"
        }
      },
      format: {
        serializedName: "properties.format",
        type: {
          name: "Composite",
          className: "FlowLogFormatParameters"
        }
      }
    }
  }
};

export const RetentionPolicyParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RetentionPolicyParameters",
    modelProperties: {
      days: {
        defaultValue: 0,
        serializedName: "days",
        type: {
          name: "Number"
        }
      },
      enabled: {
        defaultValue: false,
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const FlowLogFormatParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FlowLogFormatParameters",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      version: {
        defaultValue: 0,
        serializedName: "version",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const TrafficAnalyticsProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrafficAnalyticsProperties",
    modelProperties: {
      networkWatcherFlowAnalyticsConfiguration: {
        serializedName: "networkWatcherFlowAnalyticsConfiguration",
        type: {
          name: "Composite",
          className: "TrafficAnalyticsConfigurationProperties"
        }
      }
    }
  }
};

export const TrafficAnalyticsConfigurationProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrafficAnalyticsConfigurationProperties",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      },
      workspaceId: {
        serializedName: "workspaceId",
        type: {
          name: "String"
        }
      },
      workspaceRegion: {
        serializedName: "workspaceRegion",
        type: {
          name: "String"
        }
      },
      workspaceResourceId: {
        serializedName: "workspaceResourceId",
        type: {
          name: "String"
        }
      },
      trafficAnalyticsInterval: {
        serializedName: "trafficAnalyticsInterval",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const FlowLogStatusParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FlowLogStatusParameters",
    modelProperties: {
      targetResourceId: {
        serializedName: "targetResourceId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConnectivityParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectivityParameters",
    modelProperties: {
      source: {
        serializedName: "source",
        type: {
          name: "Composite",
          className: "ConnectivitySource"
        }
      },
      destination: {
        serializedName: "destination",
        type: {
          name: "Composite",
          className: "ConnectivityDestination"
        }
      },
      protocol: {
        serializedName: "protocol",
        type: {
          name: "String"
        }
      },
      protocolConfiguration: {
        serializedName: "protocolConfiguration",
        type: {
          name: "Composite",
          className: "ProtocolConfiguration"
        }
      },
      preferredIPVersion: {
        serializedName: "preferredIPVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConnectivitySource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectivitySource",
    modelProperties: {
      resourceId: {
        serializedName: "resourceId",
        required: true,
        type: {
          name: "String"
        }
      },
      port: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 0
        },
        serializedName: "port",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ConnectivityDestination: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectivityDestination",
    modelProperties: {
      resourceId: {
        serializedName: "resourceId",
        type: {
          name: "String"
        }
      },
      address: {
        serializedName: "address",
        type: {
          name: "String"
        }
      },
      port: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 0
        },
        serializedName: "port",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ProtocolConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtocolConfiguration",
    modelProperties: {
      httpConfiguration: {
        serializedName: "httpConfiguration",
        type: {
          name: "Composite",
          className: "HttpConfiguration"
        }
      }
    }
  }
};

export const HttpConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HttpConfiguration",
    modelProperties: {
      method: {
        serializedName: "method",
        type: {
          name: "String"
        }
      },
      headers: {
        serializedName: "headers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HttpHeader"
            }
          }
        }
      },
      validStatusCodes: {
        serializedName: "validStatusCodes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      }
    }
  }
};

export const HttpHeader: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HttpHeader",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConnectivityInformation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectivityInformation",
    modelProperties: {
      hops: {
        serializedName: "hops",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnectivityHop"
            }
          }
        }
      },
      connectionStatus: {
        serializedName: "connectionStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      avgLatencyInMs: {
        serializedName: "avgLatencyInMs",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      minLatencyInMs: {
        serializedName: "minLatencyInMs",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      maxLatencyInMs: {
        serializedName: "maxLatencyInMs",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      probesSent: {
        serializedName: "probesSent",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      probesFailed: {
        serializedName: "probesFailed",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ConnectivityHop: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectivityHop",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      address: {
        serializedName: "address",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceId: {
        serializedName: "resourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      nextHopIds: {
        serializedName: "nextHopIds",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      previousHopIds: {
        serializedName: "previousHopIds",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      links: {
        serializedName: "links",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HopLink"
            }
          }
        }
      },
      previousLinks: {
        serializedName: "previousLinks",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HopLink"
            }
          }
        }
      },
      issues: {
        serializedName: "issues",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnectivityIssue"
            }
          }
        }
      }
    }
  }
};

export const HopLink: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HopLink",
    modelProperties: {
      nextHopId: {
        serializedName: "nextHopId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      linkType: {
        serializedName: "linkType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      issues: {
        serializedName: "issues",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnectivityIssue"
            }
          }
        }
      },
      context: {
        serializedName: "context",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      resourceId: {
        serializedName: "resourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      roundTripTimeMin: {
        constraints: {
          InclusiveMaximum: 4294967295,
          InclusiveMinimum: 0
        },
        serializedName: "properties.roundTripTimeMin",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      roundTripTimeAvg: {
        constraints: {
          InclusiveMaximum: 4294967295,
          InclusiveMinimum: 0
        },
        serializedName: "properties.roundTripTimeAvg",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      roundTripTimeMax: {
        constraints: {
          InclusiveMaximum: 4294967295,
          InclusiveMinimum: 0
        },
        serializedName: "properties.roundTripTimeMax",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ConnectivityIssue: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectivityIssue",
    modelProperties: {
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      severity: {
        serializedName: "severity",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      context: {
        serializedName: "context",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Dictionary",
              value: { type: { name: "String" } }
            }
          }
        }
      }
    }
  }
};

export const AzureReachabilityReportParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureReachabilityReportParameters",
    modelProperties: {
      providerLocation: {
        serializedName: "providerLocation",
        type: {
          name: "Composite",
          className: "AzureReachabilityReportLocation"
        }
      },
      providers: {
        serializedName: "providers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      azureLocations: {
        serializedName: "azureLocations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      startTime: {
        serializedName: "startTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        required: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const AzureReachabilityReportLocation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureReachabilityReportLocation",
    modelProperties: {
      country: {
        serializedName: "country",
        required: true,
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "state",
        type: {
          name: "String"
        }
      },
      city: {
        serializedName: "city",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureReachabilityReport: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureReachabilityReport",
    modelProperties: {
      aggregationLevel: {
        serializedName: "aggregationLevel",
        required: true,
        type: {
          name: "String"
        }
      },
      providerLocation: {
        serializedName: "providerLocation",
        type: {
          name: "Composite",
          className: "AzureReachabilityReportLocation"
        }
      },
      reachabilityReport: {
        serializedName: "reachabilityReport",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AzureReachabilityReportItem"
            }
          }
        }
      }
    }
  }
};

export const AzureReachabilityReportItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureReachabilityReportItem",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      azureLocation: {
        serializedName: "azureLocation",
        type: {
          name: "String"
        }
      },
      latencies: {
        serializedName: "latencies",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AzureReachabilityReportLatencyInfo"
            }
          }
        }
      }
    }
  }
};

export const AzureReachabilityReportLatencyInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureReachabilityReportLatencyInfo",
    modelProperties: {
      timeStamp: {
        serializedName: "timeStamp",
        type: {
          name: "DateTime"
        }
      },
      score: {
        constraints: {
          InclusiveMaximum: 100,
          InclusiveMinimum: 1
        },
        serializedName: "score",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const AvailableProvidersListParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AvailableProvidersListParameters",
    modelProperties: {
      azureLocations: {
        serializedName: "azureLocations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      country: {
        serializedName: "country",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "state",
        type: {
          name: "String"
        }
      },
      city: {
        serializedName: "city",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AvailableProvidersList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AvailableProvidersList",
    modelProperties: {
      countries: {
        serializedName: "countries",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AvailableProvidersListCountry"
            }
          }
        }
      }
    }
  }
};

export const AvailableProvidersListCountry: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AvailableProvidersListCountry",
    modelProperties: {
      countryName: {
        serializedName: "countryName",
        type: {
          name: "String"
        }
      },
      providers: {
        serializedName: "providers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      states: {
        serializedName: "states",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AvailableProvidersListState"
            }
          }
        }
      }
    }
  }
};

export const AvailableProvidersListState: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AvailableProvidersListState",
    modelProperties: {
      stateName: {
        serializedName: "stateName",
        type: {
          name: "String"
        }
      },
      providers: {
        serializedName: "providers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      cities: {
        serializedName: "cities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AvailableProvidersListCity"
            }
          }
        }
      }
    }
  }
};

export const AvailableProvidersListCity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AvailableProvidersListCity",
    modelProperties: {
      cityName: {
        serializedName: "cityName",
        type: {
          name: "String"
        }
      },
      providers: {
        serializedName: "providers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const NetworkConfigurationDiagnosticParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkConfigurationDiagnosticParameters",
    modelProperties: {
      targetResourceId: {
        serializedName: "targetResourceId",
        required: true,
        type: {
          name: "String"
        }
      },
      verbosityLevel: {
        serializedName: "verbosityLevel",
        type: {
          name: "String"
        }
      },
      profiles: {
        serializedName: "profiles",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkConfigurationDiagnosticProfile"
            }
          }
        }
      }
    }
  }
};

export const NetworkConfigurationDiagnosticProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkConfigurationDiagnosticProfile",
    modelProperties: {
      direction: {
        serializedName: "direction",
        required: true,
        type: {
          name: "String"
        }
      },
      protocol: {
        serializedName: "protocol",
        required: true,
        type: {
          name: "String"
        }
      },
      source: {
        serializedName: "source",
        required: true,
        type: {
          name: "String"
        }
      },
      destination: {
        serializedName: "destination",
        required: true,
        type: {
          name: "String"
        }
      },
      destinationPort: {
        serializedName: "destinationPort",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkConfigurationDiagnosticResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkConfigurationDiagnosticResponse",
    modelProperties: {
      results: {
        serializedName: "results",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkConfigurationDiagnosticResult"
            }
          }
        }
      }
    }
  }
};

export const NetworkConfigurationDiagnosticResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkConfigurationDiagnosticResult",
    modelProperties: {
      profile: {
        serializedName: "profile",
        type: {
          name: "Composite",
          className: "NetworkConfigurationDiagnosticProfile"
        }
      },
      networkSecurityGroupResult: {
        serializedName: "networkSecurityGroupResult",
        type: {
          name: "Composite",
          className: "NetworkSecurityGroupResult"
        }
      }
    }
  }
};

export const NetworkSecurityGroupResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkSecurityGroupResult",
    modelProperties: {
      securityRuleAccessResult: {
        serializedName: "securityRuleAccessResult",
        type: {
          name: "String"
        }
      },
      evaluatedNetworkSecurityGroups: {
        serializedName: "evaluatedNetworkSecurityGroups",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EvaluatedNetworkSecurityGroup"
            }
          }
        }
      }
    }
  }
};

export const EvaluatedNetworkSecurityGroup: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EvaluatedNetworkSecurityGroup",
    modelProperties: {
      networkSecurityGroupId: {
        serializedName: "networkSecurityGroupId",
        type: {
          name: "String"
        }
      },
      appliedTo: {
        serializedName: "appliedTo",
        type: {
          name: "String"
        }
      },
      matchedRule: {
        serializedName: "matchedRule",
        type: {
          name: "Composite",
          className: "MatchedRule"
        }
      },
      rulesEvaluationResult: {
        serializedName: "rulesEvaluationResult",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkSecurityRulesEvaluationResult"
            }
          }
        }
      }
    }
  }
};

export const MatchedRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MatchedRule",
    modelProperties: {
      ruleName: {
        serializedName: "ruleName",
        type: {
          name: "String"
        }
      },
      action: {
        serializedName: "action",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkSecurityRulesEvaluationResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkSecurityRulesEvaluationResult",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      protocolMatched: {
        serializedName: "protocolMatched",
        type: {
          name: "Boolean"
        }
      },
      sourceMatched: {
        serializedName: "sourceMatched",
        type: {
          name: "Boolean"
        }
      },
      sourcePortMatched: {
        serializedName: "sourcePortMatched",
        type: {
          name: "Boolean"
        }
      },
      destinationMatched: {
        serializedName: "destinationMatched",
        type: {
          name: "Boolean"
        }
      },
      destinationPortMatched: {
        serializedName: "destinationPortMatched",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ConnectionMonitor: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionMonitor",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      source: {
        serializedName: "properties.source",
        type: {
          name: "Composite",
          className: "ConnectionMonitorSource"
        }
      },
      destination: {
        serializedName: "properties.destination",
        type: {
          name: "Composite",
          className: "ConnectionMonitorDestination"
        }
      },
      autoStart: {
        defaultValue: true,
        serializedName: "properties.autoStart",
        type: {
          name: "Boolean"
        }
      },
      monitoringIntervalInSeconds: {
        defaultValue: 60,
        constraints: {
          InclusiveMaximum: 1800,
          InclusiveMinimum: 30
        },
        serializedName: "properties.monitoringIntervalInSeconds",
        type: {
          name: "Number"
        }
      },
      endpoints: {
        serializedName: "properties.endpoints",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnectionMonitorEndpoint"
            }
          }
        }
      },
      testConfigurations: {
        serializedName: "properties.testConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnectionMonitorTestConfiguration"
            }
          }
        }
      },
      testGroups: {
        serializedName: "properties.testGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnectionMonitorTestGroup"
            }
          }
        }
      },
      outputs: {
        serializedName: "properties.outputs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnectionMonitorOutput"
            }
          }
        }
      },
      notes: {
        serializedName: "properties.notes",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConnectionMonitorParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionMonitorParameters",
    modelProperties: {
      source: {
        serializedName: "source",
        type: {
          name: "Composite",
          className: "ConnectionMonitorSource"
        }
      },
      destination: {
        serializedName: "destination",
        type: {
          name: "Composite",
          className: "ConnectionMonitorDestination"
        }
      },
      autoStart: {
        defaultValue: true,
        serializedName: "autoStart",
        type: {
          name: "Boolean"
        }
      },
      monitoringIntervalInSeconds: {
        defaultValue: 60,
        constraints: {
          InclusiveMaximum: 1800,
          InclusiveMinimum: 30
        },
        serializedName: "monitoringIntervalInSeconds",
        type: {
          name: "Number"
        }
      },
      endpoints: {
        serializedName: "endpoints",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnectionMonitorEndpoint"
            }
          }
        }
      },
      testConfigurations: {
        serializedName: "testConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnectionMonitorTestConfiguration"
            }
          }
        }
      },
      testGroups: {
        serializedName: "testGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnectionMonitorTestGroup"
            }
          }
        }
      },
      outputs: {
        serializedName: "outputs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnectionMonitorOutput"
            }
          }
        }
      },
      notes: {
        serializedName: "notes",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConnectionMonitorSource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionMonitorSource",
    modelProperties: {
      resourceId: {
        serializedName: "resourceId",
        required: true,
        type: {
          name: "String"
        }
      },
      port: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 0
        },
        serializedName: "port",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ConnectionMonitorDestination: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionMonitorDestination",
    modelProperties: {
      resourceId: {
        serializedName: "resourceId",
        type: {
          name: "String"
        }
      },
      address: {
        serializedName: "address",
        type: {
          name: "String"
        }
      },
      port: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 0
        },
        serializedName: "port",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ConnectionMonitorEndpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionMonitorEndpoint",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      resourceId: {
        serializedName: "resourceId",
        type: {
          name: "String"
        }
      },
      address: {
        serializedName: "address",
        type: {
          name: "String"
        }
      },
      filter: {
        serializedName: "filter",
        type: {
          name: "Composite",
          className: "ConnectionMonitorEndpointFilter"
        }
      },
      scope: {
        serializedName: "scope",
        type: {
          name: "Composite",
          className: "ConnectionMonitorEndpointScope"
        }
      },
      coverageLevel: {
        serializedName: "coverageLevel",
        type: {
          name: "String"
        }
      },
      locationDetails: {
        serializedName: "locationDetails",
        type: {
          name: "Composite",
          className: "ConnectionMonitorEndpointLocationDetails"
        }
      },
      subscriptionId: {
        serializedName: "subscriptionId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConnectionMonitorEndpointFilter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionMonitorEndpointFilter",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      items: {
        serializedName: "items",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnectionMonitorEndpointFilterItem"
            }
          }
        }
      }
    }
  }
};

export const ConnectionMonitorEndpointFilterItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionMonitorEndpointFilterItem",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      address: {
        serializedName: "address",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConnectionMonitorEndpointScope: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionMonitorEndpointScope",
    modelProperties: {
      include: {
        serializedName: "include",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnectionMonitorEndpointScopeItem"
            }
          }
        }
      },
      exclude: {
        serializedName: "exclude",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnectionMonitorEndpointScopeItem"
            }
          }
        }
      }
    }
  }
};

export const ConnectionMonitorEndpointScopeItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionMonitorEndpointScopeItem",
    modelProperties: {
      address: {
        serializedName: "address",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConnectionMonitorEndpointLocationDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionMonitorEndpointLocationDetails",
    modelProperties: {
      region: {
        serializedName: "region",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConnectionMonitorTestConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionMonitorTestConfiguration",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      testFrequencySec: {
        serializedName: "testFrequencySec",
        type: {
          name: "Number"
        }
      },
      protocol: {
        serializedName: "protocol",
        required: true,
        type: {
          name: "String"
        }
      },
      preferredIPVersion: {
        serializedName: "preferredIPVersion",
        type: {
          name: "String"
        }
      },
      httpConfiguration: {
        serializedName: "httpConfiguration",
        type: {
          name: "Composite",
          className: "ConnectionMonitorHttpConfiguration"
        }
      },
      tcpConfiguration: {
        serializedName: "tcpConfiguration",
        type: {
          name: "Composite",
          className: "ConnectionMonitorTcpConfiguration"
        }
      },
      icmpConfiguration: {
        serializedName: "icmpConfiguration",
        type: {
          name: "Composite",
          className: "ConnectionMonitorIcmpConfiguration"
        }
      },
      successThreshold: {
        serializedName: "successThreshold",
        type: {
          name: "Composite",
          className: "ConnectionMonitorSuccessThreshold"
        }
      }
    }
  }
};

export const ConnectionMonitorHttpConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionMonitorHttpConfiguration",
    modelProperties: {
      port: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 0
        },
        serializedName: "port",
        type: {
          name: "Number"
        }
      },
      method: {
        serializedName: "method",
        type: {
          name: "String"
        }
      },
      path: {
        serializedName: "path",
        type: {
          name: "String"
        }
      },
      requestHeaders: {
        serializedName: "requestHeaders",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HttpHeader"
            }
          }
        }
      },
      validStatusCodeRanges: {
        serializedName: "validStatusCodeRanges",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      preferHttps: {
        serializedName: "preferHttps",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ConnectionMonitorTcpConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionMonitorTcpConfiguration",
    modelProperties: {
      port: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 0
        },
        serializedName: "port",
        type: {
          name: "Number"
        }
      },
      disableTraceRoute: {
        serializedName: "disableTraceRoute",
        type: {
          name: "Boolean"
        }
      },
      destinationPortBehavior: {
        serializedName: "destinationPortBehavior",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConnectionMonitorIcmpConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionMonitorIcmpConfiguration",
    modelProperties: {
      disableTraceRoute: {
        serializedName: "disableTraceRoute",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ConnectionMonitorSuccessThreshold: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionMonitorSuccessThreshold",
    modelProperties: {
      checksFailedPercent: {
        serializedName: "checksFailedPercent",
        type: {
          name: "Number"
        }
      },
      roundTripTimeMs: {
        serializedName: "roundTripTimeMs",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ConnectionMonitorTestGroup: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionMonitorTestGroup",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      disable: {
        serializedName: "disable",
        type: {
          name: "Boolean"
        }
      },
      testConfigurations: {
        serializedName: "testConfigurations",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      sources: {
        serializedName: "sources",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      destinations: {
        serializedName: "destinations",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ConnectionMonitorOutput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionMonitorOutput",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      workspaceSettings: {
        serializedName: "workspaceSettings",
        type: {
          name: "Composite",
          className: "ConnectionMonitorWorkspaceSettings"
        }
      }
    }
  }
};

export const ConnectionMonitorWorkspaceSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionMonitorWorkspaceSettings",
    modelProperties: {
      workspaceResourceId: {
        serializedName: "workspaceResourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConnectionMonitorResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionMonitorResult",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      source: {
        serializedName: "properties.source",
        type: {
          name: "Composite",
          className: "ConnectionMonitorSource"
        }
      },
      destination: {
        serializedName: "properties.destination",
        type: {
          name: "Composite",
          className: "ConnectionMonitorDestination"
        }
      },
      autoStart: {
        defaultValue: true,
        serializedName: "properties.autoStart",
        type: {
          name: "Boolean"
        }
      },
      monitoringIntervalInSeconds: {
        defaultValue: 60,
        constraints: {
          InclusiveMaximum: 1800,
          InclusiveMinimum: 30
        },
        serializedName: "properties.monitoringIntervalInSeconds",
        type: {
          name: "Number"
        }
      },
      endpoints: {
        serializedName: "properties.endpoints",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnectionMonitorEndpoint"
            }
          }
        }
      },
      testConfigurations: {
        serializedName: "properties.testConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnectionMonitorTestConfiguration"
            }
          }
        }
      },
      testGroups: {
        serializedName: "properties.testGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnectionMonitorTestGroup"
            }
          }
        }
      },
      outputs: {
        serializedName: "properties.outputs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnectionMonitorOutput"
            }
          }
        }
      },
      notes: {
        serializedName: "properties.notes",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "properties.startTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      monitoringStatus: {
        serializedName: "properties.monitoringStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      connectionMonitorType: {
        serializedName: "properties.connectionMonitorType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConnectionMonitorQueryResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionMonitorQueryResult",
    modelProperties: {
      sourceStatus: {
        serializedName: "sourceStatus",
        type: {
          name: "String"
        }
      },
      states: {
        serializedName: "states",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnectionStateSnapshot"
            }
          }
        }
      }
    }
  }
};

export const ConnectionStateSnapshot: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionStateSnapshot",
    modelProperties: {
      connectionState: {
        serializedName: "connectionState",
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      evaluationState: {
        serializedName: "evaluationState",
        type: {
          name: "String"
        }
      },
      avgLatencyInMs: {
        constraints: {
          InclusiveMaximum: 4294967295,
          InclusiveMinimum: 0
        },
        serializedName: "avgLatencyInMs",
        type: {
          name: "Number"
        }
      },
      minLatencyInMs: {
        constraints: {
          InclusiveMaximum: 4294967295,
          InclusiveMinimum: 0
        },
        serializedName: "minLatencyInMs",
        type: {
          name: "Number"
        }
      },
      maxLatencyInMs: {
        constraints: {
          InclusiveMaximum: 4294967295,
          InclusiveMinimum: 0
        },
        serializedName: "maxLatencyInMs",
        type: {
          name: "Number"
        }
      },
      probesSent: {
        constraints: {
          InclusiveMaximum: 4294967295,
          InclusiveMinimum: 0
        },
        serializedName: "probesSent",
        type: {
          name: "Number"
        }
      },
      probesFailed: {
        constraints: {
          InclusiveMaximum: 4294967295,
          InclusiveMinimum: 0
        },
        serializedName: "probesFailed",
        type: {
          name: "Number"
        }
      },
      hops: {
        serializedName: "hops",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnectivityHop"
            }
          }
        }
      }
    }
  }
};

export const ConnectionMonitorListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionMonitorListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnectionMonitorResult"
            }
          }
        }
      }
    }
  }
};

export const FlowLogListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FlowLogListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FlowLog"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorModel",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetails"
            }
          }
        }
      },
      innerError: {
        serializedName: "innerError",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloudError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudError",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "CloudErrorBody"
        }
      }
    }
  }
};

export const CloudErrorBody: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudErrorBody",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CloudErrorBody"
            }
          }
        }
      }
    }
  }
};

export const AzureAsyncOperationResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureAsyncOperationResult",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorModel"
        }
      }
    }
  }
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ManagedServiceIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedServiceIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "Enum",
          allowedValues: [
            "SystemAssigned",
            "UserAssigned",
            "SystemAssigned, UserAssigned",
            "None"
          ]
        }
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className:
                "Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties"
            }
          }
        }
      }
    }
  }
};

export const Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className:
      "Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      clientId: {
        serializedName: "clientId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExtendedLocation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExtendedLocation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SecurityRuleListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecurityRuleListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SecurityRule"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkWatcher: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkWatcher",
    modelProperties: {
      ...Resource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationSecurityGroup: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationSecurityGroup",
    modelProperties: {
      ...Resource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceGuid: {
        serializedName: "properties.resourceGuid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FlowLog: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FlowLog",
    modelProperties: {
      ...Resource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetResourceId: {
        serializedName: "properties.targetResourceId",
        type: {
          name: "String"
        }
      },
      targetResourceGuid: {
        serializedName: "properties.targetResourceGuid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      storageId: {
        serializedName: "properties.storageId",
        type: {
          name: "String"
        }
      },
      enabled: {
        serializedName: "properties.enabled",
        type: {
          name: "Boolean"
        }
      },
      retentionPolicy: {
        serializedName: "properties.retentionPolicy",
        type: {
          name: "Composite",
          className: "RetentionPolicyParameters"
        }
      },
      format: {
        serializedName: "properties.format",
        type: {
          name: "Composite",
          className: "FlowLogFormatParameters"
        }
      },
      flowAnalyticsConfiguration: {
        serializedName: "properties.flowAnalyticsConfiguration",
        type: {
          name: "Composite",
          className: "TrafficAnalyticsProperties"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SecurityRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecurityRule",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      protocol: {
        serializedName: "properties.protocol",
        type: {
          name: "String"
        }
      },
      sourcePortRange: {
        serializedName: "properties.sourcePortRange",
        type: {
          name: "String"
        }
      },
      destinationPortRange: {
        serializedName: "properties.destinationPortRange",
        type: {
          name: "String"
        }
      },
      sourceAddressPrefix: {
        serializedName: "properties.sourceAddressPrefix",
        type: {
          name: "String"
        }
      },
      sourceAddressPrefixes: {
        serializedName: "properties.sourceAddressPrefixes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      sourceApplicationSecurityGroups: {
        serializedName: "properties.sourceApplicationSecurityGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationSecurityGroup"
            }
          }
        }
      },
      destinationAddressPrefix: {
        serializedName: "properties.destinationAddressPrefix",
        type: {
          name: "String"
        }
      },
      destinationAddressPrefixes: {
        serializedName: "properties.destinationAddressPrefixes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      destinationApplicationSecurityGroups: {
        serializedName: "properties.destinationApplicationSecurityGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationSecurityGroup"
            }
          }
        }
      },
      sourcePortRanges: {
        serializedName: "properties.sourcePortRanges",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      destinationPortRanges: {
        serializedName: "properties.destinationPortRanges",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      access: {
        serializedName: "properties.access",
        type: {
          name: "String"
        }
      },
      priority: {
        serializedName: "properties.priority",
        type: {
          name: "Number"
        }
      },
      direction: {
        serializedName: "properties.direction",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PacketCaptureResultProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PacketCaptureResultProperties",
    modelProperties: {
      ...PacketCaptureParameters.type.modelProperties,
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConnectionMonitorResultProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionMonitorResultProperties",
    modelProperties: {
      ...ConnectionMonitorParameters.type.modelProperties,
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      monitoringStatus: {
        serializedName: "monitoringStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      connectionMonitorType: {
        serializedName: "connectionMonitorType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
