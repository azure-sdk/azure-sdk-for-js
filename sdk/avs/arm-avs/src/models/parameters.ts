/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter
} from "@azure/core-client";
import {
  Sku as SkuMapper,
  PrivateCloud as PrivateCloudMapper,
  PrivateCloudUpdate as PrivateCloudUpdateMapper,
  Addon as AddonMapper,
  ExpressRouteAuthorization as ExpressRouteAuthorizationMapper,
  CloudLink as CloudLinkMapper,
  Cluster as ClusterMapper,
  ClusterUpdate as ClusterUpdateMapper,
  Datastore as DatastoreMapper,
  PlacementPolicy as PlacementPolicyMapper,
  PlacementPolicyUpdate as PlacementPolicyUpdateMapper,
  VirtualMachineRestrictMovement as VirtualMachineRestrictMovementMapper,
  WorkloadNetworkDhcp as WorkloadNetworkDhcpMapper,
  WorkloadNetworkDhcpUpdate as WorkloadNetworkDhcpUpdateMapper,
  WorkloadNetworkDnsService as WorkloadNetworkDnsServiceMapper,
  WorkloadNetworkDnsServiceUpdate as WorkloadNetworkDnsServiceUpdateMapper,
  WorkloadNetworkDnsZone as WorkloadNetworkDnsZoneMapper,
  WorkloadNetworkDnsZoneUpdate as WorkloadNetworkDnsZoneUpdateMapper,
  GlobalReachConnection as GlobalReachConnectionMapper,
  HcxEnterpriseSite as HcxEnterpriseSiteMapper,
  WorkloadNetworkPortMirroring as WorkloadNetworkPortMirroringMapper,
  WorkloadNetworkPortMirroringUpdate as WorkloadNetworkPortMirroringUpdateMapper,
  WorkloadNetworkPublicIP as WorkloadNetworkPublicIPMapper,
  ScriptExecution as ScriptExecutionMapper,
  WorkloadNetworkSegment as WorkloadNetworkSegmentMapper,
  WorkloadNetworkSegmentUpdate as WorkloadNetworkSegmentUpdateMapper,
  WorkloadNetworkVMGroup as WorkloadNetworkVMGroupMapper,
  WorkloadNetworkVMGroupUpdate as WorkloadNetworkVMGroupUpdateMapper
} from "../models/mappers";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2023-03-01",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    constraints: {
      MinLength: 1
    },
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const location: OperationURLParameter = {
  parameterPath: "location",
  mapper: {
    serializedName: "location",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const sku: OperationParameter = {
  parameterPath: ["options", "sku"],
  mapper: SkuMapper
};

export const subscriptionId1: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    constraints: {
      MinLength: 1
    },
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    constraints: {
      MaxLength: 90,
      MinLength: 1
    },
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const privateCloudName: OperationURLParameter = {
  parameterPath: "privateCloudName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[-\\w\\._]+$")
    },
    serializedName: "privateCloudName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resource: OperationParameter = {
  parameterPath: "resource",
  mapper: PrivateCloudMapper
};

export const properties: OperationParameter = {
  parameterPath: "properties",
  mapper: PrivateCloudUpdateMapper
};

export const body: OperationParameter = {
  parameterPath: "body",
  mapper: {
    serializedName: "body",
    required: true,
    type: {
      name: "Dictionary",
      value: { type: { name: "any" } }
    }
  }
};

export const addonName: OperationURLParameter = {
  parameterPath: "addonName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[-\\w\\._]+$")
    },
    serializedName: "addonName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resource1: OperationParameter = {
  parameterPath: "resource",
  mapper: AddonMapper
};

export const authorizationName: OperationURLParameter = {
  parameterPath: "authorizationName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[-\\w\\._]+$")
    },
    serializedName: "authorizationName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resource2: OperationParameter = {
  parameterPath: "resource",
  mapper: ExpressRouteAuthorizationMapper
};

export const cloudLinkName: OperationURLParameter = {
  parameterPath: "cloudLinkName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[-\\w\\._]+$")
    },
    serializedName: "cloudLinkName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resource3: OperationParameter = {
  parameterPath: "resource",
  mapper: CloudLinkMapper
};

export const clusterName: OperationURLParameter = {
  parameterPath: "clusterName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[-\\w\\._]+$")
    },
    serializedName: "clusterName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resource4: OperationParameter = {
  parameterPath: "resource",
  mapper: ClusterMapper
};

export const properties1: OperationParameter = {
  parameterPath: "properties",
  mapper: ClusterUpdateMapper
};

export const datastoreName: OperationURLParameter = {
  parameterPath: "datastoreName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[-\\w\\._]+$")
    },
    serializedName: "datastoreName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resource5: OperationParameter = {
  parameterPath: "resource",
  mapper: DatastoreMapper
};

export const placementPolicyName: OperationURLParameter = {
  parameterPath: "placementPolicyName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[-\\w\\._]+$")
    },
    serializedName: "placementPolicyName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resource6: OperationParameter = {
  parameterPath: "resource",
  mapper: PlacementPolicyMapper
};

export const properties2: OperationParameter = {
  parameterPath: "properties",
  mapper: PlacementPolicyUpdateMapper
};

export const virtualMachineId: OperationURLParameter = {
  parameterPath: "virtualMachineId",
  mapper: {
    serializedName: "virtualMachineId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const body1: OperationParameter = {
  parameterPath: "body",
  mapper: VirtualMachineRestrictMovementMapper
};

export const dhcpId: OperationURLParameter = {
  parameterPath: "dhcpId",
  mapper: {
    serializedName: "dhcpId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resource7: OperationParameter = {
  parameterPath: "resource",
  mapper: WorkloadNetworkDhcpMapper
};

export const properties3: OperationParameter = {
  parameterPath: "properties",
  mapper: WorkloadNetworkDhcpUpdateMapper
};

export const dnsServiceId: OperationURLParameter = {
  parameterPath: "dnsServiceId",
  mapper: {
    serializedName: "dnsServiceId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resource8: OperationParameter = {
  parameterPath: "resource",
  mapper: WorkloadNetworkDnsServiceMapper
};

export const properties4: OperationParameter = {
  parameterPath: "properties",
  mapper: WorkloadNetworkDnsServiceUpdateMapper
};

export const dnsZoneId: OperationURLParameter = {
  parameterPath: "dnsZoneId",
  mapper: {
    serializedName: "dnsZoneId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resource9: OperationParameter = {
  parameterPath: "resource",
  mapper: WorkloadNetworkDnsZoneMapper
};

export const properties5: OperationParameter = {
  parameterPath: "properties",
  mapper: WorkloadNetworkDnsZoneUpdateMapper
};

export const gatewayId: OperationURLParameter = {
  parameterPath: "gatewayId",
  mapper: {
    serializedName: "gatewayId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const globalReachConnectionName: OperationURLParameter = {
  parameterPath: "globalReachConnectionName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[-\\w\\._]+$")
    },
    serializedName: "globalReachConnectionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resource10: OperationParameter = {
  parameterPath: "resource",
  mapper: GlobalReachConnectionMapper
};

export const hcxEnterpriseSiteName: OperationURLParameter = {
  parameterPath: "hcxEnterpriseSiteName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[-\\w\\._]+$")
    },
    serializedName: "hcxEnterpriseSiteName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resource11: OperationParameter = {
  parameterPath: "resource",
  mapper: HcxEnterpriseSiteMapper
};

export const portMirroringId: OperationURLParameter = {
  parameterPath: "portMirroringId",
  mapper: {
    serializedName: "portMirroringId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resource12: OperationParameter = {
  parameterPath: "resource",
  mapper: WorkloadNetworkPortMirroringMapper
};

export const properties6: OperationParameter = {
  parameterPath: "properties",
  mapper: WorkloadNetworkPortMirroringUpdateMapper
};

export const publicIPId: OperationURLParameter = {
  parameterPath: "publicIPId",
  mapper: {
    serializedName: "publicIPId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resource13: OperationParameter = {
  parameterPath: "resource",
  mapper: WorkloadNetworkPublicIPMapper
};

export const scriptExecutionName: OperationURLParameter = {
  parameterPath: "scriptExecutionName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[-\\w\\._]+$")
    },
    serializedName: "scriptExecutionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resource14: OperationParameter = {
  parameterPath: "resource",
  mapper: ScriptExecutionMapper
};

export const body2: OperationParameter = {
  parameterPath: "body",
  mapper: {
    serializedName: "body",
    required: true,
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "String"
        }
      }
    }
  }
};

export const scriptPackageName: OperationURLParameter = {
  parameterPath: "scriptPackageName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[-\\w\\._@]+$")
    },
    serializedName: "scriptPackageName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const scriptCmdletName: OperationURLParameter = {
  parameterPath: "scriptCmdletName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[-\\w\\._]+$")
    },
    serializedName: "scriptCmdletName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const segmentId: OperationURLParameter = {
  parameterPath: "segmentId",
  mapper: {
    serializedName: "segmentId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resource15: OperationParameter = {
  parameterPath: "resource",
  mapper: WorkloadNetworkSegmentMapper
};

export const properties7: OperationParameter = {
  parameterPath: "properties",
  mapper: WorkloadNetworkSegmentUpdateMapper
};

export const vmGroupId: OperationURLParameter = {
  parameterPath: "vmGroupId",
  mapper: {
    serializedName: "vmGroupId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resource16: OperationParameter = {
  parameterPath: "resource",
  mapper: WorkloadNetworkVMGroupMapper
};

export const properties8: OperationParameter = {
  parameterPath: "properties",
  mapper: WorkloadNetworkVMGroupUpdateMapper
};

export const workloadNetworkName: OperationURLParameter = {
  parameterPath: "workloadNetworkName",
  mapper: {
    serializedName: "workloadNetworkName",
    required: true,
    type: {
      name: "String"
    }
  }
};
