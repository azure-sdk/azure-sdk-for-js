/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreRestPipeline from "@azure/core-rest-pipeline";
import {
  PipelineRequest,
  PipelineResponse,
  SendRequest
} from "@azure/core-rest-pipeline";
import * as coreAuth from "@azure/core-auth";
import {
  OperationsImpl,
  LocationsOperationsImpl,
  PrivateCloudsImpl,
  AddonsImpl,
  ExpressRouteAuthorizationsImpl,
  CloudLinksImpl,
  ClustersImpl,
  DatastoresImpl,
  PlacementPoliciesImpl,
  VirtualMachinesImpl,
  WorkloadNetworkDhcpsImpl,
  WorkloadNetworkDnsServicesImpl,
  WorkloadNetworkDnsZonesImpl,
  WorkloadNetworkGatewaysImpl,
  GlobalReachConnectionsImpl,
  HcxEnterpriseSitesImpl,
  WorkloadNetworkPortMirroringsImpl,
  WorkloadNetworkPublicIpsImpl,
  ScriptExecutionsImpl,
  ScriptPackagesImpl,
  ScriptCmdletsImpl,
  WorkloadNetworkSegmentsImpl,
  WorkloadNetworkVirtualMachinesImpl,
  WorkloadNetworkVmGroupsImpl,
  WorkloadNetworksImpl
} from "./operations";
import {
  Operations,
  LocationsOperations,
  PrivateClouds,
  Addons,
  ExpressRouteAuthorizations,
  CloudLinks,
  Clusters,
  Datastores,
  PlacementPolicies,
  VirtualMachines,
  WorkloadNetworkDhcps,
  WorkloadNetworkDnsServices,
  WorkloadNetworkDnsZones,
  WorkloadNetworkGateways,
  GlobalReachConnections,
  HcxEnterpriseSites,
  WorkloadNetworkPortMirrorings,
  WorkloadNetworkPublicIps,
  ScriptExecutions,
  ScriptPackages,
  ScriptCmdlets,
  WorkloadNetworkSegments,
  WorkloadNetworkVirtualMachines,
  WorkloadNetworkVmGroups,
  WorkloadNetworks
} from "./operationsInterfaces";
import { AzureVMwareSolutionAPIOptionalParams } from "./models";

export class AzureVMwareSolutionAPI extends coreClient.ServiceClient {
  $host: string;
  apiVersion: string;
  subscriptionId?: string;

  /**
   * Initializes a new instance of the AzureVMwareSolutionAPI class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param subscriptionId The ID of the target subscription.
   * @param options The parameter options
   */
  constructor(
    credentials: coreAuth.TokenCredential,
    subscriptionId: string,
    options?: AzureVMwareSolutionAPIOptionalParams
  );
  constructor(
    credentials: coreAuth.TokenCredential,
    options?: AzureVMwareSolutionAPIOptionalParams
  );
  constructor(
    credentials: coreAuth.TokenCredential,
    subscriptionIdOrOptions?: AzureVMwareSolutionAPIOptionalParams | string,
    options?: AzureVMwareSolutionAPIOptionalParams
  ) {
    if (credentials === undefined) {
      throw new Error("'credentials' cannot be null");
    }

    let subscriptionId: string | undefined;

    if (typeof subscriptionIdOrOptions === "string") {
      subscriptionId = subscriptionIdOrOptions;
    } else if (typeof subscriptionIdOrOptions === "object") {
      options = subscriptionIdOrOptions;
    }

    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: AzureVMwareSolutionAPIOptionalParams = {
      requestContentType: "application/json; charset=utf-8",
      credential: credentials
    };

    const packageDetails = `azsdk-js-arm-avs/5.0.0`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix
      },
      endpoint:
        options.endpoint ?? options.baseUri ?? "https://management.azure.com"
    };
    super(optionsWithDefaults);

    let bearerTokenAuthenticationPolicyFound: boolean = false;
    if (options?.pipeline && options.pipeline.getOrderedPolicies().length > 0) {
      const pipelinePolicies: coreRestPipeline.PipelinePolicy[] = options.pipeline.getOrderedPolicies();
      bearerTokenAuthenticationPolicyFound = pipelinePolicies.some(
        (pipelinePolicy) =>
          pipelinePolicy.name ===
          coreRestPipeline.bearerTokenAuthenticationPolicyName
      );
    }
    if (
      !options ||
      !options.pipeline ||
      options.pipeline.getOrderedPolicies().length == 0 ||
      !bearerTokenAuthenticationPolicyFound
    ) {
      this.pipeline.removePolicy({
        name: coreRestPipeline.bearerTokenAuthenticationPolicyName
      });
      this.pipeline.addPolicy(
        coreRestPipeline.bearerTokenAuthenticationPolicy({
          credential: credentials,
          scopes:
            optionsWithDefaults.credentialScopes ??
            `${optionsWithDefaults.endpoint}/.default`,
          challengeCallbacks: {
            authorizeRequestOnChallenge:
              coreClient.authorizeRequestOnClaimChallenge
          }
        })
      );
    }
    // Parameter assignments
    this.subscriptionId = subscriptionId;

    // Assigning values to Constant parameters
    this.$host = options.$host || "https://management.azure.com";
    this.apiVersion = options.apiVersion || "2023-03-01";
    this.operations = new OperationsImpl(this);
    this.locationsOperations = new LocationsOperationsImpl(this);
    this.privateClouds = new PrivateCloudsImpl(this);
    this.addons = new AddonsImpl(this);
    this.expressRouteAuthorizations = new ExpressRouteAuthorizationsImpl(this);
    this.cloudLinks = new CloudLinksImpl(this);
    this.clusters = new ClustersImpl(this);
    this.datastores = new DatastoresImpl(this);
    this.placementPolicies = new PlacementPoliciesImpl(this);
    this.virtualMachines = new VirtualMachinesImpl(this);
    this.workloadNetworkDhcps = new WorkloadNetworkDhcpsImpl(this);
    this.workloadNetworkDnsServices = new WorkloadNetworkDnsServicesImpl(this);
    this.workloadNetworkDnsZones = new WorkloadNetworkDnsZonesImpl(this);
    this.workloadNetworkGateways = new WorkloadNetworkGatewaysImpl(this);
    this.globalReachConnections = new GlobalReachConnectionsImpl(this);
    this.hcxEnterpriseSites = new HcxEnterpriseSitesImpl(this);
    this.workloadNetworkPortMirrorings = new WorkloadNetworkPortMirroringsImpl(
      this
    );
    this.workloadNetworkPublicIps = new WorkloadNetworkPublicIpsImpl(this);
    this.scriptExecutions = new ScriptExecutionsImpl(this);
    this.scriptPackages = new ScriptPackagesImpl(this);
    this.scriptCmdlets = new ScriptCmdletsImpl(this);
    this.workloadNetworkSegments = new WorkloadNetworkSegmentsImpl(this);
    this.workloadNetworkVirtualMachines = new WorkloadNetworkVirtualMachinesImpl(
      this
    );
    this.workloadNetworkVmGroups = new WorkloadNetworkVmGroupsImpl(this);
    this.workloadNetworks = new WorkloadNetworksImpl(this);
    this.addCustomApiVersionPolicy(options.apiVersion);
  }

  /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
  private addCustomApiVersionPolicy(apiVersion?: string) {
    if (!apiVersion) {
      return;
    }
    const apiVersionPolicy = {
      name: "CustomApiVersionPolicy",
      async sendRequest(
        request: PipelineRequest,
        next: SendRequest
      ): Promise<PipelineResponse> {
        const param = request.url.split("?");
        if (param.length > 1) {
          const newParams = param[1].split("&").map((item) => {
            if (item.indexOf("api-version") > -1) {
              return "api-version=" + apiVersion;
            } else {
              return item;
            }
          });
          request.url = param[0] + "?" + newParams.join("&");
        }
        return next(request);
      }
    };
    this.pipeline.addPolicy(apiVersionPolicy);
  }

  operations: Operations;
  locationsOperations: LocationsOperations;
  privateClouds: PrivateClouds;
  addons: Addons;
  expressRouteAuthorizations: ExpressRouteAuthorizations;
  cloudLinks: CloudLinks;
  clusters: Clusters;
  datastores: Datastores;
  placementPolicies: PlacementPolicies;
  virtualMachines: VirtualMachines;
  workloadNetworkDhcps: WorkloadNetworkDhcps;
  workloadNetworkDnsServices: WorkloadNetworkDnsServices;
  workloadNetworkDnsZones: WorkloadNetworkDnsZones;
  workloadNetworkGateways: WorkloadNetworkGateways;
  globalReachConnections: GlobalReachConnections;
  hcxEnterpriseSites: HcxEnterpriseSites;
  workloadNetworkPortMirrorings: WorkloadNetworkPortMirrorings;
  workloadNetworkPublicIps: WorkloadNetworkPublicIps;
  scriptExecutions: ScriptExecutions;
  scriptPackages: ScriptPackages;
  scriptCmdlets: ScriptCmdlets;
  workloadNetworkSegments: WorkloadNetworkSegments;
  workloadNetworkVirtualMachines: WorkloadNetworkVirtualMachines;
  workloadNetworkVmGroups: WorkloadNetworkVmGroups;
  workloadNetworks: WorkloadNetworks;
}
