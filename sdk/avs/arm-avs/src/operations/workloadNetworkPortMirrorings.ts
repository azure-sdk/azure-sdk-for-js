/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { WorkloadNetworkPortMirrorings } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureVMwareSolutionAPI } from "../azureVMwareSolutionAPI";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  WorkloadNetworkPortMirroring,
  WorkloadNetworkPortMirroringsListByPrivateCloudNextOptionalParams,
  WorkloadNetworkPortMirroringsListByPrivateCloudOptionalParams,
  WorkloadNetworkPortMirroringsListByPrivateCloudResponse,
  WorkloadNetworkPortMirroringsGetPortMirroringOptionalParams,
  WorkloadNetworkPortMirroringsGetPortMirroringResponse,
  WorkloadNetworkPortMirroringsCreatePortMirroringOptionalParams,
  WorkloadNetworkPortMirroringsCreatePortMirroringResponse,
  WorkloadNetworkPortMirroringUpdate,
  WorkloadNetworkPortMirroringsUpdatePortMirroringOptionalParams,
  WorkloadNetworkPortMirroringsUpdatePortMirroringResponse,
  WorkloadNetworkPortMirroringsDeletePortMirroringOptionalParams,
  WorkloadNetworkPortMirroringsListByPrivateCloudNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing WorkloadNetworkPortMirrorings operations. */
export class WorkloadNetworkPortMirroringsImpl
  implements WorkloadNetworkPortMirrorings {
  private readonly client: AzureVMwareSolutionAPI;

  /**
   * Initialize a new instance of the class WorkloadNetworkPortMirrorings class.
   * @param client Reference to the service client
   */
  constructor(client: AzureVMwareSolutionAPI) {
    this.client = client;
  }

  /**
   * List of port mirroring profiles in a private cloud workload network.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param privateCloudName Name of the private cloud
   * @param options The options parameters.
   */
  public listByPrivateCloud(
    resourceGroupName: string,
    privateCloudName: string,
    options?: WorkloadNetworkPortMirroringsListByPrivateCloudOptionalParams
  ): PagedAsyncIterableIterator<WorkloadNetworkPortMirroring> {
    const iter = this.listByPrivateCloudPagingAll(
      resourceGroupName,
      privateCloudName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByPrivateCloudPagingPage(
          resourceGroupName,
          privateCloudName,
          options,
          settings
        );
      }
    };
  }

  private async *listByPrivateCloudPagingPage(
    resourceGroupName: string,
    privateCloudName: string,
    options?: WorkloadNetworkPortMirroringsListByPrivateCloudOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<WorkloadNetworkPortMirroring[]> {
    let result: WorkloadNetworkPortMirroringsListByPrivateCloudResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByPrivateCloud(
        resourceGroupName,
        privateCloudName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByPrivateCloudNext(
        resourceGroupName,
        privateCloudName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByPrivateCloudPagingAll(
    resourceGroupName: string,
    privateCloudName: string,
    options?: WorkloadNetworkPortMirroringsListByPrivateCloudOptionalParams
  ): AsyncIterableIterator<WorkloadNetworkPortMirroring> {
    for await (const page of this.listByPrivateCloudPagingPage(
      resourceGroupName,
      privateCloudName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List of port mirroring profiles in a private cloud workload network.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param privateCloudName Name of the private cloud
   * @param options The options parameters.
   */
  private _listByPrivateCloud(
    resourceGroupName: string,
    privateCloudName: string,
    options?: WorkloadNetworkPortMirroringsListByPrivateCloudOptionalParams
  ): Promise<WorkloadNetworkPortMirroringsListByPrivateCloudResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, privateCloudName, options },
      listByPrivateCloudOperationSpec
    );
  }

  /**
   * Get a port mirroring profile by id in a private cloud workload network.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param privateCloudName Name of the private cloud
   * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring
   *                        display name
   * @param options The options parameters.
   */
  getPortMirroring(
    resourceGroupName: string,
    privateCloudName: string,
    portMirroringId: string,
    options?: WorkloadNetworkPortMirroringsGetPortMirroringOptionalParams
  ): Promise<WorkloadNetworkPortMirroringsGetPortMirroringResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, privateCloudName, portMirroringId, options },
      getPortMirroringOperationSpec
    );
  }

  /**
   * Create a port mirroring profile by id in a private cloud workload network.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param privateCloudName Name of the private cloud
   * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring
   *                        display name
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreatePortMirroring(
    resourceGroupName: string,
    privateCloudName: string,
    portMirroringId: string,
    resource: WorkloadNetworkPortMirroring,
    options?: WorkloadNetworkPortMirroringsCreatePortMirroringOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<WorkloadNetworkPortMirroringsCreatePortMirroringResponse>,
      WorkloadNetworkPortMirroringsCreatePortMirroringResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<WorkloadNetworkPortMirroringsCreatePortMirroringResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        privateCloudName,
        portMirroringId,
        resource,
        options
      },
      spec: createPortMirroringOperationSpec
    });
    const poller = await createHttpPoller<
      WorkloadNetworkPortMirroringsCreatePortMirroringResponse,
      OperationState<WorkloadNetworkPortMirroringsCreatePortMirroringResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create a port mirroring profile by id in a private cloud workload network.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param privateCloudName Name of the private cloud
   * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring
   *                        display name
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreatePortMirroringAndWait(
    resourceGroupName: string,
    privateCloudName: string,
    portMirroringId: string,
    resource: WorkloadNetworkPortMirroring,
    options?: WorkloadNetworkPortMirroringsCreatePortMirroringOptionalParams
  ): Promise<WorkloadNetworkPortMirroringsCreatePortMirroringResponse> {
    const poller = await this.beginCreatePortMirroring(
      resourceGroupName,
      privateCloudName,
      portMirroringId,
      resource,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Create or update a port mirroring profile by id in a private cloud workload network.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param privateCloudName Name of the private cloud
   * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring
   *                        display name
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  async beginUpdatePortMirroring(
    resourceGroupName: string,
    privateCloudName: string,
    portMirroringId: string,
    properties: WorkloadNetworkPortMirroringUpdate,
    options?: WorkloadNetworkPortMirroringsUpdatePortMirroringOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<WorkloadNetworkPortMirroringsUpdatePortMirroringResponse>,
      WorkloadNetworkPortMirroringsUpdatePortMirroringResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<WorkloadNetworkPortMirroringsUpdatePortMirroringResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        privateCloudName,
        portMirroringId,
        properties,
        options
      },
      spec: updatePortMirroringOperationSpec
    });
    const poller = await createHttpPoller<
      WorkloadNetworkPortMirroringsUpdatePortMirroringResponse,
      OperationState<WorkloadNetworkPortMirroringsUpdatePortMirroringResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create or update a port mirroring profile by id in a private cloud workload network.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param privateCloudName Name of the private cloud
   * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring
   *                        display name
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  async beginUpdatePortMirroringAndWait(
    resourceGroupName: string,
    privateCloudName: string,
    portMirroringId: string,
    properties: WorkloadNetworkPortMirroringUpdate,
    options?: WorkloadNetworkPortMirroringsUpdatePortMirroringOptionalParams
  ): Promise<WorkloadNetworkPortMirroringsUpdatePortMirroringResponse> {
    const poller = await this.beginUpdatePortMirroring(
      resourceGroupName,
      privateCloudName,
      portMirroringId,
      properties,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Delete a port mirroring profile by id in a private cloud workload network.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param privateCloudName Name of the private cloud
   * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring
   *                        display name
   * @param options The options parameters.
   */
  async beginDeletePortMirroring(
    resourceGroupName: string,
    privateCloudName: string,
    portMirroringId: string,
    options?: WorkloadNetworkPortMirroringsDeletePortMirroringOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, privateCloudName, portMirroringId, options },
      spec: deletePortMirroringOperationSpec
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete a port mirroring profile by id in a private cloud workload network.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param privateCloudName Name of the private cloud
   * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring
   *                        display name
   * @param options The options parameters.
   */
  async beginDeletePortMirroringAndWait(
    resourceGroupName: string,
    privateCloudName: string,
    portMirroringId: string,
    options?: WorkloadNetworkPortMirroringsDeletePortMirroringOptionalParams
  ): Promise<void> {
    const poller = await this.beginDeletePortMirroring(
      resourceGroupName,
      privateCloudName,
      portMirroringId,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * ListByPrivateCloudNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param privateCloudName Name of the private cloud
   * @param nextLink The nextLink from the previous successful call to the ListByPrivateCloud method.
   * @param options The options parameters.
   */
  private _listByPrivateCloudNext(
    resourceGroupName: string,
    privateCloudName: string,
    nextLink: string,
    options?: WorkloadNetworkPortMirroringsListByPrivateCloudNextOptionalParams
  ): Promise<WorkloadNetworkPortMirroringsListByPrivateCloudNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, privateCloudName, nextLink, options },
      listByPrivateCloudNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByPrivateCloudOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/portMirroringProfiles",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkloadNetworkPortMirroringListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId1,
    Parameters.resourceGroupName,
    Parameters.privateCloudName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getPortMirroringOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/portMirroringProfiles/{portMirroringId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkloadNetworkPortMirroring
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId1,
    Parameters.resourceGroupName,
    Parameters.privateCloudName,
    Parameters.portMirroringId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createPortMirroringOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/portMirroringProfiles/{portMirroringId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.WorkloadNetworkPortMirroring
    },
    201: {
      bodyMapper: Mappers.WorkloadNetworkPortMirroring
    },
    202: {
      bodyMapper: Mappers.WorkloadNetworkPortMirroring
    },
    204: {
      bodyMapper: Mappers.WorkloadNetworkPortMirroring
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.resource12,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId1,
    Parameters.resourceGroupName,
    Parameters.privateCloudName,
    Parameters.portMirroringId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updatePortMirroringOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/portMirroringProfiles/{portMirroringId}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.WorkloadNetworkPortMirroring
    },
    201: {
      bodyMapper: Mappers.WorkloadNetworkPortMirroring
    },
    202: {
      bodyMapper: Mappers.WorkloadNetworkPortMirroring
    },
    204: {
      bodyMapper: Mappers.WorkloadNetworkPortMirroring
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.properties6,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId1,
    Parameters.resourceGroupName,
    Parameters.privateCloudName,
    Parameters.portMirroringId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deletePortMirroringOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/portMirroringProfiles/{portMirroringId}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId1,
    Parameters.resourceGroupName,
    Parameters.privateCloudName,
    Parameters.portMirroringId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByPrivateCloudNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkloadNetworkPortMirroringListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId1,
    Parameters.resourceGroupName,
    Parameters.privateCloudName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
