/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { LocationsOperations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureVMwareSolutionAPI } from "../azureVMwareSolutionAPI";
import {
  LocationsOperationsCheckQuotaAvailabilityOptionalParams,
  LocationsOperationsCheckQuotaAvailabilityResponse,
  LocationsOperationsCheckTrialAvailabilityOptionalParams,
  LocationsOperationsCheckTrialAvailabilityResponse
} from "../models";

/** Class containing LocationsOperations operations. */
export class LocationsOperationsImpl implements LocationsOperations {
  private readonly client: AzureVMwareSolutionAPI;

  /**
   * Initialize a new instance of the class LocationsOperations class.
   * @param client Reference to the service client
   */
  constructor(client: AzureVMwareSolutionAPI) {
    this.client = client;
  }

  /**
   * Return quota for subscription by region
   * @param subscriptionId The ID of the target subscription.
   * @param location Azure region
   * @param options The options parameters.
   */
  checkQuotaAvailability(
    subscriptionId: string,
    location: string,
    options?: LocationsOperationsCheckQuotaAvailabilityOptionalParams
  ): Promise<LocationsOperationsCheckQuotaAvailabilityResponse> {
    return this.client.sendOperationRequest(
      { subscriptionId, location, options },
      checkQuotaAvailabilityOperationSpec
    );
  }

  /**
   * Return trial status for subscription by region
   * @param subscriptionId The ID of the target subscription.
   * @param location Azure region
   * @param options The options parameters.
   */
  checkTrialAvailability(
    subscriptionId: string,
    location: string,
    options?: LocationsOperationsCheckTrialAvailabilityOptionalParams
  ): Promise<LocationsOperationsCheckTrialAvailabilityResponse> {
    return this.client.sendOperationRequest(
      { subscriptionId, location, options },
      checkTrialAvailabilityOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const checkQuotaAvailabilityOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.AVS/locations/{location}/checkQuotaAvailability",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Quota
    },
    default: {
      bodyMapper: Mappers.AzureCoreFoundationsErrorResponse,
      headersMapper:
        Mappers.LocationsOperationsCheckQuotaAvailabilityExceptionHeaders
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const checkTrialAvailabilityOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.AVS/locations/{location}/checkTrialAvailability",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Trial
    },
    default: {
      bodyMapper: Mappers.AzureCoreFoundationsErrorResponse,
      headersMapper:
        Mappers.LocationsOperationsCheckTrialAvailabilityExceptionHeaders
    }
  },
  requestBody: Parameters.sku,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
