/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { VirtualMachines } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureVMwareSolutionAPI } from "../azureVMwareSolutionAPI";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  VirtualMachine,
  VirtualMachinesListByClusterNextOptionalParams,
  VirtualMachinesListByClusterOptionalParams,
  VirtualMachinesListByClusterResponse,
  VirtualMachinesGetOptionalParams,
  VirtualMachinesGetResponse,
  VirtualMachineRestrictMovement,
  VirtualMachinesRestrictMovementOptionalParams,
  VirtualMachinesRestrictMovementResponse,
  VirtualMachinesListByClusterNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing VirtualMachines operations. */
export class VirtualMachinesImpl implements VirtualMachines {
  private readonly client: AzureVMwareSolutionAPI;

  /**
   * Initialize a new instance of the class VirtualMachines class.
   * @param client Reference to the service client
   */
  constructor(client: AzureVMwareSolutionAPI) {
    this.client = client;
  }

  /**
   * List of virtual machines in a private cloud cluster
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param privateCloudName Name of the private cloud
   * @param clusterName Name of the cluster in the private cloud
   * @param options The options parameters.
   */
  public listByCluster(
    resourceGroupName: string,
    privateCloudName: string,
    clusterName: string,
    options?: VirtualMachinesListByClusterOptionalParams
  ): PagedAsyncIterableIterator<VirtualMachine> {
    const iter = this.listByClusterPagingAll(
      resourceGroupName,
      privateCloudName,
      clusterName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByClusterPagingPage(
          resourceGroupName,
          privateCloudName,
          clusterName,
          options,
          settings
        );
      }
    };
  }

  private async *listByClusterPagingPage(
    resourceGroupName: string,
    privateCloudName: string,
    clusterName: string,
    options?: VirtualMachinesListByClusterOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<VirtualMachine[]> {
    let result: VirtualMachinesListByClusterResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByCluster(
        resourceGroupName,
        privateCloudName,
        clusterName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByClusterNext(
        resourceGroupName,
        privateCloudName,
        clusterName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByClusterPagingAll(
    resourceGroupName: string,
    privateCloudName: string,
    clusterName: string,
    options?: VirtualMachinesListByClusterOptionalParams
  ): AsyncIterableIterator<VirtualMachine> {
    for await (const page of this.listByClusterPagingPage(
      resourceGroupName,
      privateCloudName,
      clusterName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List of virtual machines in a private cloud cluster
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param privateCloudName Name of the private cloud
   * @param clusterName Name of the cluster in the private cloud
   * @param options The options parameters.
   */
  private _listByCluster(
    resourceGroupName: string,
    privateCloudName: string,
    clusterName: string,
    options?: VirtualMachinesListByClusterOptionalParams
  ): Promise<VirtualMachinesListByClusterResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, privateCloudName, clusterName, options },
      listByClusterOperationSpec
    );
  }

  /**
   * Get a virtual machine by id in a private cloud cluster
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param privateCloudName Name of the private cloud
   * @param clusterName Name of the cluster in the private cloud
   * @param virtualMachineId Virtual Machine identifier
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    privateCloudName: string,
    clusterName: string,
    virtualMachineId: string,
    options?: VirtualMachinesGetOptionalParams
  ): Promise<VirtualMachinesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        privateCloudName,
        clusterName,
        virtualMachineId,
        options
      },
      getOperationSpec
    );
  }

  /**
   * Enable or disable DRS-driven VM movement restriction
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param privateCloudName Name of the private cloud
   * @param clusterName Name of the cluster in the private cloud
   * @param virtualMachineId Virtual Machine identifier
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginRestrictMovement(
    resourceGroupName: string,
    privateCloudName: string,
    clusterName: string,
    virtualMachineId: string,
    body: VirtualMachineRestrictMovement,
    options?: VirtualMachinesRestrictMovementOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<VirtualMachinesRestrictMovementResponse>,
      VirtualMachinesRestrictMovementResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<VirtualMachinesRestrictMovementResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        privateCloudName,
        clusterName,
        virtualMachineId,
        body,
        options
      },
      spec: restrictMovementOperationSpec
    });
    const poller = await createHttpPoller<
      VirtualMachinesRestrictMovementResponse,
      OperationState<VirtualMachinesRestrictMovementResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Enable or disable DRS-driven VM movement restriction
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param privateCloudName Name of the private cloud
   * @param clusterName Name of the cluster in the private cloud
   * @param virtualMachineId Virtual Machine identifier
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginRestrictMovementAndWait(
    resourceGroupName: string,
    privateCloudName: string,
    clusterName: string,
    virtualMachineId: string,
    body: VirtualMachineRestrictMovement,
    options?: VirtualMachinesRestrictMovementOptionalParams
  ): Promise<VirtualMachinesRestrictMovementResponse> {
    const poller = await this.beginRestrictMovement(
      resourceGroupName,
      privateCloudName,
      clusterName,
      virtualMachineId,
      body,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * ListByClusterNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param privateCloudName Name of the private cloud
   * @param clusterName Name of the cluster in the private cloud
   * @param nextLink The nextLink from the previous successful call to the ListByCluster method.
   * @param options The options parameters.
   */
  private _listByClusterNext(
    resourceGroupName: string,
    privateCloudName: string,
    clusterName: string,
    nextLink: string,
    options?: VirtualMachinesListByClusterNextOptionalParams
  ): Promise<VirtualMachinesListByClusterNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, privateCloudName, clusterName, nextLink, options },
      listByClusterNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByClusterOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/clusters/{clusterName}/virtualMachines",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VirtualMachineListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId1,
    Parameters.resourceGroupName,
    Parameters.privateCloudName,
    Parameters.clusterName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/clusters/{clusterName}/virtualMachines/{virtualMachineId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VirtualMachine
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId1,
    Parameters.resourceGroupName,
    Parameters.privateCloudName,
    Parameters.clusterName,
    Parameters.virtualMachineId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const restrictMovementOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/clusters/{clusterName}/virtualMachines/{virtualMachineId}/restrictMovement",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.VirtualMachinesRestrictMovementHeaders
    },
    201: {
      headersMapper: Mappers.VirtualMachinesRestrictMovementHeaders
    },
    202: {
      headersMapper: Mappers.VirtualMachinesRestrictMovementHeaders
    },
    204: {
      headersMapper: Mappers.VirtualMachinesRestrictMovementHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId1,
    Parameters.resourceGroupName,
    Parameters.privateCloudName,
    Parameters.clusterName,
    Parameters.virtualMachineId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listByClusterNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VirtualMachineListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId1,
    Parameters.resourceGroupName,
    Parameters.privateCloudName,
    Parameters.clusterName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
