/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { WorkloadNetworkVmGroups } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureVMwareSolutionAPI } from "../azureVMwareSolutionAPI";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  WorkloadNetworkVMGroup,
  WorkloadNetworkVmGroupsListByPrivateCloudNextOptionalParams,
  WorkloadNetworkVmGroupsListByPrivateCloudOptionalParams,
  WorkloadNetworkVmGroupsListByPrivateCloudResponse,
  WorkloadNetworkVmGroupsGetVmGroupOptionalParams,
  WorkloadNetworkVmGroupsGetVmGroupResponse,
  WorkloadNetworkVmGroupsCreateVmGroupOptionalParams,
  WorkloadNetworkVmGroupsCreateVmGroupResponse,
  WorkloadNetworkVMGroupUpdate,
  WorkloadNetworkVmGroupsUpdateVmGroupOptionalParams,
  WorkloadNetworkVmGroupsUpdateVmGroupResponse,
  WorkloadNetworkVmGroupsDeleteVmGroupOptionalParams,
  WorkloadNetworkVmGroupsListByPrivateCloudNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing WorkloadNetworkVmGroups operations. */
export class WorkloadNetworkVmGroupsImpl implements WorkloadNetworkVmGroups {
  private readonly client: AzureVMwareSolutionAPI;

  /**
   * Initialize a new instance of the class WorkloadNetworkVmGroups class.
   * @param client Reference to the service client
   */
  constructor(client: AzureVMwareSolutionAPI) {
    this.client = client;
  }

  /**
   * List of vm groups in a private cloud workload network.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param privateCloudName Name of the private cloud
   * @param options The options parameters.
   */
  public listByPrivateCloud(
    resourceGroupName: string,
    privateCloudName: string,
    options?: WorkloadNetworkVmGroupsListByPrivateCloudOptionalParams
  ): PagedAsyncIterableIterator<WorkloadNetworkVMGroup> {
    const iter = this.listByPrivateCloudPagingAll(
      resourceGroupName,
      privateCloudName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByPrivateCloudPagingPage(
          resourceGroupName,
          privateCloudName,
          options,
          settings
        );
      }
    };
  }

  private async *listByPrivateCloudPagingPage(
    resourceGroupName: string,
    privateCloudName: string,
    options?: WorkloadNetworkVmGroupsListByPrivateCloudOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<WorkloadNetworkVMGroup[]> {
    let result: WorkloadNetworkVmGroupsListByPrivateCloudResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByPrivateCloud(
        resourceGroupName,
        privateCloudName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByPrivateCloudNext(
        resourceGroupName,
        privateCloudName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByPrivateCloudPagingAll(
    resourceGroupName: string,
    privateCloudName: string,
    options?: WorkloadNetworkVmGroupsListByPrivateCloudOptionalParams
  ): AsyncIterableIterator<WorkloadNetworkVMGroup> {
    for await (const page of this.listByPrivateCloudPagingPage(
      resourceGroupName,
      privateCloudName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List of vm groups in a private cloud workload network.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param privateCloudName Name of the private cloud
   * @param options The options parameters.
   */
  private _listByPrivateCloud(
    resourceGroupName: string,
    privateCloudName: string,
    options?: WorkloadNetworkVmGroupsListByPrivateCloudOptionalParams
  ): Promise<WorkloadNetworkVmGroupsListByPrivateCloudResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, privateCloudName, options },
      listByPrivateCloudOperationSpec
    );
  }

  /**
   * Get a vm group by id in a private cloud workload network.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param privateCloudName Name of the private cloud
   * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
   * @param options The options parameters.
   */
  getVmGroup(
    resourceGroupName: string,
    privateCloudName: string,
    vmGroupId: string,
    options?: WorkloadNetworkVmGroupsGetVmGroupOptionalParams
  ): Promise<WorkloadNetworkVmGroupsGetVmGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, privateCloudName, vmGroupId, options },
      getVmGroupOperationSpec
    );
  }

  /**
   * Create a vm group by id in a private cloud workload network.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param privateCloudName Name of the private cloud
   * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreateVmGroup(
    resourceGroupName: string,
    privateCloudName: string,
    vmGroupId: string,
    resource: WorkloadNetworkVMGroup,
    options?: WorkloadNetworkVmGroupsCreateVmGroupOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<WorkloadNetworkVmGroupsCreateVmGroupResponse>,
      WorkloadNetworkVmGroupsCreateVmGroupResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<WorkloadNetworkVmGroupsCreateVmGroupResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        privateCloudName,
        vmGroupId,
        resource,
        options
      },
      spec: createVmGroupOperationSpec
    });
    const poller = await createHttpPoller<
      WorkloadNetworkVmGroupsCreateVmGroupResponse,
      OperationState<WorkloadNetworkVmGroupsCreateVmGroupResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create a vm group by id in a private cloud workload network.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param privateCloudName Name of the private cloud
   * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreateVmGroupAndWait(
    resourceGroupName: string,
    privateCloudName: string,
    vmGroupId: string,
    resource: WorkloadNetworkVMGroup,
    options?: WorkloadNetworkVmGroupsCreateVmGroupOptionalParams
  ): Promise<WorkloadNetworkVmGroupsCreateVmGroupResponse> {
    const poller = await this.beginCreateVmGroup(
      resourceGroupName,
      privateCloudName,
      vmGroupId,
      resource,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Create or update a vm group by id in a private cloud workload network.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param privateCloudName Name of the private cloud
   * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  async beginUpdateVmGroup(
    resourceGroupName: string,
    privateCloudName: string,
    vmGroupId: string,
    properties: WorkloadNetworkVMGroupUpdate,
    options?: WorkloadNetworkVmGroupsUpdateVmGroupOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<WorkloadNetworkVmGroupsUpdateVmGroupResponse>,
      WorkloadNetworkVmGroupsUpdateVmGroupResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<WorkloadNetworkVmGroupsUpdateVmGroupResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        privateCloudName,
        vmGroupId,
        properties,
        options
      },
      spec: updateVmGroupOperationSpec
    });
    const poller = await createHttpPoller<
      WorkloadNetworkVmGroupsUpdateVmGroupResponse,
      OperationState<WorkloadNetworkVmGroupsUpdateVmGroupResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create or update a vm group by id in a private cloud workload network.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param privateCloudName Name of the private cloud
   * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  async beginUpdateVmGroupAndWait(
    resourceGroupName: string,
    privateCloudName: string,
    vmGroupId: string,
    properties: WorkloadNetworkVMGroupUpdate,
    options?: WorkloadNetworkVmGroupsUpdateVmGroupOptionalParams
  ): Promise<WorkloadNetworkVmGroupsUpdateVmGroupResponse> {
    const poller = await this.beginUpdateVmGroup(
      resourceGroupName,
      privateCloudName,
      vmGroupId,
      properties,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Delete a vm group by id in a private cloud workload network.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param privateCloudName Name of the private cloud
   * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
   * @param options The options parameters.
   */
  async beginDeleteVmGroup(
    resourceGroupName: string,
    privateCloudName: string,
    vmGroupId: string,
    options?: WorkloadNetworkVmGroupsDeleteVmGroupOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, privateCloudName, vmGroupId, options },
      spec: deleteVmGroupOperationSpec
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete a vm group by id in a private cloud workload network.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param privateCloudName Name of the private cloud
   * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
   * @param options The options parameters.
   */
  async beginDeleteVmGroupAndWait(
    resourceGroupName: string,
    privateCloudName: string,
    vmGroupId: string,
    options?: WorkloadNetworkVmGroupsDeleteVmGroupOptionalParams
  ): Promise<void> {
    const poller = await this.beginDeleteVmGroup(
      resourceGroupName,
      privateCloudName,
      vmGroupId,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * ListByPrivateCloudNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param privateCloudName Name of the private cloud
   * @param nextLink The nextLink from the previous successful call to the ListByPrivateCloud method.
   * @param options The options parameters.
   */
  private _listByPrivateCloudNext(
    resourceGroupName: string,
    privateCloudName: string,
    nextLink: string,
    options?: WorkloadNetworkVmGroupsListByPrivateCloudNextOptionalParams
  ): Promise<WorkloadNetworkVmGroupsListByPrivateCloudNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, privateCloudName, nextLink, options },
      listByPrivateCloudNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByPrivateCloudOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/vmGroups",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkloadNetworkVMGroupListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId1,
    Parameters.resourceGroupName,
    Parameters.privateCloudName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getVmGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/vmGroups/{vmGroupId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkloadNetworkVMGroup
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId1,
    Parameters.resourceGroupName,
    Parameters.privateCloudName,
    Parameters.vmGroupId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createVmGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/vmGroups/{vmGroupId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.WorkloadNetworkVMGroup
    },
    201: {
      bodyMapper: Mappers.WorkloadNetworkVMGroup
    },
    202: {
      bodyMapper: Mappers.WorkloadNetworkVMGroup
    },
    204: {
      bodyMapper: Mappers.WorkloadNetworkVMGroup
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.resource16,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId1,
    Parameters.resourceGroupName,
    Parameters.privateCloudName,
    Parameters.vmGroupId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateVmGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/vmGroups/{vmGroupId}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.WorkloadNetworkVMGroup
    },
    201: {
      bodyMapper: Mappers.WorkloadNetworkVMGroup
    },
    202: {
      bodyMapper: Mappers.WorkloadNetworkVMGroup
    },
    204: {
      bodyMapper: Mappers.WorkloadNetworkVMGroup
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.properties8,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId1,
    Parameters.resourceGroupName,
    Parameters.privateCloudName,
    Parameters.vmGroupId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteVmGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/vmGroups/{vmGroupId}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId1,
    Parameters.resourceGroupName,
    Parameters.privateCloudName,
    Parameters.vmGroupId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByPrivateCloudNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkloadNetworkVMGroupListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId1,
    Parameters.resourceGroupName,
    Parameters.privateCloudName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
