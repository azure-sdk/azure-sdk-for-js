/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { Maintenances } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { AzureVMwareSolutionAPI } from "../azureVMwareSolutionAPI.js";
import {
  Maintenance,
  MaintenancesListNextOptionalParams,
  MaintenancesListOptionalParams,
  MaintenancesListResponse,
  MaintenancesGetOptionalParams,
  MaintenancesGetResponse,
  MaintenancesInitiateChecksOptionalParams,
  MaintenancesInitiateChecksResponse,
  MaintenanceReschedule,
  MaintenancesRescheduleOptionalParams,
  MaintenancesRescheduleResponse,
  MaintenanceSchedule,
  MaintenancesScheduleOptionalParams,
  MaintenancesScheduleResponse,
  MaintenancesListNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing Maintenances operations. */
export class MaintenancesImpl implements Maintenances {
  private readonly client: AzureVMwareSolutionAPI;

  /**
   * Initialize a new instance of the class Maintenances class.
   * @param client Reference to the service client
   */
  constructor(client: AzureVMwareSolutionAPI) {
    this.client = client;
  }

  /**
   * List Maintenance resources by subscription ID
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param privateCloudName Name of the private cloud
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    privateCloudName: string,
    options?: MaintenancesListOptionalParams,
  ): PagedAsyncIterableIterator<Maintenance> {
    const iter = this.listPagingAll(
      resourceGroupName,
      privateCloudName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(
          resourceGroupName,
          privateCloudName,
          options,
          settings,
        );
      },
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    privateCloudName: string,
    options?: MaintenancesListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<Maintenance[]> {
    let result: MaintenancesListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(resourceGroupName, privateCloudName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        resourceGroupName,
        privateCloudName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    privateCloudName: string,
    options?: MaintenancesListOptionalParams,
  ): AsyncIterableIterator<Maintenance> {
    for await (const page of this.listPagingPage(
      resourceGroupName,
      privateCloudName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List Maintenance resources by subscription ID
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param privateCloudName Name of the private cloud
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    privateCloudName: string,
    options?: MaintenancesListOptionalParams,
  ): Promise<MaintenancesListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, privateCloudName, options },
      listOperationSpec,
    );
  }

  /**
   * Get a Maintenance
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param privateCloudName Name of the private cloud
   * @param maintenanceName Name of the maintenance
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    privateCloudName: string,
    maintenanceName: string,
    options?: MaintenancesGetOptionalParams,
  ): Promise<MaintenancesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, privateCloudName, maintenanceName, options },
      getOperationSpec,
    );
  }

  /**
   * Initiate maintenance readiness checks
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param privateCloudName Name of the private cloud
   * @param maintenanceName Name of the maintenance
   * @param options The options parameters.
   */
  initiateChecks(
    resourceGroupName: string,
    privateCloudName: string,
    maintenanceName: string,
    options?: MaintenancesInitiateChecksOptionalParams,
  ): Promise<MaintenancesInitiateChecksResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, privateCloudName, maintenanceName, options },
      initiateChecksOperationSpec,
    );
  }

  /**
   * Reschedule a maintenance
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param privateCloudName Name of the private cloud
   * @param maintenanceName Name of the maintenance
   * @param body The content of the action request
   * @param options The options parameters.
   */
  reschedule(
    resourceGroupName: string,
    privateCloudName: string,
    maintenanceName: string,
    body: MaintenanceReschedule,
    options?: MaintenancesRescheduleOptionalParams,
  ): Promise<MaintenancesRescheduleResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, privateCloudName, maintenanceName, body, options },
      rescheduleOperationSpec,
    );
  }

  /**
   * Schedule a maintenance
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param privateCloudName Name of the private cloud
   * @param maintenanceName Name of the maintenance
   * @param body The content of the action request
   * @param options The options parameters.
   */
  schedule(
    resourceGroupName: string,
    privateCloudName: string,
    maintenanceName: string,
    body: MaintenanceSchedule,
    options?: MaintenancesScheduleOptionalParams,
  ): Promise<MaintenancesScheduleResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, privateCloudName, maintenanceName, body, options },
      scheduleOperationSpec,
    );
  }

  /**
   * ListNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param privateCloudName Name of the private cloud
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    privateCloudName: string,
    nextLink: string,
    options?: MaintenancesListNextOptionalParams,
  ): Promise<MaintenancesListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, privateCloudName, nextLink, options },
      listNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/maintenances",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MaintenanceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.stateName,
    Parameters.status,
    Parameters.fromParam,
    Parameters.to,
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.privateCloudName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/maintenances/{maintenanceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Maintenance,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.privateCloudName,
    Parameters.maintenanceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const initiateChecksOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/maintenances/{maintenanceName}/initiateChecks",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Maintenance,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.privateCloudName,
    Parameters.maintenanceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const rescheduleOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/maintenances/{maintenanceName}/reschedule",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Maintenance,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.privateCloudName,
    Parameters.maintenanceName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const scheduleOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/maintenances/{maintenanceName}/schedule",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Maintenance,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.privateCloudName,
    Parameters.maintenanceName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MaintenanceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.privateCloudName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
