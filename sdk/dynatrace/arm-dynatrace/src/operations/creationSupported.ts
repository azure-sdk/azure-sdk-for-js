/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { CreationSupported } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { DynatraceObservability } from "../dynatraceObservability.js";
import {
  CreationSupportedListOptionalParams,
  CreationSupportedListResponse,
  CreationSupportedGetOptionalParams,
  CreationSupportedGetResponse,
} from "../models/index.js";

/** Class containing CreationSupported operations. */
export class CreationSupportedImpl implements CreationSupported {
  private readonly client: DynatraceObservability;

  /**
   * Initialize a new instance of the class CreationSupported class.
   * @param client Reference to the service client
   */
  constructor(client: DynatraceObservability) {
    this.client = client;
  }

  /**
   * Informs if the current subscription is being already monitored for selected Dynatrace environment.
   * @param dynatraceEnvironmentId Dynatrace Environment Id
   * @param options The options parameters.
   */
  list(
    dynatraceEnvironmentId: string,
    options?: CreationSupportedListOptionalParams,
  ): Promise<CreationSupportedListResponse> {
    return this.client.sendOperationRequest(
      { dynatraceEnvironmentId, options },
      listOperationSpec,
    );
  }

  /**
   * Informs if the current subscription is being already monitored for selected Dynatrace environment.
   * @param dynatraceEnvironmentId Dynatrace Environment Id
   * @param options The options parameters.
   */
  get(
    dynatraceEnvironmentId: string,
    options?: CreationSupportedGetOptionalParams,
  ): Promise<CreationSupportedGetResponse> {
    return this.client.sendOperationRequest(
      { dynatraceEnvironmentId, options },
      getOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Dynatrace.Observability/subscriptionStatuses/{dynatraceEnvironmentId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CreateResourceSupportedResponse,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.dynatraceEnvironmentId,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Dynatrace.Observability/subscriptionStatuses/{dynatraceEnvironmentId}/default",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CreateResourceSupportedResponse,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.dynatraceEnvironmentId,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
