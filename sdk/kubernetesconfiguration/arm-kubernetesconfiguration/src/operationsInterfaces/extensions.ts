/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  Extension,
  ExtensionsListByResourceGroupOptionalParams,
  ExtensionsGetOptionalParams,
  ExtensionsGetResponse,
  ExtensionsCreateOptionalParams,
  ExtensionsCreateResponse,
  ExtensionUpdate,
  ExtensionsUpdateOptionalParams,
  ExtensionsUpdateResponse,
  ExtensionsDeleteOptionalParams,
  ExtensionsDeleteResponse,
  ExtensionsOperationStatusOptionalParams,
  ExtensionsOperationStatusResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Extensions. */
export interface Extensions {
  /**
   * List all Extensions in the cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterRp Cluster Resource Provider Name
   * @param clusterResourceName cluster Resource Name
   * @param clusterName cluster Name
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    clusterRp: string,
    clusterResourceName: string,
    clusterName: string,
    options?: ExtensionsListByResourceGroupOptionalParams,
  ): PagedAsyncIterableIterator<Extension>;
  /**
   * Gets Kubernetes Cluster Extension.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterRp Cluster Resource Provider Name
   * @param clusterResourceName cluster Resource Name
   * @param clusterName cluster Name
   * @param extensionName Name of the Extension.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    clusterRp: string,
    clusterResourceName: string,
    clusterName: string,
    extensionName: string,
    options?: ExtensionsGetOptionalParams,
  ): Promise<ExtensionsGetResponse>;
  /**
   * Create a new Kubernetes Cluster Extension.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterRp Cluster Resource Provider Name
   * @param clusterResourceName cluster Resource Name
   * @param clusterName cluster Name
   * @param extensionName Name of the Extension.
   * @param resource Properties necessary to Create an Extension.
   * @param options The options parameters.
   */
  beginCreate(
    resourceGroupName: string,
    clusterRp: string,
    clusterResourceName: string,
    clusterName: string,
    extensionName: string,
    resource: Extension,
    options?: ExtensionsCreateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ExtensionsCreateResponse>,
      ExtensionsCreateResponse
    >
  >;
  /**
   * Create a new Kubernetes Cluster Extension.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterRp Cluster Resource Provider Name
   * @param clusterResourceName cluster Resource Name
   * @param clusterName cluster Name
   * @param extensionName Name of the Extension.
   * @param resource Properties necessary to Create an Extension.
   * @param options The options parameters.
   */
  beginCreateAndWait(
    resourceGroupName: string,
    clusterRp: string,
    clusterResourceName: string,
    clusterName: string,
    extensionName: string,
    resource: Extension,
    options?: ExtensionsCreateOptionalParams,
  ): Promise<ExtensionsCreateResponse>;
  /**
   * Patch an existing Kubernetes Cluster Extension.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterRp Cluster Resource Provider Name
   * @param clusterResourceName cluster Resource Name
   * @param clusterName cluster Name
   * @param extensionName Name of the Extension.
   * @param properties Properties to Patch in an existing Extension.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    clusterRp: string,
    clusterResourceName: string,
    clusterName: string,
    extensionName: string,
    properties: ExtensionUpdate,
    options?: ExtensionsUpdateOptionalParams,
  ): Promise<ExtensionsUpdateResponse>;
  /**
   * Delete a Kubernetes Cluster Extension. This will cause the Agent to Uninstall the extension from the
   * cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterRp Cluster Resource Provider Name
   * @param clusterResourceName cluster Resource Name
   * @param clusterName cluster Name
   * @param extensionName Name of the Extension.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    clusterRp: string,
    clusterResourceName: string,
    clusterName: string,
    extensionName: string,
    options?: ExtensionsDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ExtensionsDeleteResponse>,
      ExtensionsDeleteResponse
    >
  >;
  /**
   * Delete a Kubernetes Cluster Extension. This will cause the Agent to Uninstall the extension from the
   * cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterRp Cluster Resource Provider Name
   * @param clusterResourceName cluster Resource Name
   * @param clusterName cluster Name
   * @param extensionName Name of the Extension.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    clusterRp: string,
    clusterResourceName: string,
    clusterName: string,
    extensionName: string,
    options?: ExtensionsDeleteOptionalParams,
  ): Promise<ExtensionsDeleteResponse>;
  /**
   * Get Async Operation status
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterRp Cluster Resource Provider Name
   * @param clusterResourceName cluster Resource Name
   * @param clusterName cluster Name
   * @param extensionName Name of the Extension.
   * @param operationId operationId value
   * @param body Any object
   * @param options The options parameters.
   */
  operationStatus(
    resourceGroupName: string,
    clusterRp: string,
    clusterResourceName: string,
    clusterName: string,
    extensionName: string,
    operationId: string,
    body: Record<string, unknown>,
    options?: ExtensionsOperationStatusOptionalParams,
  ): Promise<ExtensionsOperationStatusResponse>;
}
