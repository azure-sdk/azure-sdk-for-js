/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const HelmOperatorProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HelmOperatorProperties",
    modelProperties: {
      chartVersion: {
        serializedName: "chartVersion",
        type: {
          name: "String",
        },
      },
      chartValues: {
        serializedName: "chartValues",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ComplianceStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComplianceStatus",
    modelProperties: {
      complianceState: {
        serializedName: "complianceState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      lastConfigApplied: {
        serializedName: "lastConfigApplied",
        type: {
          name: "DateTime",
        },
      },
      message: {
        serializedName: "message",
        type: {
          name: "String",
        },
      },
      messageLevel: {
        serializedName: "messageLevel",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String",
        },
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String",
        },
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime",
        },
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String",
        },
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String",
        },
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail",
        },
      },
    },
  },
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail",
            },
          },
        },
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo",
            },
          },
        },
      },
    },
  },
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } },
        },
      },
    },
  },
};

export const SourceControlConfigurationList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SourceControlConfigurationList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SourceControlConfiguration",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties,
    },
  },
};

export const SourceControlConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SourceControlConfiguration",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData",
        },
      },
      repositoryUrl: {
        serializedName: "properties.repositoryUrl",
        type: {
          name: "String",
        },
      },
      operatorNamespace: {
        defaultValue: "default",
        serializedName: "properties.operatorNamespace",
        type: {
          name: "String",
        },
      },
      operatorInstanceName: {
        serializedName: "properties.operatorInstanceName",
        type: {
          name: "String",
        },
      },
      operatorType: {
        serializedName: "properties.operatorType",
        type: {
          name: "String",
        },
      },
      operatorParams: {
        serializedName: "properties.operatorParams",
        type: {
          name: "String",
        },
      },
      configurationProtectedSettings: {
        serializedName: "properties.configurationProtectedSettings",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      operatorScope: {
        defaultValue: "cluster",
        serializedName: "properties.operatorScope",
        type: {
          name: "String",
        },
      },
      repositoryPublicKey: {
        serializedName: "properties.repositoryPublicKey",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      sshKnownHostsContents: {
        serializedName: "properties.sshKnownHostsContents",
        type: {
          name: "String",
        },
      },
      enableHelmOperator: {
        serializedName: "properties.enableHelmOperator",
        type: {
          name: "Boolean",
        },
      },
      helmOperatorProperties: {
        serializedName: "properties.helmOperatorProperties",
        type: {
          name: "Composite",
          className: "HelmOperatorProperties",
        },
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      complianceStatus: {
        serializedName: "properties.complianceStatus",
        type: {
          name: "Composite",
          className: "ComplianceStatus",
        },
      },
    },
  },
};
