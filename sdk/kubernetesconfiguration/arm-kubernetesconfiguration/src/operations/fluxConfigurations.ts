/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { FluxConfigurations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SourceControlConfigurationClient } from "../sourceControlConfigurationClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  FluxConfiguration,
  FluxConfigurationsListByResourceGroupNextOptionalParams,
  FluxConfigurationsListByResourceGroupOptionalParams,
  FluxConfigurationsListByResourceGroupResponse,
  FluxConfigurationsGetOptionalParams,
  FluxConfigurationsGetResponse,
  FluxConfigurationsCreateOptionalParams,
  FluxConfigurationsCreateResponse,
  FluxConfigurationUpdate,
  FluxConfigurationsUpdateOptionalParams,
  FluxConfigurationsUpdateResponse,
  FluxConfigurationsDeleteOptionalParams,
  FluxConfigurationsDeleteResponse,
  FluxConfigurationsOperationStatusOptionalParams,
  FluxConfigurationsOperationStatusResponse,
  FluxConfigurationsListByResourceGroupNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing FluxConfigurations operations. */
export class FluxConfigurationsImpl implements FluxConfigurations {
  private readonly client: SourceControlConfigurationClient;

  /**
   * Initialize a new instance of the class FluxConfigurations class.
   * @param client Reference to the service client
   */
  constructor(client: SourceControlConfigurationClient) {
    this.client = client;
  }

  /**
   * List all Flux Configurations.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterRp Cluster Resource Provider Name
   * @param clusterResourceName cluster Resource Name
   * @param clusterName cluster Name
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    clusterRp: string,
    clusterResourceName: string,
    clusterName: string,
    options?: FluxConfigurationsListByResourceGroupOptionalParams,
  ): PagedAsyncIterableIterator<FluxConfiguration> {
    const iter = this.listByResourceGroupPagingAll(
      resourceGroupName,
      clusterRp,
      clusterResourceName,
      clusterName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByResourceGroupPagingPage(
          resourceGroupName,
          clusterRp,
          clusterResourceName,
          clusterName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    clusterRp: string,
    clusterResourceName: string,
    clusterName: string,
    options?: FluxConfigurationsListByResourceGroupOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<FluxConfiguration[]> {
    let result: FluxConfigurationsListByResourceGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByResourceGroup(
        resourceGroupName,
        clusterRp,
        clusterResourceName,
        clusterName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        clusterRp,
        clusterResourceName,
        clusterName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    clusterRp: string,
    clusterResourceName: string,
    clusterName: string,
    options?: FluxConfigurationsListByResourceGroupOptionalParams,
  ): AsyncIterableIterator<FluxConfiguration> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      clusterRp,
      clusterResourceName,
      clusterName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List all Flux Configurations.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterRp Cluster Resource Provider Name
   * @param clusterResourceName cluster Resource Name
   * @param clusterName cluster Name
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    clusterRp: string,
    clusterResourceName: string,
    clusterName: string,
    options?: FluxConfigurationsListByResourceGroupOptionalParams,
  ): Promise<FluxConfigurationsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        clusterRp,
        clusterResourceName,
        clusterName,
        options,
      },
      listByResourceGroupOperationSpec,
    );
  }

  /**
   * Gets details of the Flux Configuration.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterRp Cluster Resource Provider Name
   * @param clusterResourceName cluster Resource Name
   * @param clusterName cluster Name
   * @param fluxConfigurationName Name of the Flux Configuration.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    clusterRp: string,
    clusterResourceName: string,
    clusterName: string,
    fluxConfigurationName: string,
    options?: FluxConfigurationsGetOptionalParams,
  ): Promise<FluxConfigurationsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        clusterRp,
        clusterResourceName,
        clusterName,
        fluxConfigurationName,
        options,
      },
      getOperationSpec,
    );
  }

  /**
   * Create a new Kubernetes Flux Configuration.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterRp Cluster Resource Provider Name
   * @param clusterResourceName cluster Resource Name
   * @param clusterName cluster Name
   * @param fluxConfigurationName Name of the Flux Configuration.
   * @param resource Properties necessary to Create a FluxConfiguration.
   * @param options The options parameters.
   */
  async beginCreate(
    resourceGroupName: string,
    clusterRp: string,
    clusterResourceName: string,
    clusterName: string,
    fluxConfigurationName: string,
    resource: FluxConfiguration,
    options?: FluxConfigurationsCreateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<FluxConfigurationsCreateResponse>,
      FluxConfigurationsCreateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<FluxConfigurationsCreateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        clusterRp,
        clusterResourceName,
        clusterName,
        fluxConfigurationName,
        resource,
        options,
      },
      spec: createOperationSpec,
    });
    const poller = await createHttpPoller<
      FluxConfigurationsCreateResponse,
      OperationState<FluxConfigurationsCreateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create a new Kubernetes Flux Configuration.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterRp Cluster Resource Provider Name
   * @param clusterResourceName cluster Resource Name
   * @param clusterName cluster Name
   * @param fluxConfigurationName Name of the Flux Configuration.
   * @param resource Properties necessary to Create a FluxConfiguration.
   * @param options The options parameters.
   */
  async beginCreateAndWait(
    resourceGroupName: string,
    clusterRp: string,
    clusterResourceName: string,
    clusterName: string,
    fluxConfigurationName: string,
    resource: FluxConfiguration,
    options?: FluxConfigurationsCreateOptionalParams,
  ): Promise<FluxConfigurationsCreateResponse> {
    const poller = await this.beginCreate(
      resourceGroupName,
      clusterRp,
      clusterResourceName,
      clusterName,
      fluxConfigurationName,
      resource,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Update an existing Kubernetes Flux Configuration.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterRp Cluster Resource Provider Name
   * @param clusterResourceName cluster Resource Name
   * @param clusterName cluster Name
   * @param fluxConfigurationName Name of the Flux Configuration.
   * @param properties Properties to Patch in an existing Flux Configuration.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    clusterRp: string,
    clusterResourceName: string,
    clusterName: string,
    fluxConfigurationName: string,
    properties: FluxConfigurationUpdate,
    options?: FluxConfigurationsUpdateOptionalParams,
  ): Promise<FluxConfigurationsUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        clusterRp,
        clusterResourceName,
        clusterName,
        fluxConfigurationName,
        properties,
        options,
      },
      updateOperationSpec,
    );
  }

  /**
   * This will delete the YAML file used to set up the Flux Configuration, thus stopping future sync from
   * the source repo.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterRp Cluster Resource Provider Name
   * @param clusterResourceName cluster Resource Name
   * @param clusterName cluster Name
   * @param fluxConfigurationName Name of the Flux Configuration.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    clusterRp: string,
    clusterResourceName: string,
    clusterName: string,
    fluxConfigurationName: string,
    options?: FluxConfigurationsDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<FluxConfigurationsDeleteResponse>,
      FluxConfigurationsDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<FluxConfigurationsDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        clusterRp,
        clusterResourceName,
        clusterName,
        fluxConfigurationName,
        options,
      },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<
      FluxConfigurationsDeleteResponse,
      OperationState<FluxConfigurationsDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * This will delete the YAML file used to set up the Flux Configuration, thus stopping future sync from
   * the source repo.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterRp Cluster Resource Provider Name
   * @param clusterResourceName cluster Resource Name
   * @param clusterName cluster Name
   * @param fluxConfigurationName Name of the Flux Configuration.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    clusterRp: string,
    clusterResourceName: string,
    clusterName: string,
    fluxConfigurationName: string,
    options?: FluxConfigurationsDeleteOptionalParams,
  ): Promise<FluxConfigurationsDeleteResponse> {
    const poller = await this.beginDelete(
      resourceGroupName,
      clusterRp,
      clusterResourceName,
      clusterName,
      fluxConfigurationName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Get Async Operation status
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterRp Cluster Resource Provider Name
   * @param clusterResourceName cluster Resource Name
   * @param clusterName cluster Name
   * @param fluxConfigurationName Name of the Flux Configuration.
   * @param operationId operationId value
   * @param body Any object
   * @param options The options parameters.
   */
  operationStatus(
    resourceGroupName: string,
    clusterRp: string,
    clusterResourceName: string,
    clusterName: string,
    fluxConfigurationName: string,
    operationId: string,
    body: Record<string, unknown>,
    options?: FluxConfigurationsOperationStatusOptionalParams,
  ): Promise<FluxConfigurationsOperationStatusResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        clusterRp,
        clusterResourceName,
        clusterName,
        fluxConfigurationName,
        operationId,
        body,
        options,
      },
      operationStatusOperationSpec,
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterRp Cluster Resource Provider Name
   * @param clusterResourceName cluster Resource Name
   * @param clusterName cluster Name
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    clusterRp: string,
    clusterResourceName: string,
    clusterName: string,
    nextLink: string,
    options?: FluxConfigurationsListByResourceGroupNextOptionalParams,
  ): Promise<FluxConfigurationsListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        clusterRp,
        clusterResourceName,
        clusterName,
        nextLink,
        options,
      },
      listByResourceGroupNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/provider/{clusterRp}/{clusterResourceName}/{clusterName}/providers/Microsoft.KubernetesConfiguration/fluxConfigurations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.FluxConfigurationListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterRp,
    Parameters.clusterResourceName,
    Parameters.clusterName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/provider/{clusterRp}/{clusterResourceName}/{clusterName}/providers/Microsoft.KubernetesConfiguration/fluxConfigurations/{fluxConfigurationName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.FluxConfiguration,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterRp,
    Parameters.clusterResourceName,
    Parameters.clusterName,
    Parameters.fluxConfigurationName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/provider/{clusterRp}/{clusterResourceName}/{clusterName}/providers/Microsoft.KubernetesConfiguration/fluxConfigurations/{fluxConfigurationName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.FluxConfiguration,
    },
    201: {
      bodyMapper: Mappers.FluxConfiguration,
    },
    202: {
      bodyMapper: Mappers.FluxConfiguration,
    },
    204: {
      bodyMapper: Mappers.FluxConfiguration,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.resource1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterRp,
    Parameters.clusterResourceName,
    Parameters.clusterName,
    Parameters.fluxConfigurationName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/provider/{clusterRp}/{clusterResourceName}/{clusterName}/providers/Microsoft.KubernetesConfiguration/fluxConfigurations/{fluxConfigurationName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.FluxConfiguration,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.properties1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterRp,
    Parameters.clusterResourceName,
    Parameters.clusterName,
    Parameters.fluxConfigurationName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/provider/{clusterRp}/{clusterResourceName}/{clusterName}/providers/Microsoft.KubernetesConfiguration/fluxConfigurations/{fluxConfigurationName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.FluxConfigurationsDeleteHeaders,
    },
    201: {
      headersMapper: Mappers.FluxConfigurationsDeleteHeaders,
    },
    202: {
      headersMapper: Mappers.FluxConfigurationsDeleteHeaders,
    },
    204: {
      headersMapper: Mappers.FluxConfigurationsDeleteHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion, Parameters.forceDelete],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterRp,
    Parameters.clusterResourceName,
    Parameters.clusterName,
    Parameters.fluxConfigurationName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const operationStatusOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/provider/{clusterRp}/{clusterResourceName}/{clusterName}/providers/Microsoft.KubernetesConfiguration/fluxConfigurations/{fluxConfigurationName}/operations/{operationId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper:
        Mappers.PathsT3WamfSubscriptionsSubscriptionidResourcegroupsResourcegroupnameProviderClusterrpClusterresourcenameClusternameProvidersMicrosoftKubernetesconfigurationFluxconfigurationsFluxconfigurationnameOperationsOperationidGetResponses200ContentApplicationJsonSchema,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterRp,
    Parameters.clusterResourceName,
    Parameters.clusterName,
    Parameters.operationId,
    Parameters.fluxConfigurationName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.FluxConfigurationListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterRp,
    Parameters.clusterResourceName,
    Parameters.clusterName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
