/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { Summaries } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { IoTFirmwareDefenseClient } from "../ioTFirmwareDefenseClient";
import {
  SummaryName,
  SummariesGetOptionalParams,
  SummariesGetResponse,
} from "../models";

/** Class containing Summaries operations. */
export class SummariesImpl implements Summaries {
  private readonly client: IoTFirmwareDefenseClient;

  /**
   * Initialize a new instance of the class Summaries class.
   * @param client Reference to the service client
   */
  constructor(client: IoTFirmwareDefenseClient) {
    this.client = client;
  }

  /**
   * Get an analysis result summary of a firmware by name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the firmware analysis workspace.
   * @param firmwareId The id of the firmware.
   * @param summaryName The Firmware analysis summary name describing the type of summary.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    workspaceName: string,
    firmwareId: string,
    summaryName: SummaryName,
    options?: SummariesGetOptionalParams,
  ): Promise<SummariesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workspaceName, firmwareId, summaryName, options },
      getOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTFirmwareDefense/workspaces/{workspaceName}/firmwares/{firmwareId}/summaries/{summaryName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SummaryResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.firmwareId,
    Parameters.summaryName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
