/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      isDataAction: {
        serializedName: "isDataAction",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay",
        },
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      actionType: {
        serializedName: "actionType",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail",
        },
      },
    },
  },
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail",
            },
          },
        },
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo",
            },
          },
        },
      },
    },
  },
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } },
        },
      },
    },
  },
};

export const WorkspaceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkspaceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Workspace",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const WorkspaceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkspaceProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Sku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String",
        },
      },
      tier: {
        serializedName: "tier",
        type: {
          name: "Enum",
          allowedValues: ["Free", "Basic", "Standard", "Premium"],
        },
      },
      size: {
        serializedName: "size",
        type: {
          name: "String",
        },
      },
      family: {
        serializedName: "family",
        type: {
          name: "String",
        },
      },
      capacity: {
        serializedName: "capacity",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData",
        },
      },
    },
  },
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String",
        },
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String",
        },
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime",
        },
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String",
        },
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String",
        },
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const WorkspaceUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkspaceUpdate",
    modelProperties: {
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "AzureResourceManagerCommonTypesSkuUpdate",
        },
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
    },
  },
};

export const AzureResourceManagerCommonTypesSkuUpdate: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "AzureResourceManagerCommonTypesSkuUpdate",
      modelProperties: {
        name: {
          serializedName: "name",
          type: {
            name: "String",
          },
        },
        tier: {
          serializedName: "tier",
          type: {
            name: "Enum",
            allowedValues: ["Free", "Basic", "Standard", "Premium"],
          },
        },
        size: {
          serializedName: "size",
          type: {
            name: "String",
          },
        },
        family: {
          serializedName: "family",
          type: {
            name: "String",
          },
        },
        capacity: {
          serializedName: "capacity",
          type: {
            name: "Number",
          },
        },
      },
    },
  };

export const FirmwareListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FirmwareListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Firmware",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const FirmwareProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FirmwareProperties",
    modelProperties: {
      fileName: {
        serializedName: "fileName",
        type: {
          name: "String",
        },
      },
      vendor: {
        constraints: {
          Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9-_. ,'\"~=(){}:]*$"),
        },
        serializedName: "vendor",
        type: {
          name: "String",
        },
      },
      model: {
        constraints: {
          Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9-_. ,'\"~=(){}:]*$"),
        },
        serializedName: "model",
        type: {
          name: "String",
        },
      },
      version: {
        constraints: {
          Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9-_. ,'\"~=(){}:]*$"),
        },
        serializedName: "version",
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "description",
        type: {
          name: "String",
        },
      },
      fileSize: {
        serializedName: "fileSize",
        type: {
          name: "Number",
        },
      },
      status: {
        serializedName: "status",
        type: {
          name: "String",
        },
      },
      statusMessages: {
        serializedName: "statusMessages",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StatusMessage",
            },
          },
        },
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const StatusMessage: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StatusMessage",
    modelProperties: {
      errorCode: {
        serializedName: "errorCode",
        type: {
          name: "Number",
        },
      },
      message: {
        serializedName: "message",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const FirmwareUpdateDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FirmwareUpdateDefinition",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "FirmwareProperties",
        },
      },
    },
  },
};

export const BinaryHardeningResourceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BinaryHardeningResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BinaryHardeningResource",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const BinaryHardeningResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BinaryHardeningResult",
    modelProperties: {
      binaryHardeningId: {
        serializedName: "binaryHardeningId",
        type: {
          name: "String",
        },
      },
      securityHardeningFeatures: {
        serializedName: "securityHardeningFeatures",
        type: {
          name: "Composite",
          className: "BinaryHardeningFeatures",
        },
      },
      executableArchitecture: {
        serializedName: "executableArchitecture",
        type: {
          name: "String",
        },
      },
      filePath: {
        serializedName: "filePath",
        type: {
          name: "String",
        },
      },
      executableClass: {
        serializedName: "executableClass",
        type: {
          name: "String",
        },
      },
      runpath: {
        serializedName: "runpath",
        type: {
          name: "String",
        },
      },
      rpath: {
        serializedName: "rpath",
        type: {
          name: "String",
        },
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const BinaryHardeningFeatures: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BinaryHardeningFeatures",
    modelProperties: {
      noExecute: {
        serializedName: "noExecute",
        type: {
          name: "Boolean",
        },
      },
      positionIndependentExecutable: {
        serializedName: "positionIndependentExecutable",
        type: {
          name: "Boolean",
        },
      },
      relocationReadOnly: {
        serializedName: "relocationReadOnly",
        type: {
          name: "Boolean",
        },
      },
      canary: {
        serializedName: "canary",
        type: {
          name: "Boolean",
        },
      },
      stripped: {
        serializedName: "stripped",
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const CveResourceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CveResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CveResource",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const CveResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CveResult",
    modelProperties: {
      cveId: {
        serializedName: "cveId",
        type: {
          name: "String",
        },
      },
      componentId: {
        serializedName: "componentId",
        type: {
          name: "String",
        },
      },
      componentName: {
        serializedName: "componentName",
        type: {
          name: "String",
        },
      },
      componentVersion: {
        serializedName: "componentVersion",
        type: {
          name: "String",
        },
      },
      severity: {
        serializedName: "severity",
        type: {
          name: "String",
        },
      },
      cveName: {
        serializedName: "cveName",
        type: {
          name: "String",
        },
      },
      effectiveCvssScore: {
        serializedName: "effectiveCvssScore",
        type: {
          name: "Number",
        },
      },
      effectiveCvssVersion: {
        serializedName: "effectiveCvssVersion",
        type: {
          name: "Number",
        },
      },
      cvssScores: {
        serializedName: "cvssScores",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CvssScore",
            },
          },
        },
      },
      links: {
        serializedName: "links",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CveLink",
            },
          },
        },
      },
      description: {
        serializedName: "description",
        type: {
          name: "String",
        },
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const CvssScore: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CvssScore",
    modelProperties: {
      version: {
        serializedName: "version",
        required: true,
        type: {
          name: "Number",
        },
      },
      score: {
        serializedName: "score",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const CveLink: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CveLink",
    modelProperties: {
      href: {
        serializedName: "href",
        type: {
          name: "String",
        },
      },
      label: {
        serializedName: "label",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const CryptoCertificateResourceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CryptoCertificateResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CryptoCertificateResource",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const CryptoCertificate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CryptoCertificate",
    modelProperties: {
      cryptoCertId: {
        serializedName: "cryptoCertId",
        type: {
          name: "String",
        },
      },
      certificateName: {
        serializedName: "certificateName",
        type: {
          name: "String",
        },
      },
      subject: {
        serializedName: "subject",
        type: {
          name: "Composite",
          className: "CryptoCertificateEntity",
        },
      },
      issuer: {
        serializedName: "issuer",
        type: {
          name: "Composite",
          className: "CryptoCertificateEntity",
        },
      },
      issuedDate: {
        serializedName: "issuedDate",
        type: {
          name: "DateTime",
        },
      },
      expirationDate: {
        serializedName: "expirationDate",
        type: {
          name: "DateTime",
        },
      },
      certificateRole: {
        serializedName: "certificateRole",
        type: {
          name: "String",
        },
      },
      signatureAlgorithm: {
        serializedName: "signatureAlgorithm",
        type: {
          name: "String",
        },
      },
      certificateKeySize: {
        serializedName: "certificateKeySize",
        type: {
          name: "Number",
        },
      },
      certificateKeyAlgorithm: {
        serializedName: "certificateKeyAlgorithm",
        type: {
          name: "String",
        },
      },
      encoding: {
        serializedName: "encoding",
        type: {
          name: "String",
        },
      },
      serialNumber: {
        serializedName: "serialNumber",
        type: {
          name: "String",
        },
      },
      fingerprint: {
        serializedName: "fingerprint",
        type: {
          name: "String",
        },
      },
      certificateUsage: {
        serializedName: "certificateUsage",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      filePaths: {
        serializedName: "filePaths",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      pairedKey: {
        serializedName: "pairedKey",
        type: {
          name: "Composite",
          className: "PairedKey",
        },
      },
      isExpired: {
        serializedName: "isExpired",
        type: {
          name: "Boolean",
        },
      },
      isSelfSigned: {
        serializedName: "isSelfSigned",
        type: {
          name: "Boolean",
        },
      },
      isWeakSignature: {
        serializedName: "isWeakSignature",
        type: {
          name: "Boolean",
        },
      },
      isShortKeySize: {
        serializedName: "isShortKeySize",
        type: {
          name: "Boolean",
        },
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const CryptoCertificateEntity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CryptoCertificateEntity",
    modelProperties: {
      commonName: {
        serializedName: "commonName",
        type: {
          name: "String",
        },
      },
      organization: {
        serializedName: "organization",
        type: {
          name: "String",
        },
      },
      organizationalUnit: {
        serializedName: "organizationalUnit",
        type: {
          name: "String",
        },
      },
      state: {
        serializedName: "state",
        type: {
          name: "String",
        },
      },
      country: {
        serializedName: "country",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PairedKey: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PairedKey",
    modelProperties: {
      pairedKeyId: {
        serializedName: "pairedKeyId",
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const CryptoKeyResourceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CryptoKeyResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CryptoKeyResource",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const CryptoKey: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CryptoKey",
    modelProperties: {
      cryptoKeyId: {
        serializedName: "cryptoKeyId",
        type: {
          name: "String",
        },
      },
      keyType: {
        serializedName: "keyType",
        type: {
          name: "String",
        },
      },
      cryptoKeySize: {
        serializedName: "cryptoKeySize",
        type: {
          name: "Number",
        },
      },
      keyAlgorithm: {
        serializedName: "keyAlgorithm",
        type: {
          name: "String",
        },
      },
      usage: {
        serializedName: "usage",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      filePaths: {
        serializedName: "filePaths",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      pairedKey: {
        serializedName: "pairedKey",
        type: {
          name: "Composite",
          className: "PairedKey",
        },
      },
      isShortKeySize: {
        serializedName: "isShortKeySize",
        type: {
          name: "Boolean",
        },
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PasswordHashResourceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PasswordHashResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PasswordHashResource",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PasswordHash: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PasswordHash",
    modelProperties: {
      passwordHashId: {
        serializedName: "passwordHashId",
        type: {
          name: "String",
        },
      },
      filePath: {
        serializedName: "filePath",
        type: {
          name: "String",
        },
      },
      salt: {
        serializedName: "salt",
        type: {
          name: "String",
        },
      },
      hash: {
        serializedName: "hash",
        type: {
          name: "String",
        },
      },
      context: {
        serializedName: "context",
        type: {
          name: "String",
        },
      },
      username: {
        serializedName: "username",
        type: {
          name: "String",
        },
      },
      algorithm: {
        serializedName: "algorithm",
        type: {
          name: "String",
        },
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SbomComponentResourceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SbomComponentResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SbomComponentResource",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SbomComponent: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SbomComponent",
    modelProperties: {
      componentId: {
        serializedName: "componentId",
        type: {
          name: "String",
        },
      },
      componentName: {
        serializedName: "componentName",
        type: {
          name: "String",
        },
      },
      version: {
        serializedName: "version",
        type: {
          name: "String",
        },
      },
      license: {
        serializedName: "license",
        type: {
          name: "String",
        },
      },
      filePaths: {
        serializedName: "filePaths",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SummaryResourceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SummaryResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SummaryResource",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SummaryResourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SummaryResourceProperties",
    uberParent: "SummaryResourceProperties",
    polymorphicDiscriminator: {
      serializedName: "summaryType",
      clientName: "summaryType",
    },
    modelProperties: {
      summaryType: {
        serializedName: "summaryType",
        required: true,
        type: {
          name: "String",
        },
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const GenerateUploadUrlRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GenerateUploadUrlRequest",
    modelProperties: {
      firmwareId: {
        serializedName: "firmwareId",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const UrlToken: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UrlToken",
    modelProperties: {
      url: {
        serializedName: "url",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const UsageMetricListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UsageMetricListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UsageMetric",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const UsageMetricProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UsageMetricProperties",
    modelProperties: {
      monthlyFirmwareUploadCount: {
        serializedName: "monthlyFirmwareUploadCount",
        required: true,
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      totalFirmwareCount: {
        serializedName: "totalFirmwareCount",
        required: true,
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties,
    },
  },
};

export const BinaryHardeningSummaryResource: coreClient.CompositeMapper = {
  serializedName: "BinaryHardening",
  type: {
    name: "Composite",
    className: "BinaryHardeningSummaryResource",
    uberParent: "SummaryResourceProperties",
    polymorphicDiscriminator:
      SummaryResourceProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...SummaryResourceProperties.type.modelProperties,
      totalFiles: {
        serializedName: "totalFiles",
        type: {
          name: "Number",
        },
      },
      notExecutableStackCount: {
        serializedName: "notExecutableStackCount",
        type: {
          name: "Number",
        },
      },
      positionIndependentExecutableCount: {
        serializedName: "positionIndependentExecutableCount",
        type: {
          name: "Number",
        },
      },
      relocationReadOnlyCount: {
        serializedName: "relocationReadOnlyCount",
        type: {
          name: "Number",
        },
      },
      stackCanaryCount: {
        serializedName: "stackCanaryCount",
        type: {
          name: "Number",
        },
      },
      strippedBinaryCount: {
        serializedName: "strippedBinaryCount",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const CryptoCertificateSummaryResource: coreClient.CompositeMapper = {
  serializedName: "CryptoCertificate",
  type: {
    name: "Composite",
    className: "CryptoCertificateSummaryResource",
    uberParent: "SummaryResourceProperties",
    polymorphicDiscriminator:
      SummaryResourceProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...SummaryResourceProperties.type.modelProperties,
      totalCertificateCount: {
        serializedName: "totalCertificateCount",
        type: {
          name: "Number",
        },
      },
      pairedKeyCount: {
        serializedName: "pairedKeyCount",
        type: {
          name: "Number",
        },
      },
      expiredCertificateCount: {
        serializedName: "expiredCertificateCount",
        type: {
          name: "Number",
        },
      },
      expiringSoonCertificateCount: {
        serializedName: "expiringSoonCertificateCount",
        type: {
          name: "Number",
        },
      },
      weakSignatureCount: {
        serializedName: "weakSignatureCount",
        type: {
          name: "Number",
        },
      },
      selfSignedCertificateCount: {
        serializedName: "selfSignedCertificateCount",
        type: {
          name: "Number",
        },
      },
      shortKeySizeCount: {
        serializedName: "shortKeySizeCount",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const CryptoKeySummaryResource: coreClient.CompositeMapper = {
  serializedName: "CryptoKey",
  type: {
    name: "Composite",
    className: "CryptoKeySummaryResource",
    uberParent: "SummaryResourceProperties",
    polymorphicDiscriminator:
      SummaryResourceProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...SummaryResourceProperties.type.modelProperties,
      totalKeyCount: {
        serializedName: "totalKeyCount",
        type: {
          name: "Number",
        },
      },
      publicKeyCount: {
        serializedName: "publicKeyCount",
        type: {
          name: "Number",
        },
      },
      privateKeyCount: {
        serializedName: "privateKeyCount",
        type: {
          name: "Number",
        },
      },
      pairedKeyCount: {
        serializedName: "pairedKeyCount",
        type: {
          name: "Number",
        },
      },
      shortKeySizeCount: {
        serializedName: "shortKeySizeCount",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const CveSummary: coreClient.CompositeMapper = {
  serializedName: "CommonVulnerabilitiesAndExposures",
  type: {
    name: "Composite",
    className: "CveSummary",
    uberParent: "SummaryResourceProperties",
    polymorphicDiscriminator:
      SummaryResourceProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...SummaryResourceProperties.type.modelProperties,
      criticalCveCount: {
        serializedName: "criticalCveCount",
        type: {
          name: "Number",
        },
      },
      highCveCount: {
        serializedName: "highCveCount",
        type: {
          name: "Number",
        },
      },
      mediumCveCount: {
        serializedName: "mediumCveCount",
        type: {
          name: "Number",
        },
      },
      lowCveCount: {
        serializedName: "lowCveCount",
        type: {
          name: "Number",
        },
      },
      unknownCveCount: {
        serializedName: "unknownCveCount",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const FirmwareSummary: coreClient.CompositeMapper = {
  serializedName: "Firmware",
  type: {
    name: "Composite",
    className: "FirmwareSummary",
    uberParent: "SummaryResourceProperties",
    polymorphicDiscriminator:
      SummaryResourceProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...SummaryResourceProperties.type.modelProperties,
      extractedSize: {
        serializedName: "extractedSize",
        type: {
          name: "Number",
        },
      },
      fileSize: {
        serializedName: "fileSize",
        type: {
          name: "Number",
        },
      },
      extractedFileCount: {
        serializedName: "extractedFileCount",
        type: {
          name: "Number",
        },
      },
      componentCount: {
        serializedName: "componentCount",
        type: {
          name: "Number",
        },
      },
      binaryCount: {
        serializedName: "binaryCount",
        type: {
          name: "Number",
        },
      },
      analysisTimeSeconds: {
        serializedName: "analysisTimeSeconds",
        type: {
          name: "Number",
        },
      },
      rootFileSystems: {
        serializedName: "rootFileSystems",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const Workspace: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Workspace",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "WorkspaceProperties",
        },
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku",
        },
      },
    },
  },
};

export const Firmware: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Firmware",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "FirmwareProperties",
        },
      },
    },
  },
};

export const BinaryHardeningResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BinaryHardeningResource",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "BinaryHardeningResult",
        },
      },
    },
  },
};

export const CveResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CveResource",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "CveResult",
        },
      },
    },
  },
};

export const CryptoCertificateResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CryptoCertificateResource",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "CryptoCertificate",
        },
      },
    },
  },
};

export const CryptoKeyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CryptoKeyResource",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "CryptoKey",
        },
      },
    },
  },
};

export const PasswordHashResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PasswordHashResource",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "PasswordHash",
        },
      },
    },
  },
};

export const SbomComponentResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SbomComponentResource",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "SbomComponent",
        },
      },
    },
  },
};

export const SummaryResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SummaryResource",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "SummaryResourceProperties",
        },
      },
    },
  },
};

export const UsageMetric: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UsageMetric",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "UsageMetricProperties",
        },
      },
    },
  },
};

export let discriminators = {
  SummaryResourceProperties: SummaryResourceProperties,
  "SummaryResourceProperties.BinaryHardening": BinaryHardeningSummaryResource,
  "SummaryResourceProperties.CryptoCertificate":
    CryptoCertificateSummaryResource,
  "SummaryResourceProperties.CryptoKey": CryptoKeySummaryResource,
  "SummaryResourceProperties.CommonVulnerabilitiesAndExposures": CveSummary,
  "SummaryResourceProperties.Firmware": FirmwareSummary,
};
