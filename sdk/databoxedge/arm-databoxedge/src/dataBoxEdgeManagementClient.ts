/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreRestPipeline from "@azure/core-rest-pipeline";
import {
  PipelineRequest,
  PipelineResponse,
  SendRequest
} from "@azure/core-rest-pipeline";
import * as coreAuth from "@azure/core-auth";
import {
  AddonsImpl,
  AlertsImpl,
  AvailableSkusImpl,
  BandwidthSchedulesImpl,
  ContainersImpl,
  DeviceCapacityCheckImpl,
  DeviceCapacityInfoOperationsImpl,
  DevicesImpl,
  DiagnosticSettingsImpl,
  JobsImpl,
  MarketplaceImageOfferOperationsImpl,
  MarketplaceImagePublisherOperationsImpl,
  MarketplaceImageSasTokenImpl,
  MarketplaceImageSkuOperationsImpl,
  MarketplaceImageVersionOperationsImpl,
  MonitoringConfigImpl,
  NodesImpl,
  OperationsImpl,
  OperationsStatusImpl,
  OrdersImpl,
  RolesImpl,
  SharesImpl,
  StorageAccountCredentialsImpl,
  StorageAccountsImpl,
  SupportPackagesImpl,
  TriggersImpl,
  UsersImpl
} from "./operations";
import {
  Addons,
  Alerts,
  AvailableSkus,
  BandwidthSchedules,
  Containers,
  DeviceCapacityCheck,
  DeviceCapacityInfoOperations,
  Devices,
  DiagnosticSettings,
  Jobs,
  MarketplaceImageOfferOperations,
  MarketplaceImagePublisherOperations,
  MarketplaceImageSasToken,
  MarketplaceImageSkuOperations,
  MarketplaceImageVersionOperations,
  MonitoringConfig,
  Nodes,
  Operations,
  OperationsStatus,
  Orders,
  Roles,
  Shares,
  StorageAccountCredentials,
  StorageAccounts,
  SupportPackages,
  Triggers,
  Users
} from "./operationsInterfaces";
import { DataBoxEdgeManagementClientOptionalParams } from "./models";

export class DataBoxEdgeManagementClient extends coreClient.ServiceClient {
  $host: string;
  subscriptionId: string;
  apiVersion: string;

  /**
   * Initializes a new instance of the DataBoxEdgeManagementClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param subscriptionId The subscription ID.
   * @param options The parameter options
   */
  constructor(
    credentials: coreAuth.TokenCredential,
    subscriptionId: string,
    options?: DataBoxEdgeManagementClientOptionalParams
  ) {
    if (credentials === undefined) {
      throw new Error("'credentials' cannot be null");
    }
    if (subscriptionId === undefined) {
      throw new Error("'subscriptionId' cannot be null");
    }

    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: DataBoxEdgeManagementClientOptionalParams = {
      requestContentType: "application/json; charset=utf-8",
      credential: credentials
    };

    const packageDetails = `azsdk-js-arm-databoxedge/3.0.0-beta.1`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    if (!options.credentialScopes) {
      options.credentialScopes = ["https://management.azure.com/.default"];
    }
    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix
      },
      endpoint: options.endpoint ?? options.baseUri ?? "management.azure.com"
    };
    super(optionsWithDefaults);

    let bearerTokenAuthenticationPolicyFound: boolean = false;
    if (options?.pipeline && options.pipeline.getOrderedPolicies().length > 0) {
      const pipelinePolicies: coreRestPipeline.PipelinePolicy[] = options.pipeline.getOrderedPolicies();
      bearerTokenAuthenticationPolicyFound = pipelinePolicies.some(
        (pipelinePolicy) =>
          pipelinePolicy.name ===
          coreRestPipeline.bearerTokenAuthenticationPolicyName
      );
    }
    if (
      !options ||
      !options.pipeline ||
      options.pipeline.getOrderedPolicies().length == 0 ||
      !bearerTokenAuthenticationPolicyFound
    ) {
      this.pipeline.removePolicy({
        name: coreRestPipeline.bearerTokenAuthenticationPolicyName
      });
      this.pipeline.addPolicy(
        coreRestPipeline.bearerTokenAuthenticationPolicy({
          credential: credentials,
          scopes:
            optionsWithDefaults.credentialScopes ??
            `${optionsWithDefaults.endpoint}/.default`,
          challengeCallbacks: {
            authorizeRequestOnChallenge:
              coreClient.authorizeRequestOnClaimChallenge
          }
        })
      );
    }
    // Parameter assignments
    this.subscriptionId = subscriptionId;

    // Assigning values to Constant parameters
    this.$host = options.$host || "management.azure.com";
    this.apiVersion = options.apiVersion || "2023-01-01-preview";
    this.addons = new AddonsImpl(this);
    this.alerts = new AlertsImpl(this);
    this.availableSkus = new AvailableSkusImpl(this);
    this.bandwidthSchedules = new BandwidthSchedulesImpl(this);
    this.containers = new ContainersImpl(this);
    this.deviceCapacityCheck = new DeviceCapacityCheckImpl(this);
    this.deviceCapacityInfoOperations = new DeviceCapacityInfoOperationsImpl(
      this
    );
    this.devices = new DevicesImpl(this);
    this.diagnosticSettings = new DiagnosticSettingsImpl(this);
    this.jobs = new JobsImpl(this);
    this.marketplaceImageOfferOperations = new MarketplaceImageOfferOperationsImpl(
      this
    );
    this.marketplaceImagePublisherOperations = new MarketplaceImagePublisherOperationsImpl(
      this
    );
    this.marketplaceImageSasToken = new MarketplaceImageSasTokenImpl(this);
    this.marketplaceImageSkuOperations = new MarketplaceImageSkuOperationsImpl(
      this
    );
    this.marketplaceImageVersionOperations = new MarketplaceImageVersionOperationsImpl(
      this
    );
    this.monitoringConfig = new MonitoringConfigImpl(this);
    this.nodes = new NodesImpl(this);
    this.operations = new OperationsImpl(this);
    this.operationsStatus = new OperationsStatusImpl(this);
    this.orders = new OrdersImpl(this);
    this.roles = new RolesImpl(this);
    this.shares = new SharesImpl(this);
    this.storageAccountCredentials = new StorageAccountCredentialsImpl(this);
    this.storageAccounts = new StorageAccountsImpl(this);
    this.supportPackages = new SupportPackagesImpl(this);
    this.triggers = new TriggersImpl(this);
    this.users = new UsersImpl(this);
    this.addCustomApiVersionPolicy(options.apiVersion);
  }

  /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
  private addCustomApiVersionPolicy(apiVersion?: string) {
    if (!apiVersion) {
      return;
    }
    const apiVersionPolicy = {
      name: "CustomApiVersionPolicy",
      async sendRequest(
        request: PipelineRequest,
        next: SendRequest
      ): Promise<PipelineResponse> {
        const param = request.url.split("?");
        if (param.length > 1) {
          const newParams = param[1].split("&").map((item) => {
            if (item.indexOf("api-version") > -1) {
              return "api-version=" + apiVersion;
            } else {
              return item;
            }
          });
          request.url = param[0] + "?" + newParams.join("&");
        }
        return next(request);
      }
    };
    this.pipeline.addPolicy(apiVersionPolicy);
  }

  addons: Addons;
  alerts: Alerts;
  availableSkus: AvailableSkus;
  bandwidthSchedules: BandwidthSchedules;
  containers: Containers;
  deviceCapacityCheck: DeviceCapacityCheck;
  deviceCapacityInfoOperations: DeviceCapacityInfoOperations;
  devices: Devices;
  diagnosticSettings: DiagnosticSettings;
  jobs: Jobs;
  marketplaceImageOfferOperations: MarketplaceImageOfferOperations;
  marketplaceImagePublisherOperations: MarketplaceImagePublisherOperations;
  marketplaceImageSasToken: MarketplaceImageSasToken;
  marketplaceImageSkuOperations: MarketplaceImageSkuOperations;
  marketplaceImageVersionOperations: MarketplaceImageVersionOperations;
  monitoringConfig: MonitoringConfig;
  nodes: Nodes;
  operations: Operations;
  operationsStatus: OperationsStatus;
  orders: Orders;
  roles: Roles;
  shares: Shares;
  storageAccountCredentials: StorageAccountCredentials;
  storageAccounts: StorageAccounts;
  supportPackages: SupportPackages;
  triggers: Triggers;
  users: Users;
}
