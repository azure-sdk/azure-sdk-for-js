/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const AddonList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AddonList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Addon"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ARMBaseModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ARMBaseModel",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloudError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudError",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "CloudErrorBody"
        }
      }
    }
  }
};

export const CloudErrorBody: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudErrorBody",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CloudErrorBody"
            }
          }
        }
      }
    }
  }
};

export const AlertList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AlertList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Alert"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AlertProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AlertProperties",
    modelProperties: {
      title: {
        serializedName: "title",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      alertType: {
        serializedName: "alertType",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      appearedAtDateTime: {
        serializedName: "appearedAtDateTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      recommendation: {
        serializedName: "recommendation",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      severity: {
        serializedName: "severity",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errorDetails: {
        serializedName: "errorDetails",
        type: {
          name: "Composite",
          className: "AlertErrorDetails"
        }
      },
      detailedInformation: {
        serializedName: "detailedInformation",
        readOnly: true,
        nullable: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const AlertErrorDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AlertErrorDetails",
    modelProperties: {
      errorCode: {
        serializedName: "errorCode",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      errorMessage: {
        serializedName: "errorMessage",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      occurrences: {
        serializedName: "occurrences",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DataBoxEdgeSkuList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataBoxEdgeSkuList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataBoxEdgeSku"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataBoxEdgeSku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataBoxEdgeSku",
    modelProperties: {
      resourceType: {
        serializedName: "resourceType",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      kind: {
        serializedName: "kind",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      size: {
        serializedName: "size",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      family: {
        serializedName: "family",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      locations: {
        serializedName: "locations",
        readOnly: true,
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      apiVersions: {
        serializedName: "apiVersions",
        readOnly: true,
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      locationInfo: {
        serializedName: "locationInfo",
        readOnly: true,
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SkuLocationInfo"
            }
          }
        }
      },
      costs: {
        serializedName: "costs",
        readOnly: true,
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SkuCost"
            }
          }
        }
      },
      signupOption: {
        serializedName: "signupOption",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      availability: {
        serializedName: "availability",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      shipmentTypes: {
        serializedName: "shipmentTypes",
        readOnly: true,
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      capabilities: {
        serializedName: "capabilities",
        readOnly: true,
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SkuCapability"
            }
          }
        }
      }
    }
  }
};

export const SkuLocationInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SkuLocationInfo",
    modelProperties: {
      location: {
        serializedName: "location",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      zones: {
        serializedName: "zones",
        readOnly: true,
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      sites: {
        serializedName: "sites",
        readOnly: true,
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const SkuCost: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SkuCost",
    modelProperties: {
      meterId: {
        serializedName: "meterId",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      quantity: {
        serializedName: "quantity",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      extendedUnit: {
        serializedName: "extendedUnit",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SkuCapability: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SkuCapability",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BandwidthScheduleProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BandwidthScheduleProperties",
    modelProperties: {
      start: {
        serializedName: "start",
        required: true,
        type: {
          name: "String"
        }
      },
      stop: {
        serializedName: "stop",
        required: true,
        type: {
          name: "String"
        }
      },
      rateInMbps: {
        serializedName: "rateInMbps",
        required: true,
        type: {
          name: "Number"
        }
      },
      days: {
        serializedName: "days",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const BandwidthSchedulesList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BandwidthSchedulesList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BandwidthSchedule"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContainerList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Container"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContainerProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerProperties",
    modelProperties: {
      containerStatus: {
        serializedName: "containerStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      dataFormat: {
        serializedName: "dataFormat",
        required: true,
        type: {
          name: "String"
        }
      },
      refreshDetails: {
        serializedName: "refreshDetails",
        type: {
          name: "Composite",
          className: "RefreshDetails"
        }
      },
      createdDateTime: {
        serializedName: "createdDateTime",
        readOnly: true,
        nullable: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const RefreshDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RefreshDetails",
    modelProperties: {
      inProgressRefreshJobId: {
        serializedName: "inProgressRefreshJobId",
        nullable: true,
        type: {
          name: "String"
        }
      },
      lastCompletedRefreshJobTimeInUTC: {
        serializedName: "lastCompletedRefreshJobTimeInUTC",
        nullable: true,
        type: {
          name: "DateTime"
        }
      },
      errorManifestFile: {
        serializedName: "errorManifestFile",
        nullable: true,
        type: {
          name: "String"
        }
      },
      lastJob: {
        serializedName: "lastJob",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeviceCapacityRequestInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeviceCapacityRequestInfo",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "DeviceCapacityRequestInfoProperties"
        }
      }
    }
  }
};

export const DeviceCapacityRequestInfoProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeviceCapacityRequestInfoProperties",
    modelProperties: {
      vmPlacementQuery: {
        serializedName: "vmPlacementQuery",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "String"
                }
              }
            }
          }
        }
      },
      vmPlacementResults: {
        serializedName: "vmPlacementResults",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VmPlacementRequestResult"
            }
          }
        }
      },
      deviceCapacityRequestType: {
        serializedName: "deviceCapacityRequestType",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VmPlacementRequestResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VmPlacementRequestResult",
    modelProperties: {
      vmSize: {
        serializedName: "vmSize",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      isFeasible: {
        serializedName: "isFeasible",
        type: {
          name: "Boolean"
        }
      },
      messageCode: {
        serializedName: "messageCode",
        nullable: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeviceCapacityInfoProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeviceCapacityInfoProperties",
    modelProperties: {
      timeStamp: {
        serializedName: "timeStamp",
        type: {
          name: "DateTime"
        }
      },
      clusterStorageCapacityInfo: {
        serializedName: "clusterStorageCapacityInfo",
        type: {
          name: "Composite",
          className: "ClusterStorageViewData"
        }
      },
      clusterComputeCapacityInfo: {
        serializedName: "clusterComputeCapacityInfo",
        type: {
          name: "Composite",
          className: "ClusterCapacityViewData"
        }
      },
      nodeCapacityInfos: {
        serializedName: "nodeCapacityInfos",
        nullable: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "Composite", className: "HostCapacity" } }
        }
      }
    }
  }
};

export const ClusterStorageViewData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterStorageViewData",
    modelProperties: {
      clusterTotalStorageMb: {
        serializedName: "clusterTotalStorageMb",
        type: {
          name: "Number"
        }
      },
      clusterFreeStorageMb: {
        serializedName: "clusterFreeStorageMb",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ClusterCapacityViewData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterCapacityViewData",
    modelProperties: {
      fqdn: {
        serializedName: "fqdn",
        nullable: true,
        type: {
          name: "String"
        }
      },
      gpuCapacity: {
        serializedName: "gpuCapacity",
        type: {
          name: "Composite",
          className: "ClusterGpuCapacity"
        }
      },
      memoryCapacity: {
        serializedName: "memoryCapacity",
        type: {
          name: "Composite",
          className: "ClusterMemoryCapacity"
        }
      },
      lastRefreshedTime: {
        serializedName: "lastRefreshedTime",
        type: {
          name: "DateTime"
        }
      },
      totalProvisionedNonHpnCores: {
        serializedName: "totalProvisionedNonHpnCores",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ClusterGpuCapacity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterGpuCapacity",
    modelProperties: {
      gpuType: {
        serializedName: "gpuType",
        nullable: true,
        type: {
          name: "String"
        }
      },
      gpuUsedUnitsCount: {
        serializedName: "gpuUsedUnitsCount",
        type: {
          name: "Number"
        }
      },
      gpuFreeUnitsCount: {
        serializedName: "gpuFreeUnitsCount",
        type: {
          name: "Number"
        }
      },
      gpuReservedForFailoverUnitsCount: {
        serializedName: "gpuReservedForFailoverUnitsCount",
        type: {
          name: "Number"
        }
      },
      gpuTotalUnitsCount: {
        serializedName: "gpuTotalUnitsCount",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ClusterMemoryCapacity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterMemoryCapacity",
    modelProperties: {
      clusterFreeMemoryMb: {
        serializedName: "clusterFreeMemoryMb",
        type: {
          name: "Number"
        }
      },
      clusterUsedMemoryMb: {
        serializedName: "clusterUsedMemoryMb",
        type: {
          name: "Number"
        }
      },
      clusterFailoverMemoryMb: {
        serializedName: "clusterFailoverMemoryMb",
        type: {
          name: "Number"
        }
      },
      clusterFragmentationMemoryMb: {
        serializedName: "clusterFragmentationMemoryMb",
        type: {
          name: "Number"
        }
      },
      clusterHypervReserveMemoryMb: {
        serializedName: "clusterHypervReserveMemoryMb",
        type: {
          name: "Number"
        }
      },
      clusterInfraVmMemoryMb: {
        serializedName: "clusterInfraVmMemoryMb",
        type: {
          name: "Number"
        }
      },
      clusterTotalMemoryMb: {
        serializedName: "clusterTotalMemoryMb",
        type: {
          name: "Number"
        }
      },
      clusterNonFailoverVmMb: {
        serializedName: "clusterNonFailoverVmMb",
        type: {
          name: "Number"
        }
      },
      clusterMemoryUsedByVmsMb: {
        serializedName: "clusterMemoryUsedByVmsMb",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const HostCapacity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HostCapacity",
    modelProperties: {
      hostName: {
        serializedName: "hostName",
        nullable: true,
        type: {
          name: "String"
        }
      },
      effectiveAvailableMemoryMbOnHost: {
        serializedName: "effectiveAvailableMemoryMbOnHost",
        type: {
          name: "Number"
        }
      },
      availableGpuCount: {
        serializedName: "availableGpuCount",
        type: {
          name: "Number"
        }
      },
      vmUsedMemory: {
        serializedName: "vmUsedMemory",
        nullable: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "Composite", className: "VmMemory" } }
        }
      },
      gpuType: {
        serializedName: "gpuType",
        nullable: true,
        type: {
          name: "String"
        }
      },
      numaNodesData: {
        serializedName: "numaNodesData",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NumaNodeData"
            }
          }
        }
      }
    }
  }
};

export const VmMemory: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VmMemory",
    modelProperties: {
      startupMemoryMB: {
        serializedName: "startupMemoryMB",
        type: {
          name: "Number"
        }
      },
      currentMemoryUsageMB: {
        serializedName: "currentMemoryUsageMB",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const NumaNodeData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NumaNodeData",
    modelProperties: {
      numaNodeIndex: {
        serializedName: "numaNodeIndex",
        type: {
          name: "Number"
        }
      },
      totalMemoryInMb: {
        serializedName: "totalMemoryInMb",
        type: {
          name: "Number"
        }
      },
      logicalCoreCountPerCore: {
        serializedName: "logicalCoreCountPerCore",
        type: {
          name: "Number"
        }
      },
      effectiveAvailableMemoryInMb: {
        serializedName: "effectiveAvailableMemoryInMb",
        type: {
          name: "Number"
        }
      },
      freeVCpuIndexesForHpn: {
        serializedName: "freeVCpuIndexesForHpn",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      },
      vCpuIndexesForHpn: {
        serializedName: "vCpuIndexesForHpn",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      },
      vCpuIndexesForRoot: {
        serializedName: "vCpuIndexesForRoot",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      }
    }
  }
};

export const Sku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceIdentity",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataBoxEdgeDeviceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataBoxEdgeDeviceProperties",
    modelProperties: {
      isIoTRoleAllowed: {
        serializedName: "isIoTRoleAllowed",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      dataBoxEdgeDeviceStatus: {
        serializedName: "dataBoxEdgeDeviceStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serialNumber: {
        serializedName: "serialNumber",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      modelDescription: {
        serializedName: "modelDescription",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      deviceType: {
        serializedName: "deviceType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      friendlyName: {
        serializedName: "friendlyName",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      culture: {
        serializedName: "culture",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      deviceModel: {
        serializedName: "deviceModel",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      deviceSoftwareVersion: {
        serializedName: "deviceSoftwareVersion",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      deviceLocalCapacity: {
        serializedName: "deviceLocalCapacity",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      timeZone: {
        serializedName: "timeZone",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      deviceHcsVersion: {
        serializedName: "deviceHcsVersion",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      configuredRoleTypes: {
        serializedName: "configuredRoleTypes",
        readOnly: true,
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      nodeCount: {
        serializedName: "nodeCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      resourceMoveDetails: {
        serializedName: "resourceMoveDetails",
        type: {
          name: "Composite",
          className: "ResourceMoveDetails"
        }
      },
      edgeProfile: {
        serializedName: "edgeProfile",
        type: {
          name: "Composite",
          className: "EdgeProfile"
        }
      },
      dataResidency: {
        serializedName: "dataResidency",
        type: {
          name: "Composite",
          className: "DataResidency"
        }
      },
      computeVersionInformation: {
        serializedName: "computeVersionInformation",
        type: {
          name: "Composite",
          className: "ComputeVersionInformation"
        }
      },
      kubernetesPlatform: {
        serializedName: "kubernetesPlatform",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceMoveDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceMoveDetails",
    modelProperties: {
      operationInProgress: {
        serializedName: "operationInProgress",
        type: {
          name: "String"
        }
      },
      operationInProgressLockTimeoutInUTC: {
        serializedName: "operationInProgressLockTimeoutInUTC",
        nullable: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const EdgeProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EdgeProfile",
    modelProperties: {
      subscription: {
        serializedName: "subscription",
        type: {
          name: "Composite",
          className: "EdgeProfileSubscription"
        }
      }
    }
  }
};

export const EdgeProfileSubscription: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EdgeProfileSubscription",
    modelProperties: {
      registrationId: {
        serializedName: "registrationId",
        nullable: true,
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        nullable: true,
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "state",
        type: {
          name: "String"
        }
      },
      registrationDate: {
        serializedName: "registrationDate",
        nullable: true,
        type: {
          name: "String"
        }
      },
      subscriptionId: {
        serializedName: "subscriptionId",
        nullable: true,
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "SubscriptionProperties"
        }
      }
    }
  }
};

export const SubscriptionProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SubscriptionProperties",
    modelProperties: {
      tenantId: {
        serializedName: "tenantId",
        nullable: true,
        type: {
          name: "String"
        }
      },
      locationPlacementId: {
        serializedName: "locationPlacementId",
        nullable: true,
        type: {
          name: "String"
        }
      },
      quotaId: {
        serializedName: "quotaId",
        nullable: true,
        type: {
          name: "String"
        }
      },
      serializedDetails: {
        serializedName: "serializedDetails",
        nullable: true,
        type: {
          name: "String"
        }
      },
      registeredFeatures: {
        serializedName: "registeredFeatures",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SubscriptionRegisteredFeatures"
            }
          }
        }
      }
    }
  }
};

export const SubscriptionRegisteredFeatures: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SubscriptionRegisteredFeatures",
    modelProperties: {
      name: {
        serializedName: "name",
        nullable: true,
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "state",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataResidency: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataResidency",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComputeVersionInformation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeVersionInformation",
    modelProperties: {
      kubernetesVersion: {
        serializedName: "kubernetesVersion",
        nullable: true,
        type: {
          name: "String"
        }
      },
      iotEdgeVersion: {
        serializedName: "iotEdgeVersion",
        nullable: true,
        type: {
          name: "String"
        }
      },
      azureArcVersion: {
        serializedName: "azureArcVersion",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataBoxEdgeDevicePatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataBoxEdgeDevicePatch",
    modelProperties: {
      tags: {
        serializedName: "tags",
        nullable: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ResourceIdentity"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "DataBoxEdgeDevicePropertiesPatch"
        }
      }
    }
  }
};

export const DataBoxEdgeDevicePropertiesPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataBoxEdgeDevicePropertiesPatch",
    modelProperties: {
      edgeProfile: {
        serializedName: "edgeProfile",
        type: {
          name: "Composite",
          className: "EdgeProfilePatch"
        }
      }
    }
  }
};

export const EdgeProfilePatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EdgeProfilePatch",
    modelProperties: {
      subscription: {
        serializedName: "subscription",
        type: {
          name: "Composite",
          className: "EdgeProfileSubscriptionPatch"
        }
      }
    }
  }
};

export const EdgeProfileSubscriptionPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EdgeProfileSubscriptionPatch",
    modelProperties: {
      id: {
        serializedName: "id",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataBoxEdgeDeviceList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataBoxEdgeDeviceList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataBoxEdgeDevice"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataBoxEdgeDeviceExtendedInfoProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataBoxEdgeDeviceExtendedInfoProperties",
    modelProperties: {
      encryptionKeyThumbprint: {
        serializedName: "encryptionKeyThumbprint",
        nullable: true,
        type: {
          name: "String"
        }
      },
      encryptionKey: {
        serializedName: "encryptionKey",
        nullable: true,
        type: {
          name: "String"
        }
      },
      resourceKey: {
        serializedName: "resourceKey",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      clientSecretStoreId: {
        serializedName: "clientSecretStoreId",
        nullable: true,
        type: {
          name: "String"
        }
      },
      clientSecretStoreUrl: {
        serializedName: "clientSecretStoreUrl",
        nullable: true,
        type: {
          name: "String"
        }
      },
      channelIntegrityKeyName: {
        serializedName: "channelIntegrityKeyName",
        nullable: true,
        type: {
          name: "String"
        }
      },
      channelIntegrityKeyVersion: {
        serializedName: "channelIntegrityKeyVersion",
        nullable: true,
        type: {
          name: "String"
        }
      },
      keyVaultSyncStatus: {
        serializedName: "keyVaultSyncStatus",
        nullable: true,
        type: {
          name: "String"
        }
      },
      deviceSecrets: {
        serializedName: "deviceSecrets",
        readOnly: true,
        nullable: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "Composite", className: "Secret" } }
        }
      },
      clusterWitnessType: {
        serializedName: "clusterWitnessType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      fileShareWitnessLocation: {
        serializedName: "fileShareWitnessLocation",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      fileShareWitnessUsername: {
        serializedName: "fileShareWitnessUsername",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      cloudWitnessStorageAccountName: {
        serializedName: "cloudWitnessStorageAccountName",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      cloudWitnessContainerName: {
        serializedName: "cloudWitnessContainerName",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      cloudWitnessStorageEndpoint: {
        serializedName: "cloudWitnessStorageEndpoint",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Secret: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Secret",
    modelProperties: {
      encryptedSecret: {
        serializedName: "encryptedSecret",
        type: {
          name: "Composite",
          className: "AsymmetricEncryptedSecret"
        }
      },
      keyVaultId: {
        serializedName: "keyVaultId",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AsymmetricEncryptedSecret: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AsymmetricEncryptedSecret",
    modelProperties: {
      value: {
        constraints: {
          MinLength: 1
        },
        serializedName: "value",
        required: true,
        type: {
          name: "String"
        }
      },
      encryptionCertThumbprint: {
        serializedName: "encryptionCertThumbprint",
        nullable: true,
        type: {
          name: "String"
        }
      },
      encryptionAlgorithm: {
        serializedName: "encryptionAlgorithm",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataBoxEdgeDeviceExtendedInfoPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataBoxEdgeDeviceExtendedInfoPatch",
    modelProperties: {
      clientSecretStoreId: {
        serializedName: "clientSecretStoreId",
        nullable: true,
        type: {
          name: "String"
        }
      },
      clientSecretStoreUrl: {
        serializedName: "clientSecretStoreUrl",
        nullable: true,
        type: {
          name: "String"
        }
      },
      channelIntegrityKeyName: {
        serializedName: "channelIntegrityKeyName",
        nullable: true,
        type: {
          name: "String"
        }
      },
      channelIntegrityKeyVersion: {
        serializedName: "channelIntegrityKeyVersion",
        nullable: true,
        type: {
          name: "String"
        }
      },
      syncStatus: {
        serializedName: "syncStatus",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkSettingsProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkSettingsProperties",
    modelProperties: {
      networkAdapters: {
        serializedName: "networkAdapters",
        readOnly: true,
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkAdapter"
            }
          }
        }
      }
    }
  }
};

export const NetworkAdapter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkAdapter",
    modelProperties: {
      adapterId: {
        serializedName: "adapterId",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      adapterPosition: {
        serializedName: "adapterPosition",
        type: {
          name: "Composite",
          className: "NetworkAdapterPosition"
        }
      },
      index: {
        serializedName: "index",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      nodeId: {
        serializedName: "nodeId",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      networkAdapterName: {
        serializedName: "networkAdapterName",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      label: {
        serializedName: "label",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      macAddress: {
        serializedName: "macAddress",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      linkSpeed: {
        serializedName: "linkSpeed",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      rdmaStatus: {
        serializedName: "rdmaStatus",
        type: {
          name: "String"
        }
      },
      dhcpStatus: {
        serializedName: "dhcpStatus",
        type: {
          name: "String"
        }
      },
      ipv4Configuration: {
        serializedName: "ipv4Configuration",
        type: {
          name: "Composite",
          className: "Ipv4Config"
        }
      },
      ipv6Configuration: {
        serializedName: "ipv6Configuration",
        type: {
          name: "Composite",
          className: "Ipv6Config"
        }
      },
      ipv6LinkLocalAddress: {
        serializedName: "ipv6LinkLocalAddress",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      dnsServers: {
        serializedName: "dnsServers",
        readOnly: true,
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const NetworkAdapterPosition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkAdapterPosition",
    modelProperties: {
      networkGroup: {
        serializedName: "networkGroup",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      port: {
        serializedName: "port",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Ipv4Config: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Ipv4Config",
    modelProperties: {
      ipAddress: {
        serializedName: "ipAddress",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      subnet: {
        serializedName: "subnet",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      gateway: {
        serializedName: "gateway",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Ipv6Config: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Ipv6Config",
    modelProperties: {
      ipAddress: {
        serializedName: "ipAddress",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      prefixLength: {
        serializedName: "prefixLength",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      gateway: {
        serializedName: "gateway",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SecuritySettingsProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecuritySettingsProperties",
    modelProperties: {
      deviceAdminPassword: {
        serializedName: "deviceAdminPassword",
        type: {
          name: "Composite",
          className: "AsymmetricEncryptedSecret"
        }
      }
    }
  }
};

export const UpdateSummaryProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateSummaryProperties",
    modelProperties: {
      deviceVersionNumber: {
        serializedName: "deviceVersionNumber",
        nullable: true,
        type: {
          name: "String"
        }
      },
      friendlyDeviceVersionName: {
        serializedName: "friendlyDeviceVersionName",
        nullable: true,
        type: {
          name: "String"
        }
      },
      deviceLastScannedDateTime: {
        serializedName: "deviceLastScannedDateTime",
        nullable: true,
        type: {
          name: "DateTime"
        }
      },
      lastCompletedScanJobDateTime: {
        serializedName: "lastCompletedScanJobDateTime",
        nullable: true,
        type: {
          name: "DateTime"
        }
      },
      lastSuccessfulScanJobTime: {
        serializedName: "lastSuccessfulScanJobTime",
        nullable: true,
        type: {
          name: "DateTime"
        }
      },
      lastCompletedDownloadJobDateTime: {
        serializedName: "lastCompletedDownloadJobDateTime",
        readOnly: true,
        nullable: true,
        type: {
          name: "DateTime"
        }
      },
      lastCompletedDownloadJobId: {
        serializedName: "lastCompletedDownloadJobId",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      lastDownloadJobStatus: {
        serializedName: "lastDownloadJobStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastSuccessfulInstallJobDateTime: {
        serializedName: "lastSuccessfulInstallJobDateTime",
        nullable: true,
        type: {
          name: "DateTime"
        }
      },
      lastCompletedInstallJobDateTime: {
        serializedName: "lastCompletedInstallJobDateTime",
        readOnly: true,
        nullable: true,
        type: {
          name: "DateTime"
        }
      },
      lastCompletedInstallJobId: {
        serializedName: "lastCompletedInstallJobId",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      lastInstallJobStatus: {
        serializedName: "lastInstallJobStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      totalNumberOfUpdatesAvailable: {
        serializedName: "totalNumberOfUpdatesAvailable",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      totalNumberOfUpdatesPendingDownload: {
        serializedName: "totalNumberOfUpdatesPendingDownload",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      totalNumberOfUpdatesPendingInstall: {
        serializedName: "totalNumberOfUpdatesPendingInstall",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      rebootBehavior: {
        serializedName: "rebootBehavior",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ongoingUpdateOperation: {
        serializedName: "ongoingUpdateOperation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      inProgressDownloadJobId: {
        serializedName: "inProgressDownloadJobId",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      inProgressInstallJobId: {
        serializedName: "inProgressInstallJobId",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      inProgressDownloadJobStartedDateTime: {
        serializedName: "inProgressDownloadJobStartedDateTime",
        readOnly: true,
        nullable: true,
        type: {
          name: "DateTime"
        }
      },
      inProgressInstallJobStartedDateTime: {
        serializedName: "inProgressInstallJobStartedDateTime",
        readOnly: true,
        nullable: true,
        type: {
          name: "DateTime"
        }
      },
      updateTitles: {
        serializedName: "updateTitles",
        readOnly: true,
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      updates: {
        serializedName: "updates",
        readOnly: true,
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UpdateDetails"
            }
          }
        }
      },
      totalUpdateSizeInBytes: {
        serializedName: "totalUpdateSizeInBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const UpdateDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateDetails",
    modelProperties: {
      updateTitle: {
        serializedName: "updateTitle",
        nullable: true,
        type: {
          name: "String"
        }
      },
      updateSize: {
        serializedName: "updateSize",
        type: {
          name: "Number"
        }
      },
      updateType: {
        serializedName: "updateType",
        type: {
          name: "String"
        }
      },
      targetVersion: {
        serializedName: "targetVersion",
        nullable: true,
        type: {
          name: "String"
        }
      },
      friendlyVersionNumber: {
        serializedName: "friendlyVersionNumber",
        nullable: true,
        type: {
          name: "String"
        }
      },
      estimatedInstallTimeInMins: {
        serializedName: "estimatedInstallTimeInMins",
        type: {
          name: "Number"
        }
      },
      rebootBehavior: {
        serializedName: "rebootBehavior",
        type: {
          name: "String"
        }
      },
      installationImpact: {
        serializedName: "installationImpact",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UploadCertificateRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UploadCertificateRequest",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "RawCertificateData"
        }
      }
    }
  }
};

export const RawCertificateData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RawCertificateData",
    modelProperties: {
      authenticationType: {
        serializedName: "authenticationType",
        type: {
          name: "String"
        }
      },
      certificate: {
        constraints: {
          MinLength: 1
        },
        serializedName: "certificate",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UploadCertificateResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UploadCertificateResponse",
    modelProperties: {
      authType: {
        serializedName: "authType",
        type: {
          name: "String"
        }
      },
      resourceId: {
        serializedName: "resourceId",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      aadAuthority: {
        serializedName: "aadAuthority",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      aadTenantId: {
        serializedName: "aadTenantId",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      servicePrincipalClientId: {
        serializedName: "servicePrincipalClientId",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      servicePrincipalObjectId: {
        serializedName: "servicePrincipalObjectId",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      azureManagementEndpointAudience: {
        serializedName: "azureManagementEndpointAudience",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      aadAudience: {
        serializedName: "aadAudience",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GenerateCertResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GenerateCertResponse",
    modelProperties: {
      publicKey: {
        serializedName: "publicKey",
        nullable: true,
        type: {
          name: "String"
        }
      },
      privateKey: {
        serializedName: "privateKey",
        nullable: true,
        type: {
          name: "String"
        }
      },
      expiryTimeInUTC: {
        serializedName: "expiryTimeInUTC",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProactiveLogCollectionSettingsProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProactiveLogCollectionSettingsProperties",
    modelProperties: {
      userConsent: {
        serializedName: "userConsent",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DiagnosticRemoteSupportSettingsProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiagnosticRemoteSupportSettingsProperties",
    modelProperties: {
      remoteSupportSettingsList: {
        serializedName: "remoteSupportSettingsList",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RemoteSupportSettings"
            }
          }
        }
      }
    }
  }
};

export const RemoteSupportSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RemoteSupportSettings",
    modelProperties: {
      remoteApplicationType: {
        serializedName: "remoteApplicationType",
        type: {
          name: "String"
        }
      },
      accessLevel: {
        serializedName: "accessLevel",
        type: {
          name: "String"
        }
      },
      expirationTimeStampInUTC: {
        serializedName: "expirationTimeStampInUTC",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const Job: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Job",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        readOnly: true,
        nullable: true,
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        readOnly: true,
        nullable: true,
        type: {
          name: "DateTime"
        }
      },
      percentComplete: {
        serializedName: "percentComplete",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "JobErrorDetails"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "JobProperties"
        }
      }
    }
  }
};

export const JobErrorDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobErrorDetails",
    modelProperties: {
      errorDetails: {
        serializedName: "errorDetails",
        readOnly: true,
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "JobErrorItem"
            }
          }
        }
      },
      code: {
        serializedName: "code",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobErrorItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobErrorItem",
    modelProperties: {
      recommendations: {
        serializedName: "recommendations",
        readOnly: true,
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      code: {
        serializedName: "code",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobProperties",
    modelProperties: {
      jobType: {
        serializedName: "jobType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      currentStage: {
        serializedName: "currentStage",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      downloadProgress: {
        serializedName: "downloadProgress",
        type: {
          name: "Composite",
          className: "UpdateDownloadProgress"
        }
      },
      installProgress: {
        serializedName: "installProgress",
        type: {
          name: "Composite",
          className: "UpdateInstallProgress"
        }
      },
      totalRefreshErrors: {
        serializedName: "totalRefreshErrors",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      errorManifestFile: {
        serializedName: "errorManifestFile",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      refreshedEntityId: {
        serializedName: "refreshedEntityId",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      folder: {
        serializedName: "folder",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateDownloadProgress: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateDownloadProgress",
    modelProperties: {
      downloadPhase: {
        serializedName: "downloadPhase",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      percentComplete: {
        serializedName: "percentComplete",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      totalBytesToDownload: {
        serializedName: "totalBytesToDownload",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      totalBytesDownloaded: {
        serializedName: "totalBytesDownloaded",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      numberOfUpdatesToDownload: {
        serializedName: "numberOfUpdatesToDownload",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      numberOfUpdatesDownloaded: {
        serializedName: "numberOfUpdatesDownloaded",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const UpdateInstallProgress: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateInstallProgress",
    modelProperties: {
      percentComplete: {
        serializedName: "percentComplete",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      numberOfUpdatesToInstall: {
        serializedName: "numberOfUpdatesToInstall",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      numberOfUpdatesInstalled: {
        serializedName: "numberOfUpdatesInstalled",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const MarketplaceImageOfferList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MarketplaceImageOfferList",
    modelProperties: {
      value: {
        serializedName: "value",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MarketplaceImageOffer"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MarketplaceImageOfferProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MarketplaceImageOfferProperties",
    modelProperties: {
      publisherId: {
        serializedName: "publisherId",
        nullable: true,
        type: {
          name: "String"
        }
      },
      content: {
        serializedName: "content",
        nullable: true,
        type: {
          name: "String"
        }
      },
      contentVersion: {
        serializedName: "contentVersion",
        nullable: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        nullable: true,
        type: {
          name: "String"
        }
      },
      skuMappings: {
        serializedName: "skuMappings",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SkuMapping"
            }
          }
        }
      }
    }
  }
};

export const SkuMapping: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SkuMapping",
    modelProperties: {
      catalogPlanId: {
        serializedName: "catalogPlanId",
        nullable: true,
        type: {
          name: "String"
        }
      },
      marketplaceSkuId: {
        serializedName: "marketplaceSkuId",
        nullable: true,
        type: {
          name: "String"
        }
      },
      marketplaceSkuVersions: {
        serializedName: "marketplaceSkuVersions",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const MarketplaceImagePublisherList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MarketplaceImagePublisherList",
    modelProperties: {
      value: {
        serializedName: "value",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MarketplaceImagePublisher"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MarketplaceImagePublisherProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MarketplaceImagePublisherProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MarketplaceSasToken: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MarketplaceSasToken",
    modelProperties: {
      status: {
        serializedName: "status",
        nullable: true,
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "SasTokenProperties"
        }
      }
    }
  }
};

export const SasTokenProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SasTokenProperties",
    modelProperties: {
      sasUri: {
        serializedName: "sasUri",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MarketplaceImageSkuList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MarketplaceImageSkuList",
    modelProperties: {
      value: {
        serializedName: "value",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MarketplaceImageSku"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MarketplaceImageSkuProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MarketplaceImageSkuProperties",
    modelProperties: {
      publisherId: {
        serializedName: "publisherId",
        nullable: true,
        type: {
          name: "String"
        }
      },
      offerId: {
        serializedName: "offerId",
        nullable: true,
        type: {
          name: "String"
        }
      },
      content: {
        serializedName: "content",
        nullable: true,
        type: {
          name: "String"
        }
      },
      contentVersion: {
        serializedName: "contentVersion",
        nullable: true,
        type: {
          name: "String"
        }
      },
      skuMappings: {
        serializedName: "skuMappings",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SkuMapping"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MarketplaceImageVersionList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MarketplaceImageVersionList",
    modelProperties: {
      value: {
        serializedName: "value",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MarketplaceImageVersion"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MarketplaceImageVersionProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MarketplaceImageVersionProperties",
    modelProperties: {
      publisherId: {
        serializedName: "publisherId",
        nullable: true,
        type: {
          name: "String"
        }
      },
      offerId: {
        serializedName: "offerId",
        nullable: true,
        type: {
          name: "String"
        }
      },
      skuId: {
        serializedName: "skuId",
        nullable: true,
        type: {
          name: "String"
        }
      },
      content: {
        serializedName: "content",
        nullable: true,
        type: {
          name: "String"
        }
      },
      contentVersion: {
        serializedName: "contentVersion",
        nullable: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MonitoringMetricConfigurationProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MonitoringMetricConfigurationProperties",
    modelProperties: {
      metricConfigurations: {
        serializedName: "metricConfigurations",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricConfiguration"
            }
          }
        }
      }
    }
  }
};

export const MetricConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricConfiguration",
    modelProperties: {
      resourceId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "resourceId",
        required: true,
        type: {
          name: "String"
        }
      },
      mdmAccount: {
        serializedName: "mdmAccount",
        nullable: true,
        type: {
          name: "String"
        }
      },
      metricNameSpace: {
        serializedName: "metricNameSpace",
        nullable: true,
        type: {
          name: "String"
        }
      },
      counterSets: {
        serializedName: "counterSets",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricCounterSet"
            }
          }
        }
      }
    }
  }
};

export const MetricCounterSet: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricCounterSet",
    modelProperties: {
      counters: {
        serializedName: "counters",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricCounter"
            }
          }
        }
      }
    }
  }
};

export const MetricCounter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricCounter",
    modelProperties: {
      name: {
        constraints: {
          MinLength: 1
        },
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      instance: {
        serializedName: "instance",
        nullable: true,
        type: {
          name: "String"
        }
      },
      dimensionFilter: {
        serializedName: "dimensionFilter",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricDimension"
            }
          }
        }
      },
      additionalDimensions: {
        serializedName: "additionalDimensions",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricDimension"
            }
          }
        }
      }
    }
  }
};

export const MetricDimension: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricDimension",
    modelProperties: {
      sourceType: {
        constraints: {
          MinLength: 1
        },
        serializedName: "sourceType",
        required: true,
        type: {
          name: "String"
        }
      },
      sourceName: {
        constraints: {
          MinLength: 1
        },
        serializedName: "sourceName",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MonitoringMetricConfigurationList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MonitoringMetricConfigurationList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MonitoringMetricConfiguration"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NodeList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NodeList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Node"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NodeProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NodeProperties",
    modelProperties: {
      nodeStatus: {
        serializedName: "nodeStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      nodeChassisSerialNumber: {
        serializedName: "nodeChassisSerialNumber",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      nodeSerialNumber: {
        serializedName: "nodeSerialNumber",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      nodeDisplayName: {
        serializedName: "nodeDisplayName",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      nodeFriendlySoftwareVersion: {
        serializedName: "nodeFriendlySoftwareVersion",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      nodeHcsVersion: {
        serializedName: "nodeHcsVersion",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      nodeInstanceId: {
        serializedName: "nodeInstanceId",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationsList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationsList",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        nullable: true,
        type: {
          name: "String"
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        type: {
          name: "Boolean"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        nullable: true,
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "OperationProperties"
        }
      }
    }
  }
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        nullable: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        nullable: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        nullable: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationProperties",
    modelProperties: {
      serviceSpecification: {
        serializedName: "serviceSpecification",
        type: {
          name: "Composite",
          className: "ServiceSpecification"
        }
      }
    }
  }
};

export const ServiceSpecification: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceSpecification",
    modelProperties: {
      metricSpecifications: {
        serializedName: "metricSpecifications",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricSpecificationV1"
            }
          }
        }
      }
    }
  }
};

export const MetricSpecificationV1: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricSpecificationV1",
    modelProperties: {
      name: {
        serializedName: "name",
        nullable: true,
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        nullable: true,
        type: {
          name: "String"
        }
      },
      displayDescription: {
        serializedName: "displayDescription",
        nullable: true,
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      aggregationType: {
        serializedName: "aggregationType",
        type: {
          name: "String"
        }
      },
      dimensions: {
        serializedName: "dimensions",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricDimensionV1"
            }
          }
        }
      },
      fillGapWithZero: {
        serializedName: "fillGapWithZero",
        type: {
          name: "Boolean"
        }
      },
      category: {
        serializedName: "category",
        type: {
          name: "String"
        }
      },
      resourceIdDimensionNameOverride: {
        serializedName: "resourceIdDimensionNameOverride",
        nullable: true,
        type: {
          name: "String"
        }
      },
      supportedTimeGrainTypes: {
        serializedName: "supportedTimeGrainTypes",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      supportedAggregationTypes: {
        serializedName: "supportedAggregationTypes",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const MetricDimensionV1: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricDimensionV1",
    modelProperties: {
      name: {
        serializedName: "name",
        nullable: true,
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        nullable: true,
        type: {
          name: "String"
        }
      },
      toBeExportedForShoebox: {
        serializedName: "toBeExportedForShoebox",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const OrderList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OrderList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Order"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OrderProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OrderProperties",
    modelProperties: {
      orderId: {
        serializedName: "orderId",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      contactInformation: {
        serializedName: "contactInformation",
        type: {
          name: "Composite",
          className: "ContactDetails"
        }
      },
      shippingAddress: {
        serializedName: "shippingAddress",
        type: {
          name: "Composite",
          className: "Address"
        }
      },
      currentStatus: {
        serializedName: "currentStatus",
        type: {
          name: "Composite",
          className: "OrderStatus"
        }
      },
      orderHistory: {
        serializedName: "orderHistory",
        readOnly: true,
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OrderStatus"
            }
          }
        }
      },
      serialNumber: {
        serializedName: "serialNumber",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      deliveryTrackingInfo: {
        serializedName: "deliveryTrackingInfo",
        readOnly: true,
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TrackingInfo"
            }
          }
        }
      },
      returnTrackingInfo: {
        serializedName: "returnTrackingInfo",
        readOnly: true,
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TrackingInfo"
            }
          }
        }
      },
      shipmentType: {
        serializedName: "shipmentType",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContactDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContactDetails",
    modelProperties: {
      contactPerson: {
        constraints: {
          MinLength: 1
        },
        serializedName: "contactPerson",
        required: true,
        type: {
          name: "String"
        }
      },
      companyName: {
        constraints: {
          MinLength: 1
        },
        serializedName: "companyName",
        required: true,
        type: {
          name: "String"
        }
      },
      phone: {
        constraints: {
          MinLength: 1
        },
        serializedName: "phone",
        required: true,
        type: {
          name: "String"
        }
      },
      emailList: {
        serializedName: "emailList",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const Address: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Address",
    modelProperties: {
      addressLine1: {
        serializedName: "addressLine1",
        nullable: true,
        type: {
          name: "String"
        }
      },
      addressLine2: {
        serializedName: "addressLine2",
        nullable: true,
        type: {
          name: "String"
        }
      },
      addressLine3: {
        serializedName: "addressLine3",
        nullable: true,
        type: {
          name: "String"
        }
      },
      postalCode: {
        serializedName: "postalCode",
        nullable: true,
        type: {
          name: "String"
        }
      },
      city: {
        serializedName: "city",
        nullable: true,
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "state",
        nullable: true,
        type: {
          name: "String"
        }
      },
      country: {
        constraints: {
          MinLength: 1
        },
        serializedName: "country",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OrderStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OrderStatus",
    modelProperties: {
      status: {
        serializedName: "status",
        required: true,
        type: {
          name: "String"
        }
      },
      updateDateTime: {
        serializedName: "updateDateTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      comments: {
        serializedName: "comments",
        nullable: true,
        type: {
          name: "String"
        }
      },
      trackingInformation: {
        serializedName: "trackingInformation",
        type: {
          name: "Composite",
          className: "TrackingInfo"
        }
      },
      additionalOrderDetails: {
        serializedName: "additionalOrderDetails",
        readOnly: true,
        nullable: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const TrackingInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackingInfo",
    modelProperties: {
      serialNumber: {
        serializedName: "serialNumber",
        nullable: true,
        type: {
          name: "String"
        }
      },
      carrierName: {
        serializedName: "carrierName",
        nullable: true,
        type: {
          name: "String"
        }
      },
      trackingId: {
        serializedName: "trackingId",
        nullable: true,
        type: {
          name: "String"
        }
      },
      trackingUrl: {
        serializedName: "trackingUrl",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DCAccessCode: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DCAccessCode",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "DCAccessCodeProperties"
        }
      }
    }
  }
};

export const DCAccessCodeProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DCAccessCodeProperties",
    modelProperties: {
      authCode: {
        serializedName: "authCode",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RoleList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RoleList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Role"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ShareList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ShareList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Share"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ShareProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ShareProperties",
    modelProperties: {
      description: {
        serializedName: "description",
        nullable: true,
        type: {
          name: "String"
        }
      },
      shareStatus: {
        serializedName: "shareStatus",
        required: true,
        type: {
          name: "String"
        }
      },
      monitoringStatus: {
        serializedName: "monitoringStatus",
        required: true,
        type: {
          name: "String"
        }
      },
      azureContainerInfo: {
        serializedName: "azureContainerInfo",
        type: {
          name: "Composite",
          className: "AzureContainerInfo"
        }
      },
      accessProtocol: {
        serializedName: "accessProtocol",
        required: true,
        type: {
          name: "String"
        }
      },
      userAccessRights: {
        serializedName: "userAccessRights",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UserAccessRight"
            }
          }
        }
      },
      clientAccessRights: {
        serializedName: "clientAccessRights",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ClientAccessRight"
            }
          }
        }
      },
      refreshDetails: {
        serializedName: "refreshDetails",
        type: {
          name: "Composite",
          className: "RefreshDetails"
        }
      },
      shareMappings: {
        serializedName: "shareMappings",
        readOnly: true,
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MountPointMap"
            }
          }
        }
      },
      dataPolicy: {
        serializedName: "dataPolicy",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureContainerInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureContainerInfo",
    modelProperties: {
      storageAccountCredentialId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "storageAccountCredentialId",
        required: true,
        type: {
          name: "String"
        }
      },
      containerName: {
        constraints: {
          MinLength: 1
        },
        serializedName: "containerName",
        required: true,
        type: {
          name: "String"
        }
      },
      dataFormat: {
        serializedName: "dataFormat",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UserAccessRight: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserAccessRight",
    modelProperties: {
      userId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "userId",
        required: true,
        type: {
          name: "String"
        }
      },
      accessType: {
        serializedName: "accessType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClientAccessRight: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClientAccessRight",
    modelProperties: {
      client: {
        constraints: {
          MinLength: 1
        },
        serializedName: "client",
        required: true,
        type: {
          name: "String"
        }
      },
      accessPermission: {
        serializedName: "accessPermission",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MountPointMap: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MountPointMap",
    modelProperties: {
      shareId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "shareId",
        required: true,
        type: {
          name: "String"
        }
      },
      roleId: {
        serializedName: "roleId",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      mountPoint: {
        serializedName: "mountPoint",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      mountType: {
        serializedName: "mountType",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      roleType: {
        serializedName: "roleType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageAccountCredentialProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageAccountCredentialProperties",
    modelProperties: {
      alias: {
        constraints: {
          MinLength: 1
        },
        serializedName: "alias",
        required: true,
        type: {
          name: "String"
        }
      },
      userName: {
        serializedName: "userName",
        nullable: true,
        type: {
          name: "String"
        }
      },
      accountKey: {
        serializedName: "accountKey",
        type: {
          name: "Composite",
          className: "AsymmetricEncryptedSecret"
        }
      },
      connectionString: {
        serializedName: "connectionString",
        nullable: true,
        type: {
          name: "String"
        }
      },
      sslStatus: {
        serializedName: "sslStatus",
        required: true,
        type: {
          name: "String"
        }
      },
      blobDomainName: {
        serializedName: "blobDomainName",
        nullable: true,
        type: {
          name: "String"
        }
      },
      accountType: {
        serializedName: "accountType",
        required: true,
        type: {
          name: "String"
        }
      },
      storageAccountId: {
        serializedName: "storageAccountId",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageAccountCredentialList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageAccountCredentialList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageAccountCredential"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageAccountList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageAccountList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageAccount"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageAccountProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageAccountProperties",
    modelProperties: {
      description: {
        serializedName: "description",
        nullable: true,
        type: {
          name: "String"
        }
      },
      storageAccountStatus: {
        serializedName: "storageAccountStatus",
        type: {
          name: "String"
        }
      },
      dataPolicy: {
        serializedName: "dataPolicy",
        required: true,
        type: {
          name: "String"
        }
      },
      storageAccountCredentialId: {
        serializedName: "storageAccountCredentialId",
        nullable: true,
        type: {
          name: "String"
        }
      },
      blobEndpoint: {
        serializedName: "blobEndpoint",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      containerCount: {
        serializedName: "containerCount",
        readOnly: true,
        nullable: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SupportPackageRequestProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SupportPackageRequestProperties",
    modelProperties: {
      minimumTimeStamp: {
        serializedName: "minimumTimeStamp",
        type: {
          name: "DateTime"
        }
      },
      maximumTimeStamp: {
        serializedName: "maximumTimeStamp",
        type: {
          name: "DateTime"
        }
      },
      include: {
        serializedName: "include",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TriggerList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TriggerList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Trigger"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UserList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "User"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UserProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserProperties",
    modelProperties: {
      encryptedPassword: {
        serializedName: "encryptedPassword",
        type: {
          name: "Composite",
          className: "AsymmetricEncryptedSecret"
        }
      },
      shareAccessRights: {
        serializedName: "shareAccessRights",
        readOnly: true,
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ShareAccessRight"
            }
          }
        }
      },
      userType: {
        serializedName: "userType",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ShareAccessRight: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ShareAccessRight",
    modelProperties: {
      shareId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "shareId",
        required: true,
        type: {
          name: "String"
        }
      },
      accessType: {
        serializedName: "accessType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ASEKubernetesRoleProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ASEKubernetesRoleProperties",
    modelProperties: {
      hostPlatform: {
        serializedName: "hostPlatform",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      hostPlatformType: {
        serializedName: "hostPlatformType",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      kubernetesRoleResources: {
        serializedName: "kubernetesRoleResources",
        type: {
          name: "Composite",
          className: "ASEKubernetesRoleResources"
        }
      },
      roleStatus: {
        serializedName: "roleStatus",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ASEKubernetesRoleResources: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ASEKubernetesRoleResources",
    modelProperties: {
      storage: {
        serializedName: "storage",
        type: {
          name: "Composite",
          className: "ASEKubernetesRoleStorage"
        }
      },
      compute: {
        serializedName: "compute",
        type: {
          name: "Composite",
          className: "ASEKubernetesRoleCompute"
        }
      }
    }
  }
};

export const ASEKubernetesRoleStorage: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ASEKubernetesRoleStorage",
    modelProperties: {
      endpoints: {
        serializedName: "endpoints",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MountPointMap"
            }
          }
        }
      }
    }
  }
};

export const ASEKubernetesRoleCompute: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ASEKubernetesRoleCompute",
    modelProperties: {
      memoryInBytes: {
        serializedName: "memoryInBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      processorCount: {
        serializedName: "processorCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ArcAddonProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ArcAddonProperties",
    modelProperties: {
      subscriptionId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "subscriptionId",
        required: true,
        type: {
          name: "String"
        }
      },
      resourceGroupName: {
        constraints: {
          MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
          name: "String"
        }
      },
      resourceName: {
        constraints: {
          MinLength: 1
        },
        serializedName: "resourceName",
        required: true,
        type: {
          name: "String"
        }
      },
      resourceLocation: {
        constraints: {
          MinLength: 1
        },
        serializedName: "resourceLocation",
        required: true,
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      hostPlatform: {
        serializedName: "hostPlatform",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      hostPlatformType: {
        serializedName: "hostPlatformType",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      customLocationsObjectId: {
        serializedName: "customLocationsObjectId",
        nullable: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Authentication: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Authentication",
    modelProperties: {
      symmetricKey: {
        serializedName: "symmetricKey",
        type: {
          name: "Composite",
          className: "SymmetricKey"
        }
      }
    }
  }
};

export const SymmetricKey: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SymmetricKey",
    modelProperties: {
      connectionString: {
        serializedName: "connectionString",
        type: {
          name: "Composite",
          className: "AsymmetricEncryptedSecret"
        }
      }
    }
  }
};

export const CloudEdgeManagementRoleProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudEdgeManagementRoleProperties",
    modelProperties: {
      localManagementStatus: {
        serializedName: "localManagementStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      edgeProfile: {
        serializedName: "edgeProfile",
        type: {
          name: "Composite",
          className: "EdgeProfile"
        }
      },
      roleStatus: {
        serializedName: "roleStatus",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CniConfig: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CniConfig",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      podSubnet: {
        serializedName: "podSubnet",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      serviceSubnet: {
        serializedName: "serviceSubnet",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      componentType: {
        serializedName: "componentType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComputeResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeResource",
    modelProperties: {
      processorCount: {
        serializedName: "processorCount",
        required: true,
        type: {
          name: "Number"
        }
      },
      memoryInGB: {
        serializedName: "memoryInGB",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DataBoxEdgeMoveRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataBoxEdgeMoveRequest",
    modelProperties: {
      targetResourceGroup: {
        constraints: {
          MinLength: 1
        },
        serializedName: "targetResourceGroup",
        required: true,
        type: {
          name: "String"
        }
      },
      resources: {
        serializedName: "resources",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const EtcdInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EtcdInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      componentType: {
        serializedName: "componentType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FileTriggerProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FileTriggerProperties",
    modelProperties: {
      sourceInfo: {
        serializedName: "sourceInfo",
        type: {
          name: "Composite",
          className: "FileSourceInfo"
        }
      },
      sinkInfo: {
        serializedName: "sinkInfo",
        type: {
          name: "Composite",
          className: "RoleSinkInfo"
        }
      },
      customContextTag: {
        constraints: {
          MaxLength: 192
        },
        serializedName: "customContextTag",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FileSourceInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FileSourceInfo",
    modelProperties: {
      shareId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "shareId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RoleSinkInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RoleSinkInfo",
    modelProperties: {
      roleId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "roleId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImageRepositoryCredential: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImageRepositoryCredential",
    modelProperties: {
      imageRepositoryUrl: {
        constraints: {
          MinLength: 1
        },
        serializedName: "imageRepositoryUrl",
        required: true,
        type: {
          name: "String"
        }
      },
      userName: {
        constraints: {
          MinLength: 1
        },
        serializedName: "userName",
        required: true,
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "password",
        type: {
          name: "Composite",
          className: "AsymmetricEncryptedSecret"
        }
      }
    }
  }
};

export const IoTDeviceInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IoTDeviceInfo",
    modelProperties: {
      deviceId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "deviceId",
        required: true,
        type: {
          name: "String"
        }
      },
      ioTHostHub: {
        constraints: {
          MinLength: 1
        },
        serializedName: "ioTHostHub",
        required: true,
        type: {
          name: "String"
        }
      },
      ioTHostHubId: {
        serializedName: "ioTHostHubId",
        nullable: true,
        type: {
          name: "String"
        }
      },
      authentication: {
        serializedName: "authentication",
        type: {
          name: "Composite",
          className: "Authentication"
        }
      }
    }
  }
};

export const IoTEdgeAgentInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IoTEdgeAgentInfo",
    modelProperties: {
      imageName: {
        constraints: {
          MinLength: 1
        },
        serializedName: "imageName",
        required: true,
        type: {
          name: "String"
        }
      },
      tag: {
        constraints: {
          MinLength: 1
        },
        serializedName: "tag",
        required: true,
        type: {
          name: "String"
        }
      },
      imageRepository: {
        serializedName: "imageRepository",
        type: {
          name: "Composite",
          className: "ImageRepositoryCredential"
        }
      }
    }
  }
};

export const IoTRoleProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IoTRoleProperties",
    modelProperties: {
      hostPlatform: {
        serializedName: "hostPlatform",
        required: true,
        type: {
          name: "String"
        }
      },
      ioTDeviceDetails: {
        serializedName: "ioTDeviceDetails",
        type: {
          name: "Composite",
          className: "IoTDeviceInfo"
        }
      },
      ioTEdgeDeviceDetails: {
        serializedName: "ioTEdgeDeviceDetails",
        type: {
          name: "Composite",
          className: "IoTDeviceInfo"
        }
      },
      shareMappings: {
        serializedName: "shareMappings",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MountPointMap"
            }
          }
        }
      },
      ioTEdgeAgentInfo: {
        serializedName: "ioTEdgeAgentInfo",
        type: {
          name: "Composite",
          className: "IoTEdgeAgentInfo"
        }
      },
      hostPlatformType: {
        serializedName: "hostPlatformType",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      computeResource: {
        serializedName: "computeResource",
        type: {
          name: "Composite",
          className: "ComputeResource"
        }
      },
      roleStatus: {
        serializedName: "roleStatus",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KubernetesClusterInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KubernetesClusterInfo",
    modelProperties: {
      etcdInfo: {
        serializedName: "etcdInfo",
        type: {
          name: "Composite",
          className: "EtcdInfo"
        }
      },
      nodes: {
        serializedName: "nodes",
        readOnly: true,
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NodeInfo"
            }
          }
        }
      },
      version: {
        constraints: {
          MinLength: 1
        },
        serializedName: "version",
        required: true,
        type: {
          name: "String"
        }
      },
      componentType: {
        serializedName: "componentType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NodeInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NodeInfo",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ipConfiguration: {
        serializedName: "ipConfiguration",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "KubernetesIPConfiguration"
            }
          }
        }
      },
      componentType: {
        serializedName: "componentType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KubernetesIPConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KubernetesIPConfiguration",
    modelProperties: {
      port: {
        serializedName: "port",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      ipAddress: {
        serializedName: "ipAddress",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KubernetesRoleProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KubernetesRoleProperties",
    modelProperties: {
      hostPlatform: {
        serializedName: "hostPlatform",
        required: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      hostPlatformType: {
        serializedName: "hostPlatformType",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      kubernetesClusterInfo: {
        serializedName: "kubernetesClusterInfo",
        type: {
          name: "Composite",
          className: "KubernetesClusterInfo"
        }
      },
      kubernetesRoleResources: {
        serializedName: "kubernetesRoleResources",
        type: {
          name: "Composite",
          className: "KubernetesRoleResources"
        }
      },
      roleStatus: {
        serializedName: "roleStatus",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KubernetesRoleResources: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KubernetesRoleResources",
    modelProperties: {
      storage: {
        serializedName: "storage",
        type: {
          name: "Composite",
          className: "KubernetesRoleStorage"
        }
      },
      compute: {
        serializedName: "compute",
        type: {
          name: "Composite",
          className: "KubernetesRoleCompute"
        }
      },
      network: {
        serializedName: "network",
        type: {
          name: "Composite",
          className: "KubernetesRoleNetwork"
        }
      }
    }
  }
};

export const KubernetesRoleStorage: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KubernetesRoleStorage",
    modelProperties: {
      storageClasses: {
        serializedName: "storageClasses",
        readOnly: true,
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "KubernetesRoleStorageClassInfo"
            }
          }
        }
      },
      endpoints: {
        serializedName: "endpoints",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MountPointMap"
            }
          }
        }
      }
    }
  }
};

export const KubernetesRoleStorageClassInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KubernetesRoleStorageClassInfo",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      posixCompliant: {
        serializedName: "posixCompliant",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KubernetesRoleCompute: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KubernetesRoleCompute",
    modelProperties: {
      vmProfile: {
        constraints: {
          MinLength: 1
        },
        serializedName: "vmProfile",
        required: true,
        type: {
          name: "String"
        }
      },
      memoryInBytes: {
        serializedName: "memoryInBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      processorCount: {
        serializedName: "processorCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      hugePage2M: {
        serializedName: "hugePage2M",
        readOnly: true,
        nullable: true,
        type: {
          name: "Number"
        }
      },
      hugePage1G: {
        serializedName: "hugePage1G",
        readOnly: true,
        nullable: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const KubernetesRoleNetwork: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KubernetesRoleNetwork",
    modelProperties: {
      cniConfig: {
        serializedName: "cniConfig",
        type: {
          name: "Composite",
          className: "CniConfig"
        }
      },
      loadBalancerConfig: {
        serializedName: "loadBalancerConfig",
        type: {
          name: "Composite",
          className: "LoadBalancerConfig"
        }
      }
    }
  }
};

export const LoadBalancerConfig: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LoadBalancerConfig",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      componentType: {
        serializedName: "componentType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MECRoleProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MECRoleProperties",
    modelProperties: {
      connectionString: {
        serializedName: "connectionString",
        type: {
          name: "Composite",
          className: "AsymmetricEncryptedSecret"
        }
      },
      controllerEndpoint: {
        serializedName: "controllerEndpoint",
        nullable: true,
        type: {
          name: "String"
        }
      },
      resourceUniqueId: {
        serializedName: "resourceUniqueId",
        nullable: true,
        type: {
          name: "String"
        }
      },
      roleStatus: {
        serializedName: "roleStatus",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PeriodicTimerProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PeriodicTimerProperties",
    modelProperties: {
      sourceInfo: {
        serializedName: "sourceInfo",
        type: {
          name: "Composite",
          className: "PeriodicTimerSourceInfo"
        }
      },
      sinkInfo: {
        serializedName: "sinkInfo",
        type: {
          name: "Composite",
          className: "RoleSinkInfo"
        }
      },
      customContextTag: {
        constraints: {
          MaxLength: 192
        },
        serializedName: "customContextTag",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PeriodicTimerSourceInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PeriodicTimerSourceInfo",
    modelProperties: {
      startTime: {
        serializedName: "startTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      schedule: {
        serializedName: "schedule",
        required: true,
        type: {
          name: "String"
        }
      },
      topic: {
        serializedName: "topic",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Addon: coreClient.CompositeMapper = {
  serializedName: "Addon",
  type: {
    name: "Composite",
    className: "Addon",
    uberParent: "ARMBaseModel",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      ...ARMBaseModel.type.modelProperties,
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const Alert: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Alert",
    modelProperties: {
      ...ARMBaseModel.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "AlertProperties"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const BandwidthSchedule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BandwidthSchedule",
    modelProperties: {
      ...ARMBaseModel.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "BandwidthScheduleProperties"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const Container: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Container",
    modelProperties: {
      ...ARMBaseModel.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ContainerProperties"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const DeviceCapacityInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeviceCapacityInfo",
    modelProperties: {
      ...ARMBaseModel.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "DeviceCapacityInfoProperties"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const DataBoxEdgeDevice: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataBoxEdgeDevice",
    modelProperties: {
      ...ARMBaseModel.type.modelProperties,
      location: {
        constraints: {
          MinLength: 1
        },
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        nullable: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      etag: {
        serializedName: "etag",
        nullable: true,
        type: {
          name: "String"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ResourceIdentity"
        }
      },
      kind: {
        serializedName: "kind",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "DataBoxEdgeDeviceProperties"
        }
      }
    }
  }
};

export const DataBoxEdgeDeviceExtendedInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataBoxEdgeDeviceExtendedInfo",
    modelProperties: {
      ...ARMBaseModel.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "DataBoxEdgeDeviceExtendedInfoProperties"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const NetworkSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkSettings",
    modelProperties: {
      ...ARMBaseModel.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "NetworkSettingsProperties"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const SecuritySettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecuritySettings",
    modelProperties: {
      ...ARMBaseModel.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "SecuritySettingsProperties"
        }
      }
    }
  }
};

export const UpdateSummary: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateSummary",
    modelProperties: {
      ...ARMBaseModel.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "UpdateSummaryProperties"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const DiagnosticProactiveLogCollectionSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiagnosticProactiveLogCollectionSettings",
    modelProperties: {
      ...ARMBaseModel.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ProactiveLogCollectionSettingsProperties"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const DiagnosticRemoteSupportSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiagnosticRemoteSupportSettings",
    modelProperties: {
      ...ARMBaseModel.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "DiagnosticRemoteSupportSettingsProperties"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const MarketplaceImageOffer: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MarketplaceImageOffer",
    modelProperties: {
      ...ARMBaseModel.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "MarketplaceImageOfferProperties"
        }
      }
    }
  }
};

export const MarketplaceImagePublisher: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MarketplaceImagePublisher",
    modelProperties: {
      ...ARMBaseModel.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "MarketplaceImagePublisherProperties"
        }
      }
    }
  }
};

export const MarketplaceImageSku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MarketplaceImageSku",
    modelProperties: {
      ...ARMBaseModel.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "MarketplaceImageSkuProperties"
        }
      }
    }
  }
};

export const MarketplaceImageVersion: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MarketplaceImageVersion",
    modelProperties: {
      ...ARMBaseModel.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "MarketplaceImageVersionProperties"
        }
      }
    }
  }
};

export const MonitoringMetricConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MonitoringMetricConfiguration",
    modelProperties: {
      ...ARMBaseModel.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "MonitoringMetricConfigurationProperties"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const Node: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Node",
    modelProperties: {
      ...ARMBaseModel.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "NodeProperties"
        }
      }
    }
  }
};

export const Order: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Order",
    modelProperties: {
      ...ARMBaseModel.type.modelProperties,
      kind: {
        serializedName: "kind",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "OrderProperties"
        }
      }
    }
  }
};

export const Role: coreClient.CompositeMapper = {
  serializedName: "Role",
  type: {
    name: "Composite",
    className: "Role",
    uberParent: "ARMBaseModel",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      ...ARMBaseModel.type.modelProperties,
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const Share: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Share",
    modelProperties: {
      ...ARMBaseModel.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ShareProperties"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const StorageAccountCredential: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageAccountCredential",
    modelProperties: {
      ...ARMBaseModel.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "StorageAccountCredentialProperties"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const StorageAccount: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageAccount",
    modelProperties: {
      ...ARMBaseModel.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "StorageAccountProperties"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const TriggerSupportPackageRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TriggerSupportPackageRequest",
    modelProperties: {
      ...ARMBaseModel.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "SupportPackageRequestProperties"
        }
      }
    }
  }
};

export const Trigger: coreClient.CompositeMapper = {
  serializedName: "Trigger",
  type: {
    name: "Composite",
    className: "Trigger",
    uberParent: "ARMBaseModel",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      ...ARMBaseModel.type.modelProperties,
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const User: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "User",
    modelProperties: {
      ...ARMBaseModel.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "UserProperties"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const ArcAddon: coreClient.CompositeMapper = {
  serializedName: "ArcForKubernetes",
  type: {
    name: "Composite",
    className: "ArcAddon",
    uberParent: "Addon",
    polymorphicDiscriminator: Addon.type.polymorphicDiscriminator,
    modelProperties: {
      ...Addon.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ArcAddonProperties"
        }
      }
    }
  }
};

export const ASEKubernetesRole: coreClient.CompositeMapper = {
  serializedName: "ASEKubernetes",
  type: {
    name: "Composite",
    className: "ASEKubernetesRole",
    uberParent: "Role",
    polymorphicDiscriminator: Role.type.polymorphicDiscriminator,
    modelProperties: {
      ...Role.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ASEKubernetesRoleProperties"
        }
      }
    }
  }
};

export const CloudEdgeManagementRole: coreClient.CompositeMapper = {
  serializedName: "CloudEdgeManagement",
  type: {
    name: "Composite",
    className: "CloudEdgeManagementRole",
    uberParent: "Role",
    polymorphicDiscriminator: Role.type.polymorphicDiscriminator,
    modelProperties: {
      ...Role.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "CloudEdgeManagementRoleProperties"
        }
      }
    }
  }
};

export const IoTRole: coreClient.CompositeMapper = {
  serializedName: "IOT",
  type: {
    name: "Composite",
    className: "IoTRole",
    uberParent: "Role",
    polymorphicDiscriminator: Role.type.polymorphicDiscriminator,
    modelProperties: {
      ...Role.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "IoTRoleProperties"
        }
      }
    }
  }
};

export const KubernetesRole: coreClient.CompositeMapper = {
  serializedName: "Kubernetes",
  type: {
    name: "Composite",
    className: "KubernetesRole",
    uberParent: "Role",
    polymorphicDiscriminator: Role.type.polymorphicDiscriminator,
    modelProperties: {
      ...Role.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "KubernetesRoleProperties"
        }
      }
    }
  }
};

export const MECRole: coreClient.CompositeMapper = {
  serializedName: "MEC",
  type: {
    name: "Composite",
    className: "MECRole",
    uberParent: "Role",
    polymorphicDiscriminator: Role.type.polymorphicDiscriminator,
    modelProperties: {
      ...Role.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "MECRoleProperties"
        }
      }
    }
  }
};

export const FileEventTrigger: coreClient.CompositeMapper = {
  serializedName: "FileEvent",
  type: {
    name: "Composite",
    className: "FileEventTrigger",
    uberParent: "Trigger",
    polymorphicDiscriminator: Trigger.type.polymorphicDiscriminator,
    modelProperties: {
      ...Trigger.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "FileTriggerProperties"
        }
      }
    }
  }
};

export const PeriodicTimerEventTrigger: coreClient.CompositeMapper = {
  serializedName: "PeriodicTimerEvent",
  type: {
    name: "Composite",
    className: "PeriodicTimerEventTrigger",
    uberParent: "Trigger",
    polymorphicDiscriminator: Trigger.type.polymorphicDiscriminator,
    modelProperties: {
      ...Trigger.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "PeriodicTimerProperties"
        }
      }
    }
  }
};

export let discriminators = {
  "ARMBaseModel.Addon": Addon,
  "ARMBaseModel.Role": Role,
  "ARMBaseModel.Trigger": Trigger,
  "Addon.ArcForKubernetes": ArcAddon,
  "Role.ASEKubernetes": ASEKubernetesRole,
  "Role.CloudEdgeManagement": CloudEdgeManagementRole,
  "Role.IOT": IoTRole,
  "Role.Kubernetes": KubernetesRole,
  "Role.MEC": MECRole,
  "Trigger.FileEvent": FileEventTrigger,
  "Trigger.PeriodicTimerEvent": PeriodicTimerEventTrigger
};
