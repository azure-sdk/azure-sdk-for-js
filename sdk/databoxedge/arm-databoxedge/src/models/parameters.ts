/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter
} from "@azure/core-client";
import {
  Addon as AddonMapper,
  BandwidthSchedule as BandwidthScheduleMapper,
  Container as ContainerMapper,
  DeviceCapacityRequestInfo as DeviceCapacityRequestInfoMapper,
  DataBoxEdgeDevice as DataBoxEdgeDeviceMapper,
  DataBoxEdgeDevicePatch as DataBoxEdgeDevicePatchMapper,
  DataBoxEdgeDeviceExtendedInfoPatch as DataBoxEdgeDeviceExtendedInfoPatchMapper,
  SecuritySettings as SecuritySettingsMapper,
  UploadCertificateRequest as UploadCertificateRequestMapper,
  DiagnosticProactiveLogCollectionSettings as DiagnosticProactiveLogCollectionSettingsMapper,
  DiagnosticRemoteSupportSettings as DiagnosticRemoteSupportSettingsMapper,
  MonitoringMetricConfiguration as MonitoringMetricConfigurationMapper,
  Order as OrderMapper,
  Role as RoleMapper,
  Share as ShareMapper,
  StorageAccountCredential as StorageAccountCredentialMapper,
  StorageAccount as StorageAccountMapper,
  TriggerSupportPackageRequest as TriggerSupportPackageRequestMapper,
  Trigger as TriggerMapper,
  User as UserMapper
} from "../models/mappers";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json, text/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const deviceName: OperationURLParameter = {
  parameterPath: "deviceName",
  mapper: {
    serializedName: "deviceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const roleName: OperationURLParameter = {
  parameterPath: "roleName",
  mapper: {
    serializedName: "roleName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2023-01-01-preview",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const addonName: OperationURLParameter = {
  parameterPath: "addonName",
  mapper: {
    serializedName: "addonName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json-patch+json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const body: OperationParameter = {
  parameterPath: ["options", "body"],
  mapper: AddonMapper
};

export const accept1: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const name: OperationURLParameter = {
  parameterPath: "name",
  mapper: {
    serializedName: "name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const body1: OperationParameter = {
  parameterPath: ["options", "body"],
  mapper: BandwidthScheduleMapper
};

export const storageAccountName: OperationURLParameter = {
  parameterPath: "storageAccountName",
  mapper: {
    serializedName: "storageAccountName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const containerName: OperationURLParameter = {
  parameterPath: "containerName",
  mapper: {
    serializedName: "containerName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const body2: OperationParameter = {
  parameterPath: ["options", "body"],
  mapper: ContainerMapper
};

export const body3: OperationParameter = {
  parameterPath: ["options", "body"],
  mapper: DeviceCapacityRequestInfoMapper
};

export const capacityName: OperationQueryParameter = {
  parameterPath: ["options", "capacityName"],
  mapper: {
    serializedName: "capacityName",
    type: {
      name: "String"
    }
  }
};

export const body4: OperationParameter = {
  parameterPath: ["options", "body"],
  mapper: DataBoxEdgeDeviceMapper
};

export const body5: OperationParameter = {
  parameterPath: ["options", "body"],
  mapper: DataBoxEdgeDevicePatchMapper
};

export const expand: OperationQueryParameter = {
  parameterPath: ["options", "expand"],
  mapper: {
    serializedName: "$expand",
    type: {
      name: "String"
    }
  }
};

export const body6: OperationParameter = {
  parameterPath: ["options", "body"],
  mapper: DataBoxEdgeDeviceExtendedInfoPatchMapper
};

export const body7: OperationParameter = {
  parameterPath: ["options", "body"],
  mapper: SecuritySettingsMapper
};

export const body8: OperationParameter = {
  parameterPath: ["options", "body"],
  mapper: UploadCertificateRequestMapper
};

export const body9: OperationParameter = {
  parameterPath: ["options", "body"],
  mapper: DiagnosticProactiveLogCollectionSettingsMapper
};

export const body10: OperationParameter = {
  parameterPath: ["options", "body"],
  mapper: DiagnosticRemoteSupportSettingsMapper
};

export const publisherName: OperationURLParameter = {
  parameterPath: "publisherName",
  mapper: {
    serializedName: "publisherName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const offerName: OperationURLParameter = {
  parameterPath: "offerName",
  mapper: {
    serializedName: "offerName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const skuName: OperationURLParameter = {
  parameterPath: "skuName",
  mapper: {
    serializedName: "skuName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const versionName: OperationURLParameter = {
  parameterPath: "versionName",
  mapper: {
    serializedName: "versionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const body11: OperationParameter = {
  parameterPath: ["options", "body"],
  mapper: MonitoringMetricConfigurationMapper
};

export const body12: OperationParameter = {
  parameterPath: ["options", "body"],
  mapper: OrderMapper
};

export const body13: OperationParameter = {
  parameterPath: ["options", "body"],
  mapper: RoleMapper
};

export const body14: OperationParameter = {
  parameterPath: ["options", "body"],
  mapper: ShareMapper
};

export const body15: OperationParameter = {
  parameterPath: ["options", "body"],
  mapper: StorageAccountCredentialMapper
};

export const body16: OperationParameter = {
  parameterPath: ["options", "body"],
  mapper: StorageAccountMapper
};

export const body17: OperationParameter = {
  parameterPath: ["options", "body"],
  mapper: TriggerSupportPackageRequestMapper
};

export const filter: OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const body18: OperationParameter = {
  parameterPath: ["options", "body"],
  mapper: TriggerMapper
};

export const body19: OperationParameter = {
  parameterPath: ["options", "body"],
  mapper: UserMapper
};
