/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { MarketplaceImageOfferOperations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { DataBoxEdgeManagementClient } from "../dataBoxEdgeManagementClient";
import {
  MarketplaceImageOffer,
  MarketplaceImageOfferListOffersNextOptionalParams,
  MarketplaceImageOfferListOffersOptionalParams,
  MarketplaceImageOfferListOffersResponse,
  MarketplaceImageOfferListOffersbyPublisherNextOptionalParams,
  MarketplaceImageOfferListOffersbyPublisherOptionalParams,
  MarketplaceImageOfferListOffersbyPublisherResponse,
  MarketplaceImageOfferListOffersNextResponse,
  MarketplaceImageOfferListOffersbyPublisherNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing MarketplaceImageOfferOperations operations. */
export class MarketplaceImageOfferOperationsImpl
  implements MarketplaceImageOfferOperations {
  private readonly client: DataBoxEdgeManagementClient;

  /**
   * Initialize a new instance of the class MarketplaceImageOfferOperations class.
   * @param client Reference to the service client
   */
  constructor(client: DataBoxEdgeManagementClient) {
    this.client = client;
  }

  /**
   * Returns list of all offers
   * @param deviceName
   * @param resourceGroupName The resource group name.
   * @param options The options parameters.
   */
  public listOffers(
    deviceName: string,
    resourceGroupName: string,
    options?: MarketplaceImageOfferListOffersOptionalParams
  ): PagedAsyncIterableIterator<MarketplaceImageOffer> {
    const iter = this.listOffersPagingAll(
      deviceName,
      resourceGroupName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listOffersPagingPage(
          deviceName,
          resourceGroupName,
          options,
          settings
        );
      }
    };
  }

  private async *listOffersPagingPage(
    deviceName: string,
    resourceGroupName: string,
    options?: MarketplaceImageOfferListOffersOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<MarketplaceImageOffer[]> {
    let result: MarketplaceImageOfferListOffersResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listOffers(deviceName, resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listOffersNext(
        deviceName,
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listOffersPagingAll(
    deviceName: string,
    resourceGroupName: string,
    options?: MarketplaceImageOfferListOffersOptionalParams
  ): AsyncIterableIterator<MarketplaceImageOffer> {
    for await (const page of this.listOffersPagingPage(
      deviceName,
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Returns List of Offers by Publisher name
   * @param deviceName
   * @param publisherName
   * @param resourceGroupName The resource group name.
   * @param options The options parameters.
   */
  public listOffersbyPublisher(
    deviceName: string,
    publisherName: string,
    resourceGroupName: string,
    options?: MarketplaceImageOfferListOffersbyPublisherOptionalParams
  ): PagedAsyncIterableIterator<MarketplaceImageOffer> {
    const iter = this.listOffersbyPublisherPagingAll(
      deviceName,
      publisherName,
      resourceGroupName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listOffersbyPublisherPagingPage(
          deviceName,
          publisherName,
          resourceGroupName,
          options,
          settings
        );
      }
    };
  }

  private async *listOffersbyPublisherPagingPage(
    deviceName: string,
    publisherName: string,
    resourceGroupName: string,
    options?: MarketplaceImageOfferListOffersbyPublisherOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<MarketplaceImageOffer[]> {
    let result: MarketplaceImageOfferListOffersbyPublisherResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listOffersbyPublisher(
        deviceName,
        publisherName,
        resourceGroupName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listOffersbyPublisherNext(
        deviceName,
        publisherName,
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listOffersbyPublisherPagingAll(
    deviceName: string,
    publisherName: string,
    resourceGroupName: string,
    options?: MarketplaceImageOfferListOffersbyPublisherOptionalParams
  ): AsyncIterableIterator<MarketplaceImageOffer> {
    for await (const page of this.listOffersbyPublisherPagingPage(
      deviceName,
      publisherName,
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Returns list of all offers
   * @param deviceName
   * @param resourceGroupName The resource group name.
   * @param options The options parameters.
   */
  private _listOffers(
    deviceName: string,
    resourceGroupName: string,
    options?: MarketplaceImageOfferListOffersOptionalParams
  ): Promise<MarketplaceImageOfferListOffersResponse> {
    return this.client.sendOperationRequest(
      { deviceName, resourceGroupName, options },
      listOffersOperationSpec
    );
  }

  /**
   * Returns List of Offers by Publisher name
   * @param deviceName
   * @param publisherName
   * @param resourceGroupName The resource group name.
   * @param options The options parameters.
   */
  private _listOffersbyPublisher(
    deviceName: string,
    publisherName: string,
    resourceGroupName: string,
    options?: MarketplaceImageOfferListOffersbyPublisherOptionalParams
  ): Promise<MarketplaceImageOfferListOffersbyPublisherResponse> {
    return this.client.sendOperationRequest(
      { deviceName, publisherName, resourceGroupName, options },
      listOffersbyPublisherOperationSpec
    );
  }

  /**
   * ListOffersNext
   * @param deviceName
   * @param resourceGroupName The resource group name.
   * @param nextLink The nextLink from the previous successful call to the ListOffers method.
   * @param options The options parameters.
   */
  private _listOffersNext(
    deviceName: string,
    resourceGroupName: string,
    nextLink: string,
    options?: MarketplaceImageOfferListOffersNextOptionalParams
  ): Promise<MarketplaceImageOfferListOffersNextResponse> {
    return this.client.sendOperationRequest(
      { deviceName, resourceGroupName, nextLink, options },
      listOffersNextOperationSpec
    );
  }

  /**
   * ListOffersbyPublisherNext
   * @param deviceName
   * @param publisherName
   * @param resourceGroupName The resource group name.
   * @param nextLink The nextLink from the previous successful call to the ListOffersbyPublisher method.
   * @param options The options parameters.
   */
  private _listOffersbyPublisherNext(
    deviceName: string,
    publisherName: string,
    resourceGroupName: string,
    nextLink: string,
    options?: MarketplaceImageOfferListOffersbyPublisherNextOptionalParams
  ): Promise<MarketplaceImageOfferListOffersbyPublisherNextResponse> {
    return this.client.sendOperationRequest(
      { deviceName, publisherName, resourceGroupName, nextLink, options },
      listOffersbyPublisherNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOffersOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/offers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MarketplaceImageOfferList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.deviceName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept1],
  serializer
};
const listOffersbyPublisherOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/publishers/{publisherName}/offers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MarketplaceImageOfferList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.deviceName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.publisherName
  ],
  headerParameters: [Parameters.accept1],
  serializer
};
const listOffersNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MarketplaceImageOfferList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.deviceName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept1],
  serializer
};
const listOffersbyPublisherNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MarketplaceImageOfferList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.deviceName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
    Parameters.publisherName
  ],
  headerParameters: [Parameters.accept1],
  serializer
};
