/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      actionType: {
        serializedName: "actionType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail"
            }
          }
        }
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const FileSystemResourceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FileSystemResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FileSystemResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MarketplaceDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MarketplaceDetails",
    modelProperties: {
      marketplaceSubscriptionId: {
        serializedName: "marketplaceSubscriptionId",
        required: true,
        type: {
          name: "String"
        }
      },
      planId: {
        serializedName: "planId",
        required: true,
        type: {
          name: "String"
        }
      },
      offerId: {
        serializedName: "offerId",
        required: true,
        type: {
          name: "String"
        }
      },
      publisherId: {
        serializedName: "publisherId",
        required: true,
        type: {
          name: "String"
        }
      },
      marketplaceSubscriptionStatus: {
        serializedName: "marketplaceSubscriptionStatus",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "PendingFulfillmentStart",
            "Subscribed",
            "Suspended",
            "Unsubscribed"
          ]
        }
      }
    }
  }
};

export const UserDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserDetails",
    modelProperties: {
      firstName: {
        serializedName: "firstName",
        type: {
          name: "String"
        }
      },
      lastName: {
        serializedName: "lastName",
        type: {
          name: "String"
        }
      },
      email: {
        serializedName: "email",
        required: true,
        type: {
          name: "String"
        }
      },
      alternateEmail: {
        serializedName: "alternateEmail",
        type: {
          name: "String"
        }
      },
      upn: {
        serializedName: "upn",
        required: true,
        type: {
          name: "String"
        }
      },
      address: {
        serializedName: "address",
        type: {
          name: "String"
        }
      },
      contactPhoneNumber: {
        serializedName: "contactPhoneNumber",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CompanyDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CompanyDetails",
    modelProperties: {
      companyName: {
        serializedName: "companyName",
        required: true,
        type: {
          name: "String"
        }
      },
      officeAddress: {
        serializedName: "officeAddress",
        type: {
          name: "String"
        }
      },
      country: {
        serializedName: "country",
        required: true,
        type: {
          name: "String"
        }
      },
      domain: {
        serializedName: "domain",
        required: true,
        type: {
          name: "String"
        }
      },
      business: {
        serializedName: "business",
        type: {
          name: "String"
        }
      },
      numberOfEmployees: {
        serializedName: "numberOfEmployees",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ManagedServiceIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedServiceIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "UserAssignedIdentity" }
          }
        }
      }
    }
  }
};

export const UserAssignedIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserAssignedIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      clientId: {
        serializedName: "clientId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const FileSystemResourceUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FileSystemResourceUpdate",
    modelProperties: {
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "FileSystemResourceUpdateProperties"
        }
      }
    }
  }
};

export const FileSystemResourceUpdateProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FileSystemResourceUpdateProperties",
    modelProperties: {
      subscriptionId: {
        serializedName: "subscriptionId",
        type: {
          name: "String"
        }
      },
      marketplaceDetails: {
        serializedName: "marketplaceDetails",
        type: {
          name: "Composite",
          className: "MarketplaceDetails"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        type: {
          name: "Enum",
          allowedValues: [
            "Accepted",
            "Creating",
            "Updating",
            "Deleting",
            "Succeeded",
            "Failed",
            "Canceled",
            "Deleted",
            "NotSpecified"
          ]
        }
      },
      userDetails: {
        serializedName: "userDetails",
        type: {
          name: "Composite",
          className: "UserDetails"
        }
      },
      companyDetails: {
        serializedName: "companyDetails",
        type: {
          name: "Composite",
          className: "CompanyDetails"
        }
      },
      delegatedSubnetId: {
        serializedName: "delegatedSubnetId",
        type: {
          name: "String"
        }
      },
      clusterLoginUrl: {
        serializedName: "clusterLoginUrl",
        type: {
          name: "String"
        }
      },
      privateIPs: {
        serializedName: "privateIPs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      adminPassword: {
        serializedName: "adminPassword",
        type: {
          name: "String"
        }
      },
      initialCapacity: {
        serializedName: "initialCapacity",
        type: {
          name: "Number"
        }
      },
      availabilityZone: {
        serializedName: "availabilityZone",
        type: {
          name: "String"
        }
      },
      storageSku: {
        serializedName: "storageSku",
        type: {
          name: "Enum",
          allowedValues: ["Standard", "Performance"]
        }
      }
    }
  }
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FileSystemResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FileSystemResource",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity"
        }
      },
      subscriptionId: {
        serializedName: "properties.subscriptionId",
        type: {
          name: "String"
        }
      },
      marketplaceDetails: {
        serializedName: "properties.marketplaceDetails",
        type: {
          name: "Composite",
          className: "MarketplaceDetails"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "Enum",
          allowedValues: [
            "Accepted",
            "Creating",
            "Updating",
            "Deleting",
            "Succeeded",
            "Failed",
            "Canceled",
            "Deleted",
            "NotSpecified"
          ]
        }
      },
      userDetails: {
        serializedName: "properties.userDetails",
        type: {
          name: "Composite",
          className: "UserDetails"
        }
      },
      companyDetails: {
        serializedName: "properties.companyDetails",
        type: {
          name: "Composite",
          className: "CompanyDetails"
        }
      },
      delegatedSubnetId: {
        serializedName: "properties.delegatedSubnetId",
        type: {
          name: "String"
        }
      },
      clusterLoginUrl: {
        serializedName: "properties.clusterLoginUrl",
        type: {
          name: "String"
        }
      },
      privateIPs: {
        serializedName: "properties.privateIPs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      adminPassword: {
        serializedName: "properties.adminPassword",
        type: {
          name: "String"
        }
      },
      initialCapacity: {
        serializedName: "properties.initialCapacity",
        type: {
          name: "Number"
        }
      },
      availabilityZone: {
        serializedName: "properties.availabilityZone",
        type: {
          name: "String"
        }
      },
      storageSku: {
        serializedName: "properties.storageSku",
        type: {
          name: "Enum",
          allowedValues: ["Standard", "Performance"]
        }
      }
    }
  }
};

export const FileSystemsCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FileSystemsCreateOrUpdateHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const FileSystemsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FileSystemsDeleteHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};
