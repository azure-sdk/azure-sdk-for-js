/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { OutboundRuleOperations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureMachineLearningServicesManagementClient } from "../azureMachineLearningServicesManagementClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  OutboundRuleBasicResource,
  OutboundRuleListNextOptionalParams,
  OutboundRuleListOptionalParams,
  OutboundRuleListResponse,
  OutboundRuleDeleteOptionalParams,
  OutboundRuleDeleteResponse,
  OutboundRuleGetOptionalParams,
  OutboundRuleGetResponse,
  OutboundRuleCreateOrUpdateOptionalParams,
  OutboundRuleCreateOrUpdateResponse,
  OutboundRuleListNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing OutboundRuleOperations operations. */
export class OutboundRuleOperationsImpl implements OutboundRuleOperations {
  private readonly client: AzureMachineLearningServicesManagementClient;

  /**
   * Initialize a new instance of the class OutboundRuleOperations class.
   * @param client Reference to the service client
   */
  constructor(client: AzureMachineLearningServicesManagementClient) {
    this.client = client;
  }

  /**
   * The GET API for retrieveing the list of outbound rules of the managed network associated with the
   * machine learning workspace.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName Azure Machine Learning Workspace Name
   * @param managedNetworkName Name of the managedNetwork associated with the workspace. Only 'default'
   *                           is supported.
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    workspaceName: string,
    managedNetworkName: string,
    options?: OutboundRuleListOptionalParams,
  ): PagedAsyncIterableIterator<OutboundRuleBasicResource> {
    const iter = this.listPagingAll(
      resourceGroupName,
      workspaceName,
      managedNetworkName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(
          resourceGroupName,
          workspaceName,
          managedNetworkName,
          options,
          settings,
        );
      },
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    workspaceName: string,
    managedNetworkName: string,
    options?: OutboundRuleListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<OutboundRuleBasicResource[]> {
    let result: OutboundRuleListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(
        resourceGroupName,
        workspaceName,
        managedNetworkName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        resourceGroupName,
        workspaceName,
        managedNetworkName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    workspaceName: string,
    managedNetworkName: string,
    options?: OutboundRuleListOptionalParams,
  ): AsyncIterableIterator<OutboundRuleBasicResource> {
    for await (const page of this.listPagingPage(
      resourceGroupName,
      workspaceName,
      managedNetworkName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * The DELETE API for deleting a single outbound rule of the managed network associated with the
   * machine learning workspace.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName Azure Machine Learning Workspace Name
   * @param managedNetworkName Name of the managedNetwork associated with the workspace. Only 'default'
   *                           is supported.
   * @param ruleName Name of the workspace managed network outbound rule
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    workspaceName: string,
    managedNetworkName: string,
    ruleName: string,
    options?: OutboundRuleDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<OutboundRuleDeleteResponse>,
      OutboundRuleDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<OutboundRuleDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        workspaceName,
        managedNetworkName,
        ruleName,
        options,
      },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<
      OutboundRuleDeleteResponse,
      OperationState<OutboundRuleDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * The DELETE API for deleting a single outbound rule of the managed network associated with the
   * machine learning workspace.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName Azure Machine Learning Workspace Name
   * @param managedNetworkName Name of the managedNetwork associated with the workspace. Only 'default'
   *                           is supported.
   * @param ruleName Name of the workspace managed network outbound rule
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    workspaceName: string,
    managedNetworkName: string,
    ruleName: string,
    options?: OutboundRuleDeleteOptionalParams,
  ): Promise<OutboundRuleDeleteResponse> {
    const poller = await this.beginDelete(
      resourceGroupName,
      workspaceName,
      managedNetworkName,
      ruleName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * The GET API for retrieveing a single outbound rule of the managed network associated with the
   * machine learning workspace.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName Azure Machine Learning Workspace Name
   * @param managedNetworkName Name of the managedNetwork associated with the workspace. Only 'default'
   *                           is supported.
   * @param ruleName Name of the workspace managed network outbound rule
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    workspaceName: string,
    managedNetworkName: string,
    ruleName: string,
    options?: OutboundRuleGetOptionalParams,
  ): Promise<OutboundRuleGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        managedNetworkName,
        ruleName,
        options,
      },
      getOperationSpec,
    );
  }

  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName Azure Machine Learning Workspace Name
   * @param managedNetworkName Name of the managedNetwork associated with the workspace. Only 'default'
   *                           is supported.
   * @param ruleName Name of the workspace managed network outbound rule
   * @param body
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    workspaceName: string,
    managedNetworkName: string,
    ruleName: string,
    body: OutboundRuleBasicResource,
    options?: OutboundRuleCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<OutboundRuleCreateOrUpdateResponse>,
      OutboundRuleCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<OutboundRuleCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        workspaceName,
        managedNetworkName,
        ruleName,
        body,
        options,
      },
      spec: createOrUpdateOperationSpec,
    });
    const poller = await createHttpPoller<
      OutboundRuleCreateOrUpdateResponse,
      OperationState<OutboundRuleCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName Azure Machine Learning Workspace Name
   * @param managedNetworkName Name of the managedNetwork associated with the workspace. Only 'default'
   *                           is supported.
   * @param ruleName Name of the workspace managed network outbound rule
   * @param body
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    workspaceName: string,
    managedNetworkName: string,
    ruleName: string,
    body: OutboundRuleBasicResource,
    options?: OutboundRuleCreateOrUpdateOptionalParams,
  ): Promise<OutboundRuleCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      workspaceName,
      managedNetworkName,
      ruleName,
      body,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * The GET API for retrieveing the list of outbound rules of the managed network associated with the
   * machine learning workspace.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName Azure Machine Learning Workspace Name
   * @param managedNetworkName Name of the managedNetwork associated with the workspace. Only 'default'
   *                           is supported.
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    workspaceName: string,
    managedNetworkName: string,
    options?: OutboundRuleListOptionalParams,
  ): Promise<OutboundRuleListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workspaceName, managedNetworkName, options },
      listOperationSpec,
    );
  }

  /**
   * ListNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName Azure Machine Learning Workspace Name
   * @param managedNetworkName Name of the managedNetwork associated with the workspace. Only 'default'
   *                           is supported.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    workspaceName: string,
    managedNetworkName: string,
    nextLink: string,
    options?: OutboundRuleListNextOptionalParams,
  ): Promise<OutboundRuleListNextResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        managedNetworkName,
        nextLink,
        options,
      },
      listNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/managedNetworks/{managedNetworkName}/outboundRules/{ruleName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.OutboundRuleDeleteHeaders,
    },
    201: {
      headersMapper: Mappers.OutboundRuleDeleteHeaders,
    },
    202: {
      headersMapper: Mappers.OutboundRuleDeleteHeaders,
    },
    204: {
      headersMapper: Mappers.OutboundRuleDeleteHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.ruleName,
    Parameters.managedNetworkName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/managedNetworks/{managedNetworkName}/outboundRules/{ruleName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OutboundRuleBasicResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.ruleName,
    Parameters.managedNetworkName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/managedNetworks/{managedNetworkName}/outboundRules/{ruleName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.OutboundRuleBasicResource,
    },
    201: {
      bodyMapper: Mappers.OutboundRuleBasicResource,
    },
    202: {
      bodyMapper: Mappers.OutboundRuleBasicResource,
    },
    204: {
      bodyMapper: Mappers.OutboundRuleBasicResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body57,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.ruleName,
    Parameters.managedNetworkName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/managedNetworks/{managedNetworkName}/outboundRules",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OutboundRuleListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.managedNetworkName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OutboundRuleListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.managedNetworkName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
