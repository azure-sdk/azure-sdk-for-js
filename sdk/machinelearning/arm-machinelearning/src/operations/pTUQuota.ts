/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { PTUQuota } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { AzureMachineLearningServicesManagementClient } from "../azureMachineLearningServicesManagementClient.js";
import {
  AvailableQuota,
  PTUQuotaListAvailableNextOptionalParams,
  PTUQuotaListAvailableOptionalParams,
  PTUQuotaListAvailableResponse,
  UsageAndQuotaDetails,
  PTUQuotaListNextOptionalParams,
  PTUQuotaListOptionalParams,
  PTUQuotaListResponse,
  PTUQuotaGetAvailableOptionalParams,
  PTUQuotaGetAvailableResponse,
  PTUQuotaListAvailableNextResponse,
  PTUQuotaListNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing PTUQuota operations. */
export class PTUQuotaImpl implements PTUQuota {
  private readonly client: AzureMachineLearningServicesManagementClient;

  /**
   * Initialize a new instance of the class PTUQuota class.
   * @param client Reference to the service client
   */
  constructor(client: AzureMachineLearningServicesManagementClient) {
    this.client = client;
  }

  /**
   * List available MaaS PTU quota.
   * @param location The name of Azure region.
   * @param options The options parameters.
   */
  public listAvailable(
    location: string,
    options?: PTUQuotaListAvailableOptionalParams,
  ): PagedAsyncIterableIterator<AvailableQuota> {
    const iter = this.listAvailablePagingAll(location, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listAvailablePagingPage(location, options, settings);
      },
    };
  }

  private async *listAvailablePagingPage(
    location: string,
    options?: PTUQuotaListAvailableOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<AvailableQuota[]> {
    let result: PTUQuotaListAvailableResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listAvailable(location, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listAvailableNext(location, continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listAvailablePagingAll(
    location: string,
    options?: PTUQuotaListAvailableOptionalParams,
  ): AsyncIterableIterator<AvailableQuota> {
    for await (const page of this.listAvailablePagingPage(location, options)) {
      yield* page;
    }
  }

  /**
   * List MaaS PTU usage and quota.
   * @param location The name of Azure region.
   * @param options The options parameters.
   */
  public list(
    location: string,
    options?: PTUQuotaListOptionalParams,
  ): PagedAsyncIterableIterator<UsageAndQuotaDetails> {
    const iter = this.listPagingAll(location, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(location, options, settings);
      },
    };
  }

  private async *listPagingPage(
    location: string,
    options?: PTUQuotaListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<UsageAndQuotaDetails[]> {
    let result: PTUQuotaListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(location, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(location, continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    location: string,
    options?: PTUQuotaListOptionalParams,
  ): AsyncIterableIterator<UsageAndQuotaDetails> {
    for await (const page of this.listPagingPage(location, options)) {
      yield* page;
    }
  }

  /**
   * List available MaaS PTU quota.
   * @param location The name of Azure region.
   * @param options The options parameters.
   */
  private _listAvailable(
    location: string,
    options?: PTUQuotaListAvailableOptionalParams,
  ): Promise<PTUQuotaListAvailableResponse> {
    return this.client.sendOperationRequest({ location, options }, listAvailableOperationSpec);
  }

  /**
   * Get available MaaS PTU quota.
   * @param location The name of Azure region.
   * @param options The options parameters.
   */
  getAvailable(
    location: string,
    options?: PTUQuotaGetAvailableOptionalParams,
  ): Promise<PTUQuotaGetAvailableResponse> {
    return this.client.sendOperationRequest({ location, options }, getAvailableOperationSpec);
  }

  /**
   * List MaaS PTU usage and quota.
   * @param location The name of Azure region.
   * @param options The options parameters.
   */
  private _list(
    location: string,
    options?: PTUQuotaListOptionalParams,
  ): Promise<PTUQuotaListResponse> {
    return this.client.sendOperationRequest({ location, options }, listOperationSpec);
  }

  /**
   * ListAvailableNext
   * @param location The name of Azure region.
   * @param nextLink The nextLink from the previous successful call to the ListAvailable method.
   * @param options The options parameters.
   */
  private _listAvailableNext(
    location: string,
    nextLink: string,
    options?: PTUQuotaListAvailableNextOptionalParams,
  ): Promise<PTUQuotaListAvailableNextResponse> {
    return this.client.sendOperationRequest(
      { location, nextLink, options },
      listAvailableNextOperationSpec,
    );
  }

  /**
   * ListNext
   * @param location The name of Azure region.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    location: string,
    nextLink: string,
    options?: PTUQuotaListNextOptionalParams,
  ): Promise<PTUQuotaListNextResponse> {
    return this.client.sendOperationRequest({ location, nextLink, options }, listNextOperationSpec);
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listAvailableOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.MachineLearningServices/locations/{location}/availableQuota",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AvailableQuotaArmPaginatedResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion, Parameters.skip],
  urlParameters: [Parameters.$host, Parameters.subscriptionId, Parameters.location1],
  headerParameters: [Parameters.accept],
  serializer,
};
const getAvailableOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.MachineLearningServices/locations/{location}/availableQuota/default",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AvailableQuota,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId, Parameters.location1],
  headerParameters: [Parameters.accept],
  serializer,
};
const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.MachineLearningServices/locations/{location}/quotaAndUsage",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.UsageAndQuotaDetailsArmPaginatedResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion, Parameters.skip],
  urlParameters: [Parameters.$host, Parameters.subscriptionId, Parameters.location1],
  headerParameters: [Parameters.accept],
  serializer,
};
const listAvailableNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AvailableQuotaArmPaginatedResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.location1,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.UsageAndQuotaDetailsArmPaginatedResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.location1,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
