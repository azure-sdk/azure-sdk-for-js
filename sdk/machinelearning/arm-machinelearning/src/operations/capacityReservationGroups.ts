/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { CapacityReservationGroups } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureMachineLearningServices } from "../azureMachineLearningServices";
import {
  CapacityReservationGroup,
  CapacityReservationGroupsCapacityReservationGroupsListBySubscriptionNextOptionalParams,
  CapacityReservationGroupsCapacityReservationGroupsListBySubscriptionOptionalParams,
  CapacityReservationGroupsCapacityReservationGroupsListBySubscriptionResponse,
  CapacityReservationGroupsListNextOptionalParams,
  CapacityReservationGroupsListOptionalParams,
  CapacityReservationGroupsListResponse,
  CapacityReservationGroupsDeleteOptionalParams,
  CapacityReservationGroupsGetOptionalParams,
  CapacityReservationGroupsGetResponse,
  PartialMinimalTrackedResourceWithSkuAndIdentity,
  CapacityReservationGroupsUpdateOptionalParams,
  CapacityReservationGroupsCreateOrUpdateOptionalParams,
  CapacityReservationGroupsCreateOrUpdateResponse,
  CapacityReservationGroupsCapacityReservationGroupsListBySubscriptionNextResponse,
  CapacityReservationGroupsListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing CapacityReservationGroups operations. */
export class CapacityReservationGroupsImpl
  implements CapacityReservationGroups {
  private readonly client: AzureMachineLearningServices;

  /**
   * Initialize a new instance of the class CapacityReservationGroups class.
   * @param client Reference to the service client
   */
  constructor(client: AzureMachineLearningServices) {
    this.client = client;
  }

  /** @param options The options parameters. */
  public listCapacityReservationGroupsListBySubscription(
    options?: CapacityReservationGroupsCapacityReservationGroupsListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<CapacityReservationGroup> {
    const iter = this.capacityReservationGroupsListBySubscriptionPagingAll(
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.capacityReservationGroupsListBySubscriptionPagingPage(
          options,
          settings
        );
      }
    };
  }

  private async *capacityReservationGroupsListBySubscriptionPagingPage(
    options?: CapacityReservationGroupsCapacityReservationGroupsListBySubscriptionOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<CapacityReservationGroup[]> {
    let result: CapacityReservationGroupsCapacityReservationGroupsListBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._capacityReservationGroupsListBySubscription(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._capacityReservationGroupsListBySubscriptionNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *capacityReservationGroupsListBySubscriptionPagingAll(
    options?: CapacityReservationGroupsCapacityReservationGroupsListBySubscriptionOptionalParams
  ): AsyncIterableIterator<CapacityReservationGroup> {
    for await (const page of this.capacityReservationGroupsListBySubscriptionPagingPage(
      options
    )) {
      yield* page;
    }
  }

  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    options?: CapacityReservationGroupsListOptionalParams
  ): PagedAsyncIterableIterator<CapacityReservationGroup> {
    const iter = this.listPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(resourceGroupName, options, settings);
      }
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    options?: CapacityReservationGroupsListOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<CapacityReservationGroup[]> {
    let result: CapacityReservationGroupsListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    options?: CapacityReservationGroupsListOptionalParams
  ): AsyncIterableIterator<CapacityReservationGroup> {
    for await (const page of this.listPagingPage(resourceGroupName, options)) {
      yield* page;
    }
  }

  /** @param options The options parameters. */
  private _capacityReservationGroupsListBySubscription(
    options?: CapacityReservationGroupsCapacityReservationGroupsListBySubscriptionOptionalParams
  ): Promise<
    CapacityReservationGroupsCapacityReservationGroupsListBySubscriptionResponse
  > {
    return this.client.sendOperationRequest(
      { options },
      capacityReservationGroupsListBySubscriptionOperationSpec
    );
  }

  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    options?: CapacityReservationGroupsListOptionalParams
  ): Promise<CapacityReservationGroupsListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listOperationSpec
    );
  }

  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param groupId
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    groupId: string,
    options?: CapacityReservationGroupsDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, groupId, options },
      deleteOperationSpec
    );
  }

  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param groupId
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    groupId: string,
    options?: CapacityReservationGroupsGetOptionalParams
  ): Promise<CapacityReservationGroupsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, groupId, options },
      getOperationSpec
    );
  }

  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param groupId
   * @param body Strictly used in update requests.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    groupId: string,
    body: PartialMinimalTrackedResourceWithSkuAndIdentity,
    options?: CapacityReservationGroupsUpdateOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, groupId, body, options },
      updateOperationSpec
    );
  }

  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param groupId
   * @param body
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    groupId: string,
    body: CapacityReservationGroup,
    options?: CapacityReservationGroupsCreateOrUpdateOptionalParams
  ): Promise<CapacityReservationGroupsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, groupId, body, options },
      createOrUpdateOperationSpec
    );
  }

  /**
   * CapacityReservationGroupsListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 CapacityReservationGroupsListBySubscription method.
   * @param options The options parameters.
   */
  private _capacityReservationGroupsListBySubscriptionNext(
    nextLink: string,
    options?: CapacityReservationGroupsCapacityReservationGroupsListBySubscriptionNextOptionalParams
  ): Promise<
    CapacityReservationGroupsCapacityReservationGroupsListBySubscriptionNextResponse
  > {
    return this.client.sendOperationRequest(
      { nextLink, options },
      capacityReservationGroupsListBySubscriptionNextOperationSpec
    );
  }

  /**
   * ListNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    nextLink: string,
    options?: CapacityReservationGroupsListNextOptionalParams
  ): Promise<CapacityReservationGroupsListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const capacityReservationGroupsListBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.MachineLearningServices/capacityReserverationGroups",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper:
        Mappers.CapacityReservationGroupTrackedResourceArmPaginatedResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.skip],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/capacityReserverationGroups",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper:
        Mappers.CapacityReservationGroupTrackedResourceArmPaginatedResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.skip],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/capacityReserverationGroups/{groupId}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.groupId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/capacityReserverationGroups/{groupId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CapacityReservationGroup
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.groupId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/capacityReserverationGroups/{groupId}",
  httpMethod: "PATCH",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.groupId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/capacityReserverationGroups/{groupId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.CapacityReservationGroup
    },
    201: {
      bodyMapper: Mappers.CapacityReservationGroup
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.groupId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const capacityReservationGroupsListBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper:
        Mappers.CapacityReservationGroupTrackedResourceArmPaginatedResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper:
        Mappers.CapacityReservationGroupTrackedResourceArmPaginatedResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
