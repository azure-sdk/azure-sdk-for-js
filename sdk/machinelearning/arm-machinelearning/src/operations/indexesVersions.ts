/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { IndexesVersions } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureMachineLearningServices } from "../azureMachineLearningServices";
import {
  IndexVersion,
  IndexesVersionsListByIndexNextOptionalParams,
  IndexesVersionsListByIndexOptionalParams,
  IndexesVersionsListByIndexResponse,
  IndexesVersionsGetOptionalParams,
  IndexesVersionsGetResponse,
  IndexesVersionsCreateOrUpdateOptionalParams,
  IndexesVersionsCreateOrUpdateResponse,
  IndexesVersionsListByIndexNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing IndexesVersions operations. */
export class IndexesVersionsImpl implements IndexesVersions {
  private readonly client: AzureMachineLearningServices;

  /**
   * Initialize a new instance of the class IndexesVersions class.
   * @param client Reference to the service client
   */
  constructor(client: AzureMachineLearningServices) {
    this.client = client;
  }

  /**
   * List IndexVersion resources by Index
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName Name of the workspace
   * @param indexName Name of the index
   * @param options The options parameters.
   */
  public listByIndex(
    resourceGroupName: string,
    workspaceName: string,
    indexName: string,
    options?: IndexesVersionsListByIndexOptionalParams
  ): PagedAsyncIterableIterator<IndexVersion> {
    const iter = this.listByIndexPagingAll(
      resourceGroupName,
      workspaceName,
      indexName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByIndexPagingPage(
          resourceGroupName,
          workspaceName,
          indexName,
          options,
          settings
        );
      }
    };
  }

  private async *listByIndexPagingPage(
    resourceGroupName: string,
    workspaceName: string,
    indexName: string,
    options?: IndexesVersionsListByIndexOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<IndexVersion[]> {
    let result: IndexesVersionsListByIndexResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByIndex(
        resourceGroupName,
        workspaceName,
        indexName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByIndexNext(
        resourceGroupName,
        workspaceName,
        indexName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByIndexPagingAll(
    resourceGroupName: string,
    workspaceName: string,
    indexName: string,
    options?: IndexesVersionsListByIndexOptionalParams
  ): AsyncIterableIterator<IndexVersion> {
    for await (const page of this.listByIndexPagingPage(
      resourceGroupName,
      workspaceName,
      indexName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List IndexVersion resources by Index
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName Name of the workspace
   * @param indexName Name of the index
   * @param options The options parameters.
   */
  private _listByIndex(
    resourceGroupName: string,
    workspaceName: string,
    indexName: string,
    options?: IndexesVersionsListByIndexOptionalParams
  ): Promise<IndexesVersionsListByIndexResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workspaceName, indexName, options },
      listByIndexOperationSpec
    );
  }

  /**
   * Get a Index.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName Name of the workspace
   * @param indexName Name of the index
   * @param versionName version of the index
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    workspaceName: string,
    indexName: string,
    versionName: string,
    options?: IndexesVersionsGetOptionalParams
  ): Promise<IndexesVersionsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workspaceName, indexName, versionName, options },
      getOperationSpec
    );
  }

  /**
   * Create a Index.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName Name of the workspace
   * @param indexName Name of the index
   * @param versionName version of the index
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    workspaceName: string,
    indexName: string,
    versionName: string,
    resource: IndexVersion,
    options?: IndexesVersionsCreateOrUpdateOptionalParams
  ): Promise<IndexesVersionsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        indexName,
        versionName,
        resource,
        options
      },
      createOrUpdateOperationSpec
    );
  }

  /**
   * ListByIndexNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName Name of the workspace
   * @param indexName Name of the index
   * @param nextLink The nextLink from the previous successful call to the ListByIndex method.
   * @param options The options parameters.
   */
  private _listByIndexNext(
    resourceGroupName: string,
    workspaceName: string,
    indexName: string,
    nextLink: string,
    options?: IndexesVersionsListByIndexNextOptionalParams
  ): Promise<IndexesVersionsListByIndexNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workspaceName, indexName, nextLink, options },
      listByIndexNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByIndexOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/indexes/{indexName}/versions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IndexVersionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.label,
    Parameters.listViewType2,
    Parameters.top1,
    Parameters.skip1,
    Parameters.maxpagesize
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.indexName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/indexes/{indexName}/versions/{versionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IndexVersion
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.indexName,
    Parameters.versionName1
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/indexes/{indexName}/versions/{versionName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.IndexVersion
    },
    201: {
      bodyMapper: Mappers.IndexVersion
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.resource,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.indexName,
    Parameters.versionName1
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listByIndexNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IndexVersionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.indexName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
