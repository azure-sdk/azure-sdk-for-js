/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter
} from "@azure/core-client";
import {
  Workspace as WorkspaceMapper,
  WorkspaceUpdateParameters as WorkspaceUpdateParametersMapper,
  DiagnoseWorkspaceParameters as DiagnoseWorkspaceParametersMapper,
  QuotaUpdateParameters as QuotaUpdateParametersMapper,
  ComputeResource as ComputeResourceMapper,
  ClusterUpdateParameters as ClusterUpdateParametersMapper,
  IdleShutdownSetting as IdleShutdownSettingMapper,
  PrivateEndpointConnection as PrivateEndpointConnectionMapper,
  WorkspaceConnectionPropertiesV2BasicResource as WorkspaceConnectionPropertiesV2BasicResourceMapper,
  OutboundRuleBasicResource as OutboundRuleBasicResourceMapper,
  ManagedNetworkProvisionOptions as ManagedNetworkProvisionOptionsMapper,
  CodeContainer as CodeContainerMapper,
  CodeVersion as CodeVersionMapper,
  ComponentContainer as ComponentContainerMapper,
  ComponentVersion as ComponentVersionMapper,
  DataContainer as DataContainerMapper,
  DataVersionBase as DataVersionBaseMapper,
  EnvironmentContainer as EnvironmentContainerMapper,
  EnvironmentVersion as EnvironmentVersionMapper,
  ModelContainer as ModelContainerMapper,
  ModelVersion as ModelVersionMapper,
  PartialMinimalTrackedResourceWithIdentity as PartialMinimalTrackedResourceWithIdentityMapper,
  BatchEndpoint as BatchEndpointMapper,
  PartialBatchDeploymentPartialMinimalTrackedResourceWithProperties as PartialBatchDeploymentPartialMinimalTrackedResourceWithPropertiesMapper,
  BatchDeployment as BatchDeploymentMapper,
  Datastore as DatastoreMapper,
  FeaturesetContainer as FeaturesetContainerMapper,
  FeaturesetVersion as FeaturesetVersionMapper,
  FeaturesetVersionBackfillRequest as FeaturesetVersionBackfillRequestMapper,
  GetFeatureRequest as GetFeatureRequestMapper,
  FeaturestoreEntityContainer as FeaturestoreEntityContainerMapper,
  FeaturestoreEntityVersion as FeaturestoreEntityVersionMapper,
  JobBase as JobBaseMapper,
  LabelingJob as LabelingJobMapper,
  ExportSummary as ExportSummaryMapper,
  PackageRequest as PackageRequestMapper,
  OnlineEndpoint as OnlineEndpointMapper,
  RegenerateEndpointKeysRequest as RegenerateEndpointKeysRequestMapper,
  PartialMinimalTrackedResourceWithSku as PartialMinimalTrackedResourceWithSkuMapper,
  OnlineDeployment as OnlineDeploymentMapper,
  DeploymentLogsRequest as DeploymentLogsRequestMapper,
  Schedule as ScheduleMapper,
  PartialRegistryPartialTrackedResource as PartialRegistryPartialTrackedResourceMapper,
  Registry as RegistryMapper
} from "../models/mappers";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2023-04-01-preview",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    constraints: {
      MinLength: 1
    },
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    constraints: {
      MaxLength: 90,
      MinLength: 1
    },
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const workspaceName: OperationURLParameter = {
  parameterPath: "workspaceName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_-]{2,32}$")
    },
    serializedName: "workspaceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const parameters: OperationParameter = {
  parameterPath: "parameters",
  mapper: WorkspaceMapper
};

export const forceToPurge: OperationQueryParameter = {
  parameterPath: ["options", "forceToPurge"],
  mapper: {
    serializedName: "forceToPurge",
    type: {
      name: "Boolean"
    }
  }
};

export const parameters1: OperationParameter = {
  parameterPath: "parameters",
  mapper: WorkspaceUpdateParametersMapper
};

export const skip: OperationQueryParameter = {
  parameterPath: ["options", "skip"],
  mapper: {
    serializedName: "$skip",
    type: {
      name: "String"
    }
  }
};

export const kind: OperationQueryParameter = {
  parameterPath: ["options", "kind"],
  mapper: {
    serializedName: "kind",
    type: {
      name: "String"
    }
  }
};

export const parameters2: OperationParameter = {
  parameterPath: ["options", "parameters"],
  mapper: DiagnoseWorkspaceParametersMapper
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const location: OperationURLParameter = {
  parameterPath: "location",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[-\\w\\._]+$")
    },
    serializedName: "location",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters3: OperationParameter = {
  parameterPath: "parameters",
  mapper: QuotaUpdateParametersMapper
};

export const computeName: OperationURLParameter = {
  parameterPath: "computeName",
  mapper: {
    serializedName: "computeName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters4: OperationParameter = {
  parameterPath: "parameters",
  mapper: ComputeResourceMapper
};

export const parameters5: OperationParameter = {
  parameterPath: "parameters",
  mapper: ClusterUpdateParametersMapper
};

export const underlyingResourceAction: OperationQueryParameter = {
  parameterPath: "underlyingResourceAction",
  mapper: {
    serializedName: "underlyingResourceAction",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const customServices: OperationParameter = {
  parameterPath: "customServices",
  mapper: {
    serializedName: "customServices",
    required: true,
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "Composite",
          className: "CustomService"
        }
      }
    }
  }
};

export const parameters6: OperationParameter = {
  parameterPath: "parameters",
  mapper: IdleShutdownSettingMapper
};

export const privateEndpointConnectionName: OperationURLParameter = {
  parameterPath: "privateEndpointConnectionName",
  mapper: {
    serializedName: "privateEndpointConnectionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const properties: OperationParameter = {
  parameterPath: "properties",
  mapper: PrivateEndpointConnectionMapper
};

export const parameters7: OperationParameter = {
  parameterPath: "parameters",
  mapper: WorkspaceConnectionPropertiesV2BasicResourceMapper
};

export const connectionName: OperationURLParameter = {
  parameterPath: "connectionName",
  mapper: {
    serializedName: "connectionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const target: OperationQueryParameter = {
  parameterPath: ["options", "target"],
  mapper: {
    serializedName: "target",
    type: {
      name: "String"
    }
  }
};

export const category: OperationQueryParameter = {
  parameterPath: ["options", "category"],
  mapper: {
    serializedName: "category",
    type: {
      name: "String"
    }
  }
};

export const ruleName: OperationURLParameter = {
  parameterPath: "ruleName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_-]{2,32}$")
    },
    serializedName: "ruleName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters8: OperationParameter = {
  parameterPath: "parameters",
  mapper: OutboundRuleBasicResourceMapper
};

export const parameters9: OperationParameter = {
  parameterPath: ["options", "parameters"],
  mapper: ManagedNetworkProvisionOptionsMapper
};

export const registryName: OperationURLParameter = {
  parameterPath: "registryName",
  mapper: {
    serializedName: "registryName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const codeName: OperationURLParameter = {
  parameterPath: "codeName",
  mapper: {
    serializedName: "codeName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const body: OperationParameter = {
  parameterPath: "body",
  mapper: CodeContainerMapper
};

export const codeName1: OperationURLParameter = {
  parameterPath: "codeName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9\\-_]{0,254}$")
    },
    serializedName: "codeName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const orderBy: OperationQueryParameter = {
  parameterPath: ["options", "orderBy"],
  mapper: {
    serializedName: "$orderBy",
    type: {
      name: "String"
    }
  }
};

export const top: OperationQueryParameter = {
  parameterPath: ["options", "top"],
  mapper: {
    serializedName: "$top",
    type: {
      name: "Number"
    }
  }
};

export const version: OperationURLParameter = {
  parameterPath: "version",
  mapper: {
    serializedName: "version",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const body1: OperationParameter = {
  parameterPath: "body",
  mapper: CodeVersionMapper
};

export const componentName: OperationURLParameter = {
  parameterPath: "componentName",
  mapper: {
    serializedName: "componentName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const body2: OperationParameter = {
  parameterPath: "body",
  mapper: ComponentContainerMapper
};

export const componentName1: OperationURLParameter = {
  parameterPath: "componentName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9\\-_]{0,254}$")
    },
    serializedName: "componentName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const body3: OperationParameter = {
  parameterPath: "body",
  mapper: ComponentVersionMapper
};

export const registryName1: OperationURLParameter = {
  parameterPath: "registryName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_-]{2,32}$")
    },
    serializedName: "registryName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const listViewType: OperationQueryParameter = {
  parameterPath: ["options", "listViewType"],
  mapper: {
    serializedName: "listViewType",
    type: {
      name: "String"
    }
  }
};

export const name: OperationURLParameter = {
  parameterPath: "name",
  mapper: {
    serializedName: "name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const body4: OperationParameter = {
  parameterPath: "body",
  mapper: DataContainerMapper
};

export const name1: OperationURLParameter = {
  parameterPath: "name",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9\\-_]{0,254}$")
    },
    serializedName: "name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const tags: OperationQueryParameter = {
  parameterPath: ["options", "tags"],
  mapper: {
    serializedName: "$tags",
    type: {
      name: "String"
    }
  }
};

export const body5: OperationParameter = {
  parameterPath: "body",
  mapper: DataVersionBaseMapper
};

export const environmentName: OperationURLParameter = {
  parameterPath: "environmentName",
  mapper: {
    serializedName: "environmentName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const body6: OperationParameter = {
  parameterPath: "body",
  mapper: EnvironmentContainerMapper
};

export const environmentName1: OperationURLParameter = {
  parameterPath: "environmentName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9\\-_]{0,254}$")
    },
    serializedName: "environmentName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const body7: OperationParameter = {
  parameterPath: "body",
  mapper: EnvironmentVersionMapper
};

export const modelName: OperationURLParameter = {
  parameterPath: "modelName",
  mapper: {
    serializedName: "modelName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const body8: OperationParameter = {
  parameterPath: "body",
  mapper: ModelContainerMapper
};

export const modelName1: OperationURLParameter = {
  parameterPath: "modelName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9\\-_]{0,254}$")
    },
    serializedName: "modelName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const version1: OperationQueryParameter = {
  parameterPath: ["options", "version"],
  mapper: {
    serializedName: "version",
    type: {
      name: "String"
    }
  }
};

export const description: OperationQueryParameter = {
  parameterPath: ["options", "description"],
  mapper: {
    serializedName: "description",
    type: {
      name: "String"
    }
  }
};

export const tags1: OperationQueryParameter = {
  parameterPath: ["options", "tags"],
  mapper: {
    serializedName: "tags",
    type: {
      name: "String"
    }
  }
};

export const properties1: OperationQueryParameter = {
  parameterPath: ["options", "properties"],
  mapper: {
    serializedName: "properties",
    type: {
      name: "String"
    }
  }
};

export const body9: OperationParameter = {
  parameterPath: "body",
  mapper: ModelVersionMapper
};

export const count: OperationQueryParameter = {
  parameterPath: ["options", "count"],
  mapper: {
    serializedName: "count",
    type: {
      name: "Number"
    }
  }
};

export const endpointName: OperationURLParameter = {
  parameterPath: "endpointName",
  mapper: {
    serializedName: "endpointName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const body10: OperationParameter = {
  parameterPath: "body",
  mapper: PartialMinimalTrackedResourceWithIdentityMapper
};

export const endpointName1: OperationURLParameter = {
  parameterPath: "endpointName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9\\-_]{0,254}$")
    },
    serializedName: "endpointName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const body11: OperationParameter = {
  parameterPath: "body",
  mapper: BatchEndpointMapper
};

export const deploymentName: OperationURLParameter = {
  parameterPath: "deploymentName",
  mapper: {
    serializedName: "deploymentName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const body12: OperationParameter = {
  parameterPath: "body",
  mapper: PartialBatchDeploymentPartialMinimalTrackedResourceWithPropertiesMapper
};

export const deploymentName1: OperationURLParameter = {
  parameterPath: "deploymentName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9\\-_]{0,254}$")
    },
    serializedName: "deploymentName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const body13: OperationParameter = {
  parameterPath: "body",
  mapper: BatchDeploymentMapper
};

export const count1: OperationQueryParameter = {
  parameterPath: ["options", "count"],
  mapper: {
    defaultValue: 30,
    serializedName: "count",
    type: {
      name: "Number"
    }
  }
};

export const isDefault: OperationQueryParameter = {
  parameterPath: ["options", "isDefault"],
  mapper: {
    serializedName: "isDefault",
    type: {
      name: "Boolean"
    }
  }
};

export const names: OperationQueryParameter = {
  parameterPath: ["options", "names"],
  mapper: {
    serializedName: "names",
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "String"
        }
      }
    }
  },
  collectionFormat: "CSV"
};

export const searchText: OperationQueryParameter = {
  parameterPath: ["options", "searchText"],
  mapper: {
    serializedName: "searchText",
    type: {
      name: "String"
    }
  }
};

export const orderBy1: OperationQueryParameter = {
  parameterPath: ["options", "orderBy"],
  mapper: {
    serializedName: "orderBy",
    type: {
      name: "String"
    }
  }
};

export const orderByAsc: OperationQueryParameter = {
  parameterPath: ["options", "orderByAsc"],
  mapper: {
    defaultValue: false,
    serializedName: "orderByAsc",
    type: {
      name: "Boolean"
    }
  }
};

export const body14: OperationParameter = {
  parameterPath: "body",
  mapper: DatastoreMapper
};

export const skipValidation: OperationQueryParameter = {
  parameterPath: ["options", "skipValidation"],
  mapper: {
    defaultValue: false,
    serializedName: "skipValidation",
    type: {
      name: "Boolean"
    }
  }
};

export const body15: OperationParameter = {
  parameterPath: "body",
  mapper: FeaturesetContainerMapper
};

export const body16: OperationParameter = {
  parameterPath: "body",
  mapper: FeaturesetVersionMapper
};

export const body17: OperationParameter = {
  parameterPath: "body",
  mapper: FeaturesetVersionBackfillRequestMapper
};

export const body18: OperationParameter = {
  parameterPath: "body",
  mapper: GetFeatureRequestMapper
};

export const filters: OperationQueryParameter = {
  parameterPath: ["options", "filters"],
  mapper: {
    serializedName: "filters",
    type: {
      name: "String"
    }
  }
};

export const featureWindowStart: OperationQueryParameter = {
  parameterPath: ["options", "featureWindowStart"],
  mapper: {
    serializedName: "featureWindowStart",
    type: {
      name: "String"
    }
  }
};

export const featureWindowEnd: OperationQueryParameter = {
  parameterPath: ["options", "featureWindowEnd"],
  mapper: {
    serializedName: "featureWindowEnd",
    type: {
      name: "String"
    }
  }
};

export const body19: OperationParameter = {
  parameterPath: "body",
  mapper: FeaturestoreEntityContainerMapper
};

export const body20: OperationParameter = {
  parameterPath: "body",
  mapper: FeaturestoreEntityVersionMapper
};

export const jobType: OperationQueryParameter = {
  parameterPath: ["options", "jobType"],
  mapper: {
    serializedName: "jobType",
    type: {
      name: "String"
    }
  }
};

export const tag: OperationQueryParameter = {
  parameterPath: ["options", "tag"],
  mapper: {
    serializedName: "tag",
    type: {
      name: "String"
    }
  }
};

export const assetName: OperationQueryParameter = {
  parameterPath: ["options", "assetName"],
  mapper: {
    serializedName: "assetName",
    type: {
      name: "String"
    }
  }
};

export const scheduled: OperationQueryParameter = {
  parameterPath: ["options", "scheduled"],
  mapper: {
    serializedName: "scheduled",
    type: {
      name: "Boolean"
    }
  }
};

export const scheduleId: OperationQueryParameter = {
  parameterPath: ["options", "scheduleId"],
  mapper: {
    serializedName: "scheduleId",
    type: {
      name: "String"
    }
  }
};

export const id: OperationURLParameter = {
  parameterPath: "id",
  mapper: {
    serializedName: "id",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const body21: OperationParameter = {
  parameterPath: "body",
  mapper: JobBaseMapper
};

export const id1: OperationURLParameter = {
  parameterPath: "id",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9\\-_]{0,254}$")
    },
    serializedName: "id",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const includeJobInstructions: OperationQueryParameter = {
  parameterPath: ["options", "includeJobInstructions"],
  mapper: {
    defaultValue: false,
    serializedName: "includeJobInstructions",
    type: {
      name: "Boolean"
    }
  }
};

export const includeLabelCategories: OperationQueryParameter = {
  parameterPath: ["options", "includeLabelCategories"],
  mapper: {
    defaultValue: false,
    serializedName: "includeLabelCategories",
    type: {
      name: "Boolean"
    }
  }
};

export const body22: OperationParameter = {
  parameterPath: "body",
  mapper: LabelingJobMapper
};

export const body23: OperationParameter = {
  parameterPath: "body",
  mapper: ExportSummaryMapper
};

export const offset: OperationQueryParameter = {
  parameterPath: ["options", "offset"],
  mapper: {
    serializedName: "offset",
    type: {
      name: "Number"
    }
  }
};

export const feed: OperationQueryParameter = {
  parameterPath: ["options", "feed"],
  mapper: {
    serializedName: "feed",
    type: {
      name: "String"
    }
  }
};

export const body24: OperationParameter = {
  parameterPath: "body",
  mapper: PackageRequestMapper
};

export const name2: OperationQueryParameter = {
  parameterPath: ["options", "name"],
  mapper: {
    serializedName: "name",
    type: {
      name: "String"
    }
  }
};

export const computeType: OperationQueryParameter = {
  parameterPath: ["options", "computeType"],
  mapper: {
    serializedName: "computeType",
    type: {
      name: "String"
    }
  }
};

export const orderBy2: OperationQueryParameter = {
  parameterPath: ["options", "orderBy"],
  mapper: {
    serializedName: "orderBy",
    type: {
      name: "String"
    }
  }
};

export const body25: OperationParameter = {
  parameterPath: "body",
  mapper: OnlineEndpointMapper
};

export const body26: OperationParameter = {
  parameterPath: "body",
  mapper: RegenerateEndpointKeysRequestMapper
};

export const body27: OperationParameter = {
  parameterPath: "body",
  mapper: PartialMinimalTrackedResourceWithSkuMapper
};

export const body28: OperationParameter = {
  parameterPath: "body",
  mapper: OnlineDeploymentMapper
};

export const body29: OperationParameter = {
  parameterPath: "body",
  mapper: DeploymentLogsRequestMapper
};

export const listViewType1: OperationQueryParameter = {
  parameterPath: ["options", "listViewType"],
  mapper: {
    serializedName: "listViewType",
    type: {
      name: "String"
    }
  }
};

export const body30: OperationParameter = {
  parameterPath: "body",
  mapper: ScheduleMapper
};

export const registryName2: OperationURLParameter = {
  parameterPath: "registryName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9\\-_]{0,254}$")
    },
    serializedName: "registryName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const body31: OperationParameter = {
  parameterPath: "body",
  mapper: PartialRegistryPartialTrackedResourceMapper
};

export const body32: OperationParameter = {
  parameterPath: "body",
  mapper: RegistryMapper
};
