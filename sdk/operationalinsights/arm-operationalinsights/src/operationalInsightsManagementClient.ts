/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreRestPipeline from "@azure/core-rest-pipeline";
import {
  PipelineRequest,
  PipelineResponse,
  SendRequest,
} from "@azure/core-rest-pipeline";
import * as coreAuth from "@azure/core-auth";
import {
  AvailableServiceTiersImpl,
  ClustersImpl,
  DataExportsImpl,
  DataSourcesImpl,
  GatewaysImpl,
  IntelligencePacksImpl,
  LinkedServicesImpl,
  LinkedStorageAccountsImpl,
  ManagementGroupsImpl,
  OperationsImpl,
  OperationStatusesImpl,
  QueriesImpl,
  QueryPacksImpl,
  SavedSearchesImpl,
  SchemaOperationsImpl,
  SharedKeysOperationsImpl,
  StorageInsightConfigsImpl,
  TablesImpl,
  UsagesImpl,
  WorkspacePurgeImpl,
  WorkspacesImpl,
  DeletedWorkspacesImpl,
} from "./operations/index.js";
import {
  AvailableServiceTiers,
  Clusters,
  DataExports,
  DataSources,
  Gateways,
  IntelligencePacks,
  LinkedServices,
  LinkedStorageAccounts,
  ManagementGroups,
  Operations,
  OperationStatuses,
  Queries,
  QueryPacks,
  SavedSearches,
  SchemaOperations,
  SharedKeysOperations,
  StorageInsightConfigs,
  Tables,
  Usages,
  WorkspacePurge,
  Workspaces,
  DeletedWorkspaces,
} from "./operationsInterfaces/index.js";
import { OperationalInsightsManagementClientOptionalParams } from "./models/index.js";

export class OperationalInsightsManagementClient extends coreClient.ServiceClient {
  $host: string;
  subscriptionId: string;
  apiVersion: string;

  /**
   * Initializes a new instance of the OperationalInsightsManagementClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param subscriptionId The ID of the target subscription.
   * @param options The parameter options
   */
  constructor(
    credentials: coreAuth.TokenCredential,
    subscriptionId: string,
    options?: OperationalInsightsManagementClientOptionalParams,
  ) {
    if (credentials === undefined) {
      throw new Error("'credentials' cannot be null");
    }
    if (subscriptionId === undefined) {
      throw new Error("'subscriptionId' cannot be null");
    }

    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: OperationalInsightsManagementClientOptionalParams = {
      requestContentType: "application/json; charset=utf-8",
      credential: credentials,
    };

    const packageDetails = `azsdk-js-arm-operationalinsights/10.0.0`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix,
      },
      endpoint:
        options.endpoint ?? options.baseUri ?? "https://management.azure.com",
    };
    super(optionsWithDefaults);

    let bearerTokenAuthenticationPolicyFound: boolean = false;
    if (options?.pipeline && options.pipeline.getOrderedPolicies().length > 0) {
      const pipelinePolicies: coreRestPipeline.PipelinePolicy[] =
        options.pipeline.getOrderedPolicies();
      bearerTokenAuthenticationPolicyFound = pipelinePolicies.some(
        (pipelinePolicy) =>
          pipelinePolicy.name ===
          coreRestPipeline.bearerTokenAuthenticationPolicyName,
      );
    }
    if (
      !options ||
      !options.pipeline ||
      options.pipeline.getOrderedPolicies().length == 0 ||
      !bearerTokenAuthenticationPolicyFound
    ) {
      this.pipeline.removePolicy({
        name: coreRestPipeline.bearerTokenAuthenticationPolicyName,
      });
      this.pipeline.addPolicy(
        coreRestPipeline.bearerTokenAuthenticationPolicy({
          credential: credentials,
          scopes:
            optionsWithDefaults.credentialScopes ??
            `${optionsWithDefaults.endpoint}/.default`,
          challengeCallbacks: {
            authorizeRequestOnChallenge:
              coreClient.authorizeRequestOnClaimChallenge,
          },
        }),
      );
    }
    // Parameter assignments
    this.subscriptionId = subscriptionId;

    // Assigning values to Constant parameters
    this.$host = options.$host || "https://management.azure.com";
    this.apiVersion = options.apiVersion || "2025-02-01";
    this.availableServiceTiers = new AvailableServiceTiersImpl(this);
    this.clusters = new ClustersImpl(this);
    this.dataExports = new DataExportsImpl(this);
    this.dataSources = new DataSourcesImpl(this);
    this.gateways = new GatewaysImpl(this);
    this.intelligencePacks = new IntelligencePacksImpl(this);
    this.linkedServices = new LinkedServicesImpl(this);
    this.linkedStorageAccounts = new LinkedStorageAccountsImpl(this);
    this.managementGroups = new ManagementGroupsImpl(this);
    this.operations = new OperationsImpl(this);
    this.operationStatuses = new OperationStatusesImpl(this);
    this.queries = new QueriesImpl(this);
    this.queryPacks = new QueryPacksImpl(this);
    this.savedSearches = new SavedSearchesImpl(this);
    this.schemaOperations = new SchemaOperationsImpl(this);
    this.sharedKeysOperations = new SharedKeysOperationsImpl(this);
    this.storageInsightConfigs = new StorageInsightConfigsImpl(this);
    this.tables = new TablesImpl(this);
    this.usages = new UsagesImpl(this);
    this.workspacePurge = new WorkspacePurgeImpl(this);
    this.workspaces = new WorkspacesImpl(this);
    this.deletedWorkspaces = new DeletedWorkspacesImpl(this);
    this.addCustomApiVersionPolicy(options.apiVersion);
  }

  /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
  private addCustomApiVersionPolicy(apiVersion?: string) {
    if (!apiVersion) {
      return;
    }
    const apiVersionPolicy = {
      name: "CustomApiVersionPolicy",
      async sendRequest(
        request: PipelineRequest,
        next: SendRequest,
      ): Promise<PipelineResponse> {
        const param = request.url.split("?");
        if (param.length > 1) {
          const newParams = param[1].split("&").map((item) => {
            if (item.indexOf("api-version") > -1) {
              return "api-version=" + apiVersion;
            } else {
              return item;
            }
          });
          request.url = param[0] + "?" + newParams.join("&");
        }
        return next(request);
      },
    };
    this.pipeline.addPolicy(apiVersionPolicy);
  }

  availableServiceTiers: AvailableServiceTiers;
  clusters: Clusters;
  dataExports: DataExports;
  dataSources: DataSources;
  gateways: Gateways;
  intelligencePacks: IntelligencePacks;
  linkedServices: LinkedServices;
  linkedStorageAccounts: LinkedStorageAccounts;
  managementGroups: ManagementGroups;
  operations: Operations;
  operationStatuses: OperationStatuses;
  queries: Queries;
  queryPacks: QueryPacks;
  savedSearches: SavedSearches;
  schemaOperations: SchemaOperations;
  sharedKeysOperations: SharedKeysOperations;
  storageInsightConfigs: StorageInsightConfigs;
  tables: Tables;
  usages: Usages;
  workspacePurge: WorkspacePurge;
  workspaces: Workspaces;
  deletedWorkspaces: DeletedWorkspaces;
}
