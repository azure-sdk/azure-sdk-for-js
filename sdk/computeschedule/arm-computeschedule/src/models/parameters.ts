/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter,
} from "@azure/core-client";
import {
  CancelOperationsRequest as CancelOperationsRequestMapper,
  ExecuteDeallocateRequest as ExecuteDeallocateRequestMapper,
  ExecuteHibernateRequest as ExecuteHibernateRequestMapper,
  ExecuteStartRequest as ExecuteStartRequestMapper,
  GetOperationErrorsRequest as GetOperationErrorsRequestMapper,
  GetOperationStatusRequest as GetOperationStatusRequestMapper,
  SubmitDeallocateRequest as SubmitDeallocateRequestMapper,
  SubmitHibernateRequest as SubmitHibernateRequestMapper,
  SubmitStartRequest as SubmitStartRequestMapper,
} from "../models/mappers.js";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String",
    },
  },
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2024-10-01",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String",
    },
  },
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String",
    },
  },
};

export const requestBody: OperationParameter = {
  parameterPath: "requestBody",
  mapper: CancelOperationsRequestMapper,
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "Uuid",
    },
  },
};

export const locationparameter: OperationURLParameter = {
  parameterPath: "locationparameter",
  mapper: {
    constraints: {
      MinLength: 1,
    },
    serializedName: "locationparameter",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const requestBody1: OperationParameter = {
  parameterPath: "requestBody",
  mapper: ExecuteDeallocateRequestMapper,
};

export const requestBody2: OperationParameter = {
  parameterPath: "requestBody",
  mapper: ExecuteHibernateRequestMapper,
};

export const requestBody3: OperationParameter = {
  parameterPath: "requestBody",
  mapper: ExecuteStartRequestMapper,
};

export const requestBody4: OperationParameter = {
  parameterPath: "requestBody",
  mapper: GetOperationErrorsRequestMapper,
};

export const requestBody5: OperationParameter = {
  parameterPath: "requestBody",
  mapper: GetOperationStatusRequestMapper,
};

export const requestBody6: OperationParameter = {
  parameterPath: "requestBody",
  mapper: SubmitDeallocateRequestMapper,
};

export const requestBody7: OperationParameter = {
  parameterPath: "requestBody",
  mapper: SubmitHibernateRequestMapper,
};

export const requestBody8: OperationParameter = {
  parameterPath: "requestBody",
  mapper: SubmitStartRequestMapper,
};
