/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  CancelOperationsRequest,
  ScheduledActionsVirtualMachinesCancelOperationsOptionalParams,
  ScheduledActionsVirtualMachinesCancelOperationsResponse,
  ExecuteDeallocateRequest,
  ScheduledActionsVirtualMachinesExecuteDeallocateOptionalParams,
  ScheduledActionsVirtualMachinesExecuteDeallocateResponse,
  ExecuteHibernateRequest,
  ScheduledActionsVirtualMachinesExecuteHibernateOptionalParams,
  ScheduledActionsVirtualMachinesExecuteHibernateResponse,
  ExecuteStartRequest,
  ScheduledActionsVirtualMachinesExecuteStartOptionalParams,
  ScheduledActionsVirtualMachinesExecuteStartResponse,
  GetOperationErrorsRequest,
  ScheduledActionsVirtualMachinesGetOperationErrorsOptionalParams,
  ScheduledActionsVirtualMachinesGetOperationErrorsResponse,
  GetOperationStatusRequest,
  ScheduledActionsVirtualMachinesGetOperationStatusOptionalParams,
  ScheduledActionsVirtualMachinesGetOperationStatusResponse,
  SubmitDeallocateRequest,
  ScheduledActionsVirtualMachinesSubmitDeallocateOptionalParams,
  ScheduledActionsVirtualMachinesSubmitDeallocateResponse,
  SubmitHibernateRequest,
  ScheduledActionsVirtualMachinesSubmitHibernateOptionalParams,
  ScheduledActionsVirtualMachinesSubmitHibernateResponse,
  SubmitStartRequest,
  ScheduledActionsVirtualMachinesSubmitStartOptionalParams,
  ScheduledActionsVirtualMachinesSubmitStartResponse,
} from "../models/index.js";

/** Interface representing a ScheduledActions. */
export interface ScheduledActions {
  /**
   * VirtualMachinesCancelOperations: Cancel a previously submitted (start/deallocate/hibernate) request
   * @param locationparameter The location name.
   * @param requestBody The request body
   * @param options The options parameters.
   */
  virtualMachinesCancelOperations(
    locationparameter: string,
    requestBody: CancelOperationsRequest,
    options?: ScheduledActionsVirtualMachinesCancelOperationsOptionalParams,
  ): Promise<ScheduledActionsVirtualMachinesCancelOperationsResponse>;
  /**
   * VirtualMachinesExecuteDeallocate: Execute deallocate operation for a batch of virtual machines, this
   * operation is triggered as soon as Computeschedule receives it.
   * @param locationparameter The location name.
   * @param requestBody The request body
   * @param options The options parameters.
   */
  virtualMachinesExecuteDeallocate(
    locationparameter: string,
    requestBody: ExecuteDeallocateRequest,
    options?: ScheduledActionsVirtualMachinesExecuteDeallocateOptionalParams,
  ): Promise<ScheduledActionsVirtualMachinesExecuteDeallocateResponse>;
  /**
   * VirtualMachinesExecuteHibernate: Execute hibernate operation for a batch of virtual machines, this
   * operation is triggered as soon as Computeschedule receives it.
   * @param locationparameter The location name.
   * @param requestBody The request body
   * @param options The options parameters.
   */
  virtualMachinesExecuteHibernate(
    locationparameter: string,
    requestBody: ExecuteHibernateRequest,
    options?: ScheduledActionsVirtualMachinesExecuteHibernateOptionalParams,
  ): Promise<ScheduledActionsVirtualMachinesExecuteHibernateResponse>;
  /**
   * VirtualMachinesExecuteStart: Execute start operation for a batch of virtual machines, this operation
   * is triggered as soon as Computeschedule receives it.
   * @param locationparameter The location name.
   * @param requestBody The request body
   * @param options The options parameters.
   */
  virtualMachinesExecuteStart(
    locationparameter: string,
    requestBody: ExecuteStartRequest,
    options?: ScheduledActionsVirtualMachinesExecuteStartOptionalParams,
  ): Promise<ScheduledActionsVirtualMachinesExecuteStartResponse>;
  /**
   * VirtualMachinesGetOperationErrors: Get error details on operation errors (like transient errors
   * encountered, additional logs) if they exist.
   * @param locationparameter The location name.
   * @param requestBody The request body
   * @param options The options parameters.
   */
  virtualMachinesGetOperationErrors(
    locationparameter: string,
    requestBody: GetOperationErrorsRequest,
    options?: ScheduledActionsVirtualMachinesGetOperationErrorsOptionalParams,
  ): Promise<ScheduledActionsVirtualMachinesGetOperationErrorsResponse>;
  /**
   * VirtualMachinesGetOperationStatus: Polling endpoint to read status of operations performed on
   * virtual machines
   * @param locationparameter The location name.
   * @param requestBody The request body
   * @param options The options parameters.
   */
  virtualMachinesGetOperationStatus(
    locationparameter: string,
    requestBody: GetOperationStatusRequest,
    options?: ScheduledActionsVirtualMachinesGetOperationStatusOptionalParams,
  ): Promise<ScheduledActionsVirtualMachinesGetOperationStatusResponse>;
  /**
   * VirtualMachinesSubmitDeallocate: Schedule deallocate operation for a batch of virtual machines at
   * datetime in future.
   * @param locationparameter The location name.
   * @param requestBody The request body
   * @param options The options parameters.
   */
  virtualMachinesSubmitDeallocate(
    locationparameter: string,
    requestBody: SubmitDeallocateRequest,
    options?: ScheduledActionsVirtualMachinesSubmitDeallocateOptionalParams,
  ): Promise<ScheduledActionsVirtualMachinesSubmitDeallocateResponse>;
  /**
   * VirtualMachinesSubmitHibernate: Schedule hibernate operation for a batch of virtual machines at
   * datetime in future.
   * @param locationparameter The location name.
   * @param requestBody The request body
   * @param options The options parameters.
   */
  virtualMachinesSubmitHibernate(
    locationparameter: string,
    requestBody: SubmitHibernateRequest,
    options?: ScheduledActionsVirtualMachinesSubmitHibernateOptionalParams,
  ): Promise<ScheduledActionsVirtualMachinesSubmitHibernateResponse>;
  /**
   * VirtualMachinesSubmitStart: Schedule start operation for a batch of virtual machines at datetime in
   * future.
   * @param locationparameter The location name.
   * @param requestBody The request body
   * @param options The options parameters.
   */
  virtualMachinesSubmitStart(
    locationparameter: string,
    requestBody: SubmitStartRequest,
    options?: ScheduledActionsVirtualMachinesSubmitStartOptionalParams,
  ): Promise<ScheduledActionsVirtualMachinesSubmitStartResponse>;
}
