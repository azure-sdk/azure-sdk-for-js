/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { ScheduledActions } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MicrosoftComputeSchedule } from "../microsoftComputeSchedule";
import {
  CancelOperationsRequest,
  ScheduledActionsVirtualMachinesCancelOperationsOptionalParams,
  ScheduledActionsVirtualMachinesCancelOperationsResponse,
  ExecuteCreateRequest,
  ScheduledActionsVirtualMachinesExecuteCreateOptionalParams,
  ScheduledActionsVirtualMachinesExecuteCreateResponse,
  ExecuteDeallocateRequest,
  ScheduledActionsVirtualMachinesExecuteDeallocateOptionalParams,
  ScheduledActionsVirtualMachinesExecuteDeallocateResponse,
  ExecuteDeleteRequest,
  ScheduledActionsVirtualMachinesExecuteDeleteOptionalParams,
  ScheduledActionsVirtualMachinesExecuteDeleteResponse,
  ExecuteHibernateRequest,
  ScheduledActionsVirtualMachinesExecuteHibernateOptionalParams,
  ScheduledActionsVirtualMachinesExecuteHibernateResponse,
  ExecuteStartRequest,
  ScheduledActionsVirtualMachinesExecuteStartOptionalParams,
  ScheduledActionsVirtualMachinesExecuteStartResponse,
  GetOperationErrorsRequest,
  ScheduledActionsVirtualMachinesGetOperationErrorsOptionalParams,
  ScheduledActionsVirtualMachinesGetOperationErrorsResponse,
  GetOperationStatusRequest,
  ScheduledActionsVirtualMachinesGetOperationStatusOptionalParams,
  ScheduledActionsVirtualMachinesGetOperationStatusResponse,
  SubmitCreateRequest,
  ScheduledActionsVirtualMachinesSubmitCreateOptionalParams,
  ScheduledActionsVirtualMachinesSubmitCreateResponse,
  SubmitDeallocateRequest,
  ScheduledActionsVirtualMachinesSubmitDeallocateOptionalParams,
  ScheduledActionsVirtualMachinesSubmitDeallocateResponse,
  SubmitDeleteRequest,
  ScheduledActionsVirtualMachinesSubmitDeleteOptionalParams,
  ScheduledActionsVirtualMachinesSubmitDeleteResponse,
  SubmitHibernateRequest,
  ScheduledActionsVirtualMachinesSubmitHibernateOptionalParams,
  ScheduledActionsVirtualMachinesSubmitHibernateResponse,
  SubmitStartRequest,
  ScheduledActionsVirtualMachinesSubmitStartOptionalParams,
  ScheduledActionsVirtualMachinesSubmitStartResponse,
} from "../models";

/** Class containing ScheduledActions operations. */
export class ScheduledActionsImpl implements ScheduledActions {
  private readonly client: MicrosoftComputeSchedule;

  /**
   * Initialize a new instance of the class ScheduledActions class.
   * @param client Reference to the service client
   */
  constructor(client: MicrosoftComputeSchedule) {
    this.client = client;
  }

  /**
   * VirtualMachinesCancelOperations: Cancel a previously submitted (start/deallocate/hibernate) request
   * @param locationparameter The location name.
   * @param requestBody The request body
   * @param options The options parameters.
   */
  virtualMachinesCancelOperations(
    locationparameter: string,
    requestBody: CancelOperationsRequest,
    options?: ScheduledActionsVirtualMachinesCancelOperationsOptionalParams,
  ): Promise<ScheduledActionsVirtualMachinesCancelOperationsResponse> {
    return this.client.sendOperationRequest(
      { locationparameter, requestBody, options },
      virtualMachinesCancelOperationsOperationSpec,
    );
  }

  /**
   * VirtualMachinesExecuteCreate: Execute create operation for a batch of virtual machines, this
   * operation is triggered as soon as Computeschedule receives it.
   * @param locationparameter The location name.
   * @param requestBody The request body
   * @param options The options parameters.
   */
  virtualMachinesExecuteCreate(
    locationparameter: string,
    requestBody: ExecuteCreateRequest,
    options?: ScheduledActionsVirtualMachinesExecuteCreateOptionalParams,
  ): Promise<ScheduledActionsVirtualMachinesExecuteCreateResponse> {
    return this.client.sendOperationRequest(
      { locationparameter, requestBody, options },
      virtualMachinesExecuteCreateOperationSpec,
    );
  }

  /**
   * VirtualMachinesExecuteDeallocate: Execute deallocate operation for a batch of virtual machines, this
   * operation is triggered as soon as Computeschedule receives it.
   * @param locationparameter The location name.
   * @param requestBody The request body
   * @param options The options parameters.
   */
  virtualMachinesExecuteDeallocate(
    locationparameter: string,
    requestBody: ExecuteDeallocateRequest,
    options?: ScheduledActionsVirtualMachinesExecuteDeallocateOptionalParams,
  ): Promise<ScheduledActionsVirtualMachinesExecuteDeallocateResponse> {
    return this.client.sendOperationRequest(
      { locationparameter, requestBody, options },
      virtualMachinesExecuteDeallocateOperationSpec,
    );
  }

  /**
   * VirtualMachinesExecuteCreate: Execute delete operation for a batch of virtual machines, this
   * operation is triggered as soon as Computeschedule receives it.
   * @param locationparameter The location name.
   * @param requestBody The request body
   * @param options The options parameters.
   */
  virtualMachinesExecuteDelete(
    locationparameter: string,
    requestBody: ExecuteDeleteRequest,
    options?: ScheduledActionsVirtualMachinesExecuteDeleteOptionalParams,
  ): Promise<ScheduledActionsVirtualMachinesExecuteDeleteResponse> {
    return this.client.sendOperationRequest(
      { locationparameter, requestBody, options },
      virtualMachinesExecuteDeleteOperationSpec,
    );
  }

  /**
   * VirtualMachinesExecuteHibernate: Execute hibernate operation for a batch of virtual machines, this
   * operation is triggered as soon as Computeschedule receives it.
   * @param locationparameter The location name.
   * @param requestBody The request body
   * @param options The options parameters.
   */
  virtualMachinesExecuteHibernate(
    locationparameter: string,
    requestBody: ExecuteHibernateRequest,
    options?: ScheduledActionsVirtualMachinesExecuteHibernateOptionalParams,
  ): Promise<ScheduledActionsVirtualMachinesExecuteHibernateResponse> {
    return this.client.sendOperationRequest(
      { locationparameter, requestBody, options },
      virtualMachinesExecuteHibernateOperationSpec,
    );
  }

  /**
   * VirtualMachinesExecuteStart: Execute start operation for a batch of virtual machines, this operation
   * is triggered as soon as Computeschedule receives it.
   * @param locationparameter The location name.
   * @param requestBody The request body
   * @param options The options parameters.
   */
  virtualMachinesExecuteStart(
    locationparameter: string,
    requestBody: ExecuteStartRequest,
    options?: ScheduledActionsVirtualMachinesExecuteStartOptionalParams,
  ): Promise<ScheduledActionsVirtualMachinesExecuteStartResponse> {
    return this.client.sendOperationRequest(
      { locationparameter, requestBody, options },
      virtualMachinesExecuteStartOperationSpec,
    );
  }

  /**
   * VirtualMachinesGetOperationErrors: Get error details on operation errors (like transient errors
   * encountered, additional logs) if they exist.
   * @param locationparameter The location name.
   * @param requestBody The request body
   * @param options The options parameters.
   */
  virtualMachinesGetOperationErrors(
    locationparameter: string,
    requestBody: GetOperationErrorsRequest,
    options?: ScheduledActionsVirtualMachinesGetOperationErrorsOptionalParams,
  ): Promise<ScheduledActionsVirtualMachinesGetOperationErrorsResponse> {
    return this.client.sendOperationRequest(
      { locationparameter, requestBody, options },
      virtualMachinesGetOperationErrorsOperationSpec,
    );
  }

  /**
   * VirtualMachinesGetOperationStatus: Polling endpoint to read status of operations performed on
   * virtual machines
   * @param locationparameter The location name.
   * @param requestBody The request body
   * @param options The options parameters.
   */
  virtualMachinesGetOperationStatus(
    locationparameter: string,
    requestBody: GetOperationStatusRequest,
    options?: ScheduledActionsVirtualMachinesGetOperationStatusOptionalParams,
  ): Promise<ScheduledActionsVirtualMachinesGetOperationStatusResponse> {
    return this.client.sendOperationRequest(
      { locationparameter, requestBody, options },
      virtualMachinesGetOperationStatusOperationSpec,
    );
  }

  /**
   * VirtualMachinesSubmitCreate: submit create operation for a batch of virtual machines, at datetime in
   * future.
   * @param locationparameter The location name.
   * @param requestBody The request body
   * @param options The options parameters.
   */
  virtualMachinesSubmitCreate(
    locationparameter: string,
    requestBody: SubmitCreateRequest,
    options?: ScheduledActionsVirtualMachinesSubmitCreateOptionalParams,
  ): Promise<ScheduledActionsVirtualMachinesSubmitCreateResponse> {
    return this.client.sendOperationRequest(
      { locationparameter, requestBody, options },
      virtualMachinesSubmitCreateOperationSpec,
    );
  }

  /**
   * VirtualMachinesSubmitDeallocate: Schedule deallocate operation for a batch of virtual machines at
   * datetime in future.
   * @param locationparameter The location name.
   * @param requestBody The request body
   * @param options The options parameters.
   */
  virtualMachinesSubmitDeallocate(
    locationparameter: string,
    requestBody: SubmitDeallocateRequest,
    options?: ScheduledActionsVirtualMachinesSubmitDeallocateOptionalParams,
  ): Promise<ScheduledActionsVirtualMachinesSubmitDeallocateResponse> {
    return this.client.sendOperationRequest(
      { locationparameter, requestBody, options },
      virtualMachinesSubmitDeallocateOperationSpec,
    );
  }

  /**
   * VirtualMachinesSubmitDelete: submit delete operation for a batch of virtual machines, at datetime in
   * future.
   * @param locationparameter The location name.
   * @param requestBody The request body
   * @param options The options parameters.
   */
  virtualMachinesSubmitDelete(
    locationparameter: string,
    requestBody: SubmitDeleteRequest,
    options?: ScheduledActionsVirtualMachinesSubmitDeleteOptionalParams,
  ): Promise<ScheduledActionsVirtualMachinesSubmitDeleteResponse> {
    return this.client.sendOperationRequest(
      { locationparameter, requestBody, options },
      virtualMachinesSubmitDeleteOperationSpec,
    );
  }

  /**
   * VirtualMachinesSubmitHibernate: Schedule hibernate operation for a batch of virtual machines at
   * datetime in future.
   * @param locationparameter The location name.
   * @param requestBody The request body
   * @param options The options parameters.
   */
  virtualMachinesSubmitHibernate(
    locationparameter: string,
    requestBody: SubmitHibernateRequest,
    options?: ScheduledActionsVirtualMachinesSubmitHibernateOptionalParams,
  ): Promise<ScheduledActionsVirtualMachinesSubmitHibernateResponse> {
    return this.client.sendOperationRequest(
      { locationparameter, requestBody, options },
      virtualMachinesSubmitHibernateOperationSpec,
    );
  }

  /**
   * VirtualMachinesSubmitStart: Schedule start operation for a batch of virtual machines at datetime in
   * future.
   * @param locationparameter The location name.
   * @param requestBody The request body
   * @param options The options parameters.
   */
  virtualMachinesSubmitStart(
    locationparameter: string,
    requestBody: SubmitStartRequest,
    options?: ScheduledActionsVirtualMachinesSubmitStartOptionalParams,
  ): Promise<ScheduledActionsVirtualMachinesSubmitStartResponse> {
    return this.client.sendOperationRequest(
      { locationparameter, requestBody, options },
      virtualMachinesSubmitStartOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const virtualMachinesCancelOperationsOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.ComputeSchedule/locations/{locationparameter}/virtualMachinesCancelOperations",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CancelOperationsResponse,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.requestBody,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.locationparameter,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const virtualMachinesExecuteCreateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.ComputeSchedule/locations/{locationparameter}/virtualMachinesExecuteCreate",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CreateResourceOperationResponse,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.requestBody1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.locationparameter,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const virtualMachinesExecuteDeallocateOperationSpec: coreClient.OperationSpec =
  {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.ComputeSchedule/locations/{locationparameter}/virtualMachinesExecuteDeallocate",
    httpMethod: "POST",
    responses: {
      200: {
        bodyMapper: Mappers.DeallocateResourceOperationResponse,
      },
      default: {
        bodyMapper: Mappers.ErrorResponse,
      },
    },
    requestBody: Parameters.requestBody2,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
      Parameters.$host,
      Parameters.subscriptionId,
      Parameters.locationparameter,
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer,
  };
const virtualMachinesExecuteDeleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.ComputeSchedule/locations/{locationparameter}/virtualMachinesExecuteDelete",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DeleteResourceOperationResponse,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.requestBody3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.locationparameter,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const virtualMachinesExecuteHibernateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.ComputeSchedule/locations/{locationparameter}/virtualMachinesExecuteHibernate",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.HibernateResourceOperationResponse,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.requestBody4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.locationparameter,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const virtualMachinesExecuteStartOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.ComputeSchedule/locations/{locationparameter}/virtualMachinesExecuteStart",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.StartResourceOperationResponse,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.requestBody5,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.locationparameter,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const virtualMachinesGetOperationErrorsOperationSpec: coreClient.OperationSpec =
  {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.ComputeSchedule/locations/{locationparameter}/virtualMachinesGetOperationErrors",
    httpMethod: "POST",
    responses: {
      200: {
        bodyMapper: Mappers.GetOperationErrorsResponse,
      },
      default: {
        bodyMapper: Mappers.ErrorResponse,
      },
    },
    requestBody: Parameters.requestBody6,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
      Parameters.$host,
      Parameters.subscriptionId,
      Parameters.locationparameter,
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer,
  };
const virtualMachinesGetOperationStatusOperationSpec: coreClient.OperationSpec =
  {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.ComputeSchedule/locations/{locationparameter}/virtualMachinesGetOperationStatus",
    httpMethod: "POST",
    responses: {
      200: {
        bodyMapper: Mappers.GetOperationStatusResponse,
      },
      default: {
        bodyMapper: Mappers.ErrorResponse,
      },
    },
    requestBody: Parameters.requestBody7,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
      Parameters.$host,
      Parameters.subscriptionId,
      Parameters.locationparameter,
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer,
  };
const virtualMachinesSubmitCreateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.ComputeSchedule/locations/{locationparameter}/virtualMachinesSubmitCreate",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CreateResourceOperationResponse,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.requestBody8,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.locationparameter,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const virtualMachinesSubmitDeallocateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.ComputeSchedule/locations/{locationparameter}/virtualMachinesSubmitDeallocate",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DeallocateResourceOperationResponse,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.requestBody9,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.locationparameter,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const virtualMachinesSubmitDeleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.ComputeSchedule/locations/{locationparameter}/virtualMachinesSubmitDelete",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DeleteResourceOperationResponse,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.requestBody10,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.locationparameter,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const virtualMachinesSubmitHibernateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.ComputeSchedule/locations/{locationparameter}/virtualMachinesSubmitHibernate",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.HibernateResourceOperationResponse,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.requestBody11,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.locationparameter,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const virtualMachinesSubmitStartOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.ComputeSchedule/locations/{locationparameter}/virtualMachinesSubmitStart",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.StartResourceOperationResponse,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.requestBody12,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.locationparameter,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
