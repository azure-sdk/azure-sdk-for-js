/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  DpsCertificateListOptionalParams,
  DpsCertificateListResponse,
  DpsCertificateGetOptionalParams,
  DpsCertificateGetResponse,
  CertificateResponse,
  DpsCertificateCreateOrUpdateOptionalParams,
  DpsCertificateCreateOrUpdateResponse,
  DpsCertificateDeleteOptionalParams,
  DpsCertificateGenerateVerificationCodeOptionalParams,
  DpsCertificateGenerateVerificationCodeResponse,
  VerificationCodeRequest,
  DpsCertificateVerifyCertificateOptionalParams,
  DpsCertificateVerifyCertificateResponse,
} from "../models/index.js";

/** Interface representing a DpsCertificate. */
export interface DpsCertificate {
  /**
   * Get all the certificates tied to the provisioning service.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param provisioningServiceName Name of the provisioning service to retrieve.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    provisioningServiceName: string,
    options?: DpsCertificateListOptionalParams,
  ): Promise<DpsCertificateListResponse>;
  /**
   * Get the certificate from the provisioning service.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param provisioningServiceName Name of the provisioning service to retrieve.
   * @param certificateName Name of the certificate to retrieve.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    provisioningServiceName: string,
    certificateName: string,
    options?: DpsCertificateGetOptionalParams,
  ): Promise<DpsCertificateGetResponse>;
  /**
   * Add new certificate or update an existing certificate.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param provisioningServiceName Name of the provisioning service to retrieve.
   * @param certificateName Name of the certificate to retrieve.
   * @param certificateDescription The certificate body.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    provisioningServiceName: string,
    certificateName: string,
    certificateDescription: CertificateResponse,
    options?: DpsCertificateCreateOrUpdateOptionalParams,
  ): Promise<DpsCertificateCreateOrUpdateResponse>;
  /**
   * Deletes the specified certificate associated with the Provisioning Service
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param provisioningServiceName Name of the provisioning service to retrieve.
   * @param certificateName Name of the certificate to retrieve.
   * @param ifMatch ETag of the certificate
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    provisioningServiceName: string,
    certificateName: string,
    ifMatch: string,
    options?: DpsCertificateDeleteOptionalParams,
  ): Promise<void>;
  /**
   * Generate verification code for Proof of Possession.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param provisioningServiceName Name of the provisioning service to retrieve.
   * @param certificateName Name of the certificate to retrieve.
   * @param ifMatch ETag of the certificate. This is required to update an existing certificate, and
   *                ignored while creating a brand new certificate.
   * @param options The options parameters.
   */
  generateVerificationCode(
    resourceGroupName: string,
    provisioningServiceName: string,
    certificateName: string,
    ifMatch: string,
    options?: DpsCertificateGenerateVerificationCodeOptionalParams,
  ): Promise<DpsCertificateGenerateVerificationCodeResponse>;
  /**
   * Verifies the certificate's private key possession by providing the leaf cert issued by the verifying
   * pre uploaded certificate.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param provisioningServiceName Name of the provisioning service to retrieve.
   * @param certificateName Name of the certificate to retrieve.
   * @param ifMatch ETag of the certificate.
   * @param request The name of the certificate
   * @param options The options parameters.
   */
  verifyCertificate(
    resourceGroupName: string,
    provisioningServiceName: string,
    certificateName: string,
    ifMatch: string,
    request: VerificationCodeRequest,
    options?: DpsCertificateVerifyCertificateOptionalParams,
  ): Promise<DpsCertificateVerifyCertificateResponse>;
}
