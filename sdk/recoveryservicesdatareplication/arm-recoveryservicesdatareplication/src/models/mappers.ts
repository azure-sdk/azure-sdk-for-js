/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      isDataAction: {
        serializedName: "isDataAction",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay",
        },
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      actionType: {
        serializedName: "actionType",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail",
        },
      },
    },
  },
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail",
            },
          },
        },
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo",
            },
          },
        },
      },
    },
  },
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } },
        },
      },
    },
  },
};

export const CheckNameAvailabilityModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityModel",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const CheckNameAvailabilityResponseModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityResponseModel",
    modelProperties: {
      nameAvailable: {
        serializedName: "nameAvailable",
        type: {
          name: "Boolean",
        },
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const FabricModelListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FabricModelListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FabricModel",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const FabricModelProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FabricModelProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      serviceEndpoint: {
        serializedName: "serviceEndpoint",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      serviceResourceId: {
        serializedName: "serviceResourceId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      health: {
        serializedName: "health",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      healthErrors: {
        serializedName: "healthErrors",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HealthErrorModel",
            },
          },
        },
      },
      customProperties: {
        serializedName: "customProperties",
        type: {
          name: "Composite",
          className: "FabricModelCustomProperties",
        },
      },
    },
  },
};

export const HealthErrorModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HealthErrorModel",
    modelProperties: {
      affectedResourceType: {
        serializedName: "affectedResourceType",
        type: {
          name: "String",
        },
      },
      affectedResourceCorrelationIds: {
        serializedName: "affectedResourceCorrelationIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      childErrors: {
        serializedName: "childErrors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InnerHealthErrorModel",
            },
          },
        },
      },
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      healthCategory: {
        serializedName: "healthCategory",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      category: {
        serializedName: "category",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      severity: {
        serializedName: "severity",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      source: {
        serializedName: "source",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      creationTime: {
        serializedName: "creationTime",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      isCustomerResolvable: {
        serializedName: "isCustomerResolvable",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      summary: {
        serializedName: "summary",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      causes: {
        serializedName: "causes",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      recommendation: {
        serializedName: "recommendation",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const InnerHealthErrorModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InnerHealthErrorModel",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      healthCategory: {
        serializedName: "healthCategory",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      category: {
        serializedName: "category",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      severity: {
        serializedName: "severity",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      source: {
        serializedName: "source",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      creationTime: {
        serializedName: "creationTime",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      isCustomerResolvable: {
        serializedName: "isCustomerResolvable",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      summary: {
        serializedName: "summary",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      causes: {
        serializedName: "causes",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      recommendation: {
        serializedName: "recommendation",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const FabricModelCustomProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FabricModelCustomProperties",
    uberParent: "FabricModelCustomProperties",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType",
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData",
        },
      },
    },
  },
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String",
        },
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String",
        },
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime",
        },
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String",
        },
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String",
        },
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const VaultModelListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VaultModelListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VaultModel",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const VaultModelProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VaultModelProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      serviceResourceId: {
        serializedName: "serviceResourceId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      vaultType: {
        serializedName: "vaultType",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ManagedServiceIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedServiceIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "Uuid",
        },
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "Uuid",
        },
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String",
        },
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "UserAssignedIdentity" },
          },
        },
      },
    },
  },
};

export const UserAssignedIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserAssignedIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "Uuid",
        },
      },
      clientId: {
        serializedName: "clientId",
        readOnly: true,
        type: {
          name: "Uuid",
        },
      },
    },
  },
};

export const DeploymentPreflightModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeploymentPreflightModel",
    modelProperties: {
      resources: {
        serializedName: "resources",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeploymentPreflightResource",
            },
          },
        },
      },
    },
  },
};

export const DeploymentPreflightResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeploymentPreflightResource",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        type: {
          name: "String",
        },
      },
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      apiVersion: {
        serializedName: "apiVersion",
        type: {
          name: "String",
        },
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "any",
        },
      },
    },
  },
};

export const OperationStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationStatus",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      status: {
        serializedName: "status",
        type: {
          name: "String",
        },
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "String",
        },
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const FabricModelUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FabricModelUpdate",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "FabricModelProperties",
        },
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData",
        },
      },
    },
  },
};

export const FabricAgentModelListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FabricAgentModelListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FabricAgentModel",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const FabricAgentModelProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FabricAgentModelProperties",
    modelProperties: {
      correlationId: {
        serializedName: "correlationId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      machineId: {
        constraints: {
          MinLength: 1,
        },
        serializedName: "machineId",
        required: true,
        type: {
          name: "String",
        },
      },
      machineName: {
        constraints: {
          MinLength: 1,
        },
        serializedName: "machineName",
        required: true,
        type: {
          name: "String",
        },
      },
      authenticationIdentity: {
        serializedName: "authenticationIdentity",
        type: {
          name: "Composite",
          className: "IdentityModel",
        },
      },
      resourceAccessIdentity: {
        serializedName: "resourceAccessIdentity",
        type: {
          name: "Composite",
          className: "IdentityModel",
        },
      },
      isResponsive: {
        serializedName: "isResponsive",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      lastHeartbeat: {
        serializedName: "lastHeartbeat",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      versionNumber: {
        serializedName: "versionNumber",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      healthErrors: {
        serializedName: "healthErrors",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HealthErrorModel",
            },
          },
        },
      },
      customProperties: {
        serializedName: "customProperties",
        type: {
          name: "Composite",
          className: "FabricAgentModelCustomProperties",
        },
      },
    },
  },
};

export const IdentityModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IdentityModel",
    modelProperties: {
      tenantId: {
        constraints: {
          MinLength: 1,
        },
        serializedName: "tenantId",
        required: true,
        type: {
          name: "String",
        },
      },
      applicationId: {
        constraints: {
          MinLength: 1,
        },
        serializedName: "applicationId",
        required: true,
        type: {
          name: "String",
        },
      },
      objectId: {
        constraints: {
          MinLength: 1,
        },
        serializedName: "objectId",
        required: true,
        type: {
          name: "String",
        },
      },
      audience: {
        constraints: {
          MinLength: 1,
        },
        serializedName: "audience",
        required: true,
        type: {
          name: "String",
        },
      },
      aadAuthority: {
        constraints: {
          MinLength: 1,
        },
        serializedName: "aadAuthority",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const FabricAgentModelCustomProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FabricAgentModelCustomProperties",
    uberParent: "FabricAgentModelCustomProperties",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType",
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const VaultModelUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VaultModelUpdate",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "VaultModelProperties",
        },
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "VaultIdentityModel",
        },
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData",
        },
      },
    },
  },
};

export const VaultIdentityModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VaultIdentityModel",
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String",
        },
      },
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const EmailConfigurationModelListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EmailConfigurationModelListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EmailConfigurationModel",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const EmailConfigurationModelProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EmailConfigurationModelProperties",
    modelProperties: {
      sendToOwners: {
        serializedName: "sendToOwners",
        required: true,
        type: {
          name: "Boolean",
        },
      },
      customEmailAddresses: {
        serializedName: "customEmailAddresses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      locale: {
        serializedName: "locale",
        type: {
          name: "String",
        },
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const EventModelListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EventModelListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EventModel",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const EventModelProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EventModelProperties",
    modelProperties: {
      resourceType: {
        serializedName: "resourceType",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      resourceName: {
        serializedName: "resourceName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      eventType: {
        serializedName: "eventType",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      eventName: {
        serializedName: "eventName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      timeOfOccurrence: {
        serializedName: "timeOfOccurrence",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      severity: {
        serializedName: "severity",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      correlationId: {
        serializedName: "correlationId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      healthErrors: {
        serializedName: "healthErrors",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HealthErrorModel",
            },
          },
        },
      },
      customProperties: {
        serializedName: "customProperties",
        type: {
          name: "Composite",
          className: "EventModelCustomProperties",
        },
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const EventModelCustomProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EventModelCustomProperties",
    uberParent: "EventModelCustomProperties",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType",
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const JobModelListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobModelListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "JobModel",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const JobModelProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobModelProperties",
    modelProperties: {
      displayName: {
        serializedName: "displayName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      state: {
        serializedName: "state",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      startTime: {
        serializedName: "startTime",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      endTime: {
        serializedName: "endTime",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      objectId: {
        serializedName: "objectId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      objectName: {
        serializedName: "objectName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      objectInternalId: {
        serializedName: "objectInternalId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      objectInternalName: {
        serializedName: "objectInternalName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      objectType: {
        serializedName: "objectType",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      replicationProviderId: {
        serializedName: "replicationProviderId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      sourceFabricProviderId: {
        serializedName: "sourceFabricProviderId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      targetFabricProviderId: {
        serializedName: "targetFabricProviderId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      allowedActions: {
        serializedName: "allowedActions",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      activityId: {
        serializedName: "activityId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      tasks: {
        serializedName: "tasks",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TaskModel",
            },
          },
        },
      },
      errors: {
        serializedName: "errors",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorModel",
            },
          },
        },
      },
      customProperties: {
        serializedName: "customProperties",
        type: {
          name: "Composite",
          className: "JobModelCustomProperties",
        },
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const TaskModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskModel",
    modelProperties: {
      taskName: {
        serializedName: "taskName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      state: {
        serializedName: "state",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      startTime: {
        serializedName: "startTime",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      endTime: {
        serializedName: "endTime",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      customProperties: {
        serializedName: "customProperties",
        type: {
          name: "Composite",
          className: "TaskModelCustomProperties",
        },
      },
      childrenJobs: {
        serializedName: "childrenJobs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "JobModel",
            },
          },
        },
      },
    },
  },
};

export const TaskModelCustomProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskModelCustomProperties",
    modelProperties: {
      instanceType: {
        constraints: {
          MinLength: 1,
        },
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ErrorModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorModel",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      severity: {
        serializedName: "severity",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      creationTime: {
        serializedName: "creationTime",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      causes: {
        serializedName: "causes",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      recommendation: {
        serializedName: "recommendation",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const JobModelCustomProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobModelCustomProperties",
    uberParent: "JobModelCustomProperties",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType",
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String",
        },
      },
      affectedObjectDetails: {
        serializedName: "affectedObjectDetails",
        type: {
          name: "Composite",
          className: "JobModelCustomPropertiesAffectedObjectDetails",
        },
      },
    },
  },
};

export const JobModelCustomPropertiesAffectedObjectDetails: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "JobModelCustomPropertiesAffectedObjectDetails",
      modelProperties: {
        description: {
          serializedName: "description",
          type: {
            name: "String",
          },
        },
        type: {
          defaultValue: "object",
          isConstant: true,
          serializedName: "type",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const PrivateEndpointConnectionProxyListResult: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "PrivateEndpointConnectionProxyListResult",
      modelProperties: {
        value: {
          serializedName: "value",
          required: true,
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "Composite",
                className: "PrivateEndpointConnectionProxy",
              },
            },
          },
        },
        nextLink: {
          serializedName: "nextLink",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const PrivateEndpointConnectionProxyProperties: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "PrivateEndpointConnectionProxyProperties",
      modelProperties: {
        provisioningState: {
          serializedName: "provisioningState",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        remotePrivateEndpoint: {
          serializedName: "remotePrivateEndpoint",
          type: {
            name: "Composite",
            className: "RemotePrivateEndpoint",
          },
        },
      },
    },
  };

export const RemotePrivateEndpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RemotePrivateEndpoint",
    modelProperties: {
      id: {
        constraints: {
          MinLength: 1,
        },
        serializedName: "id",
        required: true,
        type: {
          name: "String",
        },
      },
      privateLinkServiceConnections: {
        serializedName: "privateLinkServiceConnections",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateLinkServiceConnection",
            },
          },
        },
      },
      manualPrivateLinkServiceConnections: {
        serializedName: "manualPrivateLinkServiceConnections",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateLinkServiceConnection",
            },
          },
        },
      },
      privateLinkServiceProxies: {
        serializedName: "privateLinkServiceProxies",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateLinkServiceProxy",
            },
          },
        },
      },
      connectionDetails: {
        serializedName: "connectionDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnectionDetails",
            },
          },
        },
      },
    },
  },
};

export const PrivateLinkServiceConnection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkServiceConnection",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      groupIds: {
        serializedName: "groupIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      requestMessage: {
        serializedName: "requestMessage",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PrivateLinkServiceProxy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkServiceProxy",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String",
        },
      },
      remotePrivateLinkServiceConnectionState: {
        serializedName: "remotePrivateLinkServiceConnectionState",
        type: {
          name: "Composite",
          className: "PrivateLinkServiceConnectionState",
        },
      },
      remotePrivateEndpointConnection: {
        serializedName: "remotePrivateEndpointConnection",
        type: {
          name: "Composite",
          className: "RemotePrivateEndpointConnection",
        },
      },
      groupConnectivityInformation: {
        serializedName: "groupConnectivityInformation",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GroupConnectivityInformation",
            },
          },
        },
      },
    },
  },
};

export const PrivateLinkServiceConnectionState: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkServiceConnectionState",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "description",
        type: {
          name: "String",
        },
      },
      actionsRequired: {
        serializedName: "actionsRequired",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const RemotePrivateEndpointConnection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RemotePrivateEndpointConnection",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const GroupConnectivityInformation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GroupConnectivityInformation",
    modelProperties: {
      groupId: {
        serializedName: "groupId",
        type: {
          name: "String",
        },
      },
      memberName: {
        serializedName: "memberName",
        type: {
          name: "String",
        },
      },
      customerVisibleFqdns: {
        serializedName: "customerVisibleFqdns",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      internalFqdn: {
        serializedName: "internalFqdn",
        type: {
          name: "String",
        },
      },
      redirectMapId: {
        serializedName: "redirectMapId",
        type: {
          name: "String",
        },
      },
      privateLinkServiceArmRegion: {
        serializedName: "privateLinkServiceArmRegion",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ConnectionDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionDetails",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String",
        },
      },
      privateIpAddress: {
        serializedName: "privateIpAddress",
        type: {
          name: "String",
        },
      },
      linkIdentifier: {
        serializedName: "linkIdentifier",
        type: {
          name: "String",
        },
      },
      groupId: {
        serializedName: "groupId",
        type: {
          name: "String",
        },
      },
      memberName: {
        serializedName: "memberName",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PrivateEndpointConnectionListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PrivateEndpointConnectionResponseProperties: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "PrivateEndpointConnectionResponseProperties",
      modelProperties: {
        provisioningState: {
          serializedName: "provisioningState",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        privateEndpoint: {
          serializedName: "privateEndpoint",
          type: {
            name: "Composite",
            className: "PrivateEndpoint",
          },
        },
        privateLinkServiceConnectionState: {
          serializedName: "privateLinkServiceConnectionState",
          type: {
            name: "Composite",
            className: "PrivateLinkServiceConnectionState",
          },
        },
      },
    },
  };

export const PrivateEndpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpoint",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PrivateLinkResourceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateLinkResource",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PrivateLinkResourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResourceProperties",
    modelProperties: {
      groupId: {
        serializedName: "groupId",
        type: {
          name: "String",
        },
      },
      requiredMembers: {
        serializedName: "requiredMembers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      requiredZoneNames: {
        serializedName: "requiredZoneNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ProtectedItemModelListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectedItemModelListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ProtectedItemModel",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ProtectedItemModelProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectedItemModelProperties",
    modelProperties: {
      policyName: {
        constraints: {
          MinLength: 1,
        },
        serializedName: "policyName",
        required: true,
        type: {
          name: "String",
        },
      },
      replicationExtensionName: {
        constraints: {
          MinLength: 1,
        },
        serializedName: "replicationExtensionName",
        required: true,
        type: {
          name: "String",
        },
      },
      correlationId: {
        serializedName: "correlationId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      protectionState: {
        serializedName: "protectionState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      protectionStateDescription: {
        serializedName: "protectionStateDescription",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      testFailoverState: {
        serializedName: "testFailoverState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      testFailoverStateDescription: {
        serializedName: "testFailoverStateDescription",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      resynchronizationState: {
        serializedName: "resynchronizationState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      fabricObjectId: {
        serializedName: "fabricObjectId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      fabricObjectName: {
        serializedName: "fabricObjectName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      sourceFabricProviderId: {
        serializedName: "sourceFabricProviderId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      targetFabricProviderId: {
        serializedName: "targetFabricProviderId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      fabricId: {
        serializedName: "fabricId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      targetFabricId: {
        serializedName: "targetFabricId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      fabricAgentId: {
        serializedName: "fabricAgentId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      targetFabricAgentId: {
        serializedName: "targetFabricAgentId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      resyncRequired: {
        serializedName: "resyncRequired",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      lastSuccessfulPlannedFailoverTime: {
        serializedName: "lastSuccessfulPlannedFailoverTime",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      lastSuccessfulUnplannedFailoverTime: {
        serializedName: "lastSuccessfulUnplannedFailoverTime",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      lastSuccessfulTestFailoverTime: {
        serializedName: "lastSuccessfulTestFailoverTime",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      currentJob: {
        serializedName: "currentJob",
        type: {
          name: "Composite",
          className: "ProtectedItemJobProperties",
        },
      },
      allowedJobs: {
        serializedName: "allowedJobs",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      lastFailedEnableProtectionJob: {
        serializedName: "lastFailedEnableProtectionJob",
        type: {
          name: "Composite",
          className: "ProtectedItemJobProperties",
        },
      },
      lastFailedPlannedFailoverJob: {
        serializedName: "lastFailedPlannedFailoverJob",
        type: {
          name: "Composite",
          className: "ProtectedItemJobProperties",
        },
      },
      lastTestFailoverJob: {
        serializedName: "lastTestFailoverJob",
        type: {
          name: "Composite",
          className: "ProtectedItemJobProperties",
        },
      },
      replicationHealth: {
        serializedName: "replicationHealth",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      healthErrors: {
        serializedName: "healthErrors",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HealthErrorModel",
            },
          },
        },
      },
      customProperties: {
        serializedName: "customProperties",
        type: {
          name: "Composite",
          className: "ProtectedItemModelCustomProperties",
        },
      },
    },
  },
};

export const ProtectedItemJobProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectedItemJobProperties",
    modelProperties: {
      scenarioName: {
        serializedName: "scenarioName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      displayName: {
        serializedName: "displayName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      state: {
        serializedName: "state",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      startTime: {
        serializedName: "startTime",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      endTime: {
        serializedName: "endTime",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const ProtectedItemModelCustomProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectedItemModelCustomProperties",
    uberParent: "ProtectedItemModelCustomProperties",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType",
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ProtectedItemModelUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectedItemModelUpdate",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ProtectedItemModelPropertiesUpdate",
        },
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData",
        },
      },
    },
  },
};

export const ProtectedItemModelPropertiesUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectedItemModelPropertiesUpdate",
    modelProperties: {
      customProperties: {
        serializedName: "customProperties",
        type: {
          name: "Composite",
          className: "ProtectedItemModelCustomPropertiesUpdate",
        },
      },
    },
  },
};

export const ProtectedItemModelCustomPropertiesUpdate: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "ProtectedItemModelCustomPropertiesUpdate",
      uberParent: "ProtectedItemModelCustomPropertiesUpdate",
      polymorphicDiscriminator: {
        serializedName: "instanceType",
        clientName: "instanceType",
      },
      modelProperties: {
        instanceType: {
          serializedName: "instanceType",
          required: true,
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const PlannedFailoverModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PlannedFailoverModel",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "PlannedFailoverModelProperties",
        },
      },
    },
  },
};

export const PlannedFailoverModelProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PlannedFailoverModelProperties",
    modelProperties: {
      customProperties: {
        serializedName: "customProperties",
        type: {
          name: "Composite",
          className: "PlannedFailoverModelCustomProperties",
        },
      },
    },
  },
};

export const PlannedFailoverModelCustomProperties: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "PlannedFailoverModelCustomProperties",
      uberParent: "PlannedFailoverModelCustomProperties",
      polymorphicDiscriminator: {
        serializedName: "instanceType",
        clientName: "instanceType",
      },
      modelProperties: {
        instanceType: {
          serializedName: "instanceType",
          required: true,
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const RecoveryPointModelListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecoveryPointModelListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RecoveryPointModel",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const RecoveryPointModelProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecoveryPointModelProperties",
    modelProperties: {
      recoveryPointTime: {
        serializedName: "recoveryPointTime",
        required: true,
        type: {
          name: "DateTime",
        },
      },
      recoveryPointType: {
        serializedName: "recoveryPointType",
        required: true,
        type: {
          name: "String",
        },
      },
      customProperties: {
        serializedName: "customProperties",
        type: {
          name: "Composite",
          className: "RecoveryPointModelCustomProperties",
        },
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const RecoveryPointModelCustomProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecoveryPointModelCustomProperties",
    uberParent: "RecoveryPointModelCustomProperties",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType",
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ReplicationExtensionModelListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReplicationExtensionModelListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ReplicationExtensionModel",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ReplicationExtensionModelProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReplicationExtensionModelProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      customProperties: {
        serializedName: "customProperties",
        type: {
          name: "Composite",
          className: "ReplicationExtensionModelCustomProperties",
        },
      },
    },
  },
};

export const ReplicationExtensionModelCustomProperties: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "ReplicationExtensionModelCustomProperties",
      uberParent: "ReplicationExtensionModelCustomProperties",
      polymorphicDiscriminator: {
        serializedName: "instanceType",
        clientName: "instanceType",
      },
      modelProperties: {
        instanceType: {
          serializedName: "instanceType",
          required: true,
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const PolicyModelListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PolicyModelListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PolicyModel",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PolicyModelProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PolicyModelProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      customProperties: {
        serializedName: "customProperties",
        type: {
          name: "Composite",
          className: "PolicyModelCustomProperties",
        },
      },
    },
  },
};

export const PolicyModelCustomProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PolicyModelCustomProperties",
    uberParent: "PolicyModelCustomProperties",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType",
    },
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AzStackHCIClusterProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzStackHCIClusterProperties",
    modelProperties: {
      clusterName: {
        constraints: {
          MinLength: 1,
        },
        serializedName: "clusterName",
        required: true,
        type: {
          name: "String",
        },
      },
      resourceName: {
        constraints: {
          MinLength: 1,
        },
        serializedName: "resourceName",
        required: true,
        type: {
          name: "String",
        },
      },
      storageAccountName: {
        constraints: {
          MinLength: 1,
        },
        serializedName: "storageAccountName",
        required: true,
        type: {
          name: "String",
        },
      },
      storageContainers: {
        serializedName: "storageContainers",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageContainerProperties",
            },
          },
        },
      },
    },
  },
};

export const StorageContainerProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageContainerProperties",
    modelProperties: {
      name: {
        constraints: {
          MinLength: 1,
        },
        serializedName: "name",
        required: true,
        type: {
          name: "String",
        },
      },
      clusterSharedVolumePath: {
        constraints: {
          MinLength: 1,
        },
        serializedName: "clusterSharedVolumePath",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const DiskControllerInputs: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiskControllerInputs",
    modelProperties: {
      controllerName: {
        constraints: {
          MinLength: 1,
        },
        serializedName: "controllerName",
        required: true,
        type: {
          name: "String",
        },
      },
      controllerId: {
        serializedName: "controllerId",
        required: true,
        type: {
          name: "Number",
        },
      },
      controllerLocation: {
        serializedName: "controllerLocation",
        required: true,
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const FailoverProtectedItemProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FailoverProtectedItemProperties",
    modelProperties: {
      protectedItemName: {
        serializedName: "protectedItemName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      vmName: {
        serializedName: "vmName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      testVmName: {
        serializedName: "testVmName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      recoveryPointId: {
        serializedName: "recoveryPointId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      recoveryPointTime: {
        serializedName: "recoveryPointTime",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      networkName: {
        serializedName: "networkName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      subnet: {
        serializedName: "subnet",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const HyperVToAzStackHCIDiskInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HyperVToAzStackHCIDiskInput",
    modelProperties: {
      diskId: {
        constraints: {
          MinLength: 1,
        },
        serializedName: "diskId",
        required: true,
        type: {
          name: "String",
        },
      },
      storageContainerId: {
        serializedName: "storageContainerId",
        type: {
          name: "String",
        },
      },
      isDynamic: {
        serializedName: "isDynamic",
        type: {
          name: "Boolean",
        },
      },
      diskSizeGB: {
        serializedName: "diskSizeGB",
        required: true,
        type: {
          name: "Number",
        },
      },
      diskFileFormat: {
        constraints: {
          MinLength: 1,
        },
        serializedName: "diskFileFormat",
        required: true,
        type: {
          name: "String",
        },
      },
      isOsDisk: {
        serializedName: "isOsDisk",
        required: true,
        type: {
          name: "Boolean",
        },
      },
      diskBlockSize: {
        serializedName: "diskBlockSize",
        type: {
          name: "Number",
        },
      },
      diskLogicalSectorSize: {
        serializedName: "diskLogicalSectorSize",
        type: {
          name: "Number",
        },
      },
      diskPhysicalSectorSize: {
        serializedName: "diskPhysicalSectorSize",
        type: {
          name: "Number",
        },
      },
      diskIdentifier: {
        serializedName: "diskIdentifier",
        type: {
          name: "String",
        },
      },
      diskController: {
        serializedName: "diskController",
        type: {
          name: "Composite",
          className: "DiskControllerInputs",
        },
      },
    },
  },
};

export const HyperVToAzStackHCINicInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HyperVToAzStackHCINicInput",
    modelProperties: {
      nicId: {
        constraints: {
          MinLength: 1,
        },
        serializedName: "nicId",
        required: true,
        type: {
          name: "String",
        },
      },
      networkName: {
        serializedName: "networkName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      targetNetworkId: {
        serializedName: "targetNetworkId",
        type: {
          name: "String",
        },
      },
      testNetworkId: {
        serializedName: "testNetworkId",
        type: {
          name: "String",
        },
      },
      selectionTypeForFailover: {
        serializedName: "selectionTypeForFailover",
        required: true,
        type: {
          name: "String",
        },
      },
      isStaticIpMigrationEnabled: {
        serializedName: "isStaticIpMigrationEnabled",
        type: {
          name: "Boolean",
        },
      },
      isMacMigrationEnabled: {
        serializedName: "isMacMigrationEnabled",
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const HyperVToAzStackHCIProtectedDiskProperties: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "HyperVToAzStackHCIProtectedDiskProperties",
      modelProperties: {
        storageContainerId: {
          serializedName: "storageContainerId",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        storageContainerLocalPath: {
          serializedName: "storageContainerLocalPath",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        sourceDiskId: {
          serializedName: "sourceDiskId",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        sourceDiskName: {
          serializedName: "sourceDiskName",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        seedDiskName: {
          serializedName: "seedDiskName",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        testMigrateDiskName: {
          serializedName: "testMigrateDiskName",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        migrateDiskName: {
          serializedName: "migrateDiskName",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        isOsDisk: {
          serializedName: "isOsDisk",
          readOnly: true,
          type: {
            name: "Boolean",
          },
        },
        capacityInBytes: {
          serializedName: "capacityInBytes",
          readOnly: true,
          type: {
            name: "Number",
          },
        },
        isDynamic: {
          serializedName: "isDynamic",
          readOnly: true,
          type: {
            name: "Boolean",
          },
        },
        diskType: {
          serializedName: "diskType",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        diskBlockSize: {
          serializedName: "diskBlockSize",
          readOnly: true,
          type: {
            name: "Number",
          },
        },
        diskLogicalSectorSize: {
          serializedName: "diskLogicalSectorSize",
          readOnly: true,
          type: {
            name: "Number",
          },
        },
        diskPhysicalSectorSize: {
          serializedName: "diskPhysicalSectorSize",
          readOnly: true,
          type: {
            name: "Number",
          },
        },
      },
    },
  };

export const ProtectedItemDynamicMemoryConfig: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectedItemDynamicMemoryConfig",
    modelProperties: {
      maximumMemoryInMegaBytes: {
        serializedName: "maximumMemoryInMegaBytes",
        required: true,
        type: {
          name: "Number",
        },
      },
      minimumMemoryInMegaBytes: {
        serializedName: "minimumMemoryInMegaBytes",
        required: true,
        type: {
          name: "Number",
        },
      },
      targetMemoryBufferPercentage: {
        serializedName: "targetMemoryBufferPercentage",
        required: true,
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const HyperVToAzStackHCIProtectedNicProperties: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "HyperVToAzStackHCIProtectedNicProperties",
      modelProperties: {
        nicId: {
          serializedName: "nicId",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        macAddress: {
          serializedName: "macAddress",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        networkName: {
          serializedName: "networkName",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        targetNetworkId: {
          serializedName: "targetNetworkId",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        testNetworkId: {
          serializedName: "testNetworkId",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        selectionTypeForFailover: {
          serializedName: "selectionTypeForFailover",
          readOnly: true,
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const VMwareToAzStackHCIDiskInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VMwareToAzStackHCIDiskInput",
    modelProperties: {
      diskId: {
        constraints: {
          MinLength: 1,
        },
        serializedName: "diskId",
        required: true,
        type: {
          name: "String",
        },
      },
      storageContainerId: {
        serializedName: "storageContainerId",
        type: {
          name: "String",
        },
      },
      isDynamic: {
        serializedName: "isDynamic",
        type: {
          name: "Boolean",
        },
      },
      diskSizeGB: {
        serializedName: "diskSizeGB",
        required: true,
        type: {
          name: "Number",
        },
      },
      diskFileFormat: {
        constraints: {
          MinLength: 1,
        },
        serializedName: "diskFileFormat",
        required: true,
        type: {
          name: "String",
        },
      },
      isOsDisk: {
        serializedName: "isOsDisk",
        required: true,
        type: {
          name: "Boolean",
        },
      },
      diskBlockSize: {
        serializedName: "diskBlockSize",
        type: {
          name: "Number",
        },
      },
      diskLogicalSectorSize: {
        serializedName: "diskLogicalSectorSize",
        type: {
          name: "Number",
        },
      },
      diskPhysicalSectorSize: {
        serializedName: "diskPhysicalSectorSize",
        type: {
          name: "Number",
        },
      },
      diskIdentifier: {
        serializedName: "diskIdentifier",
        type: {
          name: "String",
        },
      },
      diskController: {
        serializedName: "diskController",
        type: {
          name: "Composite",
          className: "DiskControllerInputs",
        },
      },
    },
  },
};

export const VMwareToAzStackHCINicInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VMwareToAzStackHCINicInput",
    modelProperties: {
      nicId: {
        constraints: {
          MinLength: 1,
        },
        serializedName: "nicId",
        required: true,
        type: {
          name: "String",
        },
      },
      label: {
        constraints: {
          MinLength: 1,
        },
        serializedName: "label",
        required: true,
        type: {
          name: "String",
        },
      },
      networkName: {
        serializedName: "networkName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      targetNetworkId: {
        serializedName: "targetNetworkId",
        type: {
          name: "String",
        },
      },
      testNetworkId: {
        serializedName: "testNetworkId",
        type: {
          name: "String",
        },
      },
      selectionTypeForFailover: {
        serializedName: "selectionTypeForFailover",
        required: true,
        type: {
          name: "String",
        },
      },
      isStaticIpMigrationEnabled: {
        serializedName: "isStaticIpMigrationEnabled",
        type: {
          name: "Boolean",
        },
      },
      isMacMigrationEnabled: {
        serializedName: "isMacMigrationEnabled",
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const VMwareToAzStackHCIProtectedDiskProperties: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "VMwareToAzStackHCIProtectedDiskProperties",
      modelProperties: {
        storageContainerId: {
          serializedName: "storageContainerId",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        storageContainerLocalPath: {
          serializedName: "storageContainerLocalPath",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        sourceDiskId: {
          serializedName: "sourceDiskId",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        sourceDiskName: {
          serializedName: "sourceDiskName",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        seedDiskName: {
          serializedName: "seedDiskName",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        testMigrateDiskName: {
          serializedName: "testMigrateDiskName",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        migrateDiskName: {
          serializedName: "migrateDiskName",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        isOsDisk: {
          serializedName: "isOsDisk",
          readOnly: true,
          type: {
            name: "Boolean",
          },
        },
        capacityInBytes: {
          serializedName: "capacityInBytes",
          readOnly: true,
          type: {
            name: "Number",
          },
        },
        isDynamic: {
          serializedName: "isDynamic",
          readOnly: true,
          type: {
            name: "Boolean",
          },
        },
        diskType: {
          serializedName: "diskType",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        diskBlockSize: {
          serializedName: "diskBlockSize",
          readOnly: true,
          type: {
            name: "Number",
          },
        },
        diskLogicalSectorSize: {
          serializedName: "diskLogicalSectorSize",
          readOnly: true,
          type: {
            name: "Number",
          },
        },
        diskPhysicalSectorSize: {
          serializedName: "diskPhysicalSectorSize",
          readOnly: true,
          type: {
            name: "Number",
          },
        },
      },
    },
  };

export const VMwareToAzStackHCIProtectedNicProperties: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "VMwareToAzStackHCIProtectedNicProperties",
      modelProperties: {
        nicId: {
          serializedName: "nicId",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        macAddress: {
          serializedName: "macAddress",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        label: {
          serializedName: "label",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        isPrimaryNic: {
          serializedName: "isPrimaryNic",
          type: {
            name: "Boolean",
          },
        },
        networkName: {
          serializedName: "networkName",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        targetNetworkId: {
          serializedName: "targetNetworkId",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        testNetworkId: {
          serializedName: "testNetworkId",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        selectionTypeForFailover: {
          serializedName: "selectionTypeForFailover",
          readOnly: true,
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const AzStackHCIFabricModelCustomProperties: coreClient.CompositeMapper =
  {
    serializedName: "AzStackHCI",
    type: {
      name: "Composite",
      className: "AzStackHCIFabricModelCustomProperties",
      uberParent: "FabricModelCustomProperties",
      polymorphicDiscriminator:
        FabricModelCustomProperties.type.polymorphicDiscriminator,
      modelProperties: {
        ...FabricModelCustomProperties.type.modelProperties,
        azStackHciSiteId: {
          serializedName: "azStackHciSiteId",
          required: true,
          type: {
            name: "String",
          },
        },
        applianceName: {
          serializedName: "applianceName",
          readOnly: true,
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "String",
              },
            },
          },
        },
        cluster: {
          serializedName: "cluster",
          type: {
            name: "Composite",
            className: "AzStackHCIClusterProperties",
          },
        },
        fabricResourceId: {
          serializedName: "fabricResourceId",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        fabricContainerId: {
          serializedName: "fabricContainerId",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        migrationSolutionId: {
          serializedName: "migrationSolutionId",
          required: true,
          type: {
            name: "String",
          },
        },
        migrationHubUri: {
          serializedName: "migrationHubUri",
          readOnly: true,
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const HyperVMigrateFabricModelCustomProperties: coreClient.CompositeMapper =
  {
    serializedName: "HyperVMigrate",
    type: {
      name: "Composite",
      className: "HyperVMigrateFabricModelCustomProperties",
      uberParent: "FabricModelCustomProperties",
      polymorphicDiscriminator:
        FabricModelCustomProperties.type.polymorphicDiscriminator,
      modelProperties: {
        ...FabricModelCustomProperties.type.modelProperties,
        hyperVSiteId: {
          serializedName: "hyperVSiteId",
          required: true,
          type: {
            name: "String",
          },
        },
        fabricResourceId: {
          serializedName: "fabricResourceId",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        fabricContainerId: {
          serializedName: "fabricContainerId",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        migrationSolutionId: {
          serializedName: "migrationSolutionId",
          required: true,
          type: {
            name: "String",
          },
        },
        migrationHubUri: {
          serializedName: "migrationHubUri",
          readOnly: true,
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const VMwareMigrateFabricModelCustomProperties: coreClient.CompositeMapper =
  {
    serializedName: "VMwareMigrate",
    type: {
      name: "Composite",
      className: "VMwareMigrateFabricModelCustomProperties",
      uberParent: "FabricModelCustomProperties",
      polymorphicDiscriminator:
        FabricModelCustomProperties.type.polymorphicDiscriminator,
      modelProperties: {
        ...FabricModelCustomProperties.type.modelProperties,
        vmwareSiteId: {
          serializedName: "vmwareSiteId",
          required: true,
          type: {
            name: "String",
          },
        },
        migrationSolutionId: {
          serializedName: "migrationSolutionId",
          required: true,
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties,
    },
  },
};

export const VMwareFabricAgentModelCustomProperties: coreClient.CompositeMapper =
  {
    serializedName: "VMware",
    type: {
      name: "Composite",
      className: "VMwareFabricAgentModelCustomProperties",
      uberParent: "FabricAgentModelCustomProperties",
      polymorphicDiscriminator:
        FabricAgentModelCustomProperties.type.polymorphicDiscriminator,
      modelProperties: {
        ...FabricAgentModelCustomProperties.type.modelProperties,
        biosId: {
          constraints: {
            MinLength: 1,
          },
          serializedName: "biosId",
          required: true,
          type: {
            name: "String",
          },
        },
        marsAuthenticationIdentity: {
          serializedName: "marsAuthenticationIdentity",
          type: {
            name: "Composite",
            className: "IdentityModel",
          },
        },
      },
    },
  };

export const HyperVToAzStackHCIEventModelCustomProperties: coreClient.CompositeMapper =
  {
    serializedName: "HyperVToAzStackHCI",
    type: {
      name: "Composite",
      className: "HyperVToAzStackHCIEventModelCustomProperties",
      uberParent: "EventModelCustomProperties",
      polymorphicDiscriminator:
        EventModelCustomProperties.type.polymorphicDiscriminator,
      modelProperties: {
        ...EventModelCustomProperties.type.modelProperties,
        eventSourceFriendlyName: {
          serializedName: "eventSourceFriendlyName",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        protectedItemFriendlyName: {
          serializedName: "protectedItemFriendlyName",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        sourceApplianceName: {
          serializedName: "sourceApplianceName",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        targetApplianceName: {
          serializedName: "targetApplianceName",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        serverType: {
          serializedName: "serverType",
          readOnly: true,
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const VMwareToAzStackHCIEventModelCustomProperties: coreClient.CompositeMapper =
  {
    serializedName: "VMwareToAzStackHCI",
    type: {
      name: "Composite",
      className: "VMwareToAzStackHCIEventModelCustomProperties",
      uberParent: "EventModelCustomProperties",
      polymorphicDiscriminator:
        EventModelCustomProperties.type.polymorphicDiscriminator,
      modelProperties: {
        ...EventModelCustomProperties.type.modelProperties,
        eventSourceFriendlyName: {
          serializedName: "eventSourceFriendlyName",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        protectedItemFriendlyName: {
          serializedName: "protectedItemFriendlyName",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        sourceApplianceName: {
          serializedName: "sourceApplianceName",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        targetApplianceName: {
          serializedName: "targetApplianceName",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        serverType: {
          serializedName: "serverType",
          readOnly: true,
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const FailoverJobModelCustomProperties: coreClient.CompositeMapper = {
  serializedName: "FailoverJobDetails",
  type: {
    name: "Composite",
    className: "FailoverJobModelCustomProperties",
    uberParent: "JobModelCustomProperties",
    polymorphicDiscriminator:
      JobModelCustomProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...JobModelCustomProperties.type.modelProperties,
      protectedItemDetails: {
        serializedName: "protectedItemDetails",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FailoverProtectedItemProperties",
            },
          },
        },
      },
    },
  },
};

export const TestFailoverCleanupJobModelCustomProperties: coreClient.CompositeMapper =
  {
    serializedName: "TestFailoverCleanupJobDetails",
    type: {
      name: "Composite",
      className: "TestFailoverCleanupJobModelCustomProperties",
      uberParent: "JobModelCustomProperties",
      polymorphicDiscriminator:
        JobModelCustomProperties.type.polymorphicDiscriminator,
      modelProperties: {
        ...JobModelCustomProperties.type.modelProperties,
        comments: {
          serializedName: "comments",
          readOnly: true,
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const TestFailoverJobModelCustomProperties: coreClient.CompositeMapper =
  {
    serializedName: "TestFailoverJobDetails",
    type: {
      name: "Composite",
      className: "TestFailoverJobModelCustomProperties",
      uberParent: "JobModelCustomProperties",
      polymorphicDiscriminator:
        JobModelCustomProperties.type.polymorphicDiscriminator,
      modelProperties: {
        ...JobModelCustomProperties.type.modelProperties,
        protectedItemDetails: {
          serializedName: "protectedItemDetails",
          readOnly: true,
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "Composite",
                className: "FailoverProtectedItemProperties",
              },
            },
          },
        },
      },
    },
  };

export const HyperVToAzStackHCIProtectedItemModelCustomProperties: coreClient.CompositeMapper =
  {
    serializedName: "HyperVToAzStackHCI",
    type: {
      name: "Composite",
      className: "HyperVToAzStackHCIProtectedItemModelCustomProperties",
      uberParent: "ProtectedItemModelCustomProperties",
      polymorphicDiscriminator:
        ProtectedItemModelCustomProperties.type.polymorphicDiscriminator,
      modelProperties: {
        ...ProtectedItemModelCustomProperties.type.modelProperties,
        activeLocation: {
          serializedName: "activeLocation",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        targetHciClusterId: {
          serializedName: "targetHciClusterId",
          required: true,
          type: {
            name: "String",
          },
        },
        targetArcClusterCustomLocationId: {
          serializedName: "targetArcClusterCustomLocationId",
          required: true,
          type: {
            name: "String",
          },
        },
        targetAzStackHciClusterName: {
          serializedName: "targetAzStackHciClusterName",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        fabricDiscoveryMachineId: {
          serializedName: "fabricDiscoveryMachineId",
          required: true,
          type: {
            name: "String",
          },
        },
        disksToInclude: {
          serializedName: "disksToInclude",
          required: true,
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "Composite",
                className: "HyperVToAzStackHCIDiskInput",
              },
            },
          },
        },
        nicsToInclude: {
          serializedName: "nicsToInclude",
          required: true,
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "Composite",
                className: "HyperVToAzStackHCINicInput",
              },
            },
          },
        },
        sourceVmName: {
          serializedName: "sourceVmName",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        sourceCpuCores: {
          serializedName: "sourceCpuCores",
          readOnly: true,
          type: {
            name: "Number",
          },
        },
        sourceMemoryInMegaBytes: {
          serializedName: "sourceMemoryInMegaBytes",
          readOnly: true,
          type: {
            name: "Number",
          },
        },
        targetVmName: {
          serializedName: "targetVmName",
          type: {
            name: "String",
          },
        },
        targetResourceGroupId: {
          serializedName: "targetResourceGroupId",
          required: true,
          type: {
            name: "String",
          },
        },
        storageContainerId: {
          serializedName: "storageContainerId",
          required: true,
          type: {
            name: "String",
          },
        },
        hyperVGeneration: {
          constraints: {
            MinLength: 1,
          },
          serializedName: "hyperVGeneration",
          required: true,
          type: {
            name: "String",
          },
        },
        targetNetworkId: {
          serializedName: "targetNetworkId",
          type: {
            name: "String",
          },
        },
        testNetworkId: {
          serializedName: "testNetworkId",
          type: {
            name: "String",
          },
        },
        targetCpuCores: {
          serializedName: "targetCpuCores",
          type: {
            name: "Number",
          },
        },
        isDynamicRam: {
          serializedName: "isDynamicRam",
          type: {
            name: "Boolean",
          },
        },
        dynamicMemoryConfig: {
          serializedName: "dynamicMemoryConfig",
          type: {
            name: "Composite",
            className: "ProtectedItemDynamicMemoryConfig",
          },
        },
        targetMemoryInMegaBytes: {
          serializedName: "targetMemoryInMegaBytes",
          type: {
            name: "Number",
          },
        },
        runAsAccountId: {
          constraints: {
            MinLength: 1,
          },
          serializedName: "runAsAccountId",
          required: true,
          type: {
            name: "String",
          },
        },
        sourceFabricAgentName: {
          constraints: {
            MinLength: 1,
          },
          serializedName: "sourceFabricAgentName",
          required: true,
          type: {
            name: "String",
          },
        },
        targetFabricAgentName: {
          constraints: {
            MinLength: 1,
          },
          serializedName: "targetFabricAgentName",
          required: true,
          type: {
            name: "String",
          },
        },
        sourceApplianceName: {
          serializedName: "sourceApplianceName",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        targetApplianceName: {
          serializedName: "targetApplianceName",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        osType: {
          serializedName: "osType",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        osName: {
          serializedName: "osName",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        firmwareType: {
          serializedName: "firmwareType",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        targetLocation: {
          serializedName: "targetLocation",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        customLocationRegion: {
          constraints: {
            MinLength: 1,
          },
          serializedName: "customLocationRegion",
          required: true,
          type: {
            name: "String",
          },
        },
        failoverRecoveryPointId: {
          serializedName: "failoverRecoveryPointId",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        lastRecoveryPointReceived: {
          serializedName: "lastRecoveryPointReceived",
          readOnly: true,
          type: {
            name: "DateTime",
          },
        },
        lastRecoveryPointId: {
          serializedName: "lastRecoveryPointId",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        initialReplicationProgressPercentage: {
          serializedName: "initialReplicationProgressPercentage",
          readOnly: true,
          type: {
            name: "Number",
          },
        },
        resyncProgressPercentage: {
          serializedName: "resyncProgressPercentage",
          readOnly: true,
          type: {
            name: "Number",
          },
        },
        protectedDisks: {
          serializedName: "protectedDisks",
          readOnly: true,
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "Composite",
                className: "HyperVToAzStackHCIProtectedDiskProperties",
              },
            },
          },
        },
        protectedNics: {
          serializedName: "protectedNics",
          readOnly: true,
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "Composite",
                className: "HyperVToAzStackHCIProtectedNicProperties",
              },
            },
          },
        },
        targetVmBiosId: {
          serializedName: "targetVmBiosId",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        lastReplicationUpdateTime: {
          serializedName: "lastReplicationUpdateTime",
          readOnly: true,
          type: {
            name: "DateTime",
          },
        },
      },
    },
  };

export const VMwareToAzStackHCIProtectedItemModelCustomProperties: coreClient.CompositeMapper =
  {
    serializedName: "VMwareToAzStackHCI",
    type: {
      name: "Composite",
      className: "VMwareToAzStackHCIProtectedItemModelCustomProperties",
      uberParent: "ProtectedItemModelCustomProperties",
      polymorphicDiscriminator:
        ProtectedItemModelCustomProperties.type.polymorphicDiscriminator,
      modelProperties: {
        ...ProtectedItemModelCustomProperties.type.modelProperties,
        activeLocation: {
          serializedName: "activeLocation",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        targetHciClusterId: {
          serializedName: "targetHciClusterId",
          required: true,
          type: {
            name: "String",
          },
        },
        targetArcClusterCustomLocationId: {
          serializedName: "targetArcClusterCustomLocationId",
          required: true,
          type: {
            name: "String",
          },
        },
        targetAzStackHciClusterName: {
          serializedName: "targetAzStackHciClusterName",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        storageContainerId: {
          serializedName: "storageContainerId",
          required: true,
          type: {
            name: "String",
          },
        },
        targetResourceGroupId: {
          serializedName: "targetResourceGroupId",
          required: true,
          type: {
            name: "String",
          },
        },
        targetLocation: {
          serializedName: "targetLocation",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        customLocationRegion: {
          constraints: {
            MinLength: 1,
          },
          serializedName: "customLocationRegion",
          required: true,
          type: {
            name: "String",
          },
        },
        disksToInclude: {
          serializedName: "disksToInclude",
          required: true,
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "Composite",
                className: "VMwareToAzStackHCIDiskInput",
              },
            },
          },
        },
        nicsToInclude: {
          serializedName: "nicsToInclude",
          required: true,
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "Composite",
                className: "VMwareToAzStackHCINicInput",
              },
            },
          },
        },
        protectedDisks: {
          serializedName: "protectedDisks",
          readOnly: true,
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "Composite",
                className: "VMwareToAzStackHCIProtectedDiskProperties",
              },
            },
          },
        },
        protectedNics: {
          serializedName: "protectedNics",
          readOnly: true,
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "Composite",
                className: "VMwareToAzStackHCIProtectedNicProperties",
              },
            },
          },
        },
        targetVmBiosId: {
          serializedName: "targetVmBiosId",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        targetVmName: {
          serializedName: "targetVmName",
          type: {
            name: "String",
          },
        },
        hyperVGeneration: {
          constraints: {
            MinLength: 1,
          },
          serializedName: "hyperVGeneration",
          required: true,
          type: {
            name: "String",
          },
        },
        targetNetworkId: {
          serializedName: "targetNetworkId",
          type: {
            name: "String",
          },
        },
        testNetworkId: {
          serializedName: "testNetworkId",
          type: {
            name: "String",
          },
        },
        targetCpuCores: {
          serializedName: "targetCpuCores",
          type: {
            name: "Number",
          },
        },
        isDynamicRam: {
          serializedName: "isDynamicRam",
          type: {
            name: "Boolean",
          },
        },
        dynamicMemoryConfig: {
          serializedName: "dynamicMemoryConfig",
          type: {
            name: "Composite",
            className: "ProtectedItemDynamicMemoryConfig",
          },
        },
        targetMemoryInMegaBytes: {
          serializedName: "targetMemoryInMegaBytes",
          type: {
            name: "Number",
          },
        },
        osType: {
          serializedName: "osType",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        osName: {
          serializedName: "osName",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        firmwareType: {
          serializedName: "firmwareType",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        fabricDiscoveryMachineId: {
          serializedName: "fabricDiscoveryMachineId",
          required: true,
          type: {
            name: "String",
          },
        },
        sourceVmName: {
          serializedName: "sourceVmName",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        sourceCpuCores: {
          serializedName: "sourceCpuCores",
          readOnly: true,
          type: {
            name: "Number",
          },
        },
        sourceMemoryInMegaBytes: {
          serializedName: "sourceMemoryInMegaBytes",
          readOnly: true,
          type: {
            name: "Number",
          },
        },
        runAsAccountId: {
          constraints: {
            MinLength: 1,
          },
          serializedName: "runAsAccountId",
          required: true,
          type: {
            name: "String",
          },
        },
        sourceFabricAgentName: {
          constraints: {
            MinLength: 1,
          },
          serializedName: "sourceFabricAgentName",
          required: true,
          type: {
            name: "String",
          },
        },
        targetFabricAgentName: {
          constraints: {
            MinLength: 1,
          },
          serializedName: "targetFabricAgentName",
          required: true,
          type: {
            name: "String",
          },
        },
        sourceApplianceName: {
          serializedName: "sourceApplianceName",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        targetApplianceName: {
          serializedName: "targetApplianceName",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        failoverRecoveryPointId: {
          serializedName: "failoverRecoveryPointId",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        lastRecoveryPointReceived: {
          serializedName: "lastRecoveryPointReceived",
          readOnly: true,
          type: {
            name: "DateTime",
          },
        },
        lastRecoveryPointId: {
          serializedName: "lastRecoveryPointId",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        initialReplicationProgressPercentage: {
          serializedName: "initialReplicationProgressPercentage",
          readOnly: true,
          type: {
            name: "Number",
          },
        },
        migrationProgressPercentage: {
          serializedName: "migrationProgressPercentage",
          readOnly: true,
          type: {
            name: "Number",
          },
        },
        resumeProgressPercentage: {
          serializedName: "resumeProgressPercentage",
          readOnly: true,
          type: {
            name: "Number",
          },
        },
        resyncProgressPercentage: {
          serializedName: "resyncProgressPercentage",
          readOnly: true,
          type: {
            name: "Number",
          },
        },
        resyncRetryCount: {
          serializedName: "resyncRetryCount",
          readOnly: true,
          type: {
            name: "Number",
          },
        },
        resyncRequired: {
          serializedName: "resyncRequired",
          readOnly: true,
          type: {
            name: "Boolean",
          },
        },
        resyncState: {
          serializedName: "resyncState",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        performAutoResync: {
          serializedName: "performAutoResync",
          type: {
            name: "Boolean",
          },
        },
        resumeRetryCount: {
          serializedName: "resumeRetryCount",
          readOnly: true,
          type: {
            name: "Number",
          },
        },
        lastReplicationUpdateTime: {
          serializedName: "lastReplicationUpdateTime",
          readOnly: true,
          type: {
            name: "DateTime",
          },
        },
      },
    },
  };

export const HyperVToAzStackHCIProtectedItemModelCustomPropertiesUpdate: coreClient.CompositeMapper =
  {
    serializedName: "HyperVToAzStackHCI",
    type: {
      name: "Composite",
      className: "HyperVToAzStackHCIProtectedItemModelCustomPropertiesUpdate",
      uberParent: "ProtectedItemModelCustomPropertiesUpdate",
      polymorphicDiscriminator:
        ProtectedItemModelCustomPropertiesUpdate.type.polymorphicDiscriminator,
      modelProperties: {
        ...ProtectedItemModelCustomPropertiesUpdate.type.modelProperties,
        nicsToInclude: {
          serializedName: "nicsToInclude",
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "Composite",
                className: "HyperVToAzStackHCINicInput",
              },
            },
          },
        },
        targetCpuCores: {
          serializedName: "targetCpuCores",
          type: {
            name: "Number",
          },
        },
        isDynamicRam: {
          serializedName: "isDynamicRam",
          type: {
            name: "Boolean",
          },
        },
        dynamicMemoryConfig: {
          serializedName: "dynamicMemoryConfig",
          type: {
            name: "Composite",
            className: "ProtectedItemDynamicMemoryConfig",
          },
        },
        targetMemoryInMegaBytes: {
          serializedName: "targetMemoryInMegaBytes",
          type: {
            name: "Number",
          },
        },
        osType: {
          serializedName: "osType",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const VMwareToAzStackHCIProtectedItemModelCustomPropertiesUpdate: coreClient.CompositeMapper =
  {
    serializedName: "VMwareToAzStackHCI",
    type: {
      name: "Composite",
      className: "VMwareToAzStackHCIProtectedItemModelCustomPropertiesUpdate",
      uberParent: "ProtectedItemModelCustomPropertiesUpdate",
      polymorphicDiscriminator:
        ProtectedItemModelCustomPropertiesUpdate.type.polymorphicDiscriminator,
      modelProperties: {
        ...ProtectedItemModelCustomPropertiesUpdate.type.modelProperties,
        nicsToInclude: {
          serializedName: "nicsToInclude",
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "Composite",
                className: "VMwareToAzStackHCINicInput",
              },
            },
          },
        },
        targetCpuCores: {
          serializedName: "targetCpuCores",
          type: {
            name: "Number",
          },
        },
        isDynamicRam: {
          serializedName: "isDynamicRam",
          type: {
            name: "Boolean",
          },
        },
        dynamicMemoryConfig: {
          serializedName: "dynamicMemoryConfig",
          type: {
            name: "Composite",
            className: "ProtectedItemDynamicMemoryConfig",
          },
        },
        targetMemoryInMegaBytes: {
          serializedName: "targetMemoryInMegaBytes",
          type: {
            name: "Number",
          },
        },
        osType: {
          serializedName: "osType",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const HyperVToAzStackHCIPlannedFailoverModelCustomProperties: coreClient.CompositeMapper =
  {
    serializedName: "HyperVToAzStackHCI",
    type: {
      name: "Composite",
      className: "HyperVToAzStackHCIPlannedFailoverModelCustomProperties",
      uberParent: "PlannedFailoverModelCustomProperties",
      polymorphicDiscriminator:
        PlannedFailoverModelCustomProperties.type.polymorphicDiscriminator,
      modelProperties: {
        ...PlannedFailoverModelCustomProperties.type.modelProperties,
        shutdownSourceVM: {
          serializedName: "shutdownSourceVM",
          required: true,
          type: {
            name: "Boolean",
          },
        },
      },
    },
  };

export const VMwareToAzStackHCIPlannedFailoverModelCustomProperties: coreClient.CompositeMapper =
  {
    serializedName: "VMwareToAzStackHCI",
    type: {
      name: "Composite",
      className: "VMwareToAzStackHCIPlannedFailoverModelCustomProperties",
      uberParent: "PlannedFailoverModelCustomProperties",
      polymorphicDiscriminator:
        PlannedFailoverModelCustomProperties.type.polymorphicDiscriminator,
      modelProperties: {
        ...PlannedFailoverModelCustomProperties.type.modelProperties,
        shutdownSourceVM: {
          serializedName: "shutdownSourceVM",
          required: true,
          type: {
            name: "Boolean",
          },
        },
      },
    },
  };

export const HyperVToAzStackHCIRecoveryPointModelCustomProperties: coreClient.CompositeMapper =
  {
    serializedName: "HyperVToAzStackHCI",
    type: {
      name: "Composite",
      className: "HyperVToAzStackHCIRecoveryPointModelCustomProperties",
      uberParent: "RecoveryPointModelCustomProperties",
      polymorphicDiscriminator:
        RecoveryPointModelCustomProperties.type.polymorphicDiscriminator,
      modelProperties: {
        ...RecoveryPointModelCustomProperties.type.modelProperties,
        diskIds: {
          serializedName: "diskIds",
          readOnly: true,
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "String",
              },
            },
          },
        },
      },
    },
  };

export const VMwareToAzStackHCIRecoveryPointModelCustomProperties: coreClient.CompositeMapper =
  {
    serializedName: "VMwareToAzStackHCIRecoveryPointModelCustomProperties",
    type: {
      name: "Composite",
      className: "VMwareToAzStackHCIRecoveryPointModelCustomProperties",
      uberParent: "RecoveryPointModelCustomProperties",
      polymorphicDiscriminator:
        RecoveryPointModelCustomProperties.type.polymorphicDiscriminator,
      modelProperties: {
        ...RecoveryPointModelCustomProperties.type.modelProperties,
        diskIds: {
          serializedName: "diskIds",
          readOnly: true,
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "String",
              },
            },
          },
        },
      },
    },
  };

export const HyperVToAzStackHCIReplicationExtensionModelCustomProperties: coreClient.CompositeMapper =
  {
    serializedName: "HyperVToAzStackHCI",
    type: {
      name: "Composite",
      className: "HyperVToAzStackHCIReplicationExtensionModelCustomProperties",
      uberParent: "ReplicationExtensionModelCustomProperties",
      polymorphicDiscriminator:
        ReplicationExtensionModelCustomProperties.type.polymorphicDiscriminator,
      modelProperties: {
        ...ReplicationExtensionModelCustomProperties.type.modelProperties,
        hyperVFabricArmId: {
          serializedName: "hyperVFabricArmId",
          required: true,
          type: {
            name: "String",
          },
        },
        hyperVSiteId: {
          serializedName: "hyperVSiteId",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        azStackHciFabricArmId: {
          serializedName: "azStackHciFabricArmId",
          required: true,
          type: {
            name: "String",
          },
        },
        azStackHciSiteId: {
          serializedName: "azStackHciSiteId",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        storageAccountId: {
          serializedName: "storageAccountId",
          type: {
            name: "String",
          },
        },
        storageAccountSasSecretName: {
          serializedName: "storageAccountSasSecretName",
          type: {
            name: "String",
          },
        },
        asrServiceUri: {
          serializedName: "asrServiceUri",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        rcmServiceUri: {
          serializedName: "rcmServiceUri",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        gatewayServiceUri: {
          serializedName: "gatewayServiceUri",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        sourceGatewayServiceId: {
          serializedName: "sourceGatewayServiceId",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        targetGatewayServiceId: {
          serializedName: "targetGatewayServiceId",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        sourceStorageContainerName: {
          serializedName: "sourceStorageContainerName",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        targetStorageContainerName: {
          serializedName: "targetStorageContainerName",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        resourceLocation: {
          serializedName: "resourceLocation",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        subscriptionId: {
          serializedName: "subscriptionId",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        resourceGroup: {
          serializedName: "resourceGroup",
          readOnly: true,
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const VMwareToAzStackHCIReplicationExtensionModelCustomProperties: coreClient.CompositeMapper =
  {
    serializedName: "VMwareToAzStackHCI",
    type: {
      name: "Composite",
      className: "VMwareToAzStackHCIReplicationExtensionModelCustomProperties",
      uberParent: "ReplicationExtensionModelCustomProperties",
      polymorphicDiscriminator:
        ReplicationExtensionModelCustomProperties.type.polymorphicDiscriminator,
      modelProperties: {
        ...ReplicationExtensionModelCustomProperties.type.modelProperties,
        vmwareFabricArmId: {
          serializedName: "vmwareFabricArmId",
          required: true,
          type: {
            name: "String",
          },
        },
        vmwareSiteId: {
          serializedName: "vmwareSiteId",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        azStackHciFabricArmId: {
          serializedName: "azStackHciFabricArmId",
          required: true,
          type: {
            name: "String",
          },
        },
        azStackHciSiteId: {
          serializedName: "azStackHciSiteId",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        storageAccountId: {
          serializedName: "storageAccountId",
          type: {
            name: "String",
          },
        },
        storageAccountSasSecretName: {
          serializedName: "storageAccountSasSecretName",
          type: {
            name: "String",
          },
        },
        asrServiceUri: {
          serializedName: "asrServiceUri",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        rcmServiceUri: {
          serializedName: "rcmServiceUri",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        gatewayServiceUri: {
          serializedName: "gatewayServiceUri",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        sourceGatewayServiceId: {
          serializedName: "sourceGatewayServiceId",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        targetGatewayServiceId: {
          serializedName: "targetGatewayServiceId",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        sourceStorageContainerName: {
          serializedName: "sourceStorageContainerName",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        targetStorageContainerName: {
          serializedName: "targetStorageContainerName",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        resourceLocation: {
          serializedName: "resourceLocation",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        subscriptionId: {
          serializedName: "subscriptionId",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        resourceGroup: {
          serializedName: "resourceGroup",
          readOnly: true,
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const HyperVToAzStackHCIPolicyModelCustomProperties: coreClient.CompositeMapper =
  {
    serializedName: "HyperVToAzStackHCI",
    type: {
      name: "Composite",
      className: "HyperVToAzStackHCIPolicyModelCustomProperties",
      uberParent: "PolicyModelCustomProperties",
      polymorphicDiscriminator:
        PolicyModelCustomProperties.type.polymorphicDiscriminator,
      modelProperties: {
        ...PolicyModelCustomProperties.type.modelProperties,
        recoveryPointHistoryInMinutes: {
          serializedName: "recoveryPointHistoryInMinutes",
          required: true,
          type: {
            name: "Number",
          },
        },
        crashConsistentFrequencyInMinutes: {
          serializedName: "crashConsistentFrequencyInMinutes",
          required: true,
          type: {
            name: "Number",
          },
        },
        appConsistentFrequencyInMinutes: {
          serializedName: "appConsistentFrequencyInMinutes",
          required: true,
          type: {
            name: "Number",
          },
        },
      },
    },
  };

export const VMwareToAzStackHCIPolicyModelCustomProperties: coreClient.CompositeMapper =
  {
    serializedName: "VMwareToAzStackHCI",
    type: {
      name: "Composite",
      className: "VMwareToAzStackHCIPolicyModelCustomProperties",
      uberParent: "PolicyModelCustomProperties",
      polymorphicDiscriminator:
        PolicyModelCustomProperties.type.polymorphicDiscriminator,
      modelProperties: {
        ...PolicyModelCustomProperties.type.modelProperties,
        recoveryPointHistoryInMinutes: {
          serializedName: "recoveryPointHistoryInMinutes",
          required: true,
          type: {
            name: "Number",
          },
        },
        crashConsistentFrequencyInMinutes: {
          serializedName: "crashConsistentFrequencyInMinutes",
          required: true,
          type: {
            name: "Number",
          },
        },
        appConsistentFrequencyInMinutes: {
          serializedName: "appConsistentFrequencyInMinutes",
          required: true,
          type: {
            name: "Number",
          },
        },
      },
    },
  };

export const FabricModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FabricModel",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "FabricModelProperties",
        },
      },
    },
  },
};

export const VaultModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VaultModel",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "VaultModelProperties",
        },
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity",
        },
      },
    },
  },
};

export const FabricAgentModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FabricAgentModel",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "FabricAgentModelProperties",
        },
      },
    },
  },
};

export const EmailConfigurationModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EmailConfigurationModel",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "EmailConfigurationModelProperties",
        },
      },
    },
  },
};

export const EventModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EventModel",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "EventModelProperties",
        },
      },
    },
  },
};

export const JobModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobModel",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "JobModelProperties",
        },
      },
    },
  },
};

export const PrivateEndpointConnectionProxy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionProxy",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "PrivateEndpointConnectionProxyProperties",
        },
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PrivateEndpointConnection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnection",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "PrivateEndpointConnectionResponseProperties",
        },
      },
    },
  },
};

export const PrivateLinkResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResource",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "PrivateLinkResourceProperties",
        },
      },
    },
  },
};

export const ProtectedItemModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectedItemModel",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ProtectedItemModelProperties",
        },
      },
    },
  },
};

export const RecoveryPointModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecoveryPointModel",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "RecoveryPointModelProperties",
        },
      },
    },
  },
};

export const ReplicationExtensionModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReplicationExtensionModel",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ReplicationExtensionModelProperties",
        },
      },
    },
  },
};

export const PolicyModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PolicyModel",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "PolicyModelProperties",
        },
      },
    },
  },
};

export const FabricCreateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FabricCreateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const FabricUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FabricUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const FabricDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FabricDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const VaultCreateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VaultCreateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const VaultUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VaultUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const VaultDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VaultDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const FabricAgentCreateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FabricAgentCreateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const FabricAgentDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FabricAgentDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const PrivateEndpointConnectionProxiesDeleteHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "PrivateEndpointConnectionProxiesDeleteHeaders",
      modelProperties: {
        location: {
          serializedName: "location",
          type: {
            name: "String",
          },
        },
        retryAfter: {
          serializedName: "retry-after",
          type: {
            name: "Number",
          },
        },
      },
    },
  };

export const PrivateEndpointConnectionsDeleteHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "PrivateEndpointConnectionsDeleteHeaders",
      modelProperties: {
        location: {
          serializedName: "location",
          type: {
            name: "String",
          },
        },
        retryAfter: {
          serializedName: "retry-after",
          type: {
            name: "Number",
          },
        },
      },
    },
  };

export const ProtectedItemCreateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectedItemCreateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const ProtectedItemUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectedItemUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const ProtectedItemDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectedItemDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const ProtectedItemPlannedFailoverHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectedItemPlannedFailoverHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const ReplicationExtensionCreateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReplicationExtensionCreateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const ReplicationExtensionDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReplicationExtensionDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const PolicyCreateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PolicyCreateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const PolicyDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PolicyDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export let discriminators = {
  FabricModelCustomProperties: FabricModelCustomProperties,
  FabricAgentModelCustomProperties: FabricAgentModelCustomProperties,
  EventModelCustomProperties: EventModelCustomProperties,
  JobModelCustomProperties: JobModelCustomProperties,
  ProtectedItemModelCustomProperties: ProtectedItemModelCustomProperties,
  ProtectedItemModelCustomPropertiesUpdate:
    ProtectedItemModelCustomPropertiesUpdate,
  PlannedFailoverModelCustomProperties: PlannedFailoverModelCustomProperties,
  RecoveryPointModelCustomProperties: RecoveryPointModelCustomProperties,
  ReplicationExtensionModelCustomProperties:
    ReplicationExtensionModelCustomProperties,
  PolicyModelCustomProperties: PolicyModelCustomProperties,
  "FabricModelCustomProperties.AzStackHCI":
    AzStackHCIFabricModelCustomProperties,
  "FabricModelCustomProperties.HyperVMigrate":
    HyperVMigrateFabricModelCustomProperties,
  "FabricModelCustomProperties.VMwareMigrate":
    VMwareMigrateFabricModelCustomProperties,
  "FabricAgentModelCustomProperties.VMware":
    VMwareFabricAgentModelCustomProperties,
  "EventModelCustomProperties.HyperVToAzStackHCI":
    HyperVToAzStackHCIEventModelCustomProperties,
  "EventModelCustomProperties.VMwareToAzStackHCI":
    VMwareToAzStackHCIEventModelCustomProperties,
  "JobModelCustomProperties.FailoverJobDetails":
    FailoverJobModelCustomProperties,
  "JobModelCustomProperties.TestFailoverCleanupJobDetails":
    TestFailoverCleanupJobModelCustomProperties,
  "JobModelCustomProperties.TestFailoverJobDetails":
    TestFailoverJobModelCustomProperties,
  "ProtectedItemModelCustomProperties.HyperVToAzStackHCI":
    HyperVToAzStackHCIProtectedItemModelCustomProperties,
  "ProtectedItemModelCustomProperties.VMwareToAzStackHCI":
    VMwareToAzStackHCIProtectedItemModelCustomProperties,
  "ProtectedItemModelCustomPropertiesUpdate.HyperVToAzStackHCI":
    HyperVToAzStackHCIProtectedItemModelCustomPropertiesUpdate,
  "ProtectedItemModelCustomPropertiesUpdate.VMwareToAzStackHCI":
    VMwareToAzStackHCIProtectedItemModelCustomPropertiesUpdate,
  "PlannedFailoverModelCustomProperties.HyperVToAzStackHCI":
    HyperVToAzStackHCIPlannedFailoverModelCustomProperties,
  "PlannedFailoverModelCustomProperties.VMwareToAzStackHCI":
    VMwareToAzStackHCIPlannedFailoverModelCustomProperties,
  "RecoveryPointModelCustomProperties.HyperVToAzStackHCI":
    HyperVToAzStackHCIRecoveryPointModelCustomProperties,
  "RecoveryPointModelCustomProperties.VMwareToAzStackHCIRecoveryPointModelCustomProperties":
    VMwareToAzStackHCIRecoveryPointModelCustomProperties,
  "ReplicationExtensionModelCustomProperties.HyperVToAzStackHCI":
    HyperVToAzStackHCIReplicationExtensionModelCustomProperties,
  "ReplicationExtensionModelCustomProperties.VMwareToAzStackHCI":
    VMwareToAzStackHCIReplicationExtensionModelCustomProperties,
  "PolicyModelCustomProperties.HyperVToAzStackHCI":
    HyperVToAzStackHCIPolicyModelCustomProperties,
  "PolicyModelCustomProperties.VMwareToAzStackHCI":
    VMwareToAzStackHCIPolicyModelCustomProperties,
};
