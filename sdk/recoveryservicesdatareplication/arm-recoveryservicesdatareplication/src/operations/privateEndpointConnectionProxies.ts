/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { PrivateEndpointConnectionProxies } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { AzureSiteRecoveryManagementServiceAPI } from "../azureSiteRecoveryManagementServiceAPI.js";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl.js";
import {
  PrivateEndpointConnectionProxy,
  PrivateEndpointConnectionProxiesListNextOptionalParams,
  PrivateEndpointConnectionProxiesListOptionalParams,
  PrivateEndpointConnectionProxiesListResponse,
  PrivateEndpointConnectionProxiesGetOptionalParams,
  PrivateEndpointConnectionProxiesGetResponse,
  PrivateEndpointConnectionProxiesCreateOptionalParams,
  PrivateEndpointConnectionProxiesCreateResponse,
  PrivateEndpointConnectionProxiesDeleteOptionalParams,
  PrivateEndpointConnectionProxiesDeleteResponse,
  PrivateEndpointConnectionProxiesValidateOptionalParams,
  PrivateEndpointConnectionProxiesValidateResponse,
  PrivateEndpointConnectionProxiesListNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing PrivateEndpointConnectionProxies operations. */
export class PrivateEndpointConnectionProxiesImpl
  implements PrivateEndpointConnectionProxies
{
  private readonly client: AzureSiteRecoveryManagementServiceAPI;

  /**
   * Initialize a new instance of the class PrivateEndpointConnectionProxies class.
   * @param client Reference to the service client
   */
  constructor(client: AzureSiteRecoveryManagementServiceAPI) {
    this.client = client;
  }

  /**
   * Gets the all private endpoint connections proxies.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param vaultName The vault name.
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    vaultName: string,
    options?: PrivateEndpointConnectionProxiesListOptionalParams,
  ): PagedAsyncIterableIterator<PrivateEndpointConnectionProxy> {
    const iter = this.listPagingAll(resourceGroupName, vaultName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(
          resourceGroupName,
          vaultName,
          options,
          settings,
        );
      },
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    vaultName: string,
    options?: PrivateEndpointConnectionProxiesListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<PrivateEndpointConnectionProxy[]> {
    let result: PrivateEndpointConnectionProxiesListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(resourceGroupName, vaultName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        resourceGroupName,
        vaultName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    vaultName: string,
    options?: PrivateEndpointConnectionProxiesListOptionalParams,
  ): AsyncIterableIterator<PrivateEndpointConnectionProxy> {
    for await (const page of this.listPagingPage(
      resourceGroupName,
      vaultName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Gets the all private endpoint connections proxies.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param vaultName The vault name.
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    vaultName: string,
    options?: PrivateEndpointConnectionProxiesListOptionalParams,
  ): Promise<PrivateEndpointConnectionProxiesListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, vaultName, options },
      listOperationSpec,
    );
  }

  /**
   * Gets the private endpoint connection proxy details.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param vaultName The vault name.
   * @param privateEndpointConnectionProxyName The private endpoint connection proxy name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    vaultName: string,
    privateEndpointConnectionProxyName: string,
    options?: PrivateEndpointConnectionProxiesGetOptionalParams,
  ): Promise<PrivateEndpointConnectionProxiesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        vaultName,
        privateEndpointConnectionProxyName,
        options,
      },
      getOperationSpec,
    );
  }

  /**
   * Create a new private endpoint connection proxy which includes both auto and manual approval types.
   * Creating the proxy resource will also create a private endpoint connection resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param vaultName The vault name.
   * @param privateEndpointConnectionProxyName The private endpoint connection proxy name.
   * @param body Private endpoint connection creation input.
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    vaultName: string,
    privateEndpointConnectionProxyName: string,
    body: PrivateEndpointConnectionProxy,
    options?: PrivateEndpointConnectionProxiesCreateOptionalParams,
  ): Promise<PrivateEndpointConnectionProxiesCreateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        vaultName,
        privateEndpointConnectionProxyName,
        body,
        options,
      },
      createOperationSpec,
    );
  }

  /**
   * Returns the operation to track the deletion of private endpoint connection proxy.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param vaultName The vault name.
   * @param privateEndpointConnectionProxyName The private endpoint connection proxy name.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    vaultName: string,
    privateEndpointConnectionProxyName: string,
    options?: PrivateEndpointConnectionProxiesDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<PrivateEndpointConnectionProxiesDeleteResponse>,
      PrivateEndpointConnectionProxiesDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<PrivateEndpointConnectionProxiesDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        vaultName,
        privateEndpointConnectionProxyName,
        options,
      },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<
      PrivateEndpointConnectionProxiesDeleteResponse,
      OperationState<PrivateEndpointConnectionProxiesDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Returns the operation to track the deletion of private endpoint connection proxy.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param vaultName The vault name.
   * @param privateEndpointConnectionProxyName The private endpoint connection proxy name.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    vaultName: string,
    privateEndpointConnectionProxyName: string,
    options?: PrivateEndpointConnectionProxiesDeleteOptionalParams,
  ): Promise<PrivateEndpointConnectionProxiesDeleteResponse> {
    const poller = await this.beginDelete(
      resourceGroupName,
      vaultName,
      privateEndpointConnectionProxyName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Returns remote private endpoint connection information after validation.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param vaultName The vault name.
   * @param privateEndpointConnectionProxyName The private endpoint connection proxy name.
   * @param body The private endpoint connection proxy input.
   * @param options The options parameters.
   */
  validate(
    resourceGroupName: string,
    vaultName: string,
    privateEndpointConnectionProxyName: string,
    body: PrivateEndpointConnectionProxy,
    options?: PrivateEndpointConnectionProxiesValidateOptionalParams,
  ): Promise<PrivateEndpointConnectionProxiesValidateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        vaultName,
        privateEndpointConnectionProxyName,
        body,
        options,
      },
      validateOperationSpec,
    );
  }

  /**
   * ListNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param vaultName The vault name.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    vaultName: string,
    nextLink: string,
    options?: PrivateEndpointConnectionProxiesListNextOptionalParams,
  ): Promise<PrivateEndpointConnectionProxiesListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, vaultName, nextLink, options },
      listNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationVaults/{vaultName}/privateEndpointConnectionProxies",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PrivateEndpointConnectionProxyListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vaultName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationVaults/{vaultName}/privateEndpointConnectionProxies/{privateEndpointConnectionProxyName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PrivateEndpointConnectionProxy,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vaultName,
    Parameters.privateEndpointConnectionProxyName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationVaults/{vaultName}/privateEndpointConnectionProxies/{privateEndpointConnectionProxyName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.PrivateEndpointConnectionProxy,
    },
    201: {
      bodyMapper: Mappers.PrivateEndpointConnectionProxy,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body8,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vaultName,
    Parameters.privateEndpointConnectionProxyName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationVaults/{vaultName}/privateEndpointConnectionProxies/{privateEndpointConnectionProxyName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.PrivateEndpointConnectionProxiesDeleteHeaders,
    },
    201: {
      headersMapper: Mappers.PrivateEndpointConnectionProxiesDeleteHeaders,
    },
    202: {
      headersMapper: Mappers.PrivateEndpointConnectionProxiesDeleteHeaders,
    },
    204: {
      headersMapper: Mappers.PrivateEndpointConnectionProxiesDeleteHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vaultName,
    Parameters.privateEndpointConnectionProxyName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const validateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationVaults/{vaultName}/privateEndpointConnectionProxies/{privateEndpointConnectionProxyName}/validate",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.PrivateEndpointConnectionProxy,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body8,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vaultName,
    Parameters.privateEndpointConnectionProxyName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PrivateEndpointConnectionProxyListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vaultName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
