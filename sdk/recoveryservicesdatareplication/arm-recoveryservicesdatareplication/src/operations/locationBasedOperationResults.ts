/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { LocationBasedOperationResults } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { AzureSiteRecoveryManagementServiceAPI } from "../azureSiteRecoveryManagementServiceAPI.js";
import {
  LocationBasedOperationResultsGetOptionalParams,
  LocationBasedOperationResultsGetResponse,
} from "../models/index.js";

/** Class containing LocationBasedOperationResults operations. */
export class LocationBasedOperationResultsImpl
  implements LocationBasedOperationResults
{
  private readonly client: AzureSiteRecoveryManagementServiceAPI;

  /**
   * Initialize a new instance of the class LocationBasedOperationResults class.
   * @param client Reference to the service client
   */
  constructor(client: AzureSiteRecoveryManagementServiceAPI) {
    this.client = client;
  }

  /**
   * Gets the location based operation result.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param location The name of the Azure region.
   * @param operationId The ID of an ongoing async operation.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    location: string,
    operationId: string,
    options?: LocationBasedOperationResultsGetOptionalParams,
  ): Promise<LocationBasedOperationResultsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, location, operationId, options },
      getOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/locations/{location}/operationResults/{operationId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
    Parameters.resourceGroupName,
    Parameters.operationId,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
