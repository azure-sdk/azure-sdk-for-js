/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const RemediationDeploymentsListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RemediationDeploymentsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RemediationDeployment",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const RemediationDeployment: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RemediationDeployment",
    modelProperties: {
      remediatedResourceId: {
        serializedName: "remediatedResourceId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      deploymentId: {
        serializedName: "deploymentId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      resourceLocation: {
        serializedName: "resourceLocation",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDefinition",
        },
      },
      createdOn: {
        serializedName: "createdOn",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      lastUpdatedOn: {
        serializedName: "lastUpdatedOn",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const ErrorDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDefinition",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDefinition",
            },
          },
        },
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TypedErrorInfo",
            },
          },
        },
      },
    },
  },
};

export const TypedErrorInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TypedErrorInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "any",
        },
      },
    },
  },
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDefinition",
        },
      },
    },
  },
};

export const Remediation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Remediation",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData",
        },
      },
      policyAssignmentId: {
        serializedName: "properties.policyAssignmentId",
        type: {
          name: "String",
        },
      },
      policyDefinitionReferenceId: {
        serializedName: "properties.policyDefinitionReferenceId",
        type: {
          name: "String",
        },
      },
      resourceDiscoveryMode: {
        serializedName: "properties.resourceDiscoveryMode",
        type: {
          name: "String",
        },
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      createdOn: {
        serializedName: "properties.createdOn",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      lastUpdatedOn: {
        serializedName: "properties.lastUpdatedOn",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      filters: {
        serializedName: "properties.filters",
        type: {
          name: "Composite",
          className: "RemediationFilters",
        },
      },
      deploymentStatus: {
        serializedName: "properties.deploymentStatus",
        type: {
          name: "Composite",
          className: "RemediationDeploymentSummary",
        },
      },
      statusMessage: {
        serializedName: "properties.statusMessage",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      correlationId: {
        serializedName: "properties.correlationId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      resourceCount: {
        serializedName: "properties.resourceCount",
        type: {
          name: "Number",
        },
      },
      parallelDeployments: {
        serializedName: "properties.parallelDeployments",
        type: {
          name: "Number",
        },
      },
      failureThreshold: {
        serializedName: "properties.failureThreshold",
        type: {
          name: "Composite",
          className: "RemediationPropertiesFailureThreshold",
        },
      },
    },
  },
};

export const RemediationFilters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RemediationFilters",
    modelProperties: {
      locations: {
        serializedName: "locations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      resourceIds: {
        serializedName: "resourceIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const RemediationDeploymentSummary: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RemediationDeploymentSummary",
    modelProperties: {
      totalDeployments: {
        serializedName: "totalDeployments",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      successfulDeployments: {
        serializedName: "successfulDeployments",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      failedDeployments: {
        serializedName: "failedDeployments",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const RemediationPropertiesFailureThreshold: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "RemediationPropertiesFailureThreshold",
      modelProperties: {
        percentage: {
          serializedName: "percentage",
          type: {
            name: "Number",
          },
        },
      },
    },
  };

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String",
        },
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String",
        },
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime",
        },
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String",
        },
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String",
        },
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const RemediationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RemediationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Remediation",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};
