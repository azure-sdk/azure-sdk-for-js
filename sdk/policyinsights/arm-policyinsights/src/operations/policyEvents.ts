/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PolicyEvents } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { PolicyInsightsClient } from "../policyInsightsClient";
import {
  PolicyEvent,
  PolicyEventsNextLinkOptionalParams,
  PolicyEventsResourceType,
  PolicyEventsListQueryResultsForManagementGroupOptionalParams,
  PolicyEventsListQueryResultsForSubscriptionOptionalParams,
  PolicyEventsListQueryResultsForResourceGroupOptionalParams,
  PolicyEventsListQueryResultsForResourceOptionalParams,
  PolicyEventsListQueryResultsForPolicySetDefinitionOptionalParams,
  PolicyEventsListQueryResultsForPolicyDefinitionOptionalParams,
  PolicyEventsListQueryResultsForSubscriptionLevelPolicyAssignmentOptionalParams,
  PolicyEventsListQueryResultsForResourceGroupLevelPolicyAssignmentOptionalParams,
  PolicyEventsListQueryResultsForManagementGroupResponse,
  PolicyEventsListQueryResultsForSubscriptionResponse,
  PolicyEventsListQueryResultsForResourceGroupResponse,
  PolicyEventsListQueryResultsForResourceResponse,
  PolicyEventsListQueryResultsForPolicySetDefinitionResponse,
  PolicyEventsListQueryResultsForPolicyDefinitionResponse,
  PolicyEventsListQueryResultsForSubscriptionLevelPolicyAssignmentResponse,
  PolicyEventsListQueryResultsForResourceGroupLevelPolicyAssignmentResponse,
  PolicyEventsNextLinkResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing PolicyEvents operations. */
export class PolicyEventsImpl implements PolicyEvents {
  private readonly client: PolicyInsightsClient;

  /**
   * Initialize a new instance of the class PolicyEvents class.
   * @param client Reference to the service client
   */
  constructor(client: PolicyInsightsClient) {
    this.client = client;
  }

  /**
   * Queries policy events for the resources under the management group.
   * @param policyEventsResource The name of the virtual resource under PolicyEvents resource type; only
   *                             "default" is allowed.
   * @param managementGroupName Management group name.
   * @param options The options parameters.
   */
  public listQueryResultsForManagementGroup(
    policyEventsResource: PolicyEventsResourceType,
    managementGroupName: string,
    options?: PolicyEventsListQueryResultsForManagementGroupOptionalParams
  ): PagedAsyncIterableIterator<PolicyEvent> {
    const iter = this.listQueryResultsForManagementGroupPagingAll(
      policyEventsResource,
      managementGroupName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listQueryResultsForManagementGroupPagingPage(
          policyEventsResource,
          managementGroupName,
          options
        );
      }
    };
  }

  private async *listQueryResultsForManagementGroupPagingPage(
    policyEventsResource: PolicyEventsResourceType,
    managementGroupName: string,
    options?: PolicyEventsListQueryResultsForManagementGroupOptionalParams
  ): AsyncIterableIterator<PolicyEvent[]> {
    let result = await this._listQueryResultsForManagementGroup(
      policyEventsResource,
      managementGroupName,
      options
    );
    yield result.value || [];
    let continuationToken = result.odataNextLink;
    while (continuationToken) {
      result = await this._nextLink(continuationToken, options);
      continuationToken = result.odataNextLink;
      yield result.value || [];
    }
  }

  private async *listQueryResultsForManagementGroupPagingAll(
    policyEventsResource: PolicyEventsResourceType,
    managementGroupName: string,
    options?: PolicyEventsListQueryResultsForManagementGroupOptionalParams
  ): AsyncIterableIterator<PolicyEvent> {
    for await (const page of this.listQueryResultsForManagementGroupPagingPage(
      policyEventsResource,
      managementGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Queries policy events for the resources under the subscription.
   * @param policyEventsResource The name of the virtual resource under PolicyEvents resource type; only
   *                             "default" is allowed.
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param options The options parameters.
   */
  public listQueryResultsForSubscription(
    policyEventsResource: PolicyEventsResourceType,
    subscriptionId: string,
    options?: PolicyEventsListQueryResultsForSubscriptionOptionalParams
  ): PagedAsyncIterableIterator<PolicyEvent> {
    const iter = this.listQueryResultsForSubscriptionPagingAll(
      policyEventsResource,
      subscriptionId,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listQueryResultsForSubscriptionPagingPage(
          policyEventsResource,
          subscriptionId,
          options
        );
      }
    };
  }

  private async *listQueryResultsForSubscriptionPagingPage(
    policyEventsResource: PolicyEventsResourceType,
    subscriptionId: string,
    options?: PolicyEventsListQueryResultsForSubscriptionOptionalParams
  ): AsyncIterableIterator<PolicyEvent[]> {
    let result = await this._listQueryResultsForSubscription(
      policyEventsResource,
      subscriptionId,
      options
    );
    yield result.value || [];
    let continuationToken = result.odataNextLink;
    while (continuationToken) {
      result = await this._nextLink(continuationToken, options);
      continuationToken = result.odataNextLink;
      yield result.value || [];
    }
  }

  private async *listQueryResultsForSubscriptionPagingAll(
    policyEventsResource: PolicyEventsResourceType,
    subscriptionId: string,
    options?: PolicyEventsListQueryResultsForSubscriptionOptionalParams
  ): AsyncIterableIterator<PolicyEvent> {
    for await (const page of this.listQueryResultsForSubscriptionPagingPage(
      policyEventsResource,
      subscriptionId,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Queries policy events for the resources under the resource group.
   * @param policyEventsResource The name of the virtual resource under PolicyEvents resource type; only
   *                             "default" is allowed.
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param resourceGroupName Resource group name.
   * @param options The options parameters.
   */
  public listQueryResultsForResourceGroup(
    policyEventsResource: PolicyEventsResourceType,
    subscriptionId: string,
    resourceGroupName: string,
    options?: PolicyEventsListQueryResultsForResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<PolicyEvent> {
    const iter = this.listQueryResultsForResourceGroupPagingAll(
      policyEventsResource,
      subscriptionId,
      resourceGroupName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listQueryResultsForResourceGroupPagingPage(
          policyEventsResource,
          subscriptionId,
          resourceGroupName,
          options
        );
      }
    };
  }

  private async *listQueryResultsForResourceGroupPagingPage(
    policyEventsResource: PolicyEventsResourceType,
    subscriptionId: string,
    resourceGroupName: string,
    options?: PolicyEventsListQueryResultsForResourceGroupOptionalParams
  ): AsyncIterableIterator<PolicyEvent[]> {
    let result = await this._listQueryResultsForResourceGroup(
      policyEventsResource,
      subscriptionId,
      resourceGroupName,
      options
    );
    yield result.value || [];
    let continuationToken = result.odataNextLink;
    while (continuationToken) {
      result = await this._nextLink(continuationToken, options);
      continuationToken = result.odataNextLink;
      yield result.value || [];
    }
  }

  private async *listQueryResultsForResourceGroupPagingAll(
    policyEventsResource: PolicyEventsResourceType,
    subscriptionId: string,
    resourceGroupName: string,
    options?: PolicyEventsListQueryResultsForResourceGroupOptionalParams
  ): AsyncIterableIterator<PolicyEvent> {
    for await (const page of this.listQueryResultsForResourceGroupPagingPage(
      policyEventsResource,
      subscriptionId,
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Queries policy events for the resource.
   * @param policyEventsResource The name of the virtual resource under PolicyEvents resource type; only
   *                             "default" is allowed.
   * @param resourceId Resource ID.
   * @param options The options parameters.
   */
  public listQueryResultsForResource(
    policyEventsResource: PolicyEventsResourceType,
    resourceId: string,
    options?: PolicyEventsListQueryResultsForResourceOptionalParams
  ): PagedAsyncIterableIterator<PolicyEvent> {
    const iter = this.listQueryResultsForResourcePagingAll(
      policyEventsResource,
      resourceId,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listQueryResultsForResourcePagingPage(
          policyEventsResource,
          resourceId,
          options
        );
      }
    };
  }

  private async *listQueryResultsForResourcePagingPage(
    policyEventsResource: PolicyEventsResourceType,
    resourceId: string,
    options?: PolicyEventsListQueryResultsForResourceOptionalParams
  ): AsyncIterableIterator<PolicyEvent[]> {
    let result = await this._listQueryResultsForResource(
      policyEventsResource,
      resourceId,
      options
    );
    yield result.value || [];
    let continuationToken = result.odataNextLink;
    while (continuationToken) {
      result = await this._nextLink(continuationToken, options);
      continuationToken = result.odataNextLink;
      yield result.value || [];
    }
  }

  private async *listQueryResultsForResourcePagingAll(
    policyEventsResource: PolicyEventsResourceType,
    resourceId: string,
    options?: PolicyEventsListQueryResultsForResourceOptionalParams
  ): AsyncIterableIterator<PolicyEvent> {
    for await (const page of this.listQueryResultsForResourcePagingPage(
      policyEventsResource,
      resourceId,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Queries policy events for the subscription level policy set definition.
   * @param policyEventsResource The name of the virtual resource under PolicyEvents resource type; only
   *                             "default" is allowed.
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param policySetDefinitionName Policy set definition name.
   * @param options The options parameters.
   */
  public listQueryResultsForPolicySetDefinition(
    policyEventsResource: PolicyEventsResourceType,
    subscriptionId: string,
    policySetDefinitionName: string,
    options?: PolicyEventsListQueryResultsForPolicySetDefinitionOptionalParams
  ): PagedAsyncIterableIterator<PolicyEvent> {
    const iter = this.listQueryResultsForPolicySetDefinitionPagingAll(
      policyEventsResource,
      subscriptionId,
      policySetDefinitionName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listQueryResultsForPolicySetDefinitionPagingPage(
          policyEventsResource,
          subscriptionId,
          policySetDefinitionName,
          options
        );
      }
    };
  }

  private async *listQueryResultsForPolicySetDefinitionPagingPage(
    policyEventsResource: PolicyEventsResourceType,
    subscriptionId: string,
    policySetDefinitionName: string,
    options?: PolicyEventsListQueryResultsForPolicySetDefinitionOptionalParams
  ): AsyncIterableIterator<PolicyEvent[]> {
    let result = await this._listQueryResultsForPolicySetDefinition(
      policyEventsResource,
      subscriptionId,
      policySetDefinitionName,
      options
    );
    yield result.value || [];
    let continuationToken = result.odataNextLink;
    while (continuationToken) {
      result = await this._nextLink(continuationToken, options);
      continuationToken = result.odataNextLink;
      yield result.value || [];
    }
  }

  private async *listQueryResultsForPolicySetDefinitionPagingAll(
    policyEventsResource: PolicyEventsResourceType,
    subscriptionId: string,
    policySetDefinitionName: string,
    options?: PolicyEventsListQueryResultsForPolicySetDefinitionOptionalParams
  ): AsyncIterableIterator<PolicyEvent> {
    for await (const page of this.listQueryResultsForPolicySetDefinitionPagingPage(
      policyEventsResource,
      subscriptionId,
      policySetDefinitionName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Queries policy events for the subscription level policy definition.
   * @param policyEventsResource The name of the virtual resource under PolicyEvents resource type; only
   *                             "default" is allowed.
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param policyDefinitionName Policy definition name.
   * @param options The options parameters.
   */
  public listQueryResultsForPolicyDefinition(
    policyEventsResource: PolicyEventsResourceType,
    subscriptionId: string,
    policyDefinitionName: string,
    options?: PolicyEventsListQueryResultsForPolicyDefinitionOptionalParams
  ): PagedAsyncIterableIterator<PolicyEvent> {
    const iter = this.listQueryResultsForPolicyDefinitionPagingAll(
      policyEventsResource,
      subscriptionId,
      policyDefinitionName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listQueryResultsForPolicyDefinitionPagingPage(
          policyEventsResource,
          subscriptionId,
          policyDefinitionName,
          options
        );
      }
    };
  }

  private async *listQueryResultsForPolicyDefinitionPagingPage(
    policyEventsResource: PolicyEventsResourceType,
    subscriptionId: string,
    policyDefinitionName: string,
    options?: PolicyEventsListQueryResultsForPolicyDefinitionOptionalParams
  ): AsyncIterableIterator<PolicyEvent[]> {
    let result = await this._listQueryResultsForPolicyDefinition(
      policyEventsResource,
      subscriptionId,
      policyDefinitionName,
      options
    );
    yield result.value || [];
    let continuationToken = result.odataNextLink;
    while (continuationToken) {
      result = await this._nextLink(continuationToken, options);
      continuationToken = result.odataNextLink;
      yield result.value || [];
    }
  }

  private async *listQueryResultsForPolicyDefinitionPagingAll(
    policyEventsResource: PolicyEventsResourceType,
    subscriptionId: string,
    policyDefinitionName: string,
    options?: PolicyEventsListQueryResultsForPolicyDefinitionOptionalParams
  ): AsyncIterableIterator<PolicyEvent> {
    for await (const page of this.listQueryResultsForPolicyDefinitionPagingPage(
      policyEventsResource,
      subscriptionId,
      policyDefinitionName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Queries policy events for the subscription level policy assignment.
   * @param policyEventsResource The name of the virtual resource under PolicyEvents resource type; only
   *                             "default" is allowed.
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param policyAssignmentName Policy assignment name.
   * @param options The options parameters.
   */
  public listQueryResultsForSubscriptionLevelPolicyAssignment(
    policyEventsResource: PolicyEventsResourceType,
    subscriptionId: string,
    policyAssignmentName: string,
    options?: PolicyEventsListQueryResultsForSubscriptionLevelPolicyAssignmentOptionalParams
  ): PagedAsyncIterableIterator<PolicyEvent> {
    const iter = this.listQueryResultsForSubscriptionLevelPolicyAssignmentPagingAll(
      policyEventsResource,
      subscriptionId,
      policyAssignmentName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listQueryResultsForSubscriptionLevelPolicyAssignmentPagingPage(
          policyEventsResource,
          subscriptionId,
          policyAssignmentName,
          options
        );
      }
    };
  }

  private async *listQueryResultsForSubscriptionLevelPolicyAssignmentPagingPage(
    policyEventsResource: PolicyEventsResourceType,
    subscriptionId: string,
    policyAssignmentName: string,
    options?: PolicyEventsListQueryResultsForSubscriptionLevelPolicyAssignmentOptionalParams
  ): AsyncIterableIterator<PolicyEvent[]> {
    let result = await this._listQueryResultsForSubscriptionLevelPolicyAssignment(
      policyEventsResource,
      subscriptionId,
      policyAssignmentName,
      options
    );
    yield result.value || [];
    let continuationToken = result.odataNextLink;
    while (continuationToken) {
      result = await this._nextLink(continuationToken, options);
      continuationToken = result.odataNextLink;
      yield result.value || [];
    }
  }

  private async *listQueryResultsForSubscriptionLevelPolicyAssignmentPagingAll(
    policyEventsResource: PolicyEventsResourceType,
    subscriptionId: string,
    policyAssignmentName: string,
    options?: PolicyEventsListQueryResultsForSubscriptionLevelPolicyAssignmentOptionalParams
  ): AsyncIterableIterator<PolicyEvent> {
    for await (const page of this.listQueryResultsForSubscriptionLevelPolicyAssignmentPagingPage(
      policyEventsResource,
      subscriptionId,
      policyAssignmentName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Queries policy events for the resource group level policy assignment.
   * @param policyEventsResource The name of the virtual resource under PolicyEvents resource type; only
   *                             "default" is allowed.
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param resourceGroupName Resource group name.
   * @param policyAssignmentName Policy assignment name.
   * @param options The options parameters.
   */
  public listQueryResultsForResourceGroupLevelPolicyAssignment(
    policyEventsResource: PolicyEventsResourceType,
    subscriptionId: string,
    resourceGroupName: string,
    policyAssignmentName: string,
    options?: PolicyEventsListQueryResultsForResourceGroupLevelPolicyAssignmentOptionalParams
  ): PagedAsyncIterableIterator<PolicyEvent> {
    const iter = this.listQueryResultsForResourceGroupLevelPolicyAssignmentPagingAll(
      policyEventsResource,
      subscriptionId,
      resourceGroupName,
      policyAssignmentName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listQueryResultsForResourceGroupLevelPolicyAssignmentPagingPage(
          policyEventsResource,
          subscriptionId,
          resourceGroupName,
          policyAssignmentName,
          options
        );
      }
    };
  }

  private async *listQueryResultsForResourceGroupLevelPolicyAssignmentPagingPage(
    policyEventsResource: PolicyEventsResourceType,
    subscriptionId: string,
    resourceGroupName: string,
    policyAssignmentName: string,
    options?: PolicyEventsListQueryResultsForResourceGroupLevelPolicyAssignmentOptionalParams
  ): AsyncIterableIterator<PolicyEvent[]> {
    let result = await this._listQueryResultsForResourceGroupLevelPolicyAssignment(
      policyEventsResource,
      subscriptionId,
      resourceGroupName,
      policyAssignmentName,
      options
    );
    yield result.value || [];
    let continuationToken = result.odataNextLink;
    while (continuationToken) {
      result = await this._nextLink(continuationToken, options);
      continuationToken = result.odataNextLink;
      yield result.value || [];
    }
  }

  private async *listQueryResultsForResourceGroupLevelPolicyAssignmentPagingAll(
    policyEventsResource: PolicyEventsResourceType,
    subscriptionId: string,
    resourceGroupName: string,
    policyAssignmentName: string,
    options?: PolicyEventsListQueryResultsForResourceGroupLevelPolicyAssignmentOptionalParams
  ): AsyncIterableIterator<PolicyEvent> {
    for await (const page of this.listQueryResultsForResourceGroupLevelPolicyAssignmentPagingPage(
      policyEventsResource,
      subscriptionId,
      resourceGroupName,
      policyAssignmentName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Queries policy events for the resources under the management group.
   * @param policyEventsResource The name of the virtual resource under PolicyEvents resource type; only
   *                             "default" is allowed.
   * @param managementGroupName Management group name.
   * @param options The options parameters.
   */
  private _listQueryResultsForManagementGroup(
    policyEventsResource: PolicyEventsResourceType,
    managementGroupName: string,
    options?: PolicyEventsListQueryResultsForManagementGroupOptionalParams
  ): Promise<PolicyEventsListQueryResultsForManagementGroupResponse> {
    return this.client.sendOperationRequest(
      { policyEventsResource, managementGroupName, options },
      listQueryResultsForManagementGroupOperationSpec
    );
  }

  /**
   * Queries policy events for the resources under the subscription.
   * @param policyEventsResource The name of the virtual resource under PolicyEvents resource type; only
   *                             "default" is allowed.
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param options The options parameters.
   */
  private _listQueryResultsForSubscription(
    policyEventsResource: PolicyEventsResourceType,
    subscriptionId: string,
    options?: PolicyEventsListQueryResultsForSubscriptionOptionalParams
  ): Promise<PolicyEventsListQueryResultsForSubscriptionResponse> {
    return this.client.sendOperationRequest(
      { policyEventsResource, subscriptionId, options },
      listQueryResultsForSubscriptionOperationSpec
    );
  }

  /**
   * Queries policy events for the resources under the resource group.
   * @param policyEventsResource The name of the virtual resource under PolicyEvents resource type; only
   *                             "default" is allowed.
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param resourceGroupName Resource group name.
   * @param options The options parameters.
   */
  private _listQueryResultsForResourceGroup(
    policyEventsResource: PolicyEventsResourceType,
    subscriptionId: string,
    resourceGroupName: string,
    options?: PolicyEventsListQueryResultsForResourceGroupOptionalParams
  ): Promise<PolicyEventsListQueryResultsForResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { policyEventsResource, subscriptionId, resourceGroupName, options },
      listQueryResultsForResourceGroupOperationSpec
    );
  }

  /**
   * Queries policy events for the resource.
   * @param policyEventsResource The name of the virtual resource under PolicyEvents resource type; only
   *                             "default" is allowed.
   * @param resourceId Resource ID.
   * @param options The options parameters.
   */
  private _listQueryResultsForResource(
    policyEventsResource: PolicyEventsResourceType,
    resourceId: string,
    options?: PolicyEventsListQueryResultsForResourceOptionalParams
  ): Promise<PolicyEventsListQueryResultsForResourceResponse> {
    return this.client.sendOperationRequest(
      { policyEventsResource, resourceId, options },
      listQueryResultsForResourceOperationSpec
    );
  }

  /**
   * Queries policy events for the subscription level policy set definition.
   * @param policyEventsResource The name of the virtual resource under PolicyEvents resource type; only
   *                             "default" is allowed.
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param policySetDefinitionName Policy set definition name.
   * @param options The options parameters.
   */
  private _listQueryResultsForPolicySetDefinition(
    policyEventsResource: PolicyEventsResourceType,
    subscriptionId: string,
    policySetDefinitionName: string,
    options?: PolicyEventsListQueryResultsForPolicySetDefinitionOptionalParams
  ): Promise<PolicyEventsListQueryResultsForPolicySetDefinitionResponse> {
    return this.client.sendOperationRequest(
      {
        policyEventsResource,
        subscriptionId,
        policySetDefinitionName,
        options
      },
      listQueryResultsForPolicySetDefinitionOperationSpec
    );
  }

  /**
   * Queries policy events for the subscription level policy definition.
   * @param policyEventsResource The name of the virtual resource under PolicyEvents resource type; only
   *                             "default" is allowed.
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param policyDefinitionName Policy definition name.
   * @param options The options parameters.
   */
  private _listQueryResultsForPolicyDefinition(
    policyEventsResource: PolicyEventsResourceType,
    subscriptionId: string,
    policyDefinitionName: string,
    options?: PolicyEventsListQueryResultsForPolicyDefinitionOptionalParams
  ): Promise<PolicyEventsListQueryResultsForPolicyDefinitionResponse> {
    return this.client.sendOperationRequest(
      { policyEventsResource, subscriptionId, policyDefinitionName, options },
      listQueryResultsForPolicyDefinitionOperationSpec
    );
  }

  /**
   * Queries policy events for the subscription level policy assignment.
   * @param policyEventsResource The name of the virtual resource under PolicyEvents resource type; only
   *                             "default" is allowed.
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param policyAssignmentName Policy assignment name.
   * @param options The options parameters.
   */
  private _listQueryResultsForSubscriptionLevelPolicyAssignment(
    policyEventsResource: PolicyEventsResourceType,
    subscriptionId: string,
    policyAssignmentName: string,
    options?: PolicyEventsListQueryResultsForSubscriptionLevelPolicyAssignmentOptionalParams
  ): Promise<
    PolicyEventsListQueryResultsForSubscriptionLevelPolicyAssignmentResponse
  > {
    return this.client.sendOperationRequest(
      { policyEventsResource, subscriptionId, policyAssignmentName, options },
      listQueryResultsForSubscriptionLevelPolicyAssignmentOperationSpec
    );
  }

  /**
   * Queries policy events for the resource group level policy assignment.
   * @param policyEventsResource The name of the virtual resource under PolicyEvents resource type; only
   *                             "default" is allowed.
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param resourceGroupName Resource group name.
   * @param policyAssignmentName Policy assignment name.
   * @param options The options parameters.
   */
  private _listQueryResultsForResourceGroupLevelPolicyAssignment(
    policyEventsResource: PolicyEventsResourceType,
    subscriptionId: string,
    resourceGroupName: string,
    policyAssignmentName: string,
    options?: PolicyEventsListQueryResultsForResourceGroupLevelPolicyAssignmentOptionalParams
  ): Promise<
    PolicyEventsListQueryResultsForResourceGroupLevelPolicyAssignmentResponse
  > {
    return this.client.sendOperationRequest(
      {
        policyEventsResource,
        subscriptionId,
        resourceGroupName,
        policyAssignmentName,
        options
      },
      listQueryResultsForResourceGroupLevelPolicyAssignmentOperationSpec
    );
  }

  /**
   * Subsequent post calls to the next link
   * @param nextLink Next link for list operation.
   * @param options The options parameters.
   */
  private _nextLink(
    nextLink: string,
    options?: PolicyEventsNextLinkOptionalParams
  ): Promise<PolicyEventsNextLinkResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      nextLinkOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listQueryResultsForManagementGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/{managementGroupsNamespace}/managementGroups/{managementGroupName}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyEventsQueryResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  queryParameters: [
    Parameters.top,
    Parameters.filter,
    Parameters.apiVersion2,
    Parameters.orderBy,
    Parameters.select,
    Parameters.fromParam,
    Parameters.to,
    Parameters.apply,
    Parameters.skipToken
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupsNamespace,
    Parameters.managementGroupName,
    Parameters.policyEventsResource
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listQueryResultsForSubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyEventsQueryResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  queryParameters: [
    Parameters.top,
    Parameters.filter,
    Parameters.apiVersion2,
    Parameters.orderBy,
    Parameters.select,
    Parameters.fromParam,
    Parameters.to,
    Parameters.apply,
    Parameters.skipToken
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.policyEventsResource,
    Parameters.subscriptionId1
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listQueryResultsForResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyEventsQueryResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  queryParameters: [
    Parameters.top,
    Parameters.filter,
    Parameters.apiVersion2,
    Parameters.orderBy,
    Parameters.select,
    Parameters.fromParam,
    Parameters.to,
    Parameters.apply,
    Parameters.skipToken
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.policyEventsResource,
    Parameters.subscriptionId1
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listQueryResultsForResourceOperationSpec: coreClient.OperationSpec = {
  path:
    "/{resourceId}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyEventsQueryResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  queryParameters: [
    Parameters.top,
    Parameters.filter,
    Parameters.apiVersion2,
    Parameters.orderBy,
    Parameters.select,
    Parameters.fromParam,
    Parameters.to,
    Parameters.apply,
    Parameters.skipToken,
    Parameters.expand
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceId,
    Parameters.policyEventsResource
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listQueryResultsForPolicySetDefinitionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policySetDefinitions/{policySetDefinitionName}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyEventsQueryResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  queryParameters: [
    Parameters.top,
    Parameters.filter,
    Parameters.apiVersion2,
    Parameters.orderBy,
    Parameters.select,
    Parameters.fromParam,
    Parameters.to,
    Parameters.apply,
    Parameters.skipToken
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.policyEventsResource,
    Parameters.subscriptionId1,
    Parameters.authorizationNamespace,
    Parameters.policySetDefinitionName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listQueryResultsForPolicyDefinitionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyDefinitions/{policyDefinitionName}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyEventsQueryResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  queryParameters: [
    Parameters.top,
    Parameters.filter,
    Parameters.apiVersion2,
    Parameters.orderBy,
    Parameters.select,
    Parameters.fromParam,
    Parameters.to,
    Parameters.apply,
    Parameters.skipToken
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.policyEventsResource,
    Parameters.subscriptionId1,
    Parameters.authorizationNamespace,
    Parameters.policyDefinitionName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listQueryResultsForSubscriptionLevelPolicyAssignmentOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyAssignments/{policyAssignmentName}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyEventsQueryResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  queryParameters: [
    Parameters.top,
    Parameters.filter,
    Parameters.apiVersion2,
    Parameters.orderBy,
    Parameters.select,
    Parameters.fromParam,
    Parameters.to,
    Parameters.apply,
    Parameters.skipToken
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.policyEventsResource,
    Parameters.subscriptionId1,
    Parameters.authorizationNamespace,
    Parameters.policyAssignmentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listQueryResultsForResourceGroupLevelPolicyAssignmentOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{authorizationNamespace}/policyAssignments/{policyAssignmentName}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyEventsQueryResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  queryParameters: [
    Parameters.top,
    Parameters.filter,
    Parameters.apiVersion2,
    Parameters.orderBy,
    Parameters.select,
    Parameters.fromParam,
    Parameters.to,
    Parameters.apply,
    Parameters.skipToken
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.policyEventsResource,
    Parameters.subscriptionId1,
    Parameters.authorizationNamespace,
    Parameters.policyAssignmentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const nextLinkOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyEventsQueryResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  queryParameters: [Parameters.apiVersion2, Parameters.skipToken],
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
