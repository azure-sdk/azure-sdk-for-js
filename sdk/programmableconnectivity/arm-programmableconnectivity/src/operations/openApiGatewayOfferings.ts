/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { OpenApiGatewayOfferings } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ProgrammableConnectivity } from "../programmableConnectivity";
import {
  OpenApiGatewayOffering,
  OpenApiGatewayOfferingsListByTenantNextOptionalParams,
  OpenApiGatewayOfferingsListByTenantOptionalParams,
  OpenApiGatewayOfferingsListByTenantResponse,
  OpenApiGatewayOfferingsListBySubscriptionNextOptionalParams,
  OpenApiGatewayOfferingsListBySubscriptionOptionalParams,
  OpenApiGatewayOfferingsListBySubscriptionResponse,
  OpenApiGatewayOfferingsGetOptionalParams,
  OpenApiGatewayOfferingsGetResponse,
  OpenApiGatewayOfferingsListByTenantNextResponse,
  OpenApiGatewayOfferingsListBySubscriptionNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing OpenApiGatewayOfferings operations. */
export class OpenApiGatewayOfferingsImpl implements OpenApiGatewayOfferings {
  private readonly client: ProgrammableConnectivity;

  /**
   * Initialize a new instance of the class OpenApiGatewayOfferings class.
   * @param client Reference to the service client
   */
  constructor(client: ProgrammableConnectivity) {
    this.client = client;
  }

  /**
   * List OpenApiGatewayOffering resources by tenant
   * @param options The options parameters.
   */
  public listByTenant(
    options?: OpenApiGatewayOfferingsListByTenantOptionalParams
  ): PagedAsyncIterableIterator<OpenApiGatewayOffering> {
    const iter = this.listByTenantPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByTenantPagingPage(options, settings);
      }
    };
  }

  private async *listByTenantPagingPage(
    options?: OpenApiGatewayOfferingsListByTenantOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<OpenApiGatewayOffering[]> {
    let result: OpenApiGatewayOfferingsListByTenantResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByTenant(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByTenantNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByTenantPagingAll(
    options?: OpenApiGatewayOfferingsListByTenantOptionalParams
  ): AsyncIterableIterator<OpenApiGatewayOffering> {
    for await (const page of this.listByTenantPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * List OpenApiGatewayOffering resources by subscription ID
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: OpenApiGatewayOfferingsListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<OpenApiGatewayOffering> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionPagingPage(options, settings);
      }
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: OpenApiGatewayOfferingsListBySubscriptionOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<OpenApiGatewayOffering[]> {
    let result: OpenApiGatewayOfferingsListBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySubscription(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySubscriptionPagingAll(
    options?: OpenApiGatewayOfferingsListBySubscriptionOptionalParams
  ): AsyncIterableIterator<OpenApiGatewayOffering> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * List OpenApiGatewayOffering resources by tenant
   * @param options The options parameters.
   */
  private _listByTenant(
    options?: OpenApiGatewayOfferingsListByTenantOptionalParams
  ): Promise<OpenApiGatewayOfferingsListByTenantResponse> {
    return this.client.sendOperationRequest(
      { options },
      listByTenantOperationSpec
    );
  }

  /**
   * Get a OpenApiGatewayOffering
   * @param name APC Gateway Offering Name
   * @param options The options parameters.
   */
  get(
    name: string,
    options?: OpenApiGatewayOfferingsGetOptionalParams
  ): Promise<OpenApiGatewayOfferingsGetResponse> {
    return this.client.sendOperationRequest(
      { name, options },
      getOperationSpec
    );
  }

  /**
   * List OpenApiGatewayOffering resources by subscription ID
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: OpenApiGatewayOfferingsListBySubscriptionOptionalParams
  ): Promise<OpenApiGatewayOfferingsListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec
    );
  }

  /**
   * ListByTenantNext
   * @param nextLink The nextLink from the previous successful call to the ListByTenant method.
   * @param options The options parameters.
   */
  private _listByTenantNext(
    nextLink: string,
    options?: OpenApiGatewayOfferingsListByTenantNextOptionalParams
  ): Promise<OpenApiGatewayOfferingsListByTenantNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listByTenantNextOperationSpec
    );
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: OpenApiGatewayOfferingsListBySubscriptionNextOptionalParams
  ): Promise<OpenApiGatewayOfferingsListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByTenantOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.ProgrammableConnectivity/openApiGatewayOfferings",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OpenApiGatewayOfferingListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.ProgrammableConnectivity/openApiGatewayOfferings/{name}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OpenApiGatewayOffering
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.name1],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.ProgrammableConnectivity/openApiGatewayOfferings",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OpenApiGatewayOfferingListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listByTenantNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OpenApiGatewayOfferingListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OpenApiGatewayOfferingListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
