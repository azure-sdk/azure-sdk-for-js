/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { Gateways } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ProgrammableConnectivity } from "../programmableConnectivity";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  Gateway,
  GatewaysListBySubscriptionNextOptionalParams,
  GatewaysListBySubscriptionOptionalParams,
  GatewaysListBySubscriptionResponse,
  GatewaysListByResourceGroupNextOptionalParams,
  GatewaysListByResourceGroupOptionalParams,
  GatewaysListByResourceGroupResponse,
  GatewaysGetOptionalParams,
  GatewaysGetResponse,
  GatewaysCreateOrUpdateOptionalParams,
  GatewaysCreateOrUpdateResponse,
  GatewayUpdate,
  GatewaysUpdateOptionalParams,
  GatewaysUpdateResponse,
  GatewaysDeleteOptionalParams,
  GatewaysDeleteResponse,
  GatewayRegenerateKeyRequest,
  GatewaysListKeysOptionalParams,
  GatewaysListKeysResponse,
  GatewaysRegenerateKeyOptionalParams,
  GatewaysRegenerateKeyResponse,
  GatewaysListBySubscriptionNextResponse,
  GatewaysListByResourceGroupNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Gateways operations. */
export class GatewaysImpl implements Gateways {
  private readonly client: ProgrammableConnectivity;

  /**
   * Initialize a new instance of the class Gateways class.
   * @param client Reference to the service client
   */
  constructor(client: ProgrammableConnectivity) {
    this.client = client;
  }

  /**
   * List Gateway resources by subscription ID
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: GatewaysListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<Gateway> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionPagingPage(options, settings);
      }
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: GatewaysListBySubscriptionOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Gateway[]> {
    let result: GatewaysListBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySubscription(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySubscriptionPagingAll(
    options?: GatewaysListBySubscriptionOptionalParams
  ): AsyncIterableIterator<Gateway> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * List Gateway resources by resource group
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: GatewaysListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<Gateway> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByResourceGroupPagingPage(
          resourceGroupName,
          options,
          settings
        );
      }
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: GatewaysListByResourceGroupOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Gateway[]> {
    let result: GatewaysListByResourceGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByResourceGroup(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: GatewaysListByResourceGroupOptionalParams
  ): AsyncIterableIterator<Gateway> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List Gateway resources by subscription ID
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: GatewaysListBySubscriptionOptionalParams
  ): Promise<GatewaysListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec
    );
  }

  /**
   * List Gateway resources by resource group
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: GatewaysListByResourceGroupOptionalParams
  ): Promise<GatewaysListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec
    );
  }

  /**
   * Get a Gateway
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param name Azure Programmable Connectivity Gateway Name
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    name: string,
    options?: GatewaysGetOptionalParams
  ): Promise<GatewaysGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      getOperationSpec
    );
  }

  /**
   * Create a Gateway
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param name Azure Programmable Connectivity Gateway Name
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    name: string,
    resource: Gateway,
    options?: GatewaysCreateOrUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<GatewaysCreateOrUpdateResponse>,
      GatewaysCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<GatewaysCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, name, resource, options },
      spec: createOrUpdateOperationSpec
    });
    const poller = await createHttpPoller<
      GatewaysCreateOrUpdateResponse,
      OperationState<GatewaysCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create a Gateway
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param name Azure Programmable Connectivity Gateway Name
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    name: string,
    resource: Gateway,
    options?: GatewaysCreateOrUpdateOptionalParams
  ): Promise<GatewaysCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      name,
      resource,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Update a Gateway
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param name Azure Programmable Connectivity Gateway Name
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    name: string,
    properties: GatewayUpdate,
    options?: GatewaysUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<GatewaysUpdateResponse>,
      GatewaysUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<GatewaysUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, name, properties, options },
      spec: updateOperationSpec
    });
    const poller = await createHttpPoller<
      GatewaysUpdateResponse,
      OperationState<GatewaysUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Update a Gateway
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param name Azure Programmable Connectivity Gateway Name
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    name: string,
    properties: GatewayUpdate,
    options?: GatewaysUpdateOptionalParams
  ): Promise<GatewaysUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      name,
      properties,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Delete a Gateway
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param name Azure Programmable Connectivity Gateway Name
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    name: string,
    options?: GatewaysDeleteOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<GatewaysDeleteResponse>,
      GatewaysDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<GatewaysDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, name, options },
      spec: deleteOperationSpec
    });
    const poller = await createHttpPoller<
      GatewaysDeleteResponse,
      OperationState<GatewaysDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete a Gateway
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param name Azure Programmable Connectivity Gateway Name
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    name: string,
    options?: GatewaysDeleteOptionalParams
  ): Promise<GatewaysDeleteResponse> {
    const poller = await this.beginDelete(resourceGroupName, name, options);
    return poller.pollUntilDone();
  }

  /**
   * A synchronous resource action.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param name Azure Programmable Connectivity Gateway Name
   * @param body The content of the action request
   * @param options The options parameters.
   */
  listKeys(
    resourceGroupName: string,
    name: string,
    body: GatewayRegenerateKeyRequest,
    options?: GatewaysListKeysOptionalParams
  ): Promise<GatewaysListKeysResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, body, options },
      listKeysOperationSpec
    );
  }

  /**
   * A long-running resource action that returns no content. DEPRECATED: Use
   * 'ArmResourceActionNoResponseContentAsync' instead
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param name Azure Programmable Connectivity Gateway Name
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginRegenerateKey(
    resourceGroupName: string,
    name: string,
    body: GatewayRegenerateKeyRequest,
    options?: GatewaysRegenerateKeyOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<GatewaysRegenerateKeyResponse>,
      GatewaysRegenerateKeyResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<GatewaysRegenerateKeyResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, name, body, options },
      spec: regenerateKeyOperationSpec
    });
    const poller = await createHttpPoller<
      GatewaysRegenerateKeyResponse,
      OperationState<GatewaysRegenerateKeyResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * A long-running resource action that returns no content. DEPRECATED: Use
   * 'ArmResourceActionNoResponseContentAsync' instead
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param name Azure Programmable Connectivity Gateway Name
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginRegenerateKeyAndWait(
    resourceGroupName: string,
    name: string,
    body: GatewayRegenerateKeyRequest,
    options?: GatewaysRegenerateKeyOptionalParams
  ): Promise<GatewaysRegenerateKeyResponse> {
    const poller = await this.beginRegenerateKey(
      resourceGroupName,
      name,
      body,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: GatewaysListBySubscriptionNextOptionalParams
  ): Promise<GatewaysListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: GatewaysListByResourceGroupNextOptionalParams
  ): Promise<GatewaysListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.ProgrammableConnectivity/gateways",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GatewayListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ProgrammableConnectivity/gateways",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GatewayListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ProgrammableConnectivity/gateways/{name}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Gateway
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ProgrammableConnectivity/gateways/{name}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Gateway
    },
    201: {
      bodyMapper: Mappers.Gateway
    },
    202: {
      bodyMapper: Mappers.Gateway
    },
    204: {
      bodyMapper: Mappers.Gateway
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.resource,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ProgrammableConnectivity/gateways/{name}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Gateway
    },
    201: {
      bodyMapper: Mappers.Gateway
    },
    202: {
      bodyMapper: Mappers.Gateway
    },
    204: {
      bodyMapper: Mappers.Gateway
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.properties,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ProgrammableConnectivity/gateways/{name}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.GatewaysDeleteHeaders
    },
    201: {
      headersMapper: Mappers.GatewaysDeleteHeaders
    },
    202: {
      headersMapper: Mappers.GatewaysDeleteHeaders
    },
    204: {
      headersMapper: Mappers.GatewaysDeleteHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listKeysOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ProgrammableConnectivity/gateways/{name}/listKeys",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.GatewayListKeysResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const regenerateKeyOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ProgrammableConnectivity/gateways/{name}/regenerateKey",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.GatewaysRegenerateKeyHeaders
    },
    201: {
      headersMapper: Mappers.GatewaysRegenerateKeyHeaders
    },
    202: {
      headersMapper: Mappers.GatewaysRegenerateKeyHeaders
    },
    204: {
      headersMapper: Mappers.GatewaysRegenerateKeyHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GatewayListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GatewayListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
