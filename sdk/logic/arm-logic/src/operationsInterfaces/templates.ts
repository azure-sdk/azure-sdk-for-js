/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  Template,
  TemplatesListBySubscriptionOptionalParams,
  TemplatesListByResourceGroupOptionalParams,
  TemplatesGetOptionalParams,
  TemplatesGetResponse,
  TemplatesCreateOrUpdateOptionalParams,
  TemplatesCreateOrUpdateResponse,
  TemplateUpdate,
  TemplatesUpdateOptionalParams,
  TemplatesUpdateResponse,
  TemplatesDeleteOptionalParams,
  TemplatesDisableOptionalParams,
  TemplatesEnableOptionalParams,
  GenerateUpgradedDefinitionParameters,
  TemplatesGenerateUpgradedDefinitionOptionalParams,
  TemplatesGenerateUpgradedDefinitionResponse,
  GetCallbackUrlParameters,
  TemplatesListCallbackUrlOptionalParams,
  TemplatesListCallbackUrlResponse,
  TemplatesListSwaggerOptionalParams,
  TemplatesListSwaggerResponse,
  WorkflowReference,
  TemplatesMoveOptionalParams,
  RegenerateActionParameter,
  TemplatesRegenerateAccessKeyOptionalParams,
  Workflow,
  TemplatesValidateByResourceGroupOptionalParams,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Templates. */
export interface Templates {
  /**
   * Gets a list of templates by subscription.
   * @param options The options parameters.
   */
  listBySubscription(
    options?: TemplatesListBySubscriptionOptionalParams,
  ): PagedAsyncIterableIterator<Template>;
  /**
   * Gets a list of templates by resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: TemplatesListByResourceGroupOptionalParams,
  ): PagedAsyncIterableIterator<Template>;
  /**
   * Gets a template.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param templateName The template name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    templateName: string,
    options?: TemplatesGetOptionalParams,
  ): Promise<TemplatesGetResponse>;
  /**
   * Creates or updates a template.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param templateName The template name.
   * @param resource The template.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    templateName: string,
    resource: Template,
    options?: TemplatesCreateOrUpdateOptionalParams,
  ): Promise<TemplatesCreateOrUpdateResponse>;
  /**
   * Updates a template.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param templateName The template name.
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    templateName: string,
    properties: TemplateUpdate,
    options?: TemplatesUpdateOptionalParams,
  ): Promise<TemplatesUpdateResponse>;
  /**
   * Deletes a template.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param templateName The template name.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    templateName: string,
    options?: TemplatesDeleteOptionalParams,
  ): Promise<void>;
  /**
   * Disables a template.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param templateName The template name.
   * @param options The options parameters.
   */
  disable(
    resourceGroupName: string,
    templateName: string,
    options?: TemplatesDisableOptionalParams,
  ): Promise<void>;
  /**
   * Enables a template.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param templateName The template name.
   * @param options The options parameters.
   */
  enable(
    resourceGroupName: string,
    templateName: string,
    options?: TemplatesEnableOptionalParams,
  ): Promise<void>;
  /**
   * Generates the upgraded definition for a template.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param templateName The template name.
   * @param body Parameters for generating an upgraded definition.
   * @param options The options parameters.
   */
  generateUpgradedDefinition(
    resourceGroupName: string,
    templateName: string,
    body: GenerateUpgradedDefinitionParameters,
    options?: TemplatesGenerateUpgradedDefinitionOptionalParams,
  ): Promise<TemplatesGenerateUpgradedDefinitionResponse>;
  /**
   * Get the template callback Url.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param templateName The template name.
   * @param body Which callback url to list.
   * @param options The options parameters.
   */
  listCallbackUrl(
    resourceGroupName: string,
    templateName: string,
    body: GetCallbackUrlParameters,
    options?: TemplatesListCallbackUrlOptionalParams,
  ): Promise<TemplatesListCallbackUrlResponse>;
  /**
   * Gets an OpenAPI definition for the template.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param templateName The template name.
   * @param options The options parameters.
   */
  listSwagger(
    resourceGroupName: string,
    templateName: string,
    options?: TemplatesListSwaggerOptionalParams,
  ): Promise<TemplatesListSwaggerResponse>;
  /**
   * Moves an existing template.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param templateName The template name.
   * @param body The template to move.
   * @param options The options parameters.
   */
  beginMove(
    resourceGroupName: string,
    templateName: string,
    body: WorkflowReference,
    options?: TemplatesMoveOptionalParams,
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Moves an existing template.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param templateName The template name.
   * @param body The template to move.
   * @param options The options parameters.
   */
  beginMoveAndWait(
    resourceGroupName: string,
    templateName: string,
    body: WorkflowReference,
    options?: TemplatesMoveOptionalParams,
  ): Promise<void>;
  /**
   * Regenerates the callback URL access key for request triggers.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param templateName The template name.
   * @param body The access key type.
   * @param options The options parameters.
   */
  regenerateAccessKey(
    resourceGroupName: string,
    templateName: string,
    body: RegenerateActionParameter,
    options?: TemplatesRegenerateAccessKeyOptionalParams,
  ): Promise<void>;
  /**
   * Validates the template.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param templateName The template name.
   * @param body The template.
   * @param options The options parameters.
   */
  validateByResourceGroup(
    resourceGroupName: string,
    templateName: string,
    body: Workflow,
    options?: TemplatesValidateByResourceGroupOptionalParams,
  ): Promise<void>;
}
