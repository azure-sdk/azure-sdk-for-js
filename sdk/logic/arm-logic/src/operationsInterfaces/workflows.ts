/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  Workflow,
  WorkflowsListBySubscriptionOptionalParams,
  WorkflowsListByResourceGroupOptionalParams,
  WorkflowsValidateByLocationOptionalParams,
  WorkflowsGetOptionalParams,
  WorkflowsGetResponse,
  WorkflowsCreateOrUpdateOptionalParams,
  WorkflowsCreateOrUpdateResponse,
  WorkflowsUpdateOptionalParams,
  WorkflowsUpdateResponse,
  WorkflowsDeleteOptionalParams,
  WorkflowsDisableOptionalParams,
  WorkflowsEnableOptionalParams,
  GenerateUpgradedDefinitionParameters,
  WorkflowsGenerateUpgradedDefinitionOptionalParams,
  WorkflowsGenerateUpgradedDefinitionResponse,
  GetCallbackUrlParameters,
  WorkflowsListCallbackUrlOptionalParams,
  WorkflowsListCallbackUrlResponse,
  WorkflowsListSwaggerOptionalParams,
  WorkflowsListSwaggerResponse,
  WorkflowReference,
  WorkflowsMoveOptionalParams,
  RegenerateActionParameter,
  WorkflowsRegenerateAccessKeyOptionalParams,
  WorkflowsValidateByResourceGroupOptionalParams,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Workflows. */
export interface Workflows {
  /**
   * Gets a list of workflows by subscription.
   * @param options The options parameters.
   */
  listBySubscription(
    options?: WorkflowsListBySubscriptionOptionalParams,
  ): PagedAsyncIterableIterator<Workflow>;
  /**
   * Gets a list of workflows by resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: WorkflowsListByResourceGroupOptionalParams,
  ): PagedAsyncIterableIterator<Workflow>;
  /**
   * Validates the workflow definition.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param location The name of Azure region.
   * @param workflowName The workflow name.
   * @param validate The workflow.
   * @param options The options parameters.
   */
  validateByLocation(
    resourceGroupName: string,
    location: string,
    workflowName: string,
    validate: Workflow,
    options?: WorkflowsValidateByLocationOptionalParams,
  ): Promise<void>;
  /**
   * Gets a workflow.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workflowName The workflow name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    workflowName: string,
    options?: WorkflowsGetOptionalParams,
  ): Promise<WorkflowsGetResponse>;
  /**
   * Creates or updates a workflow.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workflowName The workflow name.
   * @param resource The workflow.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    workflowName: string,
    resource: Workflow,
    options?: WorkflowsCreateOrUpdateOptionalParams,
  ): Promise<WorkflowsCreateOrUpdateResponse>;
  /**
   * Updates a workflow.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workflowName The workflow name.
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    workflowName: string,
    properties: any,
    options?: WorkflowsUpdateOptionalParams,
  ): Promise<WorkflowsUpdateResponse>;
  /**
   * Deletes a workflow.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workflowName The workflow name.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    workflowName: string,
    options?: WorkflowsDeleteOptionalParams,
  ): Promise<void>;
  /**
   * Disables a workflow.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workflowName The workflow name.
   * @param options The options parameters.
   */
  disable(
    resourceGroupName: string,
    workflowName: string,
    options?: WorkflowsDisableOptionalParams,
  ): Promise<void>;
  /**
   * Enables a workflow.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workflowName The workflow name.
   * @param options The options parameters.
   */
  enable(
    resourceGroupName: string,
    workflowName: string,
    options?: WorkflowsEnableOptionalParams,
  ): Promise<void>;
  /**
   * Generates the upgraded definition for a workflow.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workflowName The workflow name.
   * @param body Parameters for generating an upgraded definition.
   * @param options The options parameters.
   */
  generateUpgradedDefinition(
    resourceGroupName: string,
    workflowName: string,
    body: GenerateUpgradedDefinitionParameters,
    options?: WorkflowsGenerateUpgradedDefinitionOptionalParams,
  ): Promise<WorkflowsGenerateUpgradedDefinitionResponse>;
  /**
   * Get the workflow callback Url.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workflowName The workflow name.
   * @param body Which callback url to list.
   * @param options The options parameters.
   */
  listCallbackUrl(
    resourceGroupName: string,
    workflowName: string,
    body: GetCallbackUrlParameters,
    options?: WorkflowsListCallbackUrlOptionalParams,
  ): Promise<WorkflowsListCallbackUrlResponse>;
  /**
   * Gets an OpenAPI definition for the workflow.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workflowName The workflow name.
   * @param options The options parameters.
   */
  listSwagger(
    resourceGroupName: string,
    workflowName: string,
    options?: WorkflowsListSwaggerOptionalParams,
  ): Promise<WorkflowsListSwaggerResponse>;
  /**
   * Moves an existing workflow.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workflowName The workflow name.
   * @param body The workflow to move.
   * @param options The options parameters.
   */
  beginMove(
    resourceGroupName: string,
    workflowName: string,
    body: WorkflowReference,
    options?: WorkflowsMoveOptionalParams,
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Moves an existing workflow.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workflowName The workflow name.
   * @param body The workflow to move.
   * @param options The options parameters.
   */
  beginMoveAndWait(
    resourceGroupName: string,
    workflowName: string,
    body: WorkflowReference,
    options?: WorkflowsMoveOptionalParams,
  ): Promise<void>;
  /**
   * Regenerates the callback URL access key for request triggers.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workflowName The workflow name.
   * @param body The access key type.
   * @param options The options parameters.
   */
  regenerateAccessKey(
    resourceGroupName: string,
    workflowName: string,
    body: RegenerateActionParameter,
    options?: WorkflowsRegenerateAccessKeyOptionalParams,
  ): Promise<void>;
  /**
   * Validates the workflow.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workflowName The workflow name.
   * @param body The workflow.
   * @param options The options parameters.
   */
  validateByResourceGroup(
    resourceGroupName: string,
    workflowName: string,
    body: Workflow,
    options?: WorkflowsValidateByResourceGroupOptionalParams,
  ): Promise<void>;
}
