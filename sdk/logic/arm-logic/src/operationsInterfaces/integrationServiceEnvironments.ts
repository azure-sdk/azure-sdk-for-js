/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  IntegrationServiceEnvironment,
  IntegrationServiceEnvironmentsListBySubscriptionOptionalParams,
  IntegrationServiceEnvironmentsListByResourceGroupOptionalParams,
  IntegrationServiceEnvironmentsGetOptionalParams,
  IntegrationServiceEnvironmentsGetResponse,
  IntegrationServiceEnvironmentsCreateOrUpdateOptionalParams,
  IntegrationServiceEnvironmentsCreateOrUpdateResponse,
  IntegrationServiceEnvironmentsUpdateOptionalParams,
  IntegrationServiceEnvironmentsUpdateResponse,
  IntegrationServiceEnvironmentsDeleteOptionalParams,
  IntegrationServiceEnvironmentsRestartOptionalParams,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a IntegrationServiceEnvironments. */
export interface IntegrationServiceEnvironments {
  /**
   * Gets a list of integration service environments by subscription.
   * @param options The options parameters.
   */
  listBySubscription(
    options?: IntegrationServiceEnvironmentsListBySubscriptionOptionalParams,
  ): PagedAsyncIterableIterator<IntegrationServiceEnvironment>;
  /**
   * Gets a list of integration service environments by resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: IntegrationServiceEnvironmentsListByResourceGroupOptionalParams,
  ): PagedAsyncIterableIterator<IntegrationServiceEnvironment>;
  /**
   * Gets an integration service environment.
   * @param integrationServiceEnvironmentName The integration service environment name.
   * @param options The options parameters.
   */
  get(
    integrationServiceEnvironmentName: string,
    options?: IntegrationServiceEnvironmentsGetOptionalParams,
  ): Promise<IntegrationServiceEnvironmentsGetResponse>;
  /**
   * Creates or updates an integration service environment.
   * @param integrationServiceEnvironmentName The integration service environment name.
   * @param resource The integration service environment.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    integrationServiceEnvironmentName: string,
    resource: IntegrationServiceEnvironment,
    options?: IntegrationServiceEnvironmentsCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<IntegrationServiceEnvironmentsCreateOrUpdateResponse>,
      IntegrationServiceEnvironmentsCreateOrUpdateResponse
    >
  >;
  /**
   * Creates or updates an integration service environment.
   * @param integrationServiceEnvironmentName The integration service environment name.
   * @param resource The integration service environment.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    integrationServiceEnvironmentName: string,
    resource: IntegrationServiceEnvironment,
    options?: IntegrationServiceEnvironmentsCreateOrUpdateOptionalParams,
  ): Promise<IntegrationServiceEnvironmentsCreateOrUpdateResponse>;
  /**
   * Updates an integration service environment.
   * @param integrationServiceEnvironmentName The integration service environment name.
   * @param properties The integration service environment.
   * @param options The options parameters.
   */
  update(
    integrationServiceEnvironmentName: string,
    properties: IntegrationServiceEnvironment,
    options?: IntegrationServiceEnvironmentsUpdateOptionalParams,
  ): Promise<IntegrationServiceEnvironmentsUpdateResponse>;
  /**
   * Deletes an integration service environment.
   * @param integrationServiceEnvironmentName The integration service environment name.
   * @param options The options parameters.
   */
  delete(
    integrationServiceEnvironmentName: string,
    options?: IntegrationServiceEnvironmentsDeleteOptionalParams,
  ): Promise<void>;
  /**
   * Restarts an integration service environment.
   * @param integrationServiceEnvironmentName The integration service environment name.
   * @param options The options parameters.
   */
  restart(
    integrationServiceEnvironmentName: string,
    options?: IntegrationServiceEnvironmentsRestartOptionalParams,
  ): Promise<void>;
}
