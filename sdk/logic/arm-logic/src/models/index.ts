/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of results. */
export interface OperationListResult {
  /**
   * List of operations supported by the resource provider
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Operation[];
  /**
   * URL to get the next set of operation list results (if there are any).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Details of a REST API operation, returned from the Resource Provider Operations API */
export interface Operation {
  /**
   * The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for ARM/control-plane operations.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isDataAction?: boolean;
  /** Localized display information for this particular operation. */
  display?: OperationDisplay;
  /**
   * The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is "user,system"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly origin?: Origin;
  /**
   * Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly actionType?: ActionType;
}

/** Localized display information for this particular operation. */
export interface OperationDisplay {
  /**
   * The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft Compute".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provider?: string;
  /**
   * The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job Schedule Collections".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resource?: string;
  /**
   * The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operation?: string;
  /**
   * The short, localized friendly description of the operation; suitable for tool tips and detailed views.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export interface ErrorResponse {
  /** The error object. */
  error?: ErrorDetail;
}

/** The error detail. */
export interface ErrorDetail {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDetail[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: any;
}

/** The response of a IntegrationAccount list operation. */
export interface IntegrationAccountListResult {
  /** The IntegrationAccount items on this page */
  value: IntegrationAccount[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** The resource reference. */
export interface ResourceReference {
  /** The resource id. */
  id?: string;
  /**
   * Gets the resource name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Gets the resource type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
}

/** The integration account sku. */
export interface IntegrationAccountSku {
  /** The sku name. */
  name: IntegrationAccountSkuName;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export interface Resource {
  /**
   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Azure Resource Manager metadata containing createdBy and modifiedBy information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The timestamp of resource last modification (UTC) */
  lastModifiedAt?: Date;
}

/** The response of a IntegrationServiceEnvironment list operation. */
export interface IntegrationServiceEnvironmentListResult {
  /** The IntegrationServiceEnvironment items on this page */
  value: IntegrationServiceEnvironment[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** The endpoints configuration. */
export interface FlowEndpointsConfiguration {
  /** The workflow endpoints. */
  workflow?: FlowEndpoints;
  /** The connector endpoints. */
  connector?: FlowEndpoints;
}

/** The flow endpoints configuration. */
export interface FlowEndpoints {
  /** The outgoing ip address. */
  outgoingIpAddresses?: IpAddress[];
  /** The access endpoint ip address. */
  accessEndpointIpAddresses?: IpAddress[];
}

/** The ip address. */
export interface IpAddress {
  /** The address. */
  address?: string;
}

/** The network configuration. */
export interface NetworkConfiguration {
  /** Gets the virtual network address space. */
  virtualNetworkAddressSpace?: string;
  /** The access endpoint. */
  accessEndpoint?: IntegrationServiceEnvironmentAccessEndpoint;
  /** The subnets. */
  subnets?: ResourceReference[];
}

/** The integration service environment access endpoint. */
export interface IntegrationServiceEnvironmentAccessEndpoint {
  /** The access endpoint type. */
  type?: IntegrationServiceEnvironmentAccessEndpointType;
}

/** The encryption configuration for the integration service environment. */
export interface IntegrationServiceEnvironmenEncryptionConfiguration {
  /** The encryption key reference. */
  encryptionKeyReference?: IntegrationServiceEnvironmenEncryptionKeyReference;
}

/** The encryption key details for the integration service environment. */
export interface IntegrationServiceEnvironmenEncryptionKeyReference {
  /** The key vault reference. */
  keyVault?: ResourceReference;
  /** Gets the key name in the Key Vault. */
  keyName?: string;
  /** Gets the version of the key specified in the keyName property. */
  keyVersion?: string;
}

/** The integration service environment sku. */
export interface IntegrationServiceEnvironmentSku {
  /** The sku name. */
  name?: IntegrationServiceEnvironmentSkuName;
  /** The sku capacity. */
  capacity?: number;
}

/** Managed service identity properties. */
export interface ManagedServiceIdentity {
  /** Type of managed service identity. The type 'SystemAssigned' includes an implicitly created identity. The type 'None' will remove any identities from the resource. */
  type: ManagedServiceIdentityType;
  /**
   * Tenant of managed service identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /**
   * Principal Id of managed service identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /** The list of user assigned identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName} */
  userAssignedIdentities?: { [propertyName: string]: UserAssignedIdentity };
}

/** User assigned identity properties */
export interface UserAssignedIdentity {
  /**
   * The principal ID of the assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The client ID of the assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly clientId?: string;
}

/** The response of a IntegrationServiceEnvironmentManagedApi list operation. */
export interface IntegrationServiceEnvironmentManagedApiListResult {
  /** The IntegrationServiceEnvironmentManagedApi items on this page */
  value: IntegrationServiceEnvironmentManagedApi[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** The integration service environment managed api deployment parameters. */
export interface IntegrationServiceEnvironmentManagedApiDeploymentParameters {
  /** The integration service environment managed api content link for deployment. */
  contentLinkDefinition?: ContentLink;
}

/** The content link. */
export interface ContentLink {
  /** The content link URI. */
  uri?: string;
  /**
   * The content version.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly contentVersion?: string;
  /**
   * The content size.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly contentSize?: number;
  /**
   * The content hash.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly contentHash?: ContentHash;
  /**
   * The metadata.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly metadata?: { [propertyName: string]: any };
}

/** The content hash. */
export interface ContentHash {
  /** The algorithm of the content hash. */
  algorithm?: string;
  /** The value of the content hash. */
  value?: string;
}

/** The API resource properties. */
export interface ApiResourceProperties {
  /**
   * The connection parameters.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly connectionParameters?: {
    [propertyName: string]: { [propertyName: string]: any };
  };
  /**
   * The metadata.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly metadata?: ApiResourceMetadata;
  /**
   * The runtime urls.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly runtimeUrls?: string[];
  /**
   * The api general information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly generalInformation?: ApiResourceGeneralInformation;
  /**
   * The capabilities.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly capabilities?: string[];
  /**
   * The backend service.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly backendService?: ApiResourceBackendService;
  /**
   * The policies for the API.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly policies?: ApiResourcePolicies;
  /**
   * The API definition.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly apiDefinitionUrl?: string;
  /**
   * The api definitions.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly apiDefinitions?: ApiResourceDefinitions;
  /** The integration service environment reference. */
  integrationServiceEnvironment?: ResourceReference;
  /**
   * The provisioning state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: WorkflowProvisioningState;
  /**
   * The category.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly category?: ApiTier;
}

/** The api resource metadata. */
export interface ApiResourceMetadata {
  /** The source. */
  source?: string;
  /** The brand color. */
  brandColor?: string;
  /** The hide key. */
  hideKey?: string;
  /** The tags. */
  tags?: { [propertyName: string]: string };
  /** The api type. */
  apiType?: ApiType;
  /** The WSDL service. */
  wsdlService?: WsdlService;
  /** The WSDL import method. */
  wsdlImportMethod?: WsdlImportMethod;
  /** The connection type. */
  connectionType?: string;
  /**
   * The provisioning state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: WorkflowProvisioningState;
  /** The connector deployment parameters metadata. */
  deploymentParameters?: ApiDeploymentParameterMetadataSet;
}

/** The WSDL service. */
export interface WsdlService {
  /** The qualified name. */
  qualifiedName?: string;
  /** The list of endpoints' qualified names. */
  endpointQualifiedNames?: string[];
}

/** The API deployment parameters metadata. */
export interface ApiDeploymentParameterMetadataSet {
  /** The package content link parameter. */
  packageContentLink?: ApiDeploymentParameterMetadata;
  /** The package content link parameter. */
  redisCacheConnectionString?: ApiDeploymentParameterMetadata;
}

/** The API deployment parameter metadata. */
export interface ApiDeploymentParameterMetadata {
  /** The type. */
  type?: string;
  /** Indicates whether its required. */
  isRequired?: boolean;
  /** The display name. */
  displayName?: string;
  /** The description. */
  description?: string;
  /** The visibility. */
  visibility?: ApiDeploymentParameterVisibility;
}

/** The API general information. */
export interface ApiResourceGeneralInformation {
  /** The icon url. */
  iconUrl?: string;
  /** The display name. */
  displayName?: string;
  /** The description. */
  description?: string;
  /** The terms of use url. */
  termsOfUseUrl?: string;
  /** The release tag. */
  releaseTag?: string;
  /** The tier. */
  tier?: ApiTier;
}

/** The API backend service. */
export interface ApiResourceBackendService {
  /** The service URL. */
  serviceUrl?: string;
}

/** The API resource policies. */
export interface ApiResourcePolicies {
  /** The API level only policies XML as embedded content. */
  content?: string;
  /** The content link to the policies. */
  contentLink?: string;
}

/** The Api resource definition. */
export interface ApiResourceDefinitions {
  /** The original swagger url. */
  originalSwaggerUrl?: string;
  /** The modified swagger url. */
  modifiedSwaggerUrl?: string;
}

/** The response of a ApiOperation list operation. */
export interface ApiOperationListResult {
  /** The ApiOperation items on this page */
  value: ApiOperation[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** The Api Operation Annotation. */
export interface ApiOperationAnnotation {
  /** The status annotation. */
  status?: StatusAnnotation;
  /** The family. */
  family?: string;
  /** The revision. */
  revision?: number;
}

/** The swagger schema. */
export interface SwaggerSchema {
  /** The reference. */
  ref?: string;
  /** The type */
  type?: SwaggerSchemaType;
  /** The title. */
  title?: string;
  /** The items schema. */
  items?: SwaggerSchema;
  /** The object properties */
  properties?: { [propertyName: string]: SwaggerSchema };
  /** The additional properties. */
  additionalProperties?: { [propertyName: string]: any };
  /** The object required properties. */
  required?: string[];
  /** The maximum number of allowed properties. */
  maxProperties?: number;
  /** The minimum number of allowed properties. */
  minProperties?: number;
  /** The schemas which must pass validation when this schema is used. */
  allOf?: SwaggerSchema[];
  /** The discriminator. */
  discriminator?: string;
  /** Indicates whether this property must be present in the a request. */
  readOnly?: boolean;
  /** The xml representation format for a property. */
  xml?: SwaggerXml;
  /** The external documentation. */
  externalDocs?: SwaggerExternalDocumentation;
  /** The example value. */
  example?: { [propertyName: string]: any };
  /** Indicates the notification url extension. If this is set, the property's value should be a callback url for a webhook. */
  notificationUrlExtension?: boolean;
  /** The dynamic schema configuration. */
  dynamicSchemaOld?: SwaggerCustomDynamicSchema;
  /** The dynamic schema configuration. */
  dynamicSchemaNew?: SwaggerCustomDynamicProperties;
  /** The dynamic list. */
  dynamicListNew?: SwaggerCustomDynamicList;
  /** The dynamic values tree configuration. */
  dynamicTree?: SwaggerCustomDynamicTree;
}

/** The Swagger XML. */
export interface SwaggerXml {
  /** The xml element or attribute name. */
  name?: string;
  /** The xml namespace. */
  namespace?: string;
  /** The name prefix. */
  prefix?: string;
  /** Indicates whether the property should be an attribute instead of an element. */
  attribute?: boolean;
  /** Indicates whether the array elements are wrapped in a container element. */
  wrapped?: boolean;
  /** The vendor extensions. */
  extensions?: { [propertyName: string]: { [propertyName: string]: any } };
}

/** The swagger external documentation */
export interface SwaggerExternalDocumentation {
  /** The document description. */
  description?: string;
  /** The documentation Uri. */
  uri?: string;
  /** The vendor extensions. */
  extensions?: { [propertyName: string]: { [propertyName: string]: any } };
}

/** The swagger custom dynamic schema. */
export interface SwaggerCustomDynamicSchema {
  /** The operation id to fetch dynamic schema. */
  operationId?: string;
  /** Json pointer to the dynamic schema on the response body. */
  valuePath?: string;
  /** The operation parameters. */
  parameters?: { [propertyName: string]: { [propertyName: string]: any } };
}

/** The swagger custom dynamic properties. */
export interface SwaggerCustomDynamicProperties {
  /** The operation id to fetch dynamic schema. */
  operationId?: string;
  /** Json pointer to the dynamic schema on the response body. */
  valuePath?: string;
  /** The operation parameters. */
  parameters?: { [propertyName: string]: SwaggerCustomDynamicProperties };
}

/** The swagger custom dynamic list. */
export interface SwaggerCustomDynamicList {
  /** The operation id to fetch dynamic schema. */
  operationId?: string;
  /** The built in operation. */
  builtInOperation?: string;
  /** The path to a response property (relative to the response object, not the response body) which contains an array of dynamic value items. */
  itemsPath?: string;
  /** The path to a property which defines the value which should be used. */
  itemValuePath?: string;
  /** The path to an item property which defines the display name of the item. */
  itemTitlePath?: string;
  /** The parameters. */
  parameters?: { [propertyName: string]: SwaggerCustomDynamicProperties };
}

/** The swagger custom dynamic tree. */
export interface SwaggerCustomDynamicTree {
  /** The tree settings */
  settings?: SwaggerCustomDynamicTreeSettings;
  /** The tree on-open configuration */
  open?: SwaggerCustomDynamicTreeCommand;
  /** The tree on-browse configuration */
  browse?: SwaggerCustomDynamicTreeCommand;
}

/** The swagger custom dynamic tree settings. */
export interface SwaggerCustomDynamicTreeSettings {
  /** Indicates whether parent nodes can be selected. */
  canSelectParentNodes?: boolean;
  /** Indicates whether leaf nodes can be selected. */
  canSelectLeafNodes?: boolean;
}

/** The swagger tree command. */
export interface SwaggerCustomDynamicTreeCommand {
  /** The path to an item property which defines the display name of the item. */
  operationId?: string;
  /** The path to an item property which defines the display name of the item. */
  itemsPath?: string;
  /** The path to an item property which defines the display name of the item. */
  itemValuePath?: string;
  /** The path to an item property which defines the display name of the item. */
  itemTitlePath?: string;
  /** The path to an item property which defines the display name of the item. */
  itemFullTitlePath?: string;
  /** The path to an item property which defines the display name of the item. */
  itemIsParent?: string;
  /** The path to an item property which defines the display name of the item. */
  selectableFilter?: string;
  /** Dictionary of <SwaggerCustomDynamicTreeParameter> */
  parameters?: { [propertyName: string]: SwaggerCustomDynamicTreeParameter };
}

/** The swagger custom dynamic tree parameter. */
export interface SwaggerCustomDynamicTreeParameter {
  /** Gets or sets a path to a property in the currently selected item to pass as a value to a parameter for the given operation. */
  selectedItemValuePath?: string;
  /** The parameter value. */
  value?: { [propertyName: string]: any };
  /** The parameter reference. */
  parameterReference?: string;
  /** Indicates whether the parameter is required. */
  required?: boolean;
}

/** The integration service environment network health. */
export interface IntegrationServiceEnvironmentNetworkHealth {
  /** The outbound network dependencies. */
  outboundNetworkDependencies?: IntegrationServiceEnvironmentNetworkDependency[];
}

/** The azure async operation resource. */
export interface IntegrationServiceEnvironmentNetworkDependency {
  /** The network dependency category type. */
  category?: IntegrationServiceEnvironmentNetworkDependencyCategoryType;
  /** The display name. */
  displayName?: string;
  /** The endpoints. */
  endpoints?: IntegrationServiceEnvironmentNetworkEndpoint[];
}

/** The network endpoint. */
export interface IntegrationServiceEnvironmentNetworkEndpoint {
  /** The accessibility state. */
  accessibility?: IntegrationServiceEnvironmentNetworkEndPointAccessibilityState;
  /** The domain name. */
  domainName?: string;
  /** The ports. */
  ports?: string[];
}

/** The list of integration service environment skus. */
export interface IntegrationServiceEnvironmentSkuList {
  /** The IntegrationServiceEnvironmentSkuDefinition items on this page */
  value: IntegrationServiceEnvironmentSkuDefinition[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** The integration service environment sku definition. */
export interface IntegrationServiceEnvironmentSkuDefinition {
  /** The resource type. */
  resourceType?: string;
  /** The sku. */
  sku?: IntegrationServiceEnvironmentSkuDefinitionSku;
  /** The sku capacity. */
  capacity?: IntegrationServiceEnvironmentSkuCapacity;
}

/** The sku. */
export interface IntegrationServiceEnvironmentSkuDefinitionSku {
  /** The sku name. */
  name?: IntegrationServiceEnvironmentSkuName;
  /** The sku tier. */
  tier?: string;
}

/** The integration service environment sku capacity. */
export interface IntegrationServiceEnvironmentSkuCapacity {
  /** The minimum capacity. */
  minimum?: number;
  /** The maximum capacity. */
  maximum?: number;
  /** The default capacity. */
  default?: number;
  /** The sku scale type. */
  scaleType?: IntegrationServiceEnvironmentSkuScaleType;
}

/** The response of a Workflow list operation. */
export interface WorkflowListResult {
  /** The Workflow items on this page */
  value: Workflow[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** The access control configuration. */
export interface FlowAccessControlConfiguration {
  /** The access control configuration for invoking workflow triggers. */
  triggers?: FlowAccessControlConfigurationPolicy;
  /** The access control configuration for accessing workflow run contents. */
  contents?: FlowAccessControlConfigurationPolicy;
  /** The access control configuration for workflow actions. */
  actions?: FlowAccessControlConfigurationPolicy;
  /** The access control configuration for workflow management. */
  workflowManagement?: FlowAccessControlConfigurationPolicy;
}

/** The access control configuration policy. */
export interface FlowAccessControlConfigurationPolicy {
  /** The allowed caller IP address ranges. */
  allowedCallerIpAddresses?: IpAddressRange[];
  /** The authentication policies for workflow. */
  openAuthenticationPolicies?: OpenAuthenticationAccessPolicies;
}

/** The ip address range. */
export interface IpAddressRange {
  /** The IP address range. */
  addressRange?: string;
}

/** AuthenticationPolicy of type Open. */
export interface OpenAuthenticationAccessPolicies {
  /** Open authentication policies. */
  policies?: { [propertyName: string]: OpenAuthenticationAccessPolicy };
}

/** Open authentication access policy defined by user. */
export interface OpenAuthenticationAccessPolicy {
  /** Type of provider for OAuth. */
  type?: OpenAuthenticationProviderType;
  /** The access policy claims. */
  claims?: OpenAuthenticationPolicyClaim[];
}

/** Open authentication policy claim. */
export interface OpenAuthenticationPolicyClaim {
  /** The name of the claim. */
  name?: string;
  /** The value of the claim. */
  value?: string;
}

/** The sku type. */
export interface Sku {
  /** The name. */
  name: SkuName;
  /** The reference to plan. */
  plan?: ResourceReference;
}

/** The workflow parameters. */
export interface WorkflowParameter {
  /** The type. */
  type?: ParameterType;
  /** The value. */
  value?: { [propertyName: string]: any };
  /** The metadata. */
  metadata?: { [propertyName: string]: any };
  /** The description. */
  description?: string;
}

/** The response of a IntegrationAccountAgreement list operation. */
export interface IntegrationAccountAgreementListResult {
  /** The IntegrationAccountAgreement items on this page */
  value: IntegrationAccountAgreement[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** The integration account partner's business identity. */
export interface BusinessIdentity {
  /** The business identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32 */
  qualifier: string;
  /** The user defined business identity value. */
  value: string;
}

/** The integration account agreement content. */
export interface AgreementContent {
  /** The AS2 agreement content. */
  aS2?: As2AgreementContent;
  /** The X12 agreement content. */
  x12?: X12AgreementContent;
  /** The EDIFACT agreement content. */
  edifact?: EdifactAgreementContent;
}

/** The integration account AS2 agreement content. */
export interface As2AgreementContent {
  /** The AS2 one-way receive agreement. */
  receiveAgreement: As2OneWayAgreement;
  /** The AS2 one-way send agreement. */
  sendAgreement: As2OneWayAgreement;
}

/** The integration account AS2 one-way agreement. */
export interface As2OneWayAgreement {
  /** The sender business identity */
  senderBusinessIdentity: BusinessIdentity;
  /** The receiver business identity */
  receiverBusinessIdentity: BusinessIdentity;
  /** The AS2 protocol settings. */
  protocolSettings: As2ProtocolSettings;
}

/** The AS2 agreement protocol settings. */
export interface As2ProtocolSettings {
  /** The message connection settings. */
  messageConnectionSettings: As2MessageConnectionSettings;
  /** The acknowledgement connection settings. */
  acknowledgementConnectionSettings: As2AcknowledgementConnectionSettings;
  /** The MDN settings. */
  mdnSettings: As2MdnSettings;
  /** The security settings. */
  securitySettings: As2SecuritySettings;
  /** The validation settings. */
  validationSettings: As2ValidationSettings;
  /** The envelope settings. */
  envelopeSettings: As2EnvelopeSettings;
  /** The error settings. */
  errorSettings: As2ErrorSettings;
}

/** The AS2 agreement message connection settings. */
export interface As2MessageConnectionSettings {
  /** The value indicating whether to ignore mismatch in certificate name. */
  ignoreCertificateNameMismatch: boolean;
  /** The value indicating whether to support HTTP status code 'CONTINUE'. */
  supportHttpStatusCodeContinue: boolean;
  /** The value indicating whether to keep the connection alive. */
  keepHttpConnectionAlive: boolean;
  /** The value indicating whether to unfold the HTTP headers. */
  unfoldHttpHeaders: boolean;
}

/** The AS2 agreement acknowledgement connection settings. */
export interface As2AcknowledgementConnectionSettings {
  /** Indicates whether to ignore mismatch in certificate name. */
  ignoreCertificateNameMismatch: boolean;
  /** Indicates whether to support HTTP status code 'CONTINUE'. */
  supportHttpStatusCodeContinue: boolean;
  /** Indicates whether to keep the connection alive. */
  keepHttpConnectionAlive: boolean;
  /** Indicates whether to unfold the HTTP headers. */
  unfoldHttpHeaders: boolean;
}

/** The AS2 agreement mdn settings. */
export interface As2MdnSettings {
  /** The value indicating whether to send or request a MDN. */
  needMdn: boolean;
  /** The value indicating whether the MDN needs to be signed or not. */
  signMdn: boolean;
  /** The value indicating whether to send the asynchronous MDN. */
  sendMdnAsynchronously: boolean;
  /** The receipt delivery URL. */
  receiptDeliveryUrl?: string;
  /** The disposition notification to header value. */
  dispositionNotificationTo?: string;
  /** The value indicating whether to sign the outbound MDN if optional. */
  signOutboundMdnIfOptional: boolean;
  /** The MDN text. */
  mdnText?: string;
  /** The value indicating whether to send inbound MDN to message box. */
  sendInboundMdnToMessageBox: boolean;
  /** The signing or hashing algorithm. */
  micHashingAlgorithm: HashingAlgorithm;
}

/** The AS2 agreement security settings. */
export interface As2SecuritySettings {
  /** The value indicating whether to send or request a MDN. */
  overrideGroupSigningCertificate: boolean;
  /** The name of the signing certificate. */
  signingCertificateName?: string;
  /** The name of the encryption certificate. */
  encryptionCertificateName?: string;
  /** The value indicating whether to enable NRR for inbound encoded messages. */
  enableNrrForInboundEncodedMessages: boolean;
  /** The value indicating whether to enable NRR for inbound decoded messages. */
  enableNrrForInboundDecodedMessages: boolean;
  /** The value indicating whether to enable NRR for outbound MDN. */
  enableNrrForOutboundMdn: boolean;
  /** The value indicating whether to enable NRR for outbound encoded messages. */
  enableNrrForOutboundEncodedMessages: boolean;
  /** The value indicating whether to enable NRR for outbound decoded messages. */
  enableNrrForOutboundDecodedMessages: boolean;
  /** The value indicating whether to enable NRR for inbound MDN. */
  enableNrrForInboundMdn: boolean;
  /** The Sha2 algorithm format. Valid values are Sha2, ShaHashSize, ShaHyphenHashSize, Sha2UnderscoreHashSize. */
  sha2AlgorithmFormat?: string;
}

/** The AS2 agreement validation settings. */
export interface As2ValidationSettings {
  /** The value indicating whether to override incoming message properties with those in agreement. */
  overrideMessageProperties: boolean;
  /** The value indicating whether the message has to be encrypted. */
  encryptMessage: boolean;
  /** The value indicating whether the message has to be signed. */
  signMessage: boolean;
  /** The value indicating whether the message has to be compressed. */
  compressMessage: boolean;
  /** The value indicating whether to check for duplicate message. */
  checkDuplicateMessage: boolean;
  /** The number of days to look back for duplicate interchange. */
  interchangeDuplicatesValidityDays: number;
  /** The value indicating whether to check for certificate revocation list on send. */
  checkCertificateRevocationListOnSend: boolean;
  /** The value indicating whether to check for certificate revocation list on receive. */
  checkCertificateRevocationListOnReceive: boolean;
  /** The encryption algorithm. */
  encryptionAlgorithm: EncryptionAlgorithm;
  /** The signing algorithm. */
  signingAlgorithm?: SigningAlgorithm;
}

/** The AS2 agreement envelope settings. */
export interface As2EnvelopeSettings {
  /** The message content type. */
  messageContentType: string;
  /** The value indicating whether to transmit file name in mime header. */
  transmitFileNameInMimeHeader: boolean;
  /** The template for file name. */
  fileNameTemplate: string;
  /** The value indicating whether to suspend message on file name generation error. */
  suspendMessageOnFileNameGenerationError: boolean;
  /** The value indicating whether to auto generate file name. */
  autogenerateFileName: boolean;
}

/** The AS2 agreement error settings. */
export interface As2ErrorSettings {
  /** The value indicating whether to suspend duplicate message. */
  suspendDuplicateMessage: boolean;
  /** The value indicating whether to resend message If MDN is not received. */
  resendIfMdnNotReceived: boolean;
}

/** The X12 agreement content. */
export interface X12AgreementContent {
  /** The X12 one-way receive agreement. */
  receiveAgreement: X12OneWayAgreement;
  /** The X12 one-way send agreement. */
  sendAgreement: X12OneWayAgreement;
}

/** The X12 one-way agreement. */
export interface X12OneWayAgreement {
  /** The sender business identity */
  senderBusinessIdentity: BusinessIdentity;
  /** The receiver business identity */
  receiverBusinessIdentity: BusinessIdentity;
  /** The X12 protocol settings. */
  protocolSettings: X12ProtocolSettings;
}

/** The X12 agreement protocol settings. */
export interface X12ProtocolSettings {
  /** The X12 validation settings. */
  validationSettings: X12ValidationSettings;
  /** The X12 framing settings. */
  framingSettings: X12FramingSettings;
  /** The X12 envelope settings. */
  envelopeSettings: X12EnvelopeSettings;
  /** The X12 acknowledgment settings. */
  acknowledgementSettings: X12AcknowledgementSettings;
  /** The X12 message filter. */
  messageFilter: X12MessageFilter;
  /** The X12 security settings. */
  securitySettings: X12SecuritySettings;
  /** The X12 processing settings. */
  processingSettings: X12ProcessingSettings;
  /** The X12 envelope override settings. */
  envelopeOverrides?: X12EnvelopeOverride[];
  /** The X12 validation override settings. */
  validationOverrides?: X12ValidationOverride[];
  /** The X12 message filter list. */
  messageFilterList?: X12MessageIdentifier[];
  /** The X12 schema references. */
  schemaReferences: X12SchemaReference[];
  /** The X12 delimiter override settings. */
  x12DelimiterOverrides?: X12DelimiterOverrides[];
}

/** The X12 agreement validation settings. */
export interface X12ValidationSettings {
  /** The value indicating whether to validate character set in the message. */
  validateCharacterSet: boolean;
  /** The value indicating whether to check for duplicate interchange control number. */
  checkDuplicateInterchangeControlNumber: boolean;
  /** The validity period of interchange control number. */
  interchangeControlNumberValidityDays: number;
  /** The value indicating whether to check for duplicate group control number. */
  checkDuplicateGroupControlNumber: boolean;
  /** The value indicating whether to check for duplicate transaction set control number. */
  checkDuplicateTransactionSetControlNumber: boolean;
  /** The value indicating whether to Whether to validate EDI types. */
  validateEdiTypes: boolean;
  /** The value indicating whether to Whether to validate XSD types. */
  validateXsdTypes: boolean;
  /** The value indicating whether to allow leading and trailing spaces and zeroes. */
  allowLeadingAndTrailingSpacesAndZeroes: boolean;
  /** The value indicating whether to trim leading and trailing spaces and zeroes. */
  trimLeadingAndTrailingSpacesAndZeroes: boolean;
  /** The trailing separator policy. */
  trailingSeparatorPolicy: TrailingSeparatorPolicy;
}

/** The X12 agreement framing settings. */
export interface X12FramingSettings {
  /** The data element separator. */
  dataElementSeparator: number;
  /** The component separator. */
  componentSeparator: number;
  /** The value indicating whether to replace separators in payload. */
  replaceSeparatorsInPayload: boolean;
  /** The replacement character. */
  replaceCharacter: number;
  /** The segment terminator. */
  segmentTerminator: number;
  /** The X12 character set. */
  characterSet: X12CharacterSet;
  /** The segment terminator suffix. */
  segmentTerminatorSuffix: SegmentTerminatorSuffix;
}

/** The X12 agreement envelope settings. */
export interface X12EnvelopeSettings {
  /** The controls standards id. */
  controlStandardsId: number;
  /** The value indicating whether to use control standards id as repetition character. */
  useControlStandardsIdAsRepetitionCharacter: boolean;
  /** The sender application id. */
  senderApplicationId: string;
  /** The receiver application id. */
  receiverApplicationId: string;
  /** The control version number. */
  controlVersionNumber: string;
  /** The interchange  control number lower bound. */
  interchangeControlNumberLowerBound: number;
  /** The interchange  control number upper bound. */
  interchangeControlNumberUpperBound: number;
  /** The value indicating whether to rollover interchange control number. */
  rolloverInterchangeControlNumber: boolean;
  /** The value indicating whether to enable default group headers. */
  enableDefaultGroupHeaders: boolean;
  /** The functional group id. */
  functionalGroupId?: string;
  /** The group control number lower bound. */
  groupControlNumberLowerBound: number;
  /** The group control number upper bound. */
  groupControlNumberUpperBound: number;
  /** The value indicating whether to rollover group control number. */
  rolloverGroupControlNumber: boolean;
  /** The group header agency code. */
  groupHeaderAgencyCode: string;
  /** The group header version. */
  groupHeaderVersion: string;
  /** The transaction set control number lower bound. */
  transactionSetControlNumberLowerBound: number;
  /** The transaction set control number upper bound. */
  transactionSetControlNumberUpperBound: number;
  /** The value indicating whether to rollover transaction set control number. */
  rolloverTransactionSetControlNumber: boolean;
  /** The transaction set control number prefix. */
  transactionSetControlNumberPrefix?: string;
  /** The transaction set control number suffix. */
  transactionSetControlNumberSuffix?: string;
  /** The value indicating whether to overwrite existing transaction set control number. */
  overwriteExistingTransactionSetControlNumber: boolean;
  /** The group header date format. */
  groupHeaderDateFormat: X12DateFormat;
  /** The group header time format. */
  groupHeaderTimeFormat: X12TimeFormat;
  /** The usage indicator. */
  usageIndicator: UsageIndicator;
}

/** The X12 agreement acknowledgement settings. */
export interface X12AcknowledgementSettings {
  /** The value indicating whether technical acknowledgement is needed. */
  needTechnicalAcknowledgement: boolean;
  /** The value indicating whether to batch the technical acknowledgements. */
  batchTechnicalAcknowledgements: boolean;
  /** The value indicating whether functional acknowledgement is needed. */
  needFunctionalAcknowledgement: boolean;
  /** The functional acknowledgement version. */
  functionalAcknowledgementVersion?: string;
  /** The value indicating whether to batch functional acknowledgements. */
  batchFunctionalAcknowledgements: boolean;
  /** The value indicating whether implementation acknowledgement is needed. */
  needImplementationAcknowledgement: boolean;
  /** The implementation acknowledgement version. */
  implementationAcknowledgementVersion?: string;
  /** The value indicating whether to batch implementation acknowledgements. */
  batchImplementationAcknowledgements: boolean;
  /** The value indicating whether a loop is needed for valid messages. */
  needLoopForValidMessages: boolean;
  /** The value indicating whether to send synchronous acknowledgement. */
  sendSynchronousAcknowledgement: boolean;
  /** The acknowledgement control number prefix. */
  acknowledgementControlNumberPrefix?: string;
  /** The acknowledgement control number suffix. */
  acknowledgementControlNumberSuffix?: string;
  /** The acknowledgement control number lower bound. */
  acknowledgementControlNumberLowerBound: number;
  /** The acknowledgement control number upper bound. */
  acknowledgementControlNumberUpperBound: number;
  /** The value indicating whether to rollover acknowledgement control number. */
  rolloverAcknowledgementControlNumber: boolean;
}

/** The X12 message filter for odata query. */
export interface X12MessageFilter {
  /** The message filter type. */
  messageFilterType: MessageFilterType;
}

/** The X12 agreement security settings. */
export interface X12SecuritySettings {
  /** The authorization qualifier. */
  authorizationQualifier: string;
  /** The authorization value. */
  authorizationValue?: string;
  /** The security qualifier. */
  securityQualifier: string;
  /** The password value. */
  passwordValue?: string;
}

/** The X12 processing settings. */
export interface X12ProcessingSettings {
  /** The value indicating whether to mask security information. */
  maskSecurityInfo: boolean;
  /** The value indicating whether to convert numerical type to implied decimal. */
  convertImpliedDecimal: boolean;
  /** The value indicating whether to preserve interchange. */
  preserveInterchange: boolean;
  /** The value indicating whether to suspend interchange on error. */
  suspendInterchangeOnError: boolean;
  /** The value indicating whether to create empty xml tags for trailing separators. */
  createEmptyXmlTagsForTrailingSeparators: boolean;
  /** The value indicating whether to use dot as decimal separator. */
  useDotAsDecimalSeparator: boolean;
}

/** The X12 envelope override settings. */
export interface X12EnvelopeOverride {
  /** The target namespace on which this envelope settings has to be applied. */
  targetNamespace: string;
  /** The protocol version on which this envelope settings has to be applied. */
  protocolVersion: string;
  /** The message id on which this envelope settings has to be applied. */
  messageId: string;
  /** The responsible agency code. */
  responsibleAgencyCode: string;
  /** The header version. */
  headerVersion: string;
  /** The sender application id. */
  senderApplicationId: string;
  /** The receiver application id. */
  receiverApplicationId: string;
  /** The functional identifier code. */
  functionalIdentifierCode?: string;
  /** The date format. */
  dateFormat: X12DateFormat;
  /** The time format. */
  timeFormat: X12TimeFormat;
}

/** The X12 validation override settings. */
export interface X12ValidationOverride {
  /** The message id on which the validation settings has to be applied. */
  messageId: string;
  /** The value indicating whether to validate EDI types. */
  validateEdiTypes: boolean;
  /** The value indicating whether to validate XSD types. */
  validateXsdTypes: boolean;
  /** The value indicating whether to allow leading and trailing spaces and zeroes. */
  allowLeadingAndTrailingSpacesAndZeroes: boolean;
  /** The value indicating whether to validate character Set. */
  validateCharacterSet: boolean;
  /** The value indicating whether to trim leading and trailing spaces and zeroes. */
  trimLeadingAndTrailingSpacesAndZeroes: boolean;
  /** The trailing separator policy. */
  trailingSeparatorPolicy: TrailingSeparatorPolicy;
}

/** The X12 message identifier. */
export interface X12MessageIdentifier {
  /** The message id. */
  messageId: string;
}

/** The X12 schema reference. */
export interface X12SchemaReference {
  /** The message id. */
  messageId: string;
  /** The sender application id. */
  senderApplicationId?: string;
  /** The schema version. */
  schemaVersion: string;
  /** The schema name. */
  schemaName: string;
}

/** The X12 delimiter override settings. */
export interface X12DelimiterOverrides {
  /** The protocol version. */
  protocolVersion?: string;
  /** The message id. */
  messageId?: string;
  /** The data element separator. */
  dataElementSeparator: number;
  /** The component separator. */
  componentSeparator: number;
  /** The segment terminator. */
  segmentTerminator: number;
  /** The segment terminator suffix. */
  segmentTerminatorSuffix: SegmentTerminatorSuffix;
  /** The replacement character. */
  replaceCharacter: number;
  /** The value indicating whether to replace separators in payload. */
  replaceSeparatorsInPayload: boolean;
  /** The target namespace on which this delimiter settings has to be applied. */
  targetNamespace?: string;
}

/** The Edifact agreement content. */
export interface EdifactAgreementContent {
  /** The EDIFACT one-way receive agreement. */
  receiveAgreement: EdifactOneWayAgreement;
  /** The EDIFACT one-way send agreement. */
  sendAgreement: EdifactOneWayAgreement;
}

/** The Edifact one way agreement. */
export interface EdifactOneWayAgreement {
  /** The sender business identity */
  senderBusinessIdentity: BusinessIdentity;
  /** The receiver business identity */
  receiverBusinessIdentity: BusinessIdentity;
  /** The EDIFACT protocol settings. */
  protocolSettings: EdifactProtocolSettings;
}

/** The Edifact agreement protocol settings. */
export interface EdifactProtocolSettings {
  /** The EDIFACT validation settings. */
  validationSettings: EdifactValidationSettings;
  /** The EDIFACT framing settings. */
  framingSettings: EdifactFramingSettings;
  /** The EDIFACT envelope settings. */
  envelopeSettings: EdifactEnvelopeSettings;
  /** The EDIFACT acknowledgement settings. */
  acknowledgementSettings: EdifactAcknowledgementSettings;
  /** The EDIFACT message filter. */
  messageFilter: EdifactMessageFilter;
  /** The EDIFACT processing Settings. */
  processingSettings: EdifactProcessingSettings;
  /** The EDIFACT envelope override settings. */
  envelopeOverrides?: EdifactEnvelopeOverride[];
  /** The EDIFACT message filter list. */
  messageFilterList?: EdifactMessageIdentifier[];
  /** The EDIFACT schema references. */
  schemaReferences: EdifactSchemaReference[];
  /** The EDIFACT validation override settings. */
  validationOverrides?: EdifactValidationOverride[];
  /** The EDIFACT delimiter override settings. */
  edifactDelimiterOverrides?: EdifactDelimiterOverride[];
}

/** The Edifact agreement validation settings. */
export interface EdifactValidationSettings {
  /** The value indicating whether to validate character set in the message. */
  validateCharacterSet: boolean;
  /** The value indicating whether to check for duplicate interchange control number. */
  checkDuplicateInterchangeControlNumber: boolean;
  /** The validity period of interchange control number. */
  interchangeControlNumberValidityDays: number;
  /** The value indicating whether to check for duplicate group control number. */
  checkDuplicateGroupControlNumber: boolean;
  /** The value indicating whether to check for duplicate transaction set control number. */
  checkDuplicateTransactionSetControlNumber: boolean;
  /** The value indicating whether to Whether to validate EDI types. */
  validateEdiTypes: boolean;
  /** The value indicating whether to Whether to validate XSD types. */
  validateXsdTypes: boolean;
  /** The value indicating whether to allow leading and trailing spaces and zeroes. */
  allowLeadingAndTrailingSpacesAndZeroes: boolean;
  /** The value indicating whether to trim leading and trailing spaces and zeroes. */
  trimLeadingAndTrailingSpacesAndZeroes: boolean;
  /** The trailing separator policy. */
  trailingSeparatorPolicy: TrailingSeparatorPolicy;
}

/** The Edifact agreement framing settings. */
export interface EdifactFramingSettings {
  /** The service code list directory version. */
  serviceCodeListDirectoryVersion?: string;
  /** The character encoding. */
  characterEncoding?: string;
  /** The protocol version. */
  protocolVersion: number;
  /** The data element separator. */
  dataElementSeparator: number;
  /** The component separator. */
  componentSeparator: number;
  /** The segment terminator. */
  segmentTerminator: number;
  /** The release indicator. */
  releaseIndicator: number;
  /** The repetition separator. */
  repetitionSeparator: number;
  /** The EDIFACT frame setting characterSet. */
  characterSet: EdifactCharacterSet;
  /** The EDIFACT frame setting decimal indicator. */
  decimalPointIndicator: EdifactDecimalIndicator;
  /** The EDIFACT frame setting segment terminator suffix. */
  segmentTerminatorSuffix: SegmentTerminatorSuffix;
}

/** The Edifact agreement envelope settings. */
export interface EdifactEnvelopeSettings {
  /** The group association assigned code. */
  groupAssociationAssignedCode?: string;
  /** The communication agreement id. */
  communicationAgreementId?: string;
  /** The value indicating whether to apply delimiter string advice. */
  applyDelimiterStringAdvice: boolean;
  /** The value indicating whether to create grouping segments. */
  createGroupingSegments: boolean;
  /** The value indicating whether to enable default group headers. */
  enableDefaultGroupHeaders: boolean;
  /** The recipient reference password value. */
  recipientReferencePasswordValue?: string;
  /** The recipient reference password qualifier. */
  recipientReferencePasswordQualifier?: string;
  /** The application reference id. */
  applicationReferenceId?: string;
  /** The processing priority code. */
  processingPriorityCode?: string;
  /** The interchange control number lower bound. */
  interchangeControlNumberLowerBound: number;
  /** The interchange control number upper bound. */
  interchangeControlNumberUpperBound: number;
  /** The value indicating whether to rollover interchange control number. */
  rolloverInterchangeControlNumber: boolean;
  /** The interchange control number prefix. */
  interchangeControlNumberPrefix?: string;
  /** The interchange control number suffix. */
  interchangeControlNumberSuffix?: string;
  /** The sender reverse routing address. */
  senderReverseRoutingAddress?: string;
  /** The receiver reverse routing address. */
  receiverReverseRoutingAddress?: string;
  /** The functional group id. */
  functionalGroupId?: string;
  /** The group controlling agency code. */
  groupControllingAgencyCode?: string;
  /** The group message version. */
  groupMessageVersion?: string;
  /** The group message release. */
  groupMessageRelease?: string;
  /** The group control number lower bound. */
  groupControlNumberLowerBound: number;
  /** The group control number upper bound. */
  groupControlNumberUpperBound: number;
  /** The value indicating whether to rollover group control number. */
  rolloverGroupControlNumber: boolean;
  /** The group control number prefix. */
  groupControlNumberPrefix?: string;
  /** The group control number suffix. */
  groupControlNumberSuffix?: string;
  /** The group application receiver qualifier. */
  groupApplicationReceiverQualifier?: string;
  /** The group application receiver id. */
  groupApplicationReceiverId?: string;
  /** The group application sender qualifier. */
  groupApplicationSenderQualifier?: string;
  /** The group application sender id. */
  groupApplicationSenderId?: string;
  /** The group application password. */
  groupApplicationPassword?: string;
  /** The value indicating whether to overwrite existing transaction set control number. */
  overwriteExistingTransactionSetControlNumber: boolean;
  /** The transaction set control number prefix. */
  transactionSetControlNumberPrefix?: string;
  /** The transaction set control number suffix. */
  transactionSetControlNumberSuffix?: string;
  /** The transaction set control number lower bound. */
  transactionSetControlNumberLowerBound: number;
  /** The transaction set control number upper bound. */
  transactionSetControlNumberUpperBound: number;
  /** The value indicating whether to rollover transaction set control number. */
  rolloverTransactionSetControlNumber: boolean;
  /** The value indicating whether the message is a test interchange. */
  isTestInterchange: boolean;
  /** The sender internal identification. */
  senderInternalIdentification?: string;
  /** The sender internal sub identification. */
  senderInternalSubIdentification?: string;
  /** The receiver internal identification. */
  receiverInternalIdentification?: string;
  /** The receiver internal sub identification. */
  receiverInternalSubIdentification?: string;
}

/** The Edifact agreement acknowledgement settings. */
export interface EdifactAcknowledgementSettings {
  /** The value indicating whether technical acknowledgement is needed. */
  needTechnicalAcknowledgement: boolean;
  /** The value indicating whether to batch the technical acknowledgements. */
  batchTechnicalAcknowledgements: boolean;
  /** The value indicating whether functional acknowledgement is needed. */
  needFunctionalAcknowledgement: boolean;
  /** The value indicating whether to batch functional acknowledgements. */
  batchFunctionalAcknowledgements: boolean;
  /** The value indicating whether a loop is needed for valid messages. */
  needLoopForValidMessages: boolean;
  /** The value indicating whether to send synchronous acknowledgement. */
  sendSynchronousAcknowledgement: boolean;
  /** The acknowledgement control number prefix. */
  acknowledgementControlNumberPrefix?: string;
  /** The acknowledgement control number suffix. */
  acknowledgementControlNumberSuffix?: string;
  /** The acknowledgement control number lower bound. */
  acknowledgementControlNumberLowerBound: number;
  /** The acknowledgement control number upper bound. */
  acknowledgementControlNumberUpperBound: number;
  /** The value indicating whether to rollover acknowledgement control number. */
  rolloverAcknowledgementControlNumber: boolean;
}

/** The Edifact message filter for odata query. */
export interface EdifactMessageFilter {
  /** The message filter type. */
  messageFilterType: MessageFilterType;
}

/** The Edifact agreement protocol settings. */
export interface EdifactProcessingSettings {
  /** The value indicating whether to mask security information. */
  maskSecurityInfo: boolean;
  /** The value indicating whether to preserve interchange. */
  preserveInterchange: boolean;
  /** The value indicating whether to suspend interchange on error. */
  suspendInterchangeOnError: boolean;
  /** The value indicating whether to create empty xml tags for trailing separators. */
  createEmptyXmlTagsForTrailingSeparators: boolean;
  /** The value indicating whether to use dot as decimal separator. */
  useDotAsDecimalSeparator: boolean;
}

/** The Edifact envelope override settings. */
export interface EdifactEnvelopeOverride {
  /** The message id on which this envelope settings has to be applied. */
  messageId?: string;
  /** The message version on which this envelope settings has to be applied. */
  messageVersion?: string;
  /** The message release version on which this envelope settings has to be applied. */
  messageRelease?: string;
  /** The message association assigned code. */
  messageAssociationAssignedCode?: string;
  /** The target namespace on which this envelope settings has to be applied. */
  targetNamespace?: string;
  /** The functional group id. */
  functionalGroupId?: string;
  /** The sender application qualifier. */
  senderApplicationQualifier?: string;
  /** The sender application id. */
  senderApplicationId?: string;
  /** The receiver application qualifier. */
  receiverApplicationQualifier?: string;
  /** The receiver application id. */
  receiverApplicationId?: string;
  /** The controlling agency code. */
  controllingAgencyCode?: string;
  /** The group header message version. */
  groupHeaderMessageVersion?: string;
  /** The group header message release. */
  groupHeaderMessageRelease?: string;
  /** The association assigned code. */
  associationAssignedCode?: string;
  /** The application password. */
  applicationPassword?: string;
}

/** The Edifact message identifier. */
export interface EdifactMessageIdentifier {
  /** The message id on which this envelope settings has to be applied. */
  messageId: string;
}

/** The Edifact schema reference. */
export interface EdifactSchemaReference {
  /** The message id. */
  messageId: string;
  /** The message version. */
  messageVersion: string;
  /** The message release version. */
  messageRelease: string;
  /** The sender application id. */
  senderApplicationId?: string;
  /** The sender application qualifier. */
  senderApplicationQualifier?: string;
  /** The association assigned code. */
  associationAssignedCode?: string;
  /** The schema name. */
  schemaName: string;
}

/** The Edifact validation override settings. */
export interface EdifactValidationOverride {
  /** The message id on which the validation settings has to be applied. */
  messageId: string;
  /** The value indicating whether to validate character Set. */
  enforceCharacterSet: boolean;
  /** The value indicating whether to validate EDI types. */
  validateEdiTypes: boolean;
  /** The value indicating whether to validate XSD types. */
  validateXsdTypes: boolean;
  /** The value indicating whether to allow leading and trailing spaces and zeroes. */
  allowLeadingAndTrailingSpacesAndZeroes: boolean;
  /** The trailing separator policy. */
  trailingSeparatorPolicy: TrailingSeparatorPolicy;
  /** The value indicating whether to trim leading and trailing spaces and zeroes. */
  trimLeadingAndTrailingSpacesAndZeroes: boolean;
}

/** The Edifact delimiter override settings. */
export interface EdifactDelimiterOverride {
  /** The message id. */
  messageId?: string;
  /** The message version. */
  messageVersion?: string;
  /** The message release. */
  messageRelease?: string;
  /** The data element separator. */
  dataElementSeparator: number;
  /** The component separator. */
  componentSeparator: number;
  /** The segment terminator. */
  segmentTerminator: number;
  /** The repetition separator. */
  repetitionSeparator: number;
  /** The segment terminator suffix. */
  segmentTerminatorSuffix: SegmentTerminatorSuffix;
  /** The decimal point indicator. */
  decimalPointIndicator: EdifactDecimalIndicator;
  /** The release indicator. */
  releaseIndicator: number;
  /** The message association assigned code. */
  messageAssociationAssignedCode?: string;
  /** The target namespace on which this delimiter settings has to be applied. */
  targetNamespace?: string;
}

/** The callback url parameters. */
export interface GetCallbackUrlParameters {
  /** The expiry time. */
  notAfter?: Date;
  /** The key type. */
  keyType?: KeyType;
}

/** The workflow trigger callback URL. */
export interface WorkflowTriggerCallbackUrl {
  /**
   * Gets the workflow trigger callback URL.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: string;
  /**
   * Gets the workflow trigger callback URL HTTP method.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly method?: string;
  /**
   * Gets the workflow trigger callback URL base path.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly basePath?: string;
  /**
   * Gets the workflow trigger callback URL relative path.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly relativePath?: string;
  /** Gets the workflow trigger callback URL relative path parameters. */
  relativePathParameters?: string[];
  /** Gets the workflow trigger callback URL query parameters. */
  queries?: WorkflowTriggerListCallbackUrlQueries;
}

/** Gets the workflow trigger callback URL query parameters. */
export interface WorkflowTriggerListCallbackUrlQueries {
  /** The api version. */
  apiVersion?: string;
  /** The SAS permissions. */
  sp?: string;
  /** The SAS version. */
  sv?: string;
  /** The SAS signature. */
  sig?: string;
  /** The SAS timestamp. */
  se?: string;
}

/** A collection of assembly definitions. */
export interface AssemblyCollection {
  value?: AssemblyDefinition[];
}

/** The artifact properties definition. */
export interface ArtifactProperties {
  /** The artifact creation time. */
  createdTime?: Date;
  /** The artifact changed time. */
  changedTime?: Date;
  /** Anything */
  metadata?: any;
}

/** A collection of batch configurations. */
export interface BatchConfigurationCollection {
  value?: BatchConfiguration[];
}

/** The batch release criteria. */
export interface BatchReleaseCriteria {
  /** The message count. */
  messageCount?: number;
  /** The batch size in bytes. */
  batchSize?: number;
  /** The recurrence. */
  recurrence?: WorkflowTriggerRecurrence;
}

/** The workflow trigger recurrence. */
export interface WorkflowTriggerRecurrence {
  /** The frequency. */
  frequency?: RecurrenceFrequency;
  /** The interval. */
  interval?: number;
  /** The start time. */
  startTime?: string;
  /** The end time. */
  endTime?: string;
  /** The time zone. */
  timeZone?: string;
  /** The recurrence schedule. */
  schedule?: RecurrenceSchedule;
}

/** The recurrence schedule. */
export interface RecurrenceSchedule {
  /** The minutes. */
  minutes?: number[];
  /** The hours. */
  hours?: number[];
  /** The days of the week. */
  weekDays?: DaysOfWeek[];
  /** The month days. */
  monthDays?: number[];
  /** The monthly occurrences. */
  monthlyOccurrences?: RecurrenceScheduleOccurrence[];
}

/** The recurrence schedule occurrence. */
export interface RecurrenceScheduleOccurrence {
  /** The day of the week. */
  day?: DayOfWeek;
  /** The occurrence. */
  occurrence?: number;
}

/** The response of a IntegrationAccountCertificate list operation. */
export interface IntegrationAccountCertificateListResult {
  /** The IntegrationAccountCertificate items on this page */
  value: IntegrationAccountCertificate[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** The reference to the key vault key. */
export interface KeyVaultKeyReference {
  /** The key vault reference. */
  keyVault: KeyVaultKeyReferenceKeyVault;
  /** The private key name in key vault. */
  keyName: string;
  /** The private key version in key vault. */
  keyVersion?: string;
}

/** The key vault reference. */
export interface KeyVaultKeyReferenceKeyVault {
  /** The resource id. */
  id?: string;
  /**
   * The resource name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The resource type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
}

/** The callback url. */
export interface CallbackUrl {
  /** The URL value. */
  value?: string;
}

/** The list key vault keys definition. */
export interface ListKeyVaultKeysDefinition {
  /** The key vault reference. */
  keyVault: KeyVaultReference;
  /** The skip token. */
  skipToken?: string;
}

/** Collection of key vault keys. */
export interface KeyVaultKeyCollection {
  /** The key vault keys. */
  value?: KeyVaultKey[];
  /** The skip token. */
  skipToken?: string;
}

/** The key vault key. */
export interface KeyVaultKey {
  /** The key id. */
  kid?: string;
  /** The key attributes. */
  attributes?: KeyVaultKeyAttributes;
}

/** The key attributes. */
export interface KeyVaultKeyAttributes {
  /** Whether the key is enabled or not. */
  enabled?: boolean;
  /** When the key was created. */
  created?: number;
  /** When the key was updated. */
  updated?: number;
}

/** The tracking events definition. */
export interface TrackingEventsDefinition {
  /** The source type. */
  sourceType: string;
  /** The track events options. */
  trackEventsOptions?: TrackEventsOperationOptions;
  /** The events. */
  events: TrackingEvent[];
}

/** The tracking event. */
export interface TrackingEvent {
  /** The event level. */
  eventLevel: EventLevel;
  /** The event time. */
  eventTime: Date;
  /** The record type. */
  recordType: TrackingRecordType;
  /** The record. */
  record?: { [propertyName: string]: any };
  /** The error. */
  error?: TrackingEventErrorInfo;
}

/** The tracking event error info. */
export interface TrackingEventErrorInfo {
  /** The message. */
  message?: string;
  /** The code. */
  code?: string;
}

/** The response of a IntegrationAccountMap list operation. */
export interface IntegrationAccountMapListResult {
  /** The IntegrationAccountMap items on this page */
  value: IntegrationAccountMap[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** The parameters schema of integration account map. */
export interface IntegrationAccountMapPropertiesParametersSchema {
  /** The reference name. */
  ref?: string;
}

/** The response of a IntegrationAccountPartner list operation. */
export interface IntegrationAccountPartnerListResult {
  /** The IntegrationAccountPartner items on this page */
  value: IntegrationAccountPartner[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** The integration account partner content. */
export interface PartnerContent {
  /** The B2b partner content. */
  b2B?: B2BPartnerContent;
}

/** The B2b partner content. */
export interface B2BPartnerContent {
  /** The list of partner business identities. */
  businessIdentities?: BusinessIdentity[];
}

/** The access key regenerate action content. */
export interface RegenerateActionParameter {
  /** The key type. */
  keyType?: KeyType;
}

/** The response of a IntegrationAccountSchema list operation. */
export interface IntegrationAccountSchemaListResult {
  /** The IntegrationAccountSchema items on this page */
  value: IntegrationAccountSchema[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** The response of a IntegrationAccountSession list operation. */
export interface IntegrationAccountSessionListResult {
  /** The IntegrationAccountSession items on this page */
  value: IntegrationAccountSession[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** The parameters to generate upgraded definition. */
export interface GenerateUpgradedDefinitionParameters {
  /** The target schema version. */
  targetSchemaVersion?: string;
}

/** The correlation property. */
export interface Correlation {
  /** The client tracking id. */
  clientTrackingId?: string;
}

/** The workflow run trigger. */
export interface WorkflowRunTrigger {
  /**
   * Gets the name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Gets the inputs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly inputs?: { [propertyName: string]: any };
  /**
   * Gets the link to inputs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly inputsLink?: ContentLink;
  /**
   * Gets the outputs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly outputs?: { [propertyName: string]: any };
  /**
   * Gets the link to outputs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly outputsLink?: ContentLink;
  /**
   * Gets the scheduled time.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly scheduledTime?: Date;
  /**
   * Gets the start time.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startTime?: Date;
  /**
   * Gets the end time.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endTime?: Date;
  /**
   * Gets the tracking id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly trackingId?: string;
  /** The run correlation. */
  correlation?: Correlation;
  /**
   * Gets the code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * Gets the status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: WorkflowStatus;
  /**
   * Gets the error.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly error?: { [propertyName: string]: any };
  /**
   * Gets the tracked properties.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly trackedProperties?: { [propertyName: string]: any };
}

/** The response of a WorkflowRunAction list operation. */
export interface WorkflowRunActionListResult {
  /** The WorkflowRunAction items on this page */
  value: WorkflowRunAction[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** The correlation properties. */
export interface RunCorrelation {
  /** The client tracking identifier. */
  clientTrackingId?: string;
  /** The client keywords. */
  clientKeywords?: string[];
}

/** The retry history. */
export interface RetryHistory {
  /** Gets the start time. */
  startTime?: Date;
  /** Gets the end time. */
  endTime?: Date;
  /** Gets the status code. */
  code?: string;
  /** Gets the client request Id. */
  clientRequestId?: string;
  /** Gets the service request Id. */
  serviceRequestId?: string;
  /** Gets the error response. */
  error?: ErrorResponse;
}

/** The expression traces. */
export interface ExpressionTraces {
  inputs?: ExpressionRoot[];
}

/** The expression. */
export interface Expression {
  /** The text. */
  text?: string;
  /** Anything */
  value?: any;
  /** The sub expressions. */
  subexpressions?: Expression[];
  /** The azure resource error info. */
  error?: AzureResourceErrorInfo;
}

/** The error info. */
export interface ErrorInfo {
  /** The error code. */
  code: string;
}

/** A collection of workflow run action repetitions. */
export interface WorkflowRunActionRepetitionDefinitionCollection {
  /** The WorkflowRunActionRepetitionDefinition items on this page */
  value: WorkflowRunActionRepetitionDefinition[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** The workflow run action repetition index. */
export interface RepetitionIndex {
  /** The scope. */
  scopeName?: string;
  /** The index. */
  itemIndex: number;
}

/** The run operation result properties. */
export interface OperationResultProperties {
  /** The start time of the workflow scope repetition. */
  startTime?: Date;
  /** The end time of the workflow scope repetition. */
  endTime?: Date;
  /** The correlation properties. */
  correlation?: RunActionCorrelation;
  /**
   * The status of the workflow scope repetition.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: WorkflowStatus;
  /** The workflow scope repetition code. */
  code?: string;
  /** Anything */
  error?: any;
}

/** The response of a RequestHistory list operation. */
export interface RequestHistoryListResult {
  /** The RequestHistory items on this page */
  value: RequestHistory[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** A request. */
export interface Request {
  /** A list of all the headers attached to the request. */
  headers?: { [propertyName: string]: any };
  /** The destination for the request. */
  uri?: string;
  /** The HTTP method used for the request. */
  method?: string;
}

/** A response. */
export interface Response {
  /** A list of all the headers attached to the response. */
  headers?: { [propertyName: string]: any };
  /** The status code of the response. */
  statusCode?: number;
  /** Details on the location of the body content. */
  bodyLink?: ContentLink;
}

/** The response of a WorkflowRun list operation. */
export interface WorkflowRunListResult {
  /** The WorkflowRun items on this page */
  value: WorkflowRun[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** The response of a WorkflowTrigger list operation. */
export interface WorkflowTriggerListResult {
  /** The WorkflowTrigger items on this page */
  value: WorkflowTrigger[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** The response of a WorkflowTriggerHistory list operation. */
export interface WorkflowTriggerHistoryListResult {
  /** The WorkflowTriggerHistory items on this page */
  value: WorkflowTriggerHistory[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** The JSON schema. */
export interface JsonSchema {
  /** The JSON title. */
  title?: string;
  /** The JSON content. */
  content?: string;
}

/** The set trigger state action definition. */
export interface SetTriggerStateActionDefinition {
  /** The source. */
  source: WorkflowTriggerReference;
}

/** The response of a WorkflowVersion list operation. */
export interface WorkflowVersionListResult {
  /** The WorkflowVersion items on this page */
  value: WorkflowVersion[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** The Api reference. */
export interface ApiReference extends ResourceReference {
  /** The display name of the api. */
  displayName?: string;
  /** The description of the api. */
  description?: string;
  /** The icon uri of the api. */
  iconUri?: string;
  /** The swagger of the api. */
  swagger?: { [propertyName: string]: any };
  /** The brand color of the api. */
  brandColor?: string;
  /** The tier. */
  category?: ApiTier;
  /** The integration service environment reference. */
  integrationServiceEnvironment?: ResourceReference;
}

/** The key vault reference. */
export interface KeyVaultReference extends ResourceReference {}

/** The workflow reference. */
export interface WorkflowReference extends ResourceReference {}

/** The workflow trigger reference. */
export interface WorkflowTriggerReference extends ResourceReference {
  /** The workflow name. */
  flowName?: string;
  /** The workflow trigger name. */
  triggerName?: string;
}

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export interface TrackedResource extends Resource {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The geo-location where the resource lives */
  location: string;
}

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export interface ProxyResource extends Resource {}

/** The integration service environment managed api properties. */
export interface IntegrationServiceEnvironmentManagedApiProperties
  extends ApiResourceProperties {
  /** The integration service environment managed api deployment parameters. */
  deploymentParameters?: IntegrationServiceEnvironmentManagedApiDeploymentParameters;
}

/** The workflow output parameter. */
export interface WorkflowOutputParameter extends WorkflowParameter {
  /**
   * Gets the error.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly error?: { [propertyName: string]: any };
}

/** The artifact content properties definition. */
export interface ArtifactContentPropertiesDefinition
  extends ArtifactProperties {
  /** Anything */
  content?: any;
  /** The content type. */
  contentType?: string;
  /** The content link. */
  contentLink?: ContentLink;
}

/** The batch configuration properties definition. */
export interface BatchConfigurationProperties extends ArtifactProperties {
  /** The name of the batch group. */
  batchGroupName: string;
  /** The batch release criteria. */
  releaseCriteria: BatchReleaseCriteria;
}

/** The workflow run action correlation properties. */
export interface RunActionCorrelation extends RunCorrelation {
  /** The action tracking identifier. */
  actionTrackingId?: string;
}

/** The expression root. */
export interface ExpressionRoot extends Expression {
  /** The path. */
  path?: string;
}

/** The azure resource error info. */
export interface AzureResourceErrorInfo extends ErrorInfo {
  /** The error message. */
  message: string;
  /** The error details. */
  details?: AzureResourceErrorInfo[];
}

/** The operation result definition. */
export interface OperationResult extends OperationResultProperties {
  /**
   * Gets the tracking id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly trackingId?: string;
  /**
   * Gets the inputs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly inputs?: { [propertyName: string]: any };
  /**
   * Gets the link to inputs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly inputsLink?: ContentLink;
  /**
   * Gets the outputs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly outputs?: { [propertyName: string]: any };
  /**
   * Gets the link to outputs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly outputsLink?: ContentLink;
  /**
   * Gets the tracked properties.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly trackedProperties?: { [propertyName: string]: any };
  /** Gets the retry histories. */
  retryHistory?: RetryHistory[];
  iterationCount?: number;
}

/** The integration account. */
export interface IntegrationAccount extends TrackedResource {
  /** The sku. */
  sku?: IntegrationAccountSku;
  /** The integration service environment. */
  integrationServiceEnvironment?: ResourceReference;
  /** The workflow state. */
  state?: WorkflowState;
}

/** The integration service environment. */
export interface IntegrationServiceEnvironment extends TrackedResource {
  /** The sku. */
  sku?: IntegrationServiceEnvironmentSku;
  /** Managed service identity properties. */
  identity?: ManagedServiceIdentity;
  /**
   * Gets the provisioning state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: WorkflowProvisioningState;
  /** The integration service environment state. */
  state?: WorkflowState;
  /** Gets the tracking id. */
  integrationServiceEnvironmentId?: string;
  /** The endpoints configuration. */
  endpointsConfiguration?: FlowEndpointsConfiguration;
  /** The network configuration. */
  networkConfiguration?: NetworkConfiguration;
  /** The encryption configuration. */
  encryptionConfiguration?: IntegrationServiceEnvironmenEncryptionConfiguration;
}

/** The integration service environment managed api. */
export interface IntegrationServiceEnvironmentManagedApi
  extends TrackedResource {
  /**
   * The connection parameters.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly connectionParameters?: {
    [propertyName: string]: { [propertyName: string]: any };
  };
  /**
   * The metadata.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly metadata?: ApiResourceMetadata;
  /**
   * The runtime urls.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly runtimeUrls?: string[];
  /**
   * The api general information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly generalInformation?: ApiResourceGeneralInformation;
  /**
   * The capabilities.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly capabilities?: string[];
  /**
   * The backend service.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly backendService?: ApiResourceBackendService;
  /**
   * The policies for the API.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly policies?: ApiResourcePolicies;
  /**
   * The API definition.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly apiDefinitionUrl?: string;
  /**
   * The api definitions.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly apiDefinitions?: ApiResourceDefinitions;
  /** The integration service environment reference. */
  integrationServiceEnvironment?: ResourceReference;
  /**
   * The provisioning state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: WorkflowProvisioningState;
  /**
   * The category.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly category?: ApiTier;
  /** The integration service environment managed api deployment parameters. */
  deploymentParameters?: IntegrationServiceEnvironmentManagedApiDeploymentParameters;
}

/** The workflow type. */
export interface Workflow extends TrackedResource {
  /** Managed service identity properties. */
  identity?: ManagedServiceIdentity;
  /**
   * Gets the provisioning state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: WorkflowProvisioningState;
  /**
   * Gets the created time.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdTime?: Date;
  /**
   * Gets the changed time.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly changedTime?: Date;
  /** The state. */
  state?: WorkflowState;
  /**
   * Gets the version.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly version?: string;
  /**
   * Gets the access endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly accessEndpoint?: string;
  /** The endpoints configuration. */
  endpointsConfiguration?: FlowEndpointsConfiguration;
  /** The access control configuration. */
  accessControl?: FlowAccessControlConfiguration;
  /**
   * The sku.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sku?: Sku;
  /** The integration account. */
  integrationAccount?: ResourceReference;
  /** The integration service environment. */
  integrationServiceEnvironment?: ResourceReference;
  /** The definition. */
  definition?: { [propertyName: string]: any };
  /** The parameters. */
  parameters?: { [propertyName: string]: WorkflowParameter };
}

/** The integration account agreement. */
export interface IntegrationAccountAgreement extends TrackedResource {
  /**
   * The created time.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdTime?: Date;
  /**
   * The changed time.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly changedTime?: Date;
  /** The metadata. */
  metadata?: { [propertyName: string]: any };
  /** The agreement type. */
  agreementType: AgreementType;
  /** The integration account partner that is set as host partner for this agreement. */
  hostPartner: string;
  /** The integration account partner that is set as guest partner for this agreement. */
  guestPartner: string;
  /** The business identity of the host partner. */
  hostIdentity: BusinessIdentity;
  /** The business identity of the guest partner. */
  guestIdentity: BusinessIdentity;
  /** The agreement content. */
  content: AgreementContent;
}

/** The assembly definition. */
export interface AssemblyDefinition extends TrackedResource {
  /** The artifact creation time. */
  createdTime?: Date;
  /** The artifact changed time. */
  changedTime?: Date;
  /** Anything */
  metadata?: any;
  /** Anything */
  content?: any;
  /** The content type. */
  contentType?: string;
  /** The content link. */
  contentLink?: ContentLink;
  /** The assembly name. */
  assemblyName: string;
  /** The assembly version. */
  assemblyVersion?: string;
  /** The assembly culture. */
  assemblyCulture?: string;
  /** The assembly public key token. */
  assemblyPublicKeyToken?: string;
}

/** The batch configuration resource definition. */
export interface BatchConfiguration extends TrackedResource {
  /** The artifact creation time. */
  createdTime?: Date;
  /** The artifact changed time. */
  changedTime?: Date;
  /** Anything */
  metadata?: any;
  /** The name of the batch group. */
  batchGroupName: string;
  /** The batch release criteria. */
  releaseCriteria: BatchReleaseCriteria;
}

/** The integration account certificate. */
export interface IntegrationAccountCertificate extends TrackedResource {
  /**
   * The created time.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdTime?: Date;
  /**
   * The changed time.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly changedTime?: Date;
  /** The metadata. */
  metadata?: { [propertyName: string]: any };
  /** The key details in the key vault. */
  key?: KeyVaultKeyReference;
  /** The public certificate. */
  publicCertificate?: string;
}

/** The integration account map. */
export interface IntegrationAccountMap extends TrackedResource {
  /** The map type. */
  mapType: MapType;
  /** The parameters schema of integration account map. */
  parametersSchema?: IntegrationAccountMapPropertiesParametersSchema;
  /**
   * The created time.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdTime?: Date;
  /**
   * The changed time.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly changedTime?: Date;
  /** The content. */
  content?: string;
  /** The content type. */
  contentType?: string;
  /**
   * The content link.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly contentLink?: ContentLink;
  /** The metadata. */
  metadata?: { [propertyName: string]: any };
}

/** The integration account partner. */
export interface IntegrationAccountPartner extends TrackedResource {
  /** The partner type. */
  partnerType: PartnerType;
  /**
   * The created time.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdTime?: Date;
  /**
   * The changed time.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly changedTime?: Date;
  /** The metadata. */
  metadata?: { [propertyName: string]: any };
  /** The partner content. */
  content: PartnerContent;
}

/** The integration account schema. */
export interface IntegrationAccountSchema extends TrackedResource {
  /** The schema type. */
  schemaType: SchemaType;
  /** The target namespace of the schema. */
  targetNamespace?: string;
  /** The document name. */
  documentName?: string;
  /** The file name. */
  fileName?: string;
  /**
   * The created time.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdTime?: Date;
  /**
   * The changed time.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly changedTime?: Date;
  /** The metadata. */
  metadata?: { [propertyName: string]: any };
  /** The content. */
  content?: string;
  /** The content type. */
  contentType?: string;
  /**
   * The content link.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly contentLink?: ContentLink;
}

/** The integration account session. */
export interface IntegrationAccountSession extends TrackedResource {
  /**
   * The created time.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdTime?: Date;
  /**
   * The changed time.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly changedTime?: Date;
  /** The session content. */
  content?: { [propertyName: string]: any };
}

/** The workflow run action repetition definition. */
export interface WorkflowRunActionRepetitionDefinition extends TrackedResource {
  /** The start time of the workflow scope repetition. */
  startTime?: Date;
  /** The end time of the workflow scope repetition. */
  endTime?: Date;
  /** The correlation properties. */
  correlation?: RunActionCorrelation;
  /**
   * The status of the workflow scope repetition.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: WorkflowStatus;
  /** The workflow scope repetition code. */
  code?: string;
  /** Anything */
  error?: any;
  /**
   * Gets the tracking id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly trackingId?: string;
  /**
   * Gets the inputs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly inputs?: { [propertyName: string]: any };
  /**
   * Gets the link to inputs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly inputsLink?: ContentLink;
  /**
   * Gets the outputs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly outputs?: { [propertyName: string]: any };
  /**
   * Gets the link to outputs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly outputsLink?: ContentLink;
  /**
   * Gets the tracked properties.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly trackedProperties?: { [propertyName: string]: any };
  /** Gets the retry histories. */
  retryHistory?: RetryHistory[];
  iterationCount?: number;
  /** The repetition indexes. */
  repetitionIndexes?: RepetitionIndex[];
}

/** The request history. */
export interface RequestHistory extends TrackedResource {
  /** The time the request started. */
  startTime?: Date;
  /** The time the request ended. */
  endTime?: Date;
  /** The request. */
  request?: Request;
  /** The response. */
  response?: Response;
}

/** The workflow version. */
export interface WorkflowVersion extends TrackedResource {
  /**
   * The provisioning state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: WorkflowProvisioningState;
  /**
   * Gets the created time.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdTime?: Date;
  /**
   * Gets the changed time.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly changedTime?: Date;
  /** The state. */
  state?: WorkflowState;
  /**
   * Gets the version.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly version?: string;
  /**
   * Gets the access endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly accessEndpoint?: string;
  /** The endpoints configuration. */
  endpointsConfiguration?: FlowEndpointsConfiguration;
  /** The access control configuration. */
  accessControl?: FlowAccessControlConfiguration;
  /**
   * The sku.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sku?: Sku;
  /** The integration account. */
  integrationAccount?: ResourceReference;
  /** The definition. */
  definition?: { [propertyName: string]: any };
  /** The parameters. */
  parameters?: { [propertyName: string]: WorkflowParameter };
}

/** The integration service environment managed api's api operations. */
export interface ApiOperation extends ProxyResource {
  /** The summary of the api operation. */
  summary?: string;
  /** The description of the api operation. */
  description?: string;
  /** The visibility of the api operation. */
  visibility?: string;
  /** The trigger type of api operation. */
  trigger?: string;
  /** The trigger hint for the api operation. */
  triggerHint?: string;
  /** Indicates whether the api operation is pageable. */
  pageable?: boolean;
  /** The annotation of api operation. */
  annotation?: ApiOperationAnnotation;
  /** The api reference. */
  api?: ApiReference;
  /** The operation inputs definition schema. */
  inputsDefinition?: SwaggerSchema;
  /** The operation responses definition schemas. */
  responsesDefinition?: { [propertyName: string]: SwaggerSchema };
  /** Indicates whether the API operation is webhook or not. */
  isWebhook?: boolean;
  /** Indicates whether the API operation is notification or not. */
  isNotification?: boolean;
}

/** The workflow run. */
export interface WorkflowRun extends ProxyResource {
  /**
   * Gets the wait end time.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly waitEndTime?: Date;
  /**
   * Gets the start time.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startTime?: Date;
  /**
   * Gets the end time.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endTime?: Date;
  /**
   * Gets the status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: WorkflowStatus;
  /**
   * Gets the code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * Gets the error.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly error?: { [propertyName: string]: any };
  /**
   * Gets the correlation id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly correlationId?: string;
  /** The run correlation. */
  correlation?: Correlation;
  /**
   * Gets the reference to workflow version.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly workflow?: ResourceReference;
  /**
   * Gets the fired trigger.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly trigger?: WorkflowRunTrigger;
  /**
   * Gets the outputs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly outputs?: { [propertyName: string]: WorkflowOutputParameter };
  /**
   * Gets the response of the flow run.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly response?: WorkflowRunTrigger;
}

/** The workflow run action. */
export interface WorkflowRunAction extends ProxyResource {
  /**
   * Gets the start time.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startTime?: Date;
  /**
   * Gets the end time.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endTime?: Date;
  /**
   * Gets the status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: WorkflowStatus;
  /**
   * Gets the code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * Gets the error.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly error?: { [propertyName: string]: any };
  /**
   * Gets the tracking id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly trackingId?: string;
  /** The correlation properties. */
  correlation?: RunActionCorrelation;
  /**
   * Gets the link to inputs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly inputsLink?: ContentLink;
  /**
   * Gets the link to outputs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly outputsLink?: ContentLink;
  /**
   * Gets the tracked properties.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly trackedProperties?: { [propertyName: string]: any };
  /** Gets the retry histories. */
  retryHistory?: RetryHistory[];
}

/** The workflow trigger. */
export interface WorkflowTrigger extends ProxyResource {
  /**
   * Gets the provisioning state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: WorkflowTriggerProvisioningState;
  /**
   * Gets the created time.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdTime?: Date;
  /**
   * Gets the changed time.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly changedTime?: Date;
  /**
   * Gets the state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly state?: WorkflowState;
  /**
   * Gets the status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: WorkflowStatus;
  /**
   * Gets the last execution time.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastExecutionTime?: Date;
  /**
   * Gets the next execution time.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextExecutionTime?: Date;
  /**
   * Gets the workflow trigger recurrence.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly recurrence?: WorkflowTriggerRecurrence;
  /**
   * Gets the reference to workflow.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly workflow?: ResourceReference;
}

/** The workflow trigger history. */
export interface WorkflowTriggerHistory extends ProxyResource {
  /**
   * Gets the start time.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startTime?: Date;
  /**
   * Gets the end time.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endTime?: Date;
  /**
   * The scheduled time.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly scheduledTime?: Date;
  /**
   * Gets the status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: WorkflowStatus;
  /**
   * Gets the code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * Gets the error.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly error?: { [propertyName: string]: any };
  /**
   * Gets the tracking id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly trackingId?: string;
  /** The run correlation. */
  correlation?: Correlation;
  /**
   * Gets the link to input parameters.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly inputsLink?: ContentLink;
  /**
   * Gets the link to output parameters.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly outputsLink?: ContentLink;
  /**
   * The value indicating whether trigger was fired.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fired?: boolean;
  /**
   * Gets the reference to workflow run.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly run?: ResourceReference;
}

/** The assembly properties definition. */
export interface AssemblyProperties
  extends ArtifactContentPropertiesDefinition {
  /** The assembly name. */
  assemblyName: string;
  /** The assembly version. */
  assemblyVersion?: string;
  /** The assembly culture. */
  assemblyCulture?: string;
  /** The assembly public key token. */
  assemblyPublicKeyToken?: string;
}

/** The workflow run action repetition properties definition. */
export interface WorkflowRunActionRepetitionProperties extends OperationResult {
  /** The repetition indexes. */
  repetitionIndexes?: RepetitionIndex[];
}

/** Defines headers for IntegrationServiceEnvironments_createOrUpdate operation. */
export interface IntegrationServiceEnvironmentsCreateOrUpdateHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for IntegrationServiceEnvironmentManagedApis_put operation. */
export interface IntegrationServiceEnvironmentManagedApisPutHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for IntegrationServiceEnvironmentManagedApis_delete operation. */
export interface IntegrationServiceEnvironmentManagedApisDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Workflows_move operation. */
export interface WorkflowsMoveHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for WorkflowTriggers_run operation. */
export interface WorkflowTriggersRunHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for WorkflowTriggerHistories_resubmit operation. */
export interface WorkflowTriggerHistoriesResubmitHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Known values of {@link Origin} that the service accepts. */
export enum KnownOrigin {
  /** User */
  User = "user",
  /** System */
  System = "system",
  /** UserSystem */
  UserSystem = "user,system",
}

/**
 * Defines values for Origin. \
 * {@link KnownOrigin} can be used interchangeably with Origin,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **user** \
 * **system** \
 * **user,system**
 */
export type Origin = string;

/** Known values of {@link ActionType} that the service accepts. */
export enum KnownActionType {
  /** Internal */
  Internal = "Internal",
}

/**
 * Defines values for ActionType. \
 * {@link KnownActionType} can be used interchangeably with ActionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Internal**
 */
export type ActionType = string;

/** Known values of {@link WorkflowState} that the service accepts. */
export enum KnownWorkflowState {
  /** Represents a state where the value is not specified. */
  NotSpecified = "NotSpecified",
  /** Represents a state where the workflow is completed. */
  Completed = "Completed",
  /** Represents a state where the workflow is enabled. */
  Enabled = "Enabled",
  /** Represents a state where the workflow is disabled. */
  Disabled = "Disabled",
  /** Represents a state where the workflow is deleted. */
  Deleted = "Deleted",
  /** Represents a state where the workflow is suspended. */
  Suspended = "Suspended",
}

/**
 * Defines values for WorkflowState. \
 * {@link KnownWorkflowState} can be used interchangeably with WorkflowState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified**: Represents a state where the value is not specified. \
 * **Completed**: Represents a state where the workflow is completed. \
 * **Enabled**: Represents a state where the workflow is enabled. \
 * **Disabled**: Represents a state where the workflow is disabled. \
 * **Deleted**: Represents a state where the workflow is deleted. \
 * **Suspended**: Represents a state where the workflow is suspended.
 */
export type WorkflowState = string;

/** Known values of {@link IntegrationAccountSkuName} that the service accepts. */
export enum KnownIntegrationAccountSkuName {
  /** Represents a state where the value is not specified. */
  NotSpecified = "NotSpecified",
  /** Represents a free integration account SKU. */
  Free = "Free",
  /** Represents a basic integration account SKU. */
  Basic = "Basic",
  /** Represents a standard integration account SKU. */
  Standard = "Standard",
}

/**
 * Defines values for IntegrationAccountSkuName. \
 * {@link KnownIntegrationAccountSkuName} can be used interchangeably with IntegrationAccountSkuName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified**: Represents a state where the value is not specified. \
 * **Free**: Represents a free integration account SKU. \
 * **Basic**: Represents a basic integration account SKU. \
 * **Standard**: Represents a standard integration account SKU.
 */
export type IntegrationAccountSkuName = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  /** User */
  User = "User",
  /** Application */
  Application = "Application",
  /** ManagedIdentity */
  ManagedIdentity = "ManagedIdentity",
  /** Key */
  Key = "Key",
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link WorkflowProvisioningState} that the service accepts. */
export enum KnownWorkflowProvisioningState {
  /** Represents a state where the value is not specified. */
  NotSpecified = "NotSpecified",
  /** Represents a state where the workflow is accepted. */
  Accepted = "Accepted",
  /** Represents a state where the workflow is running. */
  Running = "Running",
  /** Represents a state where the workflow is ready. */
  Ready = "Ready",
  /** Represents a state where the workflow is creating. */
  Creating = "Creating",
  /** Represents a state where the workflow is created. */
  Created = "Created",
  /** Represents a state where the workflow is deleting. */
  Deleting = "Deleting",
  /** Represents a state where the workflow is deleted. */
  Deleted = "Deleted",
  /** Represents a state where the workflow is canceled. */
  Canceled = "Canceled",
  /** Represents a state where the workflow is failed. */
  Failed = "Failed",
  /** Represents a state where the workflow is succeeded. */
  Succeeded = "Succeeded",
  /** Represents a state where the workflow is moving. */
  Moving = "Moving",
  /** Represents a state where the workflow is updating. */
  Updating = "Updating",
  /** Represents a state where the workflow is registering. */
  Registering = "Registering",
  /** Represents a state where the workflow is registered. */
  Registered = "Registered",
  /** Represents a state where the workflow is unregistering. */
  Unregistering = "Unregistering",
  /** Represents a state where the workflow is unregistered. */
  Unregistered = "Unregistered",
  /** Represents a state where the workflow is completed. */
  Completed = "Completed",
  /** Represents a state where the workflow is renewing. */
  Renewing = "Renewing",
  /** Represents a state where the workflow is pending. */
  Pending = "Pending",
  /** Represents a state where the workflow is waiting. */
  Waiting = "Waiting",
  /** Represents a state where the workflow is in progress. */
  InProgress = "InProgress",
}

/**
 * Defines values for WorkflowProvisioningState. \
 * {@link KnownWorkflowProvisioningState} can be used interchangeably with WorkflowProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified**: Represents a state where the value is not specified. \
 * **Accepted**: Represents a state where the workflow is accepted. \
 * **Running**: Represents a state where the workflow is running. \
 * **Ready**: Represents a state where the workflow is ready. \
 * **Creating**: Represents a state where the workflow is creating. \
 * **Created**: Represents a state where the workflow is created. \
 * **Deleting**: Represents a state where the workflow is deleting. \
 * **Deleted**: Represents a state where the workflow is deleted. \
 * **Canceled**: Represents a state where the workflow is canceled. \
 * **Failed**: Represents a state where the workflow is failed. \
 * **Succeeded**: Represents a state where the workflow is succeeded. \
 * **Moving**: Represents a state where the workflow is moving. \
 * **Updating**: Represents a state where the workflow is updating. \
 * **Registering**: Represents a state where the workflow is registering. \
 * **Registered**: Represents a state where the workflow is registered. \
 * **Unregistering**: Represents a state where the workflow is unregistering. \
 * **Unregistered**: Represents a state where the workflow is unregistered. \
 * **Completed**: Represents a state where the workflow is completed. \
 * **Renewing**: Represents a state where the workflow is renewing. \
 * **Pending**: Represents a state where the workflow is pending. \
 * **Waiting**: Represents a state where the workflow is waiting. \
 * **InProgress**: Represents a state where the workflow is in progress.
 */
export type WorkflowProvisioningState = string;

/** Known values of {@link IntegrationServiceEnvironmentAccessEndpointType} that the service accepts. */
export enum KnownIntegrationServiceEnvironmentAccessEndpointType {
  /** Represents a state where the value is not specified. */
  NotSpecified = "NotSpecified",
  /** Represents an external access endpoint type. */
  External = "External",
  /** Represents an internal access endpoint type. */
  Internal = "Internal",
}

/**
 * Defines values for IntegrationServiceEnvironmentAccessEndpointType. \
 * {@link KnownIntegrationServiceEnvironmentAccessEndpointType} can be used interchangeably with IntegrationServiceEnvironmentAccessEndpointType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified**: Represents a state where the value is not specified. \
 * **External**: Represents an external access endpoint type. \
 * **Internal**: Represents an internal access endpoint type.
 */
export type IntegrationServiceEnvironmentAccessEndpointType = string;

/** Known values of {@link IntegrationServiceEnvironmentSkuName} that the service accepts. */
export enum KnownIntegrationServiceEnvironmentSkuName {
  /** Represents a state where the value is not specified. */
  NotSpecified = "NotSpecified",
  /** Represents a premium integration service environment SKU. */
  Premium = "Premium",
  /** Represents a developer integration service environment SKU. */
  Developer = "Developer",
}

/**
 * Defines values for IntegrationServiceEnvironmentSkuName. \
 * {@link KnownIntegrationServiceEnvironmentSkuName} can be used interchangeably with IntegrationServiceEnvironmentSkuName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified**: Represents a state where the value is not specified. \
 * **Premium**: Represents a premium integration service environment SKU. \
 * **Developer**: Represents a developer integration service environment SKU.
 */
export type IntegrationServiceEnvironmentSkuName = string;

/** Known values of {@link ManagedServiceIdentityType} that the service accepts. */
export enum KnownManagedServiceIdentityType {
  /** None */
  None = "None",
  /** SystemAssigned */
  SystemAssigned = "SystemAssigned",
  /** UserAssigned */
  UserAssigned = "UserAssigned",
  /** SystemAssignedUserAssigned */
  SystemAssignedUserAssigned = "SystemAssigned,UserAssigned",
}

/**
 * Defines values for ManagedServiceIdentityType. \
 * {@link KnownManagedServiceIdentityType} can be used interchangeably with ManagedServiceIdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **SystemAssigned** \
 * **UserAssigned** \
 * **SystemAssigned,UserAssigned**
 */
export type ManagedServiceIdentityType = string;

/** Known values of {@link ApiType} that the service accepts. */
export enum KnownApiType {
  /** Represents a state where the value is not specified. */
  NotSpecified = "NotSpecified",
  /** Represents a REST API type. */
  Rest = "Rest",
  /** Represents a SOAP API type. */
  Soap = "Soap",
}

/**
 * Defines values for ApiType. \
 * {@link KnownApiType} can be used interchangeably with ApiType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified**: Represents a state where the value is not specified. \
 * **Rest**: Represents a REST API type. \
 * **Soap**: Represents a SOAP API type.
 */
export type ApiType = string;

/** Known values of {@link WsdlImportMethod} that the service accepts. */
export enum KnownWsdlImportMethod {
  /** Represents a state where the value is not specified. */
  NotSpecified = "NotSpecified",
  /** Represents a SOAP to REST WSDL import method. */
  SoapToRest = "SoapToRest",
  /** Represents a SOAP Pass Through WSDL import method. */
  SoapPassThrough = "SoapPassThrough",
}

/**
 * Defines values for WsdlImportMethod. \
 * {@link KnownWsdlImportMethod} can be used interchangeably with WsdlImportMethod,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified**: Represents a state where the value is not specified. \
 * **SoapToRest**: Represents a SOAP to REST WSDL import method. \
 * **SoapPassThrough**: Represents a SOAP Pass Through WSDL import method.
 */
export type WsdlImportMethod = string;

/** Known values of {@link ApiDeploymentParameterVisibility} that the service accepts. */
export enum KnownApiDeploymentParameterVisibility {
  /** Represents a state where the value is not specified. */
  NotSpecified = "NotSpecified",
  /** Represents a default API deployment parameter visibility. */
  Default = "Default",
  /** Represents an internal API deployment parameter visibility. */
  Internal = "Internal",
}

/**
 * Defines values for ApiDeploymentParameterVisibility. \
 * {@link KnownApiDeploymentParameterVisibility} can be used interchangeably with ApiDeploymentParameterVisibility,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified**: Represents a state where the value is not specified. \
 * **Default**: Represents a default API deployment parameter visibility. \
 * **Internal**: Represents an internal API deployment parameter visibility.
 */
export type ApiDeploymentParameterVisibility = string;

/** Known values of {@link ApiTier} that the service accepts. */
export enum KnownApiTier {
  /** Represents a state where the value is not specified. */
  NotSpecified = "NotSpecified",
  /** Represents an enterprise API tier. */
  Enterprise = "Enterprise",
  /** Represents a standard API tier. */
  Standard = "Standard",
  /** Represents a premium API tier. */
  Premium = "Premium",
}

/**
 * Defines values for ApiTier. \
 * {@link KnownApiTier} can be used interchangeably with ApiTier,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified**: Represents a state where the value is not specified. \
 * **Enterprise**: Represents an enterprise API tier. \
 * **Standard**: Represents a standard API tier. \
 * **Premium**: Represents a premium API tier.
 */
export type ApiTier = string;

/** Known values of {@link StatusAnnotation} that the service accepts. */
export enum KnownStatusAnnotation {
  /** Represents a state where the value is not specified. */
  NotSpecified = "NotSpecified",
  /** Represents a preview status annotation. */
  Preview = "Preview",
  /** Represents a production status annotation. */
  Production = "Production",
}

/**
 * Defines values for StatusAnnotation. \
 * {@link KnownStatusAnnotation} can be used interchangeably with StatusAnnotation,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified**: Represents a state where the value is not specified. \
 * **Preview**: Represents a preview status annotation. \
 * **Production**: Represents a production status annotation.
 */
export type StatusAnnotation = string;

/** Known values of {@link SwaggerSchemaType} that the service accepts. */
export enum KnownSwaggerSchemaType {
  /** Represents a string schema type. */
  String = "String",
  /** Represents a number schema type. */
  Number = "Number",
  /** Represents an integer schema type. */
  Integer = "Integer",
  /** Represents a boolean schema type. */
  Boolean = "Boolean",
  /** Represents an array schema type. */
  Array = "Array",
  /** Represents a file schema type. */
  File = "File",
  /** Represents an object schema type. */
  Object = "Object",
  /** Represents a null schema type. */
  Null = "Null",
}

/**
 * Defines values for SwaggerSchemaType. \
 * {@link KnownSwaggerSchemaType} can be used interchangeably with SwaggerSchemaType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **String**: Represents a string schema type. \
 * **Number**: Represents a number schema type. \
 * **Integer**: Represents an integer schema type. \
 * **Boolean**: Represents a boolean schema type. \
 * **Array**: Represents an array schema type. \
 * **File**: Represents a file schema type. \
 * **Object**: Represents an object schema type. \
 * **Null**: Represents a null schema type.
 */
export type SwaggerSchemaType = string;

/** Known values of {@link IntegrationServiceEnvironmentNetworkDependencyCategoryType} that the service accepts. */
export enum KnownIntegrationServiceEnvironmentNetworkDependencyCategoryType {
  /** Represents a state where the value is not specified. */
  NotSpecified = "NotSpecified",
  /** Represents an Azure Storage network dependency category type. */
  AzureStorage = "AzureStorage",
  /** Represents an Azure Management network dependency category type. */
  AzureManagement = "AzureManagement",
  /** Represents an Azure Active Directory network dependency category type. */
  AzureActiveDirectory = "AzureActiveDirectory",
  /** Represents an SSL Certificate Verification network dependency category type. */
  SSLCertificateVerification = "SSLCertificateVerification",
  /** Represents a Diagnostic Logs and Metrics network dependency category type. */
  DiagnosticLogsAndMetrics = "DiagnosticLogsAndMetrics",
  /** Represents an Integration Service Environment Connectors network dependency category type. */
  IntegrationServiceEnvironmentConnectors = "IntegrationServiceEnvironmentConnectors",
  /** Represents a Redis Cache network dependency category type. */
  RedisCache = "RedisCache",
  /** Represents an Access Endpoints network dependency category type. */
  AccessEndpoints = "AccessEndpoints",
  /** Represents a Recovery Service network dependency category type. */
  RecoveryService = "RecoveryService",
  /** Represents a SQL network dependency category type. */
  SQL = "SQL",
  /** Represents a Regional Service network dependency category type. */
  RegionalService = "RegionalService",
}

/**
 * Defines values for IntegrationServiceEnvironmentNetworkDependencyCategoryType. \
 * {@link KnownIntegrationServiceEnvironmentNetworkDependencyCategoryType} can be used interchangeably with IntegrationServiceEnvironmentNetworkDependencyCategoryType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified**: Represents a state where the value is not specified. \
 * **AzureStorage**: Represents an Azure Storage network dependency category type. \
 * **AzureManagement**: Represents an Azure Management network dependency category type. \
 * **AzureActiveDirectory**: Represents an Azure Active Directory network dependency category type. \
 * **SSLCertificateVerification**: Represents an SSL Certificate Verification network dependency category type. \
 * **DiagnosticLogsAndMetrics**: Represents a Diagnostic Logs and Metrics network dependency category type. \
 * **IntegrationServiceEnvironmentConnectors**: Represents an Integration Service Environment Connectors network dependency category type. \
 * **RedisCache**: Represents a Redis Cache network dependency category type. \
 * **AccessEndpoints**: Represents an Access Endpoints network dependency category type. \
 * **RecoveryService**: Represents a Recovery Service network dependency category type. \
 * **SQL**: Represents a SQL network dependency category type. \
 * **RegionalService**: Represents a Regional Service network dependency category type.
 */
export type IntegrationServiceEnvironmentNetworkDependencyCategoryType = string;

/** Known values of {@link IntegrationServiceEnvironmentNetworkEndPointAccessibilityState} that the service accepts. */
export enum KnownIntegrationServiceEnvironmentNetworkEndPointAccessibilityState {
  /** Represents a state where the value is not specified. */
  NotSpecified = "NotSpecified",
  /** Represents an unknown network endpoint accessibility state. */
  Unknown = "Unknown",
  /** Represents an available network endpoint accessibility state. */
  Available = "Available",
  /** Represents a not available network endpoint accessibility state. */
  NotAvailable = "NotAvailable",
}

/**
 * Defines values for IntegrationServiceEnvironmentNetworkEndPointAccessibilityState. \
 * {@link KnownIntegrationServiceEnvironmentNetworkEndPointAccessibilityState} can be used interchangeably with IntegrationServiceEnvironmentNetworkEndPointAccessibilityState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified**: Represents a state where the value is not specified. \
 * **Unknown**: Represents an unknown network endpoint accessibility state. \
 * **Available**: Represents an available network endpoint accessibility state. \
 * **NotAvailable**: Represents a not available network endpoint accessibility state.
 */
export type IntegrationServiceEnvironmentNetworkEndPointAccessibilityState =
  string;

/** Known values of {@link IntegrationServiceEnvironmentSkuScaleType} that the service accepts. */
export enum KnownIntegrationServiceEnvironmentSkuScaleType {
  /** Represents a manual scale type. */
  Manual = "Manual",
  /** Represents an automatic scale type. */
  Automatic = "Automatic",
  /** Represents no scale type. */
  None = "None",
}

/**
 * Defines values for IntegrationServiceEnvironmentSkuScaleType. \
 * {@link KnownIntegrationServiceEnvironmentSkuScaleType} can be used interchangeably with IntegrationServiceEnvironmentSkuScaleType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Manual**: Represents a manual scale type. \
 * **Automatic**: Represents an automatic scale type. \
 * **None**: Represents no scale type.
 */
export type IntegrationServiceEnvironmentSkuScaleType = string;

/** Known values of {@link OpenAuthenticationProviderType} that the service accepts. */
export enum KnownOpenAuthenticationProviderType {
  /** Represents Azure Active Directory (AAD) provider type. */
  AAD = "AAD",
}

/**
 * Defines values for OpenAuthenticationProviderType. \
 * {@link KnownOpenAuthenticationProviderType} can be used interchangeably with OpenAuthenticationProviderType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AAD**: Represents Azure Active Directory (AAD) provider type.
 */
export type OpenAuthenticationProviderType = string;

/** Known values of {@link SkuName} that the service accepts. */
export enum KnownSkuName {
  /** Represents a state where the value is not specified. */
  NotSpecified = "NotSpecified",
  /** Represents a free SKU. */
  Free = "Free",
  /** Represents a shared SKU. */
  Shared = "Shared",
  /** Represents a basic SKU. */
  Basic = "Basic",
  /** Represents a standard SKU. */
  Standard = "Standard",
  /** Represents a premium SKU. */
  Premium = "Premium",
}

/**
 * Defines values for SkuName. \
 * {@link KnownSkuName} can be used interchangeably with SkuName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified**: Represents a state where the value is not specified. \
 * **Free**: Represents a free SKU. \
 * **Shared**: Represents a shared SKU. \
 * **Basic**: Represents a basic SKU. \
 * **Standard**: Represents a standard SKU. \
 * **Premium**: Represents a premium SKU.
 */
export type SkuName = string;

/** Known values of {@link ParameterType} that the service accepts. */
export enum KnownParameterType {
  /** Represents a state where the value is not specified. */
  NotSpecified = "NotSpecified",
  /** Represents a string parameter type. */
  String = "String",
  /** Represents a secure string parameter type. */
  SecureString = "SecureString",
  /** Represents an integer parameter type. */
  Int = "Int",
  /** Represents a float parameter type. */
  Float = "Float",
  /** Represents a boolean parameter type. */
  Bool = "Bool",
  /** Represents an array parameter type. */
  Array = "Array",
  /** Represents an object parameter type. */
  Object = "Object",
  /** Represents a secure object parameter type. */
  SecureObject = "SecureObject",
}

/**
 * Defines values for ParameterType. \
 * {@link KnownParameterType} can be used interchangeably with ParameterType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified**: Represents a state where the value is not specified. \
 * **String**: Represents a string parameter type. \
 * **SecureString**: Represents a secure string parameter type. \
 * **Int**: Represents an integer parameter type. \
 * **Float**: Represents a float parameter type. \
 * **Bool**: Represents a boolean parameter type. \
 * **Array**: Represents an array parameter type. \
 * **Object**: Represents an object parameter type. \
 * **SecureObject**: Represents a secure object parameter type.
 */
export type ParameterType = string;

/** Known values of {@link AgreementType} that the service accepts. */
export enum KnownAgreementType {
  /** Represents a not specified agreement type. */
  NotSpecified = "NotSpecified",
  /** Represents an AS2 agreement type. */
  AS2 = "AS2",
  /** Represents an X12 agreement type. */
  X12 = "X12",
  /** Represents an Edifact agreement type. */
  Edifact = "Edifact",
}

/**
 * Defines values for AgreementType. \
 * {@link KnownAgreementType} can be used interchangeably with AgreementType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified**: Represents a not specified agreement type. \
 * **AS2**: Represents an AS2 agreement type. \
 * **X12**: Represents an X12 agreement type. \
 * **Edifact**: Represents an Edifact agreement type.
 */
export type AgreementType = string;

/** Known values of {@link HashingAlgorithm} that the service accepts. */
export enum KnownHashingAlgorithm {
  /** Represents a state where the value is not specified. */
  NotSpecified = "NotSpecified",
  /** Represents no hashing algorithm. */
  None = "None",
  /** Represents the MD5 hashing algorithm. */
  MD5 = "MD5",
  /** Represents the SHA1 hashing algorithm. */
  SHA1 = "SHA1",
  /** Represents the SHA2-256 hashing algorithm. */
  SHA2256 = "SHA2256",
  /** Represents the SHA2-384 hashing algorithm. */
  SHA2384 = "SHA2384",
  /** Represents the SHA2-512 hashing algorithm. */
  SHA2512 = "SHA2512",
}

/**
 * Defines values for HashingAlgorithm. \
 * {@link KnownHashingAlgorithm} can be used interchangeably with HashingAlgorithm,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified**: Represents a state where the value is not specified. \
 * **None**: Represents no hashing algorithm. \
 * **MD5**: Represents the MD5 hashing algorithm. \
 * **SHA1**: Represents the SHA1 hashing algorithm. \
 * **SHA2256**: Represents the SHA2-256 hashing algorithm. \
 * **SHA2384**: Represents the SHA2-384 hashing algorithm. \
 * **SHA2512**: Represents the SHA2-512 hashing algorithm.
 */
export type HashingAlgorithm = string;

/** Known values of {@link EncryptionAlgorithm} that the service accepts. */
export enum KnownEncryptionAlgorithm {
  /** Represents a state where the value is not specified. */
  NotSpecified = "NotSpecified",
  /** Represents no encryption algorithm. */
  None = "None",
  /** Represents the DES3 encryption algorithm. */
  DES3 = "DES3",
  /** Represents the RC2 encryption algorithm. */
  RC2 = "RC2",
  /** Represents the AES-128 encryption algorithm. */
  AES128 = "AES128",
  /** Represents the AES-192 encryption algorithm. */
  AES192 = "AES192",
  /** Represents the AES-256 encryption algorithm. */
  AES256 = "AES256",
}

/**
 * Defines values for EncryptionAlgorithm. \
 * {@link KnownEncryptionAlgorithm} can be used interchangeably with EncryptionAlgorithm,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified**: Represents a state where the value is not specified. \
 * **None**: Represents no encryption algorithm. \
 * **DES3**: Represents the DES3 encryption algorithm. \
 * **RC2**: Represents the RC2 encryption algorithm. \
 * **AES128**: Represents the AES-128 encryption algorithm. \
 * **AES192**: Represents the AES-192 encryption algorithm. \
 * **AES256**: Represents the AES-256 encryption algorithm.
 */
export type EncryptionAlgorithm = string;

/** Known values of {@link SigningAlgorithm} that the service accepts. */
export enum KnownSigningAlgorithm {
  /** Represents a state where the value is not specified. */
  NotSpecified = "NotSpecified",
  /** Represents the default signing algorithm. */
  Default = "Default",
  /** Represents the SHA1 signing algorithm. */
  SHA1 = "SHA1",
  /** Represents the SHA2-256 signing algorithm. */
  SHA2256 = "SHA2256",
  /** Represents the SHA2-384 signing algorithm. */
  SHA2384 = "SHA2384",
  /** Represents the SHA2-512 signing algorithm. */
  SHA2512 = "SHA2512",
}

/**
 * Defines values for SigningAlgorithm. \
 * {@link KnownSigningAlgorithm} can be used interchangeably with SigningAlgorithm,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified**: Represents a state where the value is not specified. \
 * **Default**: Represents the default signing algorithm. \
 * **SHA1**: Represents the SHA1 signing algorithm. \
 * **SHA2256**: Represents the SHA2-256 signing algorithm. \
 * **SHA2384**: Represents the SHA2-384 signing algorithm. \
 * **SHA2512**: Represents the SHA2-512 signing algorithm.
 */
export type SigningAlgorithm = string;

/** Known values of {@link TrailingSeparatorPolicy} that the service accepts. */
export enum KnownTrailingSeparatorPolicy {
  /** Represents a state where the value is not specified. */
  NotSpecified = "NotSpecified",
  /** Represents a policy where trailing separators are not allowed. */
  NotAllowed = "NotAllowed",
  /** Represents a policy where trailing separators are optional. */
  Optional = "Optional",
  /** Represents a policy where trailing separators are mandatory. */
  Mandatory = "Mandatory",
}

/**
 * Defines values for TrailingSeparatorPolicy. \
 * {@link KnownTrailingSeparatorPolicy} can be used interchangeably with TrailingSeparatorPolicy,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified**: Represents a state where the value is not specified. \
 * **NotAllowed**: Represents a policy where trailing separators are not allowed. \
 * **Optional**: Represents a policy where trailing separators are optional. \
 * **Mandatory**: Represents a policy where trailing separators are mandatory.
 */
export type TrailingSeparatorPolicy = string;

/** Known values of {@link X12CharacterSet} that the service accepts. */
export enum KnownX12CharacterSet {
  /** Represents a state where the value is not specified. */
  NotSpecified = "NotSpecified",
  /** Represents the basic X12 character set. */
  Basic = "Basic",
  /** Represents the extended X12 character set. */
  Extended = "Extended",
  /** Represents the UTF-8 X12 character set. */
  UTF8 = "UTF8",
}

/**
 * Defines values for X12CharacterSet. \
 * {@link KnownX12CharacterSet} can be used interchangeably with X12CharacterSet,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified**: Represents a state where the value is not specified. \
 * **Basic**: Represents the basic X12 character set. \
 * **Extended**: Represents the extended X12 character set. \
 * **UTF8**: Represents the UTF-8 X12 character set.
 */
export type X12CharacterSet = string;

/** Known values of {@link SegmentTerminatorSuffix} that the service accepts. */
export enum KnownSegmentTerminatorSuffix {
  /** Represents a not specified segment terminator suffix. */
  NotSpecified = "NotSpecified",
  /** Represents a none segment terminator suffix. */
  None = "None",
  /** Represents a CR segment terminator suffix. */
  CR = "CR",
  /** Represents a LF segment terminator suffix. */
  LF = "LF",
  /** Represents a CRLF segment terminator suffix. */
  Crlf = "CRLF",
}

/**
 * Defines values for SegmentTerminatorSuffix. \
 * {@link KnownSegmentTerminatorSuffix} can be used interchangeably with SegmentTerminatorSuffix,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified**: Represents a not specified segment terminator suffix. \
 * **None**: Represents a none segment terminator suffix. \
 * **CR**: Represents a CR segment terminator suffix. \
 * **LF**: Represents a LF segment terminator suffix. \
 * **CRLF**: Represents a CRLF segment terminator suffix.
 */
export type SegmentTerminatorSuffix = string;

/** Known values of {@link X12DateFormat} that the service accepts. */
export enum KnownX12DateFormat {
  /** Represents a state where the value is not specified. */
  NotSpecified = "NotSpecified",
  /** Represents the CCYYMMDD date format. */
  Ccyymmdd = "CCYYMMDD",
  /** Represents the YYMMDD date format. */
  Yymmdd = "YYMMDD",
}

/**
 * Defines values for X12DateFormat. \
 * {@link KnownX12DateFormat} can be used interchangeably with X12DateFormat,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified**: Represents a state where the value is not specified. \
 * **CCYYMMDD**: Represents the CCYYMMDD date format. \
 * **YYMMDD**: Represents the YYMMDD date format.
 */
export type X12DateFormat = string;

/** Known values of {@link X12TimeFormat} that the service accepts. */
export enum KnownX12TimeFormat {
  /** Represents a state where the value is not specified. */
  NotSpecified = "NotSpecified",
  /** Represents the HHMM time format. */
  Hhmm = "HHMM",
  /** Represents the HHMMSS time format. */
  Hhmmss = "HHMMSS",
  /** Represents the HHMMSSdd time format. */
  HhmmsSdd = "HHMMSSdd",
  /** Represents the HHMMSSd time format. */
  HhmmsSd = "HHMMSSd",
}

/**
 * Defines values for X12TimeFormat. \
 * {@link KnownX12TimeFormat} can be used interchangeably with X12TimeFormat,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified**: Represents a state where the value is not specified. \
 * **HHMM**: Represents the HHMM time format. \
 * **HHMMSS**: Represents the HHMMSS time format. \
 * **HHMMSSdd**: Represents the HHMMSSdd time format. \
 * **HHMMSSd**: Represents the HHMMSSd time format.
 */
export type X12TimeFormat = string;

/** Known values of {@link UsageIndicator} that the service accepts. */
export enum KnownUsageIndicator {
  /** Represents a state where the value is not specified. */
  NotSpecified = "NotSpecified",
  /** Represents a test usage indicator. */
  Test = "Test",
  /** Represents an information usage indicator. */
  Information = "Information",
  /** Represents a production usage indicator. */
  Production = "Production",
}

/**
 * Defines values for UsageIndicator. \
 * {@link KnownUsageIndicator} can be used interchangeably with UsageIndicator,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified**: Represents a state where the value is not specified. \
 * **Test**: Represents a test usage indicator. \
 * **Information**: Represents an information usage indicator. \
 * **Production**: Represents a production usage indicator.
 */
export type UsageIndicator = string;

/** Known values of {@link MessageFilterType} that the service accepts. */
export enum KnownMessageFilterType {
  /** Represents a state where the value is not specified. */
  NotSpecified = "NotSpecified",
  /** Represents an include message filter type. */
  Include = "Include",
  /** Represents an exclude message filter type. */
  Exclude = "Exclude",
}

/**
 * Defines values for MessageFilterType. \
 * {@link KnownMessageFilterType} can be used interchangeably with MessageFilterType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified**: Represents a state where the value is not specified. \
 * **Include**: Represents an include message filter type. \
 * **Exclude**: Represents an exclude message filter type.
 */
export type MessageFilterType = string;

/** Known values of {@link EdifactCharacterSet} that the service accepts. */
export enum KnownEdifactCharacterSet {
  /** Represents a state where the value is not specified. */
  NotSpecified = "NotSpecified",
  /** Represents the UNOB Edifact character set. */
  Unob = "UNOB",
  /** Represents the UNOA Edifact character set. */
  Unoa = "UNOA",
  /** Represents the UNOC Edifact character set. */
  Unoc = "UNOC",
  /** Represents the UNOD Edifact character set. */
  Unod = "UNOD",
  /** Represents the UNOE Edifact character set. */
  Unoe = "UNOE",
  /** Represents the UNOF Edifact character set. */
  Unof = "UNOF",
  /** Represents the UNOG Edifact character set. */
  Unog = "UNOG",
  /** Represents the UNOH Edifact character set. */
  Unoh = "UNOH",
  /** Represents the UNOI Edifact character set. */
  Unoi = "UNOI",
  /** Represents the UNOJ Edifact character set. */
  Unoj = "UNOJ",
  /** Represents the UNOK Edifact character set. */
  Unok = "UNOK",
  /** Represents the UNOX Edifact character set. */
  Unox = "UNOX",
  /** Represents the UNOY Edifact character set. */
  Unoy = "UNOY",
  /** Represents the KECA Edifact character set. */
  Keca = "KECA",
}

/**
 * Defines values for EdifactCharacterSet. \
 * {@link KnownEdifactCharacterSet} can be used interchangeably with EdifactCharacterSet,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified**: Represents a state where the value is not specified. \
 * **UNOB**: Represents the UNOB Edifact character set. \
 * **UNOA**: Represents the UNOA Edifact character set. \
 * **UNOC**: Represents the UNOC Edifact character set. \
 * **UNOD**: Represents the UNOD Edifact character set. \
 * **UNOE**: Represents the UNOE Edifact character set. \
 * **UNOF**: Represents the UNOF Edifact character set. \
 * **UNOG**: Represents the UNOG Edifact character set. \
 * **UNOH**: Represents the UNOH Edifact character set. \
 * **UNOI**: Represents the UNOI Edifact character set. \
 * **UNOJ**: Represents the UNOJ Edifact character set. \
 * **UNOK**: Represents the UNOK Edifact character set. \
 * **UNOX**: Represents the UNOX Edifact character set. \
 * **UNOY**: Represents the UNOY Edifact character set. \
 * **KECA**: Represents the KECA Edifact character set.
 */
export type EdifactCharacterSet = string;

/** Known values of {@link EdifactDecimalIndicator} that the service accepts. */
export enum KnownEdifactDecimalIndicator {
  /** Represents a not specified edifact decimal indicator. */
  NotSpecified = "NotSpecified",
  /** Represents a comma edifact decimal indicator. */
  Comma = "Comma",
  /** Represents a decimal edifact decimal indicator. */
  Decimal = "Decimal",
}

/**
 * Defines values for EdifactDecimalIndicator. \
 * {@link KnownEdifactDecimalIndicator} can be used interchangeably with EdifactDecimalIndicator,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified**: Represents a not specified edifact decimal indicator. \
 * **Comma**: Represents a comma edifact decimal indicator. \
 * **Decimal**: Represents a decimal edifact decimal indicator.
 */
export type EdifactDecimalIndicator = string;

/** Known values of {@link KeyType} that the service accepts. */
export enum KnownKeyType {
  /** Represents a state where the value is not specified. */
  NotSpecified = "NotSpecified",
  /** Represents a primary key type. */
  Primary = "Primary",
  /** Represents a secondary key type. */
  Secondary = "Secondary",
}

/**
 * Defines values for KeyType. \
 * {@link KnownKeyType} can be used interchangeably with KeyType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified**: Represents a state where the value is not specified. \
 * **Primary**: Represents a primary key type. \
 * **Secondary**: Represents a secondary key type.
 */
export type KeyType = string;

/** Known values of {@link RecurrenceFrequency} that the service accepts. */
export enum KnownRecurrenceFrequency {
  /** Represents a state where the value is not specified. */
  NotSpecified = "NotSpecified",
  /** Represents a recurrence frequency of seconds. */
  Second = "Second",
  /** Represents a recurrence frequency of minutes. */
  Minute = "Minute",
  /** Represents a recurrence frequency of hours. */
  Hour = "Hour",
  /** Represents a recurrence frequency of days. */
  Day = "Day",
  /** Represents a recurrence frequency of weeks. */
  Week = "Week",
  /** Represents a recurrence frequency of months. */
  Month = "Month",
  /** Represents a recurrence frequency of years. */
  Year = "Year",
}

/**
 * Defines values for RecurrenceFrequency. \
 * {@link KnownRecurrenceFrequency} can be used interchangeably with RecurrenceFrequency,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified**: Represents a state where the value is not specified. \
 * **Second**: Represents a recurrence frequency of seconds. \
 * **Minute**: Represents a recurrence frequency of minutes. \
 * **Hour**: Represents a recurrence frequency of hours. \
 * **Day**: Represents a recurrence frequency of days. \
 * **Week**: Represents a recurrence frequency of weeks. \
 * **Month**: Represents a recurrence frequency of months. \
 * **Year**: Represents a recurrence frequency of years.
 */
export type RecurrenceFrequency = string;

/** Known values of {@link DaysOfWeek} that the service accepts. */
export enum KnownDaysOfWeek {
  /** Represents day of a week Sunday. */
  Sunday = "Sunday",
  /** Represents day of a week Monday. */
  Monday = "Monday",
  /** Represents day of a week Tuesday. */
  Tuesday = "Tuesday",
  /** Represents day of a week Wednesday. */
  Wednesday = "Wednesday",
  /** Represents day of a week Thursday. */
  Thursday = "Thursday",
  /** Represents day of a week Friday. */
  Friday = "Friday",
  /** Represents day of a week Saturday. */
  Saturday = "Saturday",
}

/**
 * Defines values for DaysOfWeek. \
 * {@link KnownDaysOfWeek} can be used interchangeably with DaysOfWeek,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Sunday**: Represents day of a week Sunday. \
 * **Monday**: Represents day of a week Monday. \
 * **Tuesday**: Represents day of a week Tuesday. \
 * **Wednesday**: Represents day of a week Wednesday. \
 * **Thursday**: Represents day of a week Thursday. \
 * **Friday**: Represents day of a week Friday. \
 * **Saturday**: Represents day of a week Saturday.
 */
export type DaysOfWeek = string;

/** Known values of {@link DayOfWeek} that the service accepts. */
export enum KnownDayOfWeek {
  /** Represents day of a week Sunday. */
  Sunday = "Sunday",
  /** Represents day of a week Monday. */
  Monday = "Monday",
  /** Represents day of a week Tuesday. */
  Tuesday = "Tuesday",
  /** Represents day of a week Wednesday. */
  Wednesday = "Wednesday",
  /** Represents day of a week Thursday. */
  Thursday = "Thursday",
  /** Represents day of a week Friday. */
  Friday = "Friday",
  /** Represents day of a week Saturday. */
  Saturday = "Saturday",
}

/**
 * Defines values for DayOfWeek. \
 * {@link KnownDayOfWeek} can be used interchangeably with DayOfWeek,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Sunday**: Represents day of a week Sunday. \
 * **Monday**: Represents day of a week Monday. \
 * **Tuesday**: Represents day of a week Tuesday. \
 * **Wednesday**: Represents day of a week Wednesday. \
 * **Thursday**: Represents day of a week Thursday. \
 * **Friday**: Represents day of a week Friday. \
 * **Saturday**: Represents day of a week Saturday.
 */
export type DayOfWeek = string;

/** Known values of {@link TrackEventsOperationOptions} that the service accepts. */
export enum KnownTrackEventsOperationOptions {
  /** Represents no track events operation options. */
  None = "None",
  /** Represents disabling source info enrichment for track events operation. */
  DisableSourceInfoEnrich = "DisableSourceInfoEnrich",
}

/**
 * Defines values for TrackEventsOperationOptions. \
 * {@link KnownTrackEventsOperationOptions} can be used interchangeably with TrackEventsOperationOptions,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None**: Represents no track events operation options. \
 * **DisableSourceInfoEnrich**: Represents disabling source info enrichment for track events operation.
 */
export type TrackEventsOperationOptions = string;

/** Known values of {@link EventLevel} that the service accepts. */
export enum KnownEventLevel {
  /** Represents a log always event level. */
  LogAlways = "LogAlways",
  /** Represents a critical event level. */
  Critical = "Critical",
  /** Represents an error event level. */
  Error = "Error",
  /** Represents a warning event level. */
  Warning = "Warning",
  /** Represents an information event level. */
  Informational = "Informational",
  /** Represents a verbose event level. */
  Verbose = "Verbose",
}

/**
 * Defines values for EventLevel. \
 * {@link KnownEventLevel} can be used interchangeably with EventLevel,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **LogAlways**: Represents a log always event level. \
 * **Critical**: Represents a critical event level. \
 * **Error**: Represents an error event level. \
 * **Warning**: Represents a warning event level. \
 * **Informational**: Represents an information event level. \
 * **Verbose**: Represents a verbose event level.
 */
export type EventLevel = string;

/** Known values of {@link TrackingRecordType} that the service accepts. */
export enum KnownTrackingRecordType {
  /** Represents a state where the value is not specified. */
  NotSpecified = "NotSpecified",
  /** Represents a custom tracking record type. */
  Custom = "Custom",
  /** Represents an AS2 message tracking record type. */
  As2Message = "As2Message",
  /** Represents an AS2 MDN tracking record type. */
  As2MDN = "As2MDN",
  /** Represents an X12 interchange tracking record type. */
  X12Interchange = "X12Interchange",
  /** Represents an X12 functional group tracking record type. */
  X12FunctionalGroup = "X12FunctionalGroup",
  /** Represents an X12 transaction set tracking record type. */
  X12TransactionSet = "X12TransactionSet",
  /** Represents an X12 interchange acknowledgment tracking record type. */
  X12InterchangeAcknowledgment = "X12InterchangeAcknowledgment",
  /** Represents an X12 functional group acknowledgment tracking record type. */
  X12FunctionalGroupAcknowledgment = "X12FunctionalGroupAcknowledgment",
  /** Represents an X12 transaction set acknowledgment tracking record type. */
  X12TransactionSetAcknowledgment = "X12TransactionSetAcknowledgment",
  /** Represents an Edifact interchange tracking record type. */
  EdifactInterchange = "EdifactInterchange",
  /** Represents an Edifact functional group tracking record type. */
  EdifactFunctionalGroup = "EdifactFunctionalGroup",
  /** Represents an Edifact transaction set tracking record type. */
  EdifactTransactionSet = "EdifactTransactionSet",
  /** Represents an Edifact interchange acknowledgment tracking record type. */
  EdifactInterchangeAcknowledgment = "EdifactInterchangeAcknowledgment",
  /** Represents an Edifact functional group acknowledgment tracking record type. */
  EdifactFunctionalGroupAcknowledgment = "EdifactFunctionalGroupAcknowledgment",
  /** Represents an Edifact transaction set acknowledgment tracking record type. */
  EdifactTransactionSetAcknowledgment = "EdifactTransactionSetAcknowledgment",
}

/**
 * Defines values for TrackingRecordType. \
 * {@link KnownTrackingRecordType} can be used interchangeably with TrackingRecordType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified**: Represents a state where the value is not specified. \
 * **Custom**: Represents a custom tracking record type. \
 * **As2Message**: Represents an AS2 message tracking record type. \
 * **As2MDN**: Represents an AS2 MDN tracking record type. \
 * **X12Interchange**: Represents an X12 interchange tracking record type. \
 * **X12FunctionalGroup**: Represents an X12 functional group tracking record type. \
 * **X12TransactionSet**: Represents an X12 transaction set tracking record type. \
 * **X12InterchangeAcknowledgment**: Represents an X12 interchange acknowledgment tracking record type. \
 * **X12FunctionalGroupAcknowledgment**: Represents an X12 functional group acknowledgment tracking record type. \
 * **X12TransactionSetAcknowledgment**: Represents an X12 transaction set acknowledgment tracking record type. \
 * **EdifactInterchange**: Represents an Edifact interchange tracking record type. \
 * **EdifactFunctionalGroup**: Represents an Edifact functional group tracking record type. \
 * **EdifactTransactionSet**: Represents an Edifact transaction set tracking record type. \
 * **EdifactInterchangeAcknowledgment**: Represents an Edifact interchange acknowledgment tracking record type. \
 * **EdifactFunctionalGroupAcknowledgment**: Represents an Edifact functional group acknowledgment tracking record type. \
 * **EdifactTransactionSetAcknowledgment**: Represents an Edifact transaction set acknowledgment tracking record type.
 */
export type TrackingRecordType = string;

/** Known values of {@link MapType} that the service accepts. */
export enum KnownMapType {
  /** Represents a state where the value is not specified. */
  NotSpecified = "NotSpecified",
  /** Represents an XSLT map type. */
  Xslt = "Xslt",
  /** Represents an XSLT 2.0 map type. */
  Xslt20 = "Xslt20",
  /** Represents an XSLT 3.0 map type. */
  Xslt30 = "Xslt30",
  /** Represents a Liquid map type. */
  Liquid = "Liquid",
}

/**
 * Defines values for MapType. \
 * {@link KnownMapType} can be used interchangeably with MapType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified**: Represents a state where the value is not specified. \
 * **Xslt**: Represents an XSLT map type. \
 * **Xslt20**: Represents an XSLT 2.0 map type. \
 * **Xslt30**: Represents an XSLT 3.0 map type. \
 * **Liquid**: Represents a Liquid map type.
 */
export type MapType = string;

/** Known values of {@link PartnerType} that the service accepts. */
export enum KnownPartnerType {
  /** Represents a state where the value is not specified. */
  NotSpecified = "NotSpecified",
  /** Represents a B2b partner type. */
  B2B = "B2b",
}

/**
 * Defines values for PartnerType. \
 * {@link KnownPartnerType} can be used interchangeably with PartnerType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified**: Represents a state where the value is not specified. \
 * **B2b**: Represents a B2b partner type.
 */
export type PartnerType = string;

/** Known values of {@link SchemaType} that the service accepts. */
export enum KnownSchemaType {
  /** Represents a state where the value is not specified. */
  NotSpecified = "NotSpecified",
  /** Represents an XML schema type. */
  Xml = "Xml",
}

/**
 * Defines values for SchemaType. \
 * {@link KnownSchemaType} can be used interchangeably with SchemaType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified**: Represents a state where the value is not specified. \
 * **Xml**: Represents an XML schema type.
 */
export type SchemaType = string;

/** Known values of {@link WorkflowStatus} that the service accepts. */
export enum KnownWorkflowStatus {
  /** Represents a state where the value is not specified. */
  NotSpecified = "NotSpecified",
  /** Represents a paused workflow status. */
  Paused = "Paused",
  /** Represents a running workflow status. */
  Running = "Running",
  /** Represents a waiting workflow status. */
  Waiting = "Waiting",
  /** Represents a succeeded workflow status. */
  Succeeded = "Succeeded",
  /** Represents a skipped workflow status. */
  Skipped = "Skipped",
  /** Represents a suspended workflow status. */
  Suspended = "Suspended",
  /** Represents a cancelled workflow status. */
  Cancelled = "Cancelled",
  /** Represents a failed workflow status. */
  Failed = "Failed",
  /** Represents a faulted workflow status. */
  Faulted = "Faulted",
  /** Represents a timed out workflow status. */
  TimedOut = "TimedOut",
  /** Represents an aborted workflow status. */
  Aborted = "Aborted",
  /** Represents an ignored workflow status. */
  Ignored = "Ignored",
}

/**
 * Defines values for WorkflowStatus. \
 * {@link KnownWorkflowStatus} can be used interchangeably with WorkflowStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified**: Represents a state where the value is not specified. \
 * **Paused**: Represents a paused workflow status. \
 * **Running**: Represents a running workflow status. \
 * **Waiting**: Represents a waiting workflow status. \
 * **Succeeded**: Represents a succeeded workflow status. \
 * **Skipped**: Represents a skipped workflow status. \
 * **Suspended**: Represents a suspended workflow status. \
 * **Cancelled**: Represents a cancelled workflow status. \
 * **Failed**: Represents a failed workflow status. \
 * **Faulted**: Represents a faulted workflow status. \
 * **TimedOut**: Represents a timed out workflow status. \
 * **Aborted**: Represents an aborted workflow status. \
 * **Ignored**: Represents an ignored workflow status.
 */
export type WorkflowStatus = string;

/** Known values of {@link WorkflowTriggerProvisioningState} that the service accepts. */
export enum KnownWorkflowTriggerProvisioningState {
  /** Represents a state where the value is not specified. */
  NotSpecified = "NotSpecified",
  /** Represents a state where the workflow trigger is accepted. */
  Accepted = "Accepted",
  /** Represents a state where the workflow trigger is running. */
  Running = "Running",
  /** Represents a state where the workflow trigger is ready. */
  Ready = "Ready",
  /** Represents a state where the workflow trigger is creating. */
  Creating = "Creating",
  /** Represents a state where the workflow trigger is created. */
  Created = "Created",
  /** Represents a state where the workflow trigger is deleting. */
  Deleting = "Deleting",
  /** Represents a state where the workflow trigger is deleted. */
  Deleted = "Deleted",
  /** Represents a state where the workflow trigger is canceled. */
  Canceled = "Canceled",
  /** Represents a state where the workflow trigger is failed. */
  Failed = "Failed",
  /** Represents a state where the workflow trigger is succeeded. */
  Succeeded = "Succeeded",
  /** Represents a state where the workflow trigger is moving. */
  Moving = "Moving",
  /** Represents a state where the workflow trigger is updating. */
  Updating = "Updating",
  /** Represents a state where the workflow trigger is registering. */
  Registering = "Registering",
  /** Represents a state where the workflow trigger is registered. */
  Registered = "Registered",
  /** Represents a state where the workflow trigger is unregistering. */
  Unregistering = "Unregistering",
  /** Represents a state where the workflow trigger is unregistered. */
  Unregistered = "Unregistered",
  /** Represents a state where the workflow trigger is completed. */
  Completed = "Completed",
}

/**
 * Defines values for WorkflowTriggerProvisioningState. \
 * {@link KnownWorkflowTriggerProvisioningState} can be used interchangeably with WorkflowTriggerProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified**: Represents a state where the value is not specified. \
 * **Accepted**: Represents a state where the workflow trigger is accepted. \
 * **Running**: Represents a state where the workflow trigger is running. \
 * **Ready**: Represents a state where the workflow trigger is ready. \
 * **Creating**: Represents a state where the workflow trigger is creating. \
 * **Created**: Represents a state where the workflow trigger is created. \
 * **Deleting**: Represents a state where the workflow trigger is deleting. \
 * **Deleted**: Represents a state where the workflow trigger is deleted. \
 * **Canceled**: Represents a state where the workflow trigger is canceled. \
 * **Failed**: Represents a state where the workflow trigger is failed. \
 * **Succeeded**: Represents a state where the workflow trigger is succeeded. \
 * **Moving**: Represents a state where the workflow trigger is moving. \
 * **Updating**: Represents a state where the workflow trigger is updating. \
 * **Registering**: Represents a state where the workflow trigger is registering. \
 * **Registered**: Represents a state where the workflow trigger is registered. \
 * **Unregistering**: Represents a state where the workflow trigger is unregistering. \
 * **Unregistered**: Represents a state where the workflow trigger is unregistered. \
 * **Completed**: Represents a state where the workflow trigger is completed.
 */
export type WorkflowTriggerProvisioningState = string;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationListResult;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export interface IntegrationAccountsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {
  /** The number of items to be included in the result. */
  top?: number;
}

/** Contains response data for the listBySubscription operation. */
export type IntegrationAccountsListBySubscriptionResponse =
  IntegrationAccountListResult;

/** Optional parameters. */
export interface IntegrationAccountsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {
  /** The number of items to be included in the result. */
  top?: number;
}

/** Contains response data for the listByResourceGroup operation. */
export type IntegrationAccountsListByResourceGroupResponse =
  IntegrationAccountListResult;

/** Optional parameters. */
export interface IntegrationAccountsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type IntegrationAccountsGetResponse = IntegrationAccount;

/** Optional parameters. */
export interface IntegrationAccountsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type IntegrationAccountsCreateOrUpdateResponse = IntegrationAccount;

/** Optional parameters. */
export interface IntegrationAccountsUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type IntegrationAccountsUpdateResponse = IntegrationAccount;

/** Optional parameters. */
export interface IntegrationAccountsDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface IntegrationAccountsListCallbackUrlOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listCallbackUrl operation. */
export type IntegrationAccountsListCallbackUrlResponse = CallbackUrl;

/** Optional parameters. */
export interface IntegrationAccountsListKeyVaultKeysOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listKeyVaultKeys operation. */
export type IntegrationAccountsListKeyVaultKeysResponse = KeyVaultKeyCollection;

/** Optional parameters. */
export interface IntegrationAccountsLogTrackingEventsOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface IntegrationAccountsRegenerateAccessKeyOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the regenerateAccessKey operation. */
export type IntegrationAccountsRegenerateAccessKeyResponse = IntegrationAccount;

/** Optional parameters. */
export interface IntegrationAccountsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type IntegrationAccountsListBySubscriptionNextResponse =
  IntegrationAccountListResult;

/** Optional parameters. */
export interface IntegrationAccountsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type IntegrationAccountsListByResourceGroupNextResponse =
  IntegrationAccountListResult;

/** Optional parameters. */
export interface IntegrationServiceEnvironmentsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {
  /** The number of items to be included in the result. */
  top?: number;
}

/** Contains response data for the listBySubscription operation. */
export type IntegrationServiceEnvironmentsListBySubscriptionResponse =
  IntegrationServiceEnvironmentListResult;

/** Optional parameters. */
export interface IntegrationServiceEnvironmentsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type IntegrationServiceEnvironmentsGetResponse =
  IntegrationServiceEnvironment;

/** Optional parameters. */
export interface IntegrationServiceEnvironmentsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type IntegrationServiceEnvironmentsCreateOrUpdateResponse =
  IntegrationServiceEnvironment;

/** Optional parameters. */
export interface IntegrationServiceEnvironmentsUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type IntegrationServiceEnvironmentsUpdateResponse =
  IntegrationServiceEnvironment;

/** Optional parameters. */
export interface IntegrationServiceEnvironmentsDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface IntegrationServiceEnvironmentsRestartOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface IntegrationServiceEnvironmentsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {
  /** The number of items to be included in the result. */
  top?: number;
}

/** Contains response data for the listByResourceGroup operation. */
export type IntegrationServiceEnvironmentsListByResourceGroupResponse =
  IntegrationServiceEnvironmentListResult;

/** Optional parameters. */
export interface IntegrationServiceEnvironmentsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type IntegrationServiceEnvironmentsListBySubscriptionNextResponse =
  IntegrationServiceEnvironmentListResult;

/** Optional parameters. */
export interface IntegrationServiceEnvironmentsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type IntegrationServiceEnvironmentsListByResourceGroupNextResponse =
  IntegrationServiceEnvironmentListResult;

/** Optional parameters. */
export interface IntegrationServiceEnvironmentManagedApisListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type IntegrationServiceEnvironmentManagedApisListResponse =
  IntegrationServiceEnvironmentManagedApiListResult;

/** Optional parameters. */
export interface IntegrationServiceEnvironmentManagedApisGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type IntegrationServiceEnvironmentManagedApisGetResponse =
  IntegrationServiceEnvironmentManagedApi;

/** Optional parameters. */
export interface IntegrationServiceEnvironmentManagedApisPutOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the put operation. */
export type IntegrationServiceEnvironmentManagedApisPutResponse =
  IntegrationServiceEnvironmentManagedApi;

/** Optional parameters. */
export interface IntegrationServiceEnvironmentManagedApisDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type IntegrationServiceEnvironmentManagedApisDeleteResponse =
  IntegrationServiceEnvironmentManagedApisDeleteHeaders;

/** Optional parameters. */
export interface IntegrationServiceEnvironmentManagedApisListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type IntegrationServiceEnvironmentManagedApisListNextResponse =
  IntegrationServiceEnvironmentManagedApiListResult;

/** Optional parameters. */
export interface ApiOperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type ApiOperationsListResponse = ApiOperationListResult;

/** Optional parameters. */
export interface ApiOperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type ApiOperationsListNextResponse = ApiOperationListResult;

/** Optional parameters. */
export interface IntegrationServiceEnvironmentNetworkHealthGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type IntegrationServiceEnvironmentNetworkHealthGetResponse =
  IntegrationServiceEnvironmentNetworkHealth;

/** Optional parameters. */
export interface IntegrationServiceEnvironmentSkusListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type IntegrationServiceEnvironmentSkusListResponse =
  IntegrationServiceEnvironmentSkuList;

/** Optional parameters. */
export interface IntegrationServiceEnvironmentSkusListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type IntegrationServiceEnvironmentSkusListNextResponse =
  IntegrationServiceEnvironmentSkuList;

/** Optional parameters. */
export interface WorkflowsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {
  /** The number of items to be included in the result. */
  top?: number;
  /** The filter to apply on the operation. Options for filters include: State, Trigger, and ReferencedResourceId. */
  filter?: string;
}

/** Contains response data for the listBySubscription operation. */
export type WorkflowsListBySubscriptionResponse = WorkflowListResult;

/** Optional parameters. */
export interface WorkflowsValidateByLocationOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface WorkflowsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {
  /** The number of items to be included in the result. */
  top?: number;
  /** The filter to apply on the operation. Options for filters include: State, Trigger, and ReferencedResourceId. */
  filter?: string;
}

/** Contains response data for the listByResourceGroup operation. */
export type WorkflowsListByResourceGroupResponse = WorkflowListResult;

/** Optional parameters. */
export interface WorkflowsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type WorkflowsGetResponse = Workflow;

/** Optional parameters. */
export interface WorkflowsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type WorkflowsCreateOrUpdateResponse = Workflow;

/** Optional parameters. */
export interface WorkflowsUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type WorkflowsUpdateResponse = Workflow;

/** Optional parameters. */
export interface WorkflowsDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface WorkflowsDisableOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface WorkflowsEnableOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface WorkflowsGenerateUpgradedDefinitionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the generateUpgradedDefinition operation. */
export type WorkflowsGenerateUpgradedDefinitionResponse = {
  [propertyName: string]: any;
};

/** Optional parameters. */
export interface WorkflowsListCallbackUrlOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listCallbackUrl operation. */
export type WorkflowsListCallbackUrlResponse = WorkflowTriggerCallbackUrl;

/** Optional parameters. */
export interface WorkflowsListSwaggerOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listSwagger operation. */
export type WorkflowsListSwaggerResponse = { [propertyName: string]: any };

/** Optional parameters. */
export interface WorkflowsMoveOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface WorkflowsRegenerateAccessKeyOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface WorkflowsValidateByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface WorkflowsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type WorkflowsListBySubscriptionNextResponse = WorkflowListResult;

/** Optional parameters. */
export interface WorkflowsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type WorkflowsListByResourceGroupNextResponse = WorkflowListResult;

/** Optional parameters. */
export interface IntegrationAccountAgreementsListOptionalParams
  extends coreClient.OperationOptions {
  /** The number of items to be included in the result. */
  top?: number;
  /** The filter to apply on the operation. Options for filters include: AgreementType. */
  filter?: string;
}

/** Contains response data for the list operation. */
export type IntegrationAccountAgreementsListResponse =
  IntegrationAccountAgreementListResult;

/** Optional parameters. */
export interface IntegrationAccountAgreementsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type IntegrationAccountAgreementsGetResponse =
  IntegrationAccountAgreement;

/** Optional parameters. */
export interface IntegrationAccountAgreementsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type IntegrationAccountAgreementsCreateOrUpdateResponse =
  IntegrationAccountAgreement;

/** Optional parameters. */
export interface IntegrationAccountAgreementsDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface IntegrationAccountAgreementsListContentCallbackUrlOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listContentCallbackUrl operation. */
export type IntegrationAccountAgreementsListContentCallbackUrlResponse =
  WorkflowTriggerCallbackUrl;

/** Optional parameters. */
export interface IntegrationAccountAgreementsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type IntegrationAccountAgreementsListNextResponse =
  IntegrationAccountAgreementListResult;

/** Optional parameters. */
export interface IntegrationAccountAssembliesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type IntegrationAccountAssembliesListResponse = AssemblyCollection;

/** Optional parameters. */
export interface IntegrationAccountAssembliesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type IntegrationAccountAssembliesGetResponse = AssemblyDefinition;

/** Optional parameters. */
export interface IntegrationAccountAssembliesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type IntegrationAccountAssembliesCreateOrUpdateResponse =
  AssemblyDefinition;

/** Optional parameters. */
export interface IntegrationAccountAssembliesDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface IntegrationAccountAssembliesListContentCallbackUrlOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listContentCallbackUrl operation. */
export type IntegrationAccountAssembliesListContentCallbackUrlResponse =
  WorkflowTriggerCallbackUrl;

/** Optional parameters. */
export interface IntegrationAccountBatchConfigurationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type IntegrationAccountBatchConfigurationsListResponse =
  BatchConfigurationCollection;

/** Optional parameters. */
export interface IntegrationAccountBatchConfigurationsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type IntegrationAccountBatchConfigurationsGetResponse =
  BatchConfiguration;

/** Optional parameters. */
export interface IntegrationAccountBatchConfigurationsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type IntegrationAccountBatchConfigurationsCreateOrUpdateResponse =
  BatchConfiguration;

/** Optional parameters. */
export interface IntegrationAccountBatchConfigurationsDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface IntegrationAccountCertificatesListOptionalParams
  extends coreClient.OperationOptions {
  /** The number of items to be included in the result. */
  top?: number;
}

/** Contains response data for the list operation. */
export type IntegrationAccountCertificatesListResponse =
  IntegrationAccountCertificateListResult;

/** Optional parameters. */
export interface IntegrationAccountCertificatesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type IntegrationAccountCertificatesGetResponse =
  IntegrationAccountCertificate;

/** Optional parameters. */
export interface IntegrationAccountCertificatesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type IntegrationAccountCertificatesCreateOrUpdateResponse =
  IntegrationAccountCertificate;

/** Optional parameters. */
export interface IntegrationAccountCertificatesDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface IntegrationAccountCertificatesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type IntegrationAccountCertificatesListNextResponse =
  IntegrationAccountCertificateListResult;

/** Optional parameters. */
export interface IntegrationAccountMapsListOptionalParams
  extends coreClient.OperationOptions {
  /** The number of items to be included in the result. */
  top?: number;
  /** The filter to apply on the operation. Options for filters include: MapType. */
  filter?: string;
}

/** Contains response data for the list operation. */
export type IntegrationAccountMapsListResponse =
  IntegrationAccountMapListResult;

/** Optional parameters. */
export interface IntegrationAccountMapsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type IntegrationAccountMapsGetResponse = IntegrationAccountMap;

/** Optional parameters. */
export interface IntegrationAccountMapsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type IntegrationAccountMapsCreateOrUpdateResponse =
  IntegrationAccountMap;

/** Optional parameters. */
export interface IntegrationAccountMapsDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface IntegrationAccountMapsListContentCallbackUrlOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listContentCallbackUrl operation. */
export type IntegrationAccountMapsListContentCallbackUrlResponse =
  WorkflowTriggerCallbackUrl;

/** Optional parameters. */
export interface IntegrationAccountMapsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type IntegrationAccountMapsListNextResponse =
  IntegrationAccountMapListResult;

/** Optional parameters. */
export interface IntegrationAccountPartnersListOptionalParams
  extends coreClient.OperationOptions {
  /** The number of items to be included in the result. */
  top?: number;
  /** The filter to apply on the operation. Options for filters include: PartnerType. */
  filter?: string;
}

/** Contains response data for the list operation. */
export type IntegrationAccountPartnersListResponse =
  IntegrationAccountPartnerListResult;

/** Optional parameters. */
export interface IntegrationAccountPartnersGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type IntegrationAccountPartnersGetResponse = IntegrationAccountPartner;

/** Optional parameters. */
export interface IntegrationAccountPartnersCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type IntegrationAccountPartnersCreateOrUpdateResponse =
  IntegrationAccountPartner;

/** Optional parameters. */
export interface IntegrationAccountPartnersDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface IntegrationAccountPartnersListContentCallbackUrlOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listContentCallbackUrl operation. */
export type IntegrationAccountPartnersListContentCallbackUrlResponse =
  WorkflowTriggerCallbackUrl;

/** Optional parameters. */
export interface IntegrationAccountPartnersListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type IntegrationAccountPartnersListNextResponse =
  IntegrationAccountPartnerListResult;

/** Optional parameters. */
export interface IntegrationAccountSchemasListOptionalParams
  extends coreClient.OperationOptions {
  /** The number of items to be included in the result. */
  top?: number;
  /** The filter to apply on the operation. Options for filters include: SchemaType. */
  filter?: string;
}

/** Contains response data for the list operation. */
export type IntegrationAccountSchemasListResponse =
  IntegrationAccountSchemaListResult;

/** Optional parameters. */
export interface IntegrationAccountSchemasGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type IntegrationAccountSchemasGetResponse = IntegrationAccountSchema;

/** Optional parameters. */
export interface IntegrationAccountSchemasCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type IntegrationAccountSchemasCreateOrUpdateResponse =
  IntegrationAccountSchema;

/** Optional parameters. */
export interface IntegrationAccountSchemasDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface IntegrationAccountSchemasListContentCallbackUrlOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listContentCallbackUrl operation. */
export type IntegrationAccountSchemasListContentCallbackUrlResponse =
  WorkflowTriggerCallbackUrl;

/** Optional parameters. */
export interface IntegrationAccountSchemasListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type IntegrationAccountSchemasListNextResponse =
  IntegrationAccountSchemaListResult;

/** Optional parameters. */
export interface IntegrationAccountSessionsListOptionalParams
  extends coreClient.OperationOptions {
  /** The number of items to be included in the result. */
  top?: number;
  /** The filter to apply on the operation. Options for filters include: ChangedTime. */
  filter?: string;
}

/** Contains response data for the list operation. */
export type IntegrationAccountSessionsListResponse =
  IntegrationAccountSessionListResult;

/** Optional parameters. */
export interface IntegrationAccountSessionsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type IntegrationAccountSessionsGetResponse = IntegrationAccountSession;

/** Optional parameters. */
export interface IntegrationAccountSessionsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type IntegrationAccountSessionsCreateOrUpdateResponse =
  IntegrationAccountSession;

/** Optional parameters. */
export interface IntegrationAccountSessionsDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface IntegrationAccountSessionsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type IntegrationAccountSessionsListNextResponse =
  IntegrationAccountSessionListResult;

/** Optional parameters. */
export interface WorkflowRunsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type WorkflowRunsGetResponse = WorkflowRun;

/** Optional parameters. */
export interface WorkflowRunsCancelOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface WorkflowRunsListOptionalParams
  extends coreClient.OperationOptions {
  /** The number of items to be included in the result. */
  top?: number;
  /** The filter to apply on the operation. Options for filters include: Status, StartTime, and ClientTrackingId. */
  filter?: string;
}

/** Contains response data for the list operation. */
export type WorkflowRunsListResponse = WorkflowRunListResult;

/** Optional parameters. */
export interface WorkflowRunsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type WorkflowRunsListNextResponse = WorkflowRunListResult;

/** Optional parameters. */
export interface WorkflowRunActionsListOptionalParams
  extends coreClient.OperationOptions {
  /** The number of items to be included in the result. */
  top?: number;
  /** The filter to apply on the operation. Options for filters include: Status. */
  filter?: string;
}

/** Contains response data for the list operation. */
export type WorkflowRunActionsListResponse = WorkflowRunActionListResult;

/** Optional parameters. */
export interface WorkflowRunActionsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type WorkflowRunActionsGetResponse = WorkflowRunAction;

/** Optional parameters. */
export interface WorkflowRunActionsListExpressionTracesOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listExpressionTraces operation. */
export type WorkflowRunActionsListExpressionTracesResponse = ExpressionTraces;

/** Optional parameters. */
export interface WorkflowRunActionsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type WorkflowRunActionsListNextResponse = WorkflowRunActionListResult;

/** Optional parameters. */
export interface WorkflowRunActionScopeRepetitionsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type WorkflowRunActionScopeRepetitionsListResponse =
  WorkflowRunActionRepetitionDefinitionCollection;

/** Optional parameters. */
export interface WorkflowRunActionScopeRepetitionsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type WorkflowRunActionScopeRepetitionsGetResponse =
  WorkflowRunActionRepetitionDefinition;

/** Optional parameters. */
export interface WorkflowRunActionScopeRepetitionsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type WorkflowRunActionScopeRepetitionsListNextResponse =
  WorkflowRunActionRepetitionDefinitionCollection;

/** Optional parameters. */
export interface WorkflowRunActionRepetitionsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type WorkflowRunActionRepetitionsGetResponse =
  WorkflowRunActionRepetitionDefinition;

/** Optional parameters. */
export interface WorkflowRunActionRepetitionsListExpressionTracesOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listExpressionTraces operation. */
export type WorkflowRunActionRepetitionsListExpressionTracesResponse =
  ExpressionTraces;

/** Optional parameters. */
export interface WorkflowRunActionRepetitionsRequestHistoriesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type WorkflowRunActionRepetitionsRequestHistoriesListResponse =
  RequestHistoryListResult;

/** Optional parameters. */
export interface WorkflowRunActionRepetitionsRequestHistoriesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type WorkflowRunActionRepetitionsRequestHistoriesGetResponse =
  RequestHistory;

/** Optional parameters. */
export interface WorkflowRunActionRepetitionsRequestHistoriesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type WorkflowRunActionRepetitionsRequestHistoriesListNextResponse =
  RequestHistoryListResult;

/** Optional parameters. */
export interface WorkflowRunActionRequestHistoriesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type WorkflowRunActionRequestHistoriesListResponse =
  RequestHistoryListResult;

/** Optional parameters. */
export interface WorkflowRunActionRequestHistoriesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type WorkflowRunActionRequestHistoriesGetResponse = RequestHistory;

/** Optional parameters. */
export interface WorkflowRunActionRequestHistoriesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type WorkflowRunActionRequestHistoriesListNextResponse =
  RequestHistoryListResult;

/** Optional parameters. */
export interface WorkflowRunOperationsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type WorkflowRunOperationsGetResponse = WorkflowRun;

/** Optional parameters. */
export interface WorkflowTriggersListOptionalParams
  extends coreClient.OperationOptions {
  /** The number of items to be included in the result. */
  top?: number;
  /** The filter to apply on the operation. */
  filter?: string;
}

/** Contains response data for the list operation. */
export type WorkflowTriggersListResponse = WorkflowTriggerListResult;

/** Optional parameters. */
export interface WorkflowTriggersGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type WorkflowTriggersGetResponse = WorkflowTrigger;

/** Optional parameters. */
export interface WorkflowTriggersGetSchemaJsonOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getSchemaJson operation. */
export type WorkflowTriggersGetSchemaJsonResponse = JsonSchema;

/** Optional parameters. */
export interface WorkflowTriggersListCallbackUrlOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listCallbackUrl operation. */
export type WorkflowTriggersListCallbackUrlResponse =
  WorkflowTriggerCallbackUrl;

/** Optional parameters. */
export interface WorkflowTriggersResetOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface WorkflowTriggersRunOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface WorkflowTriggersSetStateOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface WorkflowTriggersListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type WorkflowTriggersListNextResponse = WorkflowTriggerListResult;

/** Optional parameters. */
export interface WorkflowTriggerHistoriesListOptionalParams
  extends coreClient.OperationOptions {
  /** The number of items to be included in the result. */
  top?: number;
  /** The filter to apply on the operation. Options for filters include: Status, StartTime, and ClientTrackingId. */
  filter?: string;
}

/** Contains response data for the list operation. */
export type WorkflowTriggerHistoriesListResponse =
  WorkflowTriggerHistoryListResult;

/** Optional parameters. */
export interface WorkflowTriggerHistoriesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type WorkflowTriggerHistoriesGetResponse = WorkflowTriggerHistory;

/** Optional parameters. */
export interface WorkflowTriggerHistoriesResubmitOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the resubmit operation. */
export type WorkflowTriggerHistoriesResubmitResponse =
  WorkflowTriggerHistoriesResubmitHeaders;

/** Optional parameters. */
export interface WorkflowTriggerHistoriesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type WorkflowTriggerHistoriesListNextResponse =
  WorkflowTriggerHistoryListResult;

/** Optional parameters. */
export interface WorkflowVersionsListOptionalParams
  extends coreClient.OperationOptions {
  /** The number of items to be included in the result. */
  top?: number;
}

/** Contains response data for the list operation. */
export type WorkflowVersionsListResponse = WorkflowVersionListResult;

/** Optional parameters. */
export interface WorkflowVersionsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type WorkflowVersionsGetResponse = WorkflowVersion;

/** Optional parameters. */
export interface WorkflowVersionsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type WorkflowVersionsListNextResponse = WorkflowVersionListResult;

/** Optional parameters. */
export interface WorkflowVersionTriggersListCallbackUrlOptionalParams
  extends coreClient.OperationOptions {
  /** The callback URL parameters. */
  parameters?: GetCallbackUrlParameters;
}

/** Contains response data for the listCallbackUrl operation. */
export type WorkflowVersionTriggersListCallbackUrlResponse =
  WorkflowTriggerCallbackUrl;

/** Optional parameters. */
export interface LogicManagementClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
