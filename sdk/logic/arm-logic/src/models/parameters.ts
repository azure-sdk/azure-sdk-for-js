/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter,
} from "@azure/core-client";
import {
  IntegrationAccount as IntegrationAccountMapper,
  GetCallbackUrlParameters as GetCallbackUrlParametersMapper,
  ListKeyVaultKeysDefinition as ListKeyVaultKeysDefinitionMapper,
  TrackingEventsDefinition as TrackingEventsDefinitionMapper,
  RegenerateActionParameter as RegenerateActionParameterMapper,
  IntegrationServiceEnvironment as IntegrationServiceEnvironmentMapper,
  IntegrationServiceEnvironmentManagedApi as IntegrationServiceEnvironmentManagedApiMapper,
  Workflow as WorkflowMapper,
  GenerateUpgradedDefinitionParameters as GenerateUpgradedDefinitionParametersMapper,
  WorkflowReference as WorkflowReferenceMapper,
  IntegrationAccountAgreement as IntegrationAccountAgreementMapper,
  AssemblyDefinition as AssemblyDefinitionMapper,
  BatchConfiguration as BatchConfigurationMapper,
  IntegrationAccountCertificate as IntegrationAccountCertificateMapper,
  IntegrationAccountMap as IntegrationAccountMapMapper,
  IntegrationAccountPartner as IntegrationAccountPartnerMapper,
  IntegrationAccountSchema as IntegrationAccountSchemaMapper,
  IntegrationAccountSession as IntegrationAccountSessionMapper,
  SetTriggerStateActionDefinition as SetTriggerStateActionDefinitionMapper,
} from "../models/mappers.js";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String",
    },
  },
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2019-05-01",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String",
    },
  },
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    constraints: {
      MinLength: 1,
    },
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const top: OperationQueryParameter = {
  parameterPath: ["options", "top"],
  mapper: {
    serializedName: "$top",
    type: {
      name: "Number",
    },
  },
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    constraints: {
      MaxLength: 90,
      MinLength: 1,
    },
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const integrationAccountName: OperationURLParameter = {
  parameterPath: "integrationAccountName",
  mapper: {
    serializedName: "integrationAccountName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String",
    },
  },
};

export const resource: OperationParameter = {
  parameterPath: "resource",
  mapper: IntegrationAccountMapper,
};

export const properties: OperationParameter = {
  parameterPath: "properties",
  mapper: IntegrationAccountMapper,
};

export const body: OperationParameter = {
  parameterPath: "body",
  mapper: GetCallbackUrlParametersMapper,
};

export const body1: OperationParameter = {
  parameterPath: "body",
  mapper: ListKeyVaultKeysDefinitionMapper,
};

export const body2: OperationParameter = {
  parameterPath: "body",
  mapper: TrackingEventsDefinitionMapper,
};

export const body3: OperationParameter = {
  parameterPath: "body",
  mapper: RegenerateActionParameterMapper,
};

export const integrationServiceEnvironmentName: OperationURLParameter = {
  parameterPath: "integrationServiceEnvironmentName",
  mapper: {
    serializedName: "integrationServiceEnvironmentName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource1: OperationParameter = {
  parameterPath: "resource",
  mapper: IntegrationServiceEnvironmentMapper,
};

export const properties1: OperationParameter = {
  parameterPath: "properties",
  mapper: IntegrationServiceEnvironmentMapper,
};

export const apiName: OperationURLParameter = {
  parameterPath: "apiName",
  mapper: {
    serializedName: "apiName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource2: OperationParameter = {
  parameterPath: "resource",
  mapper: IntegrationServiceEnvironmentManagedApiMapper,
};

export const filter: OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String",
    },
  },
};

export const validate: OperationParameter = {
  parameterPath: "validate",
  mapper: WorkflowMapper,
};

export const location: OperationURLParameter = {
  parameterPath: "location",
  mapper: {
    constraints: {
      MinLength: 1,
    },
    serializedName: "location",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const workflowName: OperationURLParameter = {
  parameterPath: "workflowName",
  mapper: {
    serializedName: "workflowName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource3: OperationParameter = {
  parameterPath: "resource",
  mapper: WorkflowMapper,
};

export const properties2: OperationParameter = {
  parameterPath: "properties",
  mapper: {
    serializedName: "properties",
    required: true,
    type: {
      name: "any",
    },
  },
};

export const body4: OperationParameter = {
  parameterPath: "body",
  mapper: GenerateUpgradedDefinitionParametersMapper,
};

export const body5: OperationParameter = {
  parameterPath: "body",
  mapper: WorkflowReferenceMapper,
};

export const body6: OperationParameter = {
  parameterPath: "body",
  mapper: WorkflowMapper,
};

export const agreementName: OperationURLParameter = {
  parameterPath: "agreementName",
  mapper: {
    serializedName: "agreementName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource4: OperationParameter = {
  parameterPath: "resource",
  mapper: IntegrationAccountAgreementMapper,
};

export const assemblyArtifactName: OperationURLParameter = {
  parameterPath: "assemblyArtifactName",
  mapper: {
    serializedName: "assemblyArtifactName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource5: OperationParameter = {
  parameterPath: "resource",
  mapper: AssemblyDefinitionMapper,
};

export const batchConfigurationName: OperationURLParameter = {
  parameterPath: "batchConfigurationName",
  mapper: {
    serializedName: "batchConfigurationName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource6: OperationParameter = {
  parameterPath: "resource",
  mapper: BatchConfigurationMapper,
};

export const certificateName: OperationURLParameter = {
  parameterPath: "certificateName",
  mapper: {
    serializedName: "certificateName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource7: OperationParameter = {
  parameterPath: "resource",
  mapper: IntegrationAccountCertificateMapper,
};

export const mapName: OperationURLParameter = {
  parameterPath: "mapName",
  mapper: {
    serializedName: "mapName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource8: OperationParameter = {
  parameterPath: "resource",
  mapper: IntegrationAccountMapMapper,
};

export const partnerName: OperationURLParameter = {
  parameterPath: "partnerName",
  mapper: {
    serializedName: "partnerName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource9: OperationParameter = {
  parameterPath: "resource",
  mapper: IntegrationAccountPartnerMapper,
};

export const schemaName: OperationURLParameter = {
  parameterPath: "schemaName",
  mapper: {
    serializedName: "schemaName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource10: OperationParameter = {
  parameterPath: "resource",
  mapper: IntegrationAccountSchemaMapper,
};

export const sessionName: OperationURLParameter = {
  parameterPath: "sessionName",
  mapper: {
    serializedName: "sessionName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource11: OperationParameter = {
  parameterPath: "resource",
  mapper: IntegrationAccountSessionMapper,
};

export const runName: OperationURLParameter = {
  parameterPath: "runName",
  mapper: {
    serializedName: "runName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const actionName: OperationURLParameter = {
  parameterPath: "actionName",
  mapper: {
    serializedName: "actionName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const repetitionName: OperationURLParameter = {
  parameterPath: "repetitionName",
  mapper: {
    serializedName: "repetitionName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const requestHistoryName: OperationURLParameter = {
  parameterPath: "requestHistoryName",
  mapper: {
    serializedName: "requestHistoryName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const operationId: OperationURLParameter = {
  parameterPath: "operationId",
  mapper: {
    serializedName: "operationId",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const triggerName: OperationURLParameter = {
  parameterPath: "triggerName",
  mapper: {
    serializedName: "triggerName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const body7: OperationParameter = {
  parameterPath: "body",
  mapper: SetTriggerStateActionDefinitionMapper,
};

export const historyName: OperationURLParameter = {
  parameterPath: "historyName",
  mapper: {
    serializedName: "historyName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const versionId: OperationURLParameter = {
  parameterPath: "versionId",
  mapper: {
    serializedName: "versionId",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const parameters: OperationParameter = {
  parameterPath: ["options", "parameters"],
  mapper: GetCallbackUrlParametersMapper,
};
