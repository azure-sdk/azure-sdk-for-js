/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreRestPipeline from "@azure/core-rest-pipeline";
import {
  PipelineRequest,
  PipelineResponse,
  SendRequest,
} from "@azure/core-rest-pipeline";
import * as coreAuth from "@azure/core-auth";
import {
  OperationsImpl,
  IntegrationAccountsImpl,
  IntegrationServiceEnvironmentsImpl,
  IntegrationServiceEnvironmentManagedApisImpl,
  ApiOperationsImpl,
  IntegrationServiceEnvironmentNetworkHealthOperationsImpl,
  IntegrationServiceEnvironmentSkusImpl,
  WorkflowsImpl,
  IntegrationAccountAgreementsImpl,
  IntegrationAccountAssembliesImpl,
  IntegrationAccountBatchConfigurationsImpl,
  IntegrationAccountCertificatesImpl,
  IntegrationAccountMapsImpl,
  IntegrationAccountPartnersImpl,
  IntegrationAccountSchemasImpl,
  IntegrationAccountSessionsImpl,
  WorkflowRunsImpl,
  WorkflowRunActionsImpl,
  WorkflowRunActionScopeRepetitionsImpl,
  WorkflowRunActionRepetitionsImpl,
  WorkflowRunActionRepetitionsRequestHistoriesImpl,
  WorkflowRunActionRequestHistoriesImpl,
  WorkflowRunOperationsImpl,
  WorkflowTriggersImpl,
  WorkflowTriggerHistoriesImpl,
  WorkflowVersionsImpl,
  WorkflowVersionTriggersImpl,
} from "./operations/index.js";
import {
  Operations,
  IntegrationAccounts,
  IntegrationServiceEnvironments,
  IntegrationServiceEnvironmentManagedApis,
  ApiOperations,
  IntegrationServiceEnvironmentNetworkHealthOperations,
  IntegrationServiceEnvironmentSkus,
  Workflows,
  IntegrationAccountAgreements,
  IntegrationAccountAssemblies,
  IntegrationAccountBatchConfigurations,
  IntegrationAccountCertificates,
  IntegrationAccountMaps,
  IntegrationAccountPartners,
  IntegrationAccountSchemas,
  IntegrationAccountSessions,
  WorkflowRuns,
  WorkflowRunActions,
  WorkflowRunActionScopeRepetitions,
  WorkflowRunActionRepetitions,
  WorkflowRunActionRepetitionsRequestHistories,
  WorkflowRunActionRequestHistories,
  WorkflowRunOperations,
  WorkflowTriggers,
  WorkflowTriggerHistories,
  WorkflowVersions,
  WorkflowVersionTriggers,
} from "./operationsInterfaces/index.js";
import { LogicManagementClientOptionalParams } from "./models/index.js";

export class LogicManagementClient extends coreClient.ServiceClient {
  $host: string;
  apiVersion: string;
  subscriptionId: string;

  /**
   * Initializes a new instance of the LogicManagementClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param subscriptionId The ID of the target subscription.
   * @param options The parameter options
   */
  constructor(
    credentials: coreAuth.TokenCredential,
    subscriptionId: string,
    options?: LogicManagementClientOptionalParams,
  ) {
    if (credentials === undefined) {
      throw new Error("'credentials' cannot be null");
    }
    if (subscriptionId === undefined) {
      throw new Error("'subscriptionId' cannot be null");
    }

    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: LogicManagementClientOptionalParams = {
      requestContentType: "application/json; charset=utf-8",
      credential: credentials,
    };

    const packageDetails = `azsdk-js-arm-logic/9.0.0`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix,
      },
      endpoint:
        options.endpoint ?? options.baseUri ?? "https://management.azure.com",
    };
    super(optionsWithDefaults);

    let bearerTokenAuthenticationPolicyFound: boolean = false;
    if (options?.pipeline && options.pipeline.getOrderedPolicies().length > 0) {
      const pipelinePolicies: coreRestPipeline.PipelinePolicy[] =
        options.pipeline.getOrderedPolicies();
      bearerTokenAuthenticationPolicyFound = pipelinePolicies.some(
        (pipelinePolicy) =>
          pipelinePolicy.name ===
          coreRestPipeline.bearerTokenAuthenticationPolicyName,
      );
    }
    if (
      !options ||
      !options.pipeline ||
      options.pipeline.getOrderedPolicies().length == 0 ||
      !bearerTokenAuthenticationPolicyFound
    ) {
      this.pipeline.removePolicy({
        name: coreRestPipeline.bearerTokenAuthenticationPolicyName,
      });
      this.pipeline.addPolicy(
        coreRestPipeline.bearerTokenAuthenticationPolicy({
          credential: credentials,
          scopes:
            optionsWithDefaults.credentialScopes ??
            `${optionsWithDefaults.endpoint}/.default`,
          challengeCallbacks: {
            authorizeRequestOnChallenge:
              coreClient.authorizeRequestOnClaimChallenge,
          },
        }),
      );
    }
    // Parameter assignments
    this.subscriptionId = subscriptionId;

    // Assigning values to Constant parameters
    this.$host = options.$host || "https://management.azure.com";
    this.apiVersion = options.apiVersion || "2019-05-01";
    this.operations = new OperationsImpl(this);
    this.integrationAccounts = new IntegrationAccountsImpl(this);
    this.integrationServiceEnvironments =
      new IntegrationServiceEnvironmentsImpl(this);
    this.integrationServiceEnvironmentManagedApis =
      new IntegrationServiceEnvironmentManagedApisImpl(this);
    this.apiOperations = new ApiOperationsImpl(this);
    this.integrationServiceEnvironmentNetworkHealthOperations =
      new IntegrationServiceEnvironmentNetworkHealthOperationsImpl(this);
    this.integrationServiceEnvironmentSkus =
      new IntegrationServiceEnvironmentSkusImpl(this);
    this.workflows = new WorkflowsImpl(this);
    this.integrationAccountAgreements = new IntegrationAccountAgreementsImpl(
      this,
    );
    this.integrationAccountAssemblies = new IntegrationAccountAssembliesImpl(
      this,
    );
    this.integrationAccountBatchConfigurations =
      new IntegrationAccountBatchConfigurationsImpl(this);
    this.integrationAccountCertificates =
      new IntegrationAccountCertificatesImpl(this);
    this.integrationAccountMaps = new IntegrationAccountMapsImpl(this);
    this.integrationAccountPartners = new IntegrationAccountPartnersImpl(this);
    this.integrationAccountSchemas = new IntegrationAccountSchemasImpl(this);
    this.integrationAccountSessions = new IntegrationAccountSessionsImpl(this);
    this.workflowRuns = new WorkflowRunsImpl(this);
    this.workflowRunActions = new WorkflowRunActionsImpl(this);
    this.workflowRunActionScopeRepetitions =
      new WorkflowRunActionScopeRepetitionsImpl(this);
    this.workflowRunActionRepetitions = new WorkflowRunActionRepetitionsImpl(
      this,
    );
    this.workflowRunActionRepetitionsRequestHistories =
      new WorkflowRunActionRepetitionsRequestHistoriesImpl(this);
    this.workflowRunActionRequestHistories =
      new WorkflowRunActionRequestHistoriesImpl(this);
    this.workflowRunOperations = new WorkflowRunOperationsImpl(this);
    this.workflowTriggers = new WorkflowTriggersImpl(this);
    this.workflowTriggerHistories = new WorkflowTriggerHistoriesImpl(this);
    this.workflowVersions = new WorkflowVersionsImpl(this);
    this.workflowVersionTriggers = new WorkflowVersionTriggersImpl(this);
    this.addCustomApiVersionPolicy(options.apiVersion);
  }

  /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
  private addCustomApiVersionPolicy(apiVersion?: string) {
    if (!apiVersion) {
      return;
    }
    const apiVersionPolicy = {
      name: "CustomApiVersionPolicy",
      async sendRequest(
        request: PipelineRequest,
        next: SendRequest,
      ): Promise<PipelineResponse> {
        const param = request.url.split("?");
        if (param.length > 1) {
          const newParams = param[1].split("&").map((item) => {
            if (item.indexOf("api-version") > -1) {
              return "api-version=" + apiVersion;
            } else {
              return item;
            }
          });
          request.url = param[0] + "?" + newParams.join("&");
        }
        return next(request);
      },
    };
    this.pipeline.addPolicy(apiVersionPolicy);
  }

  operations: Operations;
  integrationAccounts: IntegrationAccounts;
  integrationServiceEnvironments: IntegrationServiceEnvironments;
  integrationServiceEnvironmentManagedApis: IntegrationServiceEnvironmentManagedApis;
  apiOperations: ApiOperations;
  integrationServiceEnvironmentNetworkHealthOperations: IntegrationServiceEnvironmentNetworkHealthOperations;
  integrationServiceEnvironmentSkus: IntegrationServiceEnvironmentSkus;
  workflows: Workflows;
  integrationAccountAgreements: IntegrationAccountAgreements;
  integrationAccountAssemblies: IntegrationAccountAssemblies;
  integrationAccountBatchConfigurations: IntegrationAccountBatchConfigurations;
  integrationAccountCertificates: IntegrationAccountCertificates;
  integrationAccountMaps: IntegrationAccountMaps;
  integrationAccountPartners: IntegrationAccountPartners;
  integrationAccountSchemas: IntegrationAccountSchemas;
  integrationAccountSessions: IntegrationAccountSessions;
  workflowRuns: WorkflowRuns;
  workflowRunActions: WorkflowRunActions;
  workflowRunActionScopeRepetitions: WorkflowRunActionScopeRepetitions;
  workflowRunActionRepetitions: WorkflowRunActionRepetitions;
  workflowRunActionRepetitionsRequestHistories: WorkflowRunActionRepetitionsRequestHistories;
  workflowRunActionRequestHistories: WorkflowRunActionRequestHistories;
  workflowRunOperations: WorkflowRunOperations;
  workflowTriggers: WorkflowTriggers;
  workflowTriggerHistories: WorkflowTriggerHistories;
  workflowVersions: WorkflowVersions;
  workflowVersionTriggers: WorkflowVersionTriggers;
}
