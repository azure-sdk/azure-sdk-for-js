/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BatchConfigurations } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { LogicManagementClient } from "../logicManagementClient.js";
import {
  BatchConfigurationsListOptionalParams,
  BatchConfigurationsListResponse,
  BatchConfigurationsGetOptionalParams,
  BatchConfigurationsGetResponse,
  BatchConfiguration,
  BatchConfigurationsCreateOrUpdateOptionalParams,
  BatchConfigurationsCreateOrUpdateResponse,
  BatchConfigurationsDeleteOptionalParams,
} from "../models/index.js";

/** Class containing BatchConfigurations operations. */
export class BatchConfigurationsImpl implements BatchConfigurations {
  private readonly client: LogicManagementClient;

  /**
   * Initialize a new instance of the class BatchConfigurations class.
   * @param client Reference to the service client
   */
  constructor(client: LogicManagementClient) {
    this.client = client;
  }

  /**
   * List the batch configurations for an integration account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param integrationAccountName The integration account name.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    integrationAccountName: string,
    options?: BatchConfigurationsListOptionalParams,
  ): Promise<BatchConfigurationsListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, integrationAccountName, options },
      listOperationSpec,
    );
  }

  /**
   * Get a batch configuration for an integration account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param integrationAccountName The integration account name.
   * @param batchConfigurationName The batch configuration name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    integrationAccountName: string,
    batchConfigurationName: string,
    options?: BatchConfigurationsGetOptionalParams,
  ): Promise<BatchConfigurationsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        integrationAccountName,
        batchConfigurationName,
        options,
      },
      getOperationSpec,
    );
  }

  /**
   * Create or update a batch configuration for an integration account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param integrationAccountName The integration account name.
   * @param batchConfigurationName The batch configuration name.
   * @param resource The batch configuration.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    integrationAccountName: string,
    batchConfigurationName: string,
    resource: BatchConfiguration,
    options?: BatchConfigurationsCreateOrUpdateOptionalParams,
  ): Promise<BatchConfigurationsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        integrationAccountName,
        batchConfigurationName,
        resource,
        options,
      },
      createOrUpdateOperationSpec,
    );
  }

  /**
   * Delete a batch configuration for an integration account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param integrationAccountName The integration account name.
   * @param batchConfigurationName The batch configuration name.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    integrationAccountName: string,
    batchConfigurationName: string,
    options?: BatchConfigurationsDeleteOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        integrationAccountName,
        batchConfigurationName,
        options,
      },
      deleteOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/batchConfigurations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BatchConfigurationCollection,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.integrationAccountName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/batchConfigurations/{batchConfigurationName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BatchConfiguration,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.integrationAccountName,
    Parameters.batchConfigurationName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/batchConfigurations/{batchConfigurationName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.BatchConfiguration,
    },
    201: {
      bodyMapper: Mappers.BatchConfiguration,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.resource7,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.integrationAccountName,
    Parameters.batchConfigurationName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/batchConfigurations/{batchConfigurationName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.integrationAccountName,
    Parameters.batchConfigurationName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
