/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { WorkflowRunActionRepetitions } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { LogicManagementClient } from "../logicManagementClient.js";
import {
  WorkflowRunActionRepetitionsGetOptionalParams,
  WorkflowRunActionRepetitionsGetResponse,
  WorkflowRunActionRepetitionsListExpressionTracesOptionalParams,
  WorkflowRunActionRepetitionsListExpressionTracesResponse,
} from "../models/index.js";

/** Class containing WorkflowRunActionRepetitions operations. */
export class WorkflowRunActionRepetitionsImpl
  implements WorkflowRunActionRepetitions
{
  private readonly client: LogicManagementClient;

  /**
   * Initialize a new instance of the class WorkflowRunActionRepetitions class.
   * @param client Reference to the service client
   */
  constructor(client: LogicManagementClient) {
    this.client = client;
  }

  /**
   * Get a workflow run action repetition.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workflowName The name of the Workflow
   * @param runName The name of the WorkflowRun
   * @param actionName The name of the WorkflowRunAction
   * @param repetitionName The name of the WorkflowRunActionRepetitionDefinition
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    workflowName: string,
    runName: string,
    actionName: string,
    repetitionName: string,
    options?: WorkflowRunActionRepetitionsGetOptionalParams,
  ): Promise<WorkflowRunActionRepetitionsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workflowName,
        runName,
        actionName,
        repetitionName,
        options,
      },
      getOperationSpec,
    );
  }

  /**
   * Lists a workflow run expression trace.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workflowName The name of the Workflow
   * @param runName The name of the WorkflowRun
   * @param actionName The name of the WorkflowRunAction
   * @param repetitionName The name of the WorkflowRunActionRepetitionDefinition
   * @param options The options parameters.
   */
  listExpressionTraces(
    resourceGroupName: string,
    workflowName: string,
    runName: string,
    actionName: string,
    repetitionName: string,
    options?: WorkflowRunActionRepetitionsListExpressionTracesOptionalParams,
  ): Promise<WorkflowRunActionRepetitionsListExpressionTracesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workflowName,
        runName,
        actionName,
        repetitionName,
        options,
      },
      listExpressionTracesOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}/repetitions/{repetitionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkflowRunActionRepetitionDefinition,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workflowName,
    Parameters.runName,
    Parameters.actionName,
    Parameters.repetitionName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listExpressionTracesOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}/repetitions/{repetitionName}/listExpressionTraces",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ExpressionTraces,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workflowName,
    Parameters.runName,
    Parameters.actionName,
    Parameters.repetitionName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
