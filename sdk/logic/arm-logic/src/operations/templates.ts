/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { Templates } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { LogicManagementClient } from "../logicManagementClient.js";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl.js";
import {
  Template,
  TemplatesListBySubscriptionNextOptionalParams,
  TemplatesListBySubscriptionOptionalParams,
  TemplatesListBySubscriptionResponse,
  TemplatesListByResourceGroupNextOptionalParams,
  TemplatesListByResourceGroupOptionalParams,
  TemplatesListByResourceGroupResponse,
  TemplatesGetOptionalParams,
  TemplatesGetResponse,
  TemplatesCreateOrUpdateOptionalParams,
  TemplatesCreateOrUpdateResponse,
  TemplateUpdate,
  TemplatesUpdateOptionalParams,
  TemplatesUpdateResponse,
  TemplatesDeleteOptionalParams,
  TemplatesDisableOptionalParams,
  TemplatesEnableOptionalParams,
  GenerateUpgradedDefinitionParameters,
  TemplatesGenerateUpgradedDefinitionOptionalParams,
  TemplatesGenerateUpgradedDefinitionResponse,
  GetCallbackUrlParameters,
  TemplatesListCallbackUrlOptionalParams,
  TemplatesListCallbackUrlResponse,
  TemplatesListSwaggerOptionalParams,
  TemplatesListSwaggerResponse,
  WorkflowReference,
  TemplatesMoveOptionalParams,
  RegenerateActionParameter,
  TemplatesRegenerateAccessKeyOptionalParams,
  Workflow,
  TemplatesValidateByResourceGroupOptionalParams,
  TemplatesListBySubscriptionNextResponse,
  TemplatesListByResourceGroupNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing Templates operations. */
export class TemplatesImpl implements Templates {
  private readonly client: LogicManagementClient;

  /**
   * Initialize a new instance of the class Templates class.
   * @param client Reference to the service client
   */
  constructor(client: LogicManagementClient) {
    this.client = client;
  }

  /**
   * Gets a list of templates by subscription.
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: TemplatesListBySubscriptionOptionalParams,
  ): PagedAsyncIterableIterator<Template> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionPagingPage(options, settings);
      },
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: TemplatesListBySubscriptionOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<Template[]> {
    let result: TemplatesListBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySubscription(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySubscriptionPagingAll(
    options?: TemplatesListBySubscriptionOptionalParams,
  ): AsyncIterableIterator<Template> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Gets a list of templates by resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: TemplatesListByResourceGroupOptionalParams,
  ): PagedAsyncIterableIterator<Template> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByResourceGroupPagingPage(
          resourceGroupName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: TemplatesListByResourceGroupOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<Template[]> {
    let result: TemplatesListByResourceGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByResourceGroup(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: TemplatesListByResourceGroupOptionalParams,
  ): AsyncIterableIterator<Template> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Gets a list of templates by subscription.
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: TemplatesListBySubscriptionOptionalParams,
  ): Promise<TemplatesListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec,
    );
  }

  /**
   * Gets a list of templates by resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: TemplatesListByResourceGroupOptionalParams,
  ): Promise<TemplatesListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec,
    );
  }

  /**
   * Gets a template.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param templateName The template name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    templateName: string,
    options?: TemplatesGetOptionalParams,
  ): Promise<TemplatesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, templateName, options },
      getOperationSpec,
    );
  }

  /**
   * Creates or updates a template.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param templateName The template name.
   * @param resource The template.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    templateName: string,
    resource: Template,
    options?: TemplatesCreateOrUpdateOptionalParams,
  ): Promise<TemplatesCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, templateName, resource, options },
      createOrUpdateOperationSpec,
    );
  }

  /**
   * Updates a template.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param templateName The template name.
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    templateName: string,
    properties: TemplateUpdate,
    options?: TemplatesUpdateOptionalParams,
  ): Promise<TemplatesUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, templateName, properties, options },
      updateOperationSpec,
    );
  }

  /**
   * Deletes a template.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param templateName The template name.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    templateName: string,
    options?: TemplatesDeleteOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, templateName, options },
      deleteOperationSpec,
    );
  }

  /**
   * Disables a template.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param templateName The template name.
   * @param options The options parameters.
   */
  disable(
    resourceGroupName: string,
    templateName: string,
    options?: TemplatesDisableOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, templateName, options },
      disableOperationSpec,
    );
  }

  /**
   * Enables a template.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param templateName The template name.
   * @param options The options parameters.
   */
  enable(
    resourceGroupName: string,
    templateName: string,
    options?: TemplatesEnableOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, templateName, options },
      enableOperationSpec,
    );
  }

  /**
   * Generates the upgraded definition for a template.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param templateName The template name.
   * @param body Parameters for generating an upgraded definition.
   * @param options The options parameters.
   */
  generateUpgradedDefinition(
    resourceGroupName: string,
    templateName: string,
    body: GenerateUpgradedDefinitionParameters,
    options?: TemplatesGenerateUpgradedDefinitionOptionalParams,
  ): Promise<TemplatesGenerateUpgradedDefinitionResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, templateName, body, options },
      generateUpgradedDefinitionOperationSpec,
    );
  }

  /**
   * Get the template callback Url.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param templateName The template name.
   * @param body Which callback url to list.
   * @param options The options parameters.
   */
  listCallbackUrl(
    resourceGroupName: string,
    templateName: string,
    body: GetCallbackUrlParameters,
    options?: TemplatesListCallbackUrlOptionalParams,
  ): Promise<TemplatesListCallbackUrlResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, templateName, body, options },
      listCallbackUrlOperationSpec,
    );
  }

  /**
   * Gets an OpenAPI definition for the template.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param templateName The template name.
   * @param options The options parameters.
   */
  listSwagger(
    resourceGroupName: string,
    templateName: string,
    options?: TemplatesListSwaggerOptionalParams,
  ): Promise<TemplatesListSwaggerResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, templateName, options },
      listSwaggerOperationSpec,
    );
  }

  /**
   * Moves an existing template.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param templateName The template name.
   * @param body The template to move.
   * @param options The options parameters.
   */
  async beginMove(
    resourceGroupName: string,
    templateName: string,
    body: WorkflowReference,
    options?: TemplatesMoveOptionalParams,
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, templateName, body, options },
      spec: moveOperationSpec,
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Moves an existing template.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param templateName The template name.
   * @param body The template to move.
   * @param options The options parameters.
   */
  async beginMoveAndWait(
    resourceGroupName: string,
    templateName: string,
    body: WorkflowReference,
    options?: TemplatesMoveOptionalParams,
  ): Promise<void> {
    const poller = await this.beginMove(
      resourceGroupName,
      templateName,
      body,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Regenerates the callback URL access key for request triggers.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param templateName The template name.
   * @param body The access key type.
   * @param options The options parameters.
   */
  regenerateAccessKey(
    resourceGroupName: string,
    templateName: string,
    body: RegenerateActionParameter,
    options?: TemplatesRegenerateAccessKeyOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, templateName, body, options },
      regenerateAccessKeyOperationSpec,
    );
  }

  /**
   * Validates the template.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param templateName The template name.
   * @param body The template.
   * @param options The options parameters.
   */
  validateByResourceGroup(
    resourceGroupName: string,
    templateName: string,
    body: Workflow,
    options?: TemplatesValidateByResourceGroupOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, templateName, body, options },
      validateByResourceGroupOperationSpec,
    );
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: TemplatesListBySubscriptionNextOptionalParams,
  ): Promise<TemplatesListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec,
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: TemplatesListByResourceGroupNextOptionalParams,
  ): Promise<TemplatesListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Logic/templates",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TemplateListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion, Parameters.top, Parameters.filter],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/templates",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TemplateListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion, Parameters.top, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/templates/{templateName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Template,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.templateName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/templates/{templateName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Template,
    },
    201: {
      bodyMapper: Mappers.Template,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.resource3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.templateName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/templates/{templateName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Template,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.properties2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.templateName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/templates/{templateName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.templateName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const disableOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/templates/{templateName}/disable",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.templateName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const enableOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/templates/{templateName}/enable",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.templateName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const generateUpgradedDefinitionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/templates/{templateName}/generateUpgradedDefinition",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.templateName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const listCallbackUrlOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/templates/{templateName}/listCallbackUrl",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.WorkflowTriggerCallbackUrl,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.templateName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const listSwaggerOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/templates/{templateName}/listSwagger",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.templateName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const moveOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/templates/{templateName}/move",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body5,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.templateName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const regenerateAccessKeyOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/templates/{templateName}/regenerateAccessKey",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.templateName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const validateByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/templates/{templateName}/validate",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body6,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.templateName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TemplateListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TemplateListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
