/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { Locations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { LogicManagementClient } from "../logicManagementClient";
import {
  WorkflowExportRequest,
  LocationsValidateWorkflowExportOptionalParams,
  LocationsValidateWorkflowExportResponse,
  LocationsWorkflowExportOptionalParams,
  LocationsWorkflowExportResponse
} from "../models";

/** Class containing Locations operations. */
export class LocationsImpl implements Locations {
  private readonly client: LogicManagementClient;

  /**
   * Initialize a new instance of the class Locations class.
   * @param client Reference to the service client
   */
  constructor(client: LogicManagementClient) {
    this.client = client;
  }

  /**
   * Validates the workflow export.
   * @param location The name of Azure region.
   * @param workflowExportRequest The workflow export request.
   * @param options The options parameters.
   */
  validateWorkflowExport(
    location: string,
    workflowExportRequest: WorkflowExportRequest,
    options?: LocationsValidateWorkflowExportOptionalParams
  ): Promise<LocationsValidateWorkflowExportResponse> {
    return this.client.sendOperationRequest(
      { location, workflowExportRequest, options },
      validateWorkflowExportOperationSpec
    );
  }

  /**
   * Executes the workflow export.
   * @param location The name of Azure region.
   * @param workflowExportRequest The workflow export request.
   * @param options The options parameters.
   */
  workflowExport(
    location: string,
    workflowExportRequest: WorkflowExportRequest,
    options?: LocationsWorkflowExportOptionalParams
  ): Promise<LocationsWorkflowExportResponse> {
    return this.client.sendOperationRequest(
      { location, workflowExportRequest, options },
      workflowExportOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const validateWorkflowExportOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Logic/locations/{location}/validateWorkflowExport",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.WorkflowExportValidityResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.workflowExportRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location1
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const workflowExportOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Logic/locations/{location}/workflowExport",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.WorkflowExportResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.workflowExportRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location1
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
