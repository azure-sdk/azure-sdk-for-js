/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { IntegrationServiceEnvironmentNetworkHealthOperations } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { LogicManagementClient } from "../logicManagementClient.js";
import {
  IntegrationServiceEnvironmentNetworkHealthGetOptionalParams,
  IntegrationServiceEnvironmentNetworkHealthGetResponse,
} from "../models/index.js";

/** Class containing IntegrationServiceEnvironmentNetworkHealthOperations operations. */
export class IntegrationServiceEnvironmentNetworkHealthOperationsImpl
  implements IntegrationServiceEnvironmentNetworkHealthOperations
{
  private readonly client: LogicManagementClient;

  /**
   * Initialize a new instance of the class IntegrationServiceEnvironmentNetworkHealthOperations class.
   * @param client Reference to the service client
   */
  constructor(client: LogicManagementClient) {
    this.client = client;
  }

  /**
   * Gets the integration service environment network health.
   * @param integrationServiceEnvironmentName The integration service environment name.
   * @param options The options parameters.
   */
  get(
    integrationServiceEnvironmentName: string,
    options?: IntegrationServiceEnvironmentNetworkHealthGetOptionalParams,
  ): Promise<IntegrationServiceEnvironmentNetworkHealthGetResponse> {
    return this.client.sendOperationRequest(
      { integrationServiceEnvironmentName, options },
      getOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}/network",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IntegrationServiceEnvironmentNetworkHealth,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.integrationServiceEnvironmentName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
