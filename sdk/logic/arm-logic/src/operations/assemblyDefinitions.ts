/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { AssemblyDefinitions } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { LogicManagementClient } from "../logicManagementClient.js";
import {
  AssemblyDefinitionsListOptionalParams,
  AssemblyDefinitionsListResponse,
  AssemblyDefinitionsGetOptionalParams,
  AssemblyDefinitionsGetResponse,
  AssemblyDefinition,
  AssemblyDefinitionsCreateOrUpdateOptionalParams,
  AssemblyDefinitionsCreateOrUpdateResponse,
  AssemblyDefinitionsDeleteOptionalParams,
  AssemblyDefinitionsListContentCallbackUrlOptionalParams,
  AssemblyDefinitionsListContentCallbackUrlResponse,
} from "../models/index.js";

/** Class containing AssemblyDefinitions operations. */
export class AssemblyDefinitionsImpl implements AssemblyDefinitions {
  private readonly client: LogicManagementClient;

  /**
   * Initialize a new instance of the class AssemblyDefinitions class.
   * @param client Reference to the service client
   */
  constructor(client: LogicManagementClient) {
    this.client = client;
  }

  /**
   * List the assemblies for an integration account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param integrationAccountName The integration account name.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    integrationAccountName: string,
    options?: AssemblyDefinitionsListOptionalParams,
  ): Promise<AssemblyDefinitionsListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, integrationAccountName, options },
      listOperationSpec,
    );
  }

  /**
   * Get an assembly for an integration account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param integrationAccountName The integration account name.
   * @param assemblyArtifactName The assembly artifact name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    integrationAccountName: string,
    assemblyArtifactName: string,
    options?: AssemblyDefinitionsGetOptionalParams,
  ): Promise<AssemblyDefinitionsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        integrationAccountName,
        assemblyArtifactName,
        options,
      },
      getOperationSpec,
    );
  }

  /**
   * Create or update an assembly for an integration account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param integrationAccountName The integration account name.
   * @param assemblyArtifactName The assembly artifact name.
   * @param resource The assembly artifact.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    integrationAccountName: string,
    assemblyArtifactName: string,
    resource: AssemblyDefinition,
    options?: AssemblyDefinitionsCreateOrUpdateOptionalParams,
  ): Promise<AssemblyDefinitionsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        integrationAccountName,
        assemblyArtifactName,
        resource,
        options,
      },
      createOrUpdateOperationSpec,
    );
  }

  /**
   * Delete an assembly for an integration account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param integrationAccountName The integration account name.
   * @param assemblyArtifactName The assembly artifact name.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    integrationAccountName: string,
    assemblyArtifactName: string,
    options?: AssemblyDefinitionsDeleteOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        integrationAccountName,
        assemblyArtifactName,
        options,
      },
      deleteOperationSpec,
    );
  }

  /**
   * Get the content callback url for an integration account assembly.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param integrationAccountName The integration account name.
   * @param assemblyArtifactName The assembly artifact name.
   * @param options The options parameters.
   */
  listContentCallbackUrl(
    resourceGroupName: string,
    integrationAccountName: string,
    assemblyArtifactName: string,
    options?: AssemblyDefinitionsListContentCallbackUrlOptionalParams,
  ): Promise<AssemblyDefinitionsListContentCallbackUrlResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        integrationAccountName,
        assemblyArtifactName,
        options,
      },
      listContentCallbackUrlOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/assemblies",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AssemblyCollection,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.integrationAccountName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/assemblies/{assemblyArtifactName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AssemblyDefinition,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.integrationAccountName,
    Parameters.assemblyArtifactName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/assemblies/{assemblyArtifactName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.AssemblyDefinition,
    },
    201: {
      bodyMapper: Mappers.AssemblyDefinition,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.resource6,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.integrationAccountName,
    Parameters.assemblyArtifactName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/assemblies/{assemblyArtifactName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.integrationAccountName,
    Parameters.assemblyArtifactName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listContentCallbackUrlOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/assemblies/{assemblyArtifactName}/listContentCallbackUrl",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.WorkflowTriggerCallbackUrl,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.integrationAccountName,
    Parameters.assemblyArtifactName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
