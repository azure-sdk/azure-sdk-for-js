/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { WorkflowRunActionScopeRepetitions } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { LogicManagementClient } from "../logicManagementClient.js";
import {
  WorkflowRunActionRepetitionDefinition,
  WorkflowRunActionScopeRepetitionsListNextOptionalParams,
  WorkflowRunActionScopeRepetitionsListOptionalParams,
  WorkflowRunActionScopeRepetitionsListResponse,
  WorkflowRunActionScopeRepetitionsGetOptionalParams,
  WorkflowRunActionScopeRepetitionsGetResponse,
  WorkflowRunActionScopeRepetitionsListNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing WorkflowRunActionScopeRepetitions operations. */
export class WorkflowRunActionScopeRepetitionsImpl
  implements WorkflowRunActionScopeRepetitions
{
  private readonly client: LogicManagementClient;

  /**
   * Initialize a new instance of the class WorkflowRunActionScopeRepetitions class.
   * @param client Reference to the service client
   */
  constructor(client: LogicManagementClient) {
    this.client = client;
  }

  /**
   * List the workflow run action scoped repetitions.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workflowName The name of the Workflow
   * @param runName The name of the WorkflowRun
   * @param actionName The name of the WorkflowRunAction
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    workflowName: string,
    runName: string,
    actionName: string,
    options?: WorkflowRunActionScopeRepetitionsListOptionalParams,
  ): PagedAsyncIterableIterator<WorkflowRunActionRepetitionDefinition> {
    const iter = this.listPagingAll(
      resourceGroupName,
      workflowName,
      runName,
      actionName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(
          resourceGroupName,
          workflowName,
          runName,
          actionName,
          options,
          settings,
        );
      },
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    workflowName: string,
    runName: string,
    actionName: string,
    options?: WorkflowRunActionScopeRepetitionsListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<WorkflowRunActionRepetitionDefinition[]> {
    let result: WorkflowRunActionScopeRepetitionsListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(
        resourceGroupName,
        workflowName,
        runName,
        actionName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        resourceGroupName,
        workflowName,
        runName,
        actionName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    workflowName: string,
    runName: string,
    actionName: string,
    options?: WorkflowRunActionScopeRepetitionsListOptionalParams,
  ): AsyncIterableIterator<WorkflowRunActionRepetitionDefinition> {
    for await (const page of this.listPagingPage(
      resourceGroupName,
      workflowName,
      runName,
      actionName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List the workflow run action scoped repetitions.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workflowName The name of the Workflow
   * @param runName The name of the WorkflowRun
   * @param actionName The name of the WorkflowRunAction
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    workflowName: string,
    runName: string,
    actionName: string,
    options?: WorkflowRunActionScopeRepetitionsListOptionalParams,
  ): Promise<WorkflowRunActionScopeRepetitionsListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workflowName, runName, actionName, options },
      listOperationSpec,
    );
  }

  /**
   * Get a workflow run action scoped repetition.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workflowName The name of the Workflow
   * @param runName The name of the WorkflowRun
   * @param actionName The name of the WorkflowRunAction
   * @param repetitionName The name of the WorkflowRunActionRepetitionDefinition
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    workflowName: string,
    runName: string,
    actionName: string,
    repetitionName: string,
    options?: WorkflowRunActionScopeRepetitionsGetOptionalParams,
  ): Promise<WorkflowRunActionScopeRepetitionsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workflowName,
        runName,
        actionName,
        repetitionName,
        options,
      },
      getOperationSpec,
    );
  }

  /**
   * ListNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workflowName The name of the Workflow
   * @param runName The name of the WorkflowRun
   * @param actionName The name of the WorkflowRunAction
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    workflowName: string,
    runName: string,
    actionName: string,
    nextLink: string,
    options?: WorkflowRunActionScopeRepetitionsListNextOptionalParams,
  ): Promise<WorkflowRunActionScopeRepetitionsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workflowName,
        runName,
        actionName,
        nextLink,
        options,
      },
      listNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}/repetitions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkflowRunActionRepetitionDefinitionCollection,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workflowName,
    Parameters.runName,
    Parameters.actionName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}/scopeRepetitions/{repetitionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkflowRunActionRepetitionDefinition,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workflowName,
    Parameters.runName,
    Parameters.actionName,
    Parameters.repetitionName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkflowRunActionRepetitionDefinitionCollection,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workflowName,
    Parameters.runName,
    Parameters.actionName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
