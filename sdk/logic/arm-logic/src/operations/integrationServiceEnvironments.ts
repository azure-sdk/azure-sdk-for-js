/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { IntegrationServiceEnvironments } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { LogicManagementClient } from "../logicManagementClient.js";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl.js";
import {
  IntegrationServiceEnvironment,
  IntegrationServiceEnvironmentsListBySubscriptionNextOptionalParams,
  IntegrationServiceEnvironmentsListBySubscriptionOptionalParams,
  IntegrationServiceEnvironmentsListBySubscriptionResponse,
  IntegrationServiceEnvironmentSkuDefinition,
  IntegrationServiceEnvironmentsListNextOptionalParams,
  IntegrationServiceEnvironmentsListOptionalParams,
  IntegrationServiceEnvironmentsListResponse,
  IntegrationServiceEnvironmentsListByResourceGroupNextOptionalParams,
  IntegrationServiceEnvironmentsListByResourceGroupOptionalParams,
  IntegrationServiceEnvironmentsListByResourceGroupResponse,
  IntegrationServiceEnvironmentsGetOptionalParams,
  IntegrationServiceEnvironmentsGetResponse,
  IntegrationServiceEnvironmentsCreateOrUpdateOptionalParams,
  IntegrationServiceEnvironmentsCreateOrUpdateResponse,
  IntegrationServiceEnvironmentsUpdateOptionalParams,
  IntegrationServiceEnvironmentsUpdateResponse,
  IntegrationServiceEnvironmentsDeleteOptionalParams,
  IntegrationServiceEnvironmentsIntegrationServiceEnvironmentNetworkHealthGetOptionalParams,
  IntegrationServiceEnvironmentsIntegrationServiceEnvironmentNetworkHealthGetResponse,
  IntegrationServiceEnvironmentsRestartOptionalParams,
  IntegrationServiceEnvironmentsListBySubscriptionNextResponse,
  IntegrationServiceEnvironmentsListNextResponse,
  IntegrationServiceEnvironmentsListByResourceGroupNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing IntegrationServiceEnvironments operations. */
export class IntegrationServiceEnvironmentsImpl
  implements IntegrationServiceEnvironments
{
  private readonly client: LogicManagementClient;

  /**
   * Initialize a new instance of the class IntegrationServiceEnvironments class.
   * @param client Reference to the service client
   */
  constructor(client: LogicManagementClient) {
    this.client = client;
  }

  /**
   * Gets a list of integration service environments by subscription.
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: IntegrationServiceEnvironmentsListBySubscriptionOptionalParams,
  ): PagedAsyncIterableIterator<IntegrationServiceEnvironment> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionPagingPage(options, settings);
      },
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: IntegrationServiceEnvironmentsListBySubscriptionOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<IntegrationServiceEnvironment[]> {
    let result: IntegrationServiceEnvironmentsListBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySubscription(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySubscriptionPagingAll(
    options?: IntegrationServiceEnvironmentsListBySubscriptionOptionalParams,
  ): AsyncIterableIterator<IntegrationServiceEnvironment> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Gets a list of integration service environment Skus.
   * @param integrationServiceEnvironmentName The integration service environment name.
   * @param options The options parameters.
   */
  public list(
    integrationServiceEnvironmentName: string,
    options?: IntegrationServiceEnvironmentsListOptionalParams,
  ): PagedAsyncIterableIterator<IntegrationServiceEnvironmentSkuDefinition> {
    const iter = this.listPagingAll(integrationServiceEnvironmentName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(
          integrationServiceEnvironmentName,
          options,
          settings,
        );
      },
    };
  }

  private async *listPagingPage(
    integrationServiceEnvironmentName: string,
    options?: IntegrationServiceEnvironmentsListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<IntegrationServiceEnvironmentSkuDefinition[]> {
    let result: IntegrationServiceEnvironmentsListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(integrationServiceEnvironmentName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        integrationServiceEnvironmentName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    integrationServiceEnvironmentName: string,
    options?: IntegrationServiceEnvironmentsListOptionalParams,
  ): AsyncIterableIterator<IntegrationServiceEnvironmentSkuDefinition> {
    for await (const page of this.listPagingPage(
      integrationServiceEnvironmentName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Gets a list of integration service environments by resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: IntegrationServiceEnvironmentsListByResourceGroupOptionalParams,
  ): PagedAsyncIterableIterator<IntegrationServiceEnvironment> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByResourceGroupPagingPage(
          resourceGroupName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: IntegrationServiceEnvironmentsListByResourceGroupOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<IntegrationServiceEnvironment[]> {
    let result: IntegrationServiceEnvironmentsListByResourceGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByResourceGroup(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: IntegrationServiceEnvironmentsListByResourceGroupOptionalParams,
  ): AsyncIterableIterator<IntegrationServiceEnvironment> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Gets a list of integration service environments by subscription.
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: IntegrationServiceEnvironmentsListBySubscriptionOptionalParams,
  ): Promise<IntegrationServiceEnvironmentsListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec,
    );
  }

  /**
   * Gets an integration service environment.
   * @param integrationServiceEnvironmentName The integration service environment name.
   * @param options The options parameters.
   */
  get(
    integrationServiceEnvironmentName: string,
    options?: IntegrationServiceEnvironmentsGetOptionalParams,
  ): Promise<IntegrationServiceEnvironmentsGetResponse> {
    return this.client.sendOperationRequest(
      { integrationServiceEnvironmentName, options },
      getOperationSpec,
    );
  }

  /**
   * Creates or updates an integration service environment.
   * @param integrationServiceEnvironmentName The integration service environment name.
   * @param resource The integration service environment.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    integrationServiceEnvironmentName: string,
    resource: IntegrationServiceEnvironment,
    options?: IntegrationServiceEnvironmentsCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<IntegrationServiceEnvironmentsCreateOrUpdateResponse>,
      IntegrationServiceEnvironmentsCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<IntegrationServiceEnvironmentsCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { integrationServiceEnvironmentName, resource, options },
      spec: createOrUpdateOperationSpec,
    });
    const poller = await createHttpPoller<
      IntegrationServiceEnvironmentsCreateOrUpdateResponse,
      OperationState<IntegrationServiceEnvironmentsCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Creates or updates an integration service environment.
   * @param integrationServiceEnvironmentName The integration service environment name.
   * @param resource The integration service environment.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    integrationServiceEnvironmentName: string,
    resource: IntegrationServiceEnvironment,
    options?: IntegrationServiceEnvironmentsCreateOrUpdateOptionalParams,
  ): Promise<IntegrationServiceEnvironmentsCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      integrationServiceEnvironmentName,
      resource,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Updates an integration service environment.
   * @param integrationServiceEnvironmentName The integration service environment name.
   * @param properties The integration service environment.
   * @param options The options parameters.
   */
  async beginUpdate(
    integrationServiceEnvironmentName: string,
    properties: IntegrationServiceEnvironment,
    options?: IntegrationServiceEnvironmentsUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<IntegrationServiceEnvironmentsUpdateResponse>,
      IntegrationServiceEnvironmentsUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<IntegrationServiceEnvironmentsUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { integrationServiceEnvironmentName, properties, options },
      spec: updateOperationSpec,
    });
    const poller = await createHttpPoller<
      IntegrationServiceEnvironmentsUpdateResponse,
      OperationState<IntegrationServiceEnvironmentsUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Updates an integration service environment.
   * @param integrationServiceEnvironmentName The integration service environment name.
   * @param properties The integration service environment.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    integrationServiceEnvironmentName: string,
    properties: IntegrationServiceEnvironment,
    options?: IntegrationServiceEnvironmentsUpdateOptionalParams,
  ): Promise<IntegrationServiceEnvironmentsUpdateResponse> {
    const poller = await this.beginUpdate(
      integrationServiceEnvironmentName,
      properties,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Deletes an integration service environment.
   * @param integrationServiceEnvironmentName The integration service environment name.
   * @param options The options parameters.
   */
  delete(
    integrationServiceEnvironmentName: string,
    options?: IntegrationServiceEnvironmentsDeleteOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { integrationServiceEnvironmentName, options },
      deleteOperationSpec,
    );
  }

  /**
   * Gets the integration service environment network health.
   * @param integrationServiceEnvironmentName The integration service environment name.
   * @param options The options parameters.
   */
  integrationServiceEnvironmentNetworkHealthGet(
    integrationServiceEnvironmentName: string,
    options?: IntegrationServiceEnvironmentsIntegrationServiceEnvironmentNetworkHealthGetOptionalParams,
  ): Promise<IntegrationServiceEnvironmentsIntegrationServiceEnvironmentNetworkHealthGetResponse> {
    return this.client.sendOperationRequest(
      { integrationServiceEnvironmentName, options },
      integrationServiceEnvironmentNetworkHealthGetOperationSpec,
    );
  }

  /**
   * Restarts an integration service environment.
   * @param integrationServiceEnvironmentName The integration service environment name.
   * @param options The options parameters.
   */
  restart(
    integrationServiceEnvironmentName: string,
    options?: IntegrationServiceEnvironmentsRestartOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { integrationServiceEnvironmentName, options },
      restartOperationSpec,
    );
  }

  /**
   * Gets a list of integration service environment Skus.
   * @param integrationServiceEnvironmentName The integration service environment name.
   * @param options The options parameters.
   */
  private _list(
    integrationServiceEnvironmentName: string,
    options?: IntegrationServiceEnvironmentsListOptionalParams,
  ): Promise<IntegrationServiceEnvironmentsListResponse> {
    return this.client.sendOperationRequest(
      { integrationServiceEnvironmentName, options },
      listOperationSpec,
    );
  }

  /**
   * Gets a list of integration service environments by resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: IntegrationServiceEnvironmentsListByResourceGroupOptionalParams,
  ): Promise<IntegrationServiceEnvironmentsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec,
    );
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: IntegrationServiceEnvironmentsListBySubscriptionNextOptionalParams,
  ): Promise<IntegrationServiceEnvironmentsListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec,
    );
  }

  /**
   * ListNext
   * @param integrationServiceEnvironmentName The integration service environment name.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    integrationServiceEnvironmentName: string,
    nextLink: string,
    options?: IntegrationServiceEnvironmentsListNextOptionalParams,
  ): Promise<IntegrationServiceEnvironmentsListNextResponse> {
    return this.client.sendOperationRequest(
      { integrationServiceEnvironmentName, nextLink, options },
      listNextOperationSpec,
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: IntegrationServiceEnvironmentsListByResourceGroupNextOptionalParams,
  ): Promise<IntegrationServiceEnvironmentsListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Logic/integrationServiceEnvironments",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IntegrationServiceEnvironmentListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion, Parameters.top],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IntegrationServiceEnvironment,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.integrationServiceEnvironmentName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.IntegrationServiceEnvironment,
    },
    201: {
      bodyMapper: Mappers.IntegrationServiceEnvironment,
    },
    202: {
      bodyMapper: Mappers.IntegrationServiceEnvironment,
    },
    204: {
      bodyMapper: Mappers.IntegrationServiceEnvironment,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.resource1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.integrationServiceEnvironmentName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.IntegrationServiceEnvironment,
    },
    201: {
      bodyMapper: Mappers.IntegrationServiceEnvironment,
    },
    202: {
      bodyMapper: Mappers.IntegrationServiceEnvironment,
    },
    204: {
      bodyMapper: Mappers.IntegrationServiceEnvironment,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.properties1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.integrationServiceEnvironmentName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.integrationServiceEnvironmentName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const integrationServiceEnvironmentNetworkHealthGetOperationSpec: coreClient.OperationSpec =
  {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}/network",
    httpMethod: "GET",
    responses: {
      200: {
        bodyMapper: Mappers.IntegrationServiceEnvironmentNetworkHealth,
      },
      default: {
        bodyMapper: Mappers.ErrorResponse,
      },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
      Parameters.$host,
      Parameters.subscriptionId,
      Parameters.integrationServiceEnvironmentName,
    ],
    headerParameters: [Parameters.accept],
    serializer,
  };
const restartOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}/restart",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.integrationServiceEnvironmentName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}/skus",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IntegrationServiceEnvironmentSkuList,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.integrationServiceEnvironmentName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationServiceEnvironments",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IntegrationServiceEnvironmentListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IntegrationServiceEnvironmentListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IntegrationServiceEnvironmentSkuList,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.integrationServiceEnvironmentName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IntegrationServiceEnvironmentListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
