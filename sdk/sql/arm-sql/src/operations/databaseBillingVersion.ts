/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { DatabaseBillingVersion } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SqlManagementClient } from "../sqlManagementClient";
import {
  DatabaseBillingVersionCreateOptionalParams,
  DatabaseBillingVersionCreateResponse,
} from "../models";

/** Class containing DatabaseBillingVersion operations. */
export class DatabaseBillingVersionImpl implements DatabaseBillingVersion {
  private readonly client: SqlManagementClient;

  /**
   * Initialize a new instance of the class DatabaseBillingVersion class.
   * @param client Reference to the service client
   */
  constructor(client: SqlManagementClient) {
    this.client = client;
  }

  /**
   * Request a specific billing version for a database.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param databaseName The name of the database.
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    serverName: string,
    databaseName: string,
    options?: DatabaseBillingVersionCreateOptionalParams,
  ): Promise<DatabaseBillingVersionCreateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, serverName, databaseName, options },
      createOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/billing/servers/{serverName}/databases/{databaseName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.DatabaseBillingVersionResponse,
    },
    201: {
      bodyMapper: Mappers.DatabaseBillingVersionResponse,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.serverName1,
    Parameters.databaseName1,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
