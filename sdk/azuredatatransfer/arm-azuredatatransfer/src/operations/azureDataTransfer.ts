/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { AzureDataTransfer } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { Azuredatatransferrp } from "../azuredatatransferrp";
import {
  Schema,
  AzureDataTransferValidateSchemaOptionalParams,
  AzureDataTransferValidateSchemaResponse,
  ListApprovedSchemasRequest,
  AzureDataTransferListApprovedSchemasOptionalParams,
  AzureDataTransferListApprovedSchemasResponse
} from "../models";

/** Class containing AzureDataTransfer operations. */
export class AzureDataTransferImpl implements AzureDataTransfer {
  private readonly client: Azuredatatransferrp;

  /**
   * Initialize a new instance of the class AzureDataTransfer class.
   * @param client Reference to the service client
   */
  constructor(client: Azuredatatransferrp) {
    this.client = client;
  }

  /**
   * Validates a schema for Azure Data Transfer.
   * @param schema The schema to validate
   * @param options The options parameters.
   */
  validateSchema(
    schema: Schema,
    options?: AzureDataTransferValidateSchemaOptionalParams
  ): Promise<AzureDataTransferValidateSchemaResponse> {
    return this.client.sendOperationRequest(
      { schema, options },
      validateSchemaOperationSpec
    );
  }

  /**
   * Lists approved schemas for Azure Data Transfer.
   * @param pipeline The request to list approved schemas.
   * @param options The options parameters.
   */
  listApprovedSchemas(
    pipeline: ListApprovedSchemasRequest,
    options?: AzureDataTransferListApprovedSchemasOptionalParams
  ): Promise<AzureDataTransferListApprovedSchemasResponse> {
    return this.client.sendOperationRequest(
      { pipeline, options },
      listApprovedSchemasOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const validateSchemaOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.AzureDataTransfer/validateSchema",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ValidateSchemaResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.schema,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const listApprovedSchemasOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.AzureDataTransfer/listApprovedSchemas",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SchemasListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.pipeline,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
