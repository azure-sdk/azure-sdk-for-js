/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { ListPendingFlows } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { Azuredatatransferrp } from "../azuredatatransferrp";
import {
  PendingFlow,
  ListPendingFlowsListNextOptionalParams,
  ListPendingFlowsListOptionalParams,
  ListPendingFlowsListResponse,
  ListPendingFlowsListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ListPendingFlows operations. */
export class ListPendingFlowsImpl implements ListPendingFlows {
  private readonly client: Azuredatatransferrp;

  /**
   * Initialize a new instance of the class ListPendingFlows class.
   * @param client Reference to the service client
   */
  constructor(client: Azuredatatransferrp) {
    this.client = client;
  }

  /**
   * Lists all pending flows for a connection.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection that is to be requested.
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    connectionName: string,
    options?: ListPendingFlowsListOptionalParams
  ): PagedAsyncIterableIterator<PendingFlow> {
    const iter = this.listPagingAll(resourceGroupName, connectionName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(
          resourceGroupName,
          connectionName,
          options,
          settings
        );
      }
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    connectionName: string,
    options?: ListPendingFlowsListOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<PendingFlow[]> {
    let result: ListPendingFlowsListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(resourceGroupName, connectionName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        resourceGroupName,
        connectionName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    connectionName: string,
    options?: ListPendingFlowsListOptionalParams
  ): AsyncIterableIterator<PendingFlow> {
    for await (const page of this.listPagingPage(
      resourceGroupName,
      connectionName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists all pending flows for a connection.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection that is to be requested.
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    connectionName: string,
    options?: ListPendingFlowsListOptionalParams
  ): Promise<ListPendingFlowsListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, connectionName, options },
      listOperationSpec
    );
  }

  /**
   * ListNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection that is to be requested.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    connectionName: string,
    nextLink: string,
    options?: ListPendingFlowsListNextOptionalParams
  ): Promise<ListPendingFlowsListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, connectionName, nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/listPendingFlows",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.PendingFlowsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.connectionName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PendingFlowsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.connectionName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
