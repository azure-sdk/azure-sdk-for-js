/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { Flows } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { Azuredatatransferrp } from "../azuredatatransferrp";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  Flow,
  FlowsListByConnectionNextOptionalParams,
  FlowsListByConnectionOptionalParams,
  FlowsListByConnectionResponse,
  FlowsGetOptionalParams,
  FlowsGetResponse,
  FlowsCreateOrUpdateOptionalParams,
  FlowsCreateOrUpdateResponse,
  FlowsDeleteOptionalParams,
  FlowsDeleteResponse,
  FlowsPatch,
  FlowsUpdateOptionalParams,
  FlowsUpdateResponse,
  FlowsEnableOptionalParams,
  FlowsEnableResponse,
  FlowsDisableOptionalParams,
  FlowsDisableResponse,
  ResourceBody,
  FlowsLinkOptionalParams,
  FlowsLinkResponse,
  FlowsListByConnectionNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Flows operations. */
export class FlowsImpl implements Flows {
  private readonly client: Azuredatatransferrp;

  /**
   * Initialize a new instance of the class Flows class.
   * @param client Reference to the service client
   */
  constructor(client: Azuredatatransferrp) {
    this.client = client;
  }

  /**
   * Gets flows in a connection.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection that is to be requested.
   * @param options The options parameters.
   */
  public listByConnection(
    resourceGroupName: string,
    connectionName: string,
    options?: FlowsListByConnectionOptionalParams
  ): PagedAsyncIterableIterator<Flow> {
    const iter = this.listByConnectionPagingAll(
      resourceGroupName,
      connectionName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByConnectionPagingPage(
          resourceGroupName,
          connectionName,
          options,
          settings
        );
      }
    };
  }

  private async *listByConnectionPagingPage(
    resourceGroupName: string,
    connectionName: string,
    options?: FlowsListByConnectionOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Flow[]> {
    let result: FlowsListByConnectionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByConnection(
        resourceGroupName,
        connectionName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByConnectionNext(
        resourceGroupName,
        connectionName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByConnectionPagingAll(
    resourceGroupName: string,
    connectionName: string,
    options?: FlowsListByConnectionOptionalParams
  ): AsyncIterableIterator<Flow> {
    for await (const page of this.listByConnectionPagingPage(
      resourceGroupName,
      connectionName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets flow resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection that is to be requested.
   * @param flowName The name for the flow that is to be onboarded.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    connectionName: string,
    flowName: string,
    options?: FlowsGetOptionalParams
  ): Promise<FlowsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, connectionName, flowName, options },
      getOperationSpec
    );
  }

  /**
   * Creates or updates the flow resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection that is to be requested.
   * @param flowName The name for the flow that is to be onboarded.
   * @param flow Flow body
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    connectionName: string,
    flowName: string,
    flow: Flow,
    options?: FlowsCreateOrUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<FlowsCreateOrUpdateResponse>,
      FlowsCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<FlowsCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, connectionName, flowName, flow, options },
      spec: createOrUpdateOperationSpec
    });
    const poller = await createHttpPoller<
      FlowsCreateOrUpdateResponse,
      OperationState<FlowsCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Creates or updates the flow resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection that is to be requested.
   * @param flowName The name for the flow that is to be onboarded.
   * @param flow Flow body
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    connectionName: string,
    flowName: string,
    flow: Flow,
    options?: FlowsCreateOrUpdateOptionalParams
  ): Promise<FlowsCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      connectionName,
      flowName,
      flow,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Deletes the flow resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection that is to be requested.
   * @param flowName The name for the flow that is to be onboarded.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    connectionName: string,
    flowName: string,
    options?: FlowsDeleteOptionalParams
  ): Promise<
    SimplePollerLike<OperationState<FlowsDeleteResponse>, FlowsDeleteResponse>
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<FlowsDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, connectionName, flowName, options },
      spec: deleteOperationSpec
    });
    const poller = await createHttpPoller<
      FlowsDeleteResponse,
      OperationState<FlowsDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Deletes the flow resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection that is to be requested.
   * @param flowName The name for the flow that is to be onboarded.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    connectionName: string,
    flowName: string,
    options?: FlowsDeleteOptionalParams
  ): Promise<FlowsDeleteResponse> {
    const poller = await this.beginDelete(
      resourceGroupName,
      connectionName,
      flowName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Updates the flow resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection that is to be requested.
   * @param flowName The name for the flow that is to be onboarded.
   * @param flow Flow body
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    connectionName: string,
    flowName: string,
    flow: FlowsPatch,
    options?: FlowsUpdateOptionalParams
  ): Promise<
    SimplePollerLike<OperationState<FlowsUpdateResponse>, FlowsUpdateResponse>
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<FlowsUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, connectionName, flowName, flow, options },
      spec: updateOperationSpec
    });
    const poller = await createHttpPoller<
      FlowsUpdateResponse,
      OperationState<FlowsUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Updates the flow resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection that is to be requested.
   * @param flowName The name for the flow that is to be onboarded.
   * @param flow Flow body
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    connectionName: string,
    flowName: string,
    flow: FlowsPatch,
    options?: FlowsUpdateOptionalParams
  ): Promise<FlowsUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      connectionName,
      flowName,
      flow,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Enables the specified flow.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection that is to be requested.
   * @param flowName The name for the flow that is to be onboarded.
   * @param options The options parameters.
   */
  async beginEnable(
    resourceGroupName: string,
    connectionName: string,
    flowName: string,
    options?: FlowsEnableOptionalParams
  ): Promise<
    SimplePollerLike<OperationState<FlowsEnableResponse>, FlowsEnableResponse>
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<FlowsEnableResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, connectionName, flowName, options },
      spec: enableOperationSpec
    });
    const poller = await createHttpPoller<
      FlowsEnableResponse,
      OperationState<FlowsEnableResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Enables the specified flow.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection that is to be requested.
   * @param flowName The name for the flow that is to be onboarded.
   * @param options The options parameters.
   */
  async beginEnableAndWait(
    resourceGroupName: string,
    connectionName: string,
    flowName: string,
    options?: FlowsEnableOptionalParams
  ): Promise<FlowsEnableResponse> {
    const poller = await this.beginEnable(
      resourceGroupName,
      connectionName,
      flowName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Disables the specified flow
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection that is to be requested.
   * @param flowName The name for the flow that is to be onboarded.
   * @param options The options parameters.
   */
  async beginDisable(
    resourceGroupName: string,
    connectionName: string,
    flowName: string,
    options?: FlowsDisableOptionalParams
  ): Promise<
    SimplePollerLike<OperationState<FlowsDisableResponse>, FlowsDisableResponse>
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<FlowsDisableResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, connectionName, flowName, options },
      spec: disableOperationSpec
    });
    const poller = await createHttpPoller<
      FlowsDisableResponse,
      OperationState<FlowsDisableResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Disables the specified flow
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection that is to be requested.
   * @param flowName The name for the flow that is to be onboarded.
   * @param options The options parameters.
   */
  async beginDisableAndWait(
    resourceGroupName: string,
    connectionName: string,
    flowName: string,
    options?: FlowsDisableOptionalParams
  ): Promise<FlowsDisableResponse> {
    const poller = await this.beginDisable(
      resourceGroupName,
      connectionName,
      flowName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Links the specified flow.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection that is to be requested.
   * @param flowName The name for the flow that is to be onboarded.
   * @param flow Flow body
   * @param options The options parameters.
   */
  async beginLink(
    resourceGroupName: string,
    connectionName: string,
    flowName: string,
    flow: ResourceBody,
    options?: FlowsLinkOptionalParams
  ): Promise<
    SimplePollerLike<OperationState<FlowsLinkResponse>, FlowsLinkResponse>
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<FlowsLinkResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, connectionName, flowName, flow, options },
      spec: linkOperationSpec
    });
    const poller = await createHttpPoller<
      FlowsLinkResponse,
      OperationState<FlowsLinkResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Links the specified flow.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection that is to be requested.
   * @param flowName The name for the flow that is to be onboarded.
   * @param flow Flow body
   * @param options The options parameters.
   */
  async beginLinkAndWait(
    resourceGroupName: string,
    connectionName: string,
    flowName: string,
    flow: ResourceBody,
    options?: FlowsLinkOptionalParams
  ): Promise<FlowsLinkResponse> {
    const poller = await this.beginLink(
      resourceGroupName,
      connectionName,
      flowName,
      flow,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Gets flows in a connection.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection that is to be requested.
   * @param options The options parameters.
   */
  private _listByConnection(
    resourceGroupName: string,
    connectionName: string,
    options?: FlowsListByConnectionOptionalParams
  ): Promise<FlowsListByConnectionResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, connectionName, options },
      listByConnectionOperationSpec
    );
  }

  /**
   * ListByConnectionNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection that is to be requested.
   * @param nextLink The nextLink from the previous successful call to the ListByConnection method.
   * @param options The options parameters.
   */
  private _listByConnectionNext(
    resourceGroupName: string,
    connectionName: string,
    nextLink: string,
    options?: FlowsListByConnectionNextOptionalParams
  ): Promise<FlowsListByConnectionNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, connectionName, nextLink, options },
      listByConnectionNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows/{flowName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Flow
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.connectionName,
    Parameters.flowName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows/{flowName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Flow
    },
    201: {
      bodyMapper: Mappers.Flow
    },
    202: {
      bodyMapper: Mappers.Flow
    },
    204: {
      bodyMapper: Mappers.Flow
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.flow,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.connectionName,
    Parameters.flowName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows/{flowName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.FlowsDeleteHeaders
    },
    201: {
      headersMapper: Mappers.FlowsDeleteHeaders
    },
    202: {
      headersMapper: Mappers.FlowsDeleteHeaders
    },
    204: {
      headersMapper: Mappers.FlowsDeleteHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.connectionName,
    Parameters.flowName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows/{flowName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Flow
    },
    201: {
      bodyMapper: Mappers.Flow
    },
    202: {
      bodyMapper: Mappers.Flow
    },
    204: {
      bodyMapper: Mappers.Flow
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.flow1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.connectionName,
    Parameters.flowName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const enableOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows/{flowName}/enable",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Flow
    },
    201: {
      bodyMapper: Mappers.Flow
    },
    202: {
      bodyMapper: Mappers.Flow
    },
    204: {
      bodyMapper: Mappers.Flow
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.connectionName,
    Parameters.flowName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const disableOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows/{flowName}/disable",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Flow
    },
    201: {
      bodyMapper: Mappers.Flow
    },
    202: {
      bodyMapper: Mappers.Flow
    },
    204: {
      bodyMapper: Mappers.Flow
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.connectionName,
    Parameters.flowName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const linkOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows/{flowName}/link",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Flow
    },
    201: {
      bodyMapper: Mappers.Flow
    },
    202: {
      bodyMapper: Mappers.Flow
    },
    204: {
      bodyMapper: Mappers.Flow
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.flow2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.connectionName,
    Parameters.flowName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const listByConnectionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.FlowsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.connectionName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByConnectionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.FlowsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.connectionName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
