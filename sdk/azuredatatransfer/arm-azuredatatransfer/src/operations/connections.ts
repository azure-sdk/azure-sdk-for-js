/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { Connections } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { Azuredatatransferrp } from "../azuredatatransferrp.js";
import { SimplePollerLike, OperationState, createHttpPoller } from "@azure/core-lro";
import { createLroSpec } from "../lroImpl.js";
import {
  Connection,
  ConnectionsListBySubscriptionNextOptionalParams,
  ConnectionsListBySubscriptionOptionalParams,
  ConnectionsListBySubscriptionResponse,
  ConnectionsListByResourceGroupNextOptionalParams,
  ConnectionsListByResourceGroupOptionalParams,
  ConnectionsListByResourceGroupResponse,
  PendingConnection,
  ConnectionsListNextOptionalParams,
  ConnectionsListOptionalParams,
  ConnectionsListResponse,
  PendingFlow,
  ConnectionsListPendingFlowsListNextOptionalParams,
  ConnectionsListPendingFlowsListOptionalParams,
  ConnectionsListPendingFlowsListResponse,
  ConnectionsGetOptionalParams,
  ConnectionsGetResponse,
  ConnectionsCreateOrUpdateOptionalParams,
  ConnectionsCreateOrUpdateResponse,
  ConnectionsPatch,
  ConnectionsUpdateOptionalParams,
  ConnectionsUpdateResponse,
  ConnectionsDeleteOptionalParams,
  ConnectionsDeleteResponse,
  ResourceBody,
  ConnectionsLinkOptionalParams,
  ConnectionsLinkResponse,
  ConnectionsListBySubscriptionNextResponse,
  ConnectionsListByResourceGroupNextResponse,
  ConnectionsListNextResponse,
  ConnectionsListPendingFlowsListNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing Connections operations. */
export class ConnectionsImpl implements Connections {
  private readonly client: Azuredatatransferrp;

  /**
   * Initialize a new instance of the class Connections class.
   * @param client Reference to the service client
   */
  constructor(client: Azuredatatransferrp) {
    this.client = client;
  }

  /**
   * Gets connections in a subscription.
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: ConnectionsListBySubscriptionOptionalParams,
  ): PagedAsyncIterableIterator<Connection> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionPagingPage(options, settings);
      },
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: ConnectionsListBySubscriptionOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<Connection[]> {
    let result: ConnectionsListBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySubscription(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySubscriptionPagingAll(
    options?: ConnectionsListBySubscriptionOptionalParams,
  ): AsyncIterableIterator<Connection> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Gets connections in a resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: ConnectionsListByResourceGroupOptionalParams,
  ): PagedAsyncIterableIterator<Connection> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByResourceGroupPagingPage(resourceGroupName, options, settings);
      },
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: ConnectionsListByResourceGroupOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<Connection[]> {
    let result: ConnectionsListByResourceGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByResourceGroup(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByResourceGroupNext(resourceGroupName, continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: ConnectionsListByResourceGroupOptionalParams,
  ): AsyncIterableIterator<Connection> {
    for await (const page of this.listByResourceGroupPagingPage(resourceGroupName, options)) {
      yield* page;
    }
  }

  /**
   * Lists all pending connections for a connection.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection that is to be requested.
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    connectionName: string,
    options?: ConnectionsListOptionalParams,
  ): PagedAsyncIterableIterator<PendingConnection> {
    const iter = this.listPagingAll(resourceGroupName, connectionName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(resourceGroupName, connectionName, options, settings);
      },
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    connectionName: string,
    options?: ConnectionsListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<PendingConnection[]> {
    let result: ConnectionsListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(resourceGroupName, connectionName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(resourceGroupName, connectionName, continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    connectionName: string,
    options?: ConnectionsListOptionalParams,
  ): AsyncIterableIterator<PendingConnection> {
    for await (const page of this.listPagingPage(resourceGroupName, connectionName, options)) {
      yield* page;
    }
  }

  /**
   * Lists all pending flows for a connection.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection that is to be requested.
   * @param options The options parameters.
   */
  public listPendingFlowsList(
    resourceGroupName: string,
    connectionName: string,
    options?: ConnectionsListPendingFlowsListOptionalParams,
  ): PagedAsyncIterableIterator<PendingFlow> {
    const iter = this.listPendingFlowsListPagingAll(resourceGroupName, connectionName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPendingFlowsListPagingPage(
          resourceGroupName,
          connectionName,
          options,
          settings,
        );
      },
    };
  }

  private async *listPendingFlowsListPagingPage(
    resourceGroupName: string,
    connectionName: string,
    options?: ConnectionsListPendingFlowsListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<PendingFlow[]> {
    let result: ConnectionsListPendingFlowsListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listPendingFlowsList(resourceGroupName, connectionName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listPendingFlowsListNext(
        resourceGroupName,
        connectionName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPendingFlowsListPagingAll(
    resourceGroupName: string,
    connectionName: string,
    options?: ConnectionsListPendingFlowsListOptionalParams,
  ): AsyncIterableIterator<PendingFlow> {
    for await (const page of this.listPendingFlowsListPagingPage(
      resourceGroupName,
      connectionName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Gets connections in a subscription.
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: ConnectionsListBySubscriptionOptionalParams,
  ): Promise<ConnectionsListBySubscriptionResponse> {
    return this.client.sendOperationRequest({ options }, listBySubscriptionOperationSpec);
  }

  /**
   * Gets connections in a resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: ConnectionsListByResourceGroupOptionalParams,
  ): Promise<ConnectionsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec,
    );
  }

  /**
   * Gets connection resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection that is to be requested.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    connectionName: string,
    options?: ConnectionsGetOptionalParams,
  ): Promise<ConnectionsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, connectionName, options },
      getOperationSpec,
    );
  }

  /**
   * Creates or updates the connection resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection that is to be requested.
   * @param resource Connection body
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    connectionName: string,
    resource: Connection,
    options?: ConnectionsCreateOrUpdateOptionalParams,
  ): Promise<ConnectionsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, connectionName, resource, options },
      createOrUpdateOperationSpec,
    );
  }

  /**
   * Updates the connection resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection that is to be requested.
   * @param properties Connection body
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    connectionName: string,
    properties: ConnectionsPatch,
    options?: ConnectionsUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<OperationState<ConnectionsUpdateResponse>, ConnectionsUpdateResponse>
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ConnectionsUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, connectionName, properties, options },
      spec: updateOperationSpec,
    });
    const poller = await createHttpPoller<
      ConnectionsUpdateResponse,
      OperationState<ConnectionsUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Updates the connection resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection that is to be requested.
   * @param properties Connection body
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    connectionName: string,
    properties: ConnectionsPatch,
    options?: ConnectionsUpdateOptionalParams,
  ): Promise<ConnectionsUpdateResponse> {
    const poller = await this.beginUpdate(resourceGroupName, connectionName, properties, options);
    return poller.pollUntilDone();
  }

  /**
   * Deletes the connection resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection that is to be requested.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    connectionName: string,
    options?: ConnectionsDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<OperationState<ConnectionsDeleteResponse>, ConnectionsDeleteResponse>
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ConnectionsDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, connectionName, options },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<
      ConnectionsDeleteResponse,
      OperationState<ConnectionsDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Deletes the connection resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection that is to be requested.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    connectionName: string,
    options?: ConnectionsDeleteOptionalParams,
  ): Promise<ConnectionsDeleteResponse> {
    const poller = await this.beginDelete(resourceGroupName, connectionName, options);
    return poller.pollUntilDone();
  }

  /**
   * Links the connection to its pending connection.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection that is to be requested.
   * @param body Connection body
   * @param options The options parameters.
   */
  async beginLink(
    resourceGroupName: string,
    connectionName: string,
    body: ResourceBody,
    options?: ConnectionsLinkOptionalParams,
  ): Promise<SimplePollerLike<OperationState<ConnectionsLinkResponse>, ConnectionsLinkResponse>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ConnectionsLinkResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, connectionName, body, options },
      spec: linkOperationSpec,
    });
    const poller = await createHttpPoller<
      ConnectionsLinkResponse,
      OperationState<ConnectionsLinkResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Links the connection to its pending connection.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection that is to be requested.
   * @param body Connection body
   * @param options The options parameters.
   */
  async beginLinkAndWait(
    resourceGroupName: string,
    connectionName: string,
    body: ResourceBody,
    options?: ConnectionsLinkOptionalParams,
  ): Promise<ConnectionsLinkResponse> {
    const poller = await this.beginLink(resourceGroupName, connectionName, body, options);
    return poller.pollUntilDone();
  }

  /**
   * Lists all pending connections for a connection.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection that is to be requested.
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    connectionName: string,
    options?: ConnectionsListOptionalParams,
  ): Promise<ConnectionsListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, connectionName, options },
      listOperationSpec,
    );
  }

  /**
   * Lists all pending flows for a connection.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection that is to be requested.
   * @param options The options parameters.
   */
  private _listPendingFlowsList(
    resourceGroupName: string,
    connectionName: string,
    options?: ConnectionsListPendingFlowsListOptionalParams,
  ): Promise<ConnectionsListPendingFlowsListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, connectionName, options },
      listPendingFlowsListOperationSpec,
    );
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: ConnectionsListBySubscriptionNextOptionalParams,
  ): Promise<ConnectionsListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec,
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: ConnectionsListByResourceGroupNextOptionalParams,
  ): Promise<ConnectionsListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec,
    );
  }

  /**
   * ListNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection that is to be requested.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    connectionName: string,
    nextLink: string,
    options?: ConnectionsListNextOptionalParams,
  ): Promise<ConnectionsListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, connectionName, nextLink, options },
      listNextOperationSpec,
    );
  }

  /**
   * ListPendingFlowsListNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection that is to be requested.
   * @param nextLink The nextLink from the previous successful call to the ListPendingFlowsList method.
   * @param options The options parameters.
   */
  private _listPendingFlowsListNext(
    resourceGroupName: string,
    connectionName: string,
    nextLink: string,
    options?: ConnectionsListPendingFlowsListNextOptionalParams,
  ): Promise<ConnectionsListPendingFlowsListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, connectionName, nextLink, options },
      listPendingFlowsListNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.AzureDataTransfer/connections",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ConnectionListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ConnectionListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId, Parameters.resourceGroupName],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Connection,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.connectionName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Connection,
    },
    201: {
      bodyMapper: Mappers.Connection,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.resource,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.connectionName,
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Connection,
    },
    201: {
      bodyMapper: Mappers.Connection,
    },
    202: {
      bodyMapper: Mappers.Connection,
    },
    204: {
      bodyMapper: Mappers.Connection,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.properties,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.connectionName,
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.ConnectionsDeleteHeaders,
    },
    201: {
      headersMapper: Mappers.ConnectionsDeleteHeaders,
    },
    202: {
      headersMapper: Mappers.ConnectionsDeleteHeaders,
    },
    204: {
      headersMapper: Mappers.ConnectionsDeleteHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.connectionName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const linkOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/link",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Connection,
    },
    201: {
      bodyMapper: Mappers.Connection,
    },
    202: {
      bodyMapper: Mappers.Connection,
    },
    204: {
      bodyMapper: Mappers.Connection,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.connectionName,
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/listPendingConnections",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.PendingConnectionListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.connectionName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listPendingFlowsListOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/listPendingFlows",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.PendingFlowListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.connectionName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ConnectionListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ConnectionListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PendingConnectionListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.connectionName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listPendingFlowsListNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PendingFlowListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.connectionName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
