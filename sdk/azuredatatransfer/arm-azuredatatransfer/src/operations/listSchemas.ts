/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { ListSchemas } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { Azuredatatransferrp } from "../azuredatatransferrp.js";
import { Schema, ListSchemasListOptionalParams, ListSchemasListResponse } from "../models/index.js";

/** Class containing ListSchemas operations. */
export class ListSchemasImpl implements ListSchemas {
  private readonly client: Azuredatatransferrp;

  /**
   * Initialize a new instance of the class ListSchemas class.
   * @param client Reference to the service client
   */
  constructor(client: Azuredatatransferrp) {
    this.client = client;
  }

  /**
   * Lists the schemas for the specified connection in a pipeline.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param pipelineName The name for the pipeline that is to be requested.
   * @param schema Schema(s) to retrieve
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    pipelineName: string,
    schema: Schema,
    options?: ListSchemasListOptionalParams,
  ): Promise<ListSchemasListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, pipelineName, schema, options },
      listOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/pipelines/{pipelineName}/listSchemas",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SchemasListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.schema,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.pipelineName,
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
