/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { Pipelines } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { Azuredatatransferrp } from "../azuredatatransferrp";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  Pipeline,
  PipelinesListByResourceGroupNextOptionalParams,
  PipelinesListByResourceGroupOptionalParams,
  PipelinesListByResourceGroupResponse,
  PipelinesListBySubscriptionNextOptionalParams,
  PipelinesListBySubscriptionOptionalParams,
  PipelinesListBySubscriptionResponse,
  PipelinesGetOptionalParams,
  PipelinesGetResponse,
  PipelinesCreateOrUpdateOptionalParams,
  PipelinesCreateOrUpdateResponse,
  PipelinesDeleteOptionalParams,
  PipelinesPatch,
  PipelinesUpdateOptionalParams,
  PipelinesUpdateResponse,
  ResourceBody,
  PipelinesApproveConnectionOptionalParams,
  PipelinesApproveConnectionResponse,
  PipelinesRejectConnectionOptionalParams,
  PipelinesRejectConnectionResponse,
  PipelinesListByResourceGroupNextResponse,
  PipelinesListBySubscriptionNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Pipelines operations. */
export class PipelinesImpl implements Pipelines {
  private readonly client: Azuredatatransferrp;

  /**
   * Initialize a new instance of the class Pipelines class.
   * @param client Reference to the service client
   */
  constructor(client: Azuredatatransferrp) {
    this.client = client;
  }

  /**
   * Gets pipelines in a resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: PipelinesListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<Pipeline> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByResourceGroupPagingPage(
          resourceGroupName,
          options,
          settings
        );
      }
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: PipelinesListByResourceGroupOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Pipeline[]> {
    let result: PipelinesListByResourceGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByResourceGroup(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: PipelinesListByResourceGroupOptionalParams
  ): AsyncIterableIterator<Pipeline> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets pipelines in a subscription.
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: PipelinesListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<Pipeline> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionPagingPage(options, settings);
      }
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: PipelinesListBySubscriptionOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Pipeline[]> {
    let result: PipelinesListBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySubscription(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySubscriptionPagingAll(
    options?: PipelinesListBySubscriptionOptionalParams
  ): AsyncIterableIterator<Pipeline> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Gets pipeline resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param pipelineName The name for the pipeline that is to be requested.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    pipelineName: string,
    options?: PipelinesGetOptionalParams
  ): Promise<PipelinesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, pipelineName, options },
      getOperationSpec
    );
  }

  /**
   * Creates or updates the pipeline resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param pipelineName The name for the pipeline that is to be requested.
   * @param pipeline Pipeline body
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    pipelineName: string,
    pipeline: Pipeline,
    options?: PipelinesCreateOrUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<PipelinesCreateOrUpdateResponse>,
      PipelinesCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<PipelinesCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, pipelineName, pipeline, options },
      spec: createOrUpdateOperationSpec
    });
    const poller = await createHttpPoller<
      PipelinesCreateOrUpdateResponse,
      OperationState<PipelinesCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Creates or updates the pipeline resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param pipelineName The name for the pipeline that is to be requested.
   * @param pipeline Pipeline body
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    pipelineName: string,
    pipeline: Pipeline,
    options?: PipelinesCreateOrUpdateOptionalParams
  ): Promise<PipelinesCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      pipelineName,
      pipeline,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Deletes the pipeline resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param pipelineName The name for the pipeline that is to be requested.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    pipelineName: string,
    options?: PipelinesDeleteOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, pipelineName, options },
      spec: deleteOperationSpec
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Deletes the pipeline resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param pipelineName The name for the pipeline that is to be requested.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    pipelineName: string,
    options?: PipelinesDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      pipelineName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Updates the pipeline resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param pipelineName The name for the pipeline that is to be requested.
   * @param pipeline Pipeline body
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    pipelineName: string,
    pipeline: PipelinesPatch,
    options?: PipelinesUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<PipelinesUpdateResponse>,
      PipelinesUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<PipelinesUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, pipelineName, pipeline, options },
      spec: updateOperationSpec
    });
    const poller = await createHttpPoller<
      PipelinesUpdateResponse,
      OperationState<PipelinesUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Updates the pipeline resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param pipelineName The name for the pipeline that is to be requested.
   * @param pipeline Pipeline body
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    pipelineName: string,
    pipeline: PipelinesPatch,
    options?: PipelinesUpdateOptionalParams
  ): Promise<PipelinesUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      pipelineName,
      pipeline,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Approves the specified connection in a pipeline.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param pipelineName The name for the pipeline that is to be requested.
   * @param connection Connection body
   * @param options The options parameters.
   */
  async beginApproveConnection(
    resourceGroupName: string,
    pipelineName: string,
    connection: ResourceBody,
    options?: PipelinesApproveConnectionOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<PipelinesApproveConnectionResponse>,
      PipelinesApproveConnectionResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<PipelinesApproveConnectionResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, pipelineName, connection, options },
      spec: approveConnectionOperationSpec
    });
    const poller = await createHttpPoller<
      PipelinesApproveConnectionResponse,
      OperationState<PipelinesApproveConnectionResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Approves the specified connection in a pipeline.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param pipelineName The name for the pipeline that is to be requested.
   * @param connection Connection body
   * @param options The options parameters.
   */
  async beginApproveConnectionAndWait(
    resourceGroupName: string,
    pipelineName: string,
    connection: ResourceBody,
    options?: PipelinesApproveConnectionOptionalParams
  ): Promise<PipelinesApproveConnectionResponse> {
    const poller = await this.beginApproveConnection(
      resourceGroupName,
      pipelineName,
      connection,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Rejects the specified connection in a pipeline.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param pipelineName The name for the pipeline that is to be requested.
   * @param connection Connection body
   * @param options The options parameters.
   */
  async beginRejectConnection(
    resourceGroupName: string,
    pipelineName: string,
    connection: ResourceBody,
    options?: PipelinesRejectConnectionOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<PipelinesRejectConnectionResponse>,
      PipelinesRejectConnectionResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<PipelinesRejectConnectionResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, pipelineName, connection, options },
      spec: rejectConnectionOperationSpec
    });
    const poller = await createHttpPoller<
      PipelinesRejectConnectionResponse,
      OperationState<PipelinesRejectConnectionResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Rejects the specified connection in a pipeline.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param pipelineName The name for the pipeline that is to be requested.
   * @param connection Connection body
   * @param options The options parameters.
   */
  async beginRejectConnectionAndWait(
    resourceGroupName: string,
    pipelineName: string,
    connection: ResourceBody,
    options?: PipelinesRejectConnectionOptionalParams
  ): Promise<PipelinesRejectConnectionResponse> {
    const poller = await this.beginRejectConnection(
      resourceGroupName,
      pipelineName,
      connection,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Gets pipelines in a resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: PipelinesListByResourceGroupOptionalParams
  ): Promise<PipelinesListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec
    );
  }

  /**
   * Gets pipelines in a subscription.
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: PipelinesListBySubscriptionOptionalParams
  ): Promise<PipelinesListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: PipelinesListByResourceGroupNextOptionalParams
  ): Promise<PipelinesListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec
    );
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: PipelinesListBySubscriptionNextOptionalParams
  ): Promise<PipelinesListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/pipelines/{pipelineName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Pipeline
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.pipelineName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/pipelines/{pipelineName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Pipeline
    },
    201: {
      bodyMapper: Mappers.Pipeline
    },
    202: {
      bodyMapper: Mappers.Pipeline
    },
    204: {
      bodyMapper: Mappers.Pipeline
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.pipeline,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.pipelineName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/pipelines/{pipelineName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.pipelineName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/pipelines/{pipelineName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Pipeline
    },
    201: {
      bodyMapper: Mappers.Pipeline
    },
    202: {
      bodyMapper: Mappers.Pipeline
    },
    204: {
      bodyMapper: Mappers.Pipeline
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.pipeline1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.pipelineName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const approveConnectionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/pipelines/{pipelineName}/approveConnection",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Connection
    },
    201: {
      bodyMapper: Mappers.Connection
    },
    202: {
      bodyMapper: Mappers.Connection
    },
    204: {
      bodyMapper: Mappers.Connection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.connection2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.pipelineName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const rejectConnectionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/pipelines/{pipelineName}/rejectConnection",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Connection
    },
    201: {
      bodyMapper: Mappers.Connection
    },
    202: {
      bodyMapper: Mappers.Connection
    },
    204: {
      bodyMapper: Mappers.Connection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.connection2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.pipelineName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/pipelines",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PipelinesListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.AzureDataTransfer/pipelines",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PipelinesListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PipelinesListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PipelinesListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
