/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  Connection,
  ConnectionsListByResourceGroupOptionalParams,
  ConnectionsListBySubscriptionOptionalParams,
  ConnectionsGetOptionalParams,
  ConnectionsGetResponse,
  ConnectionsCreateOrUpdateOptionalParams,
  ConnectionsCreateOrUpdateResponse,
  ConnectionsDeleteOptionalParams,
  ConnectionsDeleteResponse,
  ConnectionsPatch,
  ConnectionsUpdateOptionalParams,
  ConnectionsUpdateResponse,
  ResourceBody,
  ConnectionsLinkOptionalParams,
  ConnectionsLinkResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Connections. */
export interface Connections {
  /**
   * Gets connections in a resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: ConnectionsListByResourceGroupOptionalParams,
  ): PagedAsyncIterableIterator<Connection>;
  /**
   * Gets connections in a subscription.
   * @param options The options parameters.
   */
  listBySubscription(
    options?: ConnectionsListBySubscriptionOptionalParams,
  ): PagedAsyncIterableIterator<Connection>;
  /**
   * Gets connection resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection that is to be requested.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    connectionName: string,
    options?: ConnectionsGetOptionalParams,
  ): Promise<ConnectionsGetResponse>;
  /**
   * Creates or updates the connection resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection that is to be requested.
   * @param connection Connection body
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    connectionName: string,
    connection: Connection,
    options?: ConnectionsCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ConnectionsCreateOrUpdateResponse>,
      ConnectionsCreateOrUpdateResponse
    >
  >;
  /**
   * Creates or updates the connection resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection that is to be requested.
   * @param connection Connection body
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    connectionName: string,
    connection: Connection,
    options?: ConnectionsCreateOrUpdateOptionalParams,
  ): Promise<ConnectionsCreateOrUpdateResponse>;
  /**
   * Deletes the connection resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection that is to be requested.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    connectionName: string,
    options?: ConnectionsDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<OperationState<ConnectionsDeleteResponse>, ConnectionsDeleteResponse>
  >;
  /**
   * Deletes the connection resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection that is to be requested.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    connectionName: string,
    options?: ConnectionsDeleteOptionalParams,
  ): Promise<ConnectionsDeleteResponse>;
  /**
   * Updates the connection resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection that is to be requested.
   * @param connection Connection body
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    connectionName: string,
    connection: ConnectionsPatch,
    options?: ConnectionsUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<OperationState<ConnectionsUpdateResponse>, ConnectionsUpdateResponse>
  >;
  /**
   * Updates the connection resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection that is to be requested.
   * @param connection Connection body
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    connectionName: string,
    connection: ConnectionsPatch,
    options?: ConnectionsUpdateOptionalParams,
  ): Promise<ConnectionsUpdateResponse>;
  /**
   * Links the connection to its pending connection.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection that is to be requested.
   * @param connection Connection body
   * @param options The options parameters.
   */
  beginLink(
    resourceGroupName: string,
    connectionName: string,
    connection: ResourceBody,
    options?: ConnectionsLinkOptionalParams,
  ): Promise<SimplePollerLike<OperationState<ConnectionsLinkResponse>, ConnectionsLinkResponse>>;
  /**
   * Links the connection to its pending connection.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection that is to be requested.
   * @param connection Connection body
   * @param options The options parameters.
   */
  beginLinkAndWait(
    resourceGroupName: string,
    connectionName: string,
    connection: ResourceBody,
    options?: ConnectionsLinkOptionalParams,
  ): Promise<ConnectionsLinkResponse>;
}
