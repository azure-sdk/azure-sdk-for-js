/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  Pipeline,
  PipelinesListByResourceGroupOptionalParams,
  PipelinesListBySubscriptionOptionalParams,
  PipelinesGetOptionalParams,
  PipelinesGetResponse,
  PipelinesCreateOrUpdateOptionalParams,
  PipelinesCreateOrUpdateResponse,
  PipelinesDeleteOptionalParams,
  PipelinesDeleteResponse,
  PipelinesPatch,
  PipelinesUpdateOptionalParams,
  PipelinesUpdateResponse,
  ResourceBody,
  PipelinesApproveConnectionOptionalParams,
  PipelinesApproveConnectionResponse,
  PipelinesRejectConnectionOptionalParams,
  PipelinesRejectConnectionResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Pipelines. */
export interface Pipelines {
  /**
   * Gets pipelines in a resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: PipelinesListByResourceGroupOptionalParams,
  ): PagedAsyncIterableIterator<Pipeline>;
  /**
   * Gets pipelines in a subscription.
   * @param options The options parameters.
   */
  listBySubscription(
    options?: PipelinesListBySubscriptionOptionalParams,
  ): PagedAsyncIterableIterator<Pipeline>;
  /**
   * Gets pipeline resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param pipelineName The name for the pipeline that is to be requested.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    pipelineName: string,
    options?: PipelinesGetOptionalParams,
  ): Promise<PipelinesGetResponse>;
  /**
   * Creates or updates the pipeline resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param pipelineName The name for the pipeline that is to be requested.
   * @param pipeline Pipeline body
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    pipelineName: string,
    pipeline: Pipeline,
    options?: PipelinesCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<PipelinesCreateOrUpdateResponse>,
      PipelinesCreateOrUpdateResponse
    >
  >;
  /**
   * Creates or updates the pipeline resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param pipelineName The name for the pipeline that is to be requested.
   * @param pipeline Pipeline body
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    pipelineName: string,
    pipeline: Pipeline,
    options?: PipelinesCreateOrUpdateOptionalParams,
  ): Promise<PipelinesCreateOrUpdateResponse>;
  /**
   * Deletes the pipeline resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param pipelineName The name for the pipeline that is to be requested.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    pipelineName: string,
    options?: PipelinesDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<PipelinesDeleteResponse>,
      PipelinesDeleteResponse
    >
  >;
  /**
   * Deletes the pipeline resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param pipelineName The name for the pipeline that is to be requested.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    pipelineName: string,
    options?: PipelinesDeleteOptionalParams,
  ): Promise<PipelinesDeleteResponse>;
  /**
   * Updates the pipeline resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param pipelineName The name for the pipeline that is to be requested.
   * @param pipeline Pipeline body
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    pipelineName: string,
    pipeline: PipelinesPatch,
    options?: PipelinesUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<PipelinesUpdateResponse>,
      PipelinesUpdateResponse
    >
  >;
  /**
   * Updates the pipeline resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param pipelineName The name for the pipeline that is to be requested.
   * @param pipeline Pipeline body
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    pipelineName: string,
    pipeline: PipelinesPatch,
    options?: PipelinesUpdateOptionalParams,
  ): Promise<PipelinesUpdateResponse>;
  /**
   * Approves the specified connection in a pipeline.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param pipelineName The name for the pipeline that is to be requested.
   * @param connection Connection body
   * @param options The options parameters.
   */
  beginApproveConnection(
    resourceGroupName: string,
    pipelineName: string,
    connection: ResourceBody,
    options?: PipelinesApproveConnectionOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<PipelinesApproveConnectionResponse>,
      PipelinesApproveConnectionResponse
    >
  >;
  /**
   * Approves the specified connection in a pipeline.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param pipelineName The name for the pipeline that is to be requested.
   * @param connection Connection body
   * @param options The options parameters.
   */
  beginApproveConnectionAndWait(
    resourceGroupName: string,
    pipelineName: string,
    connection: ResourceBody,
    options?: PipelinesApproveConnectionOptionalParams,
  ): Promise<PipelinesApproveConnectionResponse>;
  /**
   * Rejects the specified connection in a pipeline.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param pipelineName The name for the pipeline that is to be requested.
   * @param connection Connection body
   * @param options The options parameters.
   */
  beginRejectConnection(
    resourceGroupName: string,
    pipelineName: string,
    connection: ResourceBody,
    options?: PipelinesRejectConnectionOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<PipelinesRejectConnectionResponse>,
      PipelinesRejectConnectionResponse
    >
  >;
  /**
   * Rejects the specified connection in a pipeline.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param pipelineName The name for the pipeline that is to be requested.
   * @param connection Connection body
   * @param options The options parameters.
   */
  beginRejectConnectionAndWait(
    resourceGroupName: string,
    pipelineName: string,
    connection: ResourceBody,
    options?: PipelinesRejectConnectionOptionalParams,
  ): Promise<PipelinesRejectConnectionResponse>;
}
