/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  Flow,
  FlowsListByConnectionOptionalParams,
  FlowsGetOptionalParams,
  FlowsGetResponse,
  FlowsCreateOrUpdateOptionalParams,
  FlowsCreateOrUpdateResponse,
  FlowsDeleteOptionalParams,
  FlowsDeleteResponse,
  FlowsPatch,
  FlowsUpdateOptionalParams,
  FlowsUpdateResponse,
  FlowsEnableOptionalParams,
  FlowsEnableResponse,
  FlowsDisableOptionalParams,
  FlowsDisableResponse,
  ResourceBody,
  FlowsLinkOptionalParams,
  FlowsLinkResponse,
  SetStreamPassphrase,
  FlowsSetPassphraseOptionalParams,
  FlowsSetPassphraseResponse,
  FlowsGeneratePassphraseOptionalParams,
  FlowsGeneratePassphraseResponse,
  FlowsGetSourceAddressesOptionalParams,
  FlowsGetSourceAddressesResponse,
  SetSourceAddresses,
  FlowsSetSourceAddressesOptionalParams,
  FlowsSetSourceAddressesResponse,
  FlowsGetDestinationEndpointsOptionalParams,
  FlowsGetDestinationEndpointsResponse,
  SetDestinationEndpoints,
  FlowsSetDestinationEndpointsOptionalParams,
  FlowsSetDestinationEndpointsResponse,
  FlowsGetDestinationEndpointPortsOptionalParams,
  FlowsGetDestinationEndpointPortsResponse,
  SetDestinationEndpointPorts,
  FlowsSetDestinationEndpointPortsOptionalParams,
  FlowsSetDestinationEndpointPortsResponse,
  FlowsGetStreamConnectionStringOptionalParams,
  FlowsGetStreamConnectionStringResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Flows. */
export interface Flows {
  /**
   * Gets flows in a connection.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection to perform the operation on.
   * @param options The options parameters.
   */
  listByConnection(
    resourceGroupName: string,
    connectionName: string,
    options?: FlowsListByConnectionOptionalParams,
  ): PagedAsyncIterableIterator<Flow>;
  /**
   * Gets flow resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection to perform the operation on.
   * @param flowName The name for the flow to perform the operation on.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    connectionName: string,
    flowName: string,
    options?: FlowsGetOptionalParams,
  ): Promise<FlowsGetResponse>;
  /**
   * Creates or updates the flow resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection to perform the operation on.
   * @param flowName The name for the flow to perform the operation on.
   * @param flow Flow body
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    connectionName: string,
    flowName: string,
    flow: Flow,
    options?: FlowsCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<OperationState<FlowsCreateOrUpdateResponse>, FlowsCreateOrUpdateResponse>
  >;
  /**
   * Creates or updates the flow resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection to perform the operation on.
   * @param flowName The name for the flow to perform the operation on.
   * @param flow Flow body
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    connectionName: string,
    flowName: string,
    flow: Flow,
    options?: FlowsCreateOrUpdateOptionalParams,
  ): Promise<FlowsCreateOrUpdateResponse>;
  /**
   * Deletes the flow resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection to perform the operation on.
   * @param flowName The name for the flow to perform the operation on.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    connectionName: string,
    flowName: string,
    options?: FlowsDeleteOptionalParams,
  ): Promise<SimplePollerLike<OperationState<FlowsDeleteResponse>, FlowsDeleteResponse>>;
  /**
   * Deletes the flow resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection to perform the operation on.
   * @param flowName The name for the flow to perform the operation on.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    connectionName: string,
    flowName: string,
    options?: FlowsDeleteOptionalParams,
  ): Promise<FlowsDeleteResponse>;
  /**
   * Updates the flow resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection to perform the operation on.
   * @param flowName The name for the flow to perform the operation on.
   * @param flow Flow body
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    connectionName: string,
    flowName: string,
    flow: FlowsPatch,
    options?: FlowsUpdateOptionalParams,
  ): Promise<SimplePollerLike<OperationState<FlowsUpdateResponse>, FlowsUpdateResponse>>;
  /**
   * Updates the flow resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection to perform the operation on.
   * @param flowName The name for the flow to perform the operation on.
   * @param flow Flow body
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    connectionName: string,
    flowName: string,
    flow: FlowsPatch,
    options?: FlowsUpdateOptionalParams,
  ): Promise<FlowsUpdateResponse>;
  /**
   * Enables the specified flow.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection to perform the operation on.
   * @param flowName The name for the flow to perform the operation on.
   * @param options The options parameters.
   */
  beginEnable(
    resourceGroupName: string,
    connectionName: string,
    flowName: string,
    options?: FlowsEnableOptionalParams,
  ): Promise<SimplePollerLike<OperationState<FlowsEnableResponse>, FlowsEnableResponse>>;
  /**
   * Enables the specified flow.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection to perform the operation on.
   * @param flowName The name for the flow to perform the operation on.
   * @param options The options parameters.
   */
  beginEnableAndWait(
    resourceGroupName: string,
    connectionName: string,
    flowName: string,
    options?: FlowsEnableOptionalParams,
  ): Promise<FlowsEnableResponse>;
  /**
   * Disables the specified flow
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection to perform the operation on.
   * @param flowName The name for the flow to perform the operation on.
   * @param options The options parameters.
   */
  beginDisable(
    resourceGroupName: string,
    connectionName: string,
    flowName: string,
    options?: FlowsDisableOptionalParams,
  ): Promise<SimplePollerLike<OperationState<FlowsDisableResponse>, FlowsDisableResponse>>;
  /**
   * Disables the specified flow
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection to perform the operation on.
   * @param flowName The name for the flow to perform the operation on.
   * @param options The options parameters.
   */
  beginDisableAndWait(
    resourceGroupName: string,
    connectionName: string,
    flowName: string,
    options?: FlowsDisableOptionalParams,
  ): Promise<FlowsDisableResponse>;
  /**
   * Links the specified flow.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection to perform the operation on.
   * @param flowName The name for the flow to perform the operation on.
   * @param flow Flow body
   * @param options The options parameters.
   */
  beginLink(
    resourceGroupName: string,
    connectionName: string,
    flowName: string,
    flow: ResourceBody,
    options?: FlowsLinkOptionalParams,
  ): Promise<SimplePollerLike<OperationState<FlowsLinkResponse>, FlowsLinkResponse>>;
  /**
   * Links the specified flow.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection to perform the operation on.
   * @param flowName The name for the flow to perform the operation on.
   * @param flow Flow body
   * @param options The options parameters.
   */
  beginLinkAndWait(
    resourceGroupName: string,
    connectionName: string,
    flowName: string,
    flow: ResourceBody,
    options?: FlowsLinkOptionalParams,
  ): Promise<FlowsLinkResponse>;
  /**
   * Sets the passphrase of the specified flow.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection to perform the operation on.
   * @param flowName The name for the flow to perform the operation on.
   * @param passphrase Passphrase to set
   * @param options The options parameters.
   */
  beginSetPassphrase(
    resourceGroupName: string,
    connectionName: string,
    flowName: string,
    passphrase: SetStreamPassphrase,
    options?: FlowsSetPassphraseOptionalParams,
  ): Promise<
    SimplePollerLike<OperationState<FlowsSetPassphraseResponse>, FlowsSetPassphraseResponse>
  >;
  /**
   * Sets the passphrase of the specified flow.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection to perform the operation on.
   * @param flowName The name for the flow to perform the operation on.
   * @param passphrase Passphrase to set
   * @param options The options parameters.
   */
  beginSetPassphraseAndWait(
    resourceGroupName: string,
    connectionName: string,
    flowName: string,
    passphrase: SetStreamPassphrase,
    options?: FlowsSetPassphraseOptionalParams,
  ): Promise<FlowsSetPassphraseResponse>;
  /**
   * Generate a compliant passphrase for the specified flow.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection to perform the operation on.
   * @param flowName The name for the flow to perform the operation on.
   * @param options The options parameters.
   */
  beginGeneratePassphrase(
    resourceGroupName: string,
    connectionName: string,
    flowName: string,
    options?: FlowsGeneratePassphraseOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<FlowsGeneratePassphraseResponse>,
      FlowsGeneratePassphraseResponse
    >
  >;
  /**
   * Generate a compliant passphrase for the specified flow.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection to perform the operation on.
   * @param flowName The name for the flow to perform the operation on.
   * @param options The options parameters.
   */
  beginGeneratePassphraseAndWait(
    resourceGroupName: string,
    connectionName: string,
    flowName: string,
    options?: FlowsGeneratePassphraseOptionalParams,
  ): Promise<FlowsGeneratePassphraseResponse>;
  /**
   * Get the source addresses for the specified flow.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection to perform the operation on.
   * @param flowName The name for the flow to perform the operation on.
   * @param options The options parameters.
   */
  getSourceAddresses(
    resourceGroupName: string,
    connectionName: string,
    flowName: string,
    options?: FlowsGetSourceAddressesOptionalParams,
  ): Promise<FlowsGetSourceAddressesResponse>;
  /**
   * Set the source addresses for the specified flow.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection to perform the operation on.
   * @param flowName The name for the flow to perform the operation on.
   * @param sourceAddresses Source addresses wanted
   * @param options The options parameters.
   */
  beginSetSourceAddresses(
    resourceGroupName: string,
    connectionName: string,
    flowName: string,
    sourceAddresses: SetSourceAddresses,
    options?: FlowsSetSourceAddressesOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<FlowsSetSourceAddressesResponse>,
      FlowsSetSourceAddressesResponse
    >
  >;
  /**
   * Set the source addresses for the specified flow.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection to perform the operation on.
   * @param flowName The name for the flow to perform the operation on.
   * @param sourceAddresses Source addresses wanted
   * @param options The options parameters.
   */
  beginSetSourceAddressesAndWait(
    resourceGroupName: string,
    connectionName: string,
    flowName: string,
    sourceAddresses: SetSourceAddresses,
    options?: FlowsSetSourceAddressesOptionalParams,
  ): Promise<FlowsSetSourceAddressesResponse>;
  /**
   * Get the destination endpoints for the specified flow.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection to perform the operation on.
   * @param flowName The name for the flow to perform the operation on.
   * @param options The options parameters.
   */
  getDestinationEndpoints(
    resourceGroupName: string,
    connectionName: string,
    flowName: string,
    options?: FlowsGetDestinationEndpointsOptionalParams,
  ): Promise<FlowsGetDestinationEndpointsResponse>;
  /**
   * Set the destination endpoints for the specified flow.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection to perform the operation on.
   * @param flowName The name for the flow to perform the operation on.
   * @param streamDestinationEndpoints Destination endpoints wanted
   * @param options The options parameters.
   */
  beginSetDestinationEndpoints(
    resourceGroupName: string,
    connectionName: string,
    flowName: string,
    streamDestinationEndpoints: SetDestinationEndpoints,
    options?: FlowsSetDestinationEndpointsOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<FlowsSetDestinationEndpointsResponse>,
      FlowsSetDestinationEndpointsResponse
    >
  >;
  /**
   * Set the destination endpoints for the specified flow.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection to perform the operation on.
   * @param flowName The name for the flow to perform the operation on.
   * @param streamDestinationEndpoints Destination endpoints wanted
   * @param options The options parameters.
   */
  beginSetDestinationEndpointsAndWait(
    resourceGroupName: string,
    connectionName: string,
    flowName: string,
    streamDestinationEndpoints: SetDestinationEndpoints,
    options?: FlowsSetDestinationEndpointsOptionalParams,
  ): Promise<FlowsSetDestinationEndpointsResponse>;
  /**
   * Get the destination endpoint ports for the specified flow.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection to perform the operation on.
   * @param flowName The name for the flow to perform the operation on.
   * @param options The options parameters.
   */
  getDestinationEndpointPorts(
    resourceGroupName: string,
    connectionName: string,
    flowName: string,
    options?: FlowsGetDestinationEndpointPortsOptionalParams,
  ): Promise<FlowsGetDestinationEndpointPortsResponse>;
  /**
   * Set the destination endpoint ports for the specified flow.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection to perform the operation on.
   * @param flowName The name for the flow to perform the operation on.
   * @param streamDestinationEndpointPorts The destination endpoint ports wanted
   * @param options The options parameters.
   */
  beginSetDestinationEndpointPorts(
    resourceGroupName: string,
    connectionName: string,
    flowName: string,
    streamDestinationEndpointPorts: SetDestinationEndpointPorts,
    options?: FlowsSetDestinationEndpointPortsOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<FlowsSetDestinationEndpointPortsResponse>,
      FlowsSetDestinationEndpointPortsResponse
    >
  >;
  /**
   * Set the destination endpoint ports for the specified flow.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection to perform the operation on.
   * @param flowName The name for the flow to perform the operation on.
   * @param streamDestinationEndpointPorts The destination endpoint ports wanted
   * @param options The options parameters.
   */
  beginSetDestinationEndpointPortsAndWait(
    resourceGroupName: string,
    connectionName: string,
    flowName: string,
    streamDestinationEndpointPorts: SetDestinationEndpointPorts,
    options?: FlowsSetDestinationEndpointPortsOptionalParams,
  ): Promise<FlowsSetDestinationEndpointPortsResponse>;
  /**
   * Get the connection string for the specified flow.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection to perform the operation on.
   * @param flowName The name for the flow to perform the operation on.
   * @param options The options parameters.
   */
  getStreamConnectionString(
    resourceGroupName: string,
    connectionName: string,
    flowName: string,
    options?: FlowsGetStreamConnectionStringOptionalParams,
  ): Promise<FlowsGetStreamConnectionStringResponse>;
}
