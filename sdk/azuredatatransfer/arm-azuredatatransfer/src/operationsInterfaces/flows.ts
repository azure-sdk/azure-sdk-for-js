/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  Flow,
  FlowsListByConnectionOptionalParams,
  FlowsGetOptionalParams,
  FlowsGetResponse,
  FlowsCreateOrUpdateOptionalParams,
  FlowsCreateOrUpdateResponse,
  FlowsDeleteOptionalParams,
  FlowsPatch,
  FlowsUpdateOptionalParams,
  FlowsUpdateResponse,
  FlowsEnableOptionalParams,
  FlowsEnableResponse,
  FlowsDisableOptionalParams,
  FlowsDisableResponse,
  ResourceBody,
  FlowsLinkOptionalParams,
  FlowsLinkResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Flows. */
export interface Flows {
  /**
   * Gets flows in a connection.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection that is to be requested.
   * @param options The options parameters.
   */
  listByConnection(
    resourceGroupName: string,
    connectionName: string,
    options?: FlowsListByConnectionOptionalParams
  ): PagedAsyncIterableIterator<Flow>;
  /**
   * Gets flow resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection that is to be requested.
   * @param flowName The name for the flow that is to be onboarded.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    connectionName: string,
    flowName: string,
    options?: FlowsGetOptionalParams
  ): Promise<FlowsGetResponse>;
  /**
   * Creates or updates the flow resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection that is to be requested.
   * @param flowName The name for the flow that is to be onboarded.
   * @param flow Flow body
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    connectionName: string,
    flowName: string,
    flow: Flow,
    options?: FlowsCreateOrUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<FlowsCreateOrUpdateResponse>,
      FlowsCreateOrUpdateResponse
    >
  >;
  /**
   * Creates or updates the flow resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection that is to be requested.
   * @param flowName The name for the flow that is to be onboarded.
   * @param flow Flow body
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    connectionName: string,
    flowName: string,
    flow: Flow,
    options?: FlowsCreateOrUpdateOptionalParams
  ): Promise<FlowsCreateOrUpdateResponse>;
  /**
   * Deletes the flow resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection that is to be requested.
   * @param flowName The name for the flow that is to be onboarded.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    connectionName: string,
    flowName: string,
    options?: FlowsDeleteOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Deletes the flow resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection that is to be requested.
   * @param flowName The name for the flow that is to be onboarded.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    connectionName: string,
    flowName: string,
    options?: FlowsDeleteOptionalParams
  ): Promise<void>;
  /**
   * Updates the flow resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection that is to be requested.
   * @param flowName The name for the flow that is to be onboarded.
   * @param flow Flow body
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    connectionName: string,
    flowName: string,
    flow: FlowsPatch,
    options?: FlowsUpdateOptionalParams
  ): Promise<
    SimplePollerLike<OperationState<FlowsUpdateResponse>, FlowsUpdateResponse>
  >;
  /**
   * Updates the flow resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection that is to be requested.
   * @param flowName The name for the flow that is to be onboarded.
   * @param flow Flow body
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    connectionName: string,
    flowName: string,
    flow: FlowsPatch,
    options?: FlowsUpdateOptionalParams
  ): Promise<FlowsUpdateResponse>;
  /**
   * Enables the specified flow.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection that is to be requested.
   * @param flowName The name for the flow that is to be onboarded.
   * @param options The options parameters.
   */
  beginEnable(
    resourceGroupName: string,
    connectionName: string,
    flowName: string,
    options?: FlowsEnableOptionalParams
  ): Promise<
    SimplePollerLike<OperationState<FlowsEnableResponse>, FlowsEnableResponse>
  >;
  /**
   * Enables the specified flow.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection that is to be requested.
   * @param flowName The name for the flow that is to be onboarded.
   * @param options The options parameters.
   */
  beginEnableAndWait(
    resourceGroupName: string,
    connectionName: string,
    flowName: string,
    options?: FlowsEnableOptionalParams
  ): Promise<FlowsEnableResponse>;
  /**
   * Disables the specified flow
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection that is to be requested.
   * @param flowName The name for the flow that is to be onboarded.
   * @param options The options parameters.
   */
  beginDisable(
    resourceGroupName: string,
    connectionName: string,
    flowName: string,
    options?: FlowsDisableOptionalParams
  ): Promise<
    SimplePollerLike<OperationState<FlowsDisableResponse>, FlowsDisableResponse>
  >;
  /**
   * Disables the specified flow
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection that is to be requested.
   * @param flowName The name for the flow that is to be onboarded.
   * @param options The options parameters.
   */
  beginDisableAndWait(
    resourceGroupName: string,
    connectionName: string,
    flowName: string,
    options?: FlowsDisableOptionalParams
  ): Promise<FlowsDisableResponse>;
  /**
   * Links the specified flow.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection that is to be requested.
   * @param flowName The name for the flow that is to be onboarded.
   * @param flow Flow body
   * @param options The options parameters.
   */
  beginLink(
    resourceGroupName: string,
    connectionName: string,
    flowName: string,
    flow: ResourceBody,
    options?: FlowsLinkOptionalParams
  ): Promise<
    SimplePollerLike<OperationState<FlowsLinkResponse>, FlowsLinkResponse>
  >;
  /**
   * Links the specified flow.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectionName The name for the connection that is to be requested.
   * @param flowName The name for the flow that is to be onboarded.
   * @param flow Flow body
   * @param options The options parameters.
   */
  beginLinkAndWait(
    resourceGroupName: string,
    connectionName: string,
    flowName: string,
    flow: ResourceBody,
    options?: FlowsLinkOptionalParams
  ): Promise<FlowsLinkResponse>;
}
