/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter,
} from "@azure/core-client";
import {
  Schema as SchemaMapper,
  ListApprovedSchemasRequest as ListApprovedSchemasRequestMapper,
  Flow as FlowMapper,
  FlowsPatch as FlowsPatchMapper,
  ResourceBody as ResourceBodyMapper,
  SetStreamPassphrase as SetStreamPassphraseMapper,
  SetSourceAddresses as SetSourceAddressesMapper,
  SetDestinationEndpoints as SetDestinationEndpointsMapper,
  SetDestinationEndpointPorts as SetDestinationEndpointPortsMapper,
  Connection as ConnectionMapper,
  ConnectionsPatch as ConnectionsPatchMapper,
  Pipeline as PipelineMapper,
  PipelinesPatch as PipelinesPatchMapper,
  Action as ActionMapper,
  ConnectionIdList as ConnectionIdListMapper,
} from "../models/mappers.js";

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String",
    },
  },
};

export const schema: OperationParameter = {
  parameterPath: "schema",
  mapper: SchemaMapper,
};

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String",
    },
  },
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2025-04-11-preview",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String",
    },
  },
};

export const pipeline: OperationParameter = {
  parameterPath: "pipeline",
  mapper: ListApprovedSchemasRequestMapper,
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "Uuid",
    },
  },
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    constraints: {
      MaxLength: 90,
      MinLength: 1,
    },
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const connectionName: OperationURLParameter = {
  parameterPath: "connectionName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9-]{3,64}$"),
      MaxLength: 64,
      MinLength: 3,
    },
    serializedName: "connectionName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const flowName: OperationURLParameter = {
  parameterPath: "flowName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9-]{3,64}$"),
      MaxLength: 64,
      MinLength: 3,
    },
    serializedName: "flowName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const flow: OperationParameter = {
  parameterPath: "flow",
  mapper: FlowMapper,
};

export const flow1: OperationParameter = {
  parameterPath: "flow",
  mapper: FlowsPatchMapper,
};

export const flow2: OperationParameter = {
  parameterPath: "flow",
  mapper: ResourceBodyMapper,
};

export const passphrase: OperationParameter = {
  parameterPath: "passphrase",
  mapper: SetStreamPassphraseMapper,
};

export const sourceAddresses: OperationParameter = {
  parameterPath: "sourceAddresses",
  mapper: SetSourceAddressesMapper,
};

export const streamDestinationEndpoints: OperationParameter = {
  parameterPath: "streamDestinationEndpoints",
  mapper: SetDestinationEndpointsMapper,
};

export const streamDestinationEndpointPorts: OperationParameter = {
  parameterPath: "streamDestinationEndpointPorts",
  mapper: SetDestinationEndpointPortsMapper,
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const connection: OperationParameter = {
  parameterPath: "connection",
  mapper: ConnectionMapper,
};

export const connection1: OperationParameter = {
  parameterPath: "connection",
  mapper: ConnectionsPatchMapper,
};

export const connection2: OperationParameter = {
  parameterPath: "connection",
  mapper: ResourceBodyMapper,
};

export const pipelineName: OperationURLParameter = {
  parameterPath: "pipelineName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9-]{3,64}$"),
      MaxLength: 64,
      MinLength: 3,
    },
    serializedName: "pipelineName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const pipeline1: OperationParameter = {
  parameterPath: "pipeline",
  mapper: PipelineMapper,
};

export const pipeline2: OperationParameter = {
  parameterPath: "pipeline",
  mapper: PipelinesPatchMapper,
};

export const action: OperationParameter = {
  parameterPath: "action",
  mapper: ActionMapper,
};

export const connections: OperationParameter = {
  parameterPath: ["options", "connections"],
  mapper: ConnectionIdListMapper,
};
