/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter,
} from "@azure/core-client";
import {
  ListApprovedSchemasRequest as ListApprovedSchemasRequestMapper,
  Schema as SchemaMapper,
  Connection as ConnectionMapper,
  ConnectionsPatch as ConnectionsPatchMapper,
  ResourceBody as ResourceBodyMapper,
  Pipeline as PipelineMapper,
  PipelinesPatch as PipelinesPatchMapper,
  Action as ActionMapper,
  ConnectionIdList as ConnectionIdListMapper,
  Flow as FlowMapper,
  FlowsPatch as FlowsPatchMapper,
  SetDestinationEndpointPorts as SetDestinationEndpointPortsMapper,
  SetDestinationEndpoints as SetDestinationEndpointsMapper,
  SetStreamPassphrase as SetStreamPassphraseMapper,
  SetSourceAddresses as SetSourceAddressesMapper,
} from "../models/mappers.js";

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String",
    },
  },
};

export const body: OperationParameter = {
  parameterPath: "body",
  mapper: ListApprovedSchemasRequestMapper,
};

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String",
    },
  },
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2025-04-11-preview",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String",
    },
  },
};

export const body1: OperationParameter = {
  parameterPath: "body",
  mapper: SchemaMapper,
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "Uuid",
    },
  },
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    constraints: {
      MaxLength: 90,
      MinLength: 1,
    },
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const connectionName: OperationURLParameter = {
  parameterPath: "connectionName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9-]{3,64}$"),
      MaxLength: 64,
      MinLength: 3,
    },
    serializedName: "connectionName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource: OperationParameter = {
  parameterPath: "resource",
  mapper: ConnectionMapper,
};

export const properties: OperationParameter = {
  parameterPath: "properties",
  mapper: ConnectionsPatchMapper,
};

export const body2: OperationParameter = {
  parameterPath: "body",
  mapper: ResourceBodyMapper,
};

export const pipelineName: OperationURLParameter = {
  parameterPath: "pipelineName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9-]{3,64}$"),
      MaxLength: 64,
      MinLength: 3,
    },
    serializedName: "pipelineName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource1: OperationParameter = {
  parameterPath: "resource",
  mapper: PipelineMapper,
};

export const properties1: OperationParameter = {
  parameterPath: "properties",
  mapper: PipelinesPatchMapper,
};

export const body3: OperationParameter = {
  parameterPath: "body",
  mapper: ActionMapper,
};

export const connections: OperationParameter = {
  parameterPath: ["options", "connections"],
  mapper: ConnectionIdListMapper,
};

export const flowName: OperationURLParameter = {
  parameterPath: "flowName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9-]{3,64}$"),
      MaxLength: 64,
      MinLength: 3,
    },
    serializedName: "flowName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource2: OperationParameter = {
  parameterPath: "resource",
  mapper: FlowMapper,
};

export const properties2: OperationParameter = {
  parameterPath: "properties",
  mapper: FlowsPatchMapper,
};

export const body4: OperationParameter = {
  parameterPath: "body",
  mapper: SetDestinationEndpointPortsMapper,
};

export const body5: OperationParameter = {
  parameterPath: "body",
  mapper: SetDestinationEndpointsMapper,
};

export const body6: OperationParameter = {
  parameterPath: "body",
  mapper: SetStreamPassphraseMapper,
};

export const body7: OperationParameter = {
  parameterPath: "body",
  mapper: SetSourceAddressesMapper,
};
