/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** The schema object. */
export interface Schema {
  /** ID associated with this schema */
  id?: string;
  /** Connection ID associated with this schema */
  connectionId?: string;
  /** Status of the schema */
  status?: SchemaStatus;
  /** Name of the schema */
  name?: string;
  /** Content of the schema */
  content?: string;
}

/** Result of the schema validation. */
export interface ValidateSchemaResult {
  /** Validation status of the schema */
  status?: ValidateSchemaStatus;
  /** Message describing the schema validation */
  message?: string;
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export interface ErrorResponse {
  /** The error object. */
  error?: ErrorDetail;
}

/** The error detail. */
export interface ErrorDetail {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDetail[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
}

export interface ListApprovedSchemasRequest {
  /** The name of the pipeline to filter approved schemas. */
  pipeline?: string;
  /** The direction pipeline to filter approved schemas. */
  direction?: ListApprovedSchemasDirection;
}

/** The schemas list result. */
export interface SchemasListResult {
  /** Schemas array. */
  value?: Schema[];
}

/** Properties of flow */
export interface FlowProperties {
  /** The connection associated with this flow */
  connection?: SelectedResource;
  /**
   * Dataflow GUID associated with this flow
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly flowId?: string;
  /** AME, PME, or TORUS only! AKV Chain Containing SAS Token */
  keyVaultUri?: string;
  /**
   * Link status of the current flow
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly linkStatus?: LinkStatusFlow;
  /**
   * Resource ID of the linked flow
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly linkedFlowId?: string;
  /** Status of the current flow */
  status?: FlowStatus;
  /** Storage Account */
  storageAccountName?: string;
  /** Storage Account ID */
  storageAccountId?: string;
  /** Storage Container Name */
  storageContainerName?: string;
  /** Service Bus Queue ID */
  serviceBusQueueId?: string;
  /** The flow type for this flow */
  flowType?: FlowType;
  /** Transfer Storage Blobs or Tables */
  dataType?: DataType;
  /**
   * Provisioning state of the flow
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** The policies for this flow */
  policies?: string[];
  /** The selected schema for this flow */
  schema?: Schema;
  /** The messaging options for this flow */
  messagingOptions?: MessagingOptions;
}

/** A resource selected from ARM */
export interface SelectedResource {
  /** Name of the connection */
  name?: string;
  /** Id of the connection */
  id: string;
  /** Location of the connection */
  location?: string;
  /** Name of the subscription with the connection */
  subscriptionName?: string;
}

/** The option associated with messaging flows. */
export interface MessagingOptions {
  /** Billing tier for this messaging flow */
  billingTier?: FlowBillingTier;
}

/** Plan for the resource. */
export interface Plan {
  /** A user defined name of the 3rd Party Artifact that is being procured. */
  name: string;
  /** The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic */
  publisher: string;
  /** The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at the time of Data Market onboarding. */
  product: string;
  /** A publisher provided promotion code as provisioned in Data Market for the said product/artifact. */
  promotionCode?: string;
  /** The version of the desired product/artifact. */
  version?: string;
}

/** Managed service identity (system assigned and/or user assigned identities) */
export interface ManagedServiceIdentity {
  /**
   * The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /** Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed). */
  type: ManagedServiceIdentityType;
  /** The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests. */
  userAssignedIdentities?: { [propertyName: string]: UserAssignedIdentity };
}

/** User assigned identity properties */
export interface UserAssignedIdentity {
  /**
   * The principal ID of the assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The client ID of the assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly clientId?: string;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export interface Resource {
  /**
   * Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Azure Resource Manager metadata containing createdBy and modifiedBy information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The timestamp of resource last modification (UTC) */
  lastModifiedAt?: Date;
}

/** The flows resource patch definition. */
export interface FlowsPatch {
  /** The managed identity of the flow resource, if configured. */
  identity?: ManagedServiceIdentity;
  /** Resource tags */
  tags?: { [propertyName: string]: string };
}

/** The resource to reference. */
export interface ResourceBody {
  /** ID of the resource. */
  id: string;
  /** Reason for resource operation. */
  statusReason?: string;
}

/** The flows list result. */
export interface FlowsListResult {
  /** Flows array. */
  value?: Flow[];
  /** Link to next results */
  nextLink?: string;
}

/** Properties of connection */
export interface ConnectionProperties {
  /** Pipeline to use to transfer data */
  pipeline: string;
  /** Direction of data movement */
  direction?: Direction;
  /** Justification for the connection request */
  justification?: string;
  /**
   * Status of the connection
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: Status;
  /**
   * Reason for status
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statusReason?: string;
  /**
   * Link status of the current connection
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly linkStatus?: LinkStatus;
  /**
   * Resource ID of the linked connection
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly linkedConnectionId?: string;
  /** The flow types being requested for this connection */
  flowTypes?: FlowType[];
  /** Requirement ID of the connection */
  requirementId?: string;
  /** Subscription ID to link cloud subscriptions together */
  remoteSubscriptionId?: string;
  /**
   * Approver of this connection request
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly approver?: string;
  /** PIN to link requests together */
  pin?: string;
  /**
   * The timestamp that this connection request was submitted at
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly dateSubmitted?: Date;
  /** The primary contact for this connection request */
  primaryContact?: string;
  /** The secondary contacts for this connection request */
  secondaryContacts?: string[];
  /**
   * Provisioning state of the connection
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** The policies for this connection */
  policies?: string[];
  /** The schemas for this connection */
  schemas?: Schema[];
}

/** The connections resource patch definition. */
export interface ConnectionsPatch {
  /** Resource tags */
  tags?: { [propertyName: string]: string };
}

/** The connections list result. */
export interface PendingConnectionsListResult {
  /** Connections array. */
  value?: PendingConnection[];
  /** Link to next results */
  nextLink?: string;
}

/** The connections list result. */
export interface PendingFlowsListResult {
  /** flows array. */
  value?: PendingFlow[];
  /** Link to next results */
  nextLink?: string;
}

/** The connections list result. */
export interface ConnectionsListResult {
  /** Connections array. */
  value?: Connection[];
  /** Link to next results */
  nextLink?: string;
}

/** Properties of pipeline */
export interface PipelineProperties {
  /** Remote cloud of the data to be transferred or received */
  remoteCloud: string;
  /** Display name of this pipeline */
  displayName?: string;
  /**
   * Connections associated with pipeline
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly connections?: PipelineConnection[];
  /** Subscribers of this resource */
  subscribers?: Subscriber[];
  /**
   * Provisioning state of the pipeline
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** The policies for this pipeline */
  policies?: string[];
  /** The flow types allowed for this pipeline */
  flowTypes?: FlowType[];
}

/** Connection body inside a pipeline */
export interface PipelineConnection {
  /** Describes unknown properties. The value of an unknown property can be of "any" type. */
  [property: string]: any;
  /** Connection id inside pipeline */
  id: string;
  /**
   * Connection name inside pipeline
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Connection type inside pipeline
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Connection location inside pipeline
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly location?: string;
  /**
   * Connection etag inside pipeline
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly etag?: string;
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** Connection properties inside pipeline */
  properties?: PipelineConnectionProperties;
}

/** Connection properties inside pipeline */
export interface PipelineConnectionProperties {
  /** Describes unknown properties. The value of an unknown property can be of "any" type. */
  [property: string]: any;
  /** Internal metadata of the connection inside pipeline. */
  internalMetadata?: InternalMetadataProperties;
}

/** Internal metadata of the connection inside pipeline. */
export interface InternalMetadataProperties {
  /** Describes unknown properties. The value of an unknown property can be of "any" type. */
  [property: string]: any;
  /** Operation status associated with the last patch request */
  operationStatus?: OperationStatusProperties;
  /**
   * User that last set the approved status for this connection
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statusSetBy?: string;
}

/** Operation status associated with the last patch request */
export interface OperationStatusProperties {
  /**
   * Operation status for the last patch request for this connection.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: OperationStatusEnum;
  /**
   * Operation status ID of the last patch request for this connection.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Message for the operation for the last patch request for this connection.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
}

export interface Subscriber {
  /** Email of the subscriber */
  email?: string;
  /** Number specifying what notifications to receive */
  notifications?: number;
}

/** The pipelines resource patch definition. */
export interface PipelinesPatch {
  /** Properties of pipelines patch body. */
  properties?: PipelinesPatchProperties;
  /** Resource tags */
  tags?: { [propertyName: string]: string };
}

/** Properties of pipelines patch body. */
export interface PipelinesPatchProperties {
  /** Connections associated with pipeline */
  connections?: PipelineConnection[];
  /** The flow types allowed for this pipeline */
  flowTypes?: FlowType[];
}

/** The pipelines list result. */
export interface PipelinesListResult {
  /** Pipelines array. */
  value?: Pipeline[];
  /** Link to next results */
  nextLink?: string;
}

/** A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of results. */
export interface OperationListResult {
  /**
   * List of operations supported by the resource provider
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Operation[];
  /**
   * URL to get the next set of operation list results (if there are any).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Details of a REST API operation, returned from the Resource Provider Operations API */
export interface Operation {
  /**
   * The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for ARM/control-plane operations.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isDataAction?: boolean;
  /** Localized display information for this particular operation. */
  display?: OperationDisplay;
  /**
   * The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is "user,system"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly origin?: Origin;
  /**
   * Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly actionType?: ActionType;
}

/** Localized display information for this particular operation. */
export interface OperationDisplay {
  /**
   * The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft Compute".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provider?: string;
  /**
   * The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job Schedule Collections".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resource?: string;
  /**
   * The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operation?: string;
  /**
   * The short, localized friendly description of the operation; suitable for tool tips and detailed views.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
}

/** Pending flow object */
export interface PendingFlow extends FlowProperties, TrackedResource {
  /**
   * Subscription ID of the pending flow.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly subscriptionId?: string;
  /**
   * Connection ID of the pending flow.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly connectionId?: string;
}

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export interface TrackedResource extends Resource {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The geo-location where the resource lives */
  location: string;
}

/** Pending connection object */
export interface PendingConnection
  extends ConnectionProperties,
    TrackedResource {
  /**
   * Subscription ID of the pending connection.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly subscriptionId?: string;
}

/** The flow resource definition. */
export interface Flow extends TrackedResource {
  /** Properties of flow */
  properties?: FlowProperties;
  /** Plan for the resource. */
  plan?: Plan;
  /** The managed identity of the flow resource, if configured. */
  identity?: ManagedServiceIdentity;
}

/** The connection resource definition. */
export interface Connection extends TrackedResource {
  /** Properties of connection */
  properties?: ConnectionProperties;
}

/** The pipeline resource definition. */
export interface Pipeline extends TrackedResource {
  /** Properties of pipeline */
  properties?: PipelineProperties;
}

/** Defines headers for Flows_delete operation. */
export interface FlowsDeleteHeaders {
  /** Location response header */
  location?: string;
}

/** Defines headers for Flows_update operation. */
export interface FlowsUpdateHeaders {
  /** Location response header */
  location?: string;
}

/** Defines headers for Flows_enable operation. */
export interface FlowsEnableHeaders {
  /** Location response header */
  location?: string;
}

/** Defines headers for Flows_disable operation. */
export interface FlowsDisableHeaders {
  /** Location response header */
  location?: string;
}

/** Defines headers for Flows_link operation. */
export interface FlowsLinkHeaders {
  /** Location response header */
  location?: string;
}

/** Defines headers for Connections_delete operation. */
export interface ConnectionsDeleteHeaders {
  /** Location response header */
  location?: string;
}

/** Defines headers for Connections_update operation. */
export interface ConnectionsUpdateHeaders {
  /** Location response header */
  location?: string;
}

/** Defines headers for Connections_link operation. */
export interface ConnectionsLinkHeaders {
  /** Location response header */
  location?: string;
}

/** Defines headers for Pipelines_delete operation. */
export interface PipelinesDeleteHeaders {
  /** Location response header */
  location?: string;
}

/** Defines headers for Pipelines_update operation. */
export interface PipelinesUpdateHeaders {
  /** Location response header */
  location?: string;
}

/** Defines headers for Pipelines_approveConnection operation. */
export interface PipelinesApproveConnectionHeaders {
  /** Location response header */
  location?: string;
}

/** Defines headers for Pipelines_rejectConnection operation. */
export interface PipelinesRejectConnectionHeaders {
  /** Location response header */
  location?: string;
}

/** Known values of {@link SchemaStatus} that the service accepts. */
export enum KnownSchemaStatus {
  /** New */
  New = "New",
  /** Approved */
  Approved = "Approved",
}

/**
 * Defines values for SchemaStatus. \
 * {@link KnownSchemaStatus} can be used interchangeably with SchemaStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **New** \
 * **Approved**
 */
export type SchemaStatus = string;

/** Known values of {@link ValidateSchemaStatus} that the service accepts. */
export enum KnownValidateSchemaStatus {
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
}

/**
 * Defines values for ValidateSchemaStatus. \
 * {@link KnownValidateSchemaStatus} can be used interchangeably with ValidateSchemaStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed**
 */
export type ValidateSchemaStatus = string;

/** Known values of {@link ListApprovedSchemasDirection} that the service accepts. */
export enum KnownListApprovedSchemasDirection {
  /** Send */
  Send = "Send",
  /** Receive */
  Receive = "Receive",
}

/**
 * Defines values for ListApprovedSchemasDirection. \
 * {@link KnownListApprovedSchemasDirection} can be used interchangeably with ListApprovedSchemasDirection,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Send** \
 * **Receive**
 */
export type ListApprovedSchemasDirection = string;

/** Known values of {@link LinkStatusFlow} that the service accepts. */
export enum KnownLinkStatusFlow {
  /** Linked */
  Linked = "Linked",
  /** Unlinked */
  Unlinked = "Unlinked",
}

/**
 * Defines values for LinkStatusFlow. \
 * {@link KnownLinkStatusFlow} can be used interchangeably with LinkStatusFlow,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Linked** \
 * **Unlinked**
 */
export type LinkStatusFlow = string;

/** Known values of {@link FlowStatus} that the service accepts. */
export enum KnownFlowStatus {
  /** Enabled */
  Enabled = "Enabled",
  /** Disabled */
  Disabled = "Disabled",
}

/**
 * Defines values for FlowStatus. \
 * {@link KnownFlowStatus} can be used interchangeably with FlowStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export type FlowStatus = string;

/** Known values of {@link FlowType} that the service accepts. */
export enum KnownFlowType {
  /** Unknown */
  Unknown = "Unknown",
  /** Complex */
  Complex = "Complex",
  /** DevSecOps */
  DevSecOps = "DevSecOps",
  /** Messaging */
  Messaging = "Messaging",
  /** Mission */
  Mission = "Mission",
  /** MicrosoftInternal */
  MicrosoftInternal = "MicrosoftInternal",
  /** BasicFiles */
  BasicFiles = "BasicFiles",
  /** Data */
  Data = "Data",
}

/**
 * Defines values for FlowType. \
 * {@link KnownFlowType} can be used interchangeably with FlowType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **Complex** \
 * **DevSecOps** \
 * **Messaging** \
 * **Mission** \
 * **MicrosoftInternal** \
 * **BasicFiles** \
 * **Data**
 */
export type FlowType = string;

/** Known values of {@link DataType} that the service accepts. */
export enum KnownDataType {
  /** Blob */
  Blob = "Blob",
  /** Table */
  Table = "Table",
}

/**
 * Defines values for DataType. \
 * {@link KnownDataType} can be used interchangeably with DataType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Blob** \
 * **Table**
 */
export type DataType = string;

/** Known values of {@link ProvisioningState} that the service accepts. */
export enum KnownProvisioningState {
  /** Failed */
  Failed = "Failed",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Canceled */
  Canceled = "Canceled",
  /** Accepted */
  Accepted = "Accepted",
}

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Failed** \
 * **Succeeded** \
 * **Canceled** \
 * **Accepted**
 */
export type ProvisioningState = string;

/** Known values of {@link FlowBillingTier} that the service accepts. */
export enum KnownFlowBillingTier {
  /** BlobTransport */
  BlobTransport = "BlobTransport",
  /** Standard */
  Standard = "Standard",
  /** Premium */
  Premium = "Premium",
}

/**
 * Defines values for FlowBillingTier. \
 * {@link KnownFlowBillingTier} can be used interchangeably with FlowBillingTier,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **BlobTransport** \
 * **Standard** \
 * **Premium**
 */
export type FlowBillingTier = string;

/** Known values of {@link ManagedServiceIdentityType} that the service accepts. */
export enum KnownManagedServiceIdentityType {
  /** None */
  None = "None",
  /** SystemAssigned */
  SystemAssigned = "SystemAssigned",
  /** UserAssigned */
  UserAssigned = "UserAssigned",
  /** SystemAssignedUserAssigned */
  SystemAssignedUserAssigned = "SystemAssigned,UserAssigned",
}

/**
 * Defines values for ManagedServiceIdentityType. \
 * {@link KnownManagedServiceIdentityType} can be used interchangeably with ManagedServiceIdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **SystemAssigned** \
 * **UserAssigned** \
 * **SystemAssigned,UserAssigned**
 */
export type ManagedServiceIdentityType = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  /** User */
  User = "User",
  /** Application */
  Application = "Application",
  /** ManagedIdentity */
  ManagedIdentity = "ManagedIdentity",
  /** Key */
  Key = "Key",
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link Direction} that the service accepts. */
export enum KnownDirection {
  /** Send */
  Send = "Send",
  /** Receive */
  Receive = "Receive",
}

/**
 * Defines values for Direction. \
 * {@link KnownDirection} can be used interchangeably with Direction,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Send** \
 * **Receive**
 */
export type Direction = string;

/** Known values of {@link Status} that the service accepts. */
export enum KnownStatus {
  /** InReview */
  InReview = "InReview",
  /** Approved */
  Approved = "Approved",
  /** Rejected */
  Rejected = "Rejected",
  /** Accepted */
  Accepted = "Accepted",
}

/**
 * Defines values for Status. \
 * {@link KnownStatus} can be used interchangeably with Status,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **InReview** \
 * **Approved** \
 * **Rejected** \
 * **Accepted**
 */
export type Status = string;

/** Known values of {@link LinkStatus} that the service accepts. */
export enum KnownLinkStatus {
  /** Linked */
  Linked = "Linked",
  /** Unlinked */
  Unlinked = "Unlinked",
}

/**
 * Defines values for LinkStatus. \
 * {@link KnownLinkStatus} can be used interchangeably with LinkStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Linked** \
 * **Unlinked**
 */
export type LinkStatus = string;

/** Known values of {@link OperationStatusEnum} that the service accepts. */
export enum KnownOperationStatusEnum {
  /** Failed */
  Failed = "Failed",
  /** Succeeded */
  Succeeded = "Succeeded",
}

/**
 * Defines values for OperationStatusEnum. \
 * {@link KnownOperationStatusEnum} can be used interchangeably with OperationStatusEnum,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Failed** \
 * **Succeeded**
 */
export type OperationStatusEnum = string;

/** Known values of {@link Origin} that the service accepts. */
export enum KnownOrigin {
  /** User */
  User = "user",
  /** System */
  System = "system",
  /** UserSystem */
  UserSystem = "user,system",
}

/**
 * Defines values for Origin. \
 * {@link KnownOrigin} can be used interchangeably with Origin,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **user** \
 * **system** \
 * **user,system**
 */
export type Origin = string;

/** Known values of {@link ActionType} that the service accepts. */
export enum KnownActionType {
  /** Internal */
  Internal = "Internal",
}

/**
 * Defines values for ActionType. \
 * {@link KnownActionType} can be used interchangeably with ActionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Internal**
 */
export type ActionType = string;

/** Optional parameters. */
export interface AzureDataTransferValidateSchemaOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the validateSchema operation. */
export type AzureDataTransferValidateSchemaResponse = ValidateSchemaResult;

/** Optional parameters. */
export interface AzureDataTransferListApprovedSchemasOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listApprovedSchemas operation. */
export type AzureDataTransferListApprovedSchemasResponse = SchemasListResult;

/** Optional parameters. */
export interface FlowsGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type FlowsGetResponse = Flow;

/** Optional parameters. */
export interface FlowsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type FlowsCreateOrUpdateResponse = Flow;

/** Optional parameters. */
export interface FlowsDeleteOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type FlowsDeleteResponse = FlowsDeleteHeaders;

/** Optional parameters. */
export interface FlowsUpdateOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type FlowsUpdateResponse = Flow;

/** Optional parameters. */
export interface FlowsEnableOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the enable operation. */
export type FlowsEnableResponse = Flow;

/** Optional parameters. */
export interface FlowsDisableOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the disable operation. */
export type FlowsDisableResponse = Flow;

/** Optional parameters. */
export interface FlowsLinkOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the link operation. */
export type FlowsLinkResponse = Flow;

/** Optional parameters. */
export interface FlowsListByConnectionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByConnection operation. */
export type FlowsListByConnectionResponse = FlowsListResult;

/** Optional parameters. */
export interface FlowsListByConnectionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByConnectionNext operation. */
export type FlowsListByConnectionNextResponse = FlowsListResult;

/** Optional parameters. */
export interface ConnectionsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ConnectionsGetResponse = Connection;

/** Optional parameters. */
export interface ConnectionsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type ConnectionsCreateOrUpdateResponse = Connection;

/** Optional parameters. */
export interface ConnectionsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type ConnectionsDeleteResponse = ConnectionsDeleteHeaders;

/** Optional parameters. */
export interface ConnectionsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type ConnectionsUpdateResponse = Connection;

/** Optional parameters. */
export interface ConnectionsLinkOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the link operation. */
export type ConnectionsLinkResponse = Connection;

/** Optional parameters. */
export interface ConnectionsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type ConnectionsListByResourceGroupResponse = ConnectionsListResult;

/** Optional parameters. */
export interface ConnectionsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type ConnectionsListBySubscriptionResponse = ConnectionsListResult;

/** Optional parameters. */
export interface ConnectionsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type ConnectionsListByResourceGroupNextResponse = ConnectionsListResult;

/** Optional parameters. */
export interface ConnectionsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type ConnectionsListBySubscriptionNextResponse = ConnectionsListResult;

/** Optional parameters. */
export interface ListPendingConnectionsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type ListPendingConnectionsListResponse = PendingConnectionsListResult;

/** Optional parameters. */
export interface ListPendingConnectionsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type ListPendingConnectionsListNextResponse =
  PendingConnectionsListResult;

/** Optional parameters. */
export interface ListPendingFlowsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type ListPendingFlowsListResponse = PendingFlowsListResult;

/** Optional parameters. */
export interface ListPendingFlowsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type ListPendingFlowsListNextResponse = PendingFlowsListResult;

/** Optional parameters. */
export interface PipelinesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type PipelinesGetResponse = Pipeline;

/** Optional parameters. */
export interface PipelinesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type PipelinesCreateOrUpdateResponse = Pipeline;

/** Optional parameters. */
export interface PipelinesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type PipelinesDeleteResponse = PipelinesDeleteHeaders;

/** Optional parameters. */
export interface PipelinesUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type PipelinesUpdateResponse = Pipeline;

/** Optional parameters. */
export interface PipelinesApproveConnectionOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the approveConnection operation. */
export type PipelinesApproveConnectionResponse = Connection;

/** Optional parameters. */
export interface PipelinesRejectConnectionOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the rejectConnection operation. */
export type PipelinesRejectConnectionResponse = Connection;

/** Optional parameters. */
export interface PipelinesListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type PipelinesListByResourceGroupResponse = PipelinesListResult;

/** Optional parameters. */
export interface PipelinesListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type PipelinesListBySubscriptionResponse = PipelinesListResult;

/** Optional parameters. */
export interface PipelinesListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type PipelinesListByResourceGroupNextResponse = PipelinesListResult;

/** Optional parameters. */
export interface PipelinesListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type PipelinesListBySubscriptionNextResponse = PipelinesListResult;

/** Optional parameters. */
export interface ListSchemasListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type ListSchemasListResponse = SchemasListResult;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationListResult;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export interface AzuredatatransferrpOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
