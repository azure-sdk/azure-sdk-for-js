/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter,
} from "@azure/core-client";
import {
  ApprovalResource as ApprovalResourceMapper,
  ApprovalResourceUpdate as ApprovalResourceUpdateMapper,
  InitiatorCallbackRequest as InitiatorCallbackRequestMapper,
  CommunityResource as CommunityResourceMapper,
  CommunityResourceUpdate as CommunityResourceUpdateMapper,
  CheckAddressSpaceAvailabilityRequest as CheckAddressSpaceAvailabilityRequestMapper,
  CommunityEndpointResource as CommunityEndpointResourceMapper,
  CommunityEndpointResourceUpdate as CommunityEndpointResourceUpdateMapper,
  ApprovalCallbackRequest as ApprovalCallbackRequestMapper,
  ApprovalDeletionCallbackRequest as ApprovalDeletionCallbackRequestMapper,
  TransitHubResource as TransitHubResourceMapper,
  TransitHubResourceUpdate as TransitHubResourceUpdateMapper,
  EnclaveConnectionResource as EnclaveConnectionResourceMapper,
  EnclaveConnectionResourceUpdate as EnclaveConnectionResourceUpdateMapper,
  ExternalConnection as ExternalConnectionMapper,
  ExternalConnectionUpdate as ExternalConnectionUpdateMapper,
  InternalConnection as InternalConnectionMapper,
  InternalConnectionUpdate as InternalConnectionUpdateMapper,
  EnclaveResource as EnclaveResourceMapper,
  EnclaveResourceUpdate as EnclaveResourceUpdateMapper,
  EnclaveEndpointResource as EnclaveEndpointResourceMapper,
  EnclaveEndpointResourceUpdate as EnclaveEndpointResourceUpdateMapper,
  EndpointResource as EndpointResourceMapper,
  EndpointResourceUpdate as EndpointResourceUpdateMapper,
  WorkloadResource as WorkloadResourceMapper,
  WorkloadResourceUpdate as WorkloadResourceUpdateMapper,
} from "../models/mappers.js";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String",
    },
  },
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2024-11-01-preview",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String",
    },
  },
};

export const resourceUri: OperationURLParameter = {
  parameterPath: "resourceUri",
  mapper: {
    serializedName: "resourceUri",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const approvalName: OperationURLParameter = {
  parameterPath: "approvalName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z][a-zA-Z0-9-]*[a-zA-Z0-9]$"),
    },
    serializedName: "approvalName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String",
    },
  },
};

export const resource: OperationParameter = {
  parameterPath: "resource",
  mapper: ApprovalResourceMapper,
};

export const properties: OperationParameter = {
  parameterPath: "properties",
  mapper: ApprovalResourceUpdateMapper,
};

export const body: OperationParameter = {
  parameterPath: "body",
  mapper: InitiatorCallbackRequestMapper,
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "Uuid",
    },
  },
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    constraints: {
      MaxLength: 90,
      MinLength: 1,
    },
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const communityName: OperationURLParameter = {
  parameterPath: "communityName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z][a-zA-Z0-9-]*[a-zA-Z0-9]$"),
    },
    serializedName: "communityName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource1: OperationParameter = {
  parameterPath: "resource",
  mapper: CommunityResourceMapper,
};

export const properties1: OperationParameter = {
  parameterPath: "properties",
  mapper: CommunityResourceUpdateMapper,
};

export const checkAddressSpaceAvailabilityRequest: OperationParameter = {
  parameterPath: "checkAddressSpaceAvailabilityRequest",
  mapper: CheckAddressSpaceAvailabilityRequestMapper,
};

export const communityEndpointName: OperationURLParameter = {
  parameterPath: "communityEndpointName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z][a-zA-Z0-9-]*[a-zA-Z0-9]$"),
    },
    serializedName: "communityEndpointName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource2: OperationParameter = {
  parameterPath: "resource",
  mapper: CommunityEndpointResourceMapper,
};

export const properties2: OperationParameter = {
  parameterPath: "properties",
  mapper: CommunityEndpointResourceUpdateMapper,
};

export const body1: OperationParameter = {
  parameterPath: "body",
  mapper: ApprovalCallbackRequestMapper,
};

export const body2: OperationParameter = {
  parameterPath: "body",
  mapper: ApprovalDeletionCallbackRequestMapper,
};

export const transitHubName: OperationURLParameter = {
  parameterPath: "transitHubName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z][a-zA-Z0-9-]*[a-zA-Z0-9]$"),
    },
    serializedName: "transitHubName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource3: OperationParameter = {
  parameterPath: "resource",
  mapper: TransitHubResourceMapper,
};

export const properties3: OperationParameter = {
  parameterPath: "properties",
  mapper: TransitHubResourceUpdateMapper,
};

export const enclaveConnectionName: OperationURLParameter = {
  parameterPath: "enclaveConnectionName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z][a-zA-Z0-9-]*[a-zA-Z0-9]$"),
    },
    serializedName: "enclaveConnectionName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource4: OperationParameter = {
  parameterPath: "resource",
  mapper: EnclaveConnectionResourceMapper,
};

export const properties4: OperationParameter = {
  parameterPath: "properties",
  mapper: EnclaveConnectionResourceUpdateMapper,
};

export const externalConnectionName: OperationURLParameter = {
  parameterPath: "externalConnectionName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z][a-zA-Z0-9-]*[a-zA-Z0-9]$"),
    },
    serializedName: "externalConnectionName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource5: OperationParameter = {
  parameterPath: "resource",
  mapper: ExternalConnectionMapper,
};

export const properties5: OperationParameter = {
  parameterPath: "properties",
  mapper: ExternalConnectionUpdateMapper,
};

export const internalConnectionName: OperationURLParameter = {
  parameterPath: "internalConnectionName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z][a-zA-Z0-9-]*[a-zA-Z0-9]$"),
    },
    serializedName: "internalConnectionName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource6: OperationParameter = {
  parameterPath: "resource",
  mapper: InternalConnectionMapper,
};

export const properties6: OperationParameter = {
  parameterPath: "properties",
  mapper: InternalConnectionUpdateMapper,
};

export const virtualEnclaveName: OperationURLParameter = {
  parameterPath: "virtualEnclaveName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z][a-zA-Z0-9-]*[a-zA-Z0-9]$"),
    },
    serializedName: "virtualEnclaveName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource7: OperationParameter = {
  parameterPath: "resource",
  mapper: EnclaveResourceMapper,
};

export const properties7: OperationParameter = {
  parameterPath: "properties",
  mapper: EnclaveResourceUpdateMapper,
};

export const enclaveEndpointName: OperationURLParameter = {
  parameterPath: "enclaveEndpointName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z][a-zA-Z0-9-]*[a-zA-Z0-9]$"),
    },
    serializedName: "enclaveEndpointName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource8: OperationParameter = {
  parameterPath: "resource",
  mapper: EnclaveEndpointResourceMapper,
};

export const properties8: OperationParameter = {
  parameterPath: "properties",
  mapper: EnclaveEndpointResourceUpdateMapper,
};

export const endpointName: OperationURLParameter = {
  parameterPath: "endpointName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z][a-zA-Z0-9-]*[a-zA-Z0-9]$"),
    },
    serializedName: "endpointName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource9: OperationParameter = {
  parameterPath: "resource",
  mapper: EndpointResourceMapper,
};

export const properties9: OperationParameter = {
  parameterPath: "properties",
  mapper: EndpointResourceUpdateMapper,
};

export const workloadName: OperationURLParameter = {
  parameterPath: "workloadName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z][a-zA-Z0-9-]*[a-zA-Z0-9]$"),
    },
    serializedName: "workloadName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource10: OperationParameter = {
  parameterPath: "resource",
  mapper: WorkloadResourceMapper,
};

export const properties10: OperationParameter = {
  parameterPath: "properties",
  mapper: WorkloadResourceUpdateMapper,
};
