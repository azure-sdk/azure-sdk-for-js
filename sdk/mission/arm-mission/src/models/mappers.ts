/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const ApprovalResourceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApprovalResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApprovalResource",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const RequestMetadata: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RequestMetadata",
    modelProperties: {
      resourceAction: {
        serializedName: "resourceAction",
        required: true,
        type: {
          name: "String",
        },
      },
      approvalStatus: {
        serializedName: "approvalStatus",
        type: {
          name: "String",
        },
      },
      approvalCallbackRoute: {
        serializedName: "approvalCallbackRoute",
        type: {
          name: "String",
        },
      },
      approvalCallbackPayload: {
        serializedName: "approvalCallbackPayload",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Approver: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Approver",
    modelProperties: {
      approverEntraId: {
        serializedName: "approverEntraId",
        required: true,
        type: {
          name: "String",
        },
      },
      actionPerformed: {
        serializedName: "actionPerformed",
        required: true,
        type: {
          name: "String",
        },
      },
      lastUpdatedAt: {
        serializedName: "lastUpdatedAt",
        required: true,
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData",
        },
      },
    },
  },
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String",
        },
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String",
        },
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime",
        },
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String",
        },
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String",
        },
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail",
        },
      },
    },
  },
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail",
            },
          },
        },
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo",
            },
          },
        },
      },
    },
  },
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } },
        },
      },
    },
  },
};

export const ApprovalPatchResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApprovalPatchResource",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "UpdateApprovalProperties",
        },
      },
    },
  },
};

export const UpdateApprovalProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateApprovalProperties",
    modelProperties: {
      parent1: {
        serializedName: "parent1",
        type: {
          name: "String",
        },
      },
      parent2: {
        serializedName: "parent2",
        type: {
          name: "String",
        },
      },
      requestMetadata: {
        serializedName: "requestMetadata",
        type: {
          name: "Composite",
          className: "RequestMetadataUpdate",
        },
      },
      approvers: {
        serializedName: "approvers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Approver",
            },
          },
        },
      },
      ticketId: {
        serializedName: "ticketId",
        type: {
          name: "String",
        },
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime",
        },
      },
      stateChangedAt: {
        serializedName: "stateChangedAt",
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const RequestMetadataUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RequestMetadataUpdate",
    modelProperties: {
      resourceAction: {
        serializedName: "resourceAction",
        type: {
          name: "String",
        },
      },
      approvalStatus: {
        serializedName: "approvalStatus",
        type: {
          name: "String",
        },
      },
      approvalCallbackRoute: {
        serializedName: "approvalCallbackRoute",
        type: {
          name: "String",
        },
      },
      approvalCallbackPayload: {
        serializedName: "approvalCallbackPayload",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const InitiatorCallbackRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InitiatorCallbackRequest",
    modelProperties: {
      approvalStatus: {
        serializedName: "approvalStatus",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const InitiatorCallbackResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InitiatorCallbackResponse",
    modelProperties: {
      message: {
        serializedName: "message",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      isDataAction: {
        serializedName: "isDataAction",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay",
        },
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      actionType: {
        serializedName: "actionType",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const CommunityResourceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CommunityResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CommunityResource",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ManagedResourceGroupConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedResourceGroupConfiguration",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const GovernedServiceItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GovernedServiceItem",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      option: {
        serializedName: "option",
        type: {
          name: "String",
        },
      },
      enforcement: {
        serializedName: "enforcement",
        type: {
          name: "String",
        },
      },
      auditOnly: {
        serializedName: "auditOnly",
        type: {
          name: "Boolean",
        },
      },
      initiatives: {
        serializedName: "initiatives",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const RoleAssignmentItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RoleAssignmentItem",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String",
        },
      },
      principals: {
        serializedName: "principals",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Principal",
            },
          },
        },
      },
    },
  },
};

export const Principal: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Principal",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ApprovalSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApprovalSettings",
    modelProperties: {
      endpointCreation: {
        serializedName: "endpointCreation",
        type: {
          name: "String",
        },
      },
      endpointUpdate: {
        serializedName: "endpointUpdate",
        type: {
          name: "String",
        },
      },
      endpointDeletion: {
        serializedName: "endpointDeletion",
        type: {
          name: "String",
        },
      },
      connectionCreation: {
        serializedName: "connectionCreation",
        type: {
          name: "String",
        },
      },
      connectionUpdate: {
        serializedName: "connectionUpdate",
        type: {
          name: "String",
        },
      },
      connectionUpdateMode: {
        serializedName: "connectionUpdateMode",
        type: {
          name: "String",
        },
      },
      connectionDeletion: {
        serializedName: "connectionDeletion",
        type: {
          name: "String",
        },
      },
      enclaveCreation: {
        serializedName: "enclaveCreation",
        type: {
          name: "String",
        },
      },
      enclaveDeletion: {
        serializedName: "enclaveDeletion",
        type: {
          name: "String",
        },
      },
      maintenanceMode: {
        serializedName: "maintenanceMode",
        type: {
          name: "String",
        },
      },
      serviceCatalogDeployment: {
        serializedName: "serviceCatalogDeployment",
        type: {
          name: "String",
        },
      },
      notificationOnApprovalCreation: {
        serializedName: "notificationOnApprovalCreation",
        type: {
          name: "String",
        },
      },
      notificationOnApprovalAction: {
        serializedName: "notificationOnApprovalAction",
        type: {
          name: "String",
        },
      },
      notificationOnApprovalDeletion: {
        serializedName: "notificationOnApprovalDeletion",
        type: {
          name: "String",
        },
      },
      mandatoryApprovers: {
        serializedName: "mandatoryApprovers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MandatoryApprover",
            },
          },
        },
      },
      minimumApproversRequired: {
        serializedName: "minimumApproversRequired",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const MandatoryApprover: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MandatoryApprover",
    modelProperties: {
      approverEntraId: {
        serializedName: "approverEntraId",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const MaintenanceModeConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MaintenanceModeConfiguration",
    modelProperties: {
      mode: {
        serializedName: "mode",
        required: true,
        type: {
          name: "String",
        },
      },
      principals: {
        serializedName: "principals",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Principal",
            },
          },
        },
      },
      justification: {
        serializedName: "justification",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ManagedServiceIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedServiceIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "Uuid",
        },
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "Uuid",
        },
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String",
        },
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "UserAssignedIdentity" },
          },
        },
      },
    },
  },
};

export const UserAssignedIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserAssignedIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "Uuid",
        },
      },
      clientId: {
        serializedName: "clientId",
        readOnly: true,
        type: {
          name: "Uuid",
        },
      },
    },
  },
};

export const CommunityEndpointResourceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CommunityEndpointResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CommunityEndpointResource",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const CommunityEndpointDestinationRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CommunityEndpointDestinationRule",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      destination: {
        serializedName: "destination",
        type: {
          name: "String",
        },
      },
      port: {
        serializedName: "port",
        type: {
          name: "String",
        },
      },
      destinationType: {
        serializedName: "destinationType",
        type: {
          name: "String",
        },
      },
      protocols: {
        serializedName: "protocols",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      transitHubResourceId: {
        serializedName: "transitHubResourceId",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const TransitHubResourceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TransitHubResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TransitHubResource",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const TransitOption: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TransitOption",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String",
        },
      },
      params: {
        serializedName: "params",
        type: {
          name: "Composite",
          className: "TransitOptionParams",
        },
      },
    },
  },
};

export const TransitOptionParams: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TransitOptionParams",
    modelProperties: {
      scaleUnits: {
        serializedName: "scaleUnits",
        type: {
          name: "Number",
        },
      },
      remoteVirtualNetworkId: {
        serializedName: "remoteVirtualNetworkId",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const EnclaveConnectionResourceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EnclaveConnectionResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EnclaveConnectionResource",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const EnclaveResourceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EnclaveResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EnclaveResource",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const EnclaveVirtualNetwork: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EnclaveVirtualNetwork",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      networkSize: {
        serializedName: "networkSize",
        type: {
          name: "String",
        },
      },
      customCidrRange: {
        serializedName: "customCidrRange",
        type: {
          name: "String",
        },
      },
      subnetConfigurations: {
        serializedName: "subnetConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SubnetConfiguration",
            },
          },
        },
      },
      allowSubnetCommunication: {
        serializedName: "allowSubnetCommunication",
        type: {
          name: "Boolean",
        },
      },
      connectToAzureServices: {
        serializedName: "connectToAzureServices",
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const SubnetConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SubnetConfiguration",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String",
        },
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      networkPrefixSize: {
        serializedName: "networkPrefixSize",
        required: true,
        type: {
          name: "Number",
        },
      },
      subnetDelegation: {
        serializedName: "subnetDelegation",
        type: {
          name: "String",
        },
      },
      addressPrefix: {
        serializedName: "addressPrefix",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      networkSecurityGroupId: {
        serializedName: "networkSecurityGroupId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const EnclaveAddressSpaces: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EnclaveAddressSpaces",
    modelProperties: {
      enclaveAddressSpace: {
        serializedName: "enclaveAddressSpace",
        type: {
          name: "String",
        },
      },
      managedAddressSpace: {
        serializedName: "managedAddressSpace",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const EnclaveDefaultSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EnclaveDefaultSettings",
    modelProperties: {
      keyVaultResourceId: {
        serializedName: "keyVaultResourceId",
        type: {
          name: "String",
        },
      },
      storageAccountResourceId: {
        serializedName: "storageAccountResourceId",
        type: {
          name: "String",
        },
      },
      logAnalyticsResourceIdCollection: {
        serializedName: "logAnalyticsResourceIdCollection",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      diagnosticDestination: {
        serializedName: "diagnosticDestination",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const EnclaveEndpointResourceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EnclaveEndpointResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EnclaveEndpointResource",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const EnclaveEndpointDestinationRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EnclaveEndpointDestinationRule",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      destination: {
        serializedName: "destination",
        type: {
          name: "String",
        },
      },
      port: {
        serializedName: "port",
        type: {
          name: "String",
        },
      },
      protocols: {
        serializedName: "protocols",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const WorkloadResourceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkloadResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WorkloadResource",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const CommunityPatchResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CommunityPatchResource",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "UpdateCommunityPatchProperties",
        },
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className:
            "AzureResourceManagerCommonTypesManagedServiceIdentityUpdate",
        },
      },
    },
  },
};

export const UpdateCommunityPatchProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateCommunityPatchProperties",
    modelProperties: {
      addressSpace: {
        serializedName: "addressSpace",
        type: {
          name: "String",
        },
      },
      dnsServers: {
        serializedName: "dnsServers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      managedResourceGroupConfiguration: {
        serializedName: "managedResourceGroupConfiguration",
        type: {
          name: "Composite",
          className: "ManagedResourceGroupConfiguration",
        },
      },
      governedServiceList: {
        serializedName: "governedServiceList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GovernedServiceItem",
            },
          },
        },
      },
      communityRoleAssignments: {
        serializedName: "communityRoleAssignments",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RoleAssignmentItem",
            },
          },
        },
      },
      approvalSettings: {
        serializedName: "approvalSettings",
        type: {
          name: "Composite",
          className: "ApprovalSettings",
        },
      },
      maintenanceModeConfiguration: {
        serializedName: "maintenanceModeConfiguration",
        type: {
          name: "Composite",
          className: "MaintenanceModeConfigurationUpdate",
        },
      },
    },
  },
};

export const MaintenanceModeConfigurationUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MaintenanceModeConfigurationUpdate",
    modelProperties: {
      mode: {
        serializedName: "mode",
        type: {
          name: "String",
        },
      },
      principals: {
        serializedName: "principals",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Principal",
            },
          },
        },
      },
      justification: {
        serializedName: "justification",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AzureResourceManagerCommonTypesManagedServiceIdentityUpdate: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "AzureResourceManagerCommonTypesManagedServiceIdentityUpdate",
      modelProperties: {
        type: {
          serializedName: "type",
          type: {
            name: "String",
          },
        },
        userAssignedIdentities: {
          serializedName: "userAssignedIdentities",
          type: {
            name: "Dictionary",
            value: {
              type: {
                name: "Composite",
                className:
                  "Components19Kgb1NSchemasAzureResourcemanagerCommontypesManagedserviceidentityupdatePropertiesUserassignedidentitiesAdditionalproperties",
              },
            },
          },
        },
      },
    },
  };

export const CheckAddressSpaceAvailabilityRequest: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "CheckAddressSpaceAvailabilityRequest",
      modelProperties: {
        communityResourceId: {
          serializedName: "communityResourceId",
          required: true,
          type: {
            name: "String",
          },
        },
        enclaveVirtualNetwork: {
          serializedName: "enclaveVirtualNetwork",
          type: {
            name: "Composite",
            className: "EnclaveVirtualNetwork",
          },
        },
      },
    },
  };

export const CheckAddressSpaceAvailabilityResponse: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "CheckAddressSpaceAvailabilityResponse",
      modelProperties: {
        value: {
          serializedName: "value",
          required: true,
          type: {
            name: "Boolean",
          },
        },
      },
    },
  };

export const CommunityEndpointPatchResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CommunityEndpointPatchResource",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "UpdateCommunityEndpointPatchProperties",
        },
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
    },
  },
};

export const UpdateCommunityEndpointPatchProperties: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "UpdateCommunityEndpointPatchProperties",
      modelProperties: {
        ruleCollection: {
          serializedName: "ruleCollection",
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "Composite",
                className: "CommunityEndpointDestinationRule",
              },
            },
          },
        },
        resourceCollection: {
          serializedName: "resourceCollection",
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "String",
              },
            },
          },
        },
      },
    },
  };

export const ApprovalCallbackRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApprovalCallbackRequest",
    modelProperties: {
      resourceRequestAction: {
        serializedName: "resourceRequestAction",
        required: true,
        type: {
          name: "String",
        },
      },
      approvalStatus: {
        serializedName: "approvalStatus",
        required: true,
        type: {
          name: "String",
        },
      },
      approvalCallbackPayload: {
        serializedName: "approvalCallbackPayload",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ApprovalCallbackResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApprovalCallbackResponse",
    modelProperties: {
      message: {
        serializedName: "message",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ApprovalDeletionCallbackRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApprovalDeletionCallbackRequest",
    modelProperties: {
      resourceRequestAction: {
        serializedName: "resourceRequestAction",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ApprovalDeletionCallbackResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApprovalDeletionCallbackResponse",
    modelProperties: {
      message: {
        serializedName: "message",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const TransitHubPatchResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TransitHubPatchResource",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "UpdateTransitHubPatchProperties",
        },
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
    },
  },
};

export const UpdateTransitHubPatchProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateTransitHubPatchProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      state: {
        serializedName: "state",
        type: {
          name: "String",
        },
      },
      transitOption: {
        serializedName: "transitOption",
        type: {
          name: "Composite",
          className: "TransitOption",
        },
      },
      resourceCollection: {
        serializedName: "resourceCollection",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const EnclaveConnectionPatchResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EnclaveConnectionPatchResource",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "UpdateEnclaveConnectionPatchProperties",
        },
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
    },
  },
};

export const UpdateEnclaveConnectionPatchProperties: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "UpdateEnclaveConnectionPatchProperties",
      modelProperties: {
        state: {
          serializedName: "state",
          type: {
            name: "String",
          },
        },
        communityResourceId: {
          serializedName: "communityResourceId",
          type: {
            name: "String",
          },
        },
        sourceResourceId: {
          serializedName: "sourceResourceId",
          type: {
            name: "String",
          },
        },
        sourceCidr: {
          serializedName: "sourceCidr",
          type: {
            name: "String",
          },
        },
        ipGroup: {
          serializedName: "ipGroup",
          type: {
            name: "String",
          },
        },
        destinationEndpointId: {
          serializedName: "destinationEndpointId",
          type: {
            name: "String",
          },
        },
        resourceCollection: {
          serializedName: "resourceCollection",
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "String",
              },
            },
          },
        },
      },
    },
  };

export const VirtualEnclavePatchResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualEnclavePatchResource",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "UpdateVirtualEnclavePatchProperties",
        },
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className:
            "AzureResourceManagerCommonTypesManagedServiceIdentityUpdate",
        },
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
    },
  },
};

export const UpdateVirtualEnclavePatchProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateVirtualEnclavePatchProperties",
    modelProperties: {
      enclaveVirtualNetwork: {
        serializedName: "enclaveVirtualNetwork",
        type: {
          name: "Composite",
          className: "EnclaveVirtualNetwork",
        },
      },
      communityResourceId: {
        serializedName: "communityResourceId",
        type: {
          name: "String",
        },
      },
      enclaveDefaultSettings: {
        serializedName: "enclaveDefaultSettings",
        type: {
          name: "Composite",
          className: "EnclaveDefaultSettings",
        },
      },
      resourceCollection: {
        serializedName: "resourceCollection",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      managedResourceGroupConfiguration: {
        serializedName: "managedResourceGroupConfiguration",
        type: {
          name: "Composite",
          className: "ManagedResourceGroupConfiguration",
        },
      },
      maintenanceModeConfiguration: {
        serializedName: "maintenanceModeConfiguration",
        type: {
          name: "Composite",
          className: "MaintenanceModeConfigurationUpdate",
        },
      },
      bastionEnabled: {
        serializedName: "bastionEnabled",
        type: {
          name: "Boolean",
        },
      },
      enclaveRoleAssignments: {
        serializedName: "enclaveRoleAssignments",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RoleAssignmentItem",
            },
          },
        },
      },
      workloadRoleAssignments: {
        serializedName: "workloadRoleAssignments",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RoleAssignmentItem",
            },
          },
        },
      },
    },
  },
};

export const EnclaveEndpointPatchResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EnclaveEndpointPatchResource",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "UpdateEnclaveEndpointPatchProperties",
        },
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
    },
  },
};

export const UpdateEnclaveEndpointPatchProperties: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "UpdateEnclaveEndpointPatchProperties",
      modelProperties: {
        ruleCollection: {
          serializedName: "ruleCollection",
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "Composite",
                className: "EnclaveEndpointDestinationRule",
              },
            },
          },
        },
        resourceCollection: {
          serializedName: "resourceCollection",
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "String",
              },
            },
          },
        },
      },
    },
  };

export const WorkloadPatchResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkloadPatchResource",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "UpdateWorkloadPatchProperties",
        },
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
    },
  },
};

export const UpdateWorkloadPatchProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateWorkloadPatchProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      resourceGroupCollection: {
        serializedName: "resourceGroupCollection",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties,
    },
  },
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Components19Kgb1NSchemasAzureResourcemanagerCommontypesManagedserviceidentityupdatePropertiesUserassignedidentitiesAdditionalproperties: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className:
        "Components19Kgb1NSchemasAzureResourcemanagerCommontypesManagedserviceidentityupdatePropertiesUserassignedidentitiesAdditionalproperties",
      modelProperties: {
        ...UserAssignedIdentity.type.modelProperties,
      },
    },
  };

export const ApprovalResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApprovalResource",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      parent1: {
        serializedName: "properties.parent1",
        type: {
          name: "String",
        },
      },
      parent2: {
        serializedName: "properties.parent2",
        type: {
          name: "String",
        },
      },
      requestMetadata: {
        serializedName: "properties.requestMetadata",
        type: {
          name: "Composite",
          className: "RequestMetadata",
        },
      },
      approvers: {
        serializedName: "properties.approvers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Approver",
            },
          },
        },
      },
      ticketId: {
        serializedName: "properties.ticketId",
        type: {
          name: "String",
        },
      },
      createdAt: {
        serializedName: "properties.createdAt",
        type: {
          name: "DateTime",
        },
      },
      stateChangedAt: {
        serializedName: "properties.stateChangedAt",
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const CommunityResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CommunityResource",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity",
        },
      },
      addressSpace: {
        serializedName: "properties.addressSpace",
        type: {
          name: "String",
        },
      },
      dnsServers: {
        serializedName: "properties.dnsServers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      resourceCollection: {
        serializedName: "properties.resourceCollection",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      managedResourceGroupConfiguration: {
        serializedName: "properties.managedResourceGroupConfiguration",
        type: {
          name: "Composite",
          className: "ManagedResourceGroupConfiguration",
        },
      },
      governedServiceList: {
        serializedName: "properties.governedServiceList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GovernedServiceItem",
            },
          },
        },
      },
      communityRoleAssignments: {
        serializedName: "properties.communityRoleAssignments",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RoleAssignmentItem",
            },
          },
        },
      },
      approvalSettings: {
        serializedName: "properties.approvalSettings",
        type: {
          name: "Composite",
          className: "ApprovalSettings",
        },
      },
      maintenanceModeConfiguration: {
        serializedName: "properties.maintenanceModeConfiguration",
        type: {
          name: "Composite",
          className: "MaintenanceModeConfiguration",
        },
      },
    },
  },
};

export const CommunityEndpointResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CommunityEndpointResource",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      ruleCollection: {
        serializedName: "properties.ruleCollection",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CommunityEndpointDestinationRule",
            },
          },
        },
      },
      resourceCollection: {
        serializedName: "properties.resourceCollection",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const TransitHubResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TransitHubResource",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      state: {
        serializedName: "properties.state",
        type: {
          name: "String",
        },
      },
      transitOption: {
        serializedName: "properties.transitOption",
        type: {
          name: "Composite",
          className: "TransitOption",
        },
      },
      resourceCollection: {
        serializedName: "properties.resourceCollection",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const EnclaveConnectionResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EnclaveConnectionResource",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      state: {
        serializedName: "properties.state",
        type: {
          name: "String",
        },
      },
      communityResourceId: {
        serializedName: "properties.communityResourceId",
        type: {
          name: "String",
        },
      },
      sourceResourceId: {
        serializedName: "properties.sourceResourceId",
        type: {
          name: "String",
        },
      },
      sourceCidr: {
        serializedName: "properties.sourceCidr",
        type: {
          name: "String",
        },
      },
      ipGroup: {
        serializedName: "properties.ipGroup",
        type: {
          name: "String",
        },
      },
      destinationEndpointId: {
        serializedName: "properties.destinationEndpointId",
        type: {
          name: "String",
        },
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      resourceCollection: {
        serializedName: "properties.resourceCollection",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const EnclaveResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EnclaveResource",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity",
        },
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      enclaveVirtualNetwork: {
        serializedName: "properties.enclaveVirtualNetwork",
        type: {
          name: "Composite",
          className: "EnclaveVirtualNetwork",
        },
      },
      enclaveAddressSpaces: {
        serializedName: "properties.enclaveAddressSpaces",
        type: {
          name: "Composite",
          className: "EnclaveAddressSpaces",
        },
      },
      communityResourceId: {
        serializedName: "properties.communityResourceId",
        type: {
          name: "String",
        },
      },
      enclaveDefaultSettings: {
        serializedName: "properties.enclaveDefaultSettings",
        type: {
          name: "Composite",
          className: "EnclaveDefaultSettings",
        },
      },
      resourceCollection: {
        serializedName: "properties.resourceCollection",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      managedResourceGroupConfiguration: {
        serializedName: "properties.managedResourceGroupConfiguration",
        type: {
          name: "Composite",
          className: "ManagedResourceGroupConfiguration",
        },
      },
      maintenanceModeConfiguration: {
        serializedName: "properties.maintenanceModeConfiguration",
        type: {
          name: "Composite",
          className: "MaintenanceModeConfiguration",
        },
      },
      bastionEnabled: {
        serializedName: "properties.bastionEnabled",
        type: {
          name: "Boolean",
        },
      },
      enclaveRoleAssignments: {
        serializedName: "properties.enclaveRoleAssignments",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RoleAssignmentItem",
            },
          },
        },
      },
      workloadRoleAssignments: {
        serializedName: "properties.workloadRoleAssignments",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RoleAssignmentItem",
            },
          },
        },
      },
    },
  },
};

export const EnclaveEndpointResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EnclaveEndpointResource",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      ruleCollection: {
        serializedName: "properties.ruleCollection",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EnclaveEndpointDestinationRule",
            },
          },
        },
      },
      resourceCollection: {
        serializedName: "properties.resourceCollection",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const WorkloadResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkloadResource",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      resourceGroupCollection: {
        serializedName: "properties.resourceGroupCollection",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const ApprovalCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApprovalCreateOrUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const ApprovalUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApprovalUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const ApprovalDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApprovalDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const ApprovalInitiatorCallbackHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApprovalInitiatorCallbackHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const CommunityCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CommunityCreateOrUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const CommunityUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CommunityUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const CommunityDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CommunityDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const CommunityEndpointsCreateOrUpdateHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "CommunityEndpointsCreateOrUpdateHeaders",
      modelProperties: {
        azureAsyncOperation: {
          serializedName: "azure-asyncoperation",
          type: {
            name: "String",
          },
        },
        retryAfter: {
          serializedName: "retry-after",
          type: {
            name: "Number",
          },
        },
      },
    },
  };

export const CommunityEndpointsUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CommunityEndpointsUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const CommunityEndpointsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CommunityEndpointsDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const CommunityEndpointsApprovalCallbackHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "CommunityEndpointsApprovalCallbackHeaders",
      modelProperties: {
        location: {
          serializedName: "location",
          type: {
            name: "String",
          },
        },
        retryAfter: {
          serializedName: "retry-after",
          type: {
            name: "Number",
          },
        },
      },
    },
  };

export const CommunityEndpointsApprovalDeletionCallbackHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "CommunityEndpointsApprovalDeletionCallbackHeaders",
      modelProperties: {
        location: {
          serializedName: "location",
          type: {
            name: "String",
          },
        },
        retryAfter: {
          serializedName: "retry-after",
          type: {
            name: "Number",
          },
        },
      },
    },
  };

export const TransitHubCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TransitHubCreateOrUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const TransitHubUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TransitHubUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const TransitHubDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TransitHubDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const EnclaveConnectionCreateOrUpdateHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "EnclaveConnectionCreateOrUpdateHeaders",
      modelProperties: {
        azureAsyncOperation: {
          serializedName: "azure-asyncoperation",
          type: {
            name: "String",
          },
        },
        retryAfter: {
          serializedName: "retry-after",
          type: {
            name: "Number",
          },
        },
      },
    },
  };

export const EnclaveConnectionUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EnclaveConnectionUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const EnclaveConnectionDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EnclaveConnectionDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const EnclaveConnectionApprovalCallbackHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "EnclaveConnectionApprovalCallbackHeaders",
      modelProperties: {
        location: {
          serializedName: "location",
          type: {
            name: "String",
          },
        },
        retryAfter: {
          serializedName: "retry-after",
          type: {
            name: "Number",
          },
        },
      },
    },
  };

export const EnclaveConnectionApprovalDeletionCallbackHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "EnclaveConnectionApprovalDeletionCallbackHeaders",
      modelProperties: {
        location: {
          serializedName: "location",
          type: {
            name: "String",
          },
        },
        retryAfter: {
          serializedName: "retry-after",
          type: {
            name: "Number",
          },
        },
      },
    },
  };

export const VirtualEnclaveCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualEnclaveCreateOrUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const VirtualEnclaveUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualEnclaveUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const VirtualEnclaveDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualEnclaveDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const VirtualEnclaveApprovalCallbackHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "VirtualEnclaveApprovalCallbackHeaders",
      modelProperties: {
        location: {
          serializedName: "location",
          type: {
            name: "String",
          },
        },
        retryAfter: {
          serializedName: "retry-after",
          type: {
            name: "Number",
          },
        },
      },
    },
  };

export const VirtualEnclaveApprovalDeletionCallbackHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "VirtualEnclaveApprovalDeletionCallbackHeaders",
      modelProperties: {
        location: {
          serializedName: "location",
          type: {
            name: "String",
          },
        },
        retryAfter: {
          serializedName: "retry-after",
          type: {
            name: "Number",
          },
        },
      },
    },
  };

export const EnclaveEndpointsCreateOrUpdateHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "EnclaveEndpointsCreateOrUpdateHeaders",
      modelProperties: {
        azureAsyncOperation: {
          serializedName: "azure-asyncoperation",
          type: {
            name: "String",
          },
        },
        retryAfter: {
          serializedName: "retry-after",
          type: {
            name: "Number",
          },
        },
      },
    },
  };

export const EnclaveEndpointsUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EnclaveEndpointsUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const EnclaveEndpointsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EnclaveEndpointsDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const EnclaveEndpointsApprovalCallbackHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "EnclaveEndpointsApprovalCallbackHeaders",
      modelProperties: {
        location: {
          serializedName: "location",
          type: {
            name: "String",
          },
        },
        retryAfter: {
          serializedName: "retry-after",
          type: {
            name: "Number",
          },
        },
      },
    },
  };

export const EnclaveEndpointsApprovalDeletionCallbackHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "EnclaveEndpointsApprovalDeletionCallbackHeaders",
      modelProperties: {
        location: {
          serializedName: "location",
          type: {
            name: "String",
          },
        },
        retryAfter: {
          serializedName: "retry-after",
          type: {
            name: "Number",
          },
        },
      },
    },
  };

export const WorkloadCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkloadCreateOrUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const WorkloadUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkloadUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const WorkloadDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkloadDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};
