/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** The response of a ApprovalResource list operation. */
export interface ApprovalResourceListResult {
  /** The ApprovalResource items on this page */
  value: ApprovalResource[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** Request Metadata for approvals request. */
export interface RequestMetadata {
  /** Resource Action of the item being approved or declined. */
  resourceAction: string;
  /** Approval status. */
  approvalStatus?: ApprovalStatus;
  /** Route name for the approval callback */
  approvalCallbackRoute?: string;
  /** Payload to be sent upon any action on approval request */
  approvalCallbackPayload?: string;
}

/** Approver Metadata for approvals request. */
export interface Approver {
  /** EntraId of the approver */
  approverEntraId: string;
  /** Action Performed by approver */
  actionPerformed: ActionPerformed;
  /** approval request last updated at */
  lastUpdatedAt: Date;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export interface Resource {
  /**
   * Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Azure Resource Manager metadata containing createdBy and modifiedBy information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The timestamp of resource last modification (UTC) */
  lastModifiedAt?: Date;
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export interface ErrorResponse {
  /** The error object. */
  error?: ErrorDetail;
}

/** The error detail. */
export interface ErrorDetail {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDetail[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
}

/** Approvals properties for patching */
export interface ApprovalPatchResource {
  /** Approval Patch properties */
  properties?: UpdateApprovalProperties;
}

/**
 * A copy of the input model `T` with only the properties that are visible during the
 * "Update" resource lifecycle phase.
 *
 * The "Update" lifecycle phase is used for properties passed as parameters to operations
 * that update data, like HTTP PATCH operations.
 *
 * This transformation will include only the properties that have the `Lifecycle.Update`
 * visibility modifier, and the types of all properties will be replaced with the
 * equivalent `CreateOrUpdate` transformation.
 *
 * If a `NameTemplate` is provided, the new model will be named according to the template.
 * The template uses the same syntax as the `@friendlyName` decorator.
 */
export interface UpdateApprovalProperties {
  /** Parameter for optimizing query results */
  parent1?: string;
  /** Parameter for optimizing query results */
  parent2?: string;
  /** Request metadata for the approval request. */
  requestMetadata?: RequestMetadataUpdate;
  /** List of approvers for the approval request */
  approvers?: Approver[];
  /** Ticket ID for the approval request */
  ticketId?: string;
  /** Approval request creation time */
  createdAt?: Date;
  /** Approval request state change time, time at which approval request state changed from pending to approved or rejected. */
  stateChangedAt?: Date;
}

/** Request Metadata for approvals request. */
export interface RequestMetadataUpdate {
  /** Resource Action of the item being approved or declined. */
  resourceAction?: string;
  /** Approval status. */
  approvalStatus?: ApprovalStatus;
  /** Route name for the approval callback */
  approvalCallbackRoute?: string;
  /** Payload to be sent upon any action on approval request */
  approvalCallbackPayload?: string;
}

/** Request body for calling post-action */
export interface InitiatorCallbackRequest {
  /** Approval status indicating 'Approved' or 'Rejected' */
  approvalStatus: InitiatorCallbackRequestApprovalStatus;
}

/** Response body after handling of approvalCallbackRequest */
export interface InitiatorCallbackResponse {
  /** Confirmation message indicating the result of the operation. */
  message: string;
}

/** A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of results. */
export interface OperationListResult {
  /**
   * List of operations supported by the resource provider
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Operation[];
  /**
   * URL to get the next set of operation list results (if there are any).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Details of a REST API operation, returned from the Resource Provider Operations API */
export interface Operation {
  /**
   * The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for ARM/control-plane operations.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isDataAction?: boolean;
  /** Localized display information for this particular operation. */
  display?: OperationDisplay;
  /**
   * The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is "user,system"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly origin?: Origin;
  /**
   * Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly actionType?: ActionType;
}

/** Localized display information for this particular operation. */
export interface OperationDisplay {
  /**
   * The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft Compute".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provider?: string;
  /**
   * The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job Schedule Collections".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resource?: string;
  /**
   * The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operation?: string;
  /**
   * The short, localized friendly description of the operation; suitable for tool tips and detailed views.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
}

/** The response of a CommunityResource list operation. */
export interface CommunityResourceListResult {
  /** The CommunityResource items on this page */
  value: CommunityResource[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** ManagedResourceGroup related properties */
export interface ManagedResourceGroupConfiguration {
  /** Name of managed resource group */
  name?: string;
  /** The geo-location where the resource lives */
  location?: string;
}

/** GovernedServiceItem Properties */
export interface GovernedServiceItem {
  /** service id */
  id: ServiceIdentifier;
  /**
   * service name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /** governance option for this service (Allow, Deny, ExceptionOnly, or NotApplicable). */
  option?: GovernedServiceItemOption;
  /** initiative enforcement (Enabled or Disabled). */
  enforcement?: GovernedServiceItemEnforcement;
  /** policies set to auditOnly (True or False). */
  auditOnly?: boolean;
  /**
   * initiatives associated with this service
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly initiatives?: string[];
}

/** Role assignment item that indicates which principals should be assigned this role definition */
export interface RoleAssignmentItem {
  /** Role definition identifier */
  id: string;
  /** List of principal IDs to which to assign this role definition */
  principals?: Principal[];
}

/** Principal for maintenance mode or role assignments */
export interface Principal {
  /** The object id associated with the principal */
  id: string;
  /** The type of the object id. We currently allow users, groups, and service principals */
  type: PrincipalType;
}

/** ApprovalSettings Properties */
export interface ApprovalSettings {
  /** Approval required for endpoint creation (Required or NotRequired). */
  endpointCreation?: ApprovalPolicy;
  /** Approval required for endpoint update (Required or NotRequired). */
  endpointUpdate?: ApprovalPolicy;
  /** Approval required for endpoint deletion (Required or NotRequired). */
  endpointDeletion?: ApprovalPolicy;
  /** Approval required for enclave connection creation (Required or NotRequired). */
  connectionCreation?: ApprovalPolicy;
  /** Approval required for enclave connection update (Required or NotRequired). */
  connectionUpdate?: ApprovalPolicy;
  /** Behavior of enclave connection update workflow after endpoint update is approved (Automatic or Manual). */
  connectionUpdateMode?: ApprovalSettingsConnectionUpdateMode;
  /** Approval required for enclave connection deletion (Required or NotRequired). */
  connectionDeletion?: ApprovalPolicy;
  /** Approval required for virtual enclave creation (Required or NotRequired). */
  enclaveCreation?: ApprovalPolicy;
  /** Approval required for virtual enclave deletion (Required or NotRequired). */
  enclaveDeletion?: ApprovalPolicy;
  /** Approval required for toggling maintenance mode (Required or NotRequired). */
  maintenanceMode?: ApprovalPolicy;
  /** Approval required for deploying service catalog templates (Required or NotRequired). */
  serviceCatalogDeployment?: ApprovalPolicy;
  /** Notification will be sent on creation of an Approval Request */
  notificationOnApprovalCreation?: ApprovalPolicy;
  /** Notification will be sent on any action taken (Approve/Reject) on an Approval Request */
  notificationOnApprovalAction?: ApprovalPolicy;
  /** Notification will be sent on deletion of an Approval Request */
  notificationOnApprovalDeletion?: ApprovalPolicy;
  /** List of mandatory approvers for the approval request */
  mandatoryApprovers?: MandatoryApprover[];
  /** Minimum number of approvers required for the approval request */
  minimumApproversRequired?: number;
}

/** Approver Metadata for approvals request. */
export interface MandatoryApprover {
  /** EntraId of the approver */
  approverEntraId: string;
}

/** Maintenance Mode */
export interface MaintenanceModeConfiguration {
  /** Current mode of Maintenance Mode Configuration */
  mode: MaintenanceModeConfigurationMode;
  /** The user, group or service principal object affected by Maintenance Mode */
  principals?: Principal[];
  /** Justification for entering or exiting Maintenance Mode */
  justification?: MaintenanceModeConfigurationJustification;
}

/** Managed service identity (system assigned and/or user assigned identities) */
export interface ManagedServiceIdentity {
  /**
   * The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /** Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed). */
  type: ManagedServiceIdentityType;
  /** The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests. */
  userAssignedIdentities?: {
    [propertyName: string]: UserAssignedIdentity | null;
  };
}

/** User assigned identity properties */
export interface UserAssignedIdentity {
  /**
   * The principal ID of the assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The client ID of the assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly clientId?: string;
}

/** The response of a CommunityEndpointResource list operation. */
export interface CommunityEndpointResourceListResult {
  /** The CommunityEndpointResource items on this page */
  value: CommunityEndpointResource[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** Base type for destination rules. */
export interface CommunityEndpointDestinationRule {
  /** Endpoint Rule Name. */
  name?: string;
  /** Destination address. Can include multiple CIDR/IP Addresses or fqdn tags or fqdns (for community endpoint) separated by commas. */
  destination?: string;
  /** Port. Can include multiple ports separated by commas or a range indicated by a hyphen. */
  port?: string;
  /** Destination Type. */
  destinationType?: DestinationType;
  /** Protocols. Options specified by Endpoint Protocol Enum. */
  protocols?: CommunityEndpointProtocol[];
  /** Transit Hub Resource Id. */
  transitHubResourceId?: string;
}

/** The response of a TransitHubResource list operation. */
export interface TransitHubResourceListResult {
  /** The TransitHubResource items on this page */
  value: TransitHubResource[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** TransitOption Properties */
export interface TransitOption {
  /** Transit Option Type. */
  type?: TransitOptionType;
  /** Transit Option Params */
  params?: TransitOptionParams;
}

/** TransitOptionParams Properties */
export interface TransitOptionParams {
  /** Transit Option Params scaleUnits. */
  scaleUnits?: number;
  /** Transit Option Params remoteVirtualNetworkId. */
  remoteVirtualNetworkId?: string;
}

/** The response of a EnclaveConnectionResource list operation. */
export interface EnclaveConnectionResourceListResult {
  /** The EnclaveConnectionResource items on this page */
  value: EnclaveConnectionResource[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** The response of a EnclaveResource list operation. */
export interface EnclaveResourceListResult {
  /** The EnclaveResource items on this page */
  value: EnclaveResource[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** Enclave Virtual Network Properties */
export interface EnclaveVirtualNetwork {
  /** Network Name. */
  name?: string;
  /** Network Size. */
  networkSize?: string;
  /** Custom CIDR Range. */
  customCidrRange?: string;
  /** Subnet Configurations. */
  subnetConfigurations?: SubnetConfiguration[];
  /** Allow Subnet Communication. */
  allowSubnetCommunication?: boolean;
  /** Connect to Azure Services (True or False). */
  connectToAzureServices?: boolean;
}

/** Subnet Configuration */
export interface SubnetConfiguration {
  /** Subnet name. */
  name: string;
  /**
   * Subnet ID.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /** Network prefix size. */
  networkPrefixSize: number;
  /** Subnet delegation. */
  subnetDelegation?: string;
  /**
   * Address prefix.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly addressPrefix?: string;
  /**
   * Network security group ID.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkSecurityGroupId?: string;
}

/** Enclave Address Spaces */
export interface EnclaveAddressSpaces {
  /** Enclave Address Space */
  enclaveAddressSpace?: string;
  /** Managed Address Space */
  managedAddressSpace?: string;
}

/** Virtual Enclave Default Settings */
export interface EnclaveDefaultSettings {
  /** Key Vault Resource Id. */
  keyVaultResourceId?: string;
  /** Storage Account Resource Id. */
  storageAccountResourceId?: string;
  /** Log Analytics Resource Ids. */
  logAnalyticsResourceIdCollection?: string[];
  /** Diagnostic Destination. */
  diagnosticDestination?: DiagnosticDestination;
}

/** The response of a EnclaveEndpointResource list operation. */
export interface EnclaveEndpointResourceListResult {
  /** The EnclaveEndpointResource items on this page */
  value: EnclaveEndpointResource[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** Enclave Endpoint Rule Properties */
export interface EnclaveEndpointDestinationRule {
  /** Endpoint Rule Name. */
  name?: string;
  /** Destination address. Can include multiple CIDR/IP Addresses or fqdn tags or fqdns (for community endpoint) separated by commas. */
  destination?: string;
  /** Port. Can include multiple ports separated by commas or a range indicated by a hyphen. */
  port?: string;
  /** Protocols. Options specified by Endpoint Protocol Enum. */
  protocols?: EnclaveEndpointProtocol[];
}

/** The response of a WorkloadResource list operation. */
export interface WorkloadResourceListResult {
  /** The WorkloadResource items on this page */
  value: WorkloadResource[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** Community Patch Resource */
export interface CommunityPatchResource {
  /** Community Patch properties */
  properties?: UpdateCommunityPatchProperties;
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The managed service identities assigned to this resource. */
  identity?: AzureResourceManagerCommonTypesManagedServiceIdentityUpdate;
}

/**
 * A copy of the input model `T` with only the properties that are visible during the
 * "Update" resource lifecycle phase.
 *
 * The "Update" lifecycle phase is used for properties passed as parameters to operations
 * that update data, like HTTP PATCH operations.
 *
 * This transformation will include only the properties that have the `Lifecycle.Update`
 * visibility modifier, and the types of all properties will be replaced with the
 * equivalent `CreateOrUpdate` transformation.
 *
 * If a `NameTemplate` is provided, the new model will be named according to the template.
 * The template uses the same syntax as the `@friendlyName` decorator.
 */
export interface UpdateCommunityPatchProperties {
  /** Address Space. */
  addressSpace?: string;
  /** Dns Servers. */
  dnsServers?: string[];
  /** Managed resource group configuration. */
  managedResourceGroupConfiguration?: ManagedResourceGroupConfiguration;
  /** List of services governed by a community. */
  governedServiceList?: GovernedServiceItem[];
  /** Community role assignments */
  communityRoleAssignments?: RoleAssignmentItem[];
  /** Approval requirements for various actions on the community's resources. */
  approvalSettings?: ApprovalSettings;
  /** Maintenance Mode configuration. */
  maintenanceModeConfiguration?: MaintenanceModeConfigurationUpdate;
}

/** Maintenance Mode */
export interface MaintenanceModeConfigurationUpdate {
  /** Current mode of Maintenance Mode Configuration */
  mode?: MaintenanceModeConfigurationUpdateMode;
  /** The user, group or service principal object affected by Maintenance Mode */
  principals?: Principal[];
  /** Justification for entering or exiting Maintenance Mode */
  justification?: MaintenanceModeConfigurationUpdateJustification;
}

/** Managed service identity (system assigned and/or user assigned identities) */
export interface AzureResourceManagerCommonTypesManagedServiceIdentityUpdate {
  /** The type of managed identity assigned to this resource. */
  type?: ManagedServiceIdentityType;
  /** The identities assigned to this resource by the user. */
  userAssignedIdentities?: {
    [
      propertyName: string
    ]: Components19Kgb1NSchemasAzureResourcemanagerCommontypesManagedserviceidentityupdatePropertiesUserassignedidentitiesAdditionalproperties | null;
  };
}

/** Request to the action call to check address space availability. */
export interface CheckAddressSpaceAvailabilityRequest {
  /** Resource Id of the Community */
  communityResourceId: string;
  /** Information about the enclave virtual network */
  enclaveVirtualNetwork: EnclaveVirtualNetwork;
}

/** Response of availability of the requested address space. */
export interface CheckAddressSpaceAvailabilityResponse {
  /** Boolean representing whether the address space is available. */
  value: boolean;
}

/** Community Endpoint Patch Resource */
export interface CommunityEndpointPatchResource {
  /** Community Endpoint Patch properties */
  properties?: UpdateCommunityEndpointPatchProperties;
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
}

/**
 * A copy of the input model `T` with only the properties that are visible during the
 * "Update" resource lifecycle phase.
 *
 * The "Update" lifecycle phase is used for properties passed as parameters to operations
 * that update data, like HTTP PATCH operations.
 *
 * This transformation will include only the properties that have the `Lifecycle.Update`
 * visibility modifier, and the types of all properties will be replaced with the
 * equivalent `CreateOrUpdate` transformation.
 *
 * If a `NameTemplate` is provided, the new model will be named according to the template.
 * The template uses the same syntax as the `@friendlyName` decorator.
 */
export interface UpdateCommunityEndpointPatchProperties {
  /** Community Endpoint Rule Collection. */
  ruleCollection?: CommunityEndpointDestinationRule[];
  /** List of resource ids created by community endpoint. */
  resourceCollection?: string[];
}

/** Request body for calling post-action */
export interface ApprovalCallbackRequest {
  /** Resource request action indicating action which needed to be performed upon calling approval-callback post action */
  resourceRequestAction: ApprovalCallbackRequestResourceRequestAction;
  /** Approval status indicating 'Approved' or 'Rejected' */
  approvalStatus: ApprovalCallbackRequestApprovalStatus;
  /** Payload requested by client upon approval action */
  approvalCallbackPayload?: string;
}

/** Response body after handling of approvalCallbackRequest */
export interface ApprovalCallbackResponse {
  /** Confirmation message indicating the result of the operation. */
  message: string;
}

/** Request body for calling post-action */
export interface ApprovalDeletionCallbackRequest {
  /** Resource request action indicating action which needed to be performed upon calling approval-deletion-callback post action */
  resourceRequestAction: ApprovalDeletionCallbackRequestResourceRequestAction;
}

/** Response body after handling of approvalDeletionCallbackRequest */
export interface ApprovalDeletionCallbackResponse {
  /** Confirmation message indicating the result of the operation. */
  message: string;
}

/** TH Patch Resource */
export interface TransitHubPatchResource {
  /** The TransitHub resource. */
  properties?: UpdateTransitHubPatchProperties;
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
}

/**
 * A copy of the input model `T` with only the properties that are visible during the
 * "Update" resource lifecycle phase.
 *
 * The "Update" lifecycle phase is used for properties passed as parameters to operations
 * that update data, like HTTP PATCH operations.
 *
 * This transformation will include only the properties that have the `Lifecycle.Update`
 * visibility modifier, and the types of all properties will be replaced with the
 * equivalent `CreateOrUpdate` transformation.
 *
 * If a `NameTemplate` is provided, the new model will be named according to the template.
 * The template uses the same syntax as the `@friendlyName` decorator.
 */
export interface UpdateTransitHubPatchProperties {
  /**
   * The status of the last operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** The state of the transitHub. */
  state?: TransitHubState;
  /** The TransitOption of the transitHub. */
  transitOption?: TransitOption;
  /** List of resource ids modified by transitHubs. */
  resourceCollection?: string[];
}

/** Enclave Connection Patch Resource */
export interface EnclaveConnectionPatchResource {
  /** Enclave Connection Patch properties */
  properties?: UpdateEnclaveConnectionPatchProperties;
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
}

/**
 * A copy of the input model `T` with only the properties that are visible during the
 * "Update" resource lifecycle phase.
 *
 * The "Update" lifecycle phase is used for properties passed as parameters to operations
 * that update data, like HTTP PATCH operations.
 *
 * This transformation will include only the properties that have the `Lifecycle.Update`
 * visibility modifier, and the types of all properties will be replaced with the
 * equivalent `CreateOrUpdate` transformation.
 *
 * If a `NameTemplate` is provided, the new model will be named according to the template.
 * The template uses the same syntax as the `@friendlyName` decorator.
 */
export interface UpdateEnclaveConnectionPatchProperties {
  /** The state of the enclaveConnection. */
  state?: EnclaveConnectionState;
  /** Community Resource Id. */
  communityResourceId?: string;
  /** Source Resource Id. */
  sourceResourceId?: string;
  /** Source CIDR. */
  sourceCidr?: string;
  /** Source IP group Resource Id. */
  ipGroup?: string;
  /** Destination Endpoint Resource Id. */
  destinationEndpointId?: string;
  /** List of resource ids modified by enclave Connections. */
  resourceCollection?: string[];
}

/** Virtual Enclave Patch Resource */
export interface VirtualEnclavePatchResource {
  /** Virtual Enclave Patch properties */
  properties?: UpdateVirtualEnclavePatchProperties;
  /** The managed service identities assigned to this resource. */
  identity?: AzureResourceManagerCommonTypesManagedServiceIdentityUpdate;
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
}

/**
 * A copy of the input model `T` with only the properties that are visible during the
 * "Update" resource lifecycle phase.
 *
 * The "Update" lifecycle phase is used for properties passed as parameters to operations
 * that update data, like HTTP PATCH operations.
 *
 * This transformation will include only the properties that have the `Lifecycle.Update`
 * visibility modifier, and the types of all properties will be replaced with the
 * equivalent `CreateOrUpdate` transformation.
 *
 * If a `NameTemplate` is provided, the new model will be named according to the template.
 * The template uses the same syntax as the `@friendlyName` decorator.
 */
export interface UpdateVirtualEnclavePatchProperties {
  /** Virtual Network. */
  enclaveVirtualNetwork?: EnclaveVirtualNetwork;
  /** Community Resource Id. */
  communityResourceId?: string;
  /** Default Settings */
  enclaveDefaultSettings?: EnclaveDefaultSettings;
  /** List of resource ids created by Virtual Enclave. */
  resourceCollection?: string[];
  /** Managed resource group configuration. */
  managedResourceGroupConfiguration?: ManagedResourceGroupConfiguration;
  /** Maintenance Mode configuration. */
  maintenanceModeConfiguration?: MaintenanceModeConfigurationUpdate;
  /** Deploy Bastion service (True or False). */
  bastionEnabled?: boolean;
  /** Enclave role assignments */
  enclaveRoleAssignments?: RoleAssignmentItem[];
  /** Workload role assignments */
  workloadRoleAssignments?: RoleAssignmentItem[];
}

/** Enclave Endpoint Patch Resource */
export interface EnclaveEndpointPatchResource {
  /** Enclave Endpoint Patch properties */
  properties?: UpdateEnclaveEndpointPatchProperties;
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
}

/**
 * A copy of the input model `T` with only the properties that are visible during the
 * "Update" resource lifecycle phase.
 *
 * The "Update" lifecycle phase is used for properties passed as parameters to operations
 * that update data, like HTTP PATCH operations.
 *
 * This transformation will include only the properties that have the `Lifecycle.Update`
 * visibility modifier, and the types of all properties will be replaced with the
 * equivalent `CreateOrUpdate` transformation.
 *
 * If a `NameTemplate` is provided, the new model will be named according to the template.
 * The template uses the same syntax as the `@friendlyName` decorator.
 */
export interface UpdateEnclaveEndpointPatchProperties {
  /** Enclave Endpoint Rule Collection. */
  ruleCollection?: EnclaveEndpointDestinationRule[];
  /** List of resource ids created by community endpoint. */
  resourceCollection?: string[];
}

/** Workload Patch Resource */
export interface WorkloadPatchResource {
  /** Workload Patch properties */
  properties?: UpdateWorkloadPatchProperties;
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
}

/**
 * A copy of the input model `T` with only the properties that are visible during the
 * "Update" resource lifecycle phase.
 *
 * The "Update" lifecycle phase is used for properties passed as parameters to operations
 * that update data, like HTTP PATCH operations.
 *
 * This transformation will include only the properties that have the `Lifecycle.Update`
 * visibility modifier, and the types of all properties will be replaced with the
 * equivalent `CreateOrUpdate` transformation.
 *
 * If a `NameTemplate` is provided, the new model will be named according to the template.
 * The template uses the same syntax as the `@friendlyName` decorator.
 */
export interface UpdateWorkloadPatchProperties {
  /**
   * Provisioning State.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** List of resource group ids. */
  resourceGroupCollection?: string[];
}

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export interface ProxyResource extends Resource {}

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export interface TrackedResource extends Resource {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The geo-location where the resource lives */
  location: string;
}

export interface Components19Kgb1NSchemasAzureResourcemanagerCommontypesManagedserviceidentityupdatePropertiesUserassignedidentitiesAdditionalproperties
  extends UserAssignedIdentity {}

/** Approval Model Resource */
export interface ApprovalResource extends ProxyResource {
  /**
   * Provisioning State.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** Parameter for optimizing query results */
  parent1?: string;
  /** Parameter for optimizing query results */
  parent2?: string;
  /** Request metadata for the approval request. */
  requestMetadata?: RequestMetadata;
  /** List of approvers for the approval request */
  approvers?: Approver[];
  /** Ticket ID for the approval request */
  ticketId?: string;
  /** Approval request creation time */
  createdAt?: Date;
  /** Approval request state change time, time at which approval request state changed from pending to approved or rejected. */
  stateChangedAt?: Date;
}

/** Community Model Resource */
export interface CommunityResource extends TrackedResource {
  /** The managed service identities assigned to this resource. */
  identity?: ManagedServiceIdentity;
  /** Address Space. */
  addressSpace?: string;
  /** Dns Servers. */
  dnsServers?: string[];
  /**
   * Provisioning State.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * List of resource ids created by communities.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resourceCollection?: string[];
  /** Managed resource group configuration. */
  managedResourceGroupConfiguration?: ManagedResourceGroupConfiguration;
  /** List of services governed by a community. */
  governedServiceList?: GovernedServiceItem[];
  /** Community role assignments */
  communityRoleAssignments?: RoleAssignmentItem[];
  /** Approval requirements for various actions on the community's resources. */
  approvalSettings?: ApprovalSettings;
  /** Maintenance Mode configuration. */
  maintenanceModeConfiguration?: MaintenanceModeConfiguration;
}

/** CommunityEndpoint Model Resource */
export interface CommunityEndpointResource extends TrackedResource {
  /** Community Endpoint Rule Collection. */
  ruleCollection?: CommunityEndpointDestinationRule[];
  /** List of resource ids created by community endpoint. */
  resourceCollection?: string[];
  /**
   * Provisioning State.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** TransitHub Model Resource */
export interface TransitHubResource extends TrackedResource {
  /**
   * The status of the last operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** The state of the transitHub. */
  state?: TransitHubState;
  /** The TransitOption of the transitHub. */
  transitOption?: TransitOption;
  /** List of resource ids modified by transitHubs. */
  resourceCollection?: string[];
}

/** EnclaveConnection Model Resource */
export interface EnclaveConnectionResource extends TrackedResource {
  /** The state of the enclaveConnection. */
  state?: EnclaveConnectionState;
  /** Community Resource Id. */
  communityResourceId?: string;
  /** Source Resource Id. */
  sourceResourceId?: string;
  /** Source CIDR. */
  sourceCidr?: string;
  /** Source IP group Resource Id. */
  ipGroup?: string;
  /** Destination Endpoint Resource Id. */
  destinationEndpointId?: string;
  /**
   * Provisioning State.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** List of resource ids modified by enclave Connections. */
  resourceCollection?: string[];
}

/** Virtual Enclave Model Resource */
export interface EnclaveResource extends TrackedResource {
  /** The managed service identities assigned to this resource. */
  identity?: ManagedServiceIdentity;
  /**
   * Provisioning State.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** Virtual Network. */
  enclaveVirtualNetwork?: EnclaveVirtualNetwork;
  /**
   * Enclave Address Spaces
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly enclaveAddressSpaces?: EnclaveAddressSpaces;
  /** Community Resource Id. */
  communityResourceId?: string;
  /** Default Settings */
  enclaveDefaultSettings?: EnclaveDefaultSettings;
  /** List of resource ids created by Virtual Enclave. */
  resourceCollection?: string[];
  /** Managed resource group configuration. */
  managedResourceGroupConfiguration?: ManagedResourceGroupConfiguration;
  /** Maintenance Mode configuration. */
  maintenanceModeConfiguration?: MaintenanceModeConfiguration;
  /** Deploy Bastion service (True or False). */
  bastionEnabled?: boolean;
  /** Enclave role assignments */
  enclaveRoleAssignments?: RoleAssignmentItem[];
  /** Workload role assignments */
  workloadRoleAssignments?: RoleAssignmentItem[];
}

/** EnclaveEndpoint Model Resource */
export interface EnclaveEndpointResource extends TrackedResource {
  /** Enclave Endpoint Rule Collection. */
  ruleCollection?: EnclaveEndpointDestinationRule[];
  /** List of resource ids created by community endpoint. */
  resourceCollection?: string[];
  /**
   * Provisioning State.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** Workload Model Resource */
export interface WorkloadResource extends TrackedResource {
  /**
   * Provisioning State.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** List of resource group ids. */
  resourceGroupCollection?: string[];
}

/** Defines headers for Approval_createOrUpdate operation. */
export interface ApprovalCreateOrUpdateHeaders {
  /** A link to the status monitor */
  azureAsyncOperation?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Approval_update operation. */
export interface ApprovalUpdateHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Approval_delete operation. */
export interface ApprovalDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Approval_initiatorCallback operation. */
export interface ApprovalInitiatorCallbackHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Community_createOrUpdate operation. */
export interface CommunityCreateOrUpdateHeaders {
  /** A link to the status monitor */
  azureAsyncOperation?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Community_update operation. */
export interface CommunityUpdateHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Community_delete operation. */
export interface CommunityDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for CommunityEndpoints_createOrUpdate operation. */
export interface CommunityEndpointsCreateOrUpdateHeaders {
  /** A link to the status monitor */
  azureAsyncOperation?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for CommunityEndpoints_update operation. */
export interface CommunityEndpointsUpdateHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for CommunityEndpoints_delete operation. */
export interface CommunityEndpointsDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for CommunityEndpoints_approvalCallback operation. */
export interface CommunityEndpointsApprovalCallbackHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for CommunityEndpoints_approvalDeletionCallback operation. */
export interface CommunityEndpointsApprovalDeletionCallbackHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for TransitHub_createOrUpdate operation. */
export interface TransitHubCreateOrUpdateHeaders {
  /** A link to the status monitor */
  azureAsyncOperation?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for TransitHub_update operation. */
export interface TransitHubUpdateHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for TransitHub_delete operation. */
export interface TransitHubDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for EnclaveConnection_createOrUpdate operation. */
export interface EnclaveConnectionCreateOrUpdateHeaders {
  /** A link to the status monitor */
  azureAsyncOperation?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for EnclaveConnection_update operation. */
export interface EnclaveConnectionUpdateHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for EnclaveConnection_delete operation. */
export interface EnclaveConnectionDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for EnclaveConnection_approvalCallback operation. */
export interface EnclaveConnectionApprovalCallbackHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for EnclaveConnection_approvalDeletionCallback operation. */
export interface EnclaveConnectionApprovalDeletionCallbackHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for VirtualEnclave_createOrUpdate operation. */
export interface VirtualEnclaveCreateOrUpdateHeaders {
  /** A link to the status monitor */
  azureAsyncOperation?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for VirtualEnclave_update operation. */
export interface VirtualEnclaveUpdateHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for VirtualEnclave_delete operation. */
export interface VirtualEnclaveDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for VirtualEnclave_approvalCallback operation. */
export interface VirtualEnclaveApprovalCallbackHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for VirtualEnclave_approvalDeletionCallback operation. */
export interface VirtualEnclaveApprovalDeletionCallbackHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for EnclaveEndpoints_createOrUpdate operation. */
export interface EnclaveEndpointsCreateOrUpdateHeaders {
  /** A link to the status monitor */
  azureAsyncOperation?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for EnclaveEndpoints_update operation. */
export interface EnclaveEndpointsUpdateHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for EnclaveEndpoints_delete operation. */
export interface EnclaveEndpointsDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for EnclaveEndpoints_approvalCallback operation. */
export interface EnclaveEndpointsApprovalCallbackHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for EnclaveEndpoints_approvalDeletionCallback operation. */
export interface EnclaveEndpointsApprovalDeletionCallbackHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Workload_createOrUpdate operation. */
export interface WorkloadCreateOrUpdateHeaders {
  /** A link to the status monitor */
  azureAsyncOperation?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Workload_update operation. */
export interface WorkloadUpdateHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Workload_delete operation. */
export interface WorkloadDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Known values of {@link ProvisioningState} that the service accepts. */
export enum KnownProvisioningState {
  /** Resource has been created. */
  Succeeded = "Succeeded",
  /** Resource creation failed. */
  Failed = "Failed",
  /** Resource creation was canceled. */
  Canceled = "Canceled",
  /** Provisioning State Type Accepted */
  Accepted = "Accepted",
  /** Provisioning State Type Created */
  Created = "Created",
  /** Provisioning State Type Creating */
  Creating = "Creating",
  /** Provisioning State Type Deleted */
  Deleted = "Deleted",
  /** Provisioning State Type Deleting */
  Deleting = "Deleting",
  /** Provisioning State Type NotSpecified */
  NotSpecified = "NotSpecified",
  /** Provisioning State Type Ready */
  Ready = "Ready",
  /** Provisioning State Type Running */
  Running = "Running",
  /** Provisioning State Type Updating */
  Updating = "Updating",
}

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded**: Resource has been created. \
 * **Failed**: Resource creation failed. \
 * **Canceled**: Resource creation was canceled. \
 * **Accepted**: Provisioning State Type Accepted \
 * **Created**: Provisioning State Type Created \
 * **Creating**: Provisioning State Type Creating \
 * **Deleted**: Provisioning State Type Deleted \
 * **Deleting**: Provisioning State Type Deleting \
 * **NotSpecified**: Provisioning State Type NotSpecified \
 * **Ready**: Provisioning State Type Ready \
 * **Running**: Provisioning State Type Running \
 * **Updating**: Provisioning State Type Updating
 */
export type ProvisioningState = string;

/** Known values of {@link ApprovalStatus} that the service accepts. */
export enum KnownApprovalStatus {
  /** ApprovalStatus Type Approved */
  Approved = "Approved",
  /** ApprovalStatus Type Rejected */
  Rejected = "Rejected",
  /** ApprovalStatus Type Pending */
  Pending = "Pending",
  /** ApprovalStatus Type Deleted */
  Deleted = "Deleted",
  /** ApprovalStatus Type Expired */
  Expired = "Expired",
}

/**
 * Defines values for ApprovalStatus. \
 * {@link KnownApprovalStatus} can be used interchangeably with ApprovalStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Approved**: ApprovalStatus Type Approved \
 * **Rejected**: ApprovalStatus Type Rejected \
 * **Pending**: ApprovalStatus Type Pending \
 * **Deleted**: ApprovalStatus Type Deleted \
 * **Expired**: ApprovalStatus Type Expired
 */
export type ApprovalStatus = string;

/** Known values of {@link ActionPerformed} that the service accepts. */
export enum KnownActionPerformed {
  /** ActionPerformed Type Approved */
  Approved = "Approved",
  /** ActionPerformed Type Rejected */
  Rejected = "Rejected",
}

/**
 * Defines values for ActionPerformed. \
 * {@link KnownActionPerformed} can be used interchangeably with ActionPerformed,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Approved**: ActionPerformed Type Approved \
 * **Rejected**: ActionPerformed Type Rejected
 */
export type ActionPerformed = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  /** User */
  User = "User",
  /** Application */
  Application = "Application",
  /** ManagedIdentity */
  ManagedIdentity = "ManagedIdentity",
  /** Key */
  Key = "Key",
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link InitiatorCallbackRequestApprovalStatus} that the service accepts. */
export enum KnownInitiatorCallbackRequestApprovalStatus {
  /** Approved */
  Approved = "Approved",
  /** Rejected */
  Rejected = "Rejected",
}

/**
 * Defines values for InitiatorCallbackRequestApprovalStatus. \
 * {@link KnownInitiatorCallbackRequestApprovalStatus} can be used interchangeably with InitiatorCallbackRequestApprovalStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Approved** \
 * **Rejected**
 */
export type InitiatorCallbackRequestApprovalStatus = string;

/** Known values of {@link Origin} that the service accepts. */
export enum KnownOrigin {
  /** User */
  User = "user",
  /** System */
  System = "system",
  /** UserSystem */
  UserSystem = "user,system",
}

/**
 * Defines values for Origin. \
 * {@link KnownOrigin} can be used interchangeably with Origin,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **user** \
 * **system** \
 * **user,system**
 */
export type Origin = string;

/** Known values of {@link ActionType} that the service accepts. */
export enum KnownActionType {
  /** Internal */
  Internal = "Internal",
}

/**
 * Defines values for ActionType. \
 * {@link KnownActionType} can be used interchangeably with ActionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Internal**
 */
export type ActionType = string;

/** Known values of {@link ServiceIdentifier} that the service accepts. */
export enum KnownServiceIdentifier {
  /** Service identifier for AKS */
  AKS = "AKS",
  /** Service identifier for App Service */
  AppService = "AppService",
  /** Service identifier for Azure Firewalls */
  AzureFirewalls = "AzureFirewalls",
  /** Service identifier for Container Registry */
  ContainerRegistry = "ContainerRegistry",
  /** Service identifier for CosmosDB */
  CosmosDB = "CosmosDB",
  /** Service identifier for Data Connectors */
  DataConnectors = "DataConnectors",
  /** Service identifier for Insights */
  Insights = "Insights",
  /** Service identifier for Key Vault */
  KeyVault = "KeyVault",
  /** Service identifier for Logic */
  Logic = "Logic",
  /** Service identifier for Microsoft SQL */
  MicrosoftSql = "MicrosoftSQL",
  /** Service identifier for Monitoring */
  Monitoring = "Monitoring",
  /** Service identifier for PostgreSQL */
  PostgreSql = "PostgreSQL",
  /** Service identifier for Private DNS Zones */
  PrivateDNSZones = "PrivateDNSZones",
  /** Service identifier for Service Bus */
  ServiceBus = "ServiceBus",
  /** Service identifier for Storage */
  Storage = "Storage",
}

/**
 * Defines values for ServiceIdentifier. \
 * {@link KnownServiceIdentifier} can be used interchangeably with ServiceIdentifier,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AKS**: Service identifier for AKS \
 * **AppService**: Service identifier for App Service \
 * **AzureFirewalls**: Service identifier for Azure Firewalls \
 * **ContainerRegistry**: Service identifier for Container Registry \
 * **CosmosDB**: Service identifier for CosmosDB \
 * **DataConnectors**: Service identifier for Data Connectors \
 * **Insights**: Service identifier for Insights \
 * **KeyVault**: Service identifier for Key Vault \
 * **Logic**: Service identifier for Logic \
 * **MicrosoftSQL**: Service identifier for Microsoft SQL \
 * **Monitoring**: Service identifier for Monitoring \
 * **PostgreSQL**: Service identifier for PostgreSQL \
 * **PrivateDNSZones**: Service identifier for Private DNS Zones \
 * **ServiceBus**: Service identifier for Service Bus \
 * **Storage**: Service identifier for Storage
 */
export type ServiceIdentifier = string;

/** Known values of {@link GovernedServiceItemOption} that the service accepts. */
export enum KnownGovernedServiceItemOption {
  /** Allow */
  Allow = "Allow",
  /** Deny */
  Deny = "Deny",
  /** ExceptionOnly */
  ExceptionOnly = "ExceptionOnly",
  /** NotApplicable */
  NotApplicable = "NotApplicable",
}

/**
 * Defines values for GovernedServiceItemOption. \
 * {@link KnownGovernedServiceItemOption} can be used interchangeably with GovernedServiceItemOption,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Allow** \
 * **Deny** \
 * **ExceptionOnly** \
 * **NotApplicable**
 */
export type GovernedServiceItemOption = string;

/** Known values of {@link GovernedServiceItemEnforcement} that the service accepts. */
export enum KnownGovernedServiceItemEnforcement {
  /** Enabled */
  Enabled = "Enabled",
  /** Disabled */
  Disabled = "Disabled",
}

/**
 * Defines values for GovernedServiceItemEnforcement. \
 * {@link KnownGovernedServiceItemEnforcement} can be used interchangeably with GovernedServiceItemEnforcement,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export type GovernedServiceItemEnforcement = string;

/** Known values of {@link PrincipalType} that the service accepts. */
export enum KnownPrincipalType {
  /** User */
  User = "User",
  /** Group */
  Group = "Group",
  /** ServicePrincipal */
  ServicePrincipal = "ServicePrincipal",
}

/**
 * Defines values for PrincipalType. \
 * {@link KnownPrincipalType} can be used interchangeably with PrincipalType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Group** \
 * **ServicePrincipal**
 */
export type PrincipalType = string;

/** Known values of {@link ApprovalPolicy} that the service accepts. */
export enum KnownApprovalPolicy {
  /** Approval will be required for the specified action. */
  Required = "Required",
  /** Approval will not be required for the specified action. */
  NotRequired = "NotRequired",
}

/**
 * Defines values for ApprovalPolicy. \
 * {@link KnownApprovalPolicy} can be used interchangeably with ApprovalPolicy,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Required**: Approval will be required for the specified action. \
 * **NotRequired**: Approval will not be required for the specified action.
 */
export type ApprovalPolicy = string;

/** Known values of {@link ApprovalSettingsConnectionUpdateMode} that the service accepts. */
export enum KnownApprovalSettingsConnectionUpdateMode {
  /** Automatic */
  Automatic = "Automatic",
  /** Manual */
  Manual = "Manual",
}

/**
 * Defines values for ApprovalSettingsConnectionUpdateMode. \
 * {@link KnownApprovalSettingsConnectionUpdateMode} can be used interchangeably with ApprovalSettingsConnectionUpdateMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Automatic** \
 * **Manual**
 */
export type ApprovalSettingsConnectionUpdateMode = string;

/** Known values of {@link MaintenanceModeConfigurationMode} that the service accepts. */
export enum KnownMaintenanceModeConfigurationMode {
  /** On */
  On = "On",
  /** CanNotDelete */
  CanNotDelete = "CanNotDelete",
  /** Off */
  Off = "Off",
}

/**
 * Defines values for MaintenanceModeConfigurationMode. \
 * {@link KnownMaintenanceModeConfigurationMode} can be used interchangeably with MaintenanceModeConfigurationMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **On** \
 * **CanNotDelete** \
 * **Off**
 */
export type MaintenanceModeConfigurationMode = string;

/** Known values of {@link MaintenanceModeConfigurationJustification} that the service accepts. */
export enum KnownMaintenanceModeConfigurationJustification {
  /** Networking */
  Networking = "Networking",
  /** Governance */
  Governance = "Governance",
  /** Off */
  Off = "Off",
}

/**
 * Defines values for MaintenanceModeConfigurationJustification. \
 * {@link KnownMaintenanceModeConfigurationJustification} can be used interchangeably with MaintenanceModeConfigurationJustification,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Networking** \
 * **Governance** \
 * **Off**
 */
export type MaintenanceModeConfigurationJustification = string;

/** Known values of {@link ManagedServiceIdentityType} that the service accepts. */
export enum KnownManagedServiceIdentityType {
  /** None */
  None = "None",
  /** SystemAssigned */
  SystemAssigned = "SystemAssigned",
  /** UserAssigned */
  UserAssigned = "UserAssigned",
  /** SystemAssignedUserAssigned */
  SystemAssignedUserAssigned = "SystemAssigned,UserAssigned",
}

/**
 * Defines values for ManagedServiceIdentityType. \
 * {@link KnownManagedServiceIdentityType} can be used interchangeably with ManagedServiceIdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **SystemAssigned** \
 * **UserAssigned** \
 * **SystemAssigned,UserAssigned**
 */
export type ManagedServiceIdentityType = string;

/** Known values of {@link DestinationType} that the service accepts. */
export enum KnownDestinationType {
  /** DestinationType Type FQDN */
  Fqdn = "FQDN",
  /** DestinationType Type FQDNTag */
  FqdnTag = "FQDNTag",
  /** DestinationType Type IPAddress */
  IPAddress = "IPAddress",
  /** DestinationType Type PrivateNetwork */
  PrivateNetwork = "PrivateNetwork",
}

/**
 * Defines values for DestinationType. \
 * {@link KnownDestinationType} can be used interchangeably with DestinationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **FQDN**: DestinationType Type FQDN \
 * **FQDNTag**: DestinationType Type FQDNTag \
 * **IPAddress**: DestinationType Type IPAddress \
 * **PrivateNetwork**: DestinationType Type PrivateNetwork
 */
export type DestinationType = string;

/** Known values of {@link CommunityEndpointProtocol} that the service accepts. */
export enum KnownCommunityEndpointProtocol {
  /** CommunityEndpointProtocol Type ANY */
  ANY = "ANY",
  /** CommunityEndpointProtocol Type TCP */
  TCP = "TCP",
  /** CommunityEndpointProtocol Type UDP */
  UDP = "UDP",
  /** CommunityEndpointProtocol Type ICMP */
  Icmp = "ICMP",
  /** CommunityEndpointProtocol Type ESP */
  ESP = "ESP",
  /** CommunityEndpointProtocol Type AH */
  AH = "AH",
  /** CommunityEndpointProtocol Type HTTPS */
  Https = "HTTPS",
  /** CommunityEndpointProtocol Type HTTP */
  Http = "HTTP",
}

/**
 * Defines values for CommunityEndpointProtocol. \
 * {@link KnownCommunityEndpointProtocol} can be used interchangeably with CommunityEndpointProtocol,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ANY**: CommunityEndpointProtocol Type ANY \
 * **TCP**: CommunityEndpointProtocol Type TCP \
 * **UDP**: CommunityEndpointProtocol Type UDP \
 * **ICMP**: CommunityEndpointProtocol Type ICMP \
 * **ESP**: CommunityEndpointProtocol Type ESP \
 * **AH**: CommunityEndpointProtocol Type AH \
 * **HTTPS**: CommunityEndpointProtocol Type HTTPS \
 * **HTTP**: CommunityEndpointProtocol Type HTTP
 */
export type CommunityEndpointProtocol = string;

/** Known values of {@link TransitHubState} that the service accepts. */
export enum KnownTransitHubState {
  /** TransitHubState Type PendingApproval */
  PendingApproval = "PendingApproval",
  /** TransitHubState Type Approved */
  Approved = "Approved",
  /** TransitHubState Type PendingUpdate */
  PendingUpdate = "PendingUpdate",
  /** TransitHubState Type Active */
  Active = "Active",
  /** TransitHubState Type Failed */
  Failed = "Failed",
}

/**
 * Defines values for TransitHubState. \
 * {@link KnownTransitHubState} can be used interchangeably with TransitHubState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **PendingApproval**: TransitHubState Type PendingApproval \
 * **Approved**: TransitHubState Type Approved \
 * **PendingUpdate**: TransitHubState Type PendingUpdate \
 * **Active**: TransitHubState Type Active \
 * **Failed**: TransitHubState Type Failed
 */
export type TransitHubState = string;

/** Known values of {@link TransitOptionType} that the service accepts. */
export enum KnownTransitOptionType {
  /** TransitOptionType ExpressRoute */
  ExpressRoute = "ExpressRoute",
  /** TransitOptionType Gateway */
  Gateway = "Gateway",
  /** TransitOptionType Peering */
  Peering = "Peering",
}

/**
 * Defines values for TransitOptionType. \
 * {@link KnownTransitOptionType} can be used interchangeably with TransitOptionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ExpressRoute**: TransitOptionType ExpressRoute \
 * **Gateway**: TransitOptionType Gateway \
 * **Peering**: TransitOptionType Peering
 */
export type TransitOptionType = string;

/** Known values of {@link EnclaveConnectionState} that the service accepts. */
export enum KnownEnclaveConnectionState {
  /** EnclaveConnectionState Type Pending Approval */
  PendingApproval = "PendingApproval",
  /** EnclaveConnectionState Type Pending Update */
  PendingUpdate = "PendingUpdate",
  /** EnclaveConnectionState Type Approved */
  Approved = "Approved",
  /** EnclaveConnectionState Type Active */
  Active = "Active",
  /** EnclaveConnectionState Type Failed */
  Failed = "Failed",
  /** EnclaveConnectionState Type Connected */
  Connected = "Connected",
  /** EnclaveConnectionState Type Disconnected */
  Disconnected = "Disconnected",
}

/**
 * Defines values for EnclaveConnectionState. \
 * {@link KnownEnclaveConnectionState} can be used interchangeably with EnclaveConnectionState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **PendingApproval**: EnclaveConnectionState Type Pending Approval \
 * **PendingUpdate**: EnclaveConnectionState Type Pending Update \
 * **Approved**: EnclaveConnectionState Type Approved \
 * **Active**: EnclaveConnectionState Type Active \
 * **Failed**: EnclaveConnectionState Type Failed \
 * **Connected**: EnclaveConnectionState Type Connected \
 * **Disconnected**: EnclaveConnectionState Type Disconnected
 */
export type EnclaveConnectionState = string;

/** Known values of {@link DiagnosticDestination} that the service accepts. */
export enum KnownDiagnosticDestination {
  /** DiagnosticDestination Type CommunityOnly */
  CommunityOnly = "CommunityOnly",
  /** DiagnosticDestination Type EnclaveOnly */
  EnclaveOnly = "EnclaveOnly",
  /** DiagnosticDestination Type Both */
  Both = "Both",
}

/**
 * Defines values for DiagnosticDestination. \
 * {@link KnownDiagnosticDestination} can be used interchangeably with DiagnosticDestination,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **CommunityOnly**: DiagnosticDestination Type CommunityOnly \
 * **EnclaveOnly**: DiagnosticDestination Type EnclaveOnly \
 * **Both**: DiagnosticDestination Type Both
 */
export type DiagnosticDestination = string;

/** Known values of {@link EnclaveEndpointProtocol} that the service accepts. */
export enum KnownEnclaveEndpointProtocol {
  /** EndpointProtocol Type ANY */
  ANY = "ANY",
  /** EndpointProtocol Type TCP */
  TCP = "TCP",
  /** EndpointProtocol Type UDP */
  UDP = "UDP",
  /** EndpointProtocol Type ICMP */
  Icmp = "ICMP",
  /** EndpointProtocol Type ESP */
  ESP = "ESP",
  /** EndpointProtocol Type AH */
  AH = "AH",
}

/**
 * Defines values for EnclaveEndpointProtocol. \
 * {@link KnownEnclaveEndpointProtocol} can be used interchangeably with EnclaveEndpointProtocol,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ANY**: EndpointProtocol Type ANY \
 * **TCP**: EndpointProtocol Type TCP \
 * **UDP**: EndpointProtocol Type UDP \
 * **ICMP**: EndpointProtocol Type ICMP \
 * **ESP**: EndpointProtocol Type ESP \
 * **AH**: EndpointProtocol Type AH
 */
export type EnclaveEndpointProtocol = string;

/** Known values of {@link MaintenanceModeConfigurationUpdateMode} that the service accepts. */
export enum KnownMaintenanceModeConfigurationUpdateMode {
  /** On */
  On = "On",
  /** CanNotDelete */
  CanNotDelete = "CanNotDelete",
  /** Off */
  Off = "Off",
}

/**
 * Defines values for MaintenanceModeConfigurationUpdateMode. \
 * {@link KnownMaintenanceModeConfigurationUpdateMode} can be used interchangeably with MaintenanceModeConfigurationUpdateMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **On** \
 * **CanNotDelete** \
 * **Off**
 */
export type MaintenanceModeConfigurationUpdateMode = string;

/** Known values of {@link MaintenanceModeConfigurationUpdateJustification} that the service accepts. */
export enum KnownMaintenanceModeConfigurationUpdateJustification {
  /** Networking */
  Networking = "Networking",
  /** Governance */
  Governance = "Governance",
  /** Off */
  Off = "Off",
}

/**
 * Defines values for MaintenanceModeConfigurationUpdateJustification. \
 * {@link KnownMaintenanceModeConfigurationUpdateJustification} can be used interchangeably with MaintenanceModeConfigurationUpdateJustification,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Networking** \
 * **Governance** \
 * **Off**
 */
export type MaintenanceModeConfigurationUpdateJustification = string;

/** Known values of {@link ApprovalCallbackRequestResourceRequestAction} that the service accepts. */
export enum KnownApprovalCallbackRequestResourceRequestAction {
  /** Create */
  Create = "Create",
  /** Delete */
  Delete = "Delete",
  /** Update */
  Update = "Update",
  /** Reset */
  Reset = "Reset",
}

/**
 * Defines values for ApprovalCallbackRequestResourceRequestAction. \
 * {@link KnownApprovalCallbackRequestResourceRequestAction} can be used interchangeably with ApprovalCallbackRequestResourceRequestAction,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Create** \
 * **Delete** \
 * **Update** \
 * **Reset**
 */
export type ApprovalCallbackRequestResourceRequestAction = string;

/** Known values of {@link ApprovalCallbackRequestApprovalStatus} that the service accepts. */
export enum KnownApprovalCallbackRequestApprovalStatus {
  /** Approved */
  Approved = "Approved",
  /** Rejected */
  Rejected = "Rejected",
}

/**
 * Defines values for ApprovalCallbackRequestApprovalStatus. \
 * {@link KnownApprovalCallbackRequestApprovalStatus} can be used interchangeably with ApprovalCallbackRequestApprovalStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Approved** \
 * **Rejected**
 */
export type ApprovalCallbackRequestApprovalStatus = string;

/** Known values of {@link ApprovalDeletionCallbackRequestResourceRequestAction} that the service accepts. */
export enum KnownApprovalDeletionCallbackRequestResourceRequestAction {
  /** Create */
  Create = "Create",
  /** Delete */
  Delete = "Delete",
  /** Update */
  Update = "Update",
}

/**
 * Defines values for ApprovalDeletionCallbackRequestResourceRequestAction. \
 * {@link KnownApprovalDeletionCallbackRequestResourceRequestAction} can be used interchangeably with ApprovalDeletionCallbackRequestResourceRequestAction,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Create** \
 * **Delete** \
 * **Update**
 */
export type ApprovalDeletionCallbackRequestResourceRequestAction = string;

/** Optional parameters. */
export interface ApprovalListByParentOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByParent operation. */
export type ApprovalListByParentResponse = ApprovalResourceListResult;

/** Optional parameters. */
export interface ApprovalGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ApprovalGetResponse = ApprovalResource;

/** Optional parameters. */
export interface ApprovalCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type ApprovalCreateOrUpdateResponse = ApprovalResource;

/** Optional parameters. */
export interface ApprovalUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type ApprovalUpdateResponse = ApprovalResource;

/** Optional parameters. */
export interface ApprovalDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type ApprovalDeleteResponse = ApprovalDeleteHeaders;

/** Optional parameters. */
export interface ApprovalInitiatorCallbackOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the initiatorCallback operation. */
export type ApprovalInitiatorCallbackResponse = InitiatorCallbackResponse;

/** Optional parameters. */
export interface ApprovalListByParentNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByParentNext operation. */
export type ApprovalListByParentNextResponse = ApprovalResourceListResult;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationListResult;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export interface CommunityListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type CommunityListBySubscriptionResponse = CommunityResourceListResult;

/** Optional parameters. */
export interface CommunityListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type CommunityListByResourceGroupResponse = CommunityResourceListResult;

/** Optional parameters. */
export interface CommunityGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type CommunityGetResponse = CommunityResource;

/** Optional parameters. */
export interface CommunityCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type CommunityCreateOrUpdateResponse = CommunityResource;

/** Optional parameters. */
export interface CommunityUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type CommunityUpdateResponse = CommunityResource;

/** Optional parameters. */
export interface CommunityDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type CommunityDeleteResponse = CommunityDeleteHeaders;

/** Optional parameters. */
export interface CommunityCheckAddressSpaceAvailabilityOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the checkAddressSpaceAvailability operation. */
export type CommunityCheckAddressSpaceAvailabilityResponse =
  CheckAddressSpaceAvailabilityResponse;

/** Optional parameters. */
export interface CommunityListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type CommunityListBySubscriptionNextResponse =
  CommunityResourceListResult;

/** Optional parameters. */
export interface CommunityListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type CommunityListByResourceGroupNextResponse =
  CommunityResourceListResult;

/** Optional parameters. */
export interface CommunityEndpointsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type CommunityEndpointsListBySubscriptionResponse =
  CommunityEndpointResourceListResult;

/** Optional parameters. */
export interface CommunityEndpointsListByCommunityResourceOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByCommunityResource operation. */
export type CommunityEndpointsListByCommunityResourceResponse =
  CommunityEndpointResourceListResult;

/** Optional parameters. */
export interface CommunityEndpointsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type CommunityEndpointsGetResponse = CommunityEndpointResource;

/** Optional parameters. */
export interface CommunityEndpointsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type CommunityEndpointsCreateOrUpdateResponse =
  CommunityEndpointResource;

/** Optional parameters. */
export interface CommunityEndpointsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type CommunityEndpointsUpdateResponse = CommunityEndpointResource;

/** Optional parameters. */
export interface CommunityEndpointsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type CommunityEndpointsDeleteResponse = CommunityEndpointsDeleteHeaders;

/** Optional parameters. */
export interface CommunityEndpointsApprovalCallbackOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the approvalCallback operation. */
export type CommunityEndpointsApprovalCallbackResponse =
  ApprovalCallbackResponse;

/** Optional parameters. */
export interface CommunityEndpointsApprovalDeletionCallbackOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the approvalDeletionCallback operation. */
export type CommunityEndpointsApprovalDeletionCallbackResponse =
  ApprovalDeletionCallbackResponse;

/** Optional parameters. */
export interface CommunityEndpointsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type CommunityEndpointsListBySubscriptionNextResponse =
  CommunityEndpointResourceListResult;

/** Optional parameters. */
export interface CommunityEndpointsListByCommunityResourceNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByCommunityResourceNext operation. */
export type CommunityEndpointsListByCommunityResourceNextResponse =
  CommunityEndpointResourceListResult;

/** Optional parameters. */
export interface TransitHubListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type TransitHubListBySubscriptionResponse = TransitHubResourceListResult;

/** Optional parameters. */
export interface TransitHubListByCommunityResourceOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByCommunityResource operation. */
export type TransitHubListByCommunityResourceResponse =
  TransitHubResourceListResult;

/** Optional parameters. */
export interface TransitHubGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type TransitHubGetResponse = TransitHubResource;

/** Optional parameters. */
export interface TransitHubCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type TransitHubCreateOrUpdateResponse = TransitHubResource;

/** Optional parameters. */
export interface TransitHubUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type TransitHubUpdateResponse = TransitHubResource;

/** Optional parameters. */
export interface TransitHubDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type TransitHubDeleteResponse = TransitHubDeleteHeaders;

/** Optional parameters. */
export interface TransitHubListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type TransitHubListBySubscriptionNextResponse =
  TransitHubResourceListResult;

/** Optional parameters. */
export interface TransitHubListByCommunityResourceNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByCommunityResourceNext operation. */
export type TransitHubListByCommunityResourceNextResponse =
  TransitHubResourceListResult;

/** Optional parameters. */
export interface EnclaveConnectionListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type EnclaveConnectionListBySubscriptionResponse =
  EnclaveConnectionResourceListResult;

/** Optional parameters. */
export interface EnclaveConnectionListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type EnclaveConnectionListByResourceGroupResponse =
  EnclaveConnectionResourceListResult;

/** Optional parameters. */
export interface EnclaveConnectionGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type EnclaveConnectionGetResponse = EnclaveConnectionResource;

/** Optional parameters. */
export interface EnclaveConnectionCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type EnclaveConnectionCreateOrUpdateResponse = EnclaveConnectionResource;

/** Optional parameters. */
export interface EnclaveConnectionUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type EnclaveConnectionUpdateResponse = EnclaveConnectionResource;

/** Optional parameters. */
export interface EnclaveConnectionDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type EnclaveConnectionDeleteResponse = EnclaveConnectionDeleteHeaders;

/** Optional parameters. */
export interface EnclaveConnectionApprovalCallbackOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the approvalCallback operation. */
export type EnclaveConnectionApprovalCallbackResponse =
  ApprovalCallbackResponse;

/** Optional parameters. */
export interface EnclaveConnectionApprovalDeletionCallbackOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the approvalDeletionCallback operation. */
export type EnclaveConnectionApprovalDeletionCallbackResponse =
  ApprovalDeletionCallbackResponse;

/** Optional parameters. */
export interface EnclaveConnectionListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type EnclaveConnectionListBySubscriptionNextResponse =
  EnclaveConnectionResourceListResult;

/** Optional parameters. */
export interface EnclaveConnectionListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type EnclaveConnectionListByResourceGroupNextResponse =
  EnclaveConnectionResourceListResult;

/** Optional parameters. */
export interface VirtualEnclaveListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type VirtualEnclaveListBySubscriptionResponse =
  EnclaveResourceListResult;

/** Optional parameters. */
export interface VirtualEnclaveListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type VirtualEnclaveListByResourceGroupResponse =
  EnclaveResourceListResult;

/** Optional parameters. */
export interface VirtualEnclaveGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type VirtualEnclaveGetResponse = EnclaveResource;

/** Optional parameters. */
export interface VirtualEnclaveCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type VirtualEnclaveCreateOrUpdateResponse = EnclaveResource;

/** Optional parameters. */
export interface VirtualEnclaveUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type VirtualEnclaveUpdateResponse = EnclaveResource;

/** Optional parameters. */
export interface VirtualEnclaveDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type VirtualEnclaveDeleteResponse = VirtualEnclaveDeleteHeaders;

/** Optional parameters. */
export interface VirtualEnclaveApprovalCallbackOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the approvalCallback operation. */
export type VirtualEnclaveApprovalCallbackResponse = ApprovalCallbackResponse;

/** Optional parameters. */
export interface VirtualEnclaveApprovalDeletionCallbackOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the approvalDeletionCallback operation. */
export type VirtualEnclaveApprovalDeletionCallbackResponse =
  ApprovalDeletionCallbackResponse;

/** Optional parameters. */
export interface VirtualEnclaveListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type VirtualEnclaveListBySubscriptionNextResponse =
  EnclaveResourceListResult;

/** Optional parameters. */
export interface VirtualEnclaveListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type VirtualEnclaveListByResourceGroupNextResponse =
  EnclaveResourceListResult;

/** Optional parameters. */
export interface EnclaveEndpointsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type EnclaveEndpointsListBySubscriptionResponse =
  EnclaveEndpointResourceListResult;

/** Optional parameters. */
export interface EnclaveEndpointsListByEnclaveResourceOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByEnclaveResource operation. */
export type EnclaveEndpointsListByEnclaveResourceResponse =
  EnclaveEndpointResourceListResult;

/** Optional parameters. */
export interface EnclaveEndpointsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type EnclaveEndpointsGetResponse = EnclaveEndpointResource;

/** Optional parameters. */
export interface EnclaveEndpointsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type EnclaveEndpointsCreateOrUpdateResponse = EnclaveEndpointResource;

/** Optional parameters. */
export interface EnclaveEndpointsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type EnclaveEndpointsUpdateResponse = EnclaveEndpointResource;

/** Optional parameters. */
export interface EnclaveEndpointsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type EnclaveEndpointsDeleteResponse = EnclaveEndpointsDeleteHeaders;

/** Optional parameters. */
export interface EnclaveEndpointsApprovalCallbackOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the approvalCallback operation. */
export type EnclaveEndpointsApprovalCallbackResponse = ApprovalCallbackResponse;

/** Optional parameters. */
export interface EnclaveEndpointsApprovalDeletionCallbackOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the approvalDeletionCallback operation. */
export type EnclaveEndpointsApprovalDeletionCallbackResponse =
  ApprovalDeletionCallbackResponse;

/** Optional parameters. */
export interface EnclaveEndpointsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type EnclaveEndpointsListBySubscriptionNextResponse =
  EnclaveEndpointResourceListResult;

/** Optional parameters. */
export interface EnclaveEndpointsListByEnclaveResourceNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByEnclaveResourceNext operation. */
export type EnclaveEndpointsListByEnclaveResourceNextResponse =
  EnclaveEndpointResourceListResult;

/** Optional parameters. */
export interface WorkloadListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type WorkloadListBySubscriptionResponse = WorkloadResourceListResult;

/** Optional parameters. */
export interface WorkloadListByEnclaveResourceOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByEnclaveResource operation. */
export type WorkloadListByEnclaveResourceResponse = WorkloadResourceListResult;

/** Optional parameters. */
export interface WorkloadGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type WorkloadGetResponse = WorkloadResource;

/** Optional parameters. */
export interface WorkloadCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type WorkloadCreateOrUpdateResponse = WorkloadResource;

/** Optional parameters. */
export interface WorkloadUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type WorkloadUpdateResponse = WorkloadResource;

/** Optional parameters. */
export interface WorkloadDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type WorkloadDeleteResponse = WorkloadDeleteHeaders;

/** Optional parameters. */
export interface WorkloadListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type WorkloadListBySubscriptionNextResponse = WorkloadResourceListResult;

/** Optional parameters. */
export interface WorkloadListByEnclaveResourceNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByEnclaveResourceNext operation. */
export type WorkloadListByEnclaveResourceNextResponse =
  WorkloadResourceListResult;

/** Optional parameters. */
export interface MissionClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
