/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { CommunityEndpoints } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { MissionClient } from "../missionClient.js";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl.js";
import {
  CommunityEndpointResource,
  CommunityEndpointsListBySubscriptionNextOptionalParams,
  CommunityEndpointsListBySubscriptionOptionalParams,
  CommunityEndpointsListBySubscriptionResponse,
  CommunityEndpointsListByCommunityResourceNextOptionalParams,
  CommunityEndpointsListByCommunityResourceOptionalParams,
  CommunityEndpointsListByCommunityResourceResponse,
  CommunityEndpointsGetOptionalParams,
  CommunityEndpointsGetResponse,
  CommunityEndpointsCreateOrUpdateOptionalParams,
  CommunityEndpointsCreateOrUpdateResponse,
  CommunityEndpointResourceUpdate,
  CommunityEndpointsUpdateOptionalParams,
  CommunityEndpointsUpdateResponse,
  CommunityEndpointsDeleteOptionalParams,
  ApprovalCallbackRequest,
  CommunityEndpointsApprovalCallbackOptionalParams,
  CommunityEndpointsApprovalCallbackResponse,
  ApprovalDeletionCallbackRequest,
  CommunityEndpointsApprovalDeletionCallbackOptionalParams,
  CommunityEndpointsApprovalDeletionCallbackResponse,
  CommunityEndpointsListBySubscriptionNextResponse,
  CommunityEndpointsListByCommunityResourceNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing CommunityEndpoints operations. */
export class CommunityEndpointsImpl implements CommunityEndpoints {
  private readonly client: MissionClient;

  /**
   * Initialize a new instance of the class CommunityEndpoints class.
   * @param client Reference to the service client
   */
  constructor(client: MissionClient) {
    this.client = client;
  }

  /**
   * List CommunityEndpointResource resources by subscription ID
   * @param communityName The name of the communityResource Resource
   * @param options The options parameters.
   */
  public listBySubscription(
    communityName: string,
    options?: CommunityEndpointsListBySubscriptionOptionalParams,
  ): PagedAsyncIterableIterator<CommunityEndpointResource> {
    const iter = this.listBySubscriptionPagingAll(communityName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionPagingPage(
          communityName,
          options,
          settings,
        );
      },
    };
  }

  private async *listBySubscriptionPagingPage(
    communityName: string,
    options?: CommunityEndpointsListBySubscriptionOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<CommunityEndpointResource[]> {
    let result: CommunityEndpointsListBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySubscription(communityName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySubscriptionNext(
        communityName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySubscriptionPagingAll(
    communityName: string,
    options?: CommunityEndpointsListBySubscriptionOptionalParams,
  ): AsyncIterableIterator<CommunityEndpointResource> {
    for await (const page of this.listBySubscriptionPagingPage(
      communityName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List CommunityEndpointResource resources by CommunityResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communityName The name of the communityResource Resource
   * @param options The options parameters.
   */
  public listByCommunityResource(
    resourceGroupName: string,
    communityName: string,
    options?: CommunityEndpointsListByCommunityResourceOptionalParams,
  ): PagedAsyncIterableIterator<CommunityEndpointResource> {
    const iter = this.listByCommunityResourcePagingAll(
      resourceGroupName,
      communityName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByCommunityResourcePagingPage(
          resourceGroupName,
          communityName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByCommunityResourcePagingPage(
    resourceGroupName: string,
    communityName: string,
    options?: CommunityEndpointsListByCommunityResourceOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<CommunityEndpointResource[]> {
    let result: CommunityEndpointsListByCommunityResourceResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByCommunityResource(
        resourceGroupName,
        communityName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByCommunityResourceNext(
        resourceGroupName,
        communityName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByCommunityResourcePagingAll(
    resourceGroupName: string,
    communityName: string,
    options?: CommunityEndpointsListByCommunityResourceOptionalParams,
  ): AsyncIterableIterator<CommunityEndpointResource> {
    for await (const page of this.listByCommunityResourcePagingPage(
      resourceGroupName,
      communityName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List CommunityEndpointResource resources by subscription ID
   * @param communityName The name of the communityResource Resource
   * @param options The options parameters.
   */
  private _listBySubscription(
    communityName: string,
    options?: CommunityEndpointsListBySubscriptionOptionalParams,
  ): Promise<CommunityEndpointsListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { communityName, options },
      listBySubscriptionOperationSpec,
    );
  }

  /**
   * List CommunityEndpointResource resources by CommunityResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communityName The name of the communityResource Resource
   * @param options The options parameters.
   */
  private _listByCommunityResource(
    resourceGroupName: string,
    communityName: string,
    options?: CommunityEndpointsListByCommunityResourceOptionalParams,
  ): Promise<CommunityEndpointsListByCommunityResourceResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, communityName, options },
      listByCommunityResourceOperationSpec,
    );
  }

  /**
   * Get a CommunityEndpointResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communityName The name of the communityResource Resource
   * @param communityEndpointName The name of the Community Endpoint Resource
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    communityName: string,
    communityEndpointName: string,
    options?: CommunityEndpointsGetOptionalParams,
  ): Promise<CommunityEndpointsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, communityName, communityEndpointName, options },
      getOperationSpec,
    );
  }

  /**
   * Create a CommunityEndpointResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communityName The name of the communityResource Resource
   * @param communityEndpointName The name of the Community Endpoint Resource
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    communityName: string,
    communityEndpointName: string,
    resource: CommunityEndpointResource,
    options?: CommunityEndpointsCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<CommunityEndpointsCreateOrUpdateResponse>,
      CommunityEndpointsCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<CommunityEndpointsCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        communityName,
        communityEndpointName,
        resource,
        options,
      },
      spec: createOrUpdateOperationSpec,
    });
    const poller = await createHttpPoller<
      CommunityEndpointsCreateOrUpdateResponse,
      OperationState<CommunityEndpointsCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create a CommunityEndpointResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communityName The name of the communityResource Resource
   * @param communityEndpointName The name of the Community Endpoint Resource
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    communityName: string,
    communityEndpointName: string,
    resource: CommunityEndpointResource,
    options?: CommunityEndpointsCreateOrUpdateOptionalParams,
  ): Promise<CommunityEndpointsCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      communityName,
      communityEndpointName,
      resource,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Update a CommunityEndpointResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communityName The name of the communityResource Resource
   * @param communityEndpointName The name of the Community Endpoint Resource
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    communityName: string,
    communityEndpointName: string,
    properties: CommunityEndpointResourceUpdate,
    options?: CommunityEndpointsUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<CommunityEndpointsUpdateResponse>,
      CommunityEndpointsUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<CommunityEndpointsUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        communityName,
        communityEndpointName,
        properties,
        options,
      },
      spec: updateOperationSpec,
    });
    const poller = await createHttpPoller<
      CommunityEndpointsUpdateResponse,
      OperationState<CommunityEndpointsUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Update a CommunityEndpointResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communityName The name of the communityResource Resource
   * @param communityEndpointName The name of the Community Endpoint Resource
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    communityName: string,
    communityEndpointName: string,
    properties: CommunityEndpointResourceUpdate,
    options?: CommunityEndpointsUpdateOptionalParams,
  ): Promise<CommunityEndpointsUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      communityName,
      communityEndpointName,
      properties,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Delete a CommunityEndpointResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communityName The name of the communityResource Resource
   * @param communityEndpointName The name of the Community Endpoint Resource
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    communityName: string,
    communityEndpointName: string,
    options?: CommunityEndpointsDeleteOptionalParams,
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        communityName,
        communityEndpointName,
        options,
      },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete a CommunityEndpointResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communityName The name of the communityResource Resource
   * @param communityEndpointName The name of the Community Endpoint Resource
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    communityName: string,
    communityEndpointName: string,
    options?: CommunityEndpointsDeleteOptionalParams,
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      communityName,
      communityEndpointName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Callback that triggers on approval state change.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communityName The name of the communityResource Resource
   * @param communityEndpointName The name of the Community Endpoint Resource
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginApprovalCallback(
    resourceGroupName: string,
    communityName: string,
    communityEndpointName: string,
    body: ApprovalCallbackRequest,
    options?: CommunityEndpointsApprovalCallbackOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<CommunityEndpointsApprovalCallbackResponse>,
      CommunityEndpointsApprovalCallbackResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<CommunityEndpointsApprovalCallbackResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        communityName,
        communityEndpointName,
        body,
        options,
      },
      spec: approvalCallbackOperationSpec,
    });
    const poller = await createHttpPoller<
      CommunityEndpointsApprovalCallbackResponse,
      OperationState<CommunityEndpointsApprovalCallbackResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Callback that triggers on approval state change.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communityName The name of the communityResource Resource
   * @param communityEndpointName The name of the Community Endpoint Resource
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginApprovalCallbackAndWait(
    resourceGroupName: string,
    communityName: string,
    communityEndpointName: string,
    body: ApprovalCallbackRequest,
    options?: CommunityEndpointsApprovalCallbackOptionalParams,
  ): Promise<CommunityEndpointsApprovalCallbackResponse> {
    const poller = await this.beginApprovalCallback(
      resourceGroupName,
      communityName,
      communityEndpointName,
      body,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Callback that triggers on approval deletion state change.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communityName The name of the communityResource Resource
   * @param communityEndpointName The name of the Community Endpoint Resource
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginApprovalDeletionCallback(
    resourceGroupName: string,
    communityName: string,
    communityEndpointName: string,
    body: ApprovalDeletionCallbackRequest,
    options?: CommunityEndpointsApprovalDeletionCallbackOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<CommunityEndpointsApprovalDeletionCallbackResponse>,
      CommunityEndpointsApprovalDeletionCallbackResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<CommunityEndpointsApprovalDeletionCallbackResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        communityName,
        communityEndpointName,
        body,
        options,
      },
      spec: approvalDeletionCallbackOperationSpec,
    });
    const poller = await createHttpPoller<
      CommunityEndpointsApprovalDeletionCallbackResponse,
      OperationState<CommunityEndpointsApprovalDeletionCallbackResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Callback that triggers on approval deletion state change.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communityName The name of the communityResource Resource
   * @param communityEndpointName The name of the Community Endpoint Resource
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginApprovalDeletionCallbackAndWait(
    resourceGroupName: string,
    communityName: string,
    communityEndpointName: string,
    body: ApprovalDeletionCallbackRequest,
    options?: CommunityEndpointsApprovalDeletionCallbackOptionalParams,
  ): Promise<CommunityEndpointsApprovalDeletionCallbackResponse> {
    const poller = await this.beginApprovalDeletionCallback(
      resourceGroupName,
      communityName,
      communityEndpointName,
      body,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * ListBySubscriptionNext
   * @param communityName The name of the communityResource Resource
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    communityName: string,
    nextLink: string,
    options?: CommunityEndpointsListBySubscriptionNextOptionalParams,
  ): Promise<CommunityEndpointsListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { communityName, nextLink, options },
      listBySubscriptionNextOperationSpec,
    );
  }

  /**
   * ListByCommunityResourceNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communityName The name of the communityResource Resource
   * @param nextLink The nextLink from the previous successful call to the ListByCommunityResource
   *                 method.
   * @param options The options parameters.
   */
  private _listByCommunityResourceNext(
    resourceGroupName: string,
    communityName: string,
    nextLink: string,
    options?: CommunityEndpointsListByCommunityResourceNextOptionalParams,
  ): Promise<CommunityEndpointsListByCommunityResourceNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, communityName, nextLink, options },
      listByCommunityResourceNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Mission/communities/{communityName}/communityEndpoints",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CommunityEndpointResourceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.communityName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByCommunityResourceOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/communities/{communityName}/communityEndpoints",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CommunityEndpointResourceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.communityName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/communities/{communityName}/communityEndpoints/{communityEndpointName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CommunityEndpointResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.communityName,
    Parameters.communityEndpointName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/communities/{communityName}/communityEndpoints/{communityEndpointName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.CommunityEndpointResource,
    },
    201: {
      bodyMapper: Mappers.CommunityEndpointResource,
    },
    202: {
      bodyMapper: Mappers.CommunityEndpointResource,
    },
    204: {
      bodyMapper: Mappers.CommunityEndpointResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.resource2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.communityName,
    Parameters.communityEndpointName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/communities/{communityName}/communityEndpoints/{communityEndpointName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.CommunityEndpointResource,
    },
    201: {
      bodyMapper: Mappers.CommunityEndpointResource,
    },
    202: {
      bodyMapper: Mappers.CommunityEndpointResource,
    },
    204: {
      bodyMapper: Mappers.CommunityEndpointResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.properties2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.communityName,
    Parameters.communityEndpointName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/communities/{communityName}/communityEndpoints/{communityEndpointName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.communityName,
    Parameters.communityEndpointName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const approvalCallbackOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/communities/{communityName}/communityEndpoints/{communityEndpointName}/approvalCallback",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ApprovalCallbackResponse,
    },
    201: {
      bodyMapper: Mappers.ApprovalCallbackResponse,
    },
    202: {
      bodyMapper: Mappers.ApprovalCallbackResponse,
    },
    204: {
      bodyMapper: Mappers.ApprovalCallbackResponse,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.communityName,
    Parameters.communityEndpointName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const approvalDeletionCallbackOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/communities/{communityName}/communityEndpoints/{communityEndpointName}/approvalDeletionCallback",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ApprovalDeletionCallbackResponse,
    },
    201: {
      bodyMapper: Mappers.ApprovalDeletionCallbackResponse,
    },
    202: {
      bodyMapper: Mappers.ApprovalDeletionCallbackResponse,
    },
    204: {
      bodyMapper: Mappers.ApprovalDeletionCallbackResponse,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.communityName,
    Parameters.communityEndpointName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CommunityEndpointResourceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.communityName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByCommunityResourceNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CommunityEndpointResourceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.communityName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
