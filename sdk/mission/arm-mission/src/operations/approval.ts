/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { Approval } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MissionClient } from "../missionClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  ApprovalResource,
  ApprovalListByParentNextOptionalParams,
  ApprovalListByParentOptionalParams,
  ApprovalListByParentResponse,
  ApprovalGetOptionalParams,
  ApprovalGetResponse,
  ApprovalCreateOrUpdateOptionalParams,
  ApprovalCreateOrUpdateResponse,
  ApprovalResourceUpdate,
  ApprovalUpdateOptionalParams,
  ApprovalUpdateResponse,
  ApprovalDeleteOptionalParams,
  ApprovalDeleteResponse,
  InitiatorCallbackRequest,
  ApprovalInitiatorCallbackOptionalParams,
  ApprovalInitiatorCallbackResponse,
  ApprovalListByParentNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Approval operations. */
export class ApprovalImpl implements Approval {
  private readonly client: MissionClient;

  /**
   * Initialize a new instance of the class Approval class.
   * @param client Reference to the service client
   */
  constructor(client: MissionClient) {
    this.client = client;
  }

  /**
   * List ApprovalResource resources by parent
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param options The options parameters.
   */
  public listByParent(
    resourceUri: string,
    options?: ApprovalListByParentOptionalParams,
  ): PagedAsyncIterableIterator<ApprovalResource> {
    const iter = this.listByParentPagingAll(resourceUri, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByParentPagingPage(resourceUri, options, settings);
      },
    };
  }

  private async *listByParentPagingPage(
    resourceUri: string,
    options?: ApprovalListByParentOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<ApprovalResource[]> {
    let result: ApprovalListByParentResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByParent(resourceUri, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByParentNext(
        resourceUri,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByParentPagingAll(
    resourceUri: string,
    options?: ApprovalListByParentOptionalParams,
  ): AsyncIterableIterator<ApprovalResource> {
    for await (const page of this.listByParentPagingPage(
      resourceUri,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List ApprovalResource resources by parent
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param options The options parameters.
   */
  private _listByParent(
    resourceUri: string,
    options?: ApprovalListByParentOptionalParams,
  ): Promise<ApprovalListByParentResponse> {
    return this.client.sendOperationRequest(
      { resourceUri, options },
      listByParentOperationSpec,
    );
  }

  /**
   * Get a ApprovalResource
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param approvalName The name of the approvals resource.
   * @param options The options parameters.
   */
  get(
    resourceUri: string,
    approvalName: string,
    options?: ApprovalGetOptionalParams,
  ): Promise<ApprovalGetResponse> {
    return this.client.sendOperationRequest(
      { resourceUri, approvalName, options },
      getOperationSpec,
    );
  }

  /**
   * Create a ApprovalResource
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param approvalName The name of the approvals resource.
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceUri: string,
    approvalName: string,
    resource: ApprovalResource,
    options?: ApprovalCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ApprovalCreateOrUpdateResponse>,
      ApprovalCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ApprovalCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceUri, approvalName, resource, options },
      spec: createOrUpdateOperationSpec,
    });
    const poller = await createHttpPoller<
      ApprovalCreateOrUpdateResponse,
      OperationState<ApprovalCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create a ApprovalResource
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param approvalName The name of the approvals resource.
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceUri: string,
    approvalName: string,
    resource: ApprovalResource,
    options?: ApprovalCreateOrUpdateOptionalParams,
  ): Promise<ApprovalCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceUri,
      approvalName,
      resource,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Update a ApprovalResource
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param approvalName The name of the approvals resource.
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceUri: string,
    approvalName: string,
    properties: ApprovalResourceUpdate,
    options?: ApprovalUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ApprovalUpdateResponse>,
      ApprovalUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ApprovalUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceUri, approvalName, properties, options },
      spec: updateOperationSpec,
    });
    const poller = await createHttpPoller<
      ApprovalUpdateResponse,
      OperationState<ApprovalUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Update a ApprovalResource
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param approvalName The name of the approvals resource.
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceUri: string,
    approvalName: string,
    properties: ApprovalResourceUpdate,
    options?: ApprovalUpdateOptionalParams,
  ): Promise<ApprovalUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceUri,
      approvalName,
      properties,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Delete a ApprovalResource
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param approvalName The name of the approvals resource.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceUri: string,
    approvalName: string,
    options?: ApprovalDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ApprovalDeleteResponse>,
      ApprovalDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ApprovalDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceUri, approvalName, options },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<
      ApprovalDeleteResponse,
      OperationState<ApprovalDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete a ApprovalResource
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param approvalName The name of the approvals resource.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceUri: string,
    approvalName: string,
    options?: ApprovalDeleteOptionalParams,
  ): Promise<ApprovalDeleteResponse> {
    const poller = await this.beginDelete(resourceUri, approvalName, options);
    return poller.pollUntilDone();
  }

  /**
   * Upon receiving approval or rejection from approver, this facilitates actions on approval resource
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param approvalName The name of the approvals resource.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginInitiatorCallback(
    resourceUri: string,
    approvalName: string,
    body: InitiatorCallbackRequest,
    options?: ApprovalInitiatorCallbackOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ApprovalInitiatorCallbackResponse>,
      ApprovalInitiatorCallbackResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ApprovalInitiatorCallbackResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceUri, approvalName, body, options },
      spec: initiatorCallbackOperationSpec,
    });
    const poller = await createHttpPoller<
      ApprovalInitiatorCallbackResponse,
      OperationState<ApprovalInitiatorCallbackResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Upon receiving approval or rejection from approver, this facilitates actions on approval resource
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param approvalName The name of the approvals resource.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginInitiatorCallbackAndWait(
    resourceUri: string,
    approvalName: string,
    body: InitiatorCallbackRequest,
    options?: ApprovalInitiatorCallbackOptionalParams,
  ): Promise<ApprovalInitiatorCallbackResponse> {
    const poller = await this.beginInitiatorCallback(
      resourceUri,
      approvalName,
      body,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * ListByParentNext
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param nextLink The nextLink from the previous successful call to the ListByParent method.
   * @param options The options parameters.
   */
  private _listByParentNext(
    resourceUri: string,
    nextLink: string,
    options?: ApprovalListByParentNextOptionalParams,
  ): Promise<ApprovalListByParentNextResponse> {
    return this.client.sendOperationRequest(
      { resourceUri, nextLink, options },
      listByParentNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByParentOperationSpec: coreClient.OperationSpec = {
  path: "/{resourceUri}/providers/Microsoft.Mission/approvals",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApprovalResourceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.resourceUri],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/{resourceUri}/providers/Microsoft.Mission/approvals/{approvalName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApprovalResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceUri,
    Parameters.approvalName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/{resourceUri}/providers/Microsoft.Mission/approvals/{approvalName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ApprovalResource,
    },
    201: {
      bodyMapper: Mappers.ApprovalResource,
    },
    202: {
      bodyMapper: Mappers.ApprovalResource,
    },
    204: {
      bodyMapper: Mappers.ApprovalResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.resource,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceUri,
    Parameters.approvalName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/{resourceUri}/providers/Microsoft.Mission/approvals/{approvalName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.ApprovalResource,
    },
    201: {
      bodyMapper: Mappers.ApprovalResource,
    },
    202: {
      bodyMapper: Mappers.ApprovalResource,
    },
    204: {
      bodyMapper: Mappers.ApprovalResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.properties,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceUri,
    Parameters.approvalName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/{resourceUri}/providers/Microsoft.Mission/approvals/{approvalName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.ApprovalDeleteHeaders,
    },
    201: {
      headersMapper: Mappers.ApprovalDeleteHeaders,
    },
    202: {
      headersMapper: Mappers.ApprovalDeleteHeaders,
    },
    204: {
      headersMapper: Mappers.ApprovalDeleteHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceUri,
    Parameters.approvalName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const initiatorCallbackOperationSpec: coreClient.OperationSpec = {
  path: "/{resourceUri}/providers/Microsoft.Mission/approvals/{approvalName}/initiatorCallback",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.InitiatorCallbackResponse,
    },
    201: {
      bodyMapper: Mappers.InitiatorCallbackResponse,
    },
    202: {
      bodyMapper: Mappers.InitiatorCallbackResponse,
    },
    204: {
      bodyMapper: Mappers.InitiatorCallbackResponse,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceUri,
    Parameters.approvalName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const listByParentNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApprovalResourceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.resourceUri,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
