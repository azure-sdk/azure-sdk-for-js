/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { VirtualEnclave } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { MissionClient } from "../missionClient.js";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl.js";
import {
  EnclaveResource,
  VirtualEnclaveListBySubscriptionNextOptionalParams,
  VirtualEnclaveListBySubscriptionOptionalParams,
  VirtualEnclaveListBySubscriptionResponse,
  VirtualEnclaveListByResourceGroupNextOptionalParams,
  VirtualEnclaveListByResourceGroupOptionalParams,
  VirtualEnclaveListByResourceGroupResponse,
  VirtualEnclaveGetOptionalParams,
  VirtualEnclaveGetResponse,
  VirtualEnclaveCreateOrUpdateOptionalParams,
  VirtualEnclaveCreateOrUpdateResponse,
  EnclaveResourceUpdate,
  VirtualEnclaveUpdateOptionalParams,
  VirtualEnclaveUpdateResponse,
  VirtualEnclaveDeleteOptionalParams,
  ApprovalCallbackRequest,
  VirtualEnclaveApprovalCallbackOptionalParams,
  VirtualEnclaveApprovalCallbackResponse,
  ApprovalDeletionCallbackRequest,
  VirtualEnclaveApprovalDeletionCallbackOptionalParams,
  VirtualEnclaveApprovalDeletionCallbackResponse,
  VirtualEnclaveListBySubscriptionNextResponse,
  VirtualEnclaveListByResourceGroupNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing VirtualEnclave operations. */
export class VirtualEnclaveImpl implements VirtualEnclave {
  private readonly client: MissionClient;

  /**
   * Initialize a new instance of the class VirtualEnclave class.
   * @param client Reference to the service client
   */
  constructor(client: MissionClient) {
    this.client = client;
  }

  /**
   * List EnclaveResource resources by subscription ID
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: VirtualEnclaveListBySubscriptionOptionalParams,
  ): PagedAsyncIterableIterator<EnclaveResource> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionPagingPage(options, settings);
      },
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: VirtualEnclaveListBySubscriptionOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<EnclaveResource[]> {
    let result: VirtualEnclaveListBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySubscription(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySubscriptionPagingAll(
    options?: VirtualEnclaveListBySubscriptionOptionalParams,
  ): AsyncIterableIterator<EnclaveResource> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * List EnclaveResource resources by resource group
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: VirtualEnclaveListByResourceGroupOptionalParams,
  ): PagedAsyncIterableIterator<EnclaveResource> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByResourceGroupPagingPage(
          resourceGroupName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: VirtualEnclaveListByResourceGroupOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<EnclaveResource[]> {
    let result: VirtualEnclaveListByResourceGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByResourceGroup(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: VirtualEnclaveListByResourceGroupOptionalParams,
  ): AsyncIterableIterator<EnclaveResource> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List EnclaveResource resources by subscription ID
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: VirtualEnclaveListBySubscriptionOptionalParams,
  ): Promise<VirtualEnclaveListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec,
    );
  }

  /**
   * List EnclaveResource resources by resource group
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: VirtualEnclaveListByResourceGroupOptionalParams,
  ): Promise<VirtualEnclaveListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec,
    );
  }

  /**
   * Get a EnclaveResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param virtualEnclaveName The name of the enclaveResource Resource
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    virtualEnclaveName: string,
    options?: VirtualEnclaveGetOptionalParams,
  ): Promise<VirtualEnclaveGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, virtualEnclaveName, options },
      getOperationSpec,
    );
  }

  /**
   * Create a EnclaveResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param virtualEnclaveName The name of the enclaveResource Resource
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    virtualEnclaveName: string,
    resource: EnclaveResource,
    options?: VirtualEnclaveCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<VirtualEnclaveCreateOrUpdateResponse>,
      VirtualEnclaveCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<VirtualEnclaveCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, virtualEnclaveName, resource, options },
      spec: createOrUpdateOperationSpec,
    });
    const poller = await createHttpPoller<
      VirtualEnclaveCreateOrUpdateResponse,
      OperationState<VirtualEnclaveCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create a EnclaveResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param virtualEnclaveName The name of the enclaveResource Resource
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    virtualEnclaveName: string,
    resource: EnclaveResource,
    options?: VirtualEnclaveCreateOrUpdateOptionalParams,
  ): Promise<VirtualEnclaveCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      virtualEnclaveName,
      resource,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Update a EnclaveResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param virtualEnclaveName The name of the enclaveResource Resource
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    virtualEnclaveName: string,
    properties: EnclaveResourceUpdate,
    options?: VirtualEnclaveUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<VirtualEnclaveUpdateResponse>,
      VirtualEnclaveUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<VirtualEnclaveUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, virtualEnclaveName, properties, options },
      spec: updateOperationSpec,
    });
    const poller = await createHttpPoller<
      VirtualEnclaveUpdateResponse,
      OperationState<VirtualEnclaveUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Update a EnclaveResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param virtualEnclaveName The name of the enclaveResource Resource
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    virtualEnclaveName: string,
    properties: EnclaveResourceUpdate,
    options?: VirtualEnclaveUpdateOptionalParams,
  ): Promise<VirtualEnclaveUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      virtualEnclaveName,
      properties,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Delete a EnclaveResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param virtualEnclaveName The name of the enclaveResource Resource
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    virtualEnclaveName: string,
    options?: VirtualEnclaveDeleteOptionalParams,
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, virtualEnclaveName, options },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete a EnclaveResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param virtualEnclaveName The name of the enclaveResource Resource
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    virtualEnclaveName: string,
    options?: VirtualEnclaveDeleteOptionalParams,
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      virtualEnclaveName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Callback that triggers on approval state change.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param virtualEnclaveName The name of the enclaveResource Resource
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginApprovalCallback(
    resourceGroupName: string,
    virtualEnclaveName: string,
    body: ApprovalCallbackRequest,
    options?: VirtualEnclaveApprovalCallbackOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<VirtualEnclaveApprovalCallbackResponse>,
      VirtualEnclaveApprovalCallbackResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<VirtualEnclaveApprovalCallbackResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, virtualEnclaveName, body, options },
      spec: approvalCallbackOperationSpec,
    });
    const poller = await createHttpPoller<
      VirtualEnclaveApprovalCallbackResponse,
      OperationState<VirtualEnclaveApprovalCallbackResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Callback that triggers on approval state change.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param virtualEnclaveName The name of the enclaveResource Resource
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginApprovalCallbackAndWait(
    resourceGroupName: string,
    virtualEnclaveName: string,
    body: ApprovalCallbackRequest,
    options?: VirtualEnclaveApprovalCallbackOptionalParams,
  ): Promise<VirtualEnclaveApprovalCallbackResponse> {
    const poller = await this.beginApprovalCallback(
      resourceGroupName,
      virtualEnclaveName,
      body,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Callback that triggers on approval deletion state change.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param virtualEnclaveName The name of the enclaveResource Resource
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginApprovalDeletionCallback(
    resourceGroupName: string,
    virtualEnclaveName: string,
    body: ApprovalDeletionCallbackRequest,
    options?: VirtualEnclaveApprovalDeletionCallbackOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<VirtualEnclaveApprovalDeletionCallbackResponse>,
      VirtualEnclaveApprovalDeletionCallbackResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<VirtualEnclaveApprovalDeletionCallbackResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, virtualEnclaveName, body, options },
      spec: approvalDeletionCallbackOperationSpec,
    });
    const poller = await createHttpPoller<
      VirtualEnclaveApprovalDeletionCallbackResponse,
      OperationState<VirtualEnclaveApprovalDeletionCallbackResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Callback that triggers on approval deletion state change.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param virtualEnclaveName The name of the enclaveResource Resource
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginApprovalDeletionCallbackAndWait(
    resourceGroupName: string,
    virtualEnclaveName: string,
    body: ApprovalDeletionCallbackRequest,
    options?: VirtualEnclaveApprovalDeletionCallbackOptionalParams,
  ): Promise<VirtualEnclaveApprovalDeletionCallbackResponse> {
    const poller = await this.beginApprovalDeletionCallback(
      resourceGroupName,
      virtualEnclaveName,
      body,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: VirtualEnclaveListBySubscriptionNextOptionalParams,
  ): Promise<VirtualEnclaveListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec,
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: VirtualEnclaveListByResourceGroupNextOptionalParams,
  ): Promise<VirtualEnclaveListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Mission/virtualEnclaves",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EnclaveResourceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EnclaveResourceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EnclaveResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.virtualEnclaveName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.EnclaveResource,
    },
    201: {
      bodyMapper: Mappers.EnclaveResource,
    },
    202: {
      bodyMapper: Mappers.EnclaveResource,
    },
    204: {
      bodyMapper: Mappers.EnclaveResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.resource7,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.virtualEnclaveName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.EnclaveResource,
    },
    201: {
      bodyMapper: Mappers.EnclaveResource,
    },
    202: {
      bodyMapper: Mappers.EnclaveResource,
    },
    204: {
      bodyMapper: Mappers.EnclaveResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.properties7,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.virtualEnclaveName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.virtualEnclaveName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const approvalCallbackOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/approvalCallback",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ApprovalCallbackResponse,
    },
    201: {
      bodyMapper: Mappers.ApprovalCallbackResponse,
    },
    202: {
      bodyMapper: Mappers.ApprovalCallbackResponse,
    },
    204: {
      bodyMapper: Mappers.ApprovalCallbackResponse,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.virtualEnclaveName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const approvalDeletionCallbackOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/approvalDeletionCallback",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ApprovalDeletionCallbackResponse,
    },
    201: {
      bodyMapper: Mappers.ApprovalDeletionCallbackResponse,
    },
    202: {
      bodyMapper: Mappers.ApprovalDeletionCallbackResponse,
    },
    204: {
      bodyMapper: Mappers.ApprovalDeletionCallbackResponse,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.virtualEnclaveName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EnclaveResourceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EnclaveResourceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
