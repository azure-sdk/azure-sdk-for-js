/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { Workload } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { MissionClient } from "../missionClient.js";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl.js";
import {
  WorkloadResource,
  WorkloadListBySubscriptionNextOptionalParams,
  WorkloadListBySubscriptionOptionalParams,
  WorkloadListBySubscriptionResponse,
  WorkloadListByEnclaveResourceNextOptionalParams,
  WorkloadListByEnclaveResourceOptionalParams,
  WorkloadListByEnclaveResourceResponse,
  WorkloadGetOptionalParams,
  WorkloadGetResponse,
  WorkloadCreateOrUpdateOptionalParams,
  WorkloadCreateOrUpdateResponse,
  WorkloadPatchResource,
  WorkloadUpdateOptionalParams,
  WorkloadUpdateResponse,
  WorkloadDeleteOptionalParams,
  WorkloadDeleteResponse,
  WorkloadListBySubscriptionNextResponse,
  WorkloadListByEnclaveResourceNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing Workload operations. */
export class WorkloadImpl implements Workload {
  private readonly client: MissionClient;

  /**
   * Initialize a new instance of the class Workload class.
   * @param client Reference to the service client
   */
  constructor(client: MissionClient) {
    this.client = client;
  }

  /**
   * List WorkloadResource resources by subscription ID
   * @param virtualEnclaveName The name of the enclaveResource Resource
   * @param options The options parameters.
   */
  public listBySubscription(
    virtualEnclaveName: string,
    options?: WorkloadListBySubscriptionOptionalParams,
  ): PagedAsyncIterableIterator<WorkloadResource> {
    const iter = this.listBySubscriptionPagingAll(virtualEnclaveName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionPagingPage(
          virtualEnclaveName,
          options,
          settings,
        );
      },
    };
  }

  private async *listBySubscriptionPagingPage(
    virtualEnclaveName: string,
    options?: WorkloadListBySubscriptionOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<WorkloadResource[]> {
    let result: WorkloadListBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySubscription(virtualEnclaveName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySubscriptionNext(
        virtualEnclaveName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySubscriptionPagingAll(
    virtualEnclaveName: string,
    options?: WorkloadListBySubscriptionOptionalParams,
  ): AsyncIterableIterator<WorkloadResource> {
    for await (const page of this.listBySubscriptionPagingPage(
      virtualEnclaveName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List WorkloadResource resources by EnclaveResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param virtualEnclaveName The name of the enclaveResource Resource
   * @param options The options parameters.
   */
  public listByEnclaveResource(
    resourceGroupName: string,
    virtualEnclaveName: string,
    options?: WorkloadListByEnclaveResourceOptionalParams,
  ): PagedAsyncIterableIterator<WorkloadResource> {
    const iter = this.listByEnclaveResourcePagingAll(
      resourceGroupName,
      virtualEnclaveName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByEnclaveResourcePagingPage(
          resourceGroupName,
          virtualEnclaveName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByEnclaveResourcePagingPage(
    resourceGroupName: string,
    virtualEnclaveName: string,
    options?: WorkloadListByEnclaveResourceOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<WorkloadResource[]> {
    let result: WorkloadListByEnclaveResourceResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByEnclaveResource(
        resourceGroupName,
        virtualEnclaveName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByEnclaveResourceNext(
        resourceGroupName,
        virtualEnclaveName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByEnclaveResourcePagingAll(
    resourceGroupName: string,
    virtualEnclaveName: string,
    options?: WorkloadListByEnclaveResourceOptionalParams,
  ): AsyncIterableIterator<WorkloadResource> {
    for await (const page of this.listByEnclaveResourcePagingPage(
      resourceGroupName,
      virtualEnclaveName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List WorkloadResource resources by subscription ID
   * @param virtualEnclaveName The name of the enclaveResource Resource
   * @param options The options parameters.
   */
  private _listBySubscription(
    virtualEnclaveName: string,
    options?: WorkloadListBySubscriptionOptionalParams,
  ): Promise<WorkloadListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { virtualEnclaveName, options },
      listBySubscriptionOperationSpec,
    );
  }

  /**
   * List WorkloadResource resources by EnclaveResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param virtualEnclaveName The name of the enclaveResource Resource
   * @param options The options parameters.
   */
  private _listByEnclaveResource(
    resourceGroupName: string,
    virtualEnclaveName: string,
    options?: WorkloadListByEnclaveResourceOptionalParams,
  ): Promise<WorkloadListByEnclaveResourceResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, virtualEnclaveName, options },
      listByEnclaveResourceOperationSpec,
    );
  }

  /**
   * Get a WorkloadResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param virtualEnclaveName The name of the enclaveResource Resource
   * @param workloadName The name of the workloadResource Resource
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    virtualEnclaveName: string,
    workloadName: string,
    options?: WorkloadGetOptionalParams,
  ): Promise<WorkloadGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, virtualEnclaveName, workloadName, options },
      getOperationSpec,
    );
  }

  /**
   * Create a WorkloadResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param virtualEnclaveName The name of the enclaveResource Resource
   * @param workloadName The name of the workloadResource Resource
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    virtualEnclaveName: string,
    workloadName: string,
    resource: WorkloadResource,
    options?: WorkloadCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<WorkloadCreateOrUpdateResponse>,
      WorkloadCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<WorkloadCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        virtualEnclaveName,
        workloadName,
        resource,
        options,
      },
      spec: createOrUpdateOperationSpec,
    });
    const poller = await createHttpPoller<
      WorkloadCreateOrUpdateResponse,
      OperationState<WorkloadCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create a WorkloadResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param virtualEnclaveName The name of the enclaveResource Resource
   * @param workloadName The name of the workloadResource Resource
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    virtualEnclaveName: string,
    workloadName: string,
    resource: WorkloadResource,
    options?: WorkloadCreateOrUpdateOptionalParams,
  ): Promise<WorkloadCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      virtualEnclaveName,
      workloadName,
      resource,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Update a WorkloadResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param virtualEnclaveName The name of the enclaveResource Resource
   * @param workloadName The name of the workloadResource Resource
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    virtualEnclaveName: string,
    workloadName: string,
    properties: WorkloadPatchResource,
    options?: WorkloadUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<WorkloadUpdateResponse>,
      WorkloadUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<WorkloadUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        virtualEnclaveName,
        workloadName,
        properties,
        options,
      },
      spec: updateOperationSpec,
    });
    const poller = await createHttpPoller<
      WorkloadUpdateResponse,
      OperationState<WorkloadUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Update a WorkloadResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param virtualEnclaveName The name of the enclaveResource Resource
   * @param workloadName The name of the workloadResource Resource
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    virtualEnclaveName: string,
    workloadName: string,
    properties: WorkloadPatchResource,
    options?: WorkloadUpdateOptionalParams,
  ): Promise<WorkloadUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      virtualEnclaveName,
      workloadName,
      properties,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Delete a WorkloadResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param virtualEnclaveName The name of the enclaveResource Resource
   * @param workloadName The name of the workloadResource Resource
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    virtualEnclaveName: string,
    workloadName: string,
    options?: WorkloadDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<WorkloadDeleteResponse>,
      WorkloadDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<WorkloadDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, virtualEnclaveName, workloadName, options },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<
      WorkloadDeleteResponse,
      OperationState<WorkloadDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete a WorkloadResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param virtualEnclaveName The name of the enclaveResource Resource
   * @param workloadName The name of the workloadResource Resource
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    virtualEnclaveName: string,
    workloadName: string,
    options?: WorkloadDeleteOptionalParams,
  ): Promise<WorkloadDeleteResponse> {
    const poller = await this.beginDelete(
      resourceGroupName,
      virtualEnclaveName,
      workloadName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * ListBySubscriptionNext
   * @param virtualEnclaveName The name of the enclaveResource Resource
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    virtualEnclaveName: string,
    nextLink: string,
    options?: WorkloadListBySubscriptionNextOptionalParams,
  ): Promise<WorkloadListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { virtualEnclaveName, nextLink, options },
      listBySubscriptionNextOperationSpec,
    );
  }

  /**
   * ListByEnclaveResourceNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param virtualEnclaveName The name of the enclaveResource Resource
   * @param nextLink The nextLink from the previous successful call to the ListByEnclaveResource method.
   * @param options The options parameters.
   */
  private _listByEnclaveResourceNext(
    resourceGroupName: string,
    virtualEnclaveName: string,
    nextLink: string,
    options?: WorkloadListByEnclaveResourceNextOptionalParams,
  ): Promise<WorkloadListByEnclaveResourceNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, virtualEnclaveName, nextLink, options },
      listByEnclaveResourceNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/workloads",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkloadResourceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.virtualEnclaveName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByEnclaveResourceOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/workloads",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkloadResourceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.virtualEnclaveName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/workloads/{workloadName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkloadResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.virtualEnclaveName,
    Parameters.workloadName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/workloads/{workloadName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.WorkloadResource,
    },
    201: {
      bodyMapper: Mappers.WorkloadResource,
    },
    202: {
      bodyMapper: Mappers.WorkloadResource,
    },
    204: {
      bodyMapper: Mappers.WorkloadResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.resource7,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.virtualEnclaveName,
    Parameters.workloadName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/workloads/{workloadName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.WorkloadResource,
    },
    201: {
      bodyMapper: Mappers.WorkloadResource,
    },
    202: {
      bodyMapper: Mappers.WorkloadResource,
    },
    204: {
      bodyMapper: Mappers.WorkloadResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.properties7,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.virtualEnclaveName,
    Parameters.workloadName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/workloads/{workloadName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.WorkloadDeleteHeaders,
    },
    201: {
      headersMapper: Mappers.WorkloadDeleteHeaders,
    },
    202: {
      headersMapper: Mappers.WorkloadDeleteHeaders,
    },
    204: {
      headersMapper: Mappers.WorkloadDeleteHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.virtualEnclaveName,
    Parameters.workloadName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkloadResourceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.virtualEnclaveName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByEnclaveResourceNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkloadResourceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.virtualEnclaveName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
