/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  CommunityResource,
  CommunityListBySubscriptionOptionalParams,
  CommunityListByResourceGroupOptionalParams,
  CommunityGetOptionalParams,
  CommunityGetResponse,
  CommunityCreateOrUpdateOptionalParams,
  CommunityCreateOrUpdateResponse,
  CommunityPatchResource,
  CommunityUpdateOptionalParams,
  CommunityUpdateResponse,
  CommunityDeleteOptionalParams,
  CommunityDeleteResponse,
  CheckAddressSpaceAvailabilityRequest,
  CommunityCheckAddressSpaceAvailabilityOptionalParams,
  CommunityCheckAddressSpaceAvailabilityResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Community. */
export interface Community {
  /**
   * List CommunityResource resources by subscription ID
   * @param options The options parameters.
   */
  listBySubscription(
    options?: CommunityListBySubscriptionOptionalParams,
  ): PagedAsyncIterableIterator<CommunityResource>;
  /**
   * List CommunityResource resources by resource group
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: CommunityListByResourceGroupOptionalParams,
  ): PagedAsyncIterableIterator<CommunityResource>;
  /**
   * Get a CommunityResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communityName The name of the communityResource Resource
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    communityName: string,
    options?: CommunityGetOptionalParams,
  ): Promise<CommunityGetResponse>;
  /**
   * Create a CommunityResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communityName The name of the communityResource Resource
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    communityName: string,
    resource: CommunityResource,
    options?: CommunityCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<CommunityCreateOrUpdateResponse>,
      CommunityCreateOrUpdateResponse
    >
  >;
  /**
   * Create a CommunityResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communityName The name of the communityResource Resource
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    communityName: string,
    resource: CommunityResource,
    options?: CommunityCreateOrUpdateOptionalParams,
  ): Promise<CommunityCreateOrUpdateResponse>;
  /**
   * Update a CommunityResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communityName The name of the communityResource Resource
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    communityName: string,
    properties: CommunityPatchResource,
    options?: CommunityUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<CommunityUpdateResponse>,
      CommunityUpdateResponse
    >
  >;
  /**
   * Update a CommunityResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communityName The name of the communityResource Resource
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    communityName: string,
    properties: CommunityPatchResource,
    options?: CommunityUpdateOptionalParams,
  ): Promise<CommunityUpdateResponse>;
  /**
   * Delete a CommunityResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communityName The name of the communityResource Resource
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    communityName: string,
    options?: CommunityDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<CommunityDeleteResponse>,
      CommunityDeleteResponse
    >
  >;
  /**
   * Delete a CommunityResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communityName The name of the communityResource Resource
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    communityName: string,
    options?: CommunityDeleteOptionalParams,
  ): Promise<CommunityDeleteResponse>;
  /**
   * Checks that the IP Address Space to be allocated for this Community is available.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communityName The name of the communityResource Resource
   * @param checkAddressSpaceAvailabilityRequest Check IP Address Space request body.
   * @param options The options parameters.
   */
  checkAddressSpaceAvailability(
    resourceGroupName: string,
    communityName: string,
    checkAddressSpaceAvailabilityRequest: CheckAddressSpaceAvailabilityRequest,
    options?: CommunityCheckAddressSpaceAvailabilityOptionalParams,
  ): Promise<CommunityCheckAddressSpaceAvailabilityResponse>;
}
