/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  WorkloadResource,
  WorkloadListBySubscriptionOptionalParams,
  WorkloadListByEnclaveResourceOptionalParams,
  WorkloadGetOptionalParams,
  WorkloadGetResponse,
  WorkloadCreateOrUpdateOptionalParams,
  WorkloadCreateOrUpdateResponse,
  WorkloadResourceUpdate,
  WorkloadUpdateOptionalParams,
  WorkloadUpdateResponse,
  WorkloadDeleteOptionalParams,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Workload. */
export interface Workload {
  /**
   * List WorkloadResource resources by subscription ID
   * @param virtualEnclaveName The name of the enclaveResource Resource
   * @param options The options parameters.
   */
  listBySubscription(
    virtualEnclaveName: string,
    options?: WorkloadListBySubscriptionOptionalParams,
  ): PagedAsyncIterableIterator<WorkloadResource>;
  /**
   * List WorkloadResource resources by EnclaveResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param virtualEnclaveName The name of the enclaveResource Resource
   * @param options The options parameters.
   */
  listByEnclaveResource(
    resourceGroupName: string,
    virtualEnclaveName: string,
    options?: WorkloadListByEnclaveResourceOptionalParams,
  ): PagedAsyncIterableIterator<WorkloadResource>;
  /**
   * Get a WorkloadResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param virtualEnclaveName The name of the enclaveResource Resource
   * @param workloadName The name of the workloadResource Resource
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    virtualEnclaveName: string,
    workloadName: string,
    options?: WorkloadGetOptionalParams,
  ): Promise<WorkloadGetResponse>;
  /**
   * Create a WorkloadResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param virtualEnclaveName The name of the enclaveResource Resource
   * @param workloadName The name of the workloadResource Resource
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    virtualEnclaveName: string,
    workloadName: string,
    resource: WorkloadResource,
    options?: WorkloadCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<WorkloadCreateOrUpdateResponse>,
      WorkloadCreateOrUpdateResponse
    >
  >;
  /**
   * Create a WorkloadResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param virtualEnclaveName The name of the enclaveResource Resource
   * @param workloadName The name of the workloadResource Resource
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    virtualEnclaveName: string,
    workloadName: string,
    resource: WorkloadResource,
    options?: WorkloadCreateOrUpdateOptionalParams,
  ): Promise<WorkloadCreateOrUpdateResponse>;
  /**
   * Update a WorkloadResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param virtualEnclaveName The name of the enclaveResource Resource
   * @param workloadName The name of the workloadResource Resource
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    virtualEnclaveName: string,
    workloadName: string,
    properties: WorkloadResourceUpdate,
    options?: WorkloadUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<WorkloadUpdateResponse>,
      WorkloadUpdateResponse
    >
  >;
  /**
   * Update a WorkloadResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param virtualEnclaveName The name of the enclaveResource Resource
   * @param workloadName The name of the workloadResource Resource
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    virtualEnclaveName: string,
    workloadName: string,
    properties: WorkloadResourceUpdate,
    options?: WorkloadUpdateOptionalParams,
  ): Promise<WorkloadUpdateResponse>;
  /**
   * Delete a WorkloadResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param virtualEnclaveName The name of the enclaveResource Resource
   * @param workloadName The name of the workloadResource Resource
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    virtualEnclaveName: string,
    workloadName: string,
    options?: WorkloadDeleteOptionalParams,
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Delete a WorkloadResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param virtualEnclaveName The name of the enclaveResource Resource
   * @param workloadName The name of the workloadResource Resource
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    virtualEnclaveName: string,
    workloadName: string,
    options?: WorkloadDeleteOptionalParams,
  ): Promise<void>;
}
