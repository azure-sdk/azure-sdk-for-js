/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  EnclaveConnectionResource,
  EnclaveConnectionListBySubscriptionOptionalParams,
  EnclaveConnectionListByResourceGroupOptionalParams,
  EnclaveConnectionGetOptionalParams,
  EnclaveConnectionGetResponse,
  EnclaveConnectionCreateOrUpdateOptionalParams,
  EnclaveConnectionCreateOrUpdateResponse,
  EnclaveConnectionPatchResource,
  EnclaveConnectionUpdateOptionalParams,
  EnclaveConnectionUpdateResponse,
  EnclaveConnectionDeleteOptionalParams,
  EnclaveConnectionDeleteResponse,
  ApprovalCallbackRequest,
  EnclaveConnectionApprovalCallbackOptionalParams,
  EnclaveConnectionApprovalCallbackResponse,
  ApprovalDeletionCallbackRequest,
  EnclaveConnectionApprovalDeletionCallbackOptionalParams,
  EnclaveConnectionApprovalDeletionCallbackResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a EnclaveConnection. */
export interface EnclaveConnection {
  /**
   * List EnclaveConnectionResource resources by subscription ID
   * @param options The options parameters.
   */
  listBySubscription(
    options?: EnclaveConnectionListBySubscriptionOptionalParams,
  ): PagedAsyncIterableIterator<EnclaveConnectionResource>;
  /**
   * List EnclaveConnectionResource resources by resource group
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: EnclaveConnectionListByResourceGroupOptionalParams,
  ): PagedAsyncIterableIterator<EnclaveConnectionResource>;
  /**
   * Get a EnclaveConnectionResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param enclaveConnectionName The name of the Enclave Connection Resource
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    enclaveConnectionName: string,
    options?: EnclaveConnectionGetOptionalParams,
  ): Promise<EnclaveConnectionGetResponse>;
  /**
   * Create a EnclaveConnectionResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param enclaveConnectionName The name of the Enclave Connection Resource
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    enclaveConnectionName: string,
    resource: EnclaveConnectionResource,
    options?: EnclaveConnectionCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<EnclaveConnectionCreateOrUpdateResponse>,
      EnclaveConnectionCreateOrUpdateResponse
    >
  >;
  /**
   * Create a EnclaveConnectionResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param enclaveConnectionName The name of the Enclave Connection Resource
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    enclaveConnectionName: string,
    resource: EnclaveConnectionResource,
    options?: EnclaveConnectionCreateOrUpdateOptionalParams,
  ): Promise<EnclaveConnectionCreateOrUpdateResponse>;
  /**
   * Update a EnclaveConnectionResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param enclaveConnectionName The name of the Enclave Connection Resource
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    enclaveConnectionName: string,
    properties: EnclaveConnectionPatchResource,
    options?: EnclaveConnectionUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<EnclaveConnectionUpdateResponse>,
      EnclaveConnectionUpdateResponse
    >
  >;
  /**
   * Update a EnclaveConnectionResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param enclaveConnectionName The name of the Enclave Connection Resource
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    enclaveConnectionName: string,
    properties: EnclaveConnectionPatchResource,
    options?: EnclaveConnectionUpdateOptionalParams,
  ): Promise<EnclaveConnectionUpdateResponse>;
  /**
   * Delete a EnclaveConnectionResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param enclaveConnectionName The name of the Enclave Connection Resource
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    enclaveConnectionName: string,
    options?: EnclaveConnectionDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<EnclaveConnectionDeleteResponse>,
      EnclaveConnectionDeleteResponse
    >
  >;
  /**
   * Delete a EnclaveConnectionResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param enclaveConnectionName The name of the Enclave Connection Resource
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    enclaveConnectionName: string,
    options?: EnclaveConnectionDeleteOptionalParams,
  ): Promise<EnclaveConnectionDeleteResponse>;
  /**
   * Callback that triggers on approval state change.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param enclaveConnectionName The name of the Enclave Connection Resource
   * @param body The content of the action request
   * @param options The options parameters.
   */
  beginApprovalCallback(
    resourceGroupName: string,
    enclaveConnectionName: string,
    body: ApprovalCallbackRequest,
    options?: EnclaveConnectionApprovalCallbackOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<EnclaveConnectionApprovalCallbackResponse>,
      EnclaveConnectionApprovalCallbackResponse
    >
  >;
  /**
   * Callback that triggers on approval state change.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param enclaveConnectionName The name of the Enclave Connection Resource
   * @param body The content of the action request
   * @param options The options parameters.
   */
  beginApprovalCallbackAndWait(
    resourceGroupName: string,
    enclaveConnectionName: string,
    body: ApprovalCallbackRequest,
    options?: EnclaveConnectionApprovalCallbackOptionalParams,
  ): Promise<EnclaveConnectionApprovalCallbackResponse>;
  /**
   * Callback that triggers on approval deletion state change.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param enclaveConnectionName The name of the Enclave Connection Resource
   * @param body The content of the action request
   * @param options The options parameters.
   */
  beginApprovalDeletionCallback(
    resourceGroupName: string,
    enclaveConnectionName: string,
    body: ApprovalDeletionCallbackRequest,
    options?: EnclaveConnectionApprovalDeletionCallbackOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<EnclaveConnectionApprovalDeletionCallbackResponse>,
      EnclaveConnectionApprovalDeletionCallbackResponse
    >
  >;
  /**
   * Callback that triggers on approval deletion state change.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param enclaveConnectionName The name of the Enclave Connection Resource
   * @param body The content of the action request
   * @param options The options parameters.
   */
  beginApprovalDeletionCallbackAndWait(
    resourceGroupName: string,
    enclaveConnectionName: string,
    body: ApprovalDeletionCallbackRequest,
    options?: EnclaveConnectionApprovalDeletionCallbackOptionalParams,
  ): Promise<EnclaveConnectionApprovalDeletionCallbackResponse>;
}
