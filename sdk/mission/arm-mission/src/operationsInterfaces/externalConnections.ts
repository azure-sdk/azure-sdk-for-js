/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  ExternalConnection,
  ExternalConnectionsListBySubscriptionOptionalParams,
  ExternalConnectionsListByResourceGroupOptionalParams,
  ExternalConnectionsGetOptionalParams,
  ExternalConnectionsGetResponse,
  ExternalConnectionsCreateOrUpdateOptionalParams,
  ExternalConnectionsCreateOrUpdateResponse,
  ExternalConnectionUpdate,
  ExternalConnectionsUpdateOptionalParams,
  ExternalConnectionsUpdateResponse,
  ExternalConnectionsDeleteOptionalParams,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a ExternalConnections. */
export interface ExternalConnections {
  /**
   * List ExternalConnection resources by subscription ID
   * @param options The options parameters.
   */
  listBySubscription(
    options?: ExternalConnectionsListBySubscriptionOptionalParams,
  ): PagedAsyncIterableIterator<ExternalConnection>;
  /**
   * List ExternalConnection resources by resource group
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: ExternalConnectionsListByResourceGroupOptionalParams,
  ): PagedAsyncIterableIterator<ExternalConnection>;
  /**
   * Get a ExternalConnection
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param externalConnectionName The name of the external connection.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    externalConnectionName: string,
    options?: ExternalConnectionsGetOptionalParams,
  ): Promise<ExternalConnectionsGetResponse>;
  /**
   * Create a ExternalConnection
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param externalConnectionName The name of the external connection.
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    externalConnectionName: string,
    resource: ExternalConnection,
    options?: ExternalConnectionsCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ExternalConnectionsCreateOrUpdateResponse>,
      ExternalConnectionsCreateOrUpdateResponse
    >
  >;
  /**
   * Create a ExternalConnection
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param externalConnectionName The name of the external connection.
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    externalConnectionName: string,
    resource: ExternalConnection,
    options?: ExternalConnectionsCreateOrUpdateOptionalParams,
  ): Promise<ExternalConnectionsCreateOrUpdateResponse>;
  /**
   * Update a ExternalConnection
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param externalConnectionName The name of the external connection.
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    externalConnectionName: string,
    properties: ExternalConnectionUpdate,
    options?: ExternalConnectionsUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ExternalConnectionsUpdateResponse>,
      ExternalConnectionsUpdateResponse
    >
  >;
  /**
   * Update a ExternalConnection
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param externalConnectionName The name of the external connection.
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    externalConnectionName: string,
    properties: ExternalConnectionUpdate,
    options?: ExternalConnectionsUpdateOptionalParams,
  ): Promise<ExternalConnectionsUpdateResponse>;
  /**
   * Delete a ExternalConnection
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param externalConnectionName The name of the external connection.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    externalConnectionName: string,
    options?: ExternalConnectionsDeleteOptionalParams,
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Delete a ExternalConnection
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param externalConnectionName The name of the external connection.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    externalConnectionName: string,
    options?: ExternalConnectionsDeleteOptionalParams,
  ): Promise<void>;
}
