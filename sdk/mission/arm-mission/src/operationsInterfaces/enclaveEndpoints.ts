/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  EnclaveEndpointResource,
  EnclaveEndpointsListBySubscriptionOptionalParams,
  EnclaveEndpointsListByEnclaveResourceOptionalParams,
  EnclaveEndpointsGetOptionalParams,
  EnclaveEndpointsGetResponse,
  EnclaveEndpointsCreateOrUpdateOptionalParams,
  EnclaveEndpointsCreateOrUpdateResponse,
  EnclaveEndpointResourceUpdate,
  EnclaveEndpointsUpdateOptionalParams,
  EnclaveEndpointsUpdateResponse,
  EnclaveEndpointsDeleteOptionalParams,
  ApprovalCallbackRequest,
  EnclaveEndpointsApprovalCallbackOptionalParams,
  EnclaveEndpointsApprovalCallbackResponse,
  ApprovalDeletionCallbackRequest,
  EnclaveEndpointsApprovalDeletionCallbackOptionalParams,
  EnclaveEndpointsApprovalDeletionCallbackResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a EnclaveEndpoints. */
export interface EnclaveEndpoints {
  /**
   * List EnclaveEndpointResource resources by subscription ID
   * @param virtualEnclaveName The name of the enclaveResource Resource
   * @param options The options parameters.
   */
  listBySubscription(
    virtualEnclaveName: string,
    options?: EnclaveEndpointsListBySubscriptionOptionalParams,
  ): PagedAsyncIterableIterator<EnclaveEndpointResource>;
  /**
   * List EnclaveEndpointResource resources by EnclaveResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param virtualEnclaveName The name of the enclaveResource Resource
   * @param options The options parameters.
   */
  listByEnclaveResource(
    resourceGroupName: string,
    virtualEnclaveName: string,
    options?: EnclaveEndpointsListByEnclaveResourceOptionalParams,
  ): PagedAsyncIterableIterator<EnclaveEndpointResource>;
  /**
   * Get a EnclaveEndpointResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param virtualEnclaveName The name of the enclaveResource Resource
   * @param enclaveEndpointName The name of the Enclave Endpoint Resource
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    virtualEnclaveName: string,
    enclaveEndpointName: string,
    options?: EnclaveEndpointsGetOptionalParams,
  ): Promise<EnclaveEndpointsGetResponse>;
  /**
   * Create a EnclaveEndpointResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param virtualEnclaveName The name of the enclaveResource Resource
   * @param enclaveEndpointName The name of the Enclave Endpoint Resource
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    virtualEnclaveName: string,
    enclaveEndpointName: string,
    resource: EnclaveEndpointResource,
    options?: EnclaveEndpointsCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<EnclaveEndpointsCreateOrUpdateResponse>,
      EnclaveEndpointsCreateOrUpdateResponse
    >
  >;
  /**
   * Create a EnclaveEndpointResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param virtualEnclaveName The name of the enclaveResource Resource
   * @param enclaveEndpointName The name of the Enclave Endpoint Resource
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    virtualEnclaveName: string,
    enclaveEndpointName: string,
    resource: EnclaveEndpointResource,
    options?: EnclaveEndpointsCreateOrUpdateOptionalParams,
  ): Promise<EnclaveEndpointsCreateOrUpdateResponse>;
  /**
   * Update a EnclaveEndpointResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param virtualEnclaveName The name of the enclaveResource Resource
   * @param enclaveEndpointName The name of the Enclave Endpoint Resource
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    virtualEnclaveName: string,
    enclaveEndpointName: string,
    properties: EnclaveEndpointResourceUpdate,
    options?: EnclaveEndpointsUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<EnclaveEndpointsUpdateResponse>,
      EnclaveEndpointsUpdateResponse
    >
  >;
  /**
   * Update a EnclaveEndpointResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param virtualEnclaveName The name of the enclaveResource Resource
   * @param enclaveEndpointName The name of the Enclave Endpoint Resource
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    virtualEnclaveName: string,
    enclaveEndpointName: string,
    properties: EnclaveEndpointResourceUpdate,
    options?: EnclaveEndpointsUpdateOptionalParams,
  ): Promise<EnclaveEndpointsUpdateResponse>;
  /**
   * Delete a EnclaveEndpointResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param virtualEnclaveName The name of the enclaveResource Resource
   * @param enclaveEndpointName The name of the Enclave Endpoint Resource
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    virtualEnclaveName: string,
    enclaveEndpointName: string,
    options?: EnclaveEndpointsDeleteOptionalParams,
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Delete a EnclaveEndpointResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param virtualEnclaveName The name of the enclaveResource Resource
   * @param enclaveEndpointName The name of the Enclave Endpoint Resource
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    virtualEnclaveName: string,
    enclaveEndpointName: string,
    options?: EnclaveEndpointsDeleteOptionalParams,
  ): Promise<void>;
  /**
   * Callback that triggers on approval state change.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param virtualEnclaveName The name of the enclaveResource Resource
   * @param enclaveEndpointName The name of the Enclave Endpoint Resource
   * @param body The content of the action request
   * @param options The options parameters.
   */
  beginApprovalCallback(
    resourceGroupName: string,
    virtualEnclaveName: string,
    enclaveEndpointName: string,
    body: ApprovalCallbackRequest,
    options?: EnclaveEndpointsApprovalCallbackOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<EnclaveEndpointsApprovalCallbackResponse>,
      EnclaveEndpointsApprovalCallbackResponse
    >
  >;
  /**
   * Callback that triggers on approval state change.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param virtualEnclaveName The name of the enclaveResource Resource
   * @param enclaveEndpointName The name of the Enclave Endpoint Resource
   * @param body The content of the action request
   * @param options The options parameters.
   */
  beginApprovalCallbackAndWait(
    resourceGroupName: string,
    virtualEnclaveName: string,
    enclaveEndpointName: string,
    body: ApprovalCallbackRequest,
    options?: EnclaveEndpointsApprovalCallbackOptionalParams,
  ): Promise<EnclaveEndpointsApprovalCallbackResponse>;
  /**
   * Callback that triggers on approval deletion state change.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param virtualEnclaveName The name of the enclaveResource Resource
   * @param enclaveEndpointName The name of the Enclave Endpoint Resource
   * @param body The content of the action request
   * @param options The options parameters.
   */
  beginApprovalDeletionCallback(
    resourceGroupName: string,
    virtualEnclaveName: string,
    enclaveEndpointName: string,
    body: ApprovalDeletionCallbackRequest,
    options?: EnclaveEndpointsApprovalDeletionCallbackOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<EnclaveEndpointsApprovalDeletionCallbackResponse>,
      EnclaveEndpointsApprovalDeletionCallbackResponse
    >
  >;
  /**
   * Callback that triggers on approval deletion state change.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param virtualEnclaveName The name of the enclaveResource Resource
   * @param enclaveEndpointName The name of the Enclave Endpoint Resource
   * @param body The content of the action request
   * @param options The options parameters.
   */
  beginApprovalDeletionCallbackAndWait(
    resourceGroupName: string,
    virtualEnclaveName: string,
    enclaveEndpointName: string,
    body: ApprovalDeletionCallbackRequest,
    options?: EnclaveEndpointsApprovalDeletionCallbackOptionalParams,
  ): Promise<EnclaveEndpointsApprovalDeletionCallbackResponse>;
}
