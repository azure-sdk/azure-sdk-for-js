/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { WorkspacePolicyFragment } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ApiManagementClient } from "../apiManagementClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  WorkspacePolicyFragmentListByServiceOptionalParams,
  WorkspacePolicyFragmentListByServiceResponse,
  WorkspacePolicyFragmentGetEntityTagOptionalParams,
  WorkspacePolicyFragmentGetEntityTagResponse,
  WorkspacePolicyFragmentGetOptionalParams,
  WorkspacePolicyFragmentGetResponse,
  PolicyFragmentContract,
  WorkspacePolicyFragmentCreateOrUpdateOptionalParams,
  WorkspacePolicyFragmentCreateOrUpdateResponse,
  WorkspacePolicyFragmentDeleteOptionalParams,
  WorkspacePolicyFragmentListReferencesOptionalParams,
  WorkspacePolicyFragmentListReferencesResponse
} from "../models";

/** Class containing WorkspacePolicyFragment operations. */
export class WorkspacePolicyFragmentImpl implements WorkspacePolicyFragment {
  private readonly client: ApiManagementClient;

  /**
   * Initialize a new instance of the class WorkspacePolicyFragment class.
   * @param client Reference to the service client
   */
  constructor(client: ApiManagementClient) {
    this.client = client;
  }

  /**
   * Gets all policy fragments defined within a workspace.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceName The name of the API Management service.
   * @param workspaceId Workspace identifier. Must be unique in the current API Management service
   *                    instance.
   * @param options The options parameters.
   */
  listByService(
    resourceGroupName: string,
    serviceName: string,
    workspaceId: string,
    options?: WorkspacePolicyFragmentListByServiceOptionalParams
  ): Promise<WorkspacePolicyFragmentListByServiceResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, serviceName, workspaceId, options },
      listByServiceOperationSpec
    );
  }

  /**
   * Gets the entity state (Etag) version of a policy fragment.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceName The name of the API Management service.
   * @param workspaceId Workspace identifier. Must be unique in the current API Management service
   *                    instance.
   * @param id A resource identifier.
   * @param options The options parameters.
   */
  getEntityTag(
    resourceGroupName: string,
    serviceName: string,
    workspaceId: string,
    id: string,
    options?: WorkspacePolicyFragmentGetEntityTagOptionalParams
  ): Promise<WorkspacePolicyFragmentGetEntityTagResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, serviceName, workspaceId, id, options },
      getEntityTagOperationSpec
    );
  }

  /**
   * Gets a policy fragment.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceName The name of the API Management service.
   * @param workspaceId Workspace identifier. Must be unique in the current API Management service
   *                    instance.
   * @param id A resource identifier.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    serviceName: string,
    workspaceId: string,
    id: string,
    options?: WorkspacePolicyFragmentGetOptionalParams
  ): Promise<WorkspacePolicyFragmentGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, serviceName, workspaceId, id, options },
      getOperationSpec
    );
  }

  /**
   * Creates or updates a policy fragment.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceName The name of the API Management service.
   * @param workspaceId Workspace identifier. Must be unique in the current API Management service
   *                    instance.
   * @param id A resource identifier.
   * @param parameters The policy fragment contents to apply.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    serviceName: string,
    workspaceId: string,
    id: string,
    parameters: PolicyFragmentContract,
    options?: WorkspacePolicyFragmentCreateOrUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<WorkspacePolicyFragmentCreateOrUpdateResponse>,
      WorkspacePolicyFragmentCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<WorkspacePolicyFragmentCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        serviceName,
        workspaceId,
        id,
        parameters,
        options
      },
      spec: createOrUpdateOperationSpec
    });
    const poller = await createHttpPoller<
      WorkspacePolicyFragmentCreateOrUpdateResponse,
      OperationState<WorkspacePolicyFragmentCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Creates or updates a policy fragment.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceName The name of the API Management service.
   * @param workspaceId Workspace identifier. Must be unique in the current API Management service
   *                    instance.
   * @param id A resource identifier.
   * @param parameters The policy fragment contents to apply.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    serviceName: string,
    workspaceId: string,
    id: string,
    parameters: PolicyFragmentContract,
    options?: WorkspacePolicyFragmentCreateOrUpdateOptionalParams
  ): Promise<WorkspacePolicyFragmentCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      serviceName,
      workspaceId,
      id,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Deletes a policy fragment.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceName The name of the API Management service.
   * @param workspaceId Workspace identifier. Must be unique in the current API Management service
   *                    instance.
   * @param id A resource identifier.
   * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
   *                response of the GET request or it should be * for unconditional update.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    serviceName: string,
    workspaceId: string,
    id: string,
    ifMatch: string,
    options?: WorkspacePolicyFragmentDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, serviceName, workspaceId, id, ifMatch, options },
      deleteOperationSpec
    );
  }

  /**
   * Lists policy resources that reference the policy fragment.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceName The name of the API Management service.
   * @param workspaceId Workspace identifier. Must be unique in the current API Management service
   *                    instance.
   * @param id A resource identifier.
   * @param options The options parameters.
   */
  listReferences(
    resourceGroupName: string,
    serviceName: string,
    workspaceId: string,
    id: string,
    options?: WorkspacePolicyFragmentListReferencesOptionalParams
  ): Promise<WorkspacePolicyFragmentListReferencesResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, serviceName, workspaceId, id, options },
      listReferencesOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByServiceOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/workspaces/{workspaceId}/policyFragments",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyFragmentCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.filter,
    Parameters.top,
    Parameters.skip,
    Parameters.apiVersion,
    Parameters.orderby
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.subscriptionId,
    Parameters.workspaceId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getEntityTagOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/workspaces/{workspaceId}/policyFragments/{id}",
  httpMethod: "HEAD",
  responses: {
    200: {
      headersMapper: Mappers.WorkspacePolicyFragmentGetEntityTagHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.subscriptionId,
    Parameters.id,
    Parameters.workspaceId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/workspaces/{workspaceId}/policyFragments/{id}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyFragmentContract,
      headersMapper: Mappers.WorkspacePolicyFragmentGetHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.format2],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.subscriptionId,
    Parameters.id,
    Parameters.workspaceId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/workspaces/{workspaceId}/policyFragments/{id}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyFragmentContract,
      headersMapper: Mappers.WorkspacePolicyFragmentCreateOrUpdateHeaders
    },
    201: {
      bodyMapper: Mappers.PolicyFragmentContract,
      headersMapper: Mappers.WorkspacePolicyFragmentCreateOrUpdateHeaders
    },
    202: {
      bodyMapper: Mappers.PolicyFragmentContract,
      headersMapper: Mappers.WorkspacePolicyFragmentCreateOrUpdateHeaders
    },
    204: {
      bodyMapper: Mappers.PolicyFragmentContract,
      headersMapper: Mappers.WorkspacePolicyFragmentCreateOrUpdateHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters59,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.subscriptionId,
    Parameters.id,
    Parameters.workspaceId
  ],
  headerParameters: [
    Parameters.accept,
    Parameters.contentType,
    Parameters.ifMatch
  ],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/workspaces/{workspaceId}/policyFragments/{id}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.subscriptionId,
    Parameters.id,
    Parameters.workspaceId
  ],
  headerParameters: [Parameters.accept, Parameters.ifMatch1],
  serializer
};
const listReferencesOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/workspaces/{workspaceId}/policyFragments/{id}/listReferences",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.top, Parameters.skip, Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.subscriptionId,
    Parameters.id,
    Parameters.workspaceId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
