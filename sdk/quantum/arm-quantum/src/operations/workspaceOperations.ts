/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { WorkspaceOperations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureQuantumManagementClient } from "../azureQuantumManagementClient";
import {
  QuantumWorkspace,
  WorkspaceOperationsCheckNameAvailabilityOptionalParams,
  WorkspaceOperationsCheckNameAvailabilityResponse
} from "../models";

/** Class containing WorkspaceOperations operations. */
export class WorkspaceOperationsImpl implements WorkspaceOperations {
  private readonly client: AzureQuantumManagementClient;

  /**
   * Initialize a new instance of the class WorkspaceOperations class.
   * @param client Reference to the service client
   */
  constructor(client: AzureQuantumManagementClient) {
    this.client = client;
  }

  /**
   * Check the availability of the resource name.
   * @param location The name of Azure region.
   * @param body The CheckAvailability request
   * @param options The options parameters.
   */
  checkNameAvailability(
    location: string,
    body: QuantumWorkspace,
    options?: WorkspaceOperationsCheckNameAvailabilityOptionalParams
  ): Promise<WorkspaceOperationsCheckNameAvailabilityResponse> {
    return this.client.sendOperationRequest(
      { location, body, options },
      checkNameAvailabilityOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const checkNameAvailabilityOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Quantum/locations/{location}/checkNameAvailability",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CheckNameAvailabilityResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
