/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  QuantumWorkspace,
  WorkspacesListBySubscriptionOptionalParams,
  WorkspacesListByResourceGroupOptionalParams,
  CheckNameAvailabilityRequest,
  WorkspacesCheckNameAvailabilityOptionalParams,
  WorkspacesCheckNameAvailabilityResponse,
  WorkspacesGetOptionalParams,
  WorkspacesGetResponse,
  WorkspacesCreateOrUpdateOptionalParams,
  WorkspacesCreateOrUpdateResponse,
  TagsObject,
  WorkspacesUpdateTagsOptionalParams,
  WorkspacesUpdateTagsResponse,
  WorkspacesDeleteOptionalParams,
  WorkspacesDeleteResponse,
  WorkspacesListKeysOptionalParams,
  WorkspacesListKeysResponse,
  ApiKeys,
  WorkspacesRegenerateKeysOptionalParams,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Workspaces. */
export interface Workspaces {
  /**
   * Gets the list of Workspaces within a Subscription.
   * @param options The options parameters.
   */
  listBySubscription(
    options?: WorkspacesListBySubscriptionOptionalParams,
  ): PagedAsyncIterableIterator<QuantumWorkspace>;
  /**
   * Gets the list of Workspaces within a resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: WorkspacesListByResourceGroupOptionalParams,
  ): PagedAsyncIterableIterator<QuantumWorkspace>;
  /**
   * Check the availability of the resource name for the given location.
   * @param location The name of the Azure region.
   * @param body The CheckAvailability request
   * @param options The options parameters.
   */
  checkNameAvailability(
    location: string,
    body: CheckNameAvailabilityRequest,
    options?: WorkspacesCheckNameAvailabilityOptionalParams,
  ): Promise<WorkspacesCheckNameAvailabilityResponse>;
  /**
   * Returns the Workspace resource associated with the given name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the quantum workspace resource.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    workspaceName: string,
    options?: WorkspacesGetOptionalParams,
  ): Promise<WorkspacesGetResponse>;
  /**
   * Creates or updates a Workspace resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the quantum workspace resource.
   * @param resource Workspace details.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    workspaceName: string,
    resource: QuantumWorkspace,
    options?: WorkspacesCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<WorkspacesCreateOrUpdateResponse>,
      WorkspacesCreateOrUpdateResponse
    >
  >;
  /**
   * Creates or updates a Workspace resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the quantum workspace resource.
   * @param resource Workspace details.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    workspaceName: string,
    resource: QuantumWorkspace,
    options?: WorkspacesCreateOrUpdateOptionalParams,
  ): Promise<WorkspacesCreateOrUpdateResponse>;
  /**
   * Updates an existing Workspace's tags.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the quantum workspace resource.
   * @param properties Parameters supplied to update tags.
   * @param options The options parameters.
   */
  updateTags(
    resourceGroupName: string,
    workspaceName: string,
    properties: TagsObject,
    options?: WorkspacesUpdateTagsOptionalParams,
  ): Promise<WorkspacesUpdateTagsResponse>;
  /**
   * Deletes a Workspace resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the quantum workspace resource.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    workspaceName: string,
    options?: WorkspacesDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<WorkspacesDeleteResponse>,
      WorkspacesDeleteResponse
    >
  >;
  /**
   * Deletes a Workspace resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the quantum workspace resource.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    workspaceName: string,
    options?: WorkspacesDeleteOptionalParams,
  ): Promise<WorkspacesDeleteResponse>;
  /**
   * Get the keys to use with the Quantum APIs. A key is used to authenticate and authorize access to the
   * Quantum REST APIs. Only one key is needed at a time; two are given to provide seamless key
   * regeneration.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the quantum workspace resource.
   * @param options The options parameters.
   */
  listKeys(
    resourceGroupName: string,
    workspaceName: string,
    options?: WorkspacesListKeysOptionalParams,
  ): Promise<WorkspacesListKeysResponse>;
  /**
   * Regenerate either the primary or secondary key for use with the Quantum APIs. The old key will stop
   * working immediately.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the quantum workspace resource.
   * @param body Which key to regenerate:  primary or secondary.
   * @param options The options parameters.
   */
  regenerateKeys(
    resourceGroupName: string,
    workspaceName: string,
    body: ApiKeys,
    options?: WorkspacesRegenerateKeysOptionalParams,
  ): Promise<void>;
}
