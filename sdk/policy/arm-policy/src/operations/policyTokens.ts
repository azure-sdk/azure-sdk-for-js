/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PolicyTokens } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { PolicyClient } from "../policyClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  PolicyTokenRequest,
  PolicyTokensAcquireOptionalParams,
  PolicyTokensAcquireResponse,
} from "../models";

/** Class containing PolicyTokens operations. */
export class PolicyTokensImpl implements PolicyTokens {
  private readonly client: PolicyClient;

  /**
   * Initialize a new instance of the class PolicyTokens class.
   * @param client Reference to the service client
   */
  constructor(client: PolicyClient) {
    this.client = client;
  }

  /**
   * This operation acquires a policy token in the given subscription for the given request body.
   * @param parameters The policy token properties.
   * @param options The options parameters.
   */
  async beginAcquire(
    parameters: PolicyTokenRequest,
    options?: PolicyTokensAcquireOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<PolicyTokensAcquireResponse>,
      PolicyTokensAcquireResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<PolicyTokensAcquireResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { parameters, options },
      spec: acquireOperationSpec,
    });
    const poller = await createHttpPoller<
      PolicyTokensAcquireResponse,
      OperationState<PolicyTokensAcquireResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * This operation acquires a policy token in the given subscription for the given request body.
   * @param parameters The policy token properties.
   * @param options The options parameters.
   */
  async beginAcquireAndWait(
    parameters: PolicyTokenRequest,
    options?: PolicyTokensAcquireOptionalParams,
  ): Promise<PolicyTokensAcquireResponse> {
    const poller = await this.beginAcquire(parameters, options);
    return poller.pollUntilDone();
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const acquireOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/acquirePolicyToken",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyTokenResponse,
    },
    201: {
      bodyMapper: Mappers.PolicyTokenResponse,
    },
    202: {
      bodyMapper: Mappers.PolicyTokenResponse,
    },
    204: {
      bodyMapper: Mappers.PolicyTokenResponse,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.parameters6,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
