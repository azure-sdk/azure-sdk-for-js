/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const MonitorListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MonitorListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Monitor",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ManagedServiceIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedServiceIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "Uuid",
        },
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "Uuid",
        },
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "UserAssignedIdentity" },
          },
        },
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const UserAssignedIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserAssignedIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "Uuid",
        },
      },
      clientId: {
        serializedName: "clientId",
        readOnly: true,
        type: {
          name: "Uuid",
        },
      },
    },
  },
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail",
            },
          },
        },
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo",
            },
          },
        },
      },
    },
  },
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } },
        },
      },
    },
  },
};

export const ManagedRGConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedRGConfiguration",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AppServicePlanConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AppServicePlanConfiguration",
    modelProperties: {
      tier: {
        serializedName: "tier",
        type: {
          name: "String",
        },
      },
      capacity: {
        constraints: {
          InclusiveMinimum: 0,
        },
        serializedName: "capacity",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData",
        },
      },
    },
  },
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String",
        },
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String",
        },
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime",
        },
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String",
        },
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String",
        },
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail",
        },
      },
    },
  },
};

export const UpdateMonitorRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateMonitorRequest",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity",
        },
      },
    },
  },
};

export const ProviderInstanceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProviderInstanceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ProviderInstance",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Health: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Health",
    modelProperties: {
      healthState: {
        serializedName: "healthState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      impactingReasons: {
        serializedName: "impactingReasons",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ProviderSpecificProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProviderSpecificProperties",
    uberParent: "ProviderSpecificProperties",
    polymorphicDiscriminator: {
      serializedName: "providerType",
      clientName: "providerType",
    },
    modelProperties: {
      providerType: {
        serializedName: "providerType",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AlertTemplatesListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AlertTemplatesListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AlertTemplate",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AlertTemplateMetricMeasurement: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AlertTemplateMetricMeasurement",
    modelProperties: {
      thresholdOperator: {
        serializedName: "thresholdOperator",
        type: {
          name: "String",
        },
      },
      threshold: {
        serializedName: "threshold",
        type: {
          name: "Number",
        },
      },
      metricTriggerType: {
        serializedName: "metricTriggerType",
        type: {
          name: "String",
        },
      },
      metricColumn: {
        serializedName: "metricColumn",
        type: {
          name: "String",
        },
      },
      frequencyInMinutes: {
        serializedName: "frequencyInMinutes",
        type: {
          name: "Number",
        },
      },
      timeWindowInMinutes: {
        serializedName: "timeWindowInMinutes",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const AlertTemplateQueryInputParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AlertTemplateQueryInputParameter",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "description",
        type: {
          name: "String",
        },
      },
      defaultValue: {
        serializedName: "defaultValue",
        type: {
          name: "String",
        },
      },
      laQuery: {
        serializedName: "laQuery",
        type: {
          name: "String",
        },
      },
      selectionMode: {
        serializedName: "selectionMode",
        type: {
          name: "String",
        },
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AlertsListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AlertsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Alert",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AlertQueryParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AlertQueryParameter",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      value: {
        serializedName: "value",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Db2JobConfigurationsListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Db2JobConfigurationsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Db2JobConfiguration",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ConfigurationParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConfigurationParameter",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      value: {
        serializedName: "value",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ActionsParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ActionsParameter",
    modelProperties: {
      functionName: {
        serializedName: "functionName",
        type: {
          name: "String",
        },
      },
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConfigurationParameter",
            },
          },
        },
      },
    },
  },
};

export const SapLandscapeMonitorPropertiesGrouping: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "SapLandscapeMonitorPropertiesGrouping",
      modelProperties: {
        landscape: {
          serializedName: "landscape",
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "Composite",
                className: "SapLandscapeMonitorSidMapping",
              },
            },
          },
        },
        sapApplication: {
          serializedName: "sapApplication",
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "Composite",
                className: "SapLandscapeMonitorSidMapping",
              },
            },
          },
        },
      },
    },
  };

export const SapLandscapeMonitorSidMapping: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SapLandscapeMonitorSidMapping",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      topSid: {
        serializedName: "topSid",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const SapLandscapeMonitorMetricThresholds: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SapLandscapeMonitorMetricThresholds",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      green: {
        serializedName: "green",
        type: {
          name: "Number",
        },
      },
      yellow: {
        serializedName: "yellow",
        type: {
          name: "Number",
        },
      },
      red: {
        serializedName: "red",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const SapLandscapeMonitorListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SapLandscapeMonitorListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SapLandscapeMonitor",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      isDataAction: {
        serializedName: "isDataAction",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay",
        },
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      actionType: {
        serializedName: "actionType",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Tags: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Tags",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
    },
  },
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties,
    },
  },
};

export const OracleProviderInstanceProperties: coreClient.CompositeMapper = {
  serializedName: "Oracle",
  type: {
    name: "Composite",
    className: "OracleProviderInstanceProperties",
    uberParent: "ProviderSpecificProperties",
    polymorphicDiscriminator:
      ProviderSpecificProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProviderSpecificProperties.type.modelProperties,
      hostname: {
        serializedName: "hostname",
        type: {
          name: "String",
        },
      },
      dbName: {
        serializedName: "dbName",
        type: {
          name: "String",
        },
      },
      dbPort: {
        serializedName: "dbPort",
        type: {
          name: "String",
        },
      },
      dbUsername: {
        serializedName: "dbUsername",
        type: {
          name: "String",
        },
      },
      dbPassword: {
        serializedName: "dbPassword",
        type: {
          name: "String",
        },
      },
      dbPasswordUri: {
        serializedName: "dbPasswordUri",
        type: {
          name: "String",
        },
      },
      sapSid: {
        serializedName: "sapSid",
        type: {
          name: "String",
        },
      },
      sslPreference: {
        serializedName: "sslPreference",
        type: {
          name: "String",
        },
      },
      sslCertificateUri: {
        serializedName: "sslCertificateUri",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const HanaDbProviderInstanceProperties: coreClient.CompositeMapper = {
  serializedName: "SapHana",
  type: {
    name: "Composite",
    className: "HanaDbProviderInstanceProperties",
    uberParent: "ProviderSpecificProperties",
    polymorphicDiscriminator:
      ProviderSpecificProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProviderSpecificProperties.type.modelProperties,
      hostname: {
        serializedName: "hostname",
        type: {
          name: "String",
        },
      },
      dbName: {
        serializedName: "dbName",
        type: {
          name: "String",
        },
      },
      sqlPort: {
        serializedName: "sqlPort",
        type: {
          name: "String",
        },
      },
      instanceNumber: {
        serializedName: "instanceNumber",
        type: {
          name: "String",
        },
      },
      dbUsername: {
        serializedName: "dbUsername",
        type: {
          name: "String",
        },
      },
      dbPassword: {
        serializedName: "dbPassword",
        type: {
          name: "String",
        },
      },
      dbPasswordUri: {
        serializedName: "dbPasswordUri",
        type: {
          name: "String",
        },
      },
      sslCertificateUri: {
        serializedName: "sslCertificateUri",
        type: {
          name: "String",
        },
      },
      sslHostNameInCertificate: {
        serializedName: "sslHostNameInCertificate",
        type: {
          name: "String",
        },
      },
      sslPreference: {
        serializedName: "sslPreference",
        type: {
          name: "String",
        },
      },
      sapSid: {
        serializedName: "sapSid",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SapNetWeaverProviderInstanceProperties: coreClient.CompositeMapper =
  {
    serializedName: "SapNetWeaver",
    type: {
      name: "Composite",
      className: "SapNetWeaverProviderInstanceProperties",
      uberParent: "ProviderSpecificProperties",
      polymorphicDiscriminator:
        ProviderSpecificProperties.type.polymorphicDiscriminator,
      modelProperties: {
        ...ProviderSpecificProperties.type.modelProperties,
        sapSid: {
          serializedName: "sapSid",
          type: {
            name: "String",
          },
        },
        sapHostname: {
          serializedName: "sapHostname",
          type: {
            name: "String",
          },
        },
        sapInstanceNr: {
          serializedName: "sapInstanceNr",
          type: {
            name: "String",
          },
        },
        sapHostFileEntries: {
          serializedName: "sapHostFileEntries",
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "String",
              },
            },
          },
        },
        sapUsername: {
          serializedName: "sapUsername",
          type: {
            name: "String",
          },
        },
        sapPassword: {
          serializedName: "sapPassword",
          type: {
            name: "String",
          },
        },
        sapPasswordUri: {
          serializedName: "sapPasswordUri",
          type: {
            name: "String",
          },
        },
        sapClientId: {
          serializedName: "sapClientId",
          type: {
            name: "String",
          },
        },
        sapPortNumber: {
          serializedName: "sapPortNumber",
          type: {
            name: "String",
          },
        },
        sslCertificateUri: {
          serializedName: "sslCertificateUri",
          type: {
            name: "String",
          },
        },
        sslPreference: {
          serializedName: "sslPreference",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const PrometheusOSProviderInstanceProperties: coreClient.CompositeMapper =
  {
    serializedName: "PrometheusOS",
    type: {
      name: "Composite",
      className: "PrometheusOSProviderInstanceProperties",
      uberParent: "ProviderSpecificProperties",
      polymorphicDiscriminator:
        ProviderSpecificProperties.type.polymorphicDiscriminator,
      modelProperties: {
        ...ProviderSpecificProperties.type.modelProperties,
        prometheusUrl: {
          serializedName: "prometheusUrl",
          type: {
            name: "String",
          },
        },
        sslPreference: {
          serializedName: "sslPreference",
          type: {
            name: "String",
          },
        },
        sslCertificateUri: {
          serializedName: "sslCertificateUri",
          type: {
            name: "String",
          },
        },
        sapSid: {
          serializedName: "sapSid",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const DB2ProviderInstanceProperties: coreClient.CompositeMapper = {
  serializedName: "Db2",
  type: {
    name: "Composite",
    className: "DB2ProviderInstanceProperties",
    uberParent: "ProviderSpecificProperties",
    polymorphicDiscriminator:
      ProviderSpecificProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProviderSpecificProperties.type.modelProperties,
      hostname: {
        serializedName: "hostname",
        type: {
          name: "String",
        },
      },
      dbName: {
        serializedName: "dbName",
        type: {
          name: "String",
        },
      },
      dbPort: {
        serializedName: "dbPort",
        type: {
          name: "String",
        },
      },
      dbUsername: {
        serializedName: "dbUsername",
        type: {
          name: "String",
        },
      },
      dbPassword: {
        serializedName: "dbPassword",
        type: {
          name: "String",
        },
      },
      dbPasswordUri: {
        serializedName: "dbPasswordUri",
        type: {
          name: "String",
        },
      },
      sapSid: {
        serializedName: "sapSid",
        type: {
          name: "String",
        },
      },
      sslPreference: {
        serializedName: "sslPreference",
        type: {
          name: "String",
        },
      },
      sslCertificateUri: {
        serializedName: "sslCertificateUri",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PrometheusHaClusterProviderInstanceProperties: coreClient.CompositeMapper =
  {
    serializedName: "PrometheusHaCluster",
    type: {
      name: "Composite",
      className: "PrometheusHaClusterProviderInstanceProperties",
      uberParent: "ProviderSpecificProperties",
      polymorphicDiscriminator:
        ProviderSpecificProperties.type.polymorphicDiscriminator,
      modelProperties: {
        ...ProviderSpecificProperties.type.modelProperties,
        prometheusUrl: {
          serializedName: "prometheusUrl",
          type: {
            name: "String",
          },
        },
        hostname: {
          serializedName: "hostname",
          type: {
            name: "String",
          },
        },
        sid: {
          serializedName: "sid",
          type: {
            name: "String",
          },
        },
        clusterName: {
          serializedName: "clusterName",
          type: {
            name: "String",
          },
        },
        sslPreference: {
          serializedName: "sslPreference",
          type: {
            name: "String",
          },
        },
        sslCertificateUri: {
          serializedName: "sslCertificateUri",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const MsSqlServerProviderInstanceProperties: coreClient.CompositeMapper =
  {
    serializedName: "MsSqlServer",
    type: {
      name: "Composite",
      className: "MsSqlServerProviderInstanceProperties",
      uberParent: "ProviderSpecificProperties",
      polymorphicDiscriminator:
        ProviderSpecificProperties.type.polymorphicDiscriminator,
      modelProperties: {
        ...ProviderSpecificProperties.type.modelProperties,
        hostname: {
          serializedName: "hostname",
          type: {
            name: "String",
          },
        },
        dbPort: {
          serializedName: "dbPort",
          type: {
            name: "String",
          },
        },
        dbUsername: {
          serializedName: "dbUsername",
          type: {
            name: "String",
          },
        },
        dbPassword: {
          serializedName: "dbPassword",
          type: {
            name: "String",
          },
        },
        dbPasswordUri: {
          serializedName: "dbPasswordUri",
          type: {
            name: "String",
          },
        },
        sapSid: {
          serializedName: "sapSid",
          type: {
            name: "String",
          },
        },
        sslPreference: {
          serializedName: "sslPreference",
          type: {
            name: "String",
          },
        },
        sslCertificateUri: {
          serializedName: "sslCertificateUri",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const Monitor: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Monitor",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity",
        },
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      errors: {
        serializedName: "properties.errors",
        type: {
          name: "Composite",
          className: "ErrorDetail",
        },
      },
      appLocation: {
        serializedName: "properties.appLocation",
        type: {
          name: "String",
        },
      },
      routingPreference: {
        serializedName: "properties.routingPreference",
        type: {
          name: "String",
        },
      },
      zoneRedundancyPreference: {
        serializedName: "properties.zoneRedundancyPreference",
        type: {
          name: "String",
        },
      },
      managedResourceGroupConfiguration: {
        serializedName: "properties.managedResourceGroupConfiguration",
        type: {
          name: "Composite",
          className: "ManagedRGConfiguration",
        },
      },
      logAnalyticsWorkspaceArmId: {
        serializedName: "properties.logAnalyticsWorkspaceArmId",
        type: {
          name: "String",
        },
      },
      monitorSubnet: {
        serializedName: "properties.monitorSubnet",
        type: {
          name: "String",
        },
      },
      appServicePlanConfiguration: {
        serializedName: "properties.appServicePlanConfiguration",
        type: {
          name: "Composite",
          className: "AppServicePlanConfiguration",
        },
      },
      msiArmId: {
        serializedName: "properties.msiArmId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      storageAccountArmId: {
        serializedName: "properties.storageAccountArmId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ProviderInstance: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProviderInstance",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      health: {
        serializedName: "properties.health",
        type: {
          name: "Composite",
          className: "Health",
        },
      },
      errors: {
        serializedName: "properties.errors",
        type: {
          name: "Composite",
          className: "ErrorDetail",
        },
      },
      providerSettings: {
        serializedName: "properties.providerSettings",
        type: {
          name: "Composite",
          className: "ProviderSpecificProperties",
        },
      },
    },
  },
};

export const AlertTemplate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AlertTemplate",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      templateDisplayName: {
        serializedName: "properties.templateDisplayName",
        type: {
          name: "String",
        },
      },
      providerType: {
        serializedName: "properties.providerType",
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String",
        },
      },
      severity: {
        constraints: {
          InclusiveMaximum: 4,
          InclusiveMinimum: 0,
        },
        serializedName: "properties.severity",
        type: {
          name: "Number",
        },
      },
      query: {
        serializedName: "properties.query",
        type: {
          name: "String",
        },
      },
      thresholdOperator: {
        serializedName: "properties.thresholdOperator",
        type: {
          name: "String",
        },
      },
      defaultThreshold: {
        serializedName: "properties.defaultThreshold",
        type: {
          name: "Number",
        },
      },
      lowerBound: {
        serializedName: "properties.lowerBound",
        type: {
          name: "Number",
        },
      },
      upperBound: {
        serializedName: "properties.upperBound",
        type: {
          name: "Number",
        },
      },
      defaultThresholdInputOption: {
        serializedName: "properties.defaultThresholdInputOption",
        type: {
          name: "String",
        },
      },
      alertUnit: {
        serializedName: "properties.alertUnit",
        type: {
          name: "String",
        },
      },
      metricMeasurement: {
        serializedName: "properties.metricMeasurement",
        type: {
          name: "Composite",
          className: "AlertTemplateMetricMeasurement",
        },
      },
      queryInputParameters: {
        serializedName: "properties.queryInputParameters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AlertTemplateQueryInputParameter",
            },
          },
        },
      },
    },
  },
};

export const Alert: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Alert",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      errors: {
        serializedName: "properties.errors",
        type: {
          name: "Composite",
          className: "ErrorDetail",
        },
      },
      templateName: {
        serializedName: "properties.templateName",
        type: {
          name: "String",
        },
      },
      alertRuleResourceId: {
        serializedName: "properties.alertRuleResourceId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      providerType: {
        serializedName: "properties.providerType",
        type: {
          name: "String",
        },
      },
      providerNames: {
        serializedName: "properties.providerNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      status: {
        serializedName: "properties.alertRuleProperties.status",
        type: {
          name: "String",
        },
      },
      severity: {
        constraints: {
          InclusiveMaximum: 4,
          InclusiveMinimum: 0,
        },
        serializedName: "properties.alertRuleProperties.severity",
        type: {
          name: "Number",
        },
      },
      actionGroups: {
        serializedName: "properties.alertRuleProperties.actionGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      threshold: {
        serializedName: "properties.alertRuleProperties.threshold",
        type: {
          name: "Number",
        },
      },
      thresholdOperator: {
        serializedName: "properties.alertRuleProperties.thresholdOperator",
        type: {
          name: "String",
        },
      },
      windowSize: {
        serializedName: "properties.alertRuleProperties.windowSize",
        type: {
          name: "Number",
        },
      },
      evaluationFrequency: {
        serializedName: "properties.alertRuleProperties.evaluationFrequency",
        type: {
          name: "Number",
        },
      },
      failingPeriodsToAlert: {
        serializedName: "properties.alertRuleProperties.failingPeriodsToAlert",
        type: {
          name: "Number",
        },
      },
      failingPeriodsOperator: {
        serializedName: "properties.alertRuleProperties.failingPeriodsOperator",
        type: {
          name: "String",
        },
      },
      muteActionsDuration: {
        defaultValue: 0,
        serializedName: "properties.alertRuleProperties.muteActionsDuration",
        type: {
          name: "Number",
        },
      },
      autoMitigate: {
        defaultValue: "Disable",
        serializedName: "properties.alertRuleProperties.autoMitigate",
        type: {
          name: "String",
        },
      },
      dimension: {
        defaultValue: "",
        serializedName: "properties.alertRuleProperties.dimension",
        type: {
          name: "String",
        },
      },
      alertQueryParameters: {
        serializedName: "properties.alertRuleProperties.alertQueryParameters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AlertQueryParameter",
            },
          },
        },
      },
    },
  },
};

export const Db2JobConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Db2JobConfiguration",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String",
        },
      },
      metricName: {
        serializedName: "properties.metricName",
        type: {
          name: "String",
        },
      },
      metricDimensions: {
        serializedName: "properties.metricDimensions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      customLogTable: {
        serializedName: "properties.customLogTable",
        type: {
          name: "String",
        },
      },
      defaultFrequencyInSecs: {
        constraints: {
          InclusiveMaximum: 86400,
          InclusiveMinimum: 0,
        },
        serializedName: "properties.defaultFrequencyInSecs",
        type: {
          name: "Number",
        },
      },
      typePropertiesType: {
        serializedName: "properties.type",
        type: {
          name: "String",
        },
      },
      parameters: {
        serializedName: "properties.parameters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConfigurationParameter",
            },
          },
        },
      },
      actions: {
        serializedName: "properties.actions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ActionsParameter",
            },
          },
        },
      },
    },
  },
};

export const SapLandscapeMonitor: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SapLandscapeMonitor",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      grouping: {
        serializedName: "properties.grouping",
        type: {
          name: "Composite",
          className: "SapLandscapeMonitorPropertiesGrouping",
        },
      },
      topMetricsThresholds: {
        serializedName: "properties.topMetricsThresholds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SapLandscapeMonitorMetricThresholds",
            },
          },
        },
      },
    },
  },
};

export const MonitorsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MonitorsDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const MonitorsUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MonitorsUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ProviderInstancesDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProviderInstancesDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AlertsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AlertsDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Db2JobConfigurationsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Db2JobConfigurationsDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String",
        },
      },
    },
  },
};

export let discriminators = {
  ProviderSpecificProperties: ProviderSpecificProperties,
  "ProviderSpecificProperties.Oracle": OracleProviderInstanceProperties,
  "ProviderSpecificProperties.SapHana": HanaDbProviderInstanceProperties,
  "ProviderSpecificProperties.SapNetWeaver":
    SapNetWeaverProviderInstanceProperties,
  "ProviderSpecificProperties.PrometheusOS":
    PrometheusOSProviderInstanceProperties,
  "ProviderSpecificProperties.Db2": DB2ProviderInstanceProperties,
  "ProviderSpecificProperties.PrometheusHaCluster":
    PrometheusHaClusterProviderInstanceProperties,
  "ProviderSpecificProperties.MsSqlServer":
    MsSqlServerProviderInstanceProperties,
};
