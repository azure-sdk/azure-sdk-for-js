/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreRestPipeline from "@azure/core-rest-pipeline";
import * as coreAuth from "@azure/core-auth";
import {
  MonitorsImpl,
  ProviderInstancesImpl,
  AlertTemplatesImpl,
  AlertsImpl,
  Db2JobConfigurationsImpl,
  SapLandscapeMonitorOperationsImpl,
  OperationsImpl,
} from "./operations";
import {
  Monitors,
  ProviderInstances,
  AlertTemplates,
  Alerts,
  Db2JobConfigurations,
  SapLandscapeMonitorOperations,
  Operations,
} from "./operationsInterfaces";
import { WorkloadsClientOptionalParams } from "./models";

export class WorkloadsClient extends coreClient.ServiceClient {
  $host: string;
  subscriptionId: string;
  providerType?: string;

  /**
   * Initializes a new instance of the WorkloadsClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param subscriptionId The ID of the target subscription. The value must be an UUID.
   * @param options The parameter options
   */
  constructor(
    credentials: coreAuth.TokenCredential,
    subscriptionId: string,
    options?: WorkloadsClientOptionalParams,
  ) {
    if (credentials === undefined) {
      throw new Error("'credentials' cannot be null");
    }
    if (subscriptionId === undefined) {
      throw new Error("'subscriptionId' cannot be null");
    }

    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: WorkloadsClientOptionalParams = {
      requestContentType: "application/json; charset=utf-8",
      credential: credentials,
    };

    const packageDetails = `azsdk-js-arm-workloads-sapmonitors/1.0.0-beta.1`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix,
      },
      endpoint:
        options.endpoint ?? options.baseUri ?? "https://management.azure.com",
    };
    super(optionsWithDefaults);

    let bearerTokenAuthenticationPolicyFound: boolean = false;
    if (options?.pipeline && options.pipeline.getOrderedPolicies().length > 0) {
      const pipelinePolicies: coreRestPipeline.PipelinePolicy[] =
        options.pipeline.getOrderedPolicies();
      bearerTokenAuthenticationPolicyFound = pipelinePolicies.some(
        (pipelinePolicy) =>
          pipelinePolicy.name ===
          coreRestPipeline.bearerTokenAuthenticationPolicyName,
      );
    }
    if (
      !options ||
      !options.pipeline ||
      options.pipeline.getOrderedPolicies().length == 0 ||
      !bearerTokenAuthenticationPolicyFound
    ) {
      this.pipeline.removePolicy({
        name: coreRestPipeline.bearerTokenAuthenticationPolicyName,
      });
      this.pipeline.addPolicy(
        coreRestPipeline.bearerTokenAuthenticationPolicy({
          credential: credentials,
          scopes:
            optionsWithDefaults.credentialScopes ??
            `${optionsWithDefaults.endpoint}/.default`,
          challengeCallbacks: {
            authorizeRequestOnChallenge:
              coreClient.authorizeRequestOnClaimChallenge,
          },
        }),
      );
    }
    // Parameter assignments
    this.subscriptionId = subscriptionId;

    // Assigning values to Constant parameters
    this.$host = options.$host || "https://management.azure.com";
    this.monitors = new MonitorsImpl(this);
    this.providerInstances = new ProviderInstancesImpl(this);
    this.alertTemplates = new AlertTemplatesImpl(this);
    this.alerts = new AlertsImpl(this);
    this.db2JobConfigurations = new Db2JobConfigurationsImpl(this);
    this.sapLandscapeMonitorOperations = new SapLandscapeMonitorOperationsImpl(
      this,
    );
    this.operations = new OperationsImpl(this);
  }

  monitors: Monitors;
  providerInstances: ProviderInstances;
  alertTemplates: AlertTemplates;
  alerts: Alerts;
  db2JobConfigurations: Db2JobConfigurations;
  sapLandscapeMonitorOperations: SapLandscapeMonitorOperations;
  operations: Operations;
}
