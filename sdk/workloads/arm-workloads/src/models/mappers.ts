/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const SAPSizingRecommendationRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SAPSizingRecommendationRequest",
    modelProperties: {
      appLocation: {
        serializedName: "appLocation",
        required: true,
        type: {
          name: "String"
        }
      },
      environment: {
        serializedName: "environment",
        required: true,
        type: {
          name: "String"
        }
      },
      sapProduct: {
        serializedName: "sapProduct",
        required: true,
        type: {
          name: "String"
        }
      },
      deploymentType: {
        serializedName: "deploymentType",
        required: true,
        type: {
          name: "String"
        }
      },
      saps: {
        serializedName: "saps",
        required: true,
        type: {
          name: "Number"
        }
      },
      dbMemory: {
        serializedName: "dbMemory",
        required: true,
        type: {
          name: "Number"
        }
      },
      databaseType: {
        serializedName: "databaseType",
        required: true,
        type: {
          name: "String"
        }
      },
      dbScaleMethod: {
        serializedName: "dbScaleMethod",
        type: {
          name: "String"
        }
      },
      highAvailabilityType: {
        serializedName: "highAvailabilityType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SAPSizingRecommendationResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SAPSizingRecommendationResult",
    uberParent: "SAPSizingRecommendationResult",
    polymorphicDiscriminator: {
      serializedName: "deploymentType",
      clientName: "deploymentType"
    },
    modelProperties: {
      deploymentType: {
        serializedName: "deploymentType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail"
            }
          }
        }
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const SAPSupportedSkusRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SAPSupportedSkusRequest",
    modelProperties: {
      appLocation: {
        serializedName: "appLocation",
        required: true,
        type: {
          name: "String"
        }
      },
      environment: {
        serializedName: "environment",
        required: true,
        type: {
          name: "String"
        }
      },
      sapProduct: {
        serializedName: "sapProduct",
        required: true,
        type: {
          name: "String"
        }
      },
      deploymentType: {
        serializedName: "deploymentType",
        required: true,
        type: {
          name: "String"
        }
      },
      databaseType: {
        serializedName: "databaseType",
        required: true,
        type: {
          name: "String"
        }
      },
      highAvailabilityType: {
        serializedName: "highAvailabilityType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SAPSupportedResourceSkusResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SAPSupportedResourceSkusResult",
    modelProperties: {
      supportedSkus: {
        serializedName: "supportedSkus",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SAPSupportedSku"
            }
          }
        }
      }
    }
  }
};

export const SAPSupportedSku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SAPSupportedSku",
    modelProperties: {
      vmSku: {
        serializedName: "vmSku",
        type: {
          name: "String"
        }
      },
      isAppServerCertified: {
        serializedName: "isAppServerCertified",
        type: {
          name: "Boolean"
        }
      },
      isDatabaseCertified: {
        serializedName: "isDatabaseCertified",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const SAPDiskConfigurationsRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SAPDiskConfigurationsRequest",
    modelProperties: {
      appLocation: {
        serializedName: "appLocation",
        required: true,
        type: {
          name: "String"
        }
      },
      environment: {
        serializedName: "environment",
        required: true,
        type: {
          name: "String"
        }
      },
      sapProduct: {
        serializedName: "sapProduct",
        required: true,
        type: {
          name: "String"
        }
      },
      databaseType: {
        serializedName: "databaseType",
        required: true,
        type: {
          name: "String"
        }
      },
      deploymentType: {
        serializedName: "deploymentType",
        required: true,
        type: {
          name: "String"
        }
      },
      dbVmSku: {
        serializedName: "dbVmSku",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SAPDiskConfigurationsResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SAPDiskConfigurationsResult",
    modelProperties: {
      volumeConfigurations: {
        serializedName: "volumeConfigurations",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "SAPDiskConfiguration" }
          }
        }
      }
    }
  }
};

export const SAPDiskConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SAPDiskConfiguration",
    modelProperties: {
      recommendedConfiguration: {
        serializedName: "recommendedConfiguration",
        type: {
          name: "Composite",
          className: "DiskVolumeConfiguration"
        }
      },
      supportedConfigurations: {
        serializedName: "supportedConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DiskDetails"
            }
          }
        }
      }
    }
  }
};

export const DiskVolumeConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiskVolumeConfiguration",
    modelProperties: {
      count: {
        serializedName: "count",
        type: {
          name: "Number"
        }
      },
      sizeGB: {
        serializedName: "sizeGB",
        type: {
          name: "Number"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "DiskSku"
        }
      }
    }
  }
};

export const DiskSku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiskSku",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DiskDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiskDetails",
    modelProperties: {
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "DiskSku"
        }
      },
      sizeGB: {
        serializedName: "sizeGB",
        type: {
          name: "Number"
        }
      },
      minimumSupportedDiskCount: {
        serializedName: "minimumSupportedDiskCount",
        type: {
          name: "Number"
        }
      },
      maximumSupportedDiskCount: {
        serializedName: "maximumSupportedDiskCount",
        type: {
          name: "Number"
        }
      },
      iopsReadWrite: {
        serializedName: "iopsReadWrite",
        type: {
          name: "Number"
        }
      },
      mbpsReadWrite: {
        serializedName: "mbpsReadWrite",
        type: {
          name: "Number"
        }
      },
      diskTier: {
        serializedName: "diskTier",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SAPAvailabilityZoneDetailsRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SAPAvailabilityZoneDetailsRequest",
    modelProperties: {
      appLocation: {
        serializedName: "appLocation",
        required: true,
        type: {
          name: "String"
        }
      },
      sapProduct: {
        serializedName: "sapProduct",
        required: true,
        type: {
          name: "String"
        }
      },
      databaseType: {
        serializedName: "databaseType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SAPAvailabilityZoneDetailsResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SAPAvailabilityZoneDetailsResult",
    modelProperties: {
      availabilityZonePairs: {
        serializedName: "availabilityZonePairs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SAPAvailabilityZonePair"
            }
          }
        }
      }
    }
  }
};

export const SAPAvailabilityZonePair: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SAPAvailabilityZonePair",
    modelProperties: {
      zoneA: {
        serializedName: "zoneA",
        type: {
          name: "Number"
        }
      },
      zoneB: {
        serializedName: "zoneB",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const UserAssignedServiceIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserAssignedServiceIdentity",
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "UserAssignedIdentity" }
          }
        }
      }
    }
  }
};

export const UserAssignedIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserAssignedIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      clientId: {
        serializedName: "clientId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      }
    }
  }
};

export const SAPConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SAPConfiguration",
    uberParent: "SAPConfiguration",
    polymorphicDiscriminator: {
      serializedName: "configurationType",
      clientName: "configurationType"
    },
    modelProperties: {
      configurationType: {
        serializedName: "configurationType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedRGConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedRGConfiguration",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SAPVirtualInstanceError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SAPVirtualInstanceError",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ErrorDefinition"
        }
      }
    }
  }
};

export const ErrorDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDefinition",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDefinition"
            }
          }
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const UpdateSAPVirtualInstanceRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateSAPVirtualInstanceRequest",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "UserAssignedServiceIdentity"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "UpdateSAPVirtualInstanceProperties"
        }
      }
    }
  }
};

export const UpdateSAPVirtualInstanceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateSAPVirtualInstanceProperties",
    modelProperties: {
      managedResourcesNetworkAccessType: {
        serializedName: "managedResourcesNetworkAccessType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SAPVirtualInstanceList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SAPVirtualInstanceList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SAPVirtualInstance"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MessageServerProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MessageServerProperties",
    modelProperties: {
      msPort: {
        serializedName: "msPort",
        readOnly: true,
        nullable: true,
        type: {
          name: "Number"
        }
      },
      internalMsPort: {
        serializedName: "internalMsPort",
        readOnly: true,
        nullable: true,
        type: {
          name: "Number"
        }
      },
      httpPort: {
        serializedName: "httpPort",
        readOnly: true,
        nullable: true,
        type: {
          name: "Number"
        }
      },
      httpsPort: {
        serializedName: "httpsPort",
        readOnly: true,
        nullable: true,
        type: {
          name: "Number"
        }
      },
      hostname: {
        serializedName: "hostname",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ipAddress: {
        serializedName: "ipAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      health: {
        serializedName: "health",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EnqueueServerProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EnqueueServerProperties",
    modelProperties: {
      hostname: {
        serializedName: "hostname",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ipAddress: {
        serializedName: "ipAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      port: {
        serializedName: "port",
        readOnly: true,
        nullable: true,
        type: {
          name: "Number"
        }
      },
      health: {
        serializedName: "health",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GatewayServerProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GatewayServerProperties",
    modelProperties: {
      port: {
        serializedName: "port",
        readOnly: true,
        nullable: true,
        type: {
          name: "Number"
        }
      },
      health: {
        serializedName: "health",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EnqueueReplicationServerProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EnqueueReplicationServerProperties",
    modelProperties: {
      ersVersion: {
        serializedName: "ersVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      instanceNo: {
        serializedName: "instanceNo",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      hostname: {
        serializedName: "hostname",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      kernelVersion: {
        serializedName: "kernelVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      kernelPatch: {
        serializedName: "kernelPatch",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ipAddress: {
        serializedName: "ipAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      health: {
        serializedName: "health",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LoadBalancerDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LoadBalancerDetails",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CentralServerVmDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CentralServerVmDetails",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      virtualMachineId: {
        serializedName: "virtualMachineId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      storageDetails: {
        serializedName: "storageDetails",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageInformation"
            }
          }
        }
      }
    }
  }
};

export const StorageInformation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageInformation",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateSAPCentralInstanceRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateSAPCentralInstanceRequest",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const SAPCentralInstanceList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SAPCentralInstanceList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SAPCentralServerInstance"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabaseVmDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseVmDetails",
    modelProperties: {
      virtualMachineId: {
        serializedName: "virtualMachineId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      storageDetails: {
        serializedName: "storageDetails",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageInformation"
            }
          }
        }
      }
    }
  }
};

export const UpdateSAPDatabaseInstanceRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateSAPDatabaseInstanceRequest",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const SAPDatabaseInstanceList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SAPDatabaseInstanceList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SAPDatabaseInstance"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationServerVmDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationServerVmDetails",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      virtualMachineId: {
        serializedName: "virtualMachineId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      storageDetails: {
        serializedName: "storageDetails",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageInformation"
            }
          }
        }
      }
    }
  }
};

export const UpdateSAPApplicationInstanceRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateSAPApplicationInstanceRequest",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const SAPApplicationServerInstanceList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SAPApplicationServerInstanceList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SAPApplicationServerInstance"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StartRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StartRequest",
    modelProperties: {
      startVm: {
        defaultValue: false,
        serializedName: "startVm",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const OperationStatusResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationStatusResult",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        required: true,
        type: {
          name: "String"
        }
      },
      percentComplete: {
        constraints: {
          InclusiveMaximum: 100,
          InclusiveMinimum: 0
        },
        serializedName: "percentComplete",
        type: {
          name: "Number"
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      operations: {
        serializedName: "operations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationStatusResult"
            }
          }
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const StopRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StopRequest",
    modelProperties: {
      softStopTimeoutSeconds: {
        defaultValue: 0,
        serializedName: "softStopTimeoutSeconds",
        type: {
          name: "Number"
        }
      },
      deallocateVm: {
        defaultValue: false,
        serializedName: "deallocateVm",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      actionType: {
        serializedName: "actionType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConnectorErrorDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectorErrorDefinition",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnectorErrorDefinition"
            }
          }
        }
      }
    }
  }
};

export const UpdateConnectorRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateConnectorRequest",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "UserAssignedServiceIdentity"
        }
      }
    }
  }
};

export const ConnectorList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectorList",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Connector"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BackupData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupData",
    uberParent: "BackupData",
    polymorphicDiscriminator: {
      serializedName: "backupType",
      clientName: "backupType"
    },
    modelProperties: {
      backupType: {
        serializedName: "backupType",
        required: true,
        type: {
          name: "String"
        }
      },
      recoveryServicesVault: {
        serializedName: "recoveryServicesVault",
        type: {
          name: "Composite",
          className: "RecoveryServicesVaultProperties"
        }
      }
    }
  }
};

export const RecoveryServicesVaultProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecoveryServicesVaultProperties",
    uberParent: "RecoveryServicesVaultProperties",
    polymorphicDiscriminator: {
      serializedName: "vaultType",
      clientName: "vaultType"
    },
    modelProperties: {
      vaultType: {
        serializedName: "vaultType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateAcssBackupConnectionRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateAcssBackupConnectionRequest",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const AcssBackupConnectionList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AcssBackupConnectionList",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AcssBackupConnection"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImageReference: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImageReference",
    modelProperties: {
      publisher: {
        serializedName: "publisher",
        type: {
          name: "String"
        }
      },
      offer: {
        serializedName: "offer",
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OSConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OSConfiguration",
    uberParent: "OSConfiguration",
    polymorphicDiscriminator: {
      serializedName: "osType",
      clientName: "osType"
    },
    modelProperties: {
      osType: {
        serializedName: "osType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SshPublicKey: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SshPublicKey",
    modelProperties: {
      keyData: {
        serializedName: "keyData",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SshConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SshConfiguration",
    modelProperties: {
      publicKeys: {
        serializedName: "publicKeys",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SshPublicKey"
            }
          }
        }
      }
    }
  }
};

export const SshKeyPair: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SshKeyPair",
    modelProperties: {
      publicKey: {
        serializedName: "publicKey",
        type: {
          name: "String"
        }
      },
      privateKey: {
        serializedName: "privateKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OSProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OSProfile",
    modelProperties: {
      adminUsername: {
        serializedName: "adminUsername",
        type: {
          name: "String"
        }
      },
      adminPassword: {
        serializedName: "adminPassword",
        type: {
          name: "String"
        }
      },
      osConfiguration: {
        serializedName: "osConfiguration",
        type: {
          name: "Composite",
          className: "OSConfiguration"
        }
      }
    }
  }
};

export const DiskConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiskConfiguration",
    modelProperties: {
      diskVolumeConfigurations: {
        serializedName: "diskVolumeConfigurations",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "DiskVolumeConfiguration" }
          }
        }
      }
    }
  }
};

export const VirtualMachineConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineConfiguration",
    modelProperties: {
      vmSize: {
        serializedName: "vmSize",
        required: true,
        type: {
          name: "String"
        }
      },
      imageReference: {
        serializedName: "imageReference",
        type: {
          name: "Composite",
          className: "ImageReference"
        }
      },
      osProfile: {
        serializedName: "osProfile",
        type: {
          name: "Composite",
          className: "OSProfile"
        }
      }
    }
  }
};

export const NetworkConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkConfiguration",
    modelProperties: {
      isSecondaryIpEnabled: {
        defaultValue: false,
        serializedName: "isSecondaryIpEnabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const SingleServerCustomResourceNames: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SingleServerCustomResourceNames",
    uberParent: "SingleServerCustomResourceNames",
    polymorphicDiscriminator: {
      serializedName: "namingPatternType",
      clientName: "namingPatternType"
    },
    modelProperties: {
      namingPatternType: {
        serializedName: "namingPatternType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InfrastructureConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InfrastructureConfiguration",
    uberParent: "InfrastructureConfiguration",
    polymorphicDiscriminator: {
      serializedName: "deploymentType",
      clientName: "deploymentType"
    },
    modelProperties: {
      deploymentType: {
        serializedName: "deploymentType",
        required: true,
        type: {
          name: "String"
        }
      },
      appResourceGroup: {
        serializedName: "appResourceGroup",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CentralServerConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CentralServerConfiguration",
    modelProperties: {
      subnetId: {
        serializedName: "subnetId",
        required: true,
        type: {
          name: "String"
        }
      },
      virtualMachineConfiguration: {
        serializedName: "virtualMachineConfiguration",
        type: {
          name: "Composite",
          className: "VirtualMachineConfiguration"
        }
      },
      instanceCount: {
        serializedName: "instanceCount",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DatabaseConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseConfiguration",
    modelProperties: {
      databaseType: {
        serializedName: "databaseType",
        type: {
          name: "String"
        }
      },
      subnetId: {
        serializedName: "subnetId",
        required: true,
        type: {
          name: "String"
        }
      },
      virtualMachineConfiguration: {
        serializedName: "virtualMachineConfiguration",
        type: {
          name: "Composite",
          className: "VirtualMachineConfiguration"
        }
      },
      instanceCount: {
        serializedName: "instanceCount",
        required: true,
        type: {
          name: "Number"
        }
      },
      diskConfiguration: {
        serializedName: "diskConfiguration",
        type: {
          name: "Composite",
          className: "DiskConfiguration"
        }
      }
    }
  }
};

export const ApplicationServerConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationServerConfiguration",
    modelProperties: {
      subnetId: {
        serializedName: "subnetId",
        required: true,
        type: {
          name: "String"
        }
      },
      virtualMachineConfiguration: {
        serializedName: "virtualMachineConfiguration",
        type: {
          name: "Composite",
          className: "VirtualMachineConfiguration"
        }
      },
      instanceCount: {
        serializedName: "instanceCount",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const HighAvailabilityConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HighAvailabilityConfiguration",
    modelProperties: {
      highAvailabilityType: {
        serializedName: "highAvailabilityType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FileShareConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FileShareConfiguration",
    uberParent: "FileShareConfiguration",
    polymorphicDiscriminator: {
      serializedName: "configurationType",
      clientName: "configurationType"
    },
    modelProperties: {
      configurationType: {
        serializedName: "configurationType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageConfiguration",
    modelProperties: {
      transportFileShareConfiguration: {
        serializedName: "transportFileShareConfiguration",
        type: {
          name: "Composite",
          className: "FileShareConfiguration"
        }
      }
    }
  }
};

export const ThreeTierCustomResourceNames: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ThreeTierCustomResourceNames",
    uberParent: "ThreeTierCustomResourceNames",
    polymorphicDiscriminator: {
      serializedName: "namingPatternType",
      clientName: "namingPatternType"
    },
    modelProperties: {
      namingPatternType: {
        serializedName: "namingPatternType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualMachineResourceNames: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineResourceNames",
    modelProperties: {
      vmName: {
        serializedName: "vmName",
        type: {
          name: "String"
        }
      },
      hostName: {
        serializedName: "hostName",
        type: {
          name: "String"
        }
      },
      networkInterfaces: {
        constraints: {
          MaxItems: 1
        },
        serializedName: "networkInterfaces",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkInterfaceResourceNames"
            }
          }
        }
      },
      osDiskName: {
        serializedName: "osDiskName",
        type: {
          name: "String"
        }
      },
      dataDiskNames: {
        serializedName: "dataDiskNames",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Sequence", element: { type: { name: "String" } } }
          }
        }
      }
    }
  }
};

export const NetworkInterfaceResourceNames: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkInterfaceResourceNames",
    modelProperties: {
      networkInterfaceName: {
        serializedName: "networkInterfaceName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CentralServerFullResourceNames: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CentralServerFullResourceNames",
    modelProperties: {
      virtualMachines: {
        constraints: {
          MaxItems: 2
        },
        serializedName: "virtualMachines",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualMachineResourceNames"
            }
          }
        }
      },
      availabilitySetName: {
        serializedName: "availabilitySetName",
        type: {
          name: "String"
        }
      },
      loadBalancer: {
        serializedName: "loadBalancer",
        type: {
          name: "Composite",
          className: "LoadBalancerResourceNames"
        }
      }
    }
  }
};

export const LoadBalancerResourceNames: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LoadBalancerResourceNames",
    modelProperties: {
      loadBalancerName: {
        serializedName: "loadBalancerName",
        type: {
          name: "String"
        }
      },
      frontendIpConfigurationNames: {
        constraints: {
          MaxItems: 2
        },
        serializedName: "frontendIpConfigurationNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      backendPoolNames: {
        constraints: {
          MaxItems: 1
        },
        serializedName: "backendPoolNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      healthProbeNames: {
        constraints: {
          MaxItems: 2
        },
        serializedName: "healthProbeNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ApplicationServerFullResourceNames: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationServerFullResourceNames",
    modelProperties: {
      virtualMachines: {
        serializedName: "virtualMachines",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualMachineResourceNames"
            }
          }
        }
      },
      availabilitySetName: {
        serializedName: "availabilitySetName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabaseServerFullResourceNames: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseServerFullResourceNames",
    modelProperties: {
      virtualMachines: {
        constraints: {
          MaxItems: 2
        },
        serializedName: "virtualMachines",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualMachineResourceNames"
            }
          }
        }
      },
      availabilitySetName: {
        serializedName: "availabilitySetName",
        type: {
          name: "String"
        }
      },
      loadBalancer: {
        serializedName: "loadBalancer",
        type: {
          name: "Composite",
          className: "LoadBalancerResourceNames"
        }
      }
    }
  }
};

export const SharedStorageResourceNames: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SharedStorageResourceNames",
    modelProperties: {
      sharedStorageAccountName: {
        serializedName: "sharedStorageAccountName",
        type: {
          name: "String"
        }
      },
      sharedStorageAccountPrivateEndPointName: {
        serializedName: "sharedStorageAccountPrivateEndPointName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SoftwareConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SoftwareConfiguration",
    uberParent: "SoftwareConfiguration",
    polymorphicDiscriminator: {
      serializedName: "softwareInstallationType",
      clientName: "softwareInstallationType"
    },
    modelProperties: {
      softwareInstallationType: {
        serializedName: "softwareInstallationType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HighAvailabilitySoftwareConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HighAvailabilitySoftwareConfiguration",
    modelProperties: {
      fencingClientId: {
        serializedName: "fencingClientId",
        required: true,
        type: {
          name: "String"
        }
      },
      fencingClientPassword: {
        serializedName: "fencingClientPassword",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OsSapConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OsSapConfiguration",
    modelProperties: {
      deployerVmPackages: {
        serializedName: "deployerVmPackages",
        type: {
          name: "Composite",
          className: "DeployerVmPackages"
        }
      },
      sapFqdn: {
        serializedName: "sapFqdn",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeployerVmPackages: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeployerVmPackages",
    modelProperties: {
      url: {
        serializedName: "url",
        type: {
          name: "String"
        }
      },
      storageAccountId: {
        serializedName: "storageAccountId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VMBackupPolicyProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VMBackupPolicyProperties",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      protectedItemsCount: {
        serializedName: "properties.protectedItemsCount",
        type: {
          name: "Number"
        }
      },
      backupManagementType: {
        serializedName: "properties.backupManagementType",
        type: {
          name: "String"
        }
      },
      resourceGuardOperationRequests: {
        serializedName: "properties.resourceGuardOperationRequests",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      instantRPDetails: {
        serializedName: "properties.instantRPDetails",
        type: {
          name: "Composite",
          className: "InstantRPAdditionalDetails"
        }
      },
      schedulePolicy: {
        serializedName: "properties.schedulePolicy",
        type: {
          name: "Composite",
          className: "SchedulePolicy"
        }
      },
      retentionPolicy: {
        serializedName: "properties.retentionPolicy",
        type: {
          name: "Composite",
          className: "RetentionPolicy"
        }
      },
      tieringPolicy: {
        serializedName: "properties.tieringPolicy",
        type: {
          name: "Dictionary",
          value: { type: { name: "Composite", className: "TieringPolicy" } }
        }
      },
      instantRpRetentionRangeInDays: {
        serializedName: "properties.instantRpRetentionRangeInDays",
        type: {
          name: "Number"
        }
      },
      timeZone: {
        serializedName: "properties.timeZone",
        type: {
          name: "String"
        }
      },
      policyType: {
        serializedName: "properties.policyType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InstantRPAdditionalDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InstantRPAdditionalDetails",
    modelProperties: {
      azureBackupRGNamePrefix: {
        serializedName: "azureBackupRGNamePrefix",
        type: {
          name: "String"
        }
      },
      azureBackupRGNameSuffix: {
        serializedName: "azureBackupRGNameSuffix",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SchedulePolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SchedulePolicy",
    uberParent: "SchedulePolicy",
    polymorphicDiscriminator: {
      serializedName: "schedulePolicyType",
      clientName: "schedulePolicyType"
    },
    modelProperties: {
      schedulePolicyType: {
        serializedName: "schedulePolicyType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RetentionPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RetentionPolicy",
    uberParent: "RetentionPolicy",
    polymorphicDiscriminator: {
      serializedName: "retentionPolicyType",
      clientName: "retentionPolicyType"
    },
    modelProperties: {
      retentionPolicyType: {
        serializedName: "retentionPolicyType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TieringPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TieringPolicy",
    modelProperties: {
      tieringMode: {
        serializedName: "tieringMode",
        type: {
          name: "String"
        }
      },
      duration: {
        serializedName: "duration",
        type: {
          name: "Number"
        }
      },
      durationType: {
        serializedName: "durationType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProtectionPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectionPolicy",
    uberParent: "ProtectionPolicy",
    polymorphicDiscriminator: {
      serializedName: "backupManagementType",
      clientName: "backupManagementType"
    },
    modelProperties: {
      protectedItemsCount: {
        serializedName: "protectedItemsCount",
        type: {
          name: "Number"
        }
      },
      backupManagementType: {
        serializedName: "backupManagementType",
        required: true,
        type: {
          name: "String"
        }
      },
      resourceGuardOperationRequests: {
        serializedName: "resourceGuardOperationRequests",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const DiskExclusionProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiskExclusionProperties",
    modelProperties: {
      diskLunList: {
        serializedName: "diskLunList",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      },
      isInclusionList: {
        serializedName: "isInclusionList",
        required: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const DBBackupPolicyProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DBBackupPolicyProperties",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      protectedItemsCount: {
        serializedName: "properties.protectedItemsCount",
        type: {
          name: "Number"
        }
      },
      backupManagementType: {
        serializedName: "properties.backupManagementType",
        type: {
          name: "String"
        }
      },
      resourceGuardOperationRequests: {
        serializedName: "properties.resourceGuardOperationRequests",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      workLoadType: {
        serializedName: "properties.workLoadType",
        type: {
          name: "String"
        }
      },
      settings: {
        serializedName: "properties.settings",
        type: {
          name: "Composite",
          className: "Settings"
        }
      },
      subProtectionPolicy: {
        serializedName: "properties.subProtectionPolicy",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SubProtectionPolicy"
            }
          }
        }
      },
      makePolicyConsistent: {
        serializedName: "properties.makePolicyConsistent",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const Settings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Settings",
    modelProperties: {
      timeZone: {
        serializedName: "timeZone",
        type: {
          name: "String"
        }
      },
      issqlcompression: {
        serializedName: "issqlcompression",
        type: {
          name: "Boolean"
        }
      },
      isCompression: {
        serializedName: "isCompression",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const SubProtectionPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SubProtectionPolicy",
    modelProperties: {
      policyType: {
        serializedName: "policyType",
        type: {
          name: "String"
        }
      },
      schedulePolicy: {
        serializedName: "schedulePolicy",
        type: {
          name: "Composite",
          className: "SchedulePolicy"
        }
      },
      retentionPolicy: {
        serializedName: "retentionPolicy",
        type: {
          name: "Composite",
          className: "RetentionPolicy"
        }
      },
      tieringPolicy: {
        serializedName: "tieringPolicy",
        type: {
          name: "Dictionary",
          value: { type: { name: "Composite", className: "TieringPolicy" } }
        }
      },
      snapshotBackupAdditionalDetails: {
        serializedName: "snapshotBackupAdditionalDetails",
        type: {
          name: "Composite",
          className: "SnapshotBackupAdditionalDetails"
        }
      }
    }
  }
};

export const SnapshotBackupAdditionalDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SnapshotBackupAdditionalDetails",
    modelProperties: {
      instantRpRetentionRangeInDays: {
        serializedName: "instantRpRetentionRangeInDays",
        type: {
          name: "Number"
        }
      },
      instantRPDetails: {
        serializedName: "instantRPDetails",
        type: {
          name: "String"
        }
      },
      userAssignedManagedIdentityDetails: {
        serializedName: "userAssignedManagedIdentityDetails",
        type: {
          name: "Composite",
          className: "UserAssignedManagedIdentityDetails"
        }
      }
    }
  }
};

export const UserAssignedManagedIdentityDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserAssignedManagedIdentityDetails",
    modelProperties: {
      identityArmId: {
        serializedName: "identityArmId",
        type: {
          name: "String"
        }
      },
      identityName: {
        serializedName: "identityName",
        type: {
          name: "String"
        }
      },
      userAssignedIdentityProperties: {
        serializedName: "userAssignedIdentityProperties",
        type: {
          name: "Composite",
          className: "UserAssignedIdentityProperties"
        }
      }
    }
  }
};

export const UserAssignedIdentityProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserAssignedIdentityProperties",
    modelProperties: {
      clientId: {
        serializedName: "clientId",
        type: {
          name: "String"
        }
      },
      principalId: {
        serializedName: "principalId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SSLConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SSLConfiguration",
    modelProperties: {
      sslKeyStore: {
        serializedName: "sslKeyStore",
        type: {
          name: "String"
        }
      },
      sslTrustStore: {
        serializedName: "sslTrustStore",
        type: {
          name: "String"
        }
      },
      sslHostNameInCertificate: {
        serializedName: "sslHostNameInCertificate",
        type: {
          name: "String"
        }
      },
      sslCryptoProvider: {
        serializedName: "sslCryptoProvider",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HourlySchedule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HourlySchedule",
    modelProperties: {
      interval: {
        serializedName: "interval",
        type: {
          name: "Number"
        }
      },
      scheduleWindowStartTime: {
        serializedName: "scheduleWindowStartTime",
        type: {
          name: "DateTime"
        }
      },
      scheduleWindowDuration: {
        serializedName: "scheduleWindowDuration",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DailySchedule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DailySchedule",
    modelProperties: {
      scheduleRunTimes: {
        serializedName: "scheduleRunTimes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "DateTime"
            }
          }
        }
      }
    }
  }
};

export const WeeklySchedule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WeeklySchedule",
    modelProperties: {
      scheduleRunDays: {
        serializedName: "scheduleRunDays",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Enum",
              allowedValues: [
                "Sunday",
                "Monday",
                "Tuesday",
                "Wednesday",
                "Thursday",
                "Friday",
                "Saturday"
              ]
            }
          }
        }
      },
      scheduleRunTimes: {
        serializedName: "scheduleRunTimes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "DateTime"
            }
          }
        }
      }
    }
  }
};

export const DailyRetentionSchedule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DailyRetentionSchedule",
    modelProperties: {
      retentionTimes: {
        serializedName: "retentionTimes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "DateTime"
            }
          }
        }
      },
      retentionDuration: {
        serializedName: "retentionDuration",
        type: {
          name: "Composite",
          className: "RetentionDuration"
        }
      }
    }
  }
};

export const RetentionDuration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RetentionDuration",
    modelProperties: {
      count: {
        serializedName: "count",
        type: {
          name: "Number"
        }
      },
      durationType: {
        serializedName: "durationType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WeeklyRetentionSchedule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WeeklyRetentionSchedule",
    modelProperties: {
      daysOfTheWeek: {
        serializedName: "daysOfTheWeek",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Enum",
              allowedValues: [
                "Sunday",
                "Monday",
                "Tuesday",
                "Wednesday",
                "Thursday",
                "Friday",
                "Saturday"
              ]
            }
          }
        }
      },
      retentionTimes: {
        serializedName: "retentionTimes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "DateTime"
            }
          }
        }
      },
      retentionDuration: {
        serializedName: "retentionDuration",
        type: {
          name: "Composite",
          className: "RetentionDuration"
        }
      }
    }
  }
};

export const MonthlyRetentionSchedule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MonthlyRetentionSchedule",
    modelProperties: {
      retentionScheduleFormatType: {
        serializedName: "retentionScheduleFormatType",
        type: {
          name: "String"
        }
      },
      retentionScheduleDaily: {
        serializedName: "retentionScheduleDaily",
        type: {
          name: "Composite",
          className: "DailyRetentionFormat"
        }
      },
      retentionScheduleWeekly: {
        serializedName: "retentionScheduleWeekly",
        type: {
          name: "Composite",
          className: "WeeklyRetentionFormat"
        }
      },
      retentionTimes: {
        serializedName: "retentionTimes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "DateTime"
            }
          }
        }
      },
      retentionDuration: {
        serializedName: "retentionDuration",
        type: {
          name: "Composite",
          className: "RetentionDuration"
        }
      }
    }
  }
};

export const DailyRetentionFormat: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DailyRetentionFormat",
    modelProperties: {
      daysOfTheMonth: {
        serializedName: "daysOfTheMonth",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Day"
            }
          }
        }
      }
    }
  }
};

export const Day: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Day",
    modelProperties: {
      date: {
        serializedName: "date",
        type: {
          name: "Number"
        }
      },
      isLast: {
        serializedName: "isLast",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const WeeklyRetentionFormat: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WeeklyRetentionFormat",
    modelProperties: {
      daysOfTheWeek: {
        serializedName: "daysOfTheWeek",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Enum",
              allowedValues: [
                "Sunday",
                "Monday",
                "Tuesday",
                "Wednesday",
                "Thursday",
                "Friday",
                "Saturday"
              ]
            }
          }
        }
      },
      weeksOfTheMonth: {
        serializedName: "weeksOfTheMonth",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Enum",
              allowedValues: [
                "First",
                "Second",
                "Third",
                "Fourth",
                "Last",
                "Invalid"
              ]
            }
          }
        }
      }
    }
  }
};

export const YearlyRetentionSchedule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "YearlyRetentionSchedule",
    modelProperties: {
      retentionScheduleFormatType: {
        serializedName: "retentionScheduleFormatType",
        type: {
          name: "String"
        }
      },
      monthsOfYear: {
        serializedName: "monthsOfYear",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Enum",
              allowedValues: [
                "Invalid",
                "January",
                "February",
                "March",
                "April",
                "May",
                "June",
                "July",
                "August",
                "September",
                "October",
                "November",
                "December"
              ]
            }
          }
        }
      },
      retentionScheduleDaily: {
        serializedName: "retentionScheduleDaily",
        type: {
          name: "Composite",
          className: "DailyRetentionFormat"
        }
      },
      retentionScheduleWeekly: {
        serializedName: "retentionScheduleWeekly",
        type: {
          name: "Composite",
          className: "WeeklyRetentionFormat"
        }
      },
      retentionTimes: {
        serializedName: "retentionTimes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "DateTime"
            }
          }
        }
      },
      retentionDuration: {
        serializedName: "retentionDuration",
        type: {
          name: "Composite",
          className: "RetentionDuration"
        }
      }
    }
  }
};

export const SingleServerRecommendationResult: coreClient.CompositeMapper = {
  serializedName: "SingleServer",
  type: {
    name: "Composite",
    className: "SingleServerRecommendationResult",
    uberParent: "SAPSizingRecommendationResult",
    polymorphicDiscriminator:
      SAPSizingRecommendationResult.type.polymorphicDiscriminator,
    modelProperties: {
      ...SAPSizingRecommendationResult.type.modelProperties,
      vmSku: {
        serializedName: "vmSku",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ThreeTierRecommendationResult: coreClient.CompositeMapper = {
  serializedName: "ThreeTier",
  type: {
    name: "Composite",
    className: "ThreeTierRecommendationResult",
    uberParent: "SAPSizingRecommendationResult",
    polymorphicDiscriminator:
      SAPSizingRecommendationResult.type.polymorphicDiscriminator,
    modelProperties: {
      ...SAPSizingRecommendationResult.type.modelProperties,
      dbVmSku: {
        serializedName: "dbVmSku",
        type: {
          name: "String"
        }
      },
      databaseInstanceCount: {
        serializedName: "databaseInstanceCount",
        type: {
          name: "Number"
        }
      },
      centralServerVmSku: {
        serializedName: "centralServerVmSku",
        type: {
          name: "String"
        }
      },
      centralServerInstanceCount: {
        serializedName: "centralServerInstanceCount",
        type: {
          name: "Number"
        }
      },
      applicationServerVmSku: {
        serializedName: "applicationServerVmSku",
        type: {
          name: "String"
        }
      },
      applicationServerInstanceCount: {
        serializedName: "applicationServerInstanceCount",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DiscoveryConfiguration: coreClient.CompositeMapper = {
  serializedName: "Discovery",
  type: {
    name: "Composite",
    className: "DiscoveryConfiguration",
    uberParent: "SAPConfiguration",
    polymorphicDiscriminator: SAPConfiguration.type.polymorphicDiscriminator,
    modelProperties: {
      ...SAPConfiguration.type.modelProperties,
      centralServerVmId: {
        serializedName: "centralServerVmId",
        type: {
          name: "String"
        }
      },
      managedRgStorageAccountName: {
        constraints: {
          MaxLength: 24,
          MinLength: 3
        },
        serializedName: "managedRgStorageAccountName",
        type: {
          name: "String"
        }
      },
      appLocation: {
        serializedName: "appLocation",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeploymentConfiguration: coreClient.CompositeMapper = {
  serializedName: "Deployment",
  type: {
    name: "Composite",
    className: "DeploymentConfiguration",
    uberParent: "SAPConfiguration",
    polymorphicDiscriminator: SAPConfiguration.type.polymorphicDiscriminator,
    modelProperties: {
      ...SAPConfiguration.type.modelProperties,
      appLocation: {
        serializedName: "appLocation",
        type: {
          name: "String"
        }
      },
      infrastructureConfiguration: {
        serializedName: "infrastructureConfiguration",
        type: {
          name: "Composite",
          className: "InfrastructureConfiguration"
        }
      },
      softwareConfiguration: {
        serializedName: "softwareConfiguration",
        type: {
          name: "Composite",
          className: "SoftwareConfiguration"
        }
      }
    }
  }
};

export const DeploymentWithOSConfiguration: coreClient.CompositeMapper = {
  serializedName: "DeploymentWithOSConfig",
  type: {
    name: "Composite",
    className: "DeploymentWithOSConfiguration",
    uberParent: "SAPConfiguration",
    polymorphicDiscriminator: SAPConfiguration.type.polymorphicDiscriminator,
    modelProperties: {
      ...SAPConfiguration.type.modelProperties,
      appLocation: {
        serializedName: "appLocation",
        type: {
          name: "String"
        }
      },
      infrastructureConfiguration: {
        serializedName: "infrastructureConfiguration",
        type: {
          name: "Composite",
          className: "InfrastructureConfiguration"
        }
      },
      softwareConfiguration: {
        serializedName: "softwareConfiguration",
        type: {
          name: "Composite",
          className: "SoftwareConfiguration"
        }
      },
      osSapConfiguration: {
        serializedName: "osSapConfiguration",
        type: {
          name: "Composite",
          className: "OsSapConfiguration"
        }
      }
    }
  }
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VMBackupData: coreClient.CompositeMapper = {
  serializedName: "VM",
  type: {
    name: "Composite",
    className: "VMBackupData",
    uberParent: "BackupData",
    polymorphicDiscriminator: BackupData.type.polymorphicDiscriminator,
    modelProperties: {
      ...BackupData.type.modelProperties,
      backupPolicy: {
        serializedName: "backupPolicy",
        type: {
          name: "Composite",
          className: "VMBackupPolicyProperties"
        }
      },
      diskExclusionProperties: {
        serializedName: "diskExclusionProperties",
        type: {
          name: "Composite",
          className: "DiskExclusionProperties"
        }
      }
    }
  }
};

export const HanaBackupData: coreClient.CompositeMapper = {
  serializedName: "HANA",
  type: {
    name: "Composite",
    className: "HanaBackupData",
    uberParent: "BackupData",
    polymorphicDiscriminator: BackupData.type.polymorphicDiscriminator,
    modelProperties: {
      ...BackupData.type.modelProperties,
      sslConfiguration: {
        serializedName: "sslConfiguration",
        type: {
          name: "Composite",
          className: "SSLConfiguration"
        }
      },
      backupPolicy: {
        serializedName: "backupPolicy",
        type: {
          name: "Composite",
          className: "DBBackupPolicyProperties"
        }
      },
      hdbuserstoreKeyName: {
        serializedName: "hdbuserstoreKeyName",
        required: true,
        type: {
          name: "String"
        }
      },
      instanceNumber: {
        serializedName: "instanceNumber",
        type: {
          name: "String"
        }
      },
      dbInstanceSnapshotBackupPolicy: {
        serializedName: "dbInstanceSnapshotBackupPolicy",
        type: {
          name: "Composite",
          className: "DBBackupPolicyProperties"
        }
      }
    }
  }
};

export const SqlBackupData: coreClient.CompositeMapper = {
  serializedName: "SQL",
  type: {
    name: "Composite",
    className: "SqlBackupData",
    uberParent: "BackupData",
    polymorphicDiscriminator: BackupData.type.polymorphicDiscriminator,
    modelProperties: {
      ...BackupData.type.modelProperties,
      backupPolicy: {
        serializedName: "backupPolicy",
        type: {
          name: "Composite",
          className: "DBBackupPolicyProperties"
        }
      }
    }
  }
};

export const NewRecoveryServicesVault: coreClient.CompositeMapper = {
  serializedName: "New",
  type: {
    name: "Composite",
    className: "NewRecoveryServicesVault",
    uberParent: "RecoveryServicesVaultProperties",
    polymorphicDiscriminator:
      RecoveryServicesVaultProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...RecoveryServicesVaultProperties.type.modelProperties,
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      resourceGroup: {
        serializedName: "resourceGroup",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExistingRecoveryServicesVault: coreClient.CompositeMapper = {
  serializedName: "Existing",
  type: {
    name: "Composite",
    className: "ExistingRecoveryServicesVault",
    uberParent: "RecoveryServicesVaultProperties",
    polymorphicDiscriminator:
      RecoveryServicesVaultProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...RecoveryServicesVaultProperties.type.modelProperties,
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WindowsConfiguration: coreClient.CompositeMapper = {
  serializedName: "Windows",
  type: {
    name: "Composite",
    className: "WindowsConfiguration",
    uberParent: "OSConfiguration",
    polymorphicDiscriminator: OSConfiguration.type.polymorphicDiscriminator,
    modelProperties: {
      ...OSConfiguration.type.modelProperties
    }
  }
};

export const LinuxConfiguration: coreClient.CompositeMapper = {
  serializedName: "Linux",
  type: {
    name: "Composite",
    className: "LinuxConfiguration",
    uberParent: "OSConfiguration",
    polymorphicDiscriminator: OSConfiguration.type.polymorphicDiscriminator,
    modelProperties: {
      ...OSConfiguration.type.modelProperties,
      disablePasswordAuthentication: {
        serializedName: "disablePasswordAuthentication",
        type: {
          name: "Boolean"
        }
      },
      ssh: {
        serializedName: "ssh",
        type: {
          name: "Composite",
          className: "SshConfiguration"
        }
      },
      sshKeyPair: {
        serializedName: "sshKeyPair",
        type: {
          name: "Composite",
          className: "SshKeyPair"
        }
      }
    }
  }
};

export const SingleServerFullResourceNames: coreClient.CompositeMapper = {
  serializedName: "FullResourceName",
  type: {
    name: "Composite",
    className: "SingleServerFullResourceNames",
    uberParent: "SingleServerCustomResourceNames",
    polymorphicDiscriminator:
      SingleServerCustomResourceNames.type.polymorphicDiscriminator,
    modelProperties: {
      ...SingleServerCustomResourceNames.type.modelProperties,
      virtualMachine: {
        serializedName: "virtualMachine",
        type: {
          name: "Composite",
          className: "VirtualMachineResourceNames"
        }
      }
    }
  }
};

export const SingleServerConfiguration: coreClient.CompositeMapper = {
  serializedName: "SingleServer",
  type: {
    name: "Composite",
    className: "SingleServerConfiguration",
    uberParent: "InfrastructureConfiguration",
    polymorphicDiscriminator:
      InfrastructureConfiguration.type.polymorphicDiscriminator,
    modelProperties: {
      ...InfrastructureConfiguration.type.modelProperties,
      networkConfiguration: {
        serializedName: "networkConfiguration",
        type: {
          name: "Composite",
          className: "NetworkConfiguration"
        }
      },
      databaseType: {
        serializedName: "databaseType",
        type: {
          name: "String"
        }
      },
      subnetId: {
        serializedName: "subnetId",
        required: true,
        type: {
          name: "String"
        }
      },
      virtualMachineConfiguration: {
        serializedName: "virtualMachineConfiguration",
        type: {
          name: "Composite",
          className: "VirtualMachineConfiguration"
        }
      },
      dbDiskConfiguration: {
        serializedName: "dbDiskConfiguration",
        type: {
          name: "Composite",
          className: "DiskConfiguration"
        }
      },
      customResourceNames: {
        serializedName: "customResourceNames",
        type: {
          name: "Composite",
          className: "SingleServerCustomResourceNames"
        }
      }
    }
  }
};

export const ThreeTierConfiguration: coreClient.CompositeMapper = {
  serializedName: "ThreeTier",
  type: {
    name: "Composite",
    className: "ThreeTierConfiguration",
    uberParent: "InfrastructureConfiguration",
    polymorphicDiscriminator:
      InfrastructureConfiguration.type.polymorphicDiscriminator,
    modelProperties: {
      ...InfrastructureConfiguration.type.modelProperties,
      networkConfiguration: {
        serializedName: "networkConfiguration",
        type: {
          name: "Composite",
          className: "NetworkConfiguration"
        }
      },
      centralServer: {
        serializedName: "centralServer",
        type: {
          name: "Composite",
          className: "CentralServerConfiguration"
        }
      },
      applicationServer: {
        serializedName: "applicationServer",
        type: {
          name: "Composite",
          className: "ApplicationServerConfiguration"
        }
      },
      databaseServer: {
        serializedName: "databaseServer",
        type: {
          name: "Composite",
          className: "DatabaseConfiguration"
        }
      },
      highAvailabilityConfig: {
        serializedName: "highAvailabilityConfig",
        type: {
          name: "Composite",
          className: "HighAvailabilityConfiguration"
        }
      },
      storageConfiguration: {
        serializedName: "storageConfiguration",
        type: {
          name: "Composite",
          className: "StorageConfiguration"
        }
      },
      customResourceNames: {
        serializedName: "customResourceNames",
        type: {
          name: "Composite",
          className: "ThreeTierCustomResourceNames"
        }
      }
    }
  }
};

export const SkipFileShareConfiguration: coreClient.CompositeMapper = {
  serializedName: "Skip",
  type: {
    name: "Composite",
    className: "SkipFileShareConfiguration",
    uberParent: "FileShareConfiguration",
    polymorphicDiscriminator:
      FileShareConfiguration.type.polymorphicDiscriminator,
    modelProperties: {
      ...FileShareConfiguration.type.modelProperties
    }
  }
};

export const CreateAndMountFileShareConfiguration: coreClient.CompositeMapper = {
  serializedName: "CreateAndMount",
  type: {
    name: "Composite",
    className: "CreateAndMountFileShareConfiguration",
    uberParent: "FileShareConfiguration",
    polymorphicDiscriminator:
      FileShareConfiguration.type.polymorphicDiscriminator,
    modelProperties: {
      ...FileShareConfiguration.type.modelProperties,
      resourceGroup: {
        serializedName: "resourceGroup",
        type: {
          name: "String"
        }
      },
      storageAccountName: {
        serializedName: "storageAccountName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MountFileShareConfiguration: coreClient.CompositeMapper = {
  serializedName: "Mount",
  type: {
    name: "Composite",
    className: "MountFileShareConfiguration",
    uberParent: "FileShareConfiguration",
    polymorphicDiscriminator:
      FileShareConfiguration.type.polymorphicDiscriminator,
    modelProperties: {
      ...FileShareConfiguration.type.modelProperties,
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      privateEndpointId: {
        serializedName: "privateEndpointId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ThreeTierFullResourceNames: coreClient.CompositeMapper = {
  serializedName: "FullResourceName",
  type: {
    name: "Composite",
    className: "ThreeTierFullResourceNames",
    uberParent: "ThreeTierCustomResourceNames",
    polymorphicDiscriminator:
      ThreeTierCustomResourceNames.type.polymorphicDiscriminator,
    modelProperties: {
      ...ThreeTierCustomResourceNames.type.modelProperties,
      centralServer: {
        serializedName: "centralServer",
        type: {
          name: "Composite",
          className: "CentralServerFullResourceNames"
        }
      },
      applicationServer: {
        serializedName: "applicationServer",
        type: {
          name: "Composite",
          className: "ApplicationServerFullResourceNames"
        }
      },
      databaseServer: {
        serializedName: "databaseServer",
        type: {
          name: "Composite",
          className: "DatabaseServerFullResourceNames"
        }
      },
      sharedStorage: {
        serializedName: "sharedStorage",
        type: {
          name: "Composite",
          className: "SharedStorageResourceNames"
        }
      }
    }
  }
};

export const ServiceInitiatedSoftwareConfiguration: coreClient.CompositeMapper = {
  serializedName: "ServiceInitiated",
  type: {
    name: "Composite",
    className: "ServiceInitiatedSoftwareConfiguration",
    uberParent: "SoftwareConfiguration",
    polymorphicDiscriminator:
      SoftwareConfiguration.type.polymorphicDiscriminator,
    modelProperties: {
      ...SoftwareConfiguration.type.modelProperties,
      bomUrl: {
        serializedName: "bomUrl",
        required: true,
        type: {
          name: "String"
        }
      },
      softwareVersion: {
        serializedName: "softwareVersion",
        required: true,
        type: {
          name: "String"
        }
      },
      sapBitsStorageAccountId: {
        serializedName: "sapBitsStorageAccountId",
        required: true,
        type: {
          name: "String"
        }
      },
      sapFqdn: {
        serializedName: "sapFqdn",
        required: true,
        type: {
          name: "String"
        }
      },
      sshPrivateKey: {
        serializedName: "sshPrivateKey",
        required: true,
        type: {
          name: "String"
        }
      },
      highAvailabilitySoftwareConfiguration: {
        serializedName: "highAvailabilitySoftwareConfiguration",
        type: {
          name: "Composite",
          className: "HighAvailabilitySoftwareConfiguration"
        }
      }
    }
  }
};

export const SAPInstallWithoutOSConfigSoftwareConfiguration: coreClient.CompositeMapper = {
  serializedName: "SAPInstallWithoutOSConfig",
  type: {
    name: "Composite",
    className: "SAPInstallWithoutOSConfigSoftwareConfiguration",
    uberParent: "SoftwareConfiguration",
    polymorphicDiscriminator:
      SoftwareConfiguration.type.polymorphicDiscriminator,
    modelProperties: {
      ...SoftwareConfiguration.type.modelProperties,
      bomUrl: {
        serializedName: "bomUrl",
        required: true,
        type: {
          name: "String"
        }
      },
      sapBitsStorageAccountId: {
        serializedName: "sapBitsStorageAccountId",
        required: true,
        type: {
          name: "String"
        }
      },
      softwareVersion: {
        serializedName: "softwareVersion",
        required: true,
        type: {
          name: "String"
        }
      },
      highAvailabilitySoftwareConfiguration: {
        serializedName: "highAvailabilitySoftwareConfiguration",
        type: {
          name: "Composite",
          className: "HighAvailabilitySoftwareConfiguration"
        }
      }
    }
  }
};

export const ExternalInstallationSoftwareConfiguration: coreClient.CompositeMapper = {
  serializedName: "External",
  type: {
    name: "Composite",
    className: "ExternalInstallationSoftwareConfiguration",
    uberParent: "SoftwareConfiguration",
    polymorphicDiscriminator:
      SoftwareConfiguration.type.polymorphicDiscriminator,
    modelProperties: {
      ...SoftwareConfiguration.type.modelProperties,
      centralServerVmId: {
        serializedName: "centralServerVmId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SimpleSchedulePolicy: coreClient.CompositeMapper = {
  serializedName: "SimpleSchedulePolicy",
  type: {
    name: "Composite",
    className: "SimpleSchedulePolicy",
    uberParent: "SchedulePolicy",
    polymorphicDiscriminator: SchedulePolicy.type.polymorphicDiscriminator,
    modelProperties: {
      ...SchedulePolicy.type.modelProperties,
      scheduleRunFrequency: {
        serializedName: "scheduleRunFrequency",
        type: {
          name: "String"
        }
      },
      scheduleRunDays: {
        serializedName: "scheduleRunDays",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Enum",
              allowedValues: [
                "Sunday",
                "Monday",
                "Tuesday",
                "Wednesday",
                "Thursday",
                "Friday",
                "Saturday"
              ]
            }
          }
        }
      },
      scheduleRunTimes: {
        serializedName: "scheduleRunTimes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "DateTime"
            }
          }
        }
      },
      hourlySchedule: {
        serializedName: "hourlySchedule",
        type: {
          name: "Composite",
          className: "HourlySchedule"
        }
      },
      scheduleWeeklyFrequency: {
        serializedName: "scheduleWeeklyFrequency",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SimpleSchedulePolicyV2: coreClient.CompositeMapper = {
  serializedName: "SimpleSchedulePolicyV2",
  type: {
    name: "Composite",
    className: "SimpleSchedulePolicyV2",
    uberParent: "SchedulePolicy",
    polymorphicDiscriminator: SchedulePolicy.type.polymorphicDiscriminator,
    modelProperties: {
      ...SchedulePolicy.type.modelProperties,
      scheduleRunFrequency: {
        serializedName: "scheduleRunFrequency",
        type: {
          name: "String"
        }
      },
      hourlySchedule: {
        serializedName: "hourlySchedule",
        type: {
          name: "Composite",
          className: "HourlySchedule"
        }
      },
      dailySchedule: {
        serializedName: "dailySchedule",
        type: {
          name: "Composite",
          className: "DailySchedule"
        }
      },
      weeklySchedule: {
        serializedName: "weeklySchedule",
        type: {
          name: "Composite",
          className: "WeeklySchedule"
        }
      }
    }
  }
};

export const LongTermSchedulePolicy: coreClient.CompositeMapper = {
  serializedName: "LongTermSchedulePolicy",
  type: {
    name: "Composite",
    className: "LongTermSchedulePolicy",
    uberParent: "SchedulePolicy",
    polymorphicDiscriminator: SchedulePolicy.type.polymorphicDiscriminator,
    modelProperties: {
      ...SchedulePolicy.type.modelProperties
    }
  }
};

export const LogSchedulePolicy: coreClient.CompositeMapper = {
  serializedName: "LogSchedulePolicy",
  type: {
    name: "Composite",
    className: "LogSchedulePolicy",
    uberParent: "SchedulePolicy",
    polymorphicDiscriminator: SchedulePolicy.type.polymorphicDiscriminator,
    modelProperties: {
      ...SchedulePolicy.type.modelProperties,
      scheduleFrequencyInMins: {
        serializedName: "scheduleFrequencyInMins",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const LongTermRetentionPolicy: coreClient.CompositeMapper = {
  serializedName: "LongTermRetentionPolicy",
  type: {
    name: "Composite",
    className: "LongTermRetentionPolicy",
    uberParent: "RetentionPolicy",
    polymorphicDiscriminator: RetentionPolicy.type.polymorphicDiscriminator,
    modelProperties: {
      ...RetentionPolicy.type.modelProperties,
      dailySchedule: {
        serializedName: "dailySchedule",
        type: {
          name: "Composite",
          className: "DailyRetentionSchedule"
        }
      },
      weeklySchedule: {
        serializedName: "weeklySchedule",
        type: {
          name: "Composite",
          className: "WeeklyRetentionSchedule"
        }
      },
      monthlySchedule: {
        serializedName: "monthlySchedule",
        type: {
          name: "Composite",
          className: "MonthlyRetentionSchedule"
        }
      },
      yearlySchedule: {
        serializedName: "yearlySchedule",
        type: {
          name: "Composite",
          className: "YearlyRetentionSchedule"
        }
      }
    }
  }
};

export const SimpleRetentionPolicy: coreClient.CompositeMapper = {
  serializedName: "SimpleRetentionPolicy",
  type: {
    name: "Composite",
    className: "SimpleRetentionPolicy",
    uberParent: "RetentionPolicy",
    polymorphicDiscriminator: RetentionPolicy.type.polymorphicDiscriminator,
    modelProperties: {
      ...RetentionPolicy.type.modelProperties,
      retentionDuration: {
        serializedName: "retentionDuration",
        type: {
          name: "Composite",
          className: "RetentionDuration"
        }
      }
    }
  }
};

export const AzureIaaSVMProtectionPolicy: coreClient.CompositeMapper = {
  serializedName: "AzureIaasVM",
  type: {
    name: "Composite",
    className: "AzureIaaSVMProtectionPolicy",
    uberParent: "ProtectionPolicy",
    polymorphicDiscriminator: ProtectionPolicy.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProtectionPolicy.type.modelProperties,
      instantRPDetails: {
        serializedName: "instantRPDetails",
        type: {
          name: "Composite",
          className: "InstantRPAdditionalDetails"
        }
      },
      schedulePolicy: {
        serializedName: "schedulePolicy",
        type: {
          name: "Composite",
          className: "SchedulePolicy"
        }
      },
      retentionPolicy: {
        serializedName: "retentionPolicy",
        type: {
          name: "Composite",
          className: "RetentionPolicy"
        }
      },
      tieringPolicy: {
        serializedName: "tieringPolicy",
        type: {
          name: "Dictionary",
          value: { type: { name: "Composite", className: "TieringPolicy" } }
        }
      },
      instantRpRetentionRangeInDays: {
        serializedName: "instantRpRetentionRangeInDays",
        type: {
          name: "Number"
        }
      },
      timeZone: {
        serializedName: "timeZone",
        type: {
          name: "String"
        }
      },
      policyType: {
        serializedName: "policyType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureVmWorkloadProtectionPolicy: coreClient.CompositeMapper = {
  serializedName: "AzureWorkload",
  type: {
    name: "Composite",
    className: "AzureVmWorkloadProtectionPolicy",
    uberParent: "ProtectionPolicy",
    polymorphicDiscriminator: ProtectionPolicy.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProtectionPolicy.type.modelProperties,
      workLoadType: {
        serializedName: "workLoadType",
        type: {
          name: "String"
        }
      },
      settings: {
        serializedName: "settings",
        type: {
          name: "Composite",
          className: "Settings"
        }
      },
      subProtectionPolicy: {
        serializedName: "subProtectionPolicy",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SubProtectionPolicy"
            }
          }
        }
      },
      makePolicyConsistent: {
        serializedName: "makePolicyConsistent",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const SAPVirtualInstance: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SAPVirtualInstance",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "UserAssignedServiceIdentity"
        }
      },
      environment: {
        serializedName: "properties.environment",
        required: true,
        type: {
          name: "String"
        }
      },
      sapProduct: {
        serializedName: "properties.sapProduct",
        required: true,
        type: {
          name: "String"
        }
      },
      managedResourcesNetworkAccessType: {
        serializedName: "properties.managedResourcesNetworkAccessType",
        type: {
          name: "String"
        }
      },
      configuration: {
        serializedName: "properties.configuration",
        type: {
          name: "Composite",
          className: "SAPConfiguration"
        }
      },
      managedResourceGroupConfiguration: {
        serializedName: "properties.managedResourceGroupConfiguration",
        type: {
          name: "Composite",
          className: "ManagedRGConfiguration"
        }
      },
      status: {
        serializedName: "properties.status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      health: {
        serializedName: "properties.health",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "properties.state",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errors: {
        serializedName: "properties.errors",
        type: {
          name: "Composite",
          className: "SAPVirtualInstanceError"
        }
      }
    }
  }
};

export const SAPCentralServerInstance: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SAPCentralServerInstance",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      instanceNo: {
        serializedName: "properties.instanceNo",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      subnet: {
        serializedName: "properties.subnet",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      messageServerProperties: {
        serializedName: "properties.messageServerProperties",
        type: {
          name: "Composite",
          className: "MessageServerProperties"
        }
      },
      enqueueServerProperties: {
        serializedName: "properties.enqueueServerProperties",
        type: {
          name: "Composite",
          className: "EnqueueServerProperties"
        }
      },
      gatewayServerProperties: {
        serializedName: "properties.gatewayServerProperties",
        type: {
          name: "Composite",
          className: "GatewayServerProperties"
        }
      },
      enqueueReplicationServerProperties: {
        serializedName: "properties.enqueueReplicationServerProperties",
        type: {
          name: "Composite",
          className: "EnqueueReplicationServerProperties"
        }
      },
      kernelVersion: {
        serializedName: "properties.kernelVersion",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      kernelPatch: {
        serializedName: "properties.kernelPatch",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      loadBalancerDetails: {
        serializedName: "properties.loadBalancerDetails",
        type: {
          name: "Composite",
          className: "LoadBalancerDetails"
        }
      },
      vmDetails: {
        serializedName: "properties.vmDetails",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CentralServerVmDetails"
            }
          }
        }
      },
      status: {
        serializedName: "properties.status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      health: {
        serializedName: "properties.health",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errors: {
        serializedName: "properties.errors",
        type: {
          name: "Composite",
          className: "SAPVirtualInstanceError"
        }
      }
    }
  }
};

export const SAPDatabaseInstance: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SAPDatabaseInstance",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      subnet: {
        serializedName: "properties.subnet",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      databaseSid: {
        serializedName: "properties.databaseSid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      databaseType: {
        serializedName: "properties.databaseType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ipAddress: {
        serializedName: "properties.ipAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      loadBalancerDetails: {
        serializedName: "properties.loadBalancerDetails",
        type: {
          name: "Composite",
          className: "LoadBalancerDetails"
        }
      },
      vmDetails: {
        serializedName: "properties.vmDetails",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DatabaseVmDetails"
            }
          }
        }
      },
      status: {
        serializedName: "properties.status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errors: {
        serializedName: "properties.errors",
        type: {
          name: "Composite",
          className: "SAPVirtualInstanceError"
        }
      }
    }
  }
};

export const SAPApplicationServerInstance: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SAPApplicationServerInstance",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      instanceNo: {
        serializedName: "properties.instanceNo",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      subnet: {
        serializedName: "properties.subnet",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      hostname: {
        serializedName: "properties.hostname",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      kernelVersion: {
        serializedName: "properties.kernelVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      kernelPatch: {
        serializedName: "properties.kernelPatch",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ipAddress: {
        serializedName: "properties.ipAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      gatewayPort: {
        serializedName: "properties.gatewayPort",
        readOnly: true,
        nullable: true,
        type: {
          name: "Number"
        }
      },
      icmHttpPort: {
        serializedName: "properties.icmHttpPort",
        readOnly: true,
        nullable: true,
        type: {
          name: "Number"
        }
      },
      icmHttpsPort: {
        serializedName: "properties.icmHttpsPort",
        readOnly: true,
        nullable: true,
        type: {
          name: "Number"
        }
      },
      dispatcherStatus: {
        serializedName: "properties.dispatcherStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      loadBalancerDetails: {
        serializedName: "properties.loadBalancerDetails",
        type: {
          name: "Composite",
          className: "LoadBalancerDetails"
        }
      },
      vmDetails: {
        serializedName: "properties.vmDetails",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationServerVmDetails"
            }
          }
        }
      },
      status: {
        serializedName: "properties.status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      health: {
        serializedName: "properties.health",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errors: {
        serializedName: "properties.errors",
        type: {
          name: "Composite",
          className: "SAPVirtualInstanceError"
        }
      }
    }
  }
};

export const Connector: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Connector",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "UserAssignedServiceIdentity"
        }
      },
      sourceResourceId: {
        serializedName: "properties.sourceResourceId",
        required: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errors: {
        serializedName: "properties.errors",
        type: {
          name: "Composite",
          className: "ConnectorErrorDefinition"
        }
      },
      managedResourceGroupConfiguration: {
        serializedName: "properties.managedResourceGroupConfiguration",
        type: {
          name: "Composite",
          className: "ManagedRGConfiguration"
        }
      }
    }
  }
};

export const AcssBackupConnection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AcssBackupConnection",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      backupData: {
        serializedName: "properties.backupData",
        type: {
          name: "Composite",
          className: "BackupData"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errors: {
        serializedName: "properties.errors",
        type: {
          name: "Composite",
          className: "ConnectorErrorDefinition"
        }
      }
    }
  }
};

export const SAPVirtualInstancesUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SAPVirtualInstancesUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SAPVirtualInstancesDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SAPVirtualInstancesDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SAPVirtualInstancesStartHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SAPVirtualInstancesStartHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SAPVirtualInstancesStopHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SAPVirtualInstancesStopHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SAPCentralInstancesDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SAPCentralInstancesDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SAPCentralInstancesStartInstanceHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SAPCentralInstancesStartInstanceHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SAPCentralInstancesStopInstanceHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SAPCentralInstancesStopInstanceHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SAPDatabaseInstancesDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SAPDatabaseInstancesDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SAPDatabaseInstancesStartInstanceHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SAPDatabaseInstancesStartInstanceHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SAPDatabaseInstancesStopInstanceHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SAPDatabaseInstancesStopInstanceHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SAPApplicationServerInstancesDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SAPApplicationServerInstancesDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SAPApplicationServerInstancesStartInstanceHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SAPApplicationServerInstancesStartInstanceHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SAPApplicationServerInstancesStopInstanceHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SAPApplicationServerInstancesStopInstanceHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConnectorsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectorsDeleteHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AcssBackupConnectionsUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AcssBackupConnectionsUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AcssBackupConnectionsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AcssBackupConnectionsDeleteHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export let discriminators = {
  SAPSizingRecommendationResult: SAPSizingRecommendationResult,
  SAPConfiguration: SAPConfiguration,
  BackupData: BackupData,
  RecoveryServicesVaultProperties: RecoveryServicesVaultProperties,
  OSConfiguration: OSConfiguration,
  SingleServerCustomResourceNames: SingleServerCustomResourceNames,
  InfrastructureConfiguration: InfrastructureConfiguration,
  FileShareConfiguration: FileShareConfiguration,
  ThreeTierCustomResourceNames: ThreeTierCustomResourceNames,
  SoftwareConfiguration: SoftwareConfiguration,
  SchedulePolicy: SchedulePolicy,
  RetentionPolicy: RetentionPolicy,
  ProtectionPolicy: ProtectionPolicy,
  "SAPSizingRecommendationResult.SingleServer": SingleServerRecommendationResult,
  "SAPSizingRecommendationResult.ThreeTier": ThreeTierRecommendationResult,
  "SAPConfiguration.Discovery": DiscoveryConfiguration,
  "SAPConfiguration.Deployment": DeploymentConfiguration,
  "SAPConfiguration.DeploymentWithOSConfig": DeploymentWithOSConfiguration,
  "BackupData.VM": VMBackupData,
  "BackupData.HANA": HanaBackupData,
  "BackupData.SQL": SqlBackupData,
  "RecoveryServicesVaultProperties.New": NewRecoveryServicesVault,
  "RecoveryServicesVaultProperties.Existing": ExistingRecoveryServicesVault,
  "OSConfiguration.Windows": WindowsConfiguration,
  "OSConfiguration.Linux": LinuxConfiguration,
  "SingleServerCustomResourceNames.FullResourceName": SingleServerFullResourceNames,
  "InfrastructureConfiguration.SingleServer": SingleServerConfiguration,
  "InfrastructureConfiguration.ThreeTier": ThreeTierConfiguration,
  "FileShareConfiguration.Skip": SkipFileShareConfiguration,
  "FileShareConfiguration.CreateAndMount": CreateAndMountFileShareConfiguration,
  "FileShareConfiguration.Mount": MountFileShareConfiguration,
  "ThreeTierCustomResourceNames.FullResourceName": ThreeTierFullResourceNames,
  "SoftwareConfiguration.ServiceInitiated": ServiceInitiatedSoftwareConfiguration,
  "SoftwareConfiguration.SAPInstallWithoutOSConfig": SAPInstallWithoutOSConfigSoftwareConfiguration,
  "SoftwareConfiguration.External": ExternalInstallationSoftwareConfiguration,
  "SchedulePolicy.SimpleSchedulePolicy": SimpleSchedulePolicy,
  "SchedulePolicy.SimpleSchedulePolicyV2": SimpleSchedulePolicyV2,
  "SchedulePolicy.LongTermSchedulePolicy": LongTermSchedulePolicy,
  "SchedulePolicy.LogSchedulePolicy": LogSchedulePolicy,
  "RetentionPolicy.LongTermRetentionPolicy": LongTermRetentionPolicy,
  "RetentionPolicy.SimpleRetentionPolicy": SimpleRetentionPolicy,
  "ProtectionPolicy.AzureIaasVM": AzureIaaSVMProtectionPolicy,
  "ProtectionPolicy.AzureWorkload": AzureVmWorkloadProtectionPolicy
};
