/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { CheckAccess } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { BillingManagementClient } from "../billingManagementClient";
import {
  CheckAccessGetByBillingProfileOptionalParams,
  CheckAccessGetByBillingProfileResponse,
  CheckAccessGetByCustomerOptionalParams,
  CheckAccessGetByCustomerResponse,
  CheckAccessGetByInvoiceSectionOptionalParams,
  CheckAccessGetByInvoiceSectionResponse,
  CheckAccessGetByBillingAccountOptionalParams,
  CheckAccessGetByBillingAccountResponse,
  CheckAccessGetByDepartmentOptionalParams,
  CheckAccessGetByDepartmentResponse,
  CheckAccessGetByEnrollmentAccountOptionalParams,
  CheckAccessGetByEnrollmentAccountResponse
} from "../models";

/** Class containing CheckAccess operations. */
export class CheckAccessImpl implements CheckAccess {
  private readonly client: BillingManagementClient;

  /**
   * Initialize a new instance of the class CheckAccess class.
   * @param client Reference to the service client
   */
  constructor(client: BillingManagementClient) {
    this.client = client;
  }

  /**
   * Provides a list of check access response objects for a billing profile.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param options The options parameters.
   */
  getByBillingProfile(
    billingAccountName: string,
    billingProfileName: string,
    options?: CheckAccessGetByBillingProfileOptionalParams
  ): Promise<CheckAccessGetByBillingProfileResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, billingProfileName, options },
      getByBillingProfileOperationSpec
    );
  }

  /**
   * Provides a list of check access response objects for a customer.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param customerName The ID that uniquely identifies a customer.
   * @param options The options parameters.
   */
  getByCustomer(
    billingAccountName: string,
    billingProfileName: string,
    customerName: string,
    options?: CheckAccessGetByCustomerOptionalParams
  ): Promise<CheckAccessGetByCustomerResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, billingProfileName, customerName, options },
      getByCustomerOperationSpec
    );
  }

  /**
   * Provides a list of check access response objects for an invoice section.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param invoiceSectionName The ID that uniquely identifies an invoice section.
   * @param options The options parameters.
   */
  getByInvoiceSection(
    billingAccountName: string,
    billingProfileName: string,
    invoiceSectionName: string,
    options?: CheckAccessGetByInvoiceSectionOptionalParams
  ): Promise<CheckAccessGetByInvoiceSectionResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, billingProfileName, invoiceSectionName, options },
      getByInvoiceSectionOperationSpec
    );
  }

  /**
   * Provides a list of check access response objects for a billing account.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param options The options parameters.
   */
  getByBillingAccount(
    billingAccountName: string,
    options?: CheckAccessGetByBillingAccountOptionalParams
  ): Promise<CheckAccessGetByBillingAccountResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, options },
      getByBillingAccountOperationSpec
    );
  }

  /**
   * Provides a list of check access response objects for a department.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param departmentName The name of the department.
   * @param options The options parameters.
   */
  getByDepartment(
    billingAccountName: string,
    departmentName: string,
    options?: CheckAccessGetByDepartmentOptionalParams
  ): Promise<CheckAccessGetByDepartmentResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, departmentName, options },
      getByDepartmentOperationSpec
    );
  }

  /**
   * Provides a list of check access response objects for an enrollment account.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param enrollmentAccountName The name of the enrollment account.
   * @param options The options parameters.
   */
  getByEnrollmentAccount(
    billingAccountName: string,
    enrollmentAccountName: string,
    options?: CheckAccessGetByEnrollmentAccountOptionalParams
  ): Promise<CheckAccessGetByEnrollmentAccountResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, enrollmentAccountName, options },
      getByEnrollmentAccountOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getByBillingProfileOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/checkAccess",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "CheckAccessResponse" }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ArmErrorResponse
    }
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.billingProfileName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getByCustomerOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/customers/{customerName}/checkAccess",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "CheckAccessResponse" }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ArmErrorResponse
    }
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.billingProfileName,
    Parameters.customerName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getByInvoiceSectionOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/checkAccess",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "CheckAccessResponse" }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ArmErrorResponse
    }
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.billingProfileName,
    Parameters.invoiceSectionName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getByBillingAccountOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/checkAccess",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "CheckAccessResponse" }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ArmErrorResponse
    }
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.billingAccountName],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getByDepartmentOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/departments/{departmentName}/checkAccess",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "CheckAccessResponse" }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ArmErrorResponse
    }
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.departmentName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getByEnrollmentAccountOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/enrollmentAccounts/{enrollmentAccountName}/checkAccess",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "CheckAccessResponse" }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ArmErrorResponse
    }
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.enrollmentAccountName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
