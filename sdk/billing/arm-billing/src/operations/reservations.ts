/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { Reservations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { BillingManagementClient } from "../billingManagementClient";
import {
  Reservation,
  ReservationsListAllByBillingAccountNextOptionalParams,
  ReservationsListAllByBillingAccountOptionalParams,
  ReservationsListAllByBillingAccountResponse,
  ReservationsListByBillingProfileNextOptionalParams,
  ReservationsListByBillingProfileOptionalParams,
  ReservationsListByBillingProfileResponse,
  ReservationsListByBillingAccountNextOptionalParams,
  ReservationsListByBillingAccountOptionalParams,
  ReservationsListByBillingAccountResponse,
  ReservationsListAllByBillingAccountNextResponse,
  ReservationsListByBillingProfileNextResponse,
  ReservationsListByBillingAccountNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Reservations operations. */
export class ReservationsImpl implements Reservations {
  private readonly client: BillingManagementClient;

  /**
   * Initialize a new instance of the class Reservations class.
   * @param client Reference to the service client
   */
  constructor(client: BillingManagementClient) {
    this.client = client;
  }

  /**
   * Lists the reservations in the billing account and the roll up counts of reservations group by
   * provisioning states.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param options The options parameters.
   */
  public listAllByBillingAccount(
    billingAccountName: string,
    options?: ReservationsListAllByBillingAccountOptionalParams
  ): PagedAsyncIterableIterator<Reservation> {
    const iter = this.listAllByBillingAccountPagingAll(
      billingAccountName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listAllByBillingAccountPagingPage(
          billingAccountName,
          options,
          settings
        );
      }
    };
  }

  private async *listAllByBillingAccountPagingPage(
    billingAccountName: string,
    options?: ReservationsListAllByBillingAccountOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Reservation[]> {
    let result: ReservationsListAllByBillingAccountResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listAllByBillingAccount(billingAccountName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listAllByBillingAccountNext(
        billingAccountName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listAllByBillingAccountPagingAll(
    billingAccountName: string,
    options?: ReservationsListAllByBillingAccountOptionalParams
  ): AsyncIterableIterator<Reservation> {
    for await (const page of this.listAllByBillingAccountPagingPage(
      billingAccountName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists the reservations for a billing profile and the roll up counts of reservations group by
   * provisioning state.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param options The options parameters.
   */
  public listByBillingProfile(
    billingAccountName: string,
    billingProfileName: string,
    options?: ReservationsListByBillingProfileOptionalParams
  ): PagedAsyncIterableIterator<Reservation> {
    const iter = this.listByBillingProfilePagingAll(
      billingAccountName,
      billingProfileName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByBillingProfilePagingPage(
          billingAccountName,
          billingProfileName,
          options,
          settings
        );
      }
    };
  }

  private async *listByBillingProfilePagingPage(
    billingAccountName: string,
    billingProfileName: string,
    options?: ReservationsListByBillingProfileOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Reservation[]> {
    let result: ReservationsListByBillingProfileResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByBillingProfile(
        billingAccountName,
        billingProfileName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByBillingProfileNext(
        billingAccountName,
        billingProfileName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByBillingProfilePagingAll(
    billingAccountName: string,
    billingProfileName: string,
    options?: ReservationsListByBillingProfileOptionalParams
  ): AsyncIterableIterator<Reservation> {
    for await (const page of this.listByBillingProfilePagingPage(
      billingAccountName,
      billingProfileName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List Reservations within a single ReservationOrder in the billing account.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param reservationOrderId Order Id of the reservation
   * @param options The options parameters.
   */
  public listByBillingAccount(
    billingAccountName: string,
    reservationOrderId: string,
    options?: ReservationsListByBillingAccountOptionalParams
  ): PagedAsyncIterableIterator<Reservation> {
    const iter = this.listByBillingAccountPagingAll(
      billingAccountName,
      reservationOrderId,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByBillingAccountPagingPage(
          billingAccountName,
          reservationOrderId,
          options,
          settings
        );
      }
    };
  }

  private async *listByBillingAccountPagingPage(
    billingAccountName: string,
    reservationOrderId: string,
    options?: ReservationsListByBillingAccountOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Reservation[]> {
    let result: ReservationsListByBillingAccountResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByBillingAccount(
        billingAccountName,
        reservationOrderId,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByBillingAccountNext(
        billingAccountName,
        reservationOrderId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByBillingAccountPagingAll(
    billingAccountName: string,
    reservationOrderId: string,
    options?: ReservationsListByBillingAccountOptionalParams
  ): AsyncIterableIterator<Reservation> {
    for await (const page of this.listByBillingAccountPagingPage(
      billingAccountName,
      reservationOrderId,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists the reservations in the billing account and the roll up counts of reservations group by
   * provisioning states.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param options The options parameters.
   */
  private _listAllByBillingAccount(
    billingAccountName: string,
    options?: ReservationsListAllByBillingAccountOptionalParams
  ): Promise<ReservationsListAllByBillingAccountResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, options },
      listAllByBillingAccountOperationSpec
    );
  }

  /**
   * Lists the reservations for a billing profile and the roll up counts of reservations group by
   * provisioning state.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param options The options parameters.
   */
  private _listByBillingProfile(
    billingAccountName: string,
    billingProfileName: string,
    options?: ReservationsListByBillingProfileOptionalParams
  ): Promise<ReservationsListByBillingProfileResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, billingProfileName, options },
      listByBillingProfileOperationSpec
    );
  }

  /**
   * List Reservations within a single ReservationOrder in the billing account.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param reservationOrderId Order Id of the reservation
   * @param options The options parameters.
   */
  private _listByBillingAccount(
    billingAccountName: string,
    reservationOrderId: string,
    options?: ReservationsListByBillingAccountOptionalParams
  ): Promise<ReservationsListByBillingAccountResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, reservationOrderId, options },
      listByBillingAccountOperationSpec
    );
  }

  /**
   * ListAllByBillingAccountNext
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param nextLink The nextLink from the previous successful call to the ListAllByBillingAccount
   *                 method.
   * @param options The options parameters.
   */
  private _listAllByBillingAccountNext(
    billingAccountName: string,
    nextLink: string,
    options?: ReservationsListAllByBillingAccountNextOptionalParams
  ): Promise<ReservationsListAllByBillingAccountNextResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, nextLink, options },
      listAllByBillingAccountNextOperationSpec
    );
  }

  /**
   * ListByBillingProfileNext
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param nextLink The nextLink from the previous successful call to the ListByBillingProfile method.
   * @param options The options parameters.
   */
  private _listByBillingProfileNext(
    billingAccountName: string,
    billingProfileName: string,
    nextLink: string,
    options?: ReservationsListByBillingProfileNextOptionalParams
  ): Promise<ReservationsListByBillingProfileNextResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, billingProfileName, nextLink, options },
      listByBillingProfileNextOperationSpec
    );
  }

  /**
   * ListByBillingAccountNext
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param reservationOrderId Order Id of the reservation
   * @param nextLink The nextLink from the previous successful call to the ListByBillingAccount method.
   * @param options The options parameters.
   */
  private _listByBillingAccountNext(
    billingAccountName: string,
    reservationOrderId: string,
    nextLink: string,
    options?: ReservationsListByBillingAccountNextOptionalParams
  ): Promise<ReservationsListByBillingAccountNextResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, reservationOrderId, nextLink, options },
      listByBillingAccountNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listAllByBillingAccountOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/reservations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReservationsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter1,
    Parameters.orderBy,
    Parameters.skiptoken,
    Parameters.refreshSummary,
    Parameters.selectedState,
    Parameters.take
  ],
  urlParameters: [Parameters.$host, Parameters.billingAccountName],
  headerParameters: [Parameters.accept],
  serializer
};
const listByBillingProfileOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/reservations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReservationsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter1,
    Parameters.orderBy,
    Parameters.skiptoken,
    Parameters.refreshSummary,
    Parameters.selectedState,
    Parameters.take
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.billingProfileName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByBillingAccountOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/reservationOrders/{reservationOrderId}/reservations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReservationList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.reservationOrderId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listAllByBillingAccountNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReservationsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByBillingProfileNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReservationsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.nextLink,
    Parameters.billingProfileName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByBillingAccountNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReservationList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.nextLink,
    Parameters.reservationOrderId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
