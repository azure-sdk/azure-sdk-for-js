/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  CertificateProfile,
  CertificateProfilesListByCodeSigningAccountOptionalParams,
  CertificateProfilesGetOptionalParams,
  CertificateProfilesGetResponse,
  CertificateProfilesCreateOptionalParams,
  CertificateProfilesCreateResponse,
  CertificateProfilesDeleteOptionalParams,
  CertificateProfilesDeleteResponse,
  RevokeCertificate,
  CertificateProfilesRevokeCertificateOptionalParams,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a CertificateProfiles. */
export interface CertificateProfiles {
  /**
   * List certificate profiles under a trusted signing account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Trusted Signing account name.
   * @param options The options parameters.
   */
  listByCodeSigningAccount(
    resourceGroupName: string,
    accountName: string,
    options?: CertificateProfilesListByCodeSigningAccountOptionalParams,
  ): PagedAsyncIterableIterator<CertificateProfile>;
  /**
   * Get details of a certificate profile.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Trusted Signing account name.
   * @param profileName Certificate profile name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    accountName: string,
    profileName: string,
    options?: CertificateProfilesGetOptionalParams,
  ): Promise<CertificateProfilesGetResponse>;
  /**
   * Create a certificate profile.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Trusted Signing account name.
   * @param profileName Certificate profile name.
   * @param resource Parameters to create the certificate profile
   * @param options The options parameters.
   */
  beginCreate(
    resourceGroupName: string,
    accountName: string,
    profileName: string,
    resource: CertificateProfile,
    options?: CertificateProfilesCreateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<CertificateProfilesCreateResponse>,
      CertificateProfilesCreateResponse
    >
  >;
  /**
   * Create a certificate profile.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Trusted Signing account name.
   * @param profileName Certificate profile name.
   * @param resource Parameters to create the certificate profile
   * @param options The options parameters.
   */
  beginCreateAndWait(
    resourceGroupName: string,
    accountName: string,
    profileName: string,
    resource: CertificateProfile,
    options?: CertificateProfilesCreateOptionalParams,
  ): Promise<CertificateProfilesCreateResponse>;
  /**
   * Delete a certificate profile.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Trusted Signing account name.
   * @param profileName Certificate profile name.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    accountName: string,
    profileName: string,
    options?: CertificateProfilesDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<CertificateProfilesDeleteResponse>,
      CertificateProfilesDeleteResponse
    >
  >;
  /**
   * Delete a certificate profile.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Trusted Signing account name.
   * @param profileName Certificate profile name.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    accountName: string,
    profileName: string,
    options?: CertificateProfilesDeleteOptionalParams,
  ): Promise<CertificateProfilesDeleteResponse>;
  /**
   * Revoke a certificate under a certificate profile.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName Trusted Signing account name.
   * @param profileName Certificate profile name.
   * @param body Parameters to revoke the certificate profile
   * @param options The options parameters.
   */
  revokeCertificate(
    resourceGroupName: string,
    accountName: string,
    profileName: string,
    body: RevokeCertificate,
    options?: CertificateProfilesRevokeCertificateOptionalParams,
  ): Promise<void>;
}
