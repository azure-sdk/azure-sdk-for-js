/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of results. */
export interface OperationListResult {
  /**
   * List of operations supported by the resource provider
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Operation[];
  /**
   * URL to get the next set of operation list results (if there are any).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Details of a REST API operation, returned from the Resource Provider Operations API */
export interface Operation {
  /**
   * The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for ARM/control-plane operations.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isDataAction?: boolean;
  /** Localized display information for this particular operation. */
  display?: OperationDisplay;
  /**
   * The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is "user,system"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly origin?: Origin;
  /**
   * Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly actionType?: ActionType;
}

/** Localized display information for this particular operation. */
export interface OperationDisplay {
  /**
   * The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft Compute".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provider?: string;
  /**
   * The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job Schedule Collections".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resource?: string;
  /**
   * The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operation?: string;
  /**
   * The short, localized friendly description of the operation; suitable for tool tips and detailed views.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export interface ErrorResponse {
  /** The error object. */
  error?: ErrorDetail;
}

/** The error detail. */
export interface ErrorDetail {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDetail[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
}

/** The parameters used to check the availability of the trusted signing account name. */
export interface CheckNameAvailability {
  /** Trusted signing account name. */
  name: string;
}

/** The CheckNameAvailability operation response. */
export interface CheckNameAvailabilityResult {
  /**
   * A boolean value that indicates whether the name is available for you to use. If true, the name is available. If false, the name has already been taken or is invalid and cannot be used.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nameAvailable?: boolean;
  /**
   * The reason that a trusted signing account name could not be used. The Reason element is only returned if nameAvailable is false.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly reason?: NameUnavailabilityReason;
  /**
   * An error message explaining the Reason value in more detail.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
}

/** The response of a CodeSigningAccount list operation. */
export interface CodeSigningAccountListResult {
  /** The CodeSigningAccount items on this page */
  value: CodeSigningAccount[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** SKU of the trusted signing account. */
export interface AccountSku {
  /** Name of the SKU. */
  name: SkuName;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export interface Resource {
  /**
   * Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Azure Resource Manager metadata containing createdBy and modifiedBy information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The timestamp of resource last modification (UTC) */
  lastModifiedAt?: Date;
}

/** Parameters for creating or updating a trusted signing account. */
export interface CodeSigningAccountPatch {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** SKU of the trusted signing account. */
  sku?: AccountSku;
}

/** The response of a CertificateProfile list operation. */
export interface CertificateProfileListResult {
  /** The CertificateProfile items on this page */
  value: CertificateProfile[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** Properties of the certificate. */
export interface Certificate {
  /** Serial number of the certificate. */
  serialNumber?: string;
  /** Subject name of the certificate. */
  subjectName?: string;
  /** Thumbprint of the certificate. */
  thumbprint?: string;
  /** Certificate created date. */
  createdDate?: string;
  /** Certificate expiry date. */
  expiryDate?: string;
  /** Status of the certificate. */
  status?: CertificateStatus;
  /** The timestamp when the revocation is requested. */
  requestedAt?: Date;
  /** The timestamp when the revocation is effective. */
  effectiveAt?: Date;
  /** Reason for revocation. */
  reason?: string;
  /** Remarks for the revocation. */
  remarks?: string;
  /**
   * Status of the revocation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statusRevocationStatus?: RevocationStatus;
  /** Reason for the revocation failure. */
  failureReason?: string;
}

/** Defines the certificate revocation properties. */
export interface RevokeCertificate {
  /** Serial number of the certificate. */
  serialNumber: string;
  /** Thumbprint of the certificate. */
  thumbprint: string;
  /** The timestamp when the revocation is effective. */
  effectiveAt: Date;
  /** Reason for the revocation. */
  reason: string;
  /** Remarks for the revocation. */
  remarks?: string;
}

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export interface TrackedResource extends Resource {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The geo-location where the resource lives */
  location: string;
}

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export interface ProxyResource extends Resource {}

/** Trusted signing account resource. */
export interface CodeSigningAccount extends TrackedResource {
  /**
   * The URI of the trusted signing account which is used during signing files.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly accountUri?: string;
  /** SKU of the trusted signing account. */
  sku?: AccountSku;
  /**
   * Status of the current operation on trusted signing account.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** Certificate profile resource. */
export interface CertificateProfile extends ProxyResource {
  /** Profile type of the certificate. */
  profileType?: ProfileType;
  /**
   * Used as CN in the certificate subject name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly commonName?: string;
  /**
   * Used as O in the certificate subject name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly organization?: string;
  /**
   * Used as OU in the private trust certificate subject name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly organizationUnit?: string;
  /**
   * Used as STREET in the certificate subject name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly streetAddress?: string;
  /** Whether to include STREET in the certificate subject name. */
  includeStreetAddress?: boolean;
  /**
   * Used as L in the certificate subject name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly city?: string;
  /** Whether to include L in the certificate subject name. Applicable only for private trust, private trust ci profile types */
  includeCity?: boolean;
  /**
   * Used as S in the certificate subject name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly state?: string;
  /** Whether to include S in the certificate subject name. Applicable only for private trust, private trust ci profile types */
  includeState?: boolean;
  /**
   * Used as C in the certificate subject name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly country?: string;
  /** Whether to include C in the certificate subject name. Applicable only for private trust, private trust ci profile types */
  includeCountry?: boolean;
  /**
   * Used as PC in the certificate subject name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly postalCode?: string;
  /** Whether to include PC in the certificate subject name. */
  includePostalCode?: boolean;
  /**
   * Enhanced key usage of the certificate.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly enhancedKeyUsage?: string;
  /** Identity validation id used for the certificate subject name. */
  identityValidationId?: string;
  /**
   * Status of the current operation on certificate profile.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Status of the certificate profile.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: CertificateProfileStatus;
  /**
   * List of renewed certificates.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly certificates?: Certificate[];
}

/** Defines headers for CodeSigningAccounts_create operation. */
export interface CodeSigningAccountsCreateHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for CodeSigningAccounts_update operation. */
export interface CodeSigningAccountsUpdateHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for CodeSigningAccounts_delete operation. */
export interface CodeSigningAccountsDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for CertificateProfiles_create operation. */
export interface CertificateProfilesCreateHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for CertificateProfiles_delete operation. */
export interface CertificateProfilesDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Known values of {@link Origin} that the service accepts. */
export enum KnownOrigin {
  /** User */
  User = "user",
  /** System */
  System = "system",
  /** UserSystem */
  UserSystem = "user,system",
}

/**
 * Defines values for Origin. \
 * {@link KnownOrigin} can be used interchangeably with Origin,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **user** \
 * **system** \
 * **user,system**
 */
export type Origin = string;

/** Known values of {@link ActionType} that the service accepts. */
export enum KnownActionType {
  /** Internal */
  Internal = "Internal",
}

/**
 * Defines values for ActionType. \
 * {@link KnownActionType} can be used interchangeably with ActionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Internal**
 */
export type ActionType = string;

/** Known values of {@link NameUnavailabilityReason} that the service accepts. */
export enum KnownNameUnavailabilityReason {
  /** Account name is invalid */
  AccountNameInvalid = "AccountNameInvalid",
  /** Account name already exists */
  AlreadyExists = "AlreadyExists",
}

/**
 * Defines values for NameUnavailabilityReason. \
 * {@link KnownNameUnavailabilityReason} can be used interchangeably with NameUnavailabilityReason,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AccountNameInvalid**: Account name is invalid \
 * **AlreadyExists**: Account name already exists
 */
export type NameUnavailabilityReason = string;

/** Known values of {@link SkuName} that the service accepts. */
export enum KnownSkuName {
  /** Basic sku. */
  Basic = "Basic",
  /** Premium sku. */
  Premium = "Premium",
}

/**
 * Defines values for SkuName. \
 * {@link KnownSkuName} can be used interchangeably with SkuName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Basic**: Basic sku. \
 * **Premium**: Premium sku.
 */
export type SkuName = string;

/** Known values of {@link ProvisioningState} that the service accepts. */
export enum KnownProvisioningState {
  /** Resource has been created. */
  Succeeded = "Succeeded",
  /** Resource creation failed. */
  Failed = "Failed",
  /** Resource creation was canceled. */
  Canceled = "Canceled",
  /** Updating in progress. */
  Updating = "Updating",
  /** Deletion in progress. */
  Deleting = "Deleting",
  /** Resource creation started. */
  Accepted = "Accepted",
}

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded**: Resource has been created. \
 * **Failed**: Resource creation failed. \
 * **Canceled**: Resource creation was canceled. \
 * **Updating**: Updating in progress. \
 * **Deleting**: Deletion in progress. \
 * **Accepted**: Resource creation started.
 */
export type ProvisioningState = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  /** User */
  User = "User",
  /** Application */
  Application = "Application",
  /** ManagedIdentity */
  ManagedIdentity = "ManagedIdentity",
  /** Key */
  Key = "Key",
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link ProfileType} that the service accepts. */
export enum KnownProfileType {
  /** Used for signing files which are distributed publicly. */
  PublicTrust = "PublicTrust",
  /** Used for signing files which are distributed internally within organization or group boundary. */
  PrivateTrust = "PrivateTrust",
  /** Used for signing CI policy files. */
  PrivateTrustCIPolicy = "PrivateTrustCIPolicy",
  /** Used for signing files which are run in secure vbs enclave. */
  VBSEnclave = "VBSEnclave",
  /** Used for signing files for testing purpose. */
  PublicTrustTest = "PublicTrustTest",
}

/**
 * Defines values for ProfileType. \
 * {@link KnownProfileType} can be used interchangeably with ProfileType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **PublicTrust**: Used for signing files which are distributed publicly. \
 * **PrivateTrust**: Used for signing files which are distributed internally within organization or group boundary. \
 * **PrivateTrustCIPolicy**: Used for signing CI policy files. \
 * **VBSEnclave**: Used for signing files which are run in secure vbs enclave. \
 * **PublicTrustTest**: Used for signing files for testing purpose.
 */
export type ProfileType = string;

/** Known values of {@link CertificateProfileStatus} that the service accepts. */
export enum KnownCertificateProfileStatus {
  /** The certificate profile is active. */
  Active = "Active",
  /** The certificate profile is disabled. */
  Disabled = "Disabled",
  /** The certificate profile is suspended. */
  Suspended = "Suspended",
}

/**
 * Defines values for CertificateProfileStatus. \
 * {@link KnownCertificateProfileStatus} can be used interchangeably with CertificateProfileStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Active**: The certificate profile is active. \
 * **Disabled**: The certificate profile is disabled. \
 * **Suspended**: The certificate profile is suspended.
 */
export type CertificateProfileStatus = string;

/** Known values of {@link CertificateStatus} that the service accepts. */
export enum KnownCertificateStatus {
  /** The certificate is active. */
  Active = "Active",
  /** The certificate is expired. */
  Expired = "Expired",
  /** The certificate is revoked. */
  Revoked = "Revoked",
}

/**
 * Defines values for CertificateStatus. \
 * {@link KnownCertificateStatus} can be used interchangeably with CertificateStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Active**: The certificate is active. \
 * **Expired**: The certificate is expired. \
 * **Revoked**: The certificate is revoked.
 */
export type CertificateStatus = string;

/** Known values of {@link RevocationStatus} that the service accepts. */
export enum KnownRevocationStatus {
  /** Certificate revocation succeeded. */
  Succeeded = "Succeeded",
  /** Certificate revocation is in progress. */
  InProgress = "InProgress",
  /** Certificate revocation failed. */
  Failed = "Failed",
}

/**
 * Defines values for RevocationStatus. \
 * {@link KnownRevocationStatus} can be used interchangeably with RevocationStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded**: Certificate revocation succeeded. \
 * **InProgress**: Certificate revocation is in progress. \
 * **Failed**: Certificate revocation failed.
 */
export type RevocationStatus = string;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationListResult;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export interface CodeSigningAccountsCheckNameAvailabilityOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the checkNameAvailability operation. */
export type CodeSigningAccountsCheckNameAvailabilityResponse =
  CheckNameAvailabilityResult;

/** Optional parameters. */
export interface CodeSigningAccountsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type CodeSigningAccountsListBySubscriptionResponse =
  CodeSigningAccountListResult;

/** Optional parameters. */
export interface CodeSigningAccountsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type CodeSigningAccountsListByResourceGroupResponse =
  CodeSigningAccountListResult;

/** Optional parameters. */
export interface CodeSigningAccountsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type CodeSigningAccountsGetResponse = CodeSigningAccount;

/** Optional parameters. */
export interface CodeSigningAccountsCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type CodeSigningAccountsCreateResponse = CodeSigningAccount;

/** Optional parameters. */
export interface CodeSigningAccountsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type CodeSigningAccountsUpdateResponse = CodeSigningAccount;

/** Optional parameters. */
export interface CodeSigningAccountsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type CodeSigningAccountsDeleteResponse =
  CodeSigningAccountsDeleteHeaders;

/** Optional parameters. */
export interface CodeSigningAccountsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type CodeSigningAccountsListBySubscriptionNextResponse =
  CodeSigningAccountListResult;

/** Optional parameters. */
export interface CodeSigningAccountsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type CodeSigningAccountsListByResourceGroupNextResponse =
  CodeSigningAccountListResult;

/** Optional parameters. */
export interface CertificateProfilesListByCodeSigningAccountOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByCodeSigningAccount operation. */
export type CertificateProfilesListByCodeSigningAccountResponse =
  CertificateProfileListResult;

/** Optional parameters. */
export interface CertificateProfilesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type CertificateProfilesGetResponse = CertificateProfile;

/** Optional parameters. */
export interface CertificateProfilesCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type CertificateProfilesCreateResponse = CertificateProfile;

/** Optional parameters. */
export interface CertificateProfilesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type CertificateProfilesDeleteResponse =
  CertificateProfilesDeleteHeaders;

/** Optional parameters. */
export interface CertificateProfilesRevokeCertificateOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface CertificateProfilesListByCodeSigningAccountNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByCodeSigningAccountNext operation. */
export type CertificateProfilesListByCodeSigningAccountNextResponse =
  CertificateProfileListResult;

/** Optional parameters. */
export interface CodeSigningManagementClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
