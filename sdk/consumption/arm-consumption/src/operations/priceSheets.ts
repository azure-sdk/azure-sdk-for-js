/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PriceSheets } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ConsumptionManagementClient } from "../consumptionManagementClient";
import {
  PriceSheetsGetOptionalParams,
  PriceSheetsGetResponse,
  PriceSheetsGetByBillingPeriodOptionalParams,
  PriceSheetsGetByBillingPeriodResponse
} from "../models";

/** Class containing PriceSheets operations. */
export class PriceSheetsImpl implements PriceSheets {
  private readonly client: ConsumptionManagementClient;

  /**
   * Initialize a new instance of the class PriceSheets class.
   * @param client Reference to the service client
   */
  constructor(client: ConsumptionManagementClient) {
    this.client = client;
  }

  /**
   * List the price sheet for a subscription. Price sheet is available via this API only for May 1, 2014
   * or later.
   * @param subscriptionId Azure Subscription ID.
   * @param options The options parameters.
   */
  get(
    subscriptionId: string,
    options?: PriceSheetsGetOptionalParams
  ): Promise<PriceSheetsGetResponse> {
    return this.client.sendOperationRequest(
      { subscriptionId, options },
      getOperationSpec
    );
  }

  /**
   * Get the price sheet for a scope by subscriptionId and billing period. Price sheet is available via
   * this API only for May 1, 2014 or later.
   * @param subscriptionId Azure Subscription ID.
   * @param billingPeriodName Billing Period Name.
   * @param options The options parameters.
   */
  getByBillingPeriod(
    subscriptionId: string,
    billingPeriodName: string,
    options?: PriceSheetsGetByBillingPeriodOptionalParams
  ): Promise<PriceSheetsGetByBillingPeriodResponse> {
    return this.client.sendOperationRequest(
      { subscriptionId, billingPeriodName, options },
      getByBillingPeriodOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Consumption/pricesheets/default",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PriceSheetResultV2
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.expand,
    Parameters.skiptoken,
    Parameters.top,
    Parameters.apiVersion
  ],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const getByBillingPeriodOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}/providers/Microsoft.Consumption/pricesheets/default",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PriceSheetResultV2
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.expand,
    Parameters.skiptoken,
    Parameters.top,
    Parameters.apiVersion
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.billingPeriodName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
