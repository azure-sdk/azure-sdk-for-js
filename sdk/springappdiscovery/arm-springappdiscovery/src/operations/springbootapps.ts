/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { Springbootapps } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { OffAzureSpringBoot } from "../offAzureSpringBoot";
import {
  SpringbootappsModel,
  SpringbootappsListByResourceGroupNextOptionalParams,
  SpringbootappsListByResourceGroupOptionalParams,
  SpringbootappsListByResourceGroupResponse,
  SpringbootappsListBySubscriptionNextOptionalParams,
  SpringbootappsListBySubscriptionOptionalParams,
  SpringbootappsListBySubscriptionResponse,
  SpringbootappsGetOptionalParams,
  SpringbootappsGetResponse,
  SpringbootappsCreateOrUpdateOptionalParams,
  SpringbootappsCreateOrUpdateResponse,
  SpringbootappsDeleteOptionalParams,
  SpringbootappsDeleteResponse,
  SpringbootappsPatch,
  SpringbootappsUpdateOptionalParams,
  SpringbootappsUpdateResponse,
  SpringbootappsListByResourceGroupNextResponse,
  SpringbootappsListBySubscriptionNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Springbootapps operations. */
export class SpringbootappsImpl implements Springbootapps {
  private readonly client: OffAzureSpringBoot;

  /**
   * Initialize a new instance of the class Springbootapps class.
   * @param client Reference to the service client
   */
  constructor(client: OffAzureSpringBoot) {
    this.client = client;
  }

  /**
   * List springbootapps resource by resourceGroup
   * @param siteName The springbootsites name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    siteName: string,
    resourceGroupName: string,
    options?: SpringbootappsListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<SpringbootappsModel> {
    const iter = this.listByResourceGroupPagingAll(
      siteName,
      resourceGroupName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByResourceGroupPagingPage(
          siteName,
          resourceGroupName,
          options,
          settings
        );
      }
    };
  }

  private async *listByResourceGroupPagingPage(
    siteName: string,
    resourceGroupName: string,
    options?: SpringbootappsListByResourceGroupOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<SpringbootappsModel[]> {
    let result: SpringbootappsListByResourceGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByResourceGroup(
        siteName,
        resourceGroupName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        siteName,
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByResourceGroupPagingAll(
    siteName: string,
    resourceGroupName: string,
    options?: SpringbootappsListByResourceGroupOptionalParams
  ): AsyncIterableIterator<SpringbootappsModel> {
    for await (const page of this.listByResourceGroupPagingPage(
      siteName,
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List springbootapps resource by subscription
   * @param siteName The springbootsites name.
   * @param options The options parameters.
   */
  public listBySubscription(
    siteName: string,
    options?: SpringbootappsListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<SpringbootappsModel> {
    const iter = this.listBySubscriptionPagingAll(siteName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionPagingPage(siteName, options, settings);
      }
    };
  }

  private async *listBySubscriptionPagingPage(
    siteName: string,
    options?: SpringbootappsListBySubscriptionOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<SpringbootappsModel[]> {
    let result: SpringbootappsListBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySubscription(siteName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySubscriptionNext(
        siteName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySubscriptionPagingAll(
    siteName: string,
    options?: SpringbootappsListBySubscriptionOptionalParams
  ): AsyncIterableIterator<SpringbootappsModel> {
    for await (const page of this.listBySubscriptionPagingPage(
      siteName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Get a springbootapps resource.
   * @param siteName The springbootsites name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param springbootappsName The springbootapps name.
   * @param options The options parameters.
   */
  get(
    siteName: string,
    resourceGroupName: string,
    springbootappsName: string,
    options?: SpringbootappsGetOptionalParams
  ): Promise<SpringbootappsGetResponse> {
    return this.client.sendOperationRequest(
      { siteName, resourceGroupName, springbootappsName, options },
      getOperationSpec
    );
  }

  /**
   * Create a springbootapps resource.
   * @param siteName The springbootsites name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param springbootappsName The springbootapps name.
   * @param springbootapps Create a springbootapps payload.
   * @param options The options parameters.
   */
  createOrUpdate(
    siteName: string,
    resourceGroupName: string,
    springbootappsName: string,
    springbootapps: SpringbootappsModel,
    options?: SpringbootappsCreateOrUpdateOptionalParams
  ): Promise<SpringbootappsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        siteName,
        resourceGroupName,
        springbootappsName,
        springbootapps,
        options
      },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Delete a springbootapps resource.
   * @param siteName The springbootsites name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param springbootappsName The springbootapps name.
   * @param options The options parameters.
   */
  delete(
    siteName: string,
    resourceGroupName: string,
    springbootappsName: string,
    options?: SpringbootappsDeleteOptionalParams
  ): Promise<SpringbootappsDeleteResponse> {
    return this.client.sendOperationRequest(
      { siteName, resourceGroupName, springbootappsName, options },
      deleteOperationSpec
    );
  }

  /**
   * Update a springbootapps resource.
   * @param siteName The springbootsites name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param springbootappsName The springbootapps name.
   * @param springbootapps Update a springbootapps payload.
   * @param options The options parameters.
   */
  update(
    siteName: string,
    resourceGroupName: string,
    springbootappsName: string,
    springbootapps: SpringbootappsPatch,
    options?: SpringbootappsUpdateOptionalParams
  ): Promise<SpringbootappsUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        siteName,
        resourceGroupName,
        springbootappsName,
        springbootapps,
        options
      },
      updateOperationSpec
    );
  }

  /**
   * List springbootapps resource by resourceGroup
   * @param siteName The springbootsites name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    siteName: string,
    resourceGroupName: string,
    options?: SpringbootappsListByResourceGroupOptionalParams
  ): Promise<SpringbootappsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { siteName, resourceGroupName, options },
      listByResourceGroupOperationSpec
    );
  }

  /**
   * List springbootapps resource by subscription
   * @param siteName The springbootsites name.
   * @param options The options parameters.
   */
  private _listBySubscription(
    siteName: string,
    options?: SpringbootappsListBySubscriptionOptionalParams
  ): Promise<SpringbootappsListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { siteName, options },
      listBySubscriptionOperationSpec
    );
  }

  /**
   * ListByResourceGroupNext
   * @param siteName The springbootsites name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    siteName: string,
    resourceGroupName: string,
    nextLink: string,
    options?: SpringbootappsListByResourceGroupNextOptionalParams
  ): Promise<SpringbootappsListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { siteName, resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec
    );
  }

  /**
   * ListBySubscriptionNext
   * @param siteName The springbootsites name.
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    siteName: string,
    nextLink: string,
    options?: SpringbootappsListBySubscriptionNextOptionalParams
  ): Promise<SpringbootappsListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { siteName, nextLink, options },
      listBySubscriptionNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzureSpringBoot/springbootsites/{siteName}/springbootapps/{springbootappsName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SpringbootappsModel
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.springbootappsName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzureSpringBoot/springbootsites/{siteName}/springbootapps/{springbootappsName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SpringbootappsModel
    },
    201: {
      bodyMapper: Mappers.SpringbootappsModel
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.springbootapps,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.springbootappsName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzureSpringBoot/springbootsites/{siteName}/springbootapps/{springbootappsName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.SpringbootappsModel
    },
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.springbootappsName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzureSpringBoot/springbootsites/{siteName}/springbootapps/{springbootappsName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.SpringbootappsModel
    },
    201: {
      bodyMapper: Mappers.SpringbootappsModel
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.springbootapps1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.springbootappsName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzureSpringBoot/springbootsites/{siteName}/springbootapps",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SpringbootappsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.OffAzureSpringBoot/springbootsites/{siteName}/springbootapps",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SpringbootappsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.siteName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SpringbootappsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
    Parameters.siteName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SpringbootappsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.siteName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
