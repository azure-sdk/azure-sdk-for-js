/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { Summaries } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { OffAzureSpringBoot } from "../offAzureSpringBoot";
import {
  Summary,
  SummariesListBySiteNextOptionalParams,
  SummariesListBySiteOptionalParams,
  SummariesListBySiteResponse,
  SummariesGetOptionalParams,
  SummariesGetResponse,
  SummariesCreateOrUpdateOptionalParams,
  SummariesCreateOrUpdateResponse,
  SummariesDeleteOptionalParams,
  SummariesResourcePatch,
  SummariesUpdateOptionalParams,
  SummariesUpdateResponse,
  SummariesListBySiteNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Summaries operations. */
export class SummariesImpl implements Summaries {
  private readonly client: OffAzureSpringBoot;

  /**
   * Initialize a new instance of the class Summaries class.
   * @param client Reference to the service client
   */
  constructor(client: OffAzureSpringBoot) {
    this.client = client;
  }

  /**
   * Lists the Summaries resource in springbootsites.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName The springbootsites name.
   * @param options The options parameters.
   */
  public listBySite(
    resourceGroupName: string,
    siteName: string,
    options?: SummariesListBySiteOptionalParams
  ): PagedAsyncIterableIterator<Summary> {
    const iter = this.listBySitePagingAll(resourceGroupName, siteName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySitePagingPage(
          resourceGroupName,
          siteName,
          options,
          settings
        );
      }
    };
  }

  private async *listBySitePagingPage(
    resourceGroupName: string,
    siteName: string,
    options?: SummariesListBySiteOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Summary[]> {
    let result: SummariesListBySiteResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySite(resourceGroupName, siteName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySiteNext(
        resourceGroupName,
        siteName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySitePagingAll(
    resourceGroupName: string,
    siteName: string,
    options?: SummariesListBySiteOptionalParams
  ): AsyncIterableIterator<Summary> {
    for await (const page of this.listBySitePagingPage(
      resourceGroupName,
      siteName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets the Summaries resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName The springbootsites name.
   * @param summaryName The name of summary
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    siteName: string,
    summaryName: string,
    options?: SummariesGetOptionalParams
  ): Promise<SummariesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, summaryName, options },
      getOperationSpec
    );
  }

  /**
   * Puts the Summaries resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName The springbootsites name.
   * @param summaryName The name of summary
   * @param body The Summary of discovered springbootsites
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    siteName: string,
    summaryName: string,
    body: Summary,
    options?: SummariesCreateOrUpdateOptionalParams
  ): Promise<SummariesCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, summaryName, body, options },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Deletes the Summaries resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName The springbootsites name.
   * @param summaryName The name of summary
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    siteName: string,
    summaryName: string,
    options?: SummariesDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, summaryName, options },
      deleteOperationSpec
    );
  }

  /**
   * Patch the Summaries resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName The springbootsites name.
   * @param summaryName The name of summary
   * @param body Patch payload.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    siteName: string,
    summaryName: string,
    body: SummariesResourcePatch,
    options?: SummariesUpdateOptionalParams
  ): Promise<SummariesUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, summaryName, body, options },
      updateOperationSpec
    );
  }

  /**
   * Lists the Summaries resource in springbootsites.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName The springbootsites name.
   * @param options The options parameters.
   */
  private _listBySite(
    resourceGroupName: string,
    siteName: string,
    options?: SummariesListBySiteOptionalParams
  ): Promise<SummariesListBySiteResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, options },
      listBySiteOperationSpec
    );
  }

  /**
   * ListBySiteNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param siteName The springbootsites name.
   * @param nextLink The nextLink from the previous successful call to the ListBySite method.
   * @param options The options parameters.
   */
  private _listBySiteNext(
    resourceGroupName: string,
    siteName: string,
    nextLink: string,
    options?: SummariesListBySiteNextOptionalParams
  ): Promise<SummariesListBySiteNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, siteName, nextLink, options },
      listBySiteNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzureSpringBoot/springbootsites/{siteName}/Summaries/{summaryName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Summary
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.summaryName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzureSpringBoot/springbootsites/{siteName}/Summaries/{summaryName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Summary
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.summaryName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzureSpringBoot/springbootsites/{siteName}/Summaries/{summaryName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.summaryName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzureSpringBoot/springbootsites/{siteName}/Summaries/{summaryName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Summary
    },
    201: {
      bodyMapper: Mappers.Summary
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.summaryName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listBySiteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzureSpringBoot/springbootsites/{siteName}/Summaries",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SummaryList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySiteNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SummaryList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
    Parameters.siteName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
