/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { LandingZoneRegistrationOperations } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { MicrosoftSovereign } from "../microsoftSovereign.js";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl.js";
import {
  LandingZoneRegistrationResource,
  LandingZoneRegistrationOperationsListBySubscriptionNextOptionalParams,
  LandingZoneRegistrationOperationsListBySubscriptionOptionalParams,
  LandingZoneRegistrationOperationsListBySubscriptionResponse,
  LandingZoneRegistrationOperationsListByResourceGroupNextOptionalParams,
  LandingZoneRegistrationOperationsListByResourceGroupOptionalParams,
  LandingZoneRegistrationOperationsListByResourceGroupResponse,
  LandingZoneRegistrationOperationsGetOptionalParams,
  LandingZoneRegistrationOperationsGetResponse,
  LandingZoneRegistrationOperationsCreateOptionalParams,
  LandingZoneRegistrationOperationsCreateResponse,
  LandingZoneRegistrationResourceUpdate,
  LandingZoneRegistrationOperationsUpdateOptionalParams,
  LandingZoneRegistrationOperationsUpdateResponse,
  LandingZoneRegistrationOperationsDeleteOptionalParams,
  LandingZoneRegistrationOperationsListBySubscriptionNextResponse,
  LandingZoneRegistrationOperationsListByResourceGroupNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing LandingZoneRegistrationOperations operations. */
export class LandingZoneRegistrationOperationsImpl
  implements LandingZoneRegistrationOperations
{
  private readonly client: MicrosoftSovereign;

  /**
   * Initialize a new instance of the class LandingZoneRegistrationOperations class.
   * @param client Reference to the service client
   */
  constructor(client: MicrosoftSovereign) {
    this.client = client;
  }

  /**
   * Lists the landing zone registrations within a subscription.
   * @param landingZoneAccountName The parent landing zone account
   * @param options The options parameters.
   */
  public listBySubscription(
    landingZoneAccountName: string,
    options?: LandingZoneRegistrationOperationsListBySubscriptionOptionalParams,
  ): PagedAsyncIterableIterator<LandingZoneRegistrationResource> {
    const iter = this.listBySubscriptionPagingAll(
      landingZoneAccountName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionPagingPage(
          landingZoneAccountName,
          options,
          settings,
        );
      },
    };
  }

  private async *listBySubscriptionPagingPage(
    landingZoneAccountName: string,
    options?: LandingZoneRegistrationOperationsListBySubscriptionOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<LandingZoneRegistrationResource[]> {
    let result: LandingZoneRegistrationOperationsListBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySubscription(landingZoneAccountName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySubscriptionNext(
        landingZoneAccountName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySubscriptionPagingAll(
    landingZoneAccountName: string,
    options?: LandingZoneRegistrationOperationsListBySubscriptionOptionalParams,
  ): AsyncIterableIterator<LandingZoneRegistrationResource> {
    for await (const page of this.listBySubscriptionPagingPage(
      landingZoneAccountName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Lists the landing zone registrations within a resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param landingZoneAccountName The parent landing zone account
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    landingZoneAccountName: string,
    options?: LandingZoneRegistrationOperationsListByResourceGroupOptionalParams,
  ): PagedAsyncIterableIterator<LandingZoneRegistrationResource> {
    const iter = this.listByResourceGroupPagingAll(
      resourceGroupName,
      landingZoneAccountName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByResourceGroupPagingPage(
          resourceGroupName,
          landingZoneAccountName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    landingZoneAccountName: string,
    options?: LandingZoneRegistrationOperationsListByResourceGroupOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<LandingZoneRegistrationResource[]> {
    let result: LandingZoneRegistrationOperationsListByResourceGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByResourceGroup(
        resourceGroupName,
        landingZoneAccountName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        landingZoneAccountName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    landingZoneAccountName: string,
    options?: LandingZoneRegistrationOperationsListByResourceGroupOptionalParams,
  ): AsyncIterableIterator<LandingZoneRegistrationResource> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      landingZoneAccountName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Lists the landing zone registrations within a subscription.
   * @param landingZoneAccountName The parent landing zone account
   * @param options The options parameters.
   */
  private _listBySubscription(
    landingZoneAccountName: string,
    options?: LandingZoneRegistrationOperationsListBySubscriptionOptionalParams,
  ): Promise<LandingZoneRegistrationOperationsListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { landingZoneAccountName, options },
      listBySubscriptionOperationSpec,
    );
  }

  /**
   * Lists the landing zone registrations within a resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param landingZoneAccountName The parent landing zone account
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    landingZoneAccountName: string,
    options?: LandingZoneRegistrationOperationsListByResourceGroupOptionalParams,
  ): Promise<LandingZoneRegistrationOperationsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, landingZoneAccountName, options },
      listByResourceGroupOperationSpec,
    );
  }

  /**
   * Gets the landing zone registration.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param landingZoneAccountName The parent landing zone account
   * @param landingZoneRegistrationName The name of the Landing Zone Registration resource.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    landingZoneAccountName: string,
    landingZoneRegistrationName: string,
    options?: LandingZoneRegistrationOperationsGetOptionalParams,
  ): Promise<LandingZoneRegistrationOperationsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        landingZoneAccountName,
        landingZoneRegistrationName,
        options,
      },
      getOperationSpec,
    );
  }

  /**
   * Creates the landing zone registration.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param landingZoneAccountName The parent landing zone account
   * @param landingZoneRegistrationName The name of the Landing Zone Registration resource.
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreate(
    resourceGroupName: string,
    landingZoneAccountName: string,
    landingZoneRegistrationName: string,
    resource: LandingZoneRegistrationResource,
    options?: LandingZoneRegistrationOperationsCreateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<LandingZoneRegistrationOperationsCreateResponse>,
      LandingZoneRegistrationOperationsCreateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<LandingZoneRegistrationOperationsCreateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        landingZoneAccountName,
        landingZoneRegistrationName,
        resource,
        options,
      },
      spec: createOperationSpec,
    });
    const poller = await createHttpPoller<
      LandingZoneRegistrationOperationsCreateResponse,
      OperationState<LandingZoneRegistrationOperationsCreateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Creates the landing zone registration.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param landingZoneAccountName The parent landing zone account
   * @param landingZoneRegistrationName The name of the Landing Zone Registration resource.
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreateAndWait(
    resourceGroupName: string,
    landingZoneAccountName: string,
    landingZoneRegistrationName: string,
    resource: LandingZoneRegistrationResource,
    options?: LandingZoneRegistrationOperationsCreateOptionalParams,
  ): Promise<LandingZoneRegistrationOperationsCreateResponse> {
    const poller = await this.beginCreate(
      resourceGroupName,
      landingZoneAccountName,
      landingZoneRegistrationName,
      resource,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Updates the landing zone registration.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param landingZoneAccountName The parent landing zone account
   * @param landingZoneRegistrationName The name of the Landing Zone Registration resource.
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    landingZoneAccountName: string,
    landingZoneRegistrationName: string,
    properties: LandingZoneRegistrationResourceUpdate,
    options?: LandingZoneRegistrationOperationsUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<LandingZoneRegistrationOperationsUpdateResponse>,
      LandingZoneRegistrationOperationsUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<LandingZoneRegistrationOperationsUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        landingZoneAccountName,
        landingZoneRegistrationName,
        properties,
        options,
      },
      spec: updateOperationSpec,
    });
    const poller = await createHttpPoller<
      LandingZoneRegistrationOperationsUpdateResponse,
      OperationState<LandingZoneRegistrationOperationsUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Updates the landing zone registration.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param landingZoneAccountName The parent landing zone account
   * @param landingZoneRegistrationName The name of the Landing Zone Registration resource.
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    landingZoneAccountName: string,
    landingZoneRegistrationName: string,
    properties: LandingZoneRegistrationResourceUpdate,
    options?: LandingZoneRegistrationOperationsUpdateOptionalParams,
  ): Promise<LandingZoneRegistrationOperationsUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      landingZoneAccountName,
      landingZoneRegistrationName,
      properties,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Deletes the landing zone registration.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param landingZoneAccountName The parent landing zone account
   * @param landingZoneRegistrationName The name of the Landing Zone Registration resource.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    landingZoneAccountName: string,
    landingZoneRegistrationName: string,
    options?: LandingZoneRegistrationOperationsDeleteOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        landingZoneAccountName,
        landingZoneRegistrationName,
        options,
      },
      deleteOperationSpec,
    );
  }

  /**
   * ListBySubscriptionNext
   * @param landingZoneAccountName The parent landing zone account
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    landingZoneAccountName: string,
    nextLink: string,
    options?: LandingZoneRegistrationOperationsListBySubscriptionNextOptionalParams,
  ): Promise<LandingZoneRegistrationOperationsListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { landingZoneAccountName, nextLink, options },
      listBySubscriptionNextOperationSpec,
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param landingZoneAccountName The parent landing zone account
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    landingZoneAccountName: string,
    nextLink: string,
    options?: LandingZoneRegistrationOperationsListByResourceGroupNextOptionalParams,
  ): Promise<LandingZoneRegistrationOperationsListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, landingZoneAccountName, nextLink, options },
      listByResourceGroupNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Sovereign/landingZoneAccounts/{landingZoneAccountName}/landingZoneRegistrations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LandingZoneRegistrationResourceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.landingZoneAccountName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sovereign/landingZoneAccounts/{landingZoneAccountName}/landingZoneRegistrations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LandingZoneRegistrationResourceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.landingZoneAccountName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sovereign/landingZoneAccounts/{landingZoneAccountName}/landingZoneRegistrations/{landingZoneRegistrationName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LandingZoneRegistrationResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.landingZoneAccountName,
    Parameters.landingZoneRegistrationName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sovereign/landingZoneAccounts/{landingZoneAccountName}/landingZoneRegistrations/{landingZoneRegistrationName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.LandingZoneRegistrationResource,
    },
    201: {
      bodyMapper: Mappers.LandingZoneRegistrationResource,
    },
    202: {
      bodyMapper: Mappers.LandingZoneRegistrationResource,
    },
    204: {
      bodyMapper: Mappers.LandingZoneRegistrationResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.resource2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.landingZoneAccountName,
    Parameters.landingZoneRegistrationName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sovereign/landingZoneAccounts/{landingZoneAccountName}/landingZoneRegistrations/{landingZoneRegistrationName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.LandingZoneRegistrationResource,
    },
    201: {
      bodyMapper: Mappers.LandingZoneRegistrationResource,
    },
    202: {
      bodyMapper: Mappers.LandingZoneRegistrationResource,
    },
    204: {
      bodyMapper: Mappers.LandingZoneRegistrationResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.properties2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.landingZoneAccountName,
    Parameters.landingZoneRegistrationName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sovereign/landingZoneAccounts/{landingZoneAccountName}/landingZoneRegistrations/{landingZoneRegistrationName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.landingZoneAccountName,
    Parameters.landingZoneRegistrationName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LandingZoneRegistrationResourceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.landingZoneAccountName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LandingZoneRegistrationResourceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.landingZoneAccountName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
