/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { LandingZoneConfigurationOperations } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { MicrosoftSovereign } from "../microsoftSovereign.js";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl.js";
import {
  LandingZoneConfigurationResource,
  LandingZoneConfigurationOperationsListBySubscriptionNextOptionalParams,
  LandingZoneConfigurationOperationsListBySubscriptionOptionalParams,
  LandingZoneConfigurationOperationsListBySubscriptionResponse,
  LandingZoneConfigurationOperationsListByResourceGroupNextOptionalParams,
  LandingZoneConfigurationOperationsListByResourceGroupOptionalParams,
  LandingZoneConfigurationOperationsListByResourceGroupResponse,
  LandingZoneConfigurationOperationsGetOptionalParams,
  LandingZoneConfigurationOperationsGetResponse,
  LandingZoneConfigurationOperationsCreateOptionalParams,
  LandingZoneConfigurationOperationsCreateResponse,
  LandingZoneConfigurationResourceUpdate,
  LandingZoneConfigurationOperationsUpdateOptionalParams,
  LandingZoneConfigurationOperationsUpdateResponse,
  LandingZoneConfigurationOperationsDeleteOptionalParams,
  LandingZoneConfigurationOperationsDeleteResponse,
  CreateLandingZoneConfigurationCopyRequest,
  LandingZoneConfigurationOperationsCreateCopyOptionalParams,
  LandingZoneConfigurationOperationsCreateCopyResponse,
  GenerateLandingZoneRequest,
  LandingZoneConfigurationOperationsGenerateLandingZoneOptionalParams,
  LandingZoneConfigurationOperationsGenerateLandingZoneResponse,
  UpdateAuthoringStatusRequest,
  LandingZoneConfigurationOperationsUpdateAuthoringStatusOptionalParams,
  LandingZoneConfigurationOperationsUpdateAuthoringStatusResponse,
  LandingZoneConfigurationOperationsListBySubscriptionNextResponse,
  LandingZoneConfigurationOperationsListByResourceGroupNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing LandingZoneConfigurationOperations operations. */
export class LandingZoneConfigurationOperationsImpl
  implements LandingZoneConfigurationOperations
{
  private readonly client: MicrosoftSovereign;

  /**
   * Initialize a new instance of the class LandingZoneConfigurationOperations class.
   * @param client Reference to the service client
   */
  constructor(client: MicrosoftSovereign) {
    this.client = client;
  }

  /**
   * Lists the landing zone configurations within a subscription.
   * @param landingZoneAccountName The parent landing zone account
   * @param options The options parameters.
   */
  public listBySubscription(
    landingZoneAccountName: string,
    options?: LandingZoneConfigurationOperationsListBySubscriptionOptionalParams,
  ): PagedAsyncIterableIterator<LandingZoneConfigurationResource> {
    const iter = this.listBySubscriptionPagingAll(
      landingZoneAccountName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionPagingPage(
          landingZoneAccountName,
          options,
          settings,
        );
      },
    };
  }

  private async *listBySubscriptionPagingPage(
    landingZoneAccountName: string,
    options?: LandingZoneConfigurationOperationsListBySubscriptionOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<LandingZoneConfigurationResource[]> {
    let result: LandingZoneConfigurationOperationsListBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySubscription(landingZoneAccountName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySubscriptionNext(
        landingZoneAccountName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySubscriptionPagingAll(
    landingZoneAccountName: string,
    options?: LandingZoneConfigurationOperationsListBySubscriptionOptionalParams,
  ): AsyncIterableIterator<LandingZoneConfigurationResource> {
    for await (const page of this.listBySubscriptionPagingPage(
      landingZoneAccountName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Lists the landing zone configurations within a resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param landingZoneAccountName The parent landing zone account
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    landingZoneAccountName: string,
    options?: LandingZoneConfigurationOperationsListByResourceGroupOptionalParams,
  ): PagedAsyncIterableIterator<LandingZoneConfigurationResource> {
    const iter = this.listByResourceGroupPagingAll(
      resourceGroupName,
      landingZoneAccountName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByResourceGroupPagingPage(
          resourceGroupName,
          landingZoneAccountName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    landingZoneAccountName: string,
    options?: LandingZoneConfigurationOperationsListByResourceGroupOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<LandingZoneConfigurationResource[]> {
    let result: LandingZoneConfigurationOperationsListByResourceGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByResourceGroup(
        resourceGroupName,
        landingZoneAccountName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        landingZoneAccountName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    landingZoneAccountName: string,
    options?: LandingZoneConfigurationOperationsListByResourceGroupOptionalParams,
  ): AsyncIterableIterator<LandingZoneConfigurationResource> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      landingZoneAccountName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Lists the landing zone configurations within a subscription.
   * @param landingZoneAccountName The parent landing zone account
   * @param options The options parameters.
   */
  private _listBySubscription(
    landingZoneAccountName: string,
    options?: LandingZoneConfigurationOperationsListBySubscriptionOptionalParams,
  ): Promise<LandingZoneConfigurationOperationsListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { landingZoneAccountName, options },
      listBySubscriptionOperationSpec,
    );
  }

  /**
   * Lists the landing zone configurations within a resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param landingZoneAccountName The parent landing zone account
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    landingZoneAccountName: string,
    options?: LandingZoneConfigurationOperationsListByResourceGroupOptionalParams,
  ): Promise<LandingZoneConfigurationOperationsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, landingZoneAccountName, options },
      listByResourceGroupOperationSpec,
    );
  }

  /**
   * Gets the landing zone configuration.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param landingZoneAccountName The parent landing zone account
   * @param landingZoneConfigurationName The landing zone configuration name
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    landingZoneAccountName: string,
    landingZoneConfigurationName: string,
    options?: LandingZoneConfigurationOperationsGetOptionalParams,
  ): Promise<LandingZoneConfigurationOperationsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        landingZoneAccountName,
        landingZoneConfigurationName,
        options,
      },
      getOperationSpec,
    );
  }

  /**
   * Creates the landing zone configuration.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param landingZoneAccountName The parent landing zone account
   * @param landingZoneConfigurationName The landing zone configuration name
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreate(
    resourceGroupName: string,
    landingZoneAccountName: string,
    landingZoneConfigurationName: string,
    resource: LandingZoneConfigurationResource,
    options?: LandingZoneConfigurationOperationsCreateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<LandingZoneConfigurationOperationsCreateResponse>,
      LandingZoneConfigurationOperationsCreateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<LandingZoneConfigurationOperationsCreateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        landingZoneAccountName,
        landingZoneConfigurationName,
        resource,
        options,
      },
      spec: createOperationSpec,
    });
    const poller = await createHttpPoller<
      LandingZoneConfigurationOperationsCreateResponse,
      OperationState<LandingZoneConfigurationOperationsCreateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Creates the landing zone configuration.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param landingZoneAccountName The parent landing zone account
   * @param landingZoneConfigurationName The landing zone configuration name
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreateAndWait(
    resourceGroupName: string,
    landingZoneAccountName: string,
    landingZoneConfigurationName: string,
    resource: LandingZoneConfigurationResource,
    options?: LandingZoneConfigurationOperationsCreateOptionalParams,
  ): Promise<LandingZoneConfigurationOperationsCreateResponse> {
    const poller = await this.beginCreate(
      resourceGroupName,
      landingZoneAccountName,
      landingZoneConfigurationName,
      resource,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Updates the landing zone configuration.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param landingZoneAccountName The parent landing zone account
   * @param landingZoneConfigurationName The landing zone configuration name
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    landingZoneAccountName: string,
    landingZoneConfigurationName: string,
    properties: LandingZoneConfigurationResourceUpdate,
    options?: LandingZoneConfigurationOperationsUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<LandingZoneConfigurationOperationsUpdateResponse>,
      LandingZoneConfigurationOperationsUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<LandingZoneConfigurationOperationsUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        landingZoneAccountName,
        landingZoneConfigurationName,
        properties,
        options,
      },
      spec: updateOperationSpec,
    });
    const poller = await createHttpPoller<
      LandingZoneConfigurationOperationsUpdateResponse,
      OperationState<LandingZoneConfigurationOperationsUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Updates the landing zone configuration.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param landingZoneAccountName The parent landing zone account
   * @param landingZoneConfigurationName The landing zone configuration name
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    landingZoneAccountName: string,
    landingZoneConfigurationName: string,
    properties: LandingZoneConfigurationResourceUpdate,
    options?: LandingZoneConfigurationOperationsUpdateOptionalParams,
  ): Promise<LandingZoneConfigurationOperationsUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      landingZoneAccountName,
      landingZoneConfigurationName,
      properties,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Deletes the landing zone configuration.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param landingZoneAccountName The parent landing zone account
   * @param landingZoneConfigurationName The landing zone configuration name
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    landingZoneAccountName: string,
    landingZoneConfigurationName: string,
    options?: LandingZoneConfigurationOperationsDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<LandingZoneConfigurationOperationsDeleteResponse>,
      LandingZoneConfigurationOperationsDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<LandingZoneConfigurationOperationsDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        landingZoneAccountName,
        landingZoneConfigurationName,
        options,
      },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<
      LandingZoneConfigurationOperationsDeleteResponse,
      OperationState<LandingZoneConfigurationOperationsDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Deletes the landing zone configuration.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param landingZoneAccountName The parent landing zone account
   * @param landingZoneConfigurationName The landing zone configuration name
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    landingZoneAccountName: string,
    landingZoneConfigurationName: string,
    options?: LandingZoneConfigurationOperationsDeleteOptionalParams,
  ): Promise<LandingZoneConfigurationOperationsDeleteResponse> {
    const poller = await this.beginDelete(
      resourceGroupName,
      landingZoneAccountName,
      landingZoneConfigurationName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Provides a mechanism to create a copy of the landing zone configuration.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param landingZoneAccountName The parent landing zone account
   * @param landingZoneConfigurationName The landing zone configuration name
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginCreateCopy(
    resourceGroupName: string,
    landingZoneAccountName: string,
    landingZoneConfigurationName: string,
    body: CreateLandingZoneConfigurationCopyRequest,
    options?: LandingZoneConfigurationOperationsCreateCopyOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<LandingZoneConfigurationOperationsCreateCopyResponse>,
      LandingZoneConfigurationOperationsCreateCopyResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<LandingZoneConfigurationOperationsCreateCopyResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        landingZoneAccountName,
        landingZoneConfigurationName,
        body,
        options,
      },
      spec: createCopyOperationSpec,
    });
    const poller = await createHttpPoller<
      LandingZoneConfigurationOperationsCreateCopyResponse,
      OperationState<LandingZoneConfigurationOperationsCreateCopyResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Provides a mechanism to create a copy of the landing zone configuration.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param landingZoneAccountName The parent landing zone account
   * @param landingZoneConfigurationName The landing zone configuration name
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginCreateCopyAndWait(
    resourceGroupName: string,
    landingZoneAccountName: string,
    landingZoneConfigurationName: string,
    body: CreateLandingZoneConfigurationCopyRequest,
    options?: LandingZoneConfigurationOperationsCreateCopyOptionalParams,
  ): Promise<LandingZoneConfigurationOperationsCreateCopyResponse> {
    const poller = await this.beginCreateCopy(
      resourceGroupName,
      landingZoneAccountName,
      landingZoneConfigurationName,
      body,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Generate the landing zone.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param landingZoneAccountName The parent landing zone account
   * @param landingZoneConfigurationName The landing zone configuration name
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginGenerateLandingZone(
    resourceGroupName: string,
    landingZoneAccountName: string,
    landingZoneConfigurationName: string,
    body: GenerateLandingZoneRequest,
    options?: LandingZoneConfigurationOperationsGenerateLandingZoneOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<LandingZoneConfigurationOperationsGenerateLandingZoneResponse>,
      LandingZoneConfigurationOperationsGenerateLandingZoneResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<LandingZoneConfigurationOperationsGenerateLandingZoneResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        landingZoneAccountName,
        landingZoneConfigurationName,
        body,
        options,
      },
      spec: generateLandingZoneOperationSpec,
    });
    const poller = await createHttpPoller<
      LandingZoneConfigurationOperationsGenerateLandingZoneResponse,
      OperationState<LandingZoneConfigurationOperationsGenerateLandingZoneResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Generate the landing zone.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param landingZoneAccountName The parent landing zone account
   * @param landingZoneConfigurationName The landing zone configuration name
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginGenerateLandingZoneAndWait(
    resourceGroupName: string,
    landingZoneAccountName: string,
    landingZoneConfigurationName: string,
    body: GenerateLandingZoneRequest,
    options?: LandingZoneConfigurationOperationsGenerateLandingZoneOptionalParams,
  ): Promise<LandingZoneConfigurationOperationsGenerateLandingZoneResponse> {
    const poller = await this.beginGenerateLandingZone(
      resourceGroupName,
      landingZoneAccountName,
      landingZoneConfigurationName,
      body,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Provides a mechanism to update the authoring status.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param landingZoneAccountName The parent landing zone account
   * @param landingZoneConfigurationName The landing zone configuration name
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginUpdateAuthoringStatus(
    resourceGroupName: string,
    landingZoneAccountName: string,
    landingZoneConfigurationName: string,
    body: UpdateAuthoringStatusRequest,
    options?: LandingZoneConfigurationOperationsUpdateAuthoringStatusOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<LandingZoneConfigurationOperationsUpdateAuthoringStatusResponse>,
      LandingZoneConfigurationOperationsUpdateAuthoringStatusResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<LandingZoneConfigurationOperationsUpdateAuthoringStatusResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        landingZoneAccountName,
        landingZoneConfigurationName,
        body,
        options,
      },
      spec: updateAuthoringStatusOperationSpec,
    });
    const poller = await createHttpPoller<
      LandingZoneConfigurationOperationsUpdateAuthoringStatusResponse,
      OperationState<LandingZoneConfigurationOperationsUpdateAuthoringStatusResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Provides a mechanism to update the authoring status.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param landingZoneAccountName The parent landing zone account
   * @param landingZoneConfigurationName The landing zone configuration name
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginUpdateAuthoringStatusAndWait(
    resourceGroupName: string,
    landingZoneAccountName: string,
    landingZoneConfigurationName: string,
    body: UpdateAuthoringStatusRequest,
    options?: LandingZoneConfigurationOperationsUpdateAuthoringStatusOptionalParams,
  ): Promise<LandingZoneConfigurationOperationsUpdateAuthoringStatusResponse> {
    const poller = await this.beginUpdateAuthoringStatus(
      resourceGroupName,
      landingZoneAccountName,
      landingZoneConfigurationName,
      body,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * ListBySubscriptionNext
   * @param landingZoneAccountName The parent landing zone account
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    landingZoneAccountName: string,
    nextLink: string,
    options?: LandingZoneConfigurationOperationsListBySubscriptionNextOptionalParams,
  ): Promise<LandingZoneConfigurationOperationsListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { landingZoneAccountName, nextLink, options },
      listBySubscriptionNextOperationSpec,
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param landingZoneAccountName The parent landing zone account
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    landingZoneAccountName: string,
    nextLink: string,
    options?: LandingZoneConfigurationOperationsListByResourceGroupNextOptionalParams,
  ): Promise<LandingZoneConfigurationOperationsListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, landingZoneAccountName, nextLink, options },
      listByResourceGroupNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Sovereign/landingZoneAccounts/{landingZoneAccountName}/landingZoneConfigurations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LandingZoneConfigurationResourceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.landingZoneAccountName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sovereign/landingZoneAccounts/{landingZoneAccountName}/landingZoneConfigurations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LandingZoneConfigurationResourceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.landingZoneAccountName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sovereign/landingZoneAccounts/{landingZoneAccountName}/landingZoneConfigurations/{landingZoneConfigurationName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LandingZoneConfigurationResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.landingZoneAccountName,
    Parameters.landingZoneConfigurationName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sovereign/landingZoneAccounts/{landingZoneAccountName}/landingZoneConfigurations/{landingZoneConfigurationName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.LandingZoneConfigurationResource,
    },
    201: {
      bodyMapper: Mappers.LandingZoneConfigurationResource,
    },
    202: {
      bodyMapper: Mappers.LandingZoneConfigurationResource,
    },
    204: {
      bodyMapper: Mappers.LandingZoneConfigurationResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.resource1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.landingZoneAccountName,
    Parameters.landingZoneConfigurationName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sovereign/landingZoneAccounts/{landingZoneAccountName}/landingZoneConfigurations/{landingZoneConfigurationName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.LandingZoneConfigurationResource,
    },
    201: {
      bodyMapper: Mappers.LandingZoneConfigurationResource,
    },
    202: {
      bodyMapper: Mappers.LandingZoneConfigurationResource,
    },
    204: {
      bodyMapper: Mappers.LandingZoneConfigurationResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.properties1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.landingZoneAccountName,
    Parameters.landingZoneConfigurationName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sovereign/landingZoneAccounts/{landingZoneAccountName}/landingZoneConfigurations/{landingZoneConfigurationName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.LandingZoneConfigurationOperationsDeleteHeaders,
    },
    201: {
      headersMapper: Mappers.LandingZoneConfigurationOperationsDeleteHeaders,
    },
    202: {
      headersMapper: Mappers.LandingZoneConfigurationOperationsDeleteHeaders,
    },
    204: {
      headersMapper: Mappers.LandingZoneConfigurationOperationsDeleteHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.landingZoneAccountName,
    Parameters.landingZoneConfigurationName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createCopyOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sovereign/landingZoneAccounts/{landingZoneAccountName}/landingZoneConfigurations/{landingZoneConfigurationName}/createCopy",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CreateLandingZoneConfigurationCopyResponse,
    },
    201: {
      bodyMapper: Mappers.CreateLandingZoneConfigurationCopyResponse,
    },
    202: {
      bodyMapper: Mappers.CreateLandingZoneConfigurationCopyResponse,
    },
    204: {
      bodyMapper: Mappers.CreateLandingZoneConfigurationCopyResponse,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.landingZoneAccountName,
    Parameters.landingZoneConfigurationName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const generateLandingZoneOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sovereign/landingZoneAccounts/{landingZoneAccountName}/landingZoneConfigurations/{landingZoneConfigurationName}/generateLandingZone",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.GenerateLandingZoneResponse,
    },
    201: {
      bodyMapper: Mappers.GenerateLandingZoneResponse,
    },
    202: {
      bodyMapper: Mappers.GenerateLandingZoneResponse,
    },
    204: {
      bodyMapper: Mappers.GenerateLandingZoneResponse,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.landingZoneAccountName,
    Parameters.landingZoneConfigurationName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const updateAuthoringStatusOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sovereign/landingZoneAccounts/{landingZoneAccountName}/landingZoneConfigurations/{landingZoneConfigurationName}/updateAuthoringStatus",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.UpdateAuthoringStatusResponse,
    },
    201: {
      bodyMapper: Mappers.UpdateAuthoringStatusResponse,
    },
    202: {
      bodyMapper: Mappers.UpdateAuthoringStatusResponse,
    },
    204: {
      bodyMapper: Mappers.UpdateAuthoringStatusResponse,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.landingZoneAccountName,
    Parameters.landingZoneConfigurationName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LandingZoneConfigurationResourceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.landingZoneAccountName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LandingZoneConfigurationResourceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.landingZoneAccountName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
