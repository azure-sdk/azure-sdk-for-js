/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { NetworkConfigurations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { HybridComputeManagementClient } from "../hybridComputeManagementClient";
import {
  NetworkConfigurationsGetOptionalParams,
  NetworkConfigurationsGetResponse,
  NetworkConfiguration,
  NetworkConfigurationsCreateOrUpdateOptionalParams,
  NetworkConfigurationsCreateOrUpdateResponse,
  NetworkConfigurationsUpdateOptionalParams,
  NetworkConfigurationsUpdateResponse
} from "../models";

/** Class containing NetworkConfigurations operations. */
export class NetworkConfigurationsImpl implements NetworkConfigurations {
  private readonly client: HybridComputeManagementClient;

  /**
   * Initialize a new instance of the class NetworkConfigurations class.
   * @param client Reference to the service client
   */
  constructor(client: HybridComputeManagementClient) {
    this.client = client;
  }

  /**
   * Returns a NetworkConfiguration for the target resource.
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   *                    connected.
   * @param options The options parameters.
   */
  get(
    resourceUri: string,
    options?: NetworkConfigurationsGetOptionalParams
  ): Promise<NetworkConfigurationsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceUri, options },
      getOperationSpec
    );
  }

  /**
   * Create or update the NetworkConfiguration of the target resource.
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   *                    connected.
   * @param parameters Network Configuration details
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceUri: string,
    parameters: NetworkConfiguration,
    options?: NetworkConfigurationsCreateOrUpdateOptionalParams
  ): Promise<NetworkConfigurationsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceUri, parameters, options },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Update the endpoint to the target resource.
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   *                    connected.
   * @param parameters Network Configuration details
   * @param options The options parameters.
   */
  update(
    resourceUri: string,
    parameters: NetworkConfiguration,
    options?: NetworkConfigurationsUpdateOptionalParams
  ): Promise<NetworkConfigurationsUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceUri, parameters, options },
      updateOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/{resourceUri}/providers/Microsoft.HybridCompute/networkConfigurations/current",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NetworkConfiguration
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.resourceUri],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/{resourceUri}/providers/Microsoft.HybridCompute/networkConfigurations/current",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.NetworkConfiguration
    },
    201: {
      bodyMapper: Mappers.NetworkConfiguration
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters8,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.resourceUri],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/{resourceUri}/providers/Microsoft.HybridCompute/networkConfigurations/current",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.NetworkConfiguration
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters8,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.resourceUri],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
