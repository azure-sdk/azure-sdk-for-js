/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { AccessPolicyAssignmentOperations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { RedisEnterpriseManagementClient } from "../redisEnterpriseManagementClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  AccessPolicyAssignment,
  AccessPolicyAssignmentCreateOptionalParams,
  AccessPolicyAssignmentCreateResponse,
  AccessPolicyAssignmentGetOptionalParams,
  AccessPolicyAssignmentGetResponse,
  AccessPolicyAssignmentDeleteOptionalParams,
} from "../models";

/** Class containing AccessPolicyAssignmentOperations operations. */
export class AccessPolicyAssignmentOperationsImpl
  implements AccessPolicyAssignmentOperations
{
  private readonly client: RedisEnterpriseManagementClient;

  /**
   * Initialize a new instance of the class AccessPolicyAssignmentOperations class.
   * @param client Reference to the service client
   */
  constructor(client: RedisEnterpriseManagementClient) {
    this.client = client;
  }

  /**
   * Creates access policy assignment for database
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the Redis Enterprise cluster.
   * @param databaseName The name of the Redis Enterprise database.
   * @param accessPolicyAssignmentName The name of the Redis Enterprise database access policy
   *                                   assignment.
   * @param parameters Parameters supplied to the create access policy assignment for database.
   * @param options The options parameters.
   */
  async beginCreate(
    resourceGroupName: string,
    clusterName: string,
    databaseName: string,
    accessPolicyAssignmentName: string,
    parameters: AccessPolicyAssignment,
    options?: AccessPolicyAssignmentCreateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<AccessPolicyAssignmentCreateResponse>,
      AccessPolicyAssignmentCreateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<AccessPolicyAssignmentCreateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        clusterName,
        databaseName,
        accessPolicyAssignmentName,
        parameters,
        options,
      },
      spec: createOperationSpec,
    });
    const poller = await createHttpPoller<
      AccessPolicyAssignmentCreateResponse,
      OperationState<AccessPolicyAssignmentCreateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "original-uri",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Creates access policy assignment for database
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the Redis Enterprise cluster.
   * @param databaseName The name of the Redis Enterprise database.
   * @param accessPolicyAssignmentName The name of the Redis Enterprise database access policy
   *                                   assignment.
   * @param parameters Parameters supplied to the create access policy assignment for database.
   * @param options The options parameters.
   */
  async beginCreateAndWait(
    resourceGroupName: string,
    clusterName: string,
    databaseName: string,
    accessPolicyAssignmentName: string,
    parameters: AccessPolicyAssignment,
    options?: AccessPolicyAssignmentCreateOptionalParams,
  ): Promise<AccessPolicyAssignmentCreateResponse> {
    const poller = await this.beginCreate(
      resourceGroupName,
      clusterName,
      databaseName,
      accessPolicyAssignmentName,
      parameters,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Gets information about access policy assignment for database.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the Redis Enterprise cluster.
   * @param databaseName The name of the Redis Enterprise database.
   * @param accessPolicyAssignmentName The name of the Redis Enterprise database access policy
   *                                   assignment.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    clusterName: string,
    databaseName: string,
    accessPolicyAssignmentName: string,
    options?: AccessPolicyAssignmentGetOptionalParams,
  ): Promise<AccessPolicyAssignmentGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        clusterName,
        databaseName,
        accessPolicyAssignmentName,
        options,
      },
      getOperationSpec,
    );
  }

  /**
   * Deletes a single access policy assignment.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the Redis Enterprise cluster.
   * @param databaseName The name of the Redis Enterprise database.
   * @param accessPolicyAssignmentName The name of the Redis Enterprise database access policy
   *                                   assignment.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    clusterName: string,
    databaseName: string,
    accessPolicyAssignmentName: string,
    options?: AccessPolicyAssignmentDeleteOptionalParams,
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        clusterName,
        databaseName,
        accessPolicyAssignmentName,
        options,
      },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Deletes a single access policy assignment.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the Redis Enterprise cluster.
   * @param databaseName The name of the Redis Enterprise database.
   * @param accessPolicyAssignmentName The name of the Redis Enterprise database access policy
   *                                   assignment.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    clusterName: string,
    databaseName: string,
    accessPolicyAssignmentName: string,
    options?: AccessPolicyAssignmentDeleteOptionalParams,
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      clusterName,
      databaseName,
      accessPolicyAssignmentName,
      options,
    );
    return poller.pollUntilDone();
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redisEnterprise/{clusterName}/databases/{databaseName}/accessPolicyAssignments/{accessPolicyAssignmentName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.AccessPolicyAssignment,
    },
    201: {
      bodyMapper: Mappers.AccessPolicyAssignment,
    },
    202: {
      bodyMapper: Mappers.AccessPolicyAssignment,
    },
    204: {
      bodyMapper: Mappers.AccessPolicyAssignment,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.parameters11,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterName,
    Parameters.databaseName,
    Parameters.accessPolicyAssignmentName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redisEnterprise/{clusterName}/databases/{databaseName}/accessPolicyAssignments/{accessPolicyAssignmentName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AccessPolicyAssignment,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterName,
    Parameters.databaseName,
    Parameters.accessPolicyAssignmentName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redisEnterprise/{clusterName}/databases/{databaseName}/accessPolicyAssignments/{accessPolicyAssignmentName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterName,
    Parameters.databaseName,
    Parameters.accessPolicyAssignmentName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
