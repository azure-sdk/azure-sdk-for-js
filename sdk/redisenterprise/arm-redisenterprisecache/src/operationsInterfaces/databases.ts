/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  Database,
  DatabasesListByClusterOptionalParams,
  DatabasesGetOptionalParams,
  DatabasesGetResponse,
  DatabaseCreateOrUpdate,
  DatabasesCreateOptionalParams,
  DatabasesCreateResponse,
  DatabasesUpdateOptionalParams,
  DatabasesUpdateResponse,
  DatabasesDeleteOptionalParams,
  ExportParameters,
  DatabasesExportRdbOptionalParams,
  ForceUnlinkParameters,
  DatabasesForceUnlinkOptionalParams,
  FlushParameters,
  DatabasesFushOptionalParams,
  ImportParameters,
  DatabasesImportRdbOptionalParams,
  DatabasesListKeysOptionalParams,
  DatabasesListKeysResponse,
  RegenerateKeyParameters,
  DatabasesRegenerateKeyOptionalParams,
  DatabasesRegenerateKeyResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Databases. */
export interface Databases {
  /**
   * Lists all databases in a RedisEnterprise cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName Name of cluster
   * @param options The options parameters.
   */
  listByCluster(
    resourceGroupName: string,
    clusterName: string,
    options?: DatabasesListByClusterOptionalParams
  ): PagedAsyncIterableIterator<Database>;
  /**
   * Gets information about a database in a RedisEnterprise cluster
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName Name of cluster
   * @param databaseName Name of database
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    clusterName: string,
    databaseName: string,
    options?: DatabasesGetOptionalParams
  ): Promise<DatabasesGetResponse>;
  /**
   * Creates a database
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName Name of cluster
   * @param databaseName Name of database
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  beginCreate(
    resourceGroupName: string,
    clusterName: string,
    databaseName: string,
    resource: DatabaseCreateOrUpdate,
    options?: DatabasesCreateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<DatabasesCreateResponse>,
      DatabasesCreateResponse
    >
  >;
  /**
   * Creates a database
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName Name of cluster
   * @param databaseName Name of database
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  beginCreateAndWait(
    resourceGroupName: string,
    clusterName: string,
    databaseName: string,
    resource: DatabaseCreateOrUpdate,
    options?: DatabasesCreateOptionalParams
  ): Promise<DatabasesCreateResponse>;
  /**
   * Updates a database
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName Name of cluster
   * @param databaseName Name of database
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    clusterName: string,
    databaseName: string,
    properties: Record<string, unknown>,
    options?: DatabasesUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<DatabasesUpdateResponse>,
      DatabasesUpdateResponse
    >
  >;
  /**
   * Updates a database
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName Name of cluster
   * @param databaseName Name of database
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    clusterName: string,
    databaseName: string,
    properties: Record<string, unknown>,
    options?: DatabasesUpdateOptionalParams
  ): Promise<DatabasesUpdateResponse>;
  /**
   * Deletes a database
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName Name of cluster
   * @param databaseName Name of database
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    clusterName: string,
    databaseName: string,
    options?: DatabasesDeleteOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Deletes a database
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName Name of cluster
   * @param databaseName Name of database
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    clusterName: string,
    databaseName: string,
    options?: DatabasesDeleteOptionalParams
  ): Promise<void>;
  /**
   * Exports RDB file(s)
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName Name of cluster
   * @param databaseName Name of database
   * @param body The content of the action request
   * @param options The options parameters.
   */
  beginExportRdb(
    resourceGroupName: string,
    clusterName: string,
    databaseName: string,
    body: ExportParameters,
    options?: DatabasesExportRdbOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Exports RDB file(s)
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName Name of cluster
   * @param databaseName Name of database
   * @param body The content of the action request
   * @param options The options parameters.
   */
  beginExportRdbAndWait(
    resourceGroupName: string,
    clusterName: string,
    databaseName: string,
    body: ExportParameters,
    options?: DatabasesExportRdbOptionalParams
  ): Promise<void>;
  /**
   * Forcibly unlinks one or more databases from a replication group
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName Name of cluster
   * @param databaseName Name of database
   * @param body The content of the action request
   * @param options The options parameters.
   */
  beginForceUnlink(
    resourceGroupName: string,
    clusterName: string,
    databaseName: string,
    body: ForceUnlinkParameters,
    options?: DatabasesForceUnlinkOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Forcibly unlinks one or more databases from a replication group
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName Name of cluster
   * @param databaseName Name of database
   * @param body The content of the action request
   * @param options The options parameters.
   */
  beginForceUnlinkAndWait(
    resourceGroupName: string,
    clusterName: string,
    databaseName: string,
    body: ForceUnlinkParameters,
    options?: DatabasesForceUnlinkOptionalParams
  ): Promise<void>;
  /**
   * Forcibly flushes data from all databases in a replication group
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName Name of cluster
   * @param databaseName Name of database
   * @param body The content of the action request
   * @param options The options parameters.
   */
  beginFush(
    resourceGroupName: string,
    clusterName: string,
    databaseName: string,
    body: FlushParameters,
    options?: DatabasesFushOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Forcibly flushes data from all databases in a replication group
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName Name of cluster
   * @param databaseName Name of database
   * @param body The content of the action request
   * @param options The options parameters.
   */
  beginFushAndWait(
    resourceGroupName: string,
    clusterName: string,
    databaseName: string,
    body: FlushParameters,
    options?: DatabasesFushOptionalParams
  ): Promise<void>;
  /**
   * Imports RDB file(s)
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName Name of cluster
   * @param databaseName Name of database
   * @param body The content of the action request
   * @param options The options parameters.
   */
  beginImportRdb(
    resourceGroupName: string,
    clusterName: string,
    databaseName: string,
    body: ImportParameters,
    options?: DatabasesImportRdbOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Imports RDB file(s)
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName Name of cluster
   * @param databaseName Name of database
   * @param body The content of the action request
   * @param options The options parameters.
   */
  beginImportRdbAndWait(
    resourceGroupName: string,
    clusterName: string,
    databaseName: string,
    body: ImportParameters,
    options?: DatabasesImportRdbOptionalParams
  ): Promise<void>;
  /**
   * Retrieves the access keys for the RedisEnterprise database
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName Name of cluster
   * @param databaseName Name of database
   * @param options The options parameters.
   */
  listKeys(
    resourceGroupName: string,
    clusterName: string,
    databaseName: string,
    options?: DatabasesListKeysOptionalParams
  ): Promise<DatabasesListKeysResponse>;
  /**
   * Regenerates an access key for the RedisEnterprise database
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName Name of cluster
   * @param databaseName Name of database
   * @param body The content of the action request
   * @param options The options parameters.
   */
  beginRegenerateKey(
    resourceGroupName: string,
    clusterName: string,
    databaseName: string,
    body: RegenerateKeyParameters,
    options?: DatabasesRegenerateKeyOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<DatabasesRegenerateKeyResponse>,
      DatabasesRegenerateKeyResponse
    >
  >;
  /**
   * Regenerates an access key for the RedisEnterprise database
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName Name of cluster
   * @param databaseName Name of database
   * @param body The content of the action request
   * @param options The options parameters.
   */
  beginRegenerateKeyAndWait(
    resourceGroupName: string,
    clusterName: string,
    databaseName: string,
    body: RegenerateKeyParameters,
    options?: DatabasesRegenerateKeyOptionalParams
  ): Promise<DatabasesRegenerateKeyResponse>;
}
