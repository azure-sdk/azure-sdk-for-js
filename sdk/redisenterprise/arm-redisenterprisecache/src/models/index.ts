/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of results. */
export interface OperationListResult {
  /**
   * List of operations supported by the resource provider
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Operation[];
  /**
   * URL to get the next set of operation list results (if there are any).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Details of a REST API operation, returned from the Resource Provider Operations API */
export interface Operation {
  /**
   * The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for ARM/control-plane operations.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isDataAction?: boolean;
  /** Localized display information for this particular operation. */
  display?: OperationDisplay;
  /**
   * The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is "user,system"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly origin?: Origin;
  /**
   * Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly actionType?: ActionType;
}

/** Localized display information for this particular operation. */
export interface OperationDisplay {
  /**
   * The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft Compute".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provider?: string;
  /**
   * The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job Schedule Collections".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resource?: string;
  /**
   * The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operation?: string;
  /**
   * The short, localized friendly description of the operation; suitable for tool tips and detailed views.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export interface ErrorResponse {
  /** The error object. */
  error?: ErrorDetail;
}

/** The error detail. */
export interface ErrorDetail {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDetail[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export interface Resource {
  /**
   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Azure Resource Manager metadata containing createdBy and modifiedBy information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The timestamp of resource last modification (UTC) */
  lastModifiedAt?: Date;
}

/** The response of a Cluster list operation. */
export interface ClusterListResult {
  /** The Cluster items on this page */
  value: Cluster[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** SKU parameters supplied to the create RedisEnterprise operation */
export interface Sku {
  /** The type of RedisEnterprise cluster to deploy. Possible values: (Enterprise_E10, EnterpriseFlash_F300 etc.) */
  name: SkuName;
  /** The size of the RedisEnterprise cluster. Defaults to 2 or 3 depending on SKU. Valid values are (2, 4, 6, ...) for Enterprise SKUs and (3, 9, 15, ...) for Flash SKUs. */
  capacity: number;
}

/** The type used for update operations of the Cluster. */
export interface ClusterUpdate {
  /** The SKU to create, which affects price, performance, and features. */
  sku?: Sku;
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The SKU to create, which affects price, performance, and features. */
  skuPropertiesSku?: Sku;
  /** Resource tags. */
  tagsPropertiesTags?: { [propertyName: string]: string };
}

/** The response of a Database list operation. */
export interface DatabaseListResult {
  /** The Database items on this page */
  value: Database[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** Export request. Parameters for a Redis Enterprise export operation. */
export interface ExportParameters {
  /**
   * SAS URI for the target container directory to export from
   * This value contains a credential. Consider obscuring before showing to users
   */
  sasUris: string;
}

/** Parameters for a Redis Enterprise Active Geo Replication Force Unlink operation. */
export interface ForceUnlinkParameters {
  /** The resource IDs of the database resources to be unlinked */
  ids: string[];
}

/** Import request. Parameters for a Redis Enterprise import operation */
export interface ImportParameters {
  /** SAS URIs for the target blobs to import from */
  sasUris: string[];
}

/** Redis Enterprise access keys response */
export interface AccessKeys {
  /**
   * The current primary key that clients can use to authenticate
   * This value contains a credential. Consider obscuring before showing to users
   */
  primaryKey: string;
  /**
   * The current secondary key that clients can use to authenticate
   * This value contains a credential. Consider obscuring before showing to users
   */
  secondaryKey: string;
}

/** Regenerate access keys request. Specifies which access keys to reset to a new random value. */
export interface RegenerateKeyParameters {
  /** Which access key to regenerate. */
  keyType: KeyType;
}

/** The response of a PrivateEndpointConnection list operation. */
export interface PrivateEndpointConnectionListResult {
  /** The PrivateEndpointConnection items on this page */
  value: PrivateEndpointConnection[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** The private endpoint resource. */
export interface PrivateEndpoint {
  /** The ARM resource id of the private endpoint resource */
  id?: string;
}

/** A collection of information about the state of the connection between service consumer and provider. */
export interface PrivateLinkServiceConnectionState {
  /** A message indicating if changes on the service provider require any updates on the consumer. */
  actionsRequired: string;
  /** The reason for approval/rejection of the connection. */
  description: string;
  /** Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service. */
  status: PrivateEndpointServiceConnectionStatus;
}

/** The response of a PrivateLink list operation. */
export interface PrivateLinkListResult {
  /** The PrivateLink items on this page */
  value: PrivateLink[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export interface ProxyResource extends Resource {}

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export interface TrackedResource extends Resource {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The geo-location where the resource lives */
  location: string;
}

/** Proxy resource for selecting azure location */
export interface OperationStatus extends ProxyResource {
  /** The resource-specific properties for this resource. */
  properties?: Record<string, unknown>;
}

/** Describes a Database on a RedisEnterprise cluster */
export interface Database extends ProxyResource {
  /** Specifies whether redis clients can connect using TLS-encrypted or plaintext redis protocols. Default is TLS-encrypted. */
  clientProtocol?: ClientProtocol;
  /** Port number for the database to listen on. E.g. 10000. */
  port?: number;
  /**
   * Provisioning state of the database
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** Describes a private endpoint connection to a RedisEnterprise cluster */
export interface PrivateEndpointConnection extends ProxyResource {
  /** The private endpoint that is connected */
  privateEndpoint?: PrivateEndpoint;
  /** A collection of information about the state of the connection between service consumer and provider. */
  privateLinkServiceConnectionState?: PrivateLinkServiceConnectionState;
  /**
   * The provisioning state of the private endpoint connection resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: PrivateEndpointConnectionProvisioningState;
}

/** Information about private links */
export interface PrivateLink extends ProxyResource {
  /** The private link resource group id. */
  groupId?: string;
  /** The private link resource required member names. */
  requiredMembers?: string[];
  /** The private link resource Private link DNS zone name. */
  requiredZoneNames?: string[];
}

/** Describes the RedisEnterprise cluster */
export interface Cluster extends TrackedResource {
  /** The SKU to create, which affects price, performance, and features. */
  sku: Sku;
  /**
   * DNS name of the cluster endpoint
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly hostName?: string;
  /** The minimum TLS version for the cluster to support, e.g. the default of '1.2'. */
  minTlsVersion?: TlsVersion;
  /**
   * Current provisioning status of the last operation on the cluster.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Current resource status of the cluster.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resourceState?: ResourceState;
  /**
   * Version of redis the cluster supports, e.g. '6'
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly redisVersion?: string;
}

/** Defines headers for RedisEnterprise_create operation. */
export interface RedisEnterpriseCreateHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for RedisEnterprise_update operation. */
export interface RedisEnterpriseUpdateHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for RedisEnterprise_delete operation. */
export interface RedisEnterpriseDeleteHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Databases_create operation. */
export interface DatabasesCreateHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Databases_update operation. */
export interface DatabasesUpdateHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Databases_delete operation. */
export interface DatabasesDeleteHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Databases_exportRdb operation. */
export interface DatabasesExportRdbHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Databases_forceUnlink operation. */
export interface DatabasesForceUnlinkHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Databases_importRdb operation. */
export interface DatabasesImportRdbHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Databases_regenerateKey operation. */
export interface DatabasesRegenerateKeyHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for PrivateEndpointConnections_create operation. */
export interface PrivateEndpointConnectionsCreateHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for PrivateEndpointConnections_update operation. */
export interface PrivateEndpointConnectionsUpdateHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for PrivateEndpointConnections_delete operation. */
export interface PrivateEndpointConnectionsDeleteHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Known values of {@link Origin} that the service accepts. */
export enum KnownOrigin {
  /** User */
  User = "user",
  /** System */
  System = "system",
  /** UserSystem */
  UserSystem = "user,system"
}

/**
 * Defines values for Origin. \
 * {@link KnownOrigin} can be used interchangeably with Origin,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **user** \
 * **system** \
 * **user,system**
 */
export type Origin = string;

/** Known values of {@link ActionType} that the service accepts. */
export enum KnownActionType {
  /** Internal */
  Internal = "Internal"
}

/**
 * Defines values for ActionType. \
 * {@link KnownActionType} can be used interchangeably with ActionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Internal**
 */
export type ActionType = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  /** User */
  User = "User",
  /** Application */
  Application = "Application",
  /** ManagedIdentity */
  ManagedIdentity = "ManagedIdentity",
  /** Key */
  Key = "Key"
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link TlsVersion} that the service accepts. */
export enum KnownTlsVersion {
  /** OnePointZero */
  OnePointZero = "1.0",
  /** OnePointOne */
  OnePointOne = "1.1",
  /** OnePointTwo */
  OnePointTwo = "1.2"
}

/**
 * Defines values for TlsVersion. \
 * {@link KnownTlsVersion} can be used interchangeably with TlsVersion,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **1.0** \
 * **1.1** \
 * **1.2**
 */
export type TlsVersion = string;

/** Known values of {@link ProvisioningState} that the service accepts. */
export enum KnownProvisioningState {
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Canceled */
  Canceled = "Canceled",
  /** Provisioning */
  Provisioning = "Provisioning",
  /** Updating */
  Updating = "Updating",
  /** Deleting */
  Deleting = "Deleting",
  /** Accepted */
  Accepted = "Accepted"
}

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Provisioning** \
 * **Updating** \
 * **Deleting** \
 * **Accepted**
 */
export type ProvisioningState = string;

/** Known values of {@link ResourceState} that the service accepts. */
export enum KnownResourceState {
  /** Running */
  Running = "Running",
  /** Creating */
  Creating = "Creating",
  /** CreateFailed */
  CreateFailed = "CreateFailed",
  /** Updating */
  Updating = "Updating",
  /** UpdateFailed */
  UpdateFailed = "UpdateFailed",
  /** Deleting */
  Deleting = "Deleting",
  /** DeleteFailed */
  DeleteFailed = "DeleteFailed",
  /** Enabling */
  Enabling = "Enabling",
  /** EnableFailed */
  EnableFailed = "EnableFailed",
  /** Disabling */
  Disabling = "Disabling",
  /** DisableFailed */
  DisableFailed = "DisableFailed",
  /** Disabled */
  Disabled = "Disabled"
}

/**
 * Defines values for ResourceState. \
 * {@link KnownResourceState} can be used interchangeably with ResourceState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Running** \
 * **Creating** \
 * **CreateFailed** \
 * **Updating** \
 * **UpdateFailed** \
 * **Deleting** \
 * **DeleteFailed** \
 * **Enabling** \
 * **EnableFailed** \
 * **Disabling** \
 * **DisableFailed** \
 * **Disabled**
 */
export type ResourceState = string;

/** Known values of {@link SkuName} that the service accepts. */
export enum KnownSkuName {
  /** EnterpriseE10 */
  EnterpriseE10 = "Enterprise_E10",
  /** EnterpriseE20 */
  EnterpriseE20 = "Enterprise_E20",
  /** EnterpriseE50 */
  EnterpriseE50 = "Enterprise_E50",
  /** EnterpriseE100 */
  EnterpriseE100 = "Enterprise_E100",
  /** EnterpriseFlashF300 */
  EnterpriseFlashF300 = "EnterpriseFlash_F300",
  /** EnterpriseFlashF700 */
  EnterpriseFlashF700 = "EnterpriseFlash_F700",
  /** EnterpriseFlashF1500 */
  EnterpriseFlashF1500 = "EnterpriseFlash_F1500"
}

/**
 * Defines values for SkuName. \
 * {@link KnownSkuName} can be used interchangeably with SkuName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enterprise_E10** \
 * **Enterprise_E20** \
 * **Enterprise_E50** \
 * **Enterprise_E100** \
 * **EnterpriseFlash_F300** \
 * **EnterpriseFlash_F700** \
 * **EnterpriseFlash_F1500**
 */
export type SkuName = string;

/** Known values of {@link ClientProtocol} that the service accepts. */
export enum KnownClientProtocol {
  /** Encrypted */
  Encrypted = "Encrypted",
  /** Plaintext */
  Plaintext = "Plaintext"
}

/**
 * Defines values for ClientProtocol. \
 * {@link KnownClientProtocol} can be used interchangeably with ClientProtocol,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Encrypted** \
 * **Plaintext**
 */
export type ClientProtocol = string;

/** Known values of {@link KeyType} that the service accepts. */
export enum KnownKeyType {
  /** Primary */
  Primary = "Primary",
  /** Secondary */
  Secondary = "Secondary"
}

/**
 * Defines values for KeyType. \
 * {@link KnownKeyType} can be used interchangeably with KeyType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Primary** \
 * **Secondary**
 */
export type KeyType = string;

/** Known values of {@link PrivateEndpointServiceConnectionStatus} that the service accepts. */
export enum KnownPrivateEndpointServiceConnectionStatus {
  /** Approved */
  Approved = "Approved",
  /** Pending */
  Pending = "Pending",
  /** Rejected */
  Rejected = "Rejected"
}

/**
 * Defines values for PrivateEndpointServiceConnectionStatus. \
 * {@link KnownPrivateEndpointServiceConnectionStatus} can be used interchangeably with PrivateEndpointServiceConnectionStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Approved** \
 * **Pending** \
 * **Rejected**
 */
export type PrivateEndpointServiceConnectionStatus = string;

/** Known values of {@link PrivateEndpointConnectionProvisioningState} that the service accepts. */
export enum KnownPrivateEndpointConnectionProvisioningState {
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Canceled */
  Canceled = "Canceled",
  /** Creating */
  Creating = "Creating",
  /** Deleting */
  Deleting = "Deleting"
}

/**
 * Defines values for PrivateEndpointConnectionProvisioningState. \
 * {@link KnownPrivateEndpointConnectionProvisioningState} can be used interchangeably with PrivateEndpointConnectionProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Creating** \
 * **Deleting**
 */
export type PrivateEndpointConnectionProvisioningState = string;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationListResult;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export interface OperationsStatusGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type OperationsStatusGetResponse = OperationStatus;

/** Optional parameters. */
export interface RedisEnterpriseListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type RedisEnterpriseListBySubscriptionResponse = ClusterListResult;

/** Optional parameters. */
export interface RedisEnterpriseListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type RedisEnterpriseListByResourceGroupResponse = ClusterListResult;

/** Optional parameters. */
export interface RedisEnterpriseGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type RedisEnterpriseGetResponse = Cluster;

/** Optional parameters. */
export interface RedisEnterpriseCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type RedisEnterpriseCreateResponse = Cluster;

/** Optional parameters. */
export interface RedisEnterpriseUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type RedisEnterpriseUpdateResponse = Cluster;

/** Optional parameters. */
export interface RedisEnterpriseDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface RedisEnterpriseListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type RedisEnterpriseListBySubscriptionNextResponse = ClusterListResult;

/** Optional parameters. */
export interface RedisEnterpriseListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type RedisEnterpriseListByResourceGroupNextResponse = ClusterListResult;

/** Optional parameters. */
export interface DatabasesListByClusterOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByCluster operation. */
export type DatabasesListByClusterResponse = DatabaseListResult;

/** Optional parameters. */
export interface DatabasesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type DatabasesGetResponse = Database;

/** Optional parameters. */
export interface DatabasesCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type DatabasesCreateResponse = Database;

/** Optional parameters. */
export interface DatabasesUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type DatabasesUpdateResponse = Database;

/** Optional parameters. */
export interface DatabasesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DatabasesExportRdbOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DatabasesForceUnlinkOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DatabasesImportRdbOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DatabasesListKeysOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listKeys operation. */
export type DatabasesListKeysResponse = AccessKeys;

/** Optional parameters. */
export interface DatabasesRegenerateKeyOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the regenerateKey operation. */
export type DatabasesRegenerateKeyResponse = AccessKeys;

/** Optional parameters. */
export interface DatabasesListByClusterNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByClusterNext operation. */
export type DatabasesListByClusterNextResponse = DatabaseListResult;

/** Optional parameters. */
export interface PrivateEndpointConnectionsListByClusterOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByCluster operation. */
export type PrivateEndpointConnectionsListByClusterResponse = PrivateEndpointConnectionListResult;

/** Optional parameters. */
export interface PrivateEndpointConnectionsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type PrivateEndpointConnectionsGetResponse = PrivateEndpointConnection;

/** Optional parameters. */
export interface PrivateEndpointConnectionsCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type PrivateEndpointConnectionsCreateResponse = PrivateEndpointConnection;

/** Optional parameters. */
export interface PrivateEndpointConnectionsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type PrivateEndpointConnectionsUpdateResponse = PrivateEndpointConnection;

/** Optional parameters. */
export interface PrivateEndpointConnectionsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface PrivateEndpointConnectionsListByClusterNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByClusterNext operation. */
export type PrivateEndpointConnectionsListByClusterNextResponse = PrivateEndpointConnectionListResult;

/** Optional parameters. */
export interface PrivateLinkResourcesListByClusterOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByCluster operation. */
export type PrivateLinkResourcesListByClusterResponse = PrivateLinkListResult;

/** Optional parameters. */
export interface PrivateLinkResourcesListByClusterNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByClusterNext operation. */
export type PrivateLinkResourcesListByClusterNextResponse = PrivateLinkListResult;

/** Optional parameters. */
export interface RedisEnterpriseManagementClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
