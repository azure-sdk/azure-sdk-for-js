/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  LiftrBaseStorageFileSystemResource,
  FileSystemsListBySubscriptionOptionalParams,
  FileSystemsListByResourceGroupOptionalParams,
  FileSystemsGetOptionalParams,
  FileSystemsGetResponse,
  FileSystemsCreateOrUpdateOptionalParams,
  FileSystemsCreateOrUpdateResponse,
  LiftrBaseStorageFileSystemResourceUpdate,
  FileSystemsUpdateOptionalParams,
  FileSystemsUpdateResponse,
  FileSystemsDeleteOptionalParams,
  FileSystemsDeleteResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a FileSystems. */
export interface FileSystems {
  /**
   * List FileSystemResource resources by subscription ID
   * @param options The options parameters.
   */
  listBySubscription(
    options?: FileSystemsListBySubscriptionOptionalParams,
  ): PagedAsyncIterableIterator<LiftrBaseStorageFileSystemResource>;
  /**
   * List FileSystemResource resources by resource group
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: FileSystemsListByResourceGroupOptionalParams,
  ): PagedAsyncIterableIterator<LiftrBaseStorageFileSystemResource>;
  /**
   * Get a FileSystemResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param filesystemName Name of the filesystem resource
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    filesystemName: string,
    options?: FileSystemsGetOptionalParams,
  ): Promise<FileSystemsGetResponse>;
  /**
   * Create a FileSystemResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param filesystemName Name of the filesystem resource
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    filesystemName: string,
    resource: LiftrBaseStorageFileSystemResource,
    options?: FileSystemsCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<FileSystemsCreateOrUpdateResponse>,
      FileSystemsCreateOrUpdateResponse
    >
  >;
  /**
   * Create a FileSystemResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param filesystemName Name of the filesystem resource
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    filesystemName: string,
    resource: LiftrBaseStorageFileSystemResource,
    options?: FileSystemsCreateOrUpdateOptionalParams,
  ): Promise<FileSystemsCreateOrUpdateResponse>;
  /**
   * Update a FileSystemResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param filesystemName Name of the filesystem resource
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    filesystemName: string,
    properties: LiftrBaseStorageFileSystemResourceUpdate,
    options?: FileSystemsUpdateOptionalParams,
  ): Promise<FileSystemsUpdateResponse>;
  /**
   * Delete a FileSystemResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param filesystemName Name of the filesystem resource
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    filesystemName: string,
    options?: FileSystemsDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<FileSystemsDeleteResponse>,
      FileSystemsDeleteResponse
    >
  >;
  /**
   * Delete a FileSystemResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param filesystemName Name of the filesystem resource
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    filesystemName: string,
    options?: FileSystemsDeleteOptionalParams,
  ): Promise<FileSystemsDeleteResponse>;
}
