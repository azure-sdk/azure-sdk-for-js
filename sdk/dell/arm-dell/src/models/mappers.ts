/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      isDataAction: {
        serializedName: "isDataAction",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay",
        },
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      actionType: {
        serializedName: "actionType",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail",
        },
      },
    },
  },
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail",
            },
          },
        },
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo",
            },
          },
        },
      },
    },
  },
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } },
        },
      },
    },
  },
};

export const FileSystemResourceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FileSystemResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LiftrBaseStorageFileSystemResource",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const LiftrBaseStorageFileSystemResourceProperties: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "LiftrBaseStorageFileSystemResourceProperties",
      modelProperties: {
        capacity: {
          serializedName: "capacity",
          type: {
            name: "Composite",
            className: "LiftrBaseStorageCapacity",
          },
        },
        marketplace: {
          serializedName: "marketplace",
          type: {
            name: "Composite",
            className: "LiftrBaseMarketplaceDetails",
          },
        },
        provisioningState: {
          serializedName: "provisioningState",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        delegatedSubnetId: {
          serializedName: "delegatedSubnetId",
          required: true,
          type: {
            name: "String",
          },
        },
        delegatedSubnetCidr: {
          constraints: {
            Pattern: new RegExp("^([0-9]{1,3}\\.){3}[0-9]{1,3}\\/(16|24)$"),
          },
          serializedName: "delegatedSubnetCidr",
          required: true,
          type: {
            name: "String",
          },
        },
        user: {
          serializedName: "user",
          type: {
            name: "Composite",
            className: "LiftrBaseUserDetails",
          },
        },
        fileSystemId: {
          serializedName: "fileSystemId",
          type: {
            name: "String",
          },
        },
        smartConnectFqdn: {
          serializedName: "smartConnectFqdn",
          type: {
            name: "String",
          },
        },
        dellReferenceNumber: {
          serializedName: "dellReferenceNumber",
          required: true,
          type: {
            name: "String",
          },
        },
        encryption: {
          serializedName: "encryption",
          type: {
            name: "Composite",
            className: "LiftrBaseEncryptionProperties",
          },
        },
      },
    },
  };

export const LiftrBaseStorageCapacity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LiftrBaseStorageCapacity",
    modelProperties: {
      min: {
        serializedName: "min",
        type: {
          name: "String",
        },
      },
      max: {
        serializedName: "max",
        type: {
          name: "String",
        },
      },
      incremental: {
        serializedName: "incremental",
        type: {
          name: "String",
        },
      },
      current: {
        serializedName: "current",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const LiftrBaseMarketplaceDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LiftrBaseMarketplaceDetails",
    modelProperties: {
      marketplaceSubscriptionId: {
        serializedName: "marketplaceSubscriptionId",
        type: {
          name: "String",
        },
      },
      planId: {
        serializedName: "planId",
        required: true,
        type: {
          name: "String",
        },
      },
      offerId: {
        serializedName: "offerId",
        required: true,
        type: {
          name: "String",
        },
      },
      publisherId: {
        serializedName: "publisherId",
        type: {
          name: "String",
        },
      },
      privateOfferId: {
        serializedName: "privateOfferId",
        type: {
          name: "String",
        },
      },
      planName: {
        serializedName: "planName",
        required: true,
        type: {
          name: "String",
        },
      },
      marketplaceSubscriptionStatus: {
        serializedName: "marketplaceSubscriptionStatus",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      endDate: {
        serializedName: "endDate",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const LiftrBaseUserDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LiftrBaseUserDetails",
    modelProperties: {
      email: {
        serializedName: "email",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const LiftrBaseEncryptionProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LiftrBaseEncryptionProperties",
    modelProperties: {
      encryptionType: {
        serializedName: "encryptionType",
        required: true,
        type: {
          name: "String",
        },
      },
      keyUrl: {
        serializedName: "keyUrl",
        type: {
          name: "String",
        },
      },
      encryptionIdentityProperties: {
        serializedName: "encryptionIdentityProperties",
        type: {
          name: "Composite",
          className: "LiftrBaseEncryptionIdentityProperties",
        },
      },
    },
  },
};

export const LiftrBaseEncryptionIdentityProperties: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "LiftrBaseEncryptionIdentityProperties",
      modelProperties: {
        identityType: {
          serializedName: "identityType",
          type: {
            name: "String",
          },
        },
        identityResourceId: {
          serializedName: "identityResourceId",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const ManagedServiceIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedServiceIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "Uuid",
        },
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "Uuid",
        },
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String",
        },
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "UserAssignedIdentity" },
          },
        },
      },
    },
  },
};

export const UserAssignedIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserAssignedIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "Uuid",
        },
      },
      clientId: {
        serializedName: "clientId",
        readOnly: true,
        type: {
          name: "Uuid",
        },
      },
    },
  },
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData",
        },
      },
    },
  },
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String",
        },
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String",
        },
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime",
        },
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String",
        },
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String",
        },
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const LiftrBaseStorageFileSystemResourceUpdate: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "LiftrBaseStorageFileSystemResourceUpdate",
      modelProperties: {
        identity: {
          serializedName: "identity",
          type: {
            name: "Composite",
            className: "LiftrBaseStorageManagedServiceIdentityUpdate",
          },
        },
        tags: {
          serializedName: "tags",
          type: {
            name: "Dictionary",
            value: { type: { name: "String" } },
          },
        },
        properties: {
          serializedName: "properties",
          type: {
            name: "Composite",
            className: "LiftrBaseStorageFileSystemResourceUpdateProperties",
          },
        },
      },
    },
  };

export const LiftrBaseStorageManagedServiceIdentityUpdate: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "LiftrBaseStorageManagedServiceIdentityUpdate",
      modelProperties: {
        type: {
          serializedName: "type",
          type: {
            name: "String",
          },
        },
        userAssignedIdentities: {
          serializedName: "userAssignedIdentities",
          type: {
            name: "Dictionary",
            value: {
              type: {
                name: "Composite",
                className:
                  "Components1QrezbwSchemasLiftrbaseStorageManagedserviceidentityupdatePropertiesUserassignedidentitiesAdditionalproperties",
              },
            },
          },
        },
      },
    },
  };

export const LiftrBaseStorageFileSystemResourceUpdateProperties: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "LiftrBaseStorageFileSystemResourceUpdateProperties",
      modelProperties: {
        delegatedSubnetId: {
          serializedName: "delegatedSubnetId",
          type: {
            name: "String",
          },
        },
        capacity: {
          serializedName: "capacity",
          type: {
            name: "Composite",
            className: "LiftrBaseStorageCapacity",
          },
        },
        encryption: {
          serializedName: "encryption",
          type: {
            name: "Composite",
            className: "LiftrBaseEncryptionUpdateProperties",
          },
        },
      },
    },
  };

export const LiftrBaseEncryptionUpdateProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LiftrBaseEncryptionUpdateProperties",
    modelProperties: {
      encryptionType: {
        serializedName: "encryptionType",
        type: {
          name: "String",
        },
      },
      keyUrl: {
        serializedName: "keyUrl",
        type: {
          name: "String",
        },
      },
      encryptionIdentityProperties: {
        serializedName: "encryptionIdentityProperties",
        type: {
          name: "Composite",
          className: "LiftrBaseEncryptionIdentityUpdateProperties",
        },
      },
    },
  },
};

export const LiftrBaseEncryptionIdentityUpdateProperties: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "LiftrBaseEncryptionIdentityUpdateProperties",
      modelProperties: {
        identityType: {
          serializedName: "identityType",
          type: {
            name: "String",
          },
        },
        identityResourceId: {
          serializedName: "identityResourceId",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const Components1QrezbwSchemasLiftrbaseStorageManagedserviceidentityupdatePropertiesUserassignedidentitiesAdditionalproperties: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className:
        "Components1QrezbwSchemasLiftrbaseStorageManagedserviceidentityupdatePropertiesUserassignedidentitiesAdditionalproperties",
      modelProperties: {
        ...UserAssignedIdentity.type.modelProperties,
      },
    },
  };

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const LiftrBaseStorageFileSystemResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LiftrBaseStorageFileSystemResource",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "LiftrBaseStorageFileSystemResourceProperties",
        },
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity",
        },
      },
    },
  },
};

export const FileSystemsCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FileSystemsCreateOrUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const FileSystemsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FileSystemsDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};
