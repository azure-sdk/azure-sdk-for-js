/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const ScheduledQueryRuleResourceCollection: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "ScheduledQueryRuleResourceCollection",
      modelProperties: {
        value: {
          serializedName: "value",
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "Composite",
                className: "ScheduledQueryRuleResource",
              },
            },
          },
        },
        nextLink: {
          serializedName: "nextLink",
          readOnly: true,
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const ScheduledQueryRuleResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScheduledQueryRuleResource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "Identity",
        },
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String",
        },
      },
      kind: {
        serializedName: "kind",
        type: {
          name: "String",
        },
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData",
        },
      },
      createdWithApiVersion: {
        serializedName: "properties.createdWithApiVersion",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      isLegacyLogAnalyticsRule: {
        serializedName: "properties.isLegacyLogAnalyticsRule",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String",
        },
      },
      displayName: {
        serializedName: "properties.displayName",
        type: {
          name: "String",
        },
      },
      severity: {
        serializedName: "properties.severity",
        type: {
          name: "Number",
        },
      },
      enabled: {
        serializedName: "properties.enabled",
        type: {
          name: "Boolean",
        },
      },
      scopes: {
        serializedName: "properties.scopes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      evaluationFrequency: {
        serializedName: "properties.evaluationFrequency",
        type: {
          name: "TimeSpan",
        },
      },
      windowSize: {
        serializedName: "properties.windowSize",
        type: {
          name: "TimeSpan",
        },
      },
      overrideQueryTimeRange: {
        serializedName: "properties.overrideQueryTimeRange",
        type: {
          name: "TimeSpan",
        },
      },
      targetResourceTypes: {
        serializedName: "properties.targetResourceTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      criteria: {
        serializedName: "properties.criteria",
        type: {
          name: "Composite",
          className: "ScheduledQueryRuleCriteria",
        },
      },
      muteActionsDuration: {
        serializedName: "properties.muteActionsDuration",
        type: {
          name: "TimeSpan",
        },
      },
      actions: {
        serializedName: "properties.actions",
        type: {
          name: "Composite",
          className: "Actions",
        },
      },
      isWorkspaceAlertsStorageConfigured: {
        serializedName: "properties.isWorkspaceAlertsStorageConfigured",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      checkWorkspaceAlertsStorageConfigured: {
        serializedName: "properties.checkWorkspaceAlertsStorageConfigured",
        type: {
          name: "Boolean",
        },
      },
      skipQueryValidation: {
        serializedName: "properties.skipQueryValidation",
        type: {
          name: "Boolean",
        },
      },
      autoMitigate: {
        serializedName: "properties.autoMitigate",
        type: {
          name: "Boolean",
        },
      },
      resolveConfiguration: {
        serializedName: "properties.resolveConfiguration",
        type: {
          name: "Composite",
          className: "RuleResolveConfiguration",
        },
      },
    },
  },
};

export const Identity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Identity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["SystemAssigned", "UserAssigned", "None"],
        },
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "UserIdentityProperties" },
          },
        },
      },
    },
  },
};

export const UserIdentityProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserIdentityProperties",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      clientId: {
        serializedName: "clientId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String",
        },
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String",
        },
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime",
        },
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String",
        },
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String",
        },
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const ScheduledQueryRuleCriteria: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScheduledQueryRuleCriteria",
    modelProperties: {
      allOf: {
        serializedName: "allOf",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Condition",
            },
          },
        },
      },
    },
  },
};

export const Condition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Condition",
    modelProperties: {
      criterionType: {
        serializedName: "criterionType",
        type: {
          name: "String",
        },
      },
      query: {
        serializedName: "query",
        type: {
          name: "String",
        },
      },
      timeAggregation: {
        serializedName: "timeAggregation",
        type: {
          name: "String",
        },
      },
      metricMeasureColumn: {
        serializedName: "metricMeasureColumn",
        type: {
          name: "String",
        },
      },
      resourceIdColumn: {
        serializedName: "resourceIdColumn",
        type: {
          name: "String",
        },
      },
      dimensions: {
        serializedName: "dimensions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Dimension",
            },
          },
        },
      },
      operator: {
        serializedName: "operator",
        type: {
          name: "String",
        },
      },
      threshold: {
        serializedName: "threshold",
        type: {
          name: "Number",
        },
      },
      alertSensitivity: {
        serializedName: "alertSensitivity",
        type: {
          name: "String",
        },
      },
      ignoreDataBefore: {
        serializedName: "ignoreDataBefore",
        type: {
          name: "DateTime",
        },
      },
      failingPeriods: {
        serializedName: "failingPeriods",
        type: {
          name: "Composite",
          className: "ConditionFailingPeriods",
        },
      },
      metricName: {
        serializedName: "metricName",
        type: {
          name: "String",
        },
      },
      minRecurrenceCount: {
        serializedName: "minRecurrenceCount",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const Dimension: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Dimension",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String",
        },
      },
      operator: {
        serializedName: "operator",
        required: true,
        type: {
          name: "String",
        },
      },
      values: {
        serializedName: "values",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const ConditionFailingPeriods: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConditionFailingPeriods",
    modelProperties: {
      numberOfEvaluationPeriods: {
        defaultValue: 1,
        serializedName: "numberOfEvaluationPeriods",
        type: {
          name: "Number",
        },
      },
      minFailingPeriodsToAlert: {
        defaultValue: 1,
        serializedName: "minFailingPeriodsToAlert",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const Actions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Actions",
    modelProperties: {
      actionGroups: {
        serializedName: "actionGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      customProperties: {
        serializedName: "customProperties",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      actionProperties: {
        serializedName: "actionProperties",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
    },
  },
};

export const RuleResolveConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RuleResolveConfiguration",
    modelProperties: {
      autoResolved: {
        serializedName: "autoResolved",
        type: {
          name: "Boolean",
        },
      },
      timeToResolve: {
        serializedName: "timeToResolve",
        type: {
          name: "TimeSpan",
        },
      },
    },
  },
};

export const ErrorContract: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorContract",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorResponse",
        },
      },
    },
  },
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorResponse",
            },
          },
        },
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo",
            },
          },
        },
      },
    },
  },
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } },
        },
      },
    },
  },
};

export const ScheduledQueryRuleResourcePatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScheduledQueryRuleResourcePatch",
    modelProperties: {
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "Identity",
        },
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      createdWithApiVersion: {
        serializedName: "properties.createdWithApiVersion",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      isLegacyLogAnalyticsRule: {
        serializedName: "properties.isLegacyLogAnalyticsRule",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String",
        },
      },
      displayName: {
        serializedName: "properties.displayName",
        type: {
          name: "String",
        },
      },
      severity: {
        serializedName: "properties.severity",
        type: {
          name: "Number",
        },
      },
      enabled: {
        serializedName: "properties.enabled",
        type: {
          name: "Boolean",
        },
      },
      scopes: {
        serializedName: "properties.scopes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      evaluationFrequency: {
        serializedName: "properties.evaluationFrequency",
        type: {
          name: "TimeSpan",
        },
      },
      windowSize: {
        serializedName: "properties.windowSize",
        type: {
          name: "TimeSpan",
        },
      },
      overrideQueryTimeRange: {
        serializedName: "properties.overrideQueryTimeRange",
        type: {
          name: "TimeSpan",
        },
      },
      targetResourceTypes: {
        serializedName: "properties.targetResourceTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      criteria: {
        serializedName: "properties.criteria",
        type: {
          name: "Composite",
          className: "ScheduledQueryRuleCriteria",
        },
      },
      muteActionsDuration: {
        serializedName: "properties.muteActionsDuration",
        type: {
          name: "TimeSpan",
        },
      },
      actions: {
        serializedName: "properties.actions",
        type: {
          name: "Composite",
          className: "Actions",
        },
      },
      isWorkspaceAlertsStorageConfigured: {
        serializedName: "properties.isWorkspaceAlertsStorageConfigured",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      checkWorkspaceAlertsStorageConfigured: {
        serializedName: "properties.checkWorkspaceAlertsStorageConfigured",
        type: {
          name: "Boolean",
        },
      },
      skipQueryValidation: {
        serializedName: "properties.skipQueryValidation",
        type: {
          name: "Boolean",
        },
      },
      autoMitigate: {
        serializedName: "properties.autoMitigate",
        type: {
          name: "Boolean",
        },
      },
      resolveConfiguration: {
        serializedName: "properties.resolveConfiguration",
        type: {
          name: "Composite",
          className: "RuleResolveConfiguration",
        },
      },
    },
  },
};
