/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const MetricAlertResourceCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricAlertResourceCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricAlertResource",
            },
          },
        },
      },
    },
  },
};

export const MetricAlertResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricAlertResource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String",
        },
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      kind: {
        serializedName: "kind",
        type: {
          name: "String",
        },
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "Identity",
        },
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String",
        },
      },
      severity: {
        constraints: {
          InclusiveMaximum: 4,
          InclusiveMinimum: 0,
        },
        serializedName: "properties.severity",
        required: true,
        type: {
          name: "Number",
        },
      },
      enabled: {
        serializedName: "properties.enabled",
        required: true,
        type: {
          name: "Boolean",
        },
      },
      scopes: {
        serializedName: "properties.scopes",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const Identity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Identity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["SystemAssigned", "UserAssigned", "None"],
        },
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "UserIdentityProperties" },
          },
        },
      },
    },
  },
};

export const UserIdentityProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserIdentityProperties",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      clientId: {
        serializedName: "clientId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const MetricAlertPropertiesBase: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricAlertPropertiesBase",
    modelProperties: {
      description: {
        serializedName: "description",
        type: {
          name: "String",
        },
      },
      severity: {
        constraints: {
          InclusiveMaximum: 4,
          InclusiveMinimum: 0,
        },
        serializedName: "severity",
        required: true,
        type: {
          name: "Number",
        },
      },
      enabled: {
        serializedName: "enabled",
        required: true,
        type: {
          name: "Boolean",
        },
      },
      scopes: {
        serializedName: "scopes",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorResponseError",
        },
      },
    },
  },
};

export const ErrorResponseError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponseError",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        type: {
          name: "String",
        },
      },
      target: {
        serializedName: "target",
        type: {
          name: "String",
        },
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail",
            },
          },
        },
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorResponseErrorAdditionalInfoItem",
            },
          },
        },
      },
    },
  },
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        type: {
          name: "String",
        },
      },
      target: {
        serializedName: "target",
        type: {
          name: "String",
        },
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetailAdditionalInfoItem",
            },
          },
        },
      },
    },
  },
};

export const ErrorDetailAdditionalInfoItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetailAdditionalInfoItem",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String",
        },
      },
      info: {
        serializedName: "info",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } },
        },
      },
    },
  },
};

export const ErrorResponseErrorAdditionalInfoItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponseErrorAdditionalInfoItem",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String",
        },
      },
      info: {
        serializedName: "info",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } },
        },
      },
    },
  },
};

export const MetricAlertResourcePatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricAlertResourcePatch",
    modelProperties: {
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "Identity",
        },
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String",
        },
      },
      severity: {
        constraints: {
          InclusiveMaximum: 4,
          InclusiveMinimum: 0,
        },
        serializedName: "properties.severity",
        type: {
          name: "Number",
        },
      },
      enabled: {
        serializedName: "properties.enabled",
        type: {
          name: "Boolean",
        },
      },
      scopes: {
        serializedName: "properties.scopes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const MetricAlertPropertiesBaseForPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricAlertPropertiesBaseForPatch",
    modelProperties: {
      description: {
        serializedName: "description",
        type: {
          name: "String",
        },
      },
      severity: {
        constraints: {
          InclusiveMaximum: 4,
          InclusiveMinimum: 0,
        },
        serializedName: "severity",
        type: {
          name: "Number",
        },
      },
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean",
        },
      },
      scopes: {
        serializedName: "scopes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const MetricAlertAction: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricAlertAction",
    modelProperties: {
      actionGroupId: {
        serializedName: "actionGroupId",
        type: {
          name: "String",
        },
      },
      webHookProperties: {
        serializedName: "webHookProperties",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
    },
  },
};

export const MetricAlertCriteria: coreClient.CompositeMapper = {
  serializedName: "MetricAlertCriteria",
  type: {
    name: "Composite",
    className: "MetricAlertCriteria",
    uberParent: "MetricAlertCriteria",
    additionalProperties: { type: { name: "Object" } },
    polymorphicDiscriminator: {
      serializedName: "odata\\.type",
      clientName: "odataType",
    },
    modelProperties: {
      odataType: {
        serializedName: "odata\\.type",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const QueryResolveConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QueryResolveConfiguration",
    modelProperties: {
      autoResolved: {
        serializedName: "autoResolved",
        type: {
          name: "Boolean",
        },
      },
      timeToResolve: {
        serializedName: "timeToResolve",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const MetricQueryCriteria: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricQueryCriteria",
    modelProperties: {
      query: {
        serializedName: "query",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const MultiMetricCriteria: coreClient.CompositeMapper = {
  serializedName: "MultiMetricCriteria",
  type: {
    name: "Composite",
    className: "MultiMetricCriteria",
    uberParent: "MultiMetricCriteria",
    additionalProperties: { type: { name: "Object" } },
    polymorphicDiscriminator: {
      serializedName: "criterionType",
      clientName: "criterionType",
    },
    modelProperties: {
      criterionType: {
        serializedName: "criterionType",
        required: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String",
        },
      },
      metricName: {
        serializedName: "metricName",
        required: true,
        type: {
          name: "String",
        },
      },
      metricNamespace: {
        serializedName: "metricNamespace",
        type: {
          name: "String",
        },
      },
      timeAggregation: {
        serializedName: "timeAggregation",
        required: true,
        type: {
          name: "String",
        },
      },
      dimensions: {
        serializedName: "dimensions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricDimension",
            },
          },
        },
      },
      skipMetricValidation: {
        serializedName: "skipMetricValidation",
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const MetricDimension: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricDimension",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String",
        },
      },
      operator: {
        serializedName: "operator",
        required: true,
        type: {
          name: "String",
        },
      },
      values: {
        serializedName: "values",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const DynamicThresholdFailingPeriods: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DynamicThresholdFailingPeriods",
    modelProperties: {
      numberOfEvaluationPeriods: {
        serializedName: "numberOfEvaluationPeriods",
        required: true,
        type: {
          name: "Number",
        },
      },
      minFailingPeriodsToAlert: {
        serializedName: "minFailingPeriodsToAlert",
        required: true,
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const MetricAlertsMetricProperties: coreClient.CompositeMapper = {
  serializedName: "MetricAlertsMetricProperties",
  type: {
    name: "Composite",
    className: "MetricAlertsMetricProperties",
    uberParent: "MetricAlertPropertiesBase",
    polymorphicDiscriminator: MetricAlertPropertiesBase.type.polymorphicDiscriminator,
    modelProperties: {
      ...MetricAlertPropertiesBase.type.modelProperties,
      windowSize: {
        serializedName: "windowSize",
        required: true,
        type: {
          name: "String",
        },
      },
      criteria: {
        serializedName: "criteria",
        type: {
          name: "Composite",
          className: "MetricAlertCriteria",
        },
      },
    },
  },
};

export const MetricAlertsQueryProperties: coreClient.CompositeMapper = {
  serializedName: "Query",
  type: {
    name: "Composite",
    className: "MetricAlertsQueryProperties",
    uberParent: "MetricAlertPropertiesBase",
    polymorphicDiscriminator: MetricAlertPropertiesBase.type.polymorphicDiscriminator,
    modelProperties: {
      ...MetricAlertPropertiesBase.type.modelProperties,
      resolveConfiguration: {
        serializedName: "resolveConfiguration",
        type: {
          name: "Composite",
          className: "QueryResolveConfiguration",
        },
      },
      criteria: {
        serializedName: "criteria",
        type: {
          name: "Composite",
          className: "MetricQueryCriteria",
        },
      },
    },
  },
};

export const MetricAlertsMetricPropertiesForPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricAlertsMetricPropertiesForPatch",
    modelProperties: {
      ...MetricAlertPropertiesBaseForPatch.type.modelProperties,
      kind: {
        defaultValue: "Metric",
        serializedName: "kind",
        type: {
          name: "String",
        },
      },
      severity: {
        serializedName: "severity",
        type: {
          name: "Number",
        },
      },
      scopes: {
        serializedName: "scopes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      evaluationFrequency: {
        serializedName: "evaluationFrequency",
        type: {
          name: "TimeSpan",
        },
      },
      windowSize: {
        serializedName: "windowSize",
        type: {
          name: "TimeSpan",
        },
      },
      targetResourceType: {
        serializedName: "targetResourceType",
        type: {
          name: "String",
        },
      },
      targetResourceRegion: {
        serializedName: "targetResourceRegion",
        type: {
          name: "String",
        },
      },
      criteria: {
        serializedName: "criteria",
        type: {
          name: "Composite",
          className: "MetricAlertCriteria",
        },
      },
      autoMitigate: {
        serializedName: "autoMitigate",
        type: {
          name: "Boolean",
        },
      },
      actions: {
        serializedName: "actions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricAlertAction",
            },
          },
        },
      },
      lastUpdatedTime: {
        serializedName: "lastUpdatedTime",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      isMigrated: {
        serializedName: "isMigrated",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const MetricAlertsQueryPropertiesForPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricAlertsQueryPropertiesForPatch",
    modelProperties: {
      ...MetricAlertPropertiesBaseForPatch.type.modelProperties,
      kind: {
        defaultValue: "Query",
        serializedName: "kind",
        type: {
          name: "String",
        },
      },
      resolveConfiguration: {
        serializedName: "resolveConfiguration",
        type: {
          name: "Composite",
          className: "QueryResolveConfiguration",
        },
      },
      criteria: {
        serializedName: "criteria",
        type: {
          name: "Composite",
          className: "MetricQueryCriteria",
        },
      },
    },
  },
};

export const MetricAlertSingleResourceMultipleMetricCriteria: coreClient.CompositeMapper = {
  serializedName: "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
  type: {
    name: "Composite",
    className: "MetricAlertSingleResourceMultipleMetricCriteria",
    uberParent: "MetricAlertCriteria",
    additionalProperties: { type: { name: "Object" } },
    polymorphicDiscriminator: MetricAlertCriteria.type.polymorphicDiscriminator,
    modelProperties: {
      ...MetricAlertCriteria.type.modelProperties,
      allOf: {
        serializedName: "allOf",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricCriteria",
            },
          },
        },
      },
    },
  },
};

export const WebtestLocationAvailabilityCriteria: coreClient.CompositeMapper = {
  serializedName: "Microsoft.Azure.Monitor.WebtestLocationAvailabilityCriteria",
  type: {
    name: "Composite",
    className: "WebtestLocationAvailabilityCriteria",
    uberParent: "MetricAlertCriteria",
    additionalProperties: { type: { name: "Object" } },
    polymorphicDiscriminator: MetricAlertCriteria.type.polymorphicDiscriminator,
    modelProperties: {
      ...MetricAlertCriteria.type.modelProperties,
      webTestId: {
        serializedName: "webTestId",
        required: true,
        type: {
          name: "String",
        },
      },
      componentId: {
        serializedName: "componentId",
        required: true,
        type: {
          name: "String",
        },
      },
      failedLocationCount: {
        serializedName: "failedLocationCount",
        required: true,
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const MetricAlertMultipleResourceMultipleMetricCriteria: coreClient.CompositeMapper = {
  serializedName: "Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria",
  type: {
    name: "Composite",
    className: "MetricAlertMultipleResourceMultipleMetricCriteria",
    uberParent: "MetricAlertCriteria",
    additionalProperties: { type: { name: "Object" } },
    polymorphicDiscriminator: MetricAlertCriteria.type.polymorphicDiscriminator,
    modelProperties: {
      ...MetricAlertCriteria.type.modelProperties,
      allOf: {
        serializedName: "allOf",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MultiMetricCriteria",
            },
          },
        },
      },
    },
  },
};

export const MetricCriteria: coreClient.CompositeMapper = {
  serializedName: "StaticThresholdCriterion",
  type: {
    name: "Composite",
    className: "MetricCriteria",
    uberParent: "MultiMetricCriteria",
    additionalProperties: { type: { name: "Object" } },
    polymorphicDiscriminator: MultiMetricCriteria.type.polymorphicDiscriminator,
    modelProperties: {
      ...MultiMetricCriteria.type.modelProperties,
      operator: {
        serializedName: "operator",
        required: true,
        type: {
          name: "String",
        },
      },
      threshold: {
        serializedName: "threshold",
        required: true,
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const DynamicMetricCriteria: coreClient.CompositeMapper = {
  serializedName: "DynamicThresholdCriterion",
  type: {
    name: "Composite",
    className: "DynamicMetricCriteria",
    uberParent: "MultiMetricCriteria",
    additionalProperties: { type: { name: "Object" } },
    polymorphicDiscriminator: MultiMetricCriteria.type.polymorphicDiscriminator,
    modelProperties: {
      ...MultiMetricCriteria.type.modelProperties,
      operator: {
        serializedName: "operator",
        required: true,
        type: {
          name: "String",
        },
      },
      alertSensitivity: {
        serializedName: "alertSensitivity",
        required: true,
        type: {
          name: "String",
        },
      },
      failingPeriods: {
        serializedName: "failingPeriods",
        type: {
          name: "Composite",
          className: "DynamicThresholdFailingPeriods",
        },
      },
      ignoreDataBefore: {
        serializedName: "ignoreDataBefore",
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export let discriminators = {
  MetricAlertCriteria: MetricAlertCriteria,
  MultiMetricCriteria: MultiMetricCriteria,
  "MetricAlertPropertiesBase.MetricAlertsMetricProperties": MetricAlertsMetricProperties,
  "MetricAlertPropertiesBase.Query": MetricAlertsQueryProperties,
  "MetricAlertCriteria.Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria":
    MetricAlertSingleResourceMultipleMetricCriteria,
  "MetricAlertCriteria.Microsoft.Azure.Monitor.WebtestLocationAvailabilityCriteria":
    WebtestLocationAvailabilityCriteria,
  "MetricAlertCriteria.Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria":
    MetricAlertMultipleResourceMultipleMetricCriteria,
  "MultiMetricCriteria.StaticThresholdCriterion": MetricCriteria,
  "MultiMetricCriteria.DynamicThresholdCriterion": DynamicMetricCriteria,
};
