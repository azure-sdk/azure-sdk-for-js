/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export type MetricAlertCriteriaUnion =
  | MetricAlertCriteria
  | MetricAlertSingleResourceMultipleMetricCriteria
  | WebtestLocationAvailabilityCriteria
  | MetricAlertMultipleResourceMultipleMetricCriteria;
export type MultiMetricCriteriaUnion = MultiMetricCriteria | MetricCriteria | DynamicMetricCriteria;

/** Represents a collection of alert rule resources. */
export interface MetricAlertResourceCollection {
  /** the values for the alert rule resources. */
  value?: MetricAlertResource[];
}

/** A metric alert rule resource. */
export interface MetricAlertResource {
  /**
   * Azure resource Id
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Azure resource name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Azure resource type
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Resource location */
  location: string;
  /** Resource tags */
  tags?: { [propertyName: string]: string };
  /** Indicates the type of metric alert */
  kind?: Kinds;
  /** The identity of the resource. */
  identity?: Identity;
  /** Description of the alert rule. */
  description?: string;
  /** Alert severity (0-4). */
  severity: number;
  /** Indicates if the alert rule is enabled. */
  enabled: boolean;
  /** The list of resource IDs that this metric alert rule is scoped to. */
  scopes: string[];
}

/** Identity for the resource. */
export interface Identity {
  /**
   * The principal ID of resource identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The tenant ID of resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /** Type of managed service identity. */
  type: IdentityType;
  /** The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'. */
  userAssignedIdentities?: { [propertyName: string]: UserIdentityProperties };
}

/** Properties of the user assigned identity. */
export interface UserIdentityProperties {
  /**
   * The principal ID of resource identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The client ID of resource identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly clientId?: string;
}

/** The base properties for a metric alert rule. */
export interface MetricAlertPropertiesBase {
  /** Description of the alert rule. */
  description?: string;
  /** Alert severity (0-4). */
  severity: number;
  /** Indicates if the alert rule is enabled. */
  enabled: boolean;
  /** The list of resource IDs that this metric alert rule is scoped to. */
  scopes: string[];
}

/** Describes the format of Error response. */
export interface ErrorResponse {
  error?: ErrorResponseError;
}

export interface ErrorResponseError {
  /** Unlocalized string which can be used to programmatically identify the error. */
  code?: string;
  /** Describes the error in detail and provides debugging information. If Accept-Language is set in the request, it must be localized to that language. */
  message?: string;
  /** The target of the particular error (for example, the name of the property in error). */
  target?: string;
  /** An array of additional nested error response info objects, as described by this contract. */
  details?: ErrorDetail[];
  /** An array of objects with 'type' and 'info' properties. The schema of 'info' is service-specific and dependent on the 'type' string. */
  additionalInfo?: ErrorResponseErrorAdditionalInfoItem[];
}

/** Describes details of an error response. */
export interface ErrorDetail {
  /** Unlocalized string which can be used to programmatically identify the error. */
  code?: string;
  /** Describes the error in detail and provides debugging information. */
  message?: string;
  /** The target of the particular error (for example, the name of the property in error). */
  target?: string;
  /** An array of objects with 'type' and 'info' properties. The schema of 'info' is service-specific and dependent on the 'type' string. */
  additionalInfo?: ErrorDetailAdditionalInfoItem[];
}

export interface ErrorDetailAdditionalInfoItem {
  /** The type of additional information. */
  type?: string;
  /** The additional information specific to the type. */
  info?: { [propertyName: string]: any };
}

export interface ErrorResponseErrorAdditionalInfoItem {
  /** The type of additional information. */
  type?: string;
  /** The additional information specific to the type. */
  info?: { [propertyName: string]: any };
}

/** The scheduled query rule resource for patch operations. */
export interface MetricAlertResourcePatch {
  /** The identity of the resource. */
  identity?: Identity;
  /** Resource tags */
  tags?: { [propertyName: string]: string };
  /** Indicates the type of metric alert */
  kind: KindsEnum;
  /** Description of the alert rule. */
  description?: string;
  /** Alert severity (0-4). */
  severity?: number;
  /** Indicates if the alert rule is enabled. */
  enabled?: boolean;
  /** The list of resource IDs that this metric alert rule is scoped to. */
  scopes?: string[];
}

/** The base properties for a metric alert rule. */
export interface MetricAlertPropertiesBaseForPatch {
  /** Description of the alert rule. */
  description?: string;
  /** Alert severity (0-4). */
  severity?: number;
  /** Indicates if the alert rule is enabled. */
  enabled?: boolean;
  /** The list of resource IDs that this metric alert rule is scoped to. */
  scopes?: string[];
}

/** An alert action. */
export interface MetricAlertAction {
  /** the id of the action group to use. */
  actionGroupId?: string;
  /** This field allows specifying custom properties, which would be appended to the alert payload sent as input to the webhook. */
  webHookProperties?: { [propertyName: string]: string };
}

/** The rule criteria that defines the conditions of the alert rule. */
export interface MetricAlertCriteria {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  odataType:
    | "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
    | "Microsoft.Azure.Monitor.WebtestLocationAvailabilityCriteria"
    | "Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria";
  /** Describes unknown properties. The value of an unknown property can be of "any" type. */
  [property: string]: any;
}

export interface QueryResolveConfiguration {
  /** Indicates whether the alert should be auto resolved */
  autoResolved?: boolean;
  /** The time after which the alert should be auto resolved */
  timeToResolve?: string;
}

export interface MetricQueryCriteria {
  /** The query used to evaluate the alert rule */
  query?: string;
}

/** The types of conditions for a multi resource alert. */
export interface MultiMetricCriteria {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  criterionType: "StaticThresholdCriterion" | "DynamicThresholdCriterion";
  /** Describes unknown properties. The value of an unknown property can be of "any" type. */
  [property: string]: any;
  /** Name of the criteria. */
  name: string;
  /** Name of the metric. */
  metricName: string;
  /** Namespace of the metric. */
  metricNamespace?: string;
  /** the criteria time aggregation types. */
  timeAggregation: AggregationTypeEnum;
  /** List of dimension conditions. */
  dimensions?: MetricDimension[];
  /** Allows creating an alert rule on a custom metric that isn't yet emitted, by causing the metric validation to be skipped. */
  skipMetricValidation?: boolean;
}

/** Specifies a metric dimension. */
export interface MetricDimension {
  /** Name of the dimension. */
  name: string;
  /** the dimension operator. Only 'Include' and 'Exclude' are supported */
  operator: string;
  /** list of dimension values. */
  values: string[];
}

/** The minimum number of violations required within the selected lookback time window required to raise an alert. */
export interface DynamicThresholdFailingPeriods {
  /** The number of aggregated lookback points. The lookback time window is calculated based on the aggregation granularity (windowSize) and the selected number of aggregated points. */
  numberOfEvaluationPeriods: number;
  /** The number of violations to trigger an alert. Should be smaller or equal to numberOfEvaluationPeriods. */
  minFailingPeriodsToAlert: number;
}

export interface MetricAlertsMetricProperties extends MetricAlertPropertiesBase {
  /** The period of time that is used to monitor alert activity */
  windowSize: string;
  /** The rule criteria that defines the conditions of the alert rule. */
  criteria: MetricAlertCriteriaUnion;
}

export interface MetricAlertsQueryProperties extends MetricAlertPropertiesBase {
  resolveConfiguration?: QueryResolveConfiguration;
  criteria: MetricQueryCriteria;
}

/** An alert rule properties for patch. */
export interface MetricAlertsMetricPropertiesForPatch extends MetricAlertPropertiesBaseForPatch {
  kind?: UniqueKindEnum;
  /** Alert severity {0, 1, 2, 3, 4} */
  severity?: number;
  /** the list of resource id's that this metric alert is scoped to. You cannot change the scope of a metric rule based on logs. */
  scopes?: string[];
  /** how often the metric alert is evaluated represented in ISO 8601 duration format. */
  evaluationFrequency?: string;
  /** the period of time (in ISO 8601 duration format) that is used to monitor alert activity based on the threshold. */
  windowSize?: string;
  /** the resource type of the target resource(s) on which the alert is created/updated. Mandatory if the scope contains a subscription, resource group, or more than one resource. */
  targetResourceType?: string;
  /** the region of the target resource(s) on which the alert is created/updated. Mandatory if the scope contains a subscription, resource group, or more than one resource. */
  targetResourceRegion?: string;
  /** defines the specific alert criteria information. */
  criteria?: MetricAlertCriteriaUnion;
  /** the flag that indicates whether the alert should be auto resolved or not. The default is true. */
  autoMitigate?: boolean;
  /** the array of actions that are performed when the alert rule becomes active, and when an alert condition is resolved. */
  actions?: MetricAlertAction[];
  /**
   * Last time the rule was updated in ISO8601 format.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastUpdatedTime?: Date;
  /**
   * the value indicating whether this alert rule is migrated.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isMigrated?: boolean;
}

export interface MetricAlertsQueryPropertiesForPatch extends MetricAlertPropertiesBaseForPatch {
  kind?: Kind;
  resolveConfiguration?: QueryResolveConfiguration;
  criteria?: MetricQueryCriteria;
}

/** Specifies the metric alert criteria for a single resource that has multiple metric criteria. */
export interface MetricAlertSingleResourceMultipleMetricCriteria extends MetricAlertCriteria {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  odataType: "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria";
  /** The list of metric criteria for this 'all of' operation. */
  allOf?: MetricCriteria[];
}

/** Specifies the metric alert rule criteria for a web test resource. */
export interface WebtestLocationAvailabilityCriteria extends MetricAlertCriteria {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  odataType: "Microsoft.Azure.Monitor.WebtestLocationAvailabilityCriteria";
  /** The Application Insights web test Id. */
  webTestId: string;
  /** The Application Insights resource Id. */
  componentId: string;
  /** The number of failed locations. */
  failedLocationCount: number;
}

/** Specifies the metric alert criteria for multiple resource that has multiple metric criteria. */
export interface MetricAlertMultipleResourceMultipleMetricCriteria extends MetricAlertCriteria {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  odataType: "Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria";
  /** the list of multiple metric criteria for this 'all of' operation. */
  allOf?: MultiMetricCriteriaUnion[];
}

/** Criterion to filter metrics. */
export interface MetricCriteria extends MultiMetricCriteria {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  criterionType: "StaticThresholdCriterion";
  /** the criteria operator. */
  operator: Operator;
  /** the criteria threshold value that activates the alert. */
  threshold: number;
}

/** Criterion for dynamic threshold. */
export interface DynamicMetricCriteria extends MultiMetricCriteria {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  criterionType: "DynamicThresholdCriterion";
  /** The operator used to compare the metric value against the threshold. */
  operator: DynamicThresholdOperator;
  /** The extent of deviation required to trigger an alert. This will affect how tight the threshold is to the metric series pattern. */
  alertSensitivity: DynamicThresholdSensitivity;
  /** The minimum number of violations required within the selected lookback time window required to raise an alert. */
  failingPeriods: DynamicThresholdFailingPeriods;
  /** Use this option to set the date from which to start learning the metric historical data and calculate the dynamic thresholds (in ISO8601 format) */
  ignoreDataBefore?: Date;
}

/** Known values of {@link Kinds} that the service accepts. */
export enum KnownKinds {
  /** Metric */
  Metric = "Metric",
  /** Query */
  Query = "Query",
}

/**
 * Defines values for Kinds. \
 * {@link KnownKinds} can be used interchangeably with Kinds,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Metric** \
 * **Query**
 */
export type Kinds = string;

/** Known values of {@link KindsEnum} that the service accepts. */
export enum KnownKindsEnum {
  /** Metric */
  Metric = "Metric",
  /** Query */
  Query = "Query",
}

/**
 * Defines values for KindsEnum. \
 * {@link KnownKindsEnum} can be used interchangeably with KindsEnum,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Metric** \
 * **Query**
 */
export type KindsEnum = string;

/** Known values of {@link Odatatype} that the service accepts. */
export enum KnownOdatatype {
  /** MicrosoftAzureMonitorSingleResourceMultipleMetricCriteria */
  MicrosoftAzureMonitorSingleResourceMultipleMetricCriteria = "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
  /** MicrosoftAzureMonitorMultipleResourceMultipleMetricCriteria */
  MicrosoftAzureMonitorMultipleResourceMultipleMetricCriteria = "Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria",
  /** MicrosoftAzureMonitorWebtestLocationAvailabilityCriteria */
  MicrosoftAzureMonitorWebtestLocationAvailabilityCriteria = "Microsoft.Azure.Monitor.WebtestLocationAvailabilityCriteria",
}

/**
 * Defines values for Odatatype. \
 * {@link KnownOdatatype} can be used interchangeably with Odatatype,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria** \
 * **Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria** \
 * **Microsoft.Azure.Monitor.WebtestLocationAvailabilityCriteria**
 */
export type Odatatype = string;

/** Known values of {@link UniqueKindEnum} that the service accepts. */
export enum KnownUniqueKindEnum {
  /** Metric */
  Metric = "Metric",
}

/**
 * Defines values for UniqueKindEnum. \
 * {@link KnownUniqueKindEnum} can be used interchangeably with UniqueKindEnum,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Metric**
 */
export type UniqueKindEnum = string;

/** Known values of {@link Kind} that the service accepts. */
export enum KnownKind {
  /** Query */
  Query = "Query",
}

/**
 * Defines values for Kind. \
 * {@link KnownKind} can be used interchangeably with Kind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Query**
 */
export type Kind = string;

/** Known values of {@link Operator} that the service accepts. */
export enum KnownOperator {
  /** Equals */
  Equals = "Equals",
  /** GreaterThan */
  GreaterThan = "GreaterThan",
  /** GreaterThanOrEqual */
  GreaterThanOrEqual = "GreaterThanOrEqual",
  /** LessThan */
  LessThan = "LessThan",
  /** LessThanOrEqual */
  LessThanOrEqual = "LessThanOrEqual",
}

/**
 * Defines values for Operator. \
 * {@link KnownOperator} can be used interchangeably with Operator,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Equals** \
 * **GreaterThan** \
 * **GreaterThanOrEqual** \
 * **LessThan** \
 * **LessThanOrEqual**
 */
export type Operator = string;

/** Known values of {@link CriterionType} that the service accepts. */
export enum KnownCriterionType {
  /** StaticThresholdCriterion */
  StaticThresholdCriterion = "StaticThresholdCriterion",
  /** DynamicThresholdCriterion */
  DynamicThresholdCriterion = "DynamicThresholdCriterion",
}

/**
 * Defines values for CriterionType. \
 * {@link KnownCriterionType} can be used interchangeably with CriterionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **StaticThresholdCriterion** \
 * **DynamicThresholdCriterion**
 */
export type CriterionType = string;

/** Known values of {@link AggregationTypeEnum} that the service accepts. */
export enum KnownAggregationTypeEnum {
  /** Average */
  Average = "Average",
  /** Count */
  Count = "Count",
  /** Minimum */
  Minimum = "Minimum",
  /** Maximum */
  Maximum = "Maximum",
  /** Total */
  Total = "Total",
}

/**
 * Defines values for AggregationTypeEnum. \
 * {@link KnownAggregationTypeEnum} can be used interchangeably with AggregationTypeEnum,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Average** \
 * **Count** \
 * **Minimum** \
 * **Maximum** \
 * **Total**
 */
export type AggregationTypeEnum = string;

/** Known values of {@link DynamicThresholdOperator} that the service accepts. */
export enum KnownDynamicThresholdOperator {
  /** GreaterThan */
  GreaterThan = "GreaterThan",
  /** LessThan */
  LessThan = "LessThan",
  /** GreaterOrLessThan */
  GreaterOrLessThan = "GreaterOrLessThan",
}

/**
 * Defines values for DynamicThresholdOperator. \
 * {@link KnownDynamicThresholdOperator} can be used interchangeably with DynamicThresholdOperator,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **GreaterThan** \
 * **LessThan** \
 * **GreaterOrLessThan**
 */
export type DynamicThresholdOperator = string;

/** Known values of {@link DynamicThresholdSensitivity} that the service accepts. */
export enum KnownDynamicThresholdSensitivity {
  /** Low */
  Low = "Low",
  /** Medium */
  Medium = "Medium",
  /** High */
  High = "High",
}

/**
 * Defines values for DynamicThresholdSensitivity. \
 * {@link KnownDynamicThresholdSensitivity} can be used interchangeably with DynamicThresholdSensitivity,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Low** \
 * **Medium** \
 * **High**
 */
export type DynamicThresholdSensitivity = string;
/** Defines values for IdentityType. */
export type IdentityType = "SystemAssigned" | "UserAssigned" | "None";

/** Optional parameters. */
export interface MetricAlertsListBySubscriptionOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type MetricAlertsListBySubscriptionResponse = MetricAlertResourceCollection;

/** Optional parameters. */
export interface MetricAlertsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type MetricAlertsListByResourceGroupResponse = MetricAlertResourceCollection;

/** Optional parameters. */
export interface MetricAlertsGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type MetricAlertsGetResponse = MetricAlertResource;

/** Optional parameters. */
export interface MetricAlertsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type MetricAlertsCreateOrUpdateResponse = MetricAlertResource;

/** Optional parameters. */
export interface MetricAlertsUpdateOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type MetricAlertsUpdateResponse = MetricAlertResource;

/** Optional parameters. */
export interface MetricAlertsDeleteOptionalParams extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface MonitorClientOptionalParams extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
