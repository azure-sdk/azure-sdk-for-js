/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** Represents a collection of scheduled query rule resources. */
export interface ScheduledQueryRuleResourceCollection {
  /** The values for the scheduled query rule resources. */
  value?: ScheduledQueryRuleResource[];
  /**
   * Provides the link to retrieve the next set of elements.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** The scheduled query rule resource. */
export interface ScheduledQueryRuleResource {
  /**
   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** The identity of the resource. */
  identity?: Identity;
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The geo-location where the resource lives */
  location: string;
  /** Indicates the type of scheduled query rule. The default is LogAlert. */
  kind?: Kind;
  /**
   * The etag field is *not* required. If it is provided in the response body, it must also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly etag?: string;
  /**
   * SystemData of ScheduledQueryRule.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /**
   * The api-version used when creating this alert rule
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdWithApiVersion?: string;
  /**
   * True if alert rule is legacy Log Analytic rule
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isLegacyLogAnalyticsRule?: boolean;
  /** The description of the scheduled query rule. */
  description?: string;
  /** The display name of the alert rule */
  displayName?: string;
  /** Severity of the alert. Should be an integer between [0-4]. Value of 0 is severest. Relevant and required only for rules of the kind LogAlert. */
  severity?: AlertSeverity;
  /** The flag which indicates whether this scheduled query rule is enabled. Value should be true or false */
  enabled?: boolean;
  /** The list of resource id's that this scheduled query rule is scoped to. */
  scopes?: string[];
  /** How often the scheduled query rule is evaluated represented in ISO 8601 duration format. Relevant and required only for rules of the kind LogAlert. */
  evaluationFrequency?: string;
  /** The period of time (in ISO 8601 duration format) on which the Alert query will be executed (bin size). Relevant and required only for rules of the kind LogAlert. */
  windowSize?: string;
  /** If specified then overrides the query time range (default is WindowSize*NumberOfEvaluationPeriods). Relevant only for rules of the kind LogAlert. */
  overrideQueryTimeRange?: string;
  /** List of resource type of the target resource(s) on which the alert is created/updated. For example if the scope is a resource group and targetResourceTypes is Microsoft.Compute/virtualMachines, then a different alert will be fired for each virtual machine in the resource group which meet the alert criteria. Relevant only for rules of the kind LogAlert */
  targetResourceTypes?: string[];
  /** The rule criteria that defines the conditions of the scheduled query rule. */
  criteria?: ScheduledQueryRuleCriteria;
  /** Mute actions for the chosen period of time (in ISO 8601 duration format) after the alert is fired. Relevant only for rules of the kind LogAlert. */
  muteActionsDuration?: string;
  /** Actions to invoke when the alert fires. */
  actions?: Actions;
  /**
   * The flag which indicates whether this scheduled query rule has been configured to be stored in the customer's storage. The default is false.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isWorkspaceAlertsStorageConfigured?: boolean;
  /** The flag which indicates whether this scheduled query rule should be stored in the customer's storage. The default is false. Relevant only for rules of the kind LogAlert. */
  checkWorkspaceAlertsStorageConfigured?: boolean;
  /** The flag which indicates whether the provided query should be validated or not. The default is false. Relevant only for rules of the kind LogAlert. */
  skipQueryValidation?: boolean;
  /** The flag that indicates whether the alert should be automatically resolved or not. The default is true. Relevant only for rules of the kind LogAlert. */
  autoMitigate?: boolean;
  /** Defines the configuration for resolving fired alerts. Relevant only for rules of the kind LogAlert. */
  resolveConfiguration?: RuleResolveConfiguration;
}

/** Identity for the resource. */
export interface Identity {
  /**
   * The principal ID of resource identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The tenant ID of resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /** Type of managed service identity. */
  type: IdentityType;
  /** The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'. */
  userAssignedIdentities?: { [propertyName: string]: UserIdentityProperties };
}

/** User assigned identity properties. */
export interface UserIdentityProperties {
  /**
   * The principal id of user assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The client id of user assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly clientId?: string;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The timestamp of resource last modification (UTC) */
  lastModifiedAt?: Date;
}

/** The rule criteria that defines the conditions of the scheduled query rule. */
export interface ScheduledQueryRuleCriteria {
  /** A list of conditions to evaluate against the specified scopes */
  allOf?: Condition[];
}

/** A condition of the scheduled query rule. */
export interface Condition {
  /** Specifies the type of threshold criteria */
  criterionType?: CriterionType;
  /** Log query alert */
  query?: string;
  /** Aggregation type. Relevant and required only for rules of the kind LogAlert. */
  timeAggregation?: TimeAggregation;
  /** The column containing the metric measure number. Relevant only for rules of the kind LogAlert. */
  metricMeasureColumn?: string;
  /** The column containing the resource id. The content of the column must be a uri formatted as resource id. Relevant only for rules of the kind LogAlert. */
  resourceIdColumn?: string;
  /** List of Dimensions conditions */
  dimensions?: Dimension[];
  /** The criteria operator. Relevant and required only for rules of the kind LogAlert. */
  operator?: ConditionOperator;
  /** the criteria threshold value that activates the alert. Relevant and required only for static threshold rules of the kind LogAlert. */
  threshold?: number;
  /** The extent of deviation required to trigger an alert. Allowed values are 'Low', 'Medium' and 'High'. This will affect how tight the threshold is to the metric series pattern. Relevant and required only for dynamic threshold rules of the kind LogAlert. */
  alertSensitivity?: string;
  /** Use this option to set the date from which to start learning the metric historical data and calculate the dynamic thresholds (in ISO8601 format). Relevant only for dynamic threshold rules of the kind LogAlert. */
  ignoreDataBefore?: Date;
  /** The minimum number of violations required within the selected lookback time window required to raise an alert. Relevant only for rules of the kind LogAlert. */
  failingPeriods?: ConditionFailingPeriods;
  /** The name of the metric to be sent. Relevant and required only for rules of the kind LogToMetric. */
  metricName?: string;
}

/** Dimension splitting and filtering definition */
export interface Dimension {
  /** Name of the dimension */
  name: string;
  /** Operator for dimension values */
  operator: DimensionOperator;
  /** List of dimension values */
  values: string[];
}

/** The minimum number of violations required within the selected lookback time window required to raise an alert. Relevant only for rules of the kind LogAlert. */
export interface ConditionFailingPeriods {
  /** The number of aggregated lookback points. The lookback time window is calculated based on the aggregation granularity (windowSize) and the selected number of aggregated points. Default value is 1 */
  numberOfEvaluationPeriods?: number;
  /** The number of violations to trigger an alert. Should be smaller or equal to numberOfEvaluationPeriods. Default value is 1 */
  minFailingPeriodsToAlert?: number;
}

/** Actions to invoke when the alert fires. */
export interface Actions {
  /** Action Group resource Ids to invoke when the alert fires. */
  actionGroups?: string[];
  /** The properties of an alert payload. */
  customProperties?: { [propertyName: string]: string };
  /** The properties of an action properties. */
  actionProperties?: { [propertyName: string]: string };
}

/** TBD. Relevant only for rules of the kind LogAlert. */
export interface RuleResolveConfiguration {
  /** The flag that indicates whether or not to auto resolve a fired alert. */
  autoResolved?: boolean;
  /** The duration a rule must evaluate as healthy before the fired alert is automatically resolved represented in ISO 8601 duration format. */
  timeToResolve?: string;
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.) */
export interface ErrorContract {
  /** The error object. */
  error?: ErrorResponse;
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.) */
export interface ErrorResponse {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorResponse[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
}

/** The scheduled query rule resource for patch operations. */
export interface ScheduledQueryRuleResourcePatch {
  /** The identity of the resource. */
  identity?: Identity;
  /** Resource tags */
  tags?: { [propertyName: string]: string };
  /**
   * The api-version used when creating this alert rule
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdWithApiVersion?: string;
  /**
   * True if alert rule is legacy Log Analytic rule
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isLegacyLogAnalyticsRule?: boolean;
  /** The description of the scheduled query rule. */
  description?: string;
  /** The display name of the alert rule */
  displayName?: string;
  /** Severity of the alert. Should be an integer between [0-4]. Value of 0 is severest. Relevant and required only for rules of the kind LogAlert. */
  severity?: AlertSeverity;
  /** The flag which indicates whether this scheduled query rule is enabled. Value should be true or false */
  enabled?: boolean;
  /** The list of resource id's that this scheduled query rule is scoped to. */
  scopes?: string[];
  /** How often the scheduled query rule is evaluated represented in ISO 8601 duration format. Relevant and required only for rules of the kind LogAlert. */
  evaluationFrequency?: string;
  /** The period of time (in ISO 8601 duration format) on which the Alert query will be executed (bin size). Relevant and required only for rules of the kind LogAlert. */
  windowSize?: string;
  /** If specified then overrides the query time range (default is WindowSize*NumberOfEvaluationPeriods). Relevant only for rules of the kind LogAlert. */
  overrideQueryTimeRange?: string;
  /** List of resource type of the target resource(s) on which the alert is created/updated. For example if the scope is a resource group and targetResourceTypes is Microsoft.Compute/virtualMachines, then a different alert will be fired for each virtual machine in the resource group which meet the alert criteria. Relevant only for rules of the kind LogAlert */
  targetResourceTypes?: string[];
  /** The rule criteria that defines the conditions of the scheduled query rule. */
  criteria?: ScheduledQueryRuleCriteria;
  /** Mute actions for the chosen period of time (in ISO 8601 duration format) after the alert is fired. Relevant only for rules of the kind LogAlert. */
  muteActionsDuration?: string;
  /** Actions to invoke when the alert fires. */
  actions?: Actions;
  /**
   * The flag which indicates whether this scheduled query rule has been configured to be stored in the customer's storage. The default is false.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isWorkspaceAlertsStorageConfigured?: boolean;
  /** The flag which indicates whether this scheduled query rule should be stored in the customer's storage. The default is false. Relevant only for rules of the kind LogAlert. */
  checkWorkspaceAlertsStorageConfigured?: boolean;
  /** The flag which indicates whether the provided query should be validated or not. The default is false. Relevant only for rules of the kind LogAlert. */
  skipQueryValidation?: boolean;
  /** The flag that indicates whether the alert should be automatically resolved or not. The default is true. Relevant only for rules of the kind LogAlert. */
  autoMitigate?: boolean;
  /** Defines the configuration for resolving fired alerts. Relevant only for rules of the kind LogAlert. */
  resolveConfiguration?: RuleResolveConfiguration;
}

/** Known values of {@link Kind} that the service accepts. */
export enum KnownKind {
  /** LogAlert */
  LogAlert = "LogAlert",
  /** EventLogAlert */
  EventLogAlert = "EventLogAlert",
  /** LogToMetric */
  LogToMetric = "LogToMetric",
}

/**
 * Defines values for Kind. \
 * {@link KnownKind} can be used interchangeably with Kind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **LogAlert** \
 * **EventLogAlert** \
 * **LogToMetric**
 */
export type Kind = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  /** User */
  User = "User",
  /** Application */
  Application = "Application",
  /** ManagedIdentity */
  ManagedIdentity = "ManagedIdentity",
  /** Key */
  Key = "Key",
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link AlertSeverity} that the service accepts. */
export enum KnownAlertSeverity {
  /** Zero */
  Zero = 0,
  /** One */
  One = 1,
  /** Two */
  Two = 2,
  /** Three */
  Three = 3,
  /** Four */
  Four = 4,
}

/**
 * Defines values for AlertSeverity. \
 * {@link KnownAlertSeverity} can be used interchangeably with AlertSeverity,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **0** \
 * **1** \
 * **2** \
 * **3** \
 * **4**
 */
export type AlertSeverity = number;

/** Known values of {@link CriterionType} that the service accepts. */
export enum KnownCriterionType {
  /** StaticThresholdCriterion */
  StaticThresholdCriterion = "StaticThresholdCriterion",
  /** DynamicThresholdCriterion */
  DynamicThresholdCriterion = "DynamicThresholdCriterion",
}

/**
 * Defines values for CriterionType. \
 * {@link KnownCriterionType} can be used interchangeably with CriterionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **StaticThresholdCriterion** \
 * **DynamicThresholdCriterion**
 */
export type CriterionType = string;

/** Known values of {@link TimeAggregation} that the service accepts. */
export enum KnownTimeAggregation {
  /** Count */
  Count = "Count",
  /** Average */
  Average = "Average",
  /** Minimum */
  Minimum = "Minimum",
  /** Maximum */
  Maximum = "Maximum",
  /** Total */
  Total = "Total",
}

/**
 * Defines values for TimeAggregation. \
 * {@link KnownTimeAggregation} can be used interchangeably with TimeAggregation,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Count** \
 * **Average** \
 * **Minimum** \
 * **Maximum** \
 * **Total**
 */
export type TimeAggregation = string;

/** Known values of {@link DimensionOperator} that the service accepts. */
export enum KnownDimensionOperator {
  /** Include */
  Include = "Include",
  /** Exclude */
  Exclude = "Exclude",
}

/**
 * Defines values for DimensionOperator. \
 * {@link KnownDimensionOperator} can be used interchangeably with DimensionOperator,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Include** \
 * **Exclude**
 */
export type DimensionOperator = string;

/** Known values of {@link ConditionOperator} that the service accepts. */
export enum KnownConditionOperator {
  /** Equals */
  Equals = "Equals",
  /** GreaterThan */
  GreaterThan = "GreaterThan",
  /** GreaterThanOrEqual */
  GreaterThanOrEqual = "GreaterThanOrEqual",
  /** LessThan */
  LessThan = "LessThan",
  /** LessThanOrEqual */
  LessThanOrEqual = "LessThanOrEqual",
  /** GreaterOrLessThan */
  GreaterOrLessThan = "GreaterOrLessThan",
}

/**
 * Defines values for ConditionOperator. \
 * {@link KnownConditionOperator} can be used interchangeably with ConditionOperator,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Equals** \
 * **GreaterThan** \
 * **GreaterThanOrEqual** \
 * **LessThan** \
 * **LessThanOrEqual** \
 * **GreaterOrLessThan**
 */
export type ConditionOperator = string;
/** Defines values for IdentityType. */
export type IdentityType = "SystemAssigned" | "UserAssigned" | "None";

/** Optional parameters. */
export interface ScheduledQueryRulesListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type ScheduledQueryRulesListBySubscriptionResponse =
  ScheduledQueryRuleResourceCollection;

/** Optional parameters. */
export interface ScheduledQueryRulesListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type ScheduledQueryRulesListByResourceGroupResponse =
  ScheduledQueryRuleResourceCollection;

/** Optional parameters. */
export interface ScheduledQueryRulesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ScheduledQueryRulesGetResponse = ScheduledQueryRuleResource;

/** Optional parameters. */
export interface ScheduledQueryRulesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type ScheduledQueryRulesCreateOrUpdateResponse =
  ScheduledQueryRuleResource;

/** Optional parameters. */
export interface ScheduledQueryRulesUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type ScheduledQueryRulesUpdateResponse = ScheduledQueryRuleResource;

/** Optional parameters. */
export interface ScheduledQueryRulesDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ScheduledQueryRulesListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type ScheduledQueryRulesListBySubscriptionNextResponse =
  ScheduledQueryRuleResourceCollection;

/** Optional parameters. */
export interface ScheduledQueryRulesListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type ScheduledQueryRulesListByResourceGroupNextResponse =
  ScheduledQueryRuleResourceCollection;

/** Optional parameters. */
export interface MonitorClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
