/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** Represents collection of metric definitions. */
export interface SubscriptionScopeMetricDefinitionCollection {
  /** The values for the metric definitions. */
  value: SubscriptionScopeMetricDefinition[];
}

/** Metric definition class specifies the metadata for a metric. */
export interface SubscriptionScopeMetricDefinition {
  /** Flag to indicate whether the dimension is required. */
  isDimensionRequired?: boolean;
  /** the resource identifier of the resource that emitted the metric. */
  resourceId?: string;
  /** the namespace the metric belongs to. */
  namespace?: string;
  /** the name and the display name of the metric, i.e. it is a localizable string. */
  name?: LocalizableString;
  /** Detailed description of this metric. */
  displayDescription?: string;
  /** Custom category name for this metric. */
  category?: string;
  /** The class of the metric. */
  metricClass?: MetricClass;
  /** the unit of the metric. */
  unit?: MetricUnit;
  /** the primary aggregation type value defining how to use the values for display. */
  primaryAggregationType?: MetricAggregationType;
  /** the collection of what aggregation types are supported. */
  supportedAggregationTypes?: MetricAggregationType[];
  /** the collection of what aggregation intervals are available to be queried. */
  metricAvailabilities?: MetricAvailability[];
  /** the resource identifier of the metric definition. */
  id?: string;
  /** the name and the display name of the dimension, i.e. it is a localizable string. */
  dimensions?: LocalizableString[];
}

/** The localizable string class. */
export interface LocalizableString {
  /** the invariant value. */
  value: string;
  /** the locale specific value. */
  localizedValue?: string;
}

/** Metric availability specifies the time grain (aggregation interval or frequency) and the retention period for that time grain. */
export interface MetricAvailability {
  /** the time grain specifies the aggregation interval for the metric. Expressed as a duration 'PT1M', 'P1D', etc. */
  timeGrain?: string;
  /** the retention period for the metric at the specified timegrain.  Expressed as a duration 'PT1M', 'P1D', etc. */
  retention?: string;
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.) */
export interface ErrorContract {
  /** The error object. */
  error?: ErrorResponse;
}

/** Describes the format of Error response. */
export interface ErrorResponse {
  /** Error code */
  code?: string;
  /** Error message indicating why the operation failed. */
  message?: string;
}

/** Represents collection of metric definitions. */
export interface MetricDefinitionCollection {
  /** the values for the metric definitions. */
  value: MetricDefinition[];
}

/** Metric definition class specifies the metadata for a metric. */
export interface MetricDefinition {
  /** Flag to indicate whether the dimension is required. */
  isDimensionRequired?: boolean;
  /** the resource identifier of the resource that emitted the metric. */
  resourceId?: string;
  /** the namespace the metric belongs to. */
  namespace?: string;
  /** the name and the display name of the metric, i.e. it is a localizable string. */
  name?: LocalizableString;
  /** Detailed description of this metric. */
  displayDescription?: string;
  /** Custom category name for this metric. */
  category?: string;
  /** The class of the metric. */
  metricClass?: MetricClass;
  /** the unit of the metric. */
  unit?: MetricUnit;
  /** the primary aggregation type value defining how to use the values for display. */
  primaryAggregationType?: AggregationType;
  /** the collection of what aggregation types are supported. */
  supportedAggregationTypes?: AggregationType[];
  /** the collection of what aggregation intervals are available to be queried. */
  metricAvailabilities?: MetricAvailability[];
  /** the resource identifier of the metric definition. */
  id?: string;
  /** the name and the display name of the dimension, i.e. it is a localizable string. */
  dimensions?: LocalizableString[];
}

/** The response to a subscription scope metrics query. */
export interface SubscriptionScopeMetricResponse {
  /** The integer value representing the relative cost of the query. */
  cost?: number;
  /** The timespan for which the data was retrieved. Its value consists of two datetimes concatenated, separated by '/'.  This may be adjusted in the future and returned back from what was originally requested. */
  timespan: string;
  /** The interval (window size) for which the metric data was returned in.  This may be adjusted in the future and returned back from what was originally requested.  This is not present if a metadata request was made. */
  interval?: string;
  /** The namespace of the metrics being queried */
  namespace?: string;
  /** The region of the resource being queried for metrics. */
  resourceregion?: string;
  /** the value of the collection. */
  value: SubscriptionScopeMetric[];
}

/** The result data of a query. */
export interface SubscriptionScopeMetric {
  /** the metric Id. */
  id: string;
  /** the resource type of the metric resource. */
  type: string;
  /** the name and the display name of the metric, i.e. it is localizable string. */
  name: LocalizableString;
  /** Detailed description of this metric. */
  displayDescription?: string;
  /** 'Success' or the error details on query failures for this metric. */
  errorCode?: string;
  /** Error message encountered querying this specific metric. */
  errorMessage?: string;
  /** The unit of the metric. */
  unit: MetricUnit;
  /** the time series returned when a data query is performed. */
  timeseries: TimeSeriesElement[];
}

/** A time series result type. The discriminator value is always TimeSeries in this case. */
export interface TimeSeriesElement {
  /** the metadata values returned if $filter was specified in the call. */
  metadatavalues?: MetadataValue[];
  /** An array of data points representing the metric values.  This is only returned if a result type of data is specified. */
  data?: MetricValue[];
}

/** Represents a metric metadata value. */
export interface MetadataValue {
  /** the name of the metadata. */
  name?: LocalizableString;
  /** the value of the metadata. */
  value?: string;
}

/** Represents a metric value. */
export interface MetricValue {
  /** the timestamp for the metric value in ISO 8601 format. */
  timeStamp: Date;
  /** the average value in the time range. */
  average?: number;
  /** the least value in the time range. */
  minimum?: number;
  /** the greatest value in the time range. */
  maximum?: number;
  /** the sum of all of the values in the time range. */
  total?: number;
  /** the number of samples in the time range. Can be used to determine the number of values that contributed to the average value. */
  count?: number;
}

/** Query parameters can also be specified in the body, specifying the same parameter in both the body and query parameters will result in an error. */
export interface SubscriptionScopeMetricsRequestBodyParameters {
  /**
   * The timespan of the query. It is a string with the following format 'startDateTime_ISO/endDateTime_ISO'.
   * This value should be an ISO-8601 formatted string representing time. E.g. "HH:MM:SS" or "HH:MM:SS.mm".
   */
  timespan?: string;
  /** The interval (i.e. timegrain) of the query. */
  interval?: string;
  /** The names of the metrics (comma separated) to retrieve. */
  metricNames?: string;
  /** The list of aggregation types (comma separated) to retrieve. */
  aggregation?: string;
  /** The **$filter** is used to reduce the set of metric data returned.<br>Example:<br>Metric contains metadata A, B and C.<br>- Return all time series of C where A = a1 and B = b1 or b2<br>**$filter=A eq ‘a1’ and B eq ‘b1’ or B eq ‘b2’ and C eq ‘*’**<br>- Invalid variant:<br>**$filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘*’ or B = ‘b2’**<br>This is invalid because the logical or operator cannot separate two different metadata names.<br>- Return all time series where A = a1, B = b1 and C = c1:<br>**$filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘c1’**<br>- Return all time series where A = a1<br>**$filter=A eq ‘a1’ and B eq ‘*’ and C eq ‘*’**. */
  filter?: string;
  /**
   * The maximum number of records to retrieve.
   * Valid only if $filter is specified.
   * Defaults to 10.
   */
  top?: number;
  /**
   * The aggregation to use for sorting results and the direction of the sort.
   * Only one order can be specified.
   * Examples: sum asc.
   */
  orderBy?: string;
  /** Dimension name(s) to rollup results by. For example if you only want to see metric values with a filter like 'City eq Seattle or City eq Tacoma' but don't want to see separate values for each city, you can specify 'RollUpBy=City' to see the results for Seattle and Tacoma rolled up into one timeseries. */
  rollUpBy?: string;
  /** Reduces the set of data collected. The syntax allowed depends on the operation. See the operation's description for details. */
  resultType?: MetricResultType;
  /** Metric namespace where the metrics you want reside. */
  metricNamespace?: string;
  /** When set to true, if the timespan passed in is not supported by this metric, the API will return the result using the closest supported timespan. When set to false, an error is returned for invalid timespan parameters. Defaults to false. */
  autoAdjustTimegrain?: boolean;
  /** When set to false, invalid filter parameter values will be ignored. When set to true, an error is returned for invalid filter parameters. Defaults to true. */
  validateDimensions?: boolean;
}

/** The response to a metrics query. */
export interface Response {
  /** The integer value representing the relative cost of the query. */
  cost?: number;
  /** The timespan for which the data was retrieved. Its value consists of two datetimes concatenated, separated by '/'.  This may be adjusted in the future and returned back from what was originally requested. */
  timespan: string;
  /** The interval (window size) for which the metric data was returned in.  This may be adjusted in the future and returned back from what was originally requested.  This is not present if a metadata request was made. */
  interval?: string;
  /** The namespace of the metrics being queried */
  namespace?: string;
  /** The region of the resource being queried for metrics. */
  resourceregion?: string;
  /** the value of the collection. */
  value: Metric[];
}

/** The result data of a query. */
export interface Metric {
  /** the metric Id. */
  id: string;
  /** the resource type of the metric resource. */
  type: string;
  /** the name and the display name of the metric, i.e. it is localizable string. */
  name: LocalizableString;
  /** Detailed description of this metric. */
  displayDescription?: string;
  /** 'Success' or the error details on query failures for this metric. */
  errorCode?: string;
  /** Error message encountered querying this specific metric. */
  errorMessage?: string;
  /** The unit of the metric. */
  unit: Unit;
  /** the time series returned when a data query is performed. */
  timeseries: TimeSeriesElement[];
}

/** Result of the request to list Microsoft.Insights operations. It contains a list of operations and a URL link to get the next set of results. */
export interface OperationListResult {
  /** List of operations supported by the Microsoft.Insights provider. */
  value?: Operation[];
  /** URL to get the next set of operation list results if there are any. */
  nextLink?: string;
}

/** Microsoft Insights API operation definition. */
export interface Operation {
  /** Operation name: {provider}/{resource}/{operation} */
  name?: string;
  /** Property to specify whether the action is a data action. */
  isDataAction?: boolean;
  /** Display metadata associated with the operation. */
  display?: OperationDisplay;
  /** One property of operation, include metric specifications. */
  serviceSpecification?: ServiceSpecification;
}

/** Display metadata associated with the operation. */
export interface OperationDisplay {
  /** The publisher of this operation. */
  publisher?: string;
  /** Service provider: Microsoft.Insights */
  provider?: string;
  /** Resource on which the operation is performed: AlertRules, Autoscale, etc. */
  resource?: string;
  /** Operation type: Read, write, delete, etc. */
  operation?: string;
  /** The description of the operation. */
  description?: string;
}

/** One property of operation, include log specifications. */
export interface ServiceSpecification {
  /** Log specifications of operation. */
  logSpecifications?: LogSpecification[];
  /** Metric specifications of operation. */
  metricSpecifications?: MetricSpecification[];
  /** Legacy Metric specifications for operation. Deprecated, do not use. */
  legacyMetricSpecifications?: Record<string, unknown>;
}

/** Log specification of operation. */
export interface LogSpecification {
  /** Name of log specification. */
  name?: string;
  /** Display name of log specification. */
  displayName?: string;
  /** Blob duration of specification. */
  blobDuration?: string;
}

/** Metric specification of operation. */
export interface MetricSpecification {
  /** The name of the metric. */
  name?: string;
  /** Display name of the metric. */
  displayName?: string;
  /** Display description of the metric. */
  displayDescription?: string;
  /** The metric unit. Possible values include: Count,Bytes,Seconds,Percent,CountPerSecond,BytesPerSecond,MilliSeconds,ByteSeconds,Unspecified,BitsPerSecond,Cores,MilliCores,NanoCores */
  unit?: string;
  /** The default metric aggregation type. Possible values include: Total,Average,Maximum,Minimum,Count */
  aggregationType?: string;
  /** The supported aggregation types for the metrics. */
  supportedAggregationTypes?: string[];
  /** The supported time grain types for the metrics. */
  supportedTimeGrainTypes?: string[];
  /** The supported time grain types for the metrics. */
  availabilities?: string[];
  /** The metric lock aggregation type. */
  lockAggregationType?: string;
  /** Category or type of metric. */
  category?: string;
  /** The dimensions of metric. */
  dimensions?: DimensionProperties[];
  /** Property to specify whether to fill empty gaps with zero. */
  fillGapWithZero?: boolean;
  /** The internal metric name. */
  internalMetricName?: string;
}

/** Type of operation: get, read, delete, etc. */
export interface DimensionProperties {
  /** Name of dimension. */
  name?: string;
  /** Display name of dimension. */
  displayName?: string;
  /** Legacy usage, should not set. */
  toBeExportedForShoebox?: boolean;
  /** When set, the dimension is hidden from the customer, used in conjunction with the defaultDimensionValues field below */
  isHidden?: boolean;
  /** Default dimension value to be sent down for the hidden dimension during query */
  defaultDimensionValues?: Record<string, unknown>;
}

/** Known values of {@link MetricClass} that the service accepts. */
export enum KnownMetricClass {
  /** Availability */
  Availability = "Availability",
  /** Transactions */
  Transactions = "Transactions",
  /** Errors */
  Errors = "Errors",
  /** Latency */
  Latency = "Latency",
  /** Saturation */
  Saturation = "Saturation"
}

/**
 * Defines values for MetricClass. \
 * {@link KnownMetricClass} can be used interchangeably with MetricClass,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Availability** \
 * **Transactions** \
 * **Errors** \
 * **Latency** \
 * **Saturation**
 */
export type MetricClass = string;

/** Known values of {@link MetricUnit} that the service accepts. */
export enum KnownMetricUnit {
  /** Count */
  Count = "Count",
  /** Bytes */
  Bytes = "Bytes",
  /** Seconds */
  Seconds = "Seconds",
  /** CountPerSecond */
  CountPerSecond = "CountPerSecond",
  /** BytesPerSecond */
  BytesPerSecond = "BytesPerSecond",
  /** Percent */
  Percent = "Percent",
  /** MilliSeconds */
  MilliSeconds = "MilliSeconds",
  /** ByteSeconds */
  ByteSeconds = "ByteSeconds",
  /** Unspecified */
  Unspecified = "Unspecified",
  /** Cores */
  Cores = "Cores",
  /** MilliCores */
  MilliCores = "MilliCores",
  /** NanoCores */
  NanoCores = "NanoCores",
  /** BitsPerSecond */
  BitsPerSecond = "BitsPerSecond"
}

/**
 * Defines values for MetricUnit. \
 * {@link KnownMetricUnit} can be used interchangeably with MetricUnit,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Count** \
 * **Bytes** \
 * **Seconds** \
 * **CountPerSecond** \
 * **BytesPerSecond** \
 * **Percent** \
 * **MilliSeconds** \
 * **ByteSeconds** \
 * **Unspecified** \
 * **Cores** \
 * **MilliCores** \
 * **NanoCores** \
 * **BitsPerSecond**
 */
export type MetricUnit = string;

/** Known values of {@link MetricAggregationType} that the service accepts. */
export enum KnownMetricAggregationType {
  /** None */
  None = "None",
  /** Average */
  Average = "Average",
  /** Count */
  Count = "Count",
  /** Minimum */
  Minimum = "Minimum",
  /** Maximum */
  Maximum = "Maximum",
  /** Total */
  Total = "Total"
}

/**
 * Defines values for MetricAggregationType. \
 * {@link KnownMetricAggregationType} can be used interchangeably with MetricAggregationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Average** \
 * **Count** \
 * **Minimum** \
 * **Maximum** \
 * **Total**
 */
export type MetricAggregationType = string;

/** Known values of {@link MetricResultType} that the service accepts. */
export enum KnownMetricResultType {
  /** Data */
  Data = "Data",
  /** Metadata */
  Metadata = "Metadata"
}

/**
 * Defines values for MetricResultType. \
 * {@link KnownMetricResultType} can be used interchangeably with MetricResultType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Data** \
 * **Metadata**
 */
export type MetricResultType = string;
/** Defines values for AggregationType. */
export type AggregationType =
  | "None"
  | "Average"
  | "Count"
  | "Minimum"
  | "Maximum"
  | "Total";
/** Defines values for ResultType. */
export type ResultType = "Data" | "Metadata";
/** Defines values for Unit. */
export type Unit =
  | "Count"
  | "Bytes"
  | "Seconds"
  | "CountPerSecond"
  | "BytesPerSecond"
  | "Percent"
  | "MilliSeconds"
  | "ByteSeconds"
  | "Unspecified"
  | "Cores"
  | "MilliCores"
  | "NanoCores"
  | "BitsPerSecond";

/** Optional parameters. */
export interface MetricDefinitionsListAtSubscriptionScopeOptionalParams
  extends coreClient.OperationOptions {
  /** Metric namespace where the metrics you want reside. */
  metricnamespace?: string;
}

/** Contains response data for the listAtSubscriptionScope operation. */
export type MetricDefinitionsListAtSubscriptionScopeResponse = SubscriptionScopeMetricDefinitionCollection;

/** Optional parameters. */
export interface MetricDefinitionsListOptionalParams
  extends coreClient.OperationOptions {
  /** Metric namespace where the metrics you want reside. */
  metricnamespace?: string;
}

/** Contains response data for the list operation. */
export type MetricDefinitionsListResponse = MetricDefinitionCollection;

/** Optional parameters. */
export interface MetricsListAtSubscriptionScopeOptionalParams
  extends coreClient.OperationOptions {
  /** Metric namespace where the metrics you want reside. */
  metricnamespace?: string;
  /** The timespan of the query. It is a string with the following format 'startDateTime_ISO/endDateTime_ISO'. */
  timespan?: string;
  /** The interval (i.e. timegrain) of the query. */
  interval?: string;
  /** The names of the metrics (comma separated) to retrieve. */
  metricnames?: string;
  /** The list of aggregation types (comma separated) to retrieve. */
  aggregation?: string;
  /**
   * The maximum number of records to retrieve.
   * Valid only if $filter is specified.
   * Defaults to 10.
   */
  top?: number;
  /**
   * The aggregation to use for sorting results and the direction of the sort.
   * Only one order can be specified.
   * Examples: sum asc.
   */
  orderby?: string;
  /** The **$filter** is used to reduce the set of metric data returned.<br>Example:<br>Metric contains metadata A, B and C.<br>- Return all time series of C where A = a1 and B = b1 or b2<br>**$filter=A eq ‘a1’ and B eq ‘b1’ or B eq ‘b2’ and C eq ‘*’**<br>- Invalid variant:<br>**$filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘*’ or B = ‘b2’**<br>This is invalid because the logical or operator cannot separate two different metadata names.<br>- Return all time series where A = a1, B = b1 and C = c1:<br>**$filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘c1’**<br>- Return all time series where A = a1<br>**$filter=A eq ‘a1’ and B eq ‘*’ and C eq ‘*’**. */
  filter?: string;
  /** Reduces the set of data collected. The syntax allowed depends on the operation. See the operation's description for details. */
  resultType?: MetricResultType;
  /** When set to true, if the timespan passed in is not supported by this metric, the API will return the result using the closest supported timespan. When set to false, an error is returned for invalid timespan parameters. Defaults to false. */
  autoAdjustTimegrain?: boolean;
  /** When set to false, invalid filter parameter values will be ignored. When set to true, an error is returned for invalid filter parameters. Defaults to true. */
  validateDimensions?: boolean;
}

/** Contains response data for the listAtSubscriptionScope operation. */
export type MetricsListAtSubscriptionScopeResponse = SubscriptionScopeMetricResponse;

/** Optional parameters. */
export interface MetricsListAtSubscriptionScopePostOptionalParams
  extends coreClient.OperationOptions {
  /** Metric namespace where the metrics you want reside. */
  metricnamespace?: string;
  /** The timespan of the query. It is a string with the following format 'startDateTime_ISO/endDateTime_ISO'. */
  timespan?: string;
  /** The interval (i.e. timegrain) of the query. */
  interval?: string;
  /** The names of the metrics (comma separated) to retrieve. */
  metricnames?: string;
  /** The list of aggregation types (comma separated) to retrieve. */
  aggregation?: string;
  /**
   * The maximum number of records to retrieve.
   * Valid only if $filter is specified.
   * Defaults to 10.
   */
  top?: number;
  /**
   * The aggregation to use for sorting results and the direction of the sort.
   * Only one order can be specified.
   * Examples: sum asc.
   */
  orderby?: string;
  /** The **$filter** is used to reduce the set of metric data returned.<br>Example:<br>Metric contains metadata A, B and C.<br>- Return all time series of C where A = a1 and B = b1 or b2<br>**$filter=A eq ‘a1’ and B eq ‘b1’ or B eq ‘b2’ and C eq ‘*’**<br>- Invalid variant:<br>**$filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘*’ or B = ‘b2’**<br>This is invalid because the logical or operator cannot separate two different metadata names.<br>- Return all time series where A = a1, B = b1 and C = c1:<br>**$filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘c1’**<br>- Return all time series where A = a1<br>**$filter=A eq ‘a1’ and B eq ‘*’ and C eq ‘*’**. */
  filter?: string;
  /** Reduces the set of data collected. The syntax allowed depends on the operation. See the operation's description for details. */
  resultType?: MetricResultType;
  /** When set to true, if the timespan passed in is not supported by this metric, the API will return the result using the closest supported timespan. When set to false, an error is returned for invalid timespan parameters. Defaults to false. */
  autoAdjustTimegrain?: boolean;
  /** When set to false, invalid filter parameter values will be ignored. When set to true, an error is returned for invalid filter parameters. Defaults to true. */
  validateDimensions?: boolean;
  /** Parameters serialized in the body */
  body?: SubscriptionScopeMetricsRequestBodyParameters;
}

/** Contains response data for the listAtSubscriptionScopePost operation. */
export type MetricsListAtSubscriptionScopePostResponse = SubscriptionScopeMetricResponse;

/** Optional parameters. */
export interface MetricsListOptionalParams extends coreClient.OperationOptions {
  /** Metric namespace where the metrics you want reside. */
  metricnamespace?: string;
  /** The timespan of the query. It is a string with the following format 'startDateTime_ISO/endDateTime_ISO'. */
  timespan?: string;
  /** The interval (i.e. timegrain) of the query. */
  interval?: string;
  /** The names of the metrics (comma separated) to retrieve. */
  metricnames?: string;
  /** The list of aggregation types (comma separated) to retrieve. */
  aggregation?: string;
  /**
   * The maximum number of records to retrieve.
   * Valid only if $filter is specified.
   * Defaults to 10.
   */
  top?: number;
  /**
   * The aggregation to use for sorting results and the direction of the sort.
   * Only one order can be specified.
   * Examples: sum asc.
   */
  orderby?: string;
  /** The **$filter** is used to reduce the set of metric data returned.<br>Example:<br>Metric contains metadata A, B and C.<br>- Return all time series of C where A = a1 and B = b1 or b2<br>**$filter=A eq ‘a1’ and B eq ‘b1’ or B eq ‘b2’ and C eq ‘*’**<br>- Invalid variant:<br>**$filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘*’ or B = ‘b2’**<br>This is invalid because the logical or operator cannot separate two different metadata names.<br>- Return all time series where A = a1, B = b1 and C = c1:<br>**$filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘c1’**<br>- Return all time series where A = a1<br>**$filter=A eq ‘a1’ and B eq ‘*’ and C eq ‘*’**. */
  filter?: string;
  /** When set to true, if the timespan passed in is not supported by this metric, the API will return the result using the closest supported timespan. When set to false, an error is returned for invalid timespan parameters. Defaults to false. */
  autoAdjustTimegrain?: boolean;
  /** When set to false, invalid filter parameter values will be ignored. When set to true, an error is returned for invalid filter parameters. Defaults to true. */
  validateDimensions?: boolean;
  /** Reduces the set of data collected. The syntax allowed depends on the operation. See the operation's description for details. */
  resultType?: ResultType;
}

/** Contains response data for the list operation. */
export type MetricsListResponse = Response;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationListResult;

/** Optional parameters. */
export interface MonitorClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
