/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** An email receiver. */
export interface EmailReceiver {
  /** The name of the email receiver. Names must be unique across all receivers within an action group. */
  name: string;
  /** The email address of this receiver. */
  emailAddress: string;
  /** Indicates whether to use common alert schema. */
  useCommonAlertSchema?: boolean;
  /**
   * The receiver status of the e-mail.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: ReceiverStatus;
}

/** An SMS receiver. */
export interface SmsReceiver {
  /** The name of the SMS receiver. Names must be unique across all receivers within an action group. */
  name: string;
  /** The country code of the SMS receiver. */
  countryCode: string;
  /** The phone number of the SMS receiver. */
  phoneNumber: string;
  /**
   * The status of the receiver.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: ReceiverStatus;
}

/** A webhook receiver. */
export interface WebhookReceiver {
  /** The name of the webhook receiver. Names must be unique across all receivers within an action group. */
  name: string;
  /** The URI where webhooks should be sent. */
  serviceUri: string;
  /** Indicates whether to use common alert schema. */
  useCommonAlertSchema?: boolean;
  /** Indicates whether or not use AAD authentication. */
  useAadAuth?: boolean;
  /** Indicates the webhook app object Id for aad auth. */
  objectId?: string;
  /** Indicates the identifier uri for aad auth. */
  identifierUri?: string;
  /** Indicates the tenant id for aad auth. */
  tenantId?: string;
  /** The principal id of the managed identity. The value can be "None", "SystemAssigned" */
  managedIdentity?: string;
}

/** An Itsm receiver. */
export interface ItsmReceiver {
  /** The name of the Itsm receiver. Names must be unique across all receivers within an action group. */
  name: string;
  /** OMS LA instance identifier. */
  workspaceId: string;
  /** Unique identification of ITSM connection among multiple defined in above workspace. */
  connectionId: string;
  /** JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well. */
  ticketConfiguration: string;
  /** Region in which workspace resides. Supported values:'centralindia','japaneast','southeastasia','australiasoutheast','uksouth','westcentralus','canadacentral','eastus','westeurope' */
  region: string;
}

/** The Azure mobile App push notification receiver. */
export interface AzureAppPushReceiver {
  /** The name of the Azure mobile app push receiver. Names must be unique across all receivers within an action group. */
  name: string;
  /** The email address registered for the Azure mobile app. */
  emailAddress: string;
}

/** The Azure Automation Runbook notification receiver. */
export interface AutomationRunbookReceiver {
  /** The Azure automation account Id which holds this runbook and authenticate to Azure resource. */
  automationAccountId: string;
  /** The name for this runbook. */
  runbookName: string;
  /** The resource id for webhook linked to this runbook. */
  webhookResourceId: string;
  /** Indicates whether this instance is global runbook. */
  isGlobalRunbook: boolean;
  /** Indicates name of the webhook. */
  name?: string;
  /** The URI where webhooks should be sent. */
  serviceUri?: string;
  /** Indicates whether to use common alert schema. */
  useCommonAlertSchema?: boolean;
  /** The principal id of the managed identity. The value can be "None", "SystemAssigned" */
  managedIdentity?: string;
}

/** A voice receiver. */
export interface VoiceReceiver {
  /** The name of the voice receiver. Names must be unique across all receivers within an action group. */
  name: string;
  /** The country code of the voice receiver. */
  countryCode: string;
  /** The phone number of the voice receiver. */
  phoneNumber: string;
}

/** A logic app receiver. */
export interface LogicAppReceiver {
  /** The name of the logic app receiver. Names must be unique across all receivers within an action group. */
  name: string;
  /** The azure resource id of the logic app receiver. */
  resourceId: string;
  /** The callback url where http request sent to. */
  callbackUrl: string;
  /** Indicates whether to use common alert schema. */
  useCommonAlertSchema?: boolean;
  /** The principal id of the managed identity. The value can be "None", "SystemAssigned" */
  managedIdentity?: string;
}

/** An azure function receiver. */
export interface AzureFunctionReceiver {
  /** The name of the azure function receiver. Names must be unique across all receivers within an action group. */
  name: string;
  /** The azure resource id of the function app. */
  functionAppResourceId: string;
  /** The function name in the function app. */
  functionName: string;
  /** The http trigger url where http request sent to. */
  httpTriggerUrl: string;
  /** Indicates whether to use common alert schema. */
  useCommonAlertSchema?: boolean;
  /** The principal id of the managed identity. The value can be "None", "SystemAssigned" */
  managedIdentity?: string;
}

/** An arm role receiver. */
export interface ArmRoleReceiver {
  /** The name of the arm role receiver. Names must be unique across all receivers within an action group. */
  name: string;
  /** The arm role id. */
  roleId: string;
  /** Indicates whether to use common alert schema. */
  useCommonAlertSchema?: boolean;
}

/** An Event hub receiver. */
export interface EventHubReceiver {
  /** The name of the Event hub receiver. Names must be unique across all receivers within an action group. */
  name: string;
  /** The Event Hub namespace */
  eventHubNameSpace: string;
  /** The name of the specific Event Hub queue */
  eventHubName: string;
  /** Indicates whether to use common alert schema. */
  useCommonAlertSchema?: boolean;
  /** The tenant Id for the subscription containing this event hub */
  tenantId?: string;
  /** The Id for the subscription containing this event hub */
  subscriptionId: string;
  /** The principal id of the managed identity. The value can be "None", "SystemAssigned" */
  managedIdentity?: string;
}

/** An Incident receiver. */
export interface IncidentReceiver {
  /** The name of the Incident receiver. Names must be unique across all receivers within an action group. */
  name: string;
  /** The incident service connection */
  connection: IncidentServiceConnection;
  /** The incident management service type */
  incidentManagementService: IncidentManagementService;
  /** Field mappings for the incident service */
  mappings: { [propertyName: string]: string };
}

/** The connection info for Incident Receiver. */
export interface IncidentServiceConnection {
  /** The name of the connection. */
  name: string;
  /** GUID value representing the connection ID for the incident management service. */
  id: string;
}

/** An azure resource object */
export interface AzureResource {
  /**
   * Azure resource Id
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Azure resource name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Azure resource type
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Resource location */
  location: string;
  /** Resource tags */
  tags?: { [propertyName: string]: string };
  /** Managed service identity (system assigned and/or user assigned identities) */
  identity?: ManagedServiceIdentity;
}

/** Managed service identity (system assigned and/or user assigned identities) */
export interface ManagedServiceIdentity {
  /**
   * The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /** Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed). */
  type: ManagedServiceIdentityType;
  /** The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests. */
  userAssignedIdentities?: {
    [propertyName: string]: UserAssignedIdentity | null;
  };
}

/** User assigned identity properties */
export interface UserAssignedIdentity {
  /**
   * The principal ID of the assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The client ID of the assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly clientId?: string;
}

/** Describes the format of Error response. */
export interface ErrorResponse {
  /** Error code */
  code?: string;
  /** Error message indicating why the operation failed. */
  message?: string;
}

/** An action group object for the body of patch operations. */
export interface ActionGroupPatchBody {
  /** Resource tags */
  tags?: { [propertyName: string]: string };
  /** Managed service identity (system assigned and/or user assigned identities) */
  identity?: ManagedServiceIdentity;
  /** Indicates whether this action group is enabled. If an action group is not enabled, then none of its actions will be activated. */
  enabled?: boolean;
}

/** The request body which contain contact detail metadata */
export interface NotificationRequestBody {
  /** The value of the supported alert type. Supported alert type values are: servicehealth, metricstaticthreshold, metricsdynamicthreshold, logalertv2, smartalert, webtestalert, logalertv1numresult, logalertv1metricmeasurement, resourcehealth, activitylog, actualcostbudget, forecastedbudget */
  alertType: string;
  /** The list of email receivers that are part of this action group. */
  emailReceivers?: EmailReceiver[];
  /** The list of SMS receivers that are part of this action group. */
  smsReceivers?: SmsReceiver[];
  /** The list of webhook receivers that are part of this action group. */
  webhookReceivers?: WebhookReceiver[];
  /** The list of ITSM receivers that are part of this action group. */
  itsmReceivers?: ItsmReceiver[];
  /** The list of AzureAppPush receivers that are part of this action group. */
  azureAppPushReceivers?: AzureAppPushReceiver[];
  /** The list of AutomationRunbook receivers that are part of this action group. */
  automationRunbookReceivers?: AutomationRunbookReceiver[];
  /** The list of voice receivers that are part of this action group. */
  voiceReceivers?: VoiceReceiver[];
  /** The list of logic app receivers that are part of this action group. */
  logicAppReceivers?: LogicAppReceiver[];
  /** The list of azure function receivers that are part of this action group. */
  azureFunctionReceivers?: AzureFunctionReceiver[];
  /** The list of ARM role receivers that are part of this action group. Roles are Azure RBAC roles and only built-in roles are supported. */
  armRoleReceivers?: ArmRoleReceiver[];
  /** The list of event hub receivers that are part of this action group. */
  eventHubReceivers?: EventHubReceiver[];
  /** The list of incident receivers that are part of this action group. */
  incidentReceivers?: IncidentReceiver[];
}

/** The details of the test notification results. */
export interface TestNotificationDetailsResponse {
  /** The context info */
  context?: Context;
  /** The overall state */
  state: string;
  /** The completed time */
  completedTime?: string;
  /** The created time */
  createdTime?: string;
  /** The list of action detail */
  actionDetails?: ActionDetail[];
}

/** The context info */
export interface Context {
  /** The source of the notification request */
  notificationSource?: string;
  /** The context id type */
  contextType?: string;
}

/** The action detail */
export interface ActionDetail {
  /** The mechanism type */
  mechanismType?: string;
  /** The name of the action */
  name?: string;
  /** The status of the action */
  status?: string;
  /** The substatus of the action */
  subState?: string;
  /** The send time */
  sendTime?: string;
  /** The detail of the friendly error message */
  detail?: string;
}

/** A list of action groups. */
export interface ActionGroupList {
  /** The list of action groups. */
  value?: ActionGroupResource[];
  /** Provides the link to retrieve the next set of elements. */
  nextLink?: string;
}

/** Describes a receiver that should be resubscribed. */
export interface EnableRequest {
  /** The name of the receiver to resubscribe. */
  receiverName: string;
}

/** Represents a collection of scheduled query rule resources. */
export interface ScheduledQueryRuleResourceCollection {
  /** The values for the scheduled query rule resources. */
  value?: ScheduledQueryRuleResource[];
  /**
   * Provides the link to retrieve the next set of elements.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** The scheduled query rule resource. */
export interface ScheduledQueryRuleResource {
  /**
   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** The identity of the resource. */
  identity?: Identity;
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The geo-location where the resource lives */
  location: string;
  /** Indicates the type of scheduled query rule. The default is LogAlert. */
  kind?: Kind;
  /**
   * The etag field is *not* required. If it is provided in the response body, it must also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly etag?: string;
  /**
   * SystemData of ScheduledQueryRule.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /**
   * The api-version used when creating this alert rule
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdWithApiVersion?: string;
  /**
   * True if alert rule is legacy Log Analytic rule
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isLegacyLogAnalyticsRule?: boolean;
  /** The description of the scheduled query rule. */
  description?: string;
  /** The display name of the alert rule */
  displayName?: string;
  /** Severity of the alert. Should be an integer between [0-4]. Value of 0 is severest. Relevant and required only for rules of the kind LogAlert. */
  severity?: AlertSeverity;
  /** The flag which indicates whether this scheduled query rule is enabled. Value should be true or false */
  enabled?: boolean;
  /** The list of resource id's that this scheduled query rule is scoped to. */
  scopes?: string[];
  /** How often the scheduled query rule is evaluated represented in ISO 8601 duration format. Relevant and required only for rules of the kind LogAlert. */
  evaluationFrequency?: string;
  /** The period of time (in ISO 8601 duration format) on which the Alert query will be executed (bin size). Relevant and required only for rules of the kind LogAlert. */
  windowSize?: string;
  /** If specified then overrides the query time range (default is WindowSize*NumberOfEvaluationPeriods). Relevant only for rules of the kind LogAlert. */
  overrideQueryTimeRange?: string;
  /** List of resource type of the target resource(s) on which the alert is created/updated. For example if the scope is a resource group and targetResourceTypes is Microsoft.Compute/virtualMachines, then a different alert will be fired for each virtual machine in the resource group which meet the alert criteria. Relevant only for rules of the kind LogAlert */
  targetResourceTypes?: string[];
  /** The rule criteria that defines the conditions of the scheduled query rule. */
  criteria?: ScheduledQueryRuleCriteria;
  /** Mute actions for the chosen period of time (in ISO 8601 duration format) after the alert is fired. Relevant only for rules of the kind LogAlert. */
  muteActionsDuration?: string;
  /** Actions to invoke when the alert fires. */
  actions?: Actions;
  /**
   * The flag which indicates whether this scheduled query rule has been configured to be stored in the customer's storage. The default is false.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isWorkspaceAlertsStorageConfigured?: boolean;
  /** The flag which indicates whether this scheduled query rule should be stored in the customer's storage. The default is false. Relevant only for rules of the kind LogAlert. */
  checkWorkspaceAlertsStorageConfigured?: boolean;
  /** The flag which indicates whether the provided query should be validated or not. The default is false. Relevant only for rules of the kind LogAlert. */
  skipQueryValidation?: boolean;
  /** The flag that indicates whether the alert should be automatically resolved or not. The default is true. Relevant only for rules of kinds LogAlert and SimpleLogAlert. */
  autoMitigate?: boolean;
  /** Defines the configuration for resolving fired alerts. Relevant only for rules of kinds LogAlert and SimpleLogAlert. */
  resolveConfiguration?: RuleResolveConfiguration;
}

/** Identity for the resource. */
export interface Identity {
  /**
   * The principal ID of resource identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The tenant ID of resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /** Type of managed service identity. */
  type: IdentityType;
  /** The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'. */
  userAssignedIdentities?: { [propertyName: string]: UserIdentityProperties };
}

/** User assigned identity properties. */
export interface UserIdentityProperties {
  /**
   * The principal id of user assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The client id of user assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly clientId?: string;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The timestamp of resource last modification (UTC) */
  lastModifiedAt?: Date;
}

/** The rule criteria that defines the conditions of the scheduled query rule. */
export interface ScheduledQueryRuleCriteria {
  /** A list of conditions to evaluate against the specified scopes */
  allOf?: Condition[];
}

/** A condition of the scheduled query rule. */
export interface Condition {
  /** Specifies the type of threshold criteria */
  criterionType?: CriterionType;
  /** Log query alert */
  query?: string;
  /** Aggregation type. Relevant and required only for rules of the kind LogAlert. */
  timeAggregation?: TimeAggregation;
  /** The column containing the metric measure number. Relevant only for rules of the kind LogAlert. */
  metricMeasureColumn?: string;
  /** The column containing the resource id. The content of the column must be a uri formatted as resource id. Relevant only for rules of the kind LogAlert. */
  resourceIdColumn?: string;
  /** List of Dimensions conditions */
  dimensions?: Dimension[];
  /** The criteria operator. Relevant and required only for rules of the kind LogAlert. */
  operator?: ConditionOperator;
  /** the criteria threshold value that activates the alert. Relevant and required only for static threshold rules of the kind LogAlert. */
  threshold?: number;
  /** The extent of deviation required to trigger an alert. Allowed values are 'Low', 'Medium' and 'High'. This will affect how tight the threshold is to the metric series pattern. Relevant only for dynamic threshold rules of the kind LogAlert. */
  alertSensitivity?: string;
  /** Use this option to set the date from which to start learning the metric historical data and calculate the dynamic thresholds (in ISO8601 format). Relevant only for dynamic threshold rules of the kind LogAlert. */
  ignoreDataBefore?: Date;
  /** The minimum number of violations required within the selected lookback time window required to raise an alert. Relevant only for rules of the kind LogAlert. */
  failingPeriods?: ConditionFailingPeriods;
  /** The name of the metric to be sent. Relevant and required only for rules of the kind LogToMetric. */
  metricName?: string;
  /** The minimum results count that should be found for triggering an alert. Relevant only for rules of the kind SimpleLogAlert. */
  minRecurrenceCount?: number;
}

/** Dimension splitting and filtering definition */
export interface Dimension {
  /** Name of the dimension */
  name: string;
  /** Operator for dimension values */
  operator: DimensionOperator;
  /** List of dimension values */
  values: string[];
}

/** The minimum number of violations required within the selected lookback time window required to raise an alert. Relevant only for rules of the kind LogAlert. */
export interface ConditionFailingPeriods {
  /** The number of aggregated lookback points. The lookback time window is calculated based on the aggregation granularity (windowSize) and the selected number of aggregated points. Default value is 1 */
  numberOfEvaluationPeriods?: number;
  /** The number of violations to trigger an alert. Should be smaller or equal to numberOfEvaluationPeriods. Default value is 1 */
  minFailingPeriodsToAlert?: number;
}

/** Actions to invoke when the alert fires. */
export interface Actions {
  /** Action Group resource Ids to invoke when the alert fires. */
  actionGroups?: string[];
  /** The properties of an alert payload. */
  customProperties?: { [propertyName: string]: string };
  /** The properties of an action properties. */
  actionProperties?: { [propertyName: string]: string };
}

/** TBD. Relevant only for rules of the kind LogAlert. */
export interface RuleResolveConfiguration {
  /** The flag that indicates whether or not to auto resolve a fired alert. */
  autoResolved?: boolean;
  /** The duration a rule must evaluate as healthy before the fired alert is automatically resolved represented in ISO 8601 duration format. */
  timeToResolve?: string;
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.) */
export interface ErrorContract {
  /** The error object. */
  error?: ErrorResponseAutoGenerated;
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.) */
export interface ErrorResponseAutoGenerated {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorResponseAutoGenerated[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
}

/** The scheduled query rule resource for patch operations. */
export interface ScheduledQueryRuleResourcePatch {
  /** The identity of the resource. */
  identity?: Identity;
  /** Resource tags */
  tags?: { [propertyName: string]: string };
  /**
   * The api-version used when creating this alert rule
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdWithApiVersion?: string;
  /**
   * True if alert rule is legacy Log Analytic rule
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isLegacyLogAnalyticsRule?: boolean;
  /** The description of the scheduled query rule. */
  description?: string;
  /** The display name of the alert rule */
  displayName?: string;
  /** Severity of the alert. Should be an integer between [0-4]. Value of 0 is severest. Relevant and required only for rules of the kind LogAlert. */
  severity?: AlertSeverity;
  /** The flag which indicates whether this scheduled query rule is enabled. Value should be true or false */
  enabled?: boolean;
  /** The list of resource id's that this scheduled query rule is scoped to. */
  scopes?: string[];
  /** How often the scheduled query rule is evaluated represented in ISO 8601 duration format. Relevant and required only for rules of the kind LogAlert. */
  evaluationFrequency?: string;
  /** The period of time (in ISO 8601 duration format) on which the Alert query will be executed (bin size). Relevant and required only for rules of the kind LogAlert. */
  windowSize?: string;
  /** If specified then overrides the query time range (default is WindowSize*NumberOfEvaluationPeriods). Relevant only for rules of the kind LogAlert. */
  overrideQueryTimeRange?: string;
  /** List of resource type of the target resource(s) on which the alert is created/updated. For example if the scope is a resource group and targetResourceTypes is Microsoft.Compute/virtualMachines, then a different alert will be fired for each virtual machine in the resource group which meet the alert criteria. Relevant only for rules of the kind LogAlert */
  targetResourceTypes?: string[];
  /** The rule criteria that defines the conditions of the scheduled query rule. */
  criteria?: ScheduledQueryRuleCriteria;
  /** Mute actions for the chosen period of time (in ISO 8601 duration format) after the alert is fired. Relevant only for rules of the kind LogAlert. */
  muteActionsDuration?: string;
  /** Actions to invoke when the alert fires. */
  actions?: Actions;
  /**
   * The flag which indicates whether this scheduled query rule has been configured to be stored in the customer's storage. The default is false.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isWorkspaceAlertsStorageConfigured?: boolean;
  /** The flag which indicates whether this scheduled query rule should be stored in the customer's storage. The default is false. Relevant only for rules of the kind LogAlert. */
  checkWorkspaceAlertsStorageConfigured?: boolean;
  /** The flag which indicates whether the provided query should be validated or not. The default is false. Relevant only for rules of the kind LogAlert. */
  skipQueryValidation?: boolean;
  /** The flag that indicates whether the alert should be automatically resolved or not. The default is true. Relevant only for rules of kinds LogAlert and SimpleLogAlert. */
  autoMitigate?: boolean;
  /** Defines the configuration for resolving fired alerts. Relevant only for rules of kinds LogAlert and SimpleLogAlert. */
  resolveConfiguration?: RuleResolveConfiguration;
}

/** An action group resource. */
export interface ActionGroupResource extends AzureResource {
  /** The short name of the action group. This will be used in SMS messages. */
  groupShortName?: string;
  /** Indicates whether this action group is enabled. If an action group is not enabled, then none of its receivers will receive communications. */
  enabled?: boolean;
  /** The list of email receivers that are part of this action group. */
  emailReceivers?: EmailReceiver[];
  /** The list of SMS receivers that are part of this action group. */
  smsReceivers?: SmsReceiver[];
  /** The list of webhook receivers that are part of this action group. */
  webhookReceivers?: WebhookReceiver[];
  /** The list of ITSM receivers that are part of this action group. */
  itsmReceivers?: ItsmReceiver[];
  /** The list of AzureAppPush receivers that are part of this action group. */
  azureAppPushReceivers?: AzureAppPushReceiver[];
  /** The list of AutomationRunbook receivers that are part of this action group. */
  automationRunbookReceivers?: AutomationRunbookReceiver[];
  /** The list of voice receivers that are part of this action group. */
  voiceReceivers?: VoiceReceiver[];
  /** The list of logic app receivers that are part of this action group. */
  logicAppReceivers?: LogicAppReceiver[];
  /** The list of azure function receivers that are part of this action group. */
  azureFunctionReceivers?: AzureFunctionReceiver[];
  /** The list of ARM role receivers that are part of this action group. Roles are Azure RBAC roles and only built-in roles are supported. */
  armRoleReceivers?: ArmRoleReceiver[];
  /** The list of event hub receivers that are part of this action group. */
  eventHubReceivers?: EventHubReceiver[];
  /** The list of incident receivers that are part of this action group. */
  incidentReceivers?: IncidentReceiver[];
}

/** Defines headers for ActionGroups_createNotificationsAtActionGroupResourceLevel operation. */
export interface ActionGroupsCreateNotificationsAtActionGroupResourceLevelHeaders {
  /** The location header that has the polling uri. */
  location?: string;
}

/** Known values of {@link IncidentManagementService} that the service accepts. */
export enum KnownIncidentManagementService {
  /** Icm */
  Icm = "Icm",
}

/**
 * Defines values for IncidentManagementService. \
 * {@link KnownIncidentManagementService} can be used interchangeably with IncidentManagementService,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Icm**
 */
export type IncidentManagementService = string;

/** Known values of {@link ManagedServiceIdentityType} that the service accepts. */
export enum KnownManagedServiceIdentityType {
  /** None */
  None = "None",
  /** SystemAssigned */
  SystemAssigned = "SystemAssigned",
  /** UserAssigned */
  UserAssigned = "UserAssigned",
  /** SystemAssignedUserAssigned */
  SystemAssignedUserAssigned = "SystemAssigned,UserAssigned",
}

/**
 * Defines values for ManagedServiceIdentityType. \
 * {@link KnownManagedServiceIdentityType} can be used interchangeably with ManagedServiceIdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **SystemAssigned** \
 * **UserAssigned** \
 * **SystemAssigned,UserAssigned**
 */
export type ManagedServiceIdentityType = string;

/** Known values of {@link Kind} that the service accepts. */
export enum KnownKind {
  /** LogAlert */
  LogAlert = "LogAlert",
  /** SimpleLogAlert */
  SimpleLogAlert = "SimpleLogAlert",
  /** LogToMetric */
  LogToMetric = "LogToMetric",
}

/**
 * Defines values for Kind. \
 * {@link KnownKind} can be used interchangeably with Kind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **LogAlert** \
 * **SimpleLogAlert** \
 * **LogToMetric**
 */
export type Kind = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  /** User */
  User = "User",
  /** Application */
  Application = "Application",
  /** ManagedIdentity */
  ManagedIdentity = "ManagedIdentity",
  /** Key */
  Key = "Key",
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link AlertSeverity} that the service accepts. */
export enum KnownAlertSeverity {
  /** Zero */
  Zero = 0,
  /** One */
  One = 1,
  /** Two */
  Two = 2,
  /** Three */
  Three = 3,
  /** Four */
  Four = 4,
}

/**
 * Defines values for AlertSeverity. \
 * {@link KnownAlertSeverity} can be used interchangeably with AlertSeverity,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **0** \
 * **1** \
 * **2** \
 * **3** \
 * **4**
 */
export type AlertSeverity = number;

/** Known values of {@link CriterionType} that the service accepts. */
export enum KnownCriterionType {
  /** StaticThresholdCriterion */
  StaticThresholdCriterion = "StaticThresholdCriterion",
  /** DynamicThresholdCriterion */
  DynamicThresholdCriterion = "DynamicThresholdCriterion",
}

/**
 * Defines values for CriterionType. \
 * {@link KnownCriterionType} can be used interchangeably with CriterionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **StaticThresholdCriterion** \
 * **DynamicThresholdCriterion**
 */
export type CriterionType = string;

/** Known values of {@link TimeAggregation} that the service accepts. */
export enum KnownTimeAggregation {
  /** Count */
  Count = "Count",
  /** Average */
  Average = "Average",
  /** Minimum */
  Minimum = "Minimum",
  /** Maximum */
  Maximum = "Maximum",
  /** Total */
  Total = "Total",
}

/**
 * Defines values for TimeAggregation. \
 * {@link KnownTimeAggregation} can be used interchangeably with TimeAggregation,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Count** \
 * **Average** \
 * **Minimum** \
 * **Maximum** \
 * **Total**
 */
export type TimeAggregation = string;

/** Known values of {@link DimensionOperator} that the service accepts. */
export enum KnownDimensionOperator {
  /** Include */
  Include = "Include",
  /** Exclude */
  Exclude = "Exclude",
}

/**
 * Defines values for DimensionOperator. \
 * {@link KnownDimensionOperator} can be used interchangeably with DimensionOperator,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Include** \
 * **Exclude**
 */
export type DimensionOperator = string;

/** Known values of {@link ConditionOperator} that the service accepts. */
export enum KnownConditionOperator {
  /** Equals */
  Equals = "Equals",
  /** GreaterThan */
  GreaterThan = "GreaterThan",
  /** GreaterThanOrEqual */
  GreaterThanOrEqual = "GreaterThanOrEqual",
  /** LessThan */
  LessThan = "LessThan",
  /** LessThanOrEqual */
  LessThanOrEqual = "LessThanOrEqual",
  /** GreaterOrLessThan */
  GreaterOrLessThan = "GreaterOrLessThan",
}

/**
 * Defines values for ConditionOperator. \
 * {@link KnownConditionOperator} can be used interchangeably with ConditionOperator,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Equals** \
 * **GreaterThan** \
 * **GreaterThanOrEqual** \
 * **LessThan** \
 * **LessThanOrEqual** \
 * **GreaterOrLessThan**
 */
export type ConditionOperator = string;
/** Defines values for ReceiverStatus. */
export type ReceiverStatus = "NotSpecified" | "Enabled" | "Disabled";
/** Defines values for IdentityType. */
export type IdentityType = "SystemAssigned" | "UserAssigned" | "None";

/** Optional parameters. */
export interface ActionGroupsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type ActionGroupsCreateOrUpdateResponse = ActionGroupResource;

/** Optional parameters. */
export interface ActionGroupsGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ActionGroupsGetResponse = ActionGroupResource;

/** Optional parameters. */
export interface ActionGroupsDeleteOptionalParams extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ActionGroupsUpdateOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type ActionGroupsUpdateResponse = ActionGroupResource;

/** Optional parameters. */
export interface ActionGroupsCreateNotificationsAtActionGroupResourceLevelOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createNotificationsAtActionGroupResourceLevel operation. */
export type ActionGroupsCreateNotificationsAtActionGroupResourceLevelResponse =
  TestNotificationDetailsResponse;

/** Optional parameters. */
export interface ActionGroupsGetTestNotificationsAtActionGroupResourceLevelOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getTestNotificationsAtActionGroupResourceLevel operation. */
export type ActionGroupsGetTestNotificationsAtActionGroupResourceLevelResponse =
  TestNotificationDetailsResponse;

/** Optional parameters. */
export interface ActionGroupsListBySubscriptionIdOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionId operation. */
export type ActionGroupsListBySubscriptionIdResponse = ActionGroupList;

/** Optional parameters. */
export interface ActionGroupsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type ActionGroupsListByResourceGroupResponse = ActionGroupList;

/** Optional parameters. */
export interface ActionGroupsEnableReceiverOptionalParams extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ScheduledQueryRulesListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type ScheduledQueryRulesListBySubscriptionResponse = ScheduledQueryRuleResourceCollection;

/** Optional parameters. */
export interface ScheduledQueryRulesListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type ScheduledQueryRulesListByResourceGroupResponse = ScheduledQueryRuleResourceCollection;

/** Optional parameters. */
export interface ScheduledQueryRulesGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ScheduledQueryRulesGetResponse = ScheduledQueryRuleResource;

/** Optional parameters. */
export interface ScheduledQueryRulesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type ScheduledQueryRulesCreateOrUpdateResponse = ScheduledQueryRuleResource;

/** Optional parameters. */
export interface ScheduledQueryRulesUpdateOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type ScheduledQueryRulesUpdateResponse = ScheduledQueryRuleResource;

/** Optional parameters. */
export interface ScheduledQueryRulesDeleteOptionalParams extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ScheduledQueryRulesListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type ScheduledQueryRulesListBySubscriptionNextResponse =
  ScheduledQueryRuleResourceCollection;

/** Optional parameters. */
export interface ScheduledQueryRulesListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type ScheduledQueryRulesListByResourceGroupNextResponse =
  ScheduledQueryRuleResourceCollection;

/** Optional parameters. */
export interface MonitorClientOptionalParams extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
