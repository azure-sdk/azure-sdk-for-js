/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreRestPipeline from "@azure/core-rest-pipeline";
import {
  PipelineRequest,
  PipelineResponse,
  SendRequest
} from "@azure/core-rest-pipeline";
import * as coreAuth from "@azure/core-auth";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller
} from "@azure/core-lro";
import { createLroSpec } from "./lroImpl";
import { TenantActionGroupsImpl } from "./operations";
import { TenantActionGroups } from "./operationsInterfaces";
import * as Parameters from "./models/parameters";
import * as Mappers from "./models/mappers";
import {
  MonitorClientOptionalParams,
  TenantNotificationRequestBody,
  CreateNotificationsAtTenantActionGroupResourceLevelOptionalParams,
  CreateNotificationsAtTenantActionGroupResourceLevelResponse,
  GetTestNotificationsAtTenantActionGroupResourceLevelOptionalParams,
  GetTestNotificationsAtTenantActionGroupResourceLevelResponse
} from "./models";

export class MonitorClient extends coreClient.ServiceClient {
  $host: string;
  apiVersion: string;

  /**
   * Initializes a new instance of the MonitorClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param options The parameter options
   */
  constructor(
    credentials: coreAuth.TokenCredential,
    options?: MonitorClientOptionalParams
  ) {
    if (credentials === undefined) {
      throw new Error("'credentials' cannot be null");
    }

    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: MonitorClientOptionalParams = {
      requestContentType: "application/json; charset=utf-8",
      credential: credentials
    };

    const packageDetails = `azsdk-js-arm-monitor/8.0.0-beta.5`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix
      },
      endpoint:
        options.endpoint ?? options.baseUri ?? "https://management.azure.com"
    };
    super(optionsWithDefaults);

    let bearerTokenAuthenticationPolicyFound: boolean = false;
    if (options?.pipeline && options.pipeline.getOrderedPolicies().length > 0) {
      const pipelinePolicies: coreRestPipeline.PipelinePolicy[] = options.pipeline.getOrderedPolicies();
      bearerTokenAuthenticationPolicyFound = pipelinePolicies.some(
        (pipelinePolicy) =>
          pipelinePolicy.name ===
          coreRestPipeline.bearerTokenAuthenticationPolicyName
      );
    }
    if (
      !options ||
      !options.pipeline ||
      options.pipeline.getOrderedPolicies().length == 0 ||
      !bearerTokenAuthenticationPolicyFound
    ) {
      this.pipeline.removePolicy({
        name: coreRestPipeline.bearerTokenAuthenticationPolicyName
      });
      this.pipeline.addPolicy(
        coreRestPipeline.bearerTokenAuthenticationPolicy({
          credential: credentials,
          scopes:
            optionsWithDefaults.credentialScopes ??
            `${optionsWithDefaults.endpoint}/.default`,
          challengeCallbacks: {
            authorizeRequestOnChallenge:
              coreClient.authorizeRequestOnClaimChallenge
          }
        })
      );
    }

    // Assigning values to Constant parameters
    this.$host = options.$host || "https://management.azure.com";
    this.apiVersion = options.apiVersion || "2023-05-01-preview";
    this.tenantActionGroups = new TenantActionGroupsImpl(this);
    this.addCustomApiVersionPolicy(options.apiVersion);
  }

  /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
  private addCustomApiVersionPolicy(apiVersion?: string) {
    if (!apiVersion) {
      return;
    }
    const apiVersionPolicy = {
      name: "CustomApiVersionPolicy",
      async sendRequest(
        request: PipelineRequest,
        next: SendRequest
      ): Promise<PipelineResponse> {
        const param = request.url.split("?");
        if (param.length > 1) {
          const newParams = param[1].split("&").map((item) => {
            if (item.indexOf("api-version") > -1) {
              return "api-version=" + apiVersion;
            } else {
              return item;
            }
          });
          request.url = param[0] + "?" + newParams.join("&");
        }
        return next(request);
      }
    };
    this.pipeline.addPolicy(apiVersionPolicy);
  }

  /**
   * Send test notifications to a set of provided receivers
   * @param managementGroupId The management group id.
   * @param tenantActionGroupName The name of the action group.
   * @param xMsClientTenantId The tenant ID of the client making the request.
   * @param notificationRequest The notification request body which includes the contact details
   * @param options The options parameters.
   */
  async beginCreateNotificationsAtTenantActionGroupResourceLevel(
    managementGroupId: string,
    tenantActionGroupName: string,
    xMsClientTenantId: string,
    notificationRequest: TenantNotificationRequestBody,
    options?: CreateNotificationsAtTenantActionGroupResourceLevelOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<
        CreateNotificationsAtTenantActionGroupResourceLevelResponse
      >,
      CreateNotificationsAtTenantActionGroupResourceLevelResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<CreateNotificationsAtTenantActionGroupResourceLevelResponse> => {
      return this.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        managementGroupId,
        tenantActionGroupName,
        xMsClientTenantId,
        notificationRequest,
        options
      },
      spec: createNotificationsAtTenantActionGroupResourceLevelOperationSpec
    });
    const poller = await createHttpPoller<
      CreateNotificationsAtTenantActionGroupResourceLevelResponse,
      OperationState<
        CreateNotificationsAtTenantActionGroupResourceLevelResponse
      >
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Send test notifications to a set of provided receivers
   * @param managementGroupId The management group id.
   * @param tenantActionGroupName The name of the action group.
   * @param xMsClientTenantId The tenant ID of the client making the request.
   * @param notificationRequest The notification request body which includes the contact details
   * @param options The options parameters.
   */
  async beginCreateNotificationsAtTenantActionGroupResourceLevelAndWait(
    managementGroupId: string,
    tenantActionGroupName: string,
    xMsClientTenantId: string,
    notificationRequest: TenantNotificationRequestBody,
    options?: CreateNotificationsAtTenantActionGroupResourceLevelOptionalParams
  ): Promise<CreateNotificationsAtTenantActionGroupResourceLevelResponse> {
    const poller = await this.beginCreateNotificationsAtTenantActionGroupResourceLevel(
      managementGroupId,
      tenantActionGroupName,
      xMsClientTenantId,
      notificationRequest,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Get the test notifications by the notification id
   * @param managementGroupId The management group id.
   * @param tenantActionGroupName The name of the action group.
   * @param xMsClientTenantId The tenant ID of the client making the request.
   * @param notificationId The notification id
   * @param options The options parameters.
   */
  getTestNotificationsAtTenantActionGroupResourceLevel(
    managementGroupId: string,
    tenantActionGroupName: string,
    xMsClientTenantId: string,
    notificationId: string,
    options?: GetTestNotificationsAtTenantActionGroupResourceLevelOptionalParams
  ): Promise<GetTestNotificationsAtTenantActionGroupResourceLevelResponse> {
    return this.sendOperationRequest(
      {
        managementGroupId,
        tenantActionGroupName,
        xMsClientTenantId,
        notificationId,
        options
      },
      getTestNotificationsAtTenantActionGroupResourceLevelOperationSpec
    );
  }

  tenantActionGroups: TenantActionGroups;
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createNotificationsAtTenantActionGroupResourceLevelOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Insights/tenantActionGroups/{tenantActionGroupName}/createNotifications",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.TestNotificationDetailsResponse
    },
    201: {
      bodyMapper: Mappers.TestNotificationDetailsResponse
    },
    202: {
      bodyMapper: Mappers.TestNotificationDetailsResponse
    },
    204: {
      bodyMapper: Mappers.TestNotificationDetailsResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.notificationRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupId,
    Parameters.tenantActionGroupName
  ],
  headerParameters: [
    Parameters.contentType,
    Parameters.accept,
    Parameters.xMsClientTenantId
  ],
  mediaType: "json",
  serializer
};
const getTestNotificationsAtTenantActionGroupResourceLevelOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Insights/tenantActionGroups/{tenantActionGroupName}/notificationStatus/{notificationId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TestNotificationDetailsResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupId,
    Parameters.tenantActionGroupName,
    Parameters.notificationId
  ],
  headerParameters: [Parameters.accept, Parameters.xMsClientTenantId],
  serializer
};
