/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { MetricAlerts } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { MonitorClient } from "../monitorClient.js";
import {
  MetricAlertsGetOptionalParams,
  MetricAlertsGetResponse,
  MetricAlertResource,
  MetricAlertsCreateOrUpdateOptionalParams,
  MetricAlertsCreateOrUpdateResponse,
  MetricAlertResourcePatch,
  MetricAlertsUpdateOptionalParams,
  MetricAlertsUpdateResponse,
  MetricAlertsDeleteOptionalParams,
  MetricAlertsListByResourceGroupOptionalParams,
  MetricAlertsListByResourceGroupResponse,
  MetricAlertsListBySubscriptionOptionalParams,
  MetricAlertsListBySubscriptionResponse,
} from "../models/index.js";

/** Class containing MetricAlerts operations. */
export class MetricAlertsImpl implements MetricAlerts {
  private readonly client: MonitorClient;

  /**
   * Initialize a new instance of the class MetricAlerts class.
   * @param client Reference to the service client
   */
  constructor(client: MonitorClient) {
    this.client = client;
  }

  /**
   * Retrieve an alert rule definition.
   * @param resourceGroupName The name of the resource group.
   * @param ruleName The name of the alert rule.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    ruleName: string,
    options?: MetricAlertsGetOptionalParams,
  ): Promise<MetricAlertsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, ruleName, options },
      getOperationSpec,
    );
  }

  /**
   * Create or update an alert rule.
   * @param resourceGroupName The name of the resource group.
   * @param ruleName The name of the alert rule.
   * @param parameters The metric alert rule resource.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    ruleName: string,
    parameters: MetricAlertResource,
    options?: MetricAlertsCreateOrUpdateOptionalParams,
  ): Promise<MetricAlertsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, ruleName, parameters, options },
      createOrUpdateOperationSpec,
    );
  }

  /**
   * Update an alert rule. Only tags, enabled, and actions fields can be updated.
   * @param resourceGroupName The name of the resource group.
   * @param ruleName The name of the alert rule.
   * @param parameters The metric alert rule resource for patch operations.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    ruleName: string,
    parameters: MetricAlertResourcePatch,
    options?: MetricAlertsUpdateOptionalParams,
  ): Promise<MetricAlertsUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, ruleName, parameters, options },
      updateOperationSpec,
    );
  }

  /**
   * Delete an alert rule.
   * @param resourceGroupName The name of the resource group.
   * @param ruleName The name of the alert rule.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    ruleName: string,
    options?: MetricAlertsDeleteOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, ruleName, options },
      deleteOperationSpec,
    );
  }

  /**
   * Retrieve alert rule definitions in a resource group.
   * @param resourceGroupName The name of the resource group.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: MetricAlertsListByResourceGroupOptionalParams,
  ): Promise<MetricAlertsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec,
    );
  }

  /**
   * Retrieve alert rule definitions in a subscription.
   * @param options The options parameters.
   */
  listBySubscription(
    options?: MetricAlertsListBySubscriptionOptionalParams,
  ): Promise<MetricAlertsListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/metricAlerts/{ruleName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MetricAlertResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponseAutoGenerated,
    },
  },
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName1,
    Parameters.ruleName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/metricAlerts/{ruleName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.MetricAlertResource,
    },
    201: {
      bodyMapper: Mappers.MetricAlertResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponseAutoGenerated,
    },
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName1,
    Parameters.ruleName,
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/metricAlerts/{ruleName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.MetricAlertResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponseAutoGenerated,
    },
  },
  requestBody: Parameters.parameters1,
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName1,
    Parameters.ruleName,
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/metricAlerts/{ruleName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponseAutoGenerated,
    },
  },
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName1,
    Parameters.ruleName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/metricAlerts",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MetricAlertResourceCollection,
    },
    default: {
      bodyMapper: Mappers.ErrorResponseAutoGenerated,
    },
  },
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName1,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/microsoft.insights/metricAlerts",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MetricAlertResourceCollection,
    },
    default: {
      bodyMapper: Mappers.ErrorResponseAutoGenerated,
    },
  },
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer,
};
