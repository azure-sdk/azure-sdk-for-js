/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { MonitoringAccounts } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MonitorClient } from "../monitorClient";
import {
  MonitoringAccountResource,
  MonitoringAccountsListByResourceGroupNextOptionalParams,
  MonitoringAccountsListByResourceGroupOptionalParams,
  MonitoringAccountsListBySubscriptionNextOptionalParams,
  MonitoringAccountsListBySubscriptionOptionalParams,
  MonitoringAccountsListByResourceGroupResponse,
  MonitoringAccountsListBySubscriptionResponse,
  MonitoringAccountsGetOptionalParams,
  MonitoringAccountsGetResponse,
  MonitoringAccountsCreateOptionalParams,
  MonitoringAccountsCreateResponse,
  MonitoringAccountsUpdateOptionalParams,
  MonitoringAccountsUpdateResponse,
  MonitoringAccountsDeleteOptionalParams,
  MonitoringAccountsListByResourceGroupNextResponse,
  MonitoringAccountsListBySubscriptionNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing MonitoringAccounts operations. */
export class MonitoringAccountsImpl implements MonitoringAccounts {
  private readonly client: MonitorClient;

  /**
   * Initialize a new instance of the class MonitoringAccounts class.
   * @param client Reference to the service client
   */
  constructor(client: MonitorClient) {
    this.client = client;
  }

  /**
   * Lists all monitoring accounts in the specified resource group
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: MonitoringAccountsListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<MonitoringAccountResource> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByResourceGroupPagingPage(resourceGroupName, options);
      }
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: MonitoringAccountsListByResourceGroupOptionalParams
  ): AsyncIterableIterator<MonitoringAccountResource[]> {
    let result = await this._listByResourceGroup(resourceGroupName, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: MonitoringAccountsListByResourceGroupOptionalParams
  ): AsyncIterableIterator<MonitoringAccountResource> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists all monitoring accounts in the specified subscription
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: MonitoringAccountsListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<MonitoringAccountResource> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listBySubscriptionPagingPage(options);
      }
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: MonitoringAccountsListBySubscriptionOptionalParams
  ): AsyncIterableIterator<MonitoringAccountResource[]> {
    let result = await this._listBySubscription(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listBySubscriptionPagingAll(
    options?: MonitoringAccountsListBySubscriptionOptionalParams
  ): AsyncIterableIterator<MonitoringAccountResource> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Lists all monitoring accounts in the specified resource group
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: MonitoringAccountsListByResourceGroupOptionalParams
  ): Promise<MonitoringAccountsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec
    );
  }

  /**
   * Lists all monitoring accounts in the specified subscription
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: MonitoringAccountsListBySubscriptionOptionalParams
  ): Promise<MonitoringAccountsListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec
    );
  }

  /**
   * Returns the specific monitoring account
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitoringAccountName The name of the monitoring account.  The name is case insensitive
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    monitoringAccountName: string,
    options?: MonitoringAccountsGetOptionalParams
  ): Promise<MonitoringAccountsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, monitoringAccountName, options },
      getOperationSpec
    );
  }

  /**
   * Create or update a monitoring account
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitoringAccountName The name of the monitoring account.  The name is case insensitive
   * @param monitoringAccountProperties Properties that need to be specified to create a new monitoring
   *                                    account
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    monitoringAccountName: string,
    monitoringAccountProperties: MonitoringAccountResource,
    options?: MonitoringAccountsCreateOptionalParams
  ): Promise<MonitoringAccountsCreateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        monitoringAccountName,
        monitoringAccountProperties,
        options
      },
      createOperationSpec
    );
  }

  /**
   * Updates part of a monitoring account
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitoringAccountName The name of the monitoring account.  The name is case insensitive
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    monitoringAccountName: string,
    options?: MonitoringAccountsUpdateOptionalParams
  ): Promise<MonitoringAccountsUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, monitoringAccountName, options },
      updateOperationSpec
    );
  }

  /**
   * Delete an monitoring account
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitoringAccountName The name of the monitoring account.  The name is case insensitive
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    monitoringAccountName: string,
    options?: MonitoringAccountsDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, monitoringAccountName, options },
      deleteOperationSpec
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: MonitoringAccountsListByResourceGroupNextOptionalParams
  ): Promise<MonitoringAccountsListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec
    );
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: MonitoringAccountsListBySubscriptionNextOptionalParams
  ): Promise<MonitoringAccountsListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Monitor/accounts",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MonitoringAccountResourceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponseAutoGenerated2
    }
  },
  queryParameters: [Parameters.apiVersion14],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Monitor/accounts",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MonitoringAccountResourceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponseAutoGenerated2
    }
  },
  queryParameters: [Parameters.apiVersion14],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Monitor/accounts/{monitoringAccountName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MonitoringAccountResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponseAutoGenerated2
    }
  },
  queryParameters: [Parameters.apiVersion14],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.monitoringAccountName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Monitor/accounts/{monitoringAccountName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.MonitoringAccountResource
    },
    201: {
      bodyMapper: Mappers.MonitoringAccountResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponseAutoGenerated2
    }
  },
  requestBody: Parameters.monitoringAccountProperties,
  queryParameters: [Parameters.apiVersion14],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.monitoringAccountName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Monitor/accounts/{monitoringAccountName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.MonitoringAccountResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponseAutoGenerated2
    }
  },
  requestBody: Parameters.monitoringAccountProperties1,
  queryParameters: [Parameters.apiVersion14],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.monitoringAccountName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Monitor/accounts/{monitoringAccountName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponseAutoGenerated2
    }
  },
  queryParameters: [Parameters.apiVersion14],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.monitoringAccountName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MonitoringAccountResourceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponseAutoGenerated2
    }
  },
  queryParameters: [Parameters.apiVersion14],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MonitoringAccountResourceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponseAutoGenerated2
    }
  },
  queryParameters: [Parameters.apiVersion14],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
