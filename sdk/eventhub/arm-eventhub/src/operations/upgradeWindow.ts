/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { UpgradeWindow } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { EventHubManagementClient } from "../eventHubManagementClient";
import {
  ClusterUpgradeWindow,
  UpgradeWindowPatchOptionalParams,
  UpgradeWindowPatchResponse,
  UpgradeWindowGetOptionalParams,
  UpgradeWindowGetResponse
} from "../models";

/** Class containing UpgradeWindow operations. */
export class UpgradeWindowImpl implements UpgradeWindow {
  private readonly client: EventHubManagementClient;

  /**
   * Initialize a new instance of the class UpgradeWindow class.
   * @param client Reference to the service client
   */
  constructor(client: EventHubManagementClient) {
    this.client = client;
  }

  /**
   * Replace all specified Event Hubs Cluster upgrade window settings with those contained in the request
   * body. Leaves the settings not specified in the request body unmodified.
   * @param resourceGroupName Name of the resource group within the azure subscription.
   * @param clusterName The name of the Event Hubs Cluster.
   * @param parameters Parameters for updating Event Hubs Clusters Upgrade Window
   * @param options The options parameters.
   */
  patch(
    resourceGroupName: string,
    clusterName: string,
    parameters: ClusterUpgradeWindow,
    options?: UpgradeWindowPatchOptionalParams
  ): Promise<UpgradeWindowPatchResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, clusterName, parameters, options },
      patchOperationSpec
    );
  }

  /**
   * Get all Event Hubs Cluster upgrade window settings
   * @param resourceGroupName Name of the resource group within the azure subscription.
   * @param clusterName The name of the Event Hubs Cluster.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    clusterName: string,
    options?: UpgradeWindowGetOptionalParams
  ): Promise<UpgradeWindowGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, clusterName, options },
      getOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const patchOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/clusters/{clusterName}/upgradewindow",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.ClusterUpgradeWindow
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters14,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/clusters/{clusterName}/upgradewindow",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ClusterUpgradeWindow
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
