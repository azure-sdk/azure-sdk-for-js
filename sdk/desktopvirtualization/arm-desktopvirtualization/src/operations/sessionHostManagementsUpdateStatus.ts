/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { SessionHostManagementsUpdateStatus } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { DesktopVirtualizationAPIClient } from "../desktopVirtualizationAPIClient.js";
import {
  SessionHostManagementsUpdateStatusGetOptionalParams,
  SessionHostManagementsUpdateStatusGetResponse,
} from "../models/index.js";

/** Class containing SessionHostManagementsUpdateStatus operations. */
export class SessionHostManagementsUpdateStatusImpl implements SessionHostManagementsUpdateStatus {
  private readonly client: DesktopVirtualizationAPIClient;

  /**
   * Initialize a new instance of the class SessionHostManagementsUpdateStatus class.
   * @param client Reference to the service client
   */
  constructor(client: DesktopVirtualizationAPIClient) {
    this.client = client;
  }

  /**
   * Get a SessionHostManagementUpdateStatus.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param hostPoolName The name of the host pool within the specified resource group
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    hostPoolName: string,
    options?: SessionHostManagementsUpdateStatusGetOptionalParams,
  ): Promise<SessionHostManagementsUpdateStatusGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, hostPoolName, options },
      getOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/sessionHostManagements/default/sessionHostUpdateStatuses/default",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SessionHostManagementUpdateStatus,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.hostPoolName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
