/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { MsixPackages } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { DesktopVirtualizationAPIClient } from "../desktopVirtualizationAPIClient";
import {
  MsixPackage,
  MsixPackagesListNextOptionalParams,
  MsixPackagesListOptionalParams,
  MsixPackagesListResponse,
  MsixPackagesGetOptionalParams,
  MsixPackagesGetResponse,
  MsixPackagesCreateOrUpdateOptionalParams,
  MsixPackagesCreateOrUpdateResponse,
  MsixPackagePatch,
  MsixPackagesUpdateOptionalParams,
  MsixPackagesUpdateResponse,
  MsixPackagesDeleteOptionalParams,
  MsixPackagesListNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing MsixPackages operations. */
export class MsixPackagesImpl implements MsixPackages {
  private readonly client: DesktopVirtualizationAPIClient;

  /**
   * Initialize a new instance of the class MsixPackages class.
   * @param client Reference to the service client
   */
  constructor(client: DesktopVirtualizationAPIClient) {
    this.client = client;
  }

  /**
   * List MSIX packages in hostpool.
   * @param options The options parameters.
   */
  public list(
    options?: MsixPackagesListOptionalParams,
  ): PagedAsyncIterableIterator<MsixPackage> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(options, settings);
      },
    };
  }

  private async *listPagingPage(
    options?: MsixPackagesListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<MsixPackage[]> {
    let result: MsixPackagesListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    options?: MsixPackagesListOptionalParams,
  ): AsyncIterableIterator<MsixPackage> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * List MSIX packages in hostpool.
   * @param options The options parameters.
   */
  private _list(
    options?: MsixPackagesListOptionalParams,
  ): Promise<MsixPackagesListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * Get a msixpackage.
   * @param msixPackageFullName The version specific package full name of the MSIX package within
   *                            specified hostpool
   * @param options The options parameters.
   */
  get(
    msixPackageFullName: string,
    options?: MsixPackagesGetOptionalParams,
  ): Promise<MsixPackagesGetResponse> {
    return this.client.sendOperationRequest(
      { msixPackageFullName, options },
      getOperationSpec,
    );
  }

  /**
   * Create or update a MSIX package.
   * @param msixPackageFullName The version specific package full name of the MSIX package within
   *                            specified hostpool
   * @param resource Object containing  MSIX Package definitions.
   * @param options The options parameters.
   */
  createOrUpdate(
    msixPackageFullName: string,
    resource: MsixPackage,
    options?: MsixPackagesCreateOrUpdateOptionalParams,
  ): Promise<MsixPackagesCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { msixPackageFullName, resource, options },
      createOrUpdateOperationSpec,
    );
  }

  /**
   * Update an  MSIX Package.
   * @param msixPackageFullName The version specific package full name of the MSIX package within
   *                            specified hostpool
   * @param properties Object containing MSIX Package definitions.
   * @param options The options parameters.
   */
  update(
    msixPackageFullName: string,
    properties: MsixPackagePatch,
    options?: MsixPackagesUpdateOptionalParams,
  ): Promise<MsixPackagesUpdateResponse> {
    return this.client.sendOperationRequest(
      { msixPackageFullName, properties, options },
      updateOperationSpec,
    );
  }

  /**
   * Remove an MSIX Package.
   * @param msixPackageFullName The version specific package full name of the MSIX package within
   *                            specified hostpool
   * @param options The options parameters.
   */
  delete(
    msixPackageFullName: string,
    options?: MsixPackagesDeleteOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { msixPackageFullName, options },
      deleteOperationSpec,
    );
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    nextLink: string,
    options?: MsixPackagesListNextOptionalParams,
  ): Promise<MsixPackagesListNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.DesktopVirtualization/msixPackages",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MsixPackageList,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.pageSize,
    Parameters.isDescending,
    Parameters.initialSkip,
  ],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.DesktopVirtualization/msixPackages/{msixPackageFullName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MsixPackage,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.msixPackageFullName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.DesktopVirtualization/msixPackages/{msixPackageFullName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.MsixPackage,
    },
    201: {
      bodyMapper: Mappers.MsixPackage,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.resource3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.msixPackageFullName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.DesktopVirtualization/msixPackages/{msixPackageFullName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.MsixPackage,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.properties3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.msixPackageFullName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.DesktopVirtualization/msixPackages/{msixPackageFullName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.msixPackageFullName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MsixPackageList,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
