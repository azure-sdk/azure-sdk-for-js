/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { AppAttachPackages } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { DesktopVirtualizationAPIClient } from "../desktopVirtualizationAPIClient";
import {
  AppAttachPackage,
  AppAttachPackagesListBySubscriptionNextOptionalParams,
  AppAttachPackagesListBySubscriptionOptionalParams,
  AppAttachPackagesListBySubscriptionResponse,
  AppAttachPackagesListByResourceGroupNextOptionalParams,
  AppAttachPackagesListByResourceGroupOptionalParams,
  AppAttachPackagesListByResourceGroupResponse,
  AppAttachPackagesGetOptionalParams,
  AppAttachPackagesGetResponse,
  AppAttachPackagesCreateOrUpdateOptionalParams,
  AppAttachPackagesCreateOrUpdateResponse,
  AppAttachPackagePatch,
  AppAttachPackagesUpdateOptionalParams,
  AppAttachPackagesUpdateResponse,
  AppAttachPackagesDeleteOptionalParams,
  AppAttachPackagesListBySubscriptionNextResponse,
  AppAttachPackagesListByResourceGroupNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing AppAttachPackages operations. */
export class AppAttachPackagesImpl implements AppAttachPackages {
  private readonly client: DesktopVirtualizationAPIClient;

  /**
   * Initialize a new instance of the class AppAttachPackages class.
   * @param client Reference to the service client
   */
  constructor(client: DesktopVirtualizationAPIClient) {
    this.client = client;
  }

  /**
   * List App Attach packages in subscription.
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: AppAttachPackagesListBySubscriptionOptionalParams,
  ): PagedAsyncIterableIterator<AppAttachPackage> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionPagingPage(options, settings);
      },
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: AppAttachPackagesListBySubscriptionOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<AppAttachPackage[]> {
    let result: AppAttachPackagesListBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySubscription(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySubscriptionPagingAll(
    options?: AppAttachPackagesListBySubscriptionOptionalParams,
  ): AsyncIterableIterator<AppAttachPackage> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * List App Attach packages in resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: AppAttachPackagesListByResourceGroupOptionalParams,
  ): PagedAsyncIterableIterator<AppAttachPackage> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByResourceGroupPagingPage(
          resourceGroupName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: AppAttachPackagesListByResourceGroupOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<AppAttachPackage[]> {
    let result: AppAttachPackagesListByResourceGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByResourceGroup(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: AppAttachPackagesListByResourceGroupOptionalParams,
  ): AsyncIterableIterator<AppAttachPackage> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List App Attach packages in subscription.
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: AppAttachPackagesListBySubscriptionOptionalParams,
  ): Promise<AppAttachPackagesListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec,
    );
  }

  /**
   * List App Attach packages in resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: AppAttachPackagesListByResourceGroupOptionalParams,
  ): Promise<AppAttachPackagesListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec,
    );
  }

  /**
   * Get an app attach package.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param appAttachPackageName The name of the App Attach package
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    appAttachPackageName: string,
    options?: AppAttachPackagesGetOptionalParams,
  ): Promise<AppAttachPackagesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, appAttachPackageName, options },
      getOperationSpec,
    );
  }

  /**
   * Create or update an App Attach package.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param appAttachPackageName The name of the App Attach package
   * @param resource Object containing App Attach Package definitions.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    appAttachPackageName: string,
    resource: AppAttachPackage,
    options?: AppAttachPackagesCreateOrUpdateOptionalParams,
  ): Promise<AppAttachPackagesCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, appAttachPackageName, resource, options },
      createOrUpdateOperationSpec,
    );
  }

  /**
   * Update an App Attach Package
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param appAttachPackageName The name of the App Attach package
   * @param properties Object containing App Attach Package definition.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    appAttachPackageName: string,
    properties: AppAttachPackagePatch,
    options?: AppAttachPackagesUpdateOptionalParams,
  ): Promise<AppAttachPackagesUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, appAttachPackageName, properties, options },
      updateOperationSpec,
    );
  }

  /**
   * Remove an App Attach Package.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param appAttachPackageName The name of the App Attach package
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    appAttachPackageName: string,
    options?: AppAttachPackagesDeleteOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, appAttachPackageName, options },
      deleteOperationSpec,
    );
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: AppAttachPackagesListBySubscriptionNextOptionalParams,
  ): Promise<AppAttachPackagesListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec,
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: AppAttachPackagesListByResourceGroupNextOptionalParams,
  ): Promise<AppAttachPackagesListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.DesktopVirtualization/appAttachPackages",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AppAttachPackageList,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/appAttachPackages",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AppAttachPackageList,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/appAttachPackages/{appAttachPackageName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AppAttachPackage,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.appAttachPackageName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/appAttachPackages/{appAttachPackageName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.AppAttachPackage,
    },
    201: {
      bodyMapper: Mappers.AppAttachPackage,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.resource,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.appAttachPackageName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/appAttachPackages/{appAttachPackageName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.AppAttachPackage,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.properties,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.appAttachPackageName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/appAttachPackages/{appAttachPackageName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.appAttachPackageName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AppAttachPackageList,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AppAttachPackageList,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
