/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter,
} from "@azure/core-client";
import {
  AppAttachPackage as AppAttachPackageMapper,
  AppAttachPackagePatch as AppAttachPackagePatchMapper,
  ApplicationGroup as ApplicationGroupMapper,
  ApplicationGroupPatch as ApplicationGroupPatchMapper,
  HostPool as HostPoolMapper,
  HostPoolPatch as HostPoolPatchMapper,
  MsixImageURI as MsixImageURIMapper,
  ImportPackageInfoRequest as ImportPackageInfoRequestMapper,
  MsixPackage as MsixPackageMapper,
  MsixPackagePatch as MsixPackagePatchMapper,
  ScalingPlan as ScalingPlanMapper,
  ScalingPlanPatch as ScalingPlanPatchMapper,
  Workspace as WorkspaceMapper,
  WorkspacePatch as WorkspacePatchMapper,
  Application as ApplicationMapper,
  ApplicationPatch as ApplicationPatchMapper,
  DesktopPatch as DesktopPatchMapper,
  PrivateEndpointConnectionOnHostPoolWithSystemData as PrivateEndpointConnectionOnHostPoolWithSystemDataMapper,
  SessionHostPatch as SessionHostPatchMapper,
  SendMessage as SendMessageMapper,
  ScalingPlanPersonalSchedule as ScalingPlanPersonalScheduleMapper,
  ScalingPlanPersonalSchedulePatch as ScalingPlanPersonalSchedulePatchMapper,
  ScalingPlanPooledSchedule as ScalingPlanPooledScheduleMapper,
  ScalingPlanPooledSchedulePatch as ScalingPlanPooledSchedulePatchMapper,
  PrivateEndpointConnectionOnWorkspaceWithSystemData as PrivateEndpointConnectionOnWorkspaceWithSystemDataMapper,
} from "../models/mappers";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String",
    },
  },
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2024-09-10",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String",
    },
  },
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "Uuid",
    },
  },
};

export const filter: OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String",
    },
  },
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    constraints: {
      MaxLength: 90,
      MinLength: 1,
    },
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const appAttachPackageName: OperationURLParameter = {
  parameterPath: "appAttachPackageName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-z0-9]([a-z0-9]|(-(?!-))){1,61}[a-z0-9]$"),
      MaxLength: 100,
      MinLength: 3,
    },
    serializedName: "appAttachPackageName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String",
    },
  },
};

export const resource: OperationParameter = {
  parameterPath: "resource",
  mapper: AppAttachPackageMapper,
};

export const properties: OperationParameter = {
  parameterPath: "properties",
  mapper: AppAttachPackagePatchMapper,
};

export const pageSize: OperationQueryParameter = {
  parameterPath: ["options", "pageSize"],
  mapper: {
    serializedName: "pageSize",
    type: {
      name: "Number",
    },
  },
};

export const isDescending: OperationQueryParameter = {
  parameterPath: ["options", "isDescending"],
  mapper: {
    serializedName: "isDescending",
    type: {
      name: "Boolean",
    },
  },
};

export const initialSkip: OperationQueryParameter = {
  parameterPath: ["options", "initialSkip"],
  mapper: {
    serializedName: "initialSkip",
    type: {
      name: "Number",
    },
  },
};

export const applicationGroupName: OperationURLParameter = {
  parameterPath: "applicationGroupName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[A-Za-z0-9@.\\-_ ]*$"),
      MaxLength: 64,
      MinLength: 3,
    },
    serializedName: "applicationGroupName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource1: OperationParameter = {
  parameterPath: "resource",
  mapper: ApplicationGroupMapper,
};

export const properties1: OperationParameter = {
  parameterPath: "properties",
  mapper: ApplicationGroupPatchMapper,
};

export const hostPoolName: OperationURLParameter = {
  parameterPath: "hostPoolName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[A-Za-z0-9@.\\-_ ]*$"),
      MaxLength: 64,
      MinLength: 3,
    },
    serializedName: "hostPoolName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource2: OperationParameter = {
  parameterPath: "resource",
  mapper: HostPoolMapper,
};

export const properties2: OperationParameter = {
  parameterPath: "properties",
  mapper: HostPoolPatchMapper,
};

export const force: OperationQueryParameter = {
  parameterPath: ["options", "force"],
  mapper: {
    serializedName: "force",
    type: {
      name: "Boolean",
    },
  },
};

export const body: OperationParameter = {
  parameterPath: "body",
  mapper: MsixImageURIMapper,
};

export const body1: OperationParameter = {
  parameterPath: "body",
  mapper: ImportPackageInfoRequestMapper,
};

export const msixPackageFullName: OperationURLParameter = {
  parameterPath: "msixPackageFullName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[A-Za-z0-9@.\\-_ ]*$"),
      MaxLength: 100,
      MinLength: 3,
    },
    serializedName: "msixPackageFullName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource3: OperationParameter = {
  parameterPath: "resource",
  mapper: MsixPackageMapper,
};

export const properties3: OperationParameter = {
  parameterPath: "properties",
  mapper: MsixPackagePatchMapper,
};

export const scalingPlanName: OperationURLParameter = {
  parameterPath: "scalingPlanName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[A-Za-z0-9@.\\-_ ]*$"),
      MaxLength: 64,
      MinLength: 3,
    },
    serializedName: "scalingPlanName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource4: OperationParameter = {
  parameterPath: "resource",
  mapper: ScalingPlanMapper,
};

export const properties4: OperationParameter = {
  parameterPath: "properties",
  mapper: ScalingPlanPatchMapper,
};

export const workspaceName: OperationURLParameter = {
  parameterPath: "workspaceName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[A-Za-z0-9@.\\-_ ]*$"),
      MaxLength: 64,
      MinLength: 3,
    },
    serializedName: "workspaceName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource5: OperationParameter = {
  parameterPath: "resource",
  mapper: WorkspaceMapper,
};

export const properties5: OperationParameter = {
  parameterPath: "properties",
  mapper: WorkspacePatchMapper,
};

export const applicationName: OperationURLParameter = {
  parameterPath: "applicationName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[A-Za-z0-9@.\\-_ ]*$"),
      MaxLength: 24,
      MinLength: 3,
    },
    serializedName: "applicationName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource6: OperationParameter = {
  parameterPath: "resource",
  mapper: ApplicationMapper,
};

export const properties6: OperationParameter = {
  parameterPath: "properties",
  mapper: ApplicationPatchMapper,
};

export const desktopName: OperationURLParameter = {
  parameterPath: "desktopName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[A-Za-z0-9@.\\-_ ]*$"),
      MaxLength: 24,
      MinLength: 3,
    },
    serializedName: "desktopName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const properties7: OperationParameter = {
  parameterPath: "properties",
  mapper: DesktopPatchMapper,
};

export const privateEndpointConnectionName: OperationURLParameter = {
  parameterPath: "privateEndpointConnectionName",
  mapper: {
    serializedName: "privateEndpointConnectionName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource7: OperationParameter = {
  parameterPath: "resource",
  mapper: PrivateEndpointConnectionOnHostPoolWithSystemDataMapper,
};

export const sessionHostName: OperationURLParameter = {
  parameterPath: "sessionHostName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[A-Za-z0-9@.\\-_ ]*$"),
      MaxLength: 48,
      MinLength: 3,
    },
    serializedName: "sessionHostName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const properties8: OperationParameter = {
  parameterPath: "properties",
  mapper: SessionHostPatchMapper,
};

export const userSessionId: OperationURLParameter = {
  parameterPath: "userSessionId",
  mapper: {
    constraints: {
      MaxLength: 24,
      MinLength: 1,
    },
    serializedName: "userSessionId",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const body2: OperationParameter = {
  parameterPath: "body",
  mapper: SendMessageMapper,
};

export const scalingPlanScheduleName: OperationURLParameter = {
  parameterPath: "scalingPlanScheduleName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[A-Za-z0-9@.\\-_ ]*$"),
      MaxLength: 64,
      MinLength: 1,
    },
    serializedName: "scalingPlanScheduleName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource8: OperationParameter = {
  parameterPath: "resource",
  mapper: ScalingPlanPersonalScheduleMapper,
};

export const properties9: OperationParameter = {
  parameterPath: "properties",
  mapper: ScalingPlanPersonalSchedulePatchMapper,
};

export const resource9: OperationParameter = {
  parameterPath: "resource",
  mapper: ScalingPlanPooledScheduleMapper,
};

export const properties10: OperationParameter = {
  parameterPath: "properties",
  mapper: ScalingPlanPooledSchedulePatchMapper,
};

export const resource10: OperationParameter = {
  parameterPath: "resource",
  mapper: PrivateEndpointConnectionOnWorkspaceWithSystemDataMapper,
};
