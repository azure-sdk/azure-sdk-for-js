/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of results. */
export interface OperationListResult {
  /**
   * List of operations supported by the resource provider
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Operation[];
  /**
   * URL to get the next set of operation list results (if there are any).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Details of a REST API operation, returned from the Resource Provider Operations API */
export interface Operation {
  /**
   * The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for ARM/control-plane operations.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isDataAction?: boolean;
  /** Localized display information for this particular operation. */
  display?: OperationDisplay;
  /**
   * The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is "user,system"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly origin?: Origin;
  /**
   * Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly actionType?: ActionType;
}

/** Localized display information for this particular operation. */
export interface OperationDisplay {
  /**
   * The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft Compute".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provider?: string;
  /**
   * The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job Schedule Collections".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resource?: string;
  /**
   * The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operation?: string;
  /**
   * The short, localized friendly description of the operation; suitable for tool tips and detailed views.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export interface ErrorResponse {
  /** The error object. */
  error?: ErrorDetail;
}

/** The error detail. */
export interface ErrorDetail {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDetail[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
}

/** List of App Attach Package definitions. */
export interface AppAttachPackageList {
  /** The AppAttachPackage items on this page */
  value: AppAttachPackage[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** Schema for App Attach Package properties. */
export interface AppAttachPackageProperties {
  /**
   * The provisioning state of the App Attach Package.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** Detailed properties for App Attach Package */
  image?: AppAttachPackageInfoProperties;
  /** List of Hostpool resource Ids. */
  hostPoolReferences?: string[];
  /** URL path to certificate name located in keyVault */
  keyVaultURL?: string;
  /** Parameter indicating how the health check should behave if this package fails staging */
  failHealthCheckOnStagingFailure?: FailHealthCheckOnStagingFailure;
}

/** Schema for Import Package Information properties. */
export interface AppAttachPackageInfoProperties {
  /** Alias of App Attach Package. Assigned at import time */
  packageAlias?: string;
  /** VHD/CIM image path on Network Share. */
  imagePath?: string;
  /** Package Name from appxmanifest.xml. */
  packageName?: string;
  /** Package Family Name from appxmanifest.xml. Contains Package Name and Publisher name. */
  packageFamilyName?: string;
  /** Package Full Name from appxmanifest.xml. */
  packageFullName?: string;
  /** User friendly Name to be displayed in the portal. */
  displayName?: string;
  /** Relative Path to the package inside the image. */
  packageRelativePath?: string;
  /** Specifies how to register Package in feed. */
  isRegularRegistration?: boolean;
  /** Make this version of the package the active one across the hostpool. */
  isActive?: boolean;
  /** List of package dependencies. */
  packageDependencies?: MsixPackageDependencies[];
  /** Package version found in the appxmanifest.xml. */
  version?: string;
  /** Date Package was last updated, found in the appxmanifest.xml. */
  lastUpdated?: Date;
  /** List of package applications. */
  packageApplications?: MsixPackageApplications[];
  /** Certificate name found in the appxmanifest.xml. */
  certificateName?: string;
  /** Date certificate expires, found in the appxmanifest.xml. */
  certificateExpiry?: Date;
  /** Is package timestamped so it can ignore the certificate expiry date */
  isPackageTimestamped?: PackageTimestamped;
}

/** Schema for MSIX Package Dependencies properties. */
export interface MsixPackageDependencies {
  /** Name of package dependency. */
  dependencyName?: string;
  /** Name of dependency publisher. */
  publisher?: string;
  /** Dependency version required. */
  minVersion?: string;
}

/** Schema for MSIX Package Application properties. */
export interface MsixPackageApplications {
  /** Package Application Id, found in appxmanifest.xml. */
  appId?: string;
  /** Description of Package Application. */
  description?: string;
  /** Used to activate Package Application. Consists of Package Name and ApplicationID. Found in appxmanifest.xml. */
  appUserModelID?: string;
  /** User friendly name. */
  friendlyName?: string;
  /** User friendly name. */
  iconImageName?: string;
  /** the icon a 64 bit string as a byte array. */
  rawIcon?: Uint8Array;
  /** the icon a 64 bit string as a byte array. */
  rawPng?: Uint8Array;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export interface Resource {
  /**
   * Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Azure Resource Manager metadata containing createdBy and modifiedBy information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The timestamp of resource last modification (UTC) */
  lastModifiedAt?: Date;
}

/** List of ApplicationGroup definitions. */
export interface ApplicationGroupList {
  /** The ApplicationGroup items on this page */
  value: ApplicationGroup[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** Schema for ApplicationGroup properties. */
export interface ApplicationGroupProperties {
  /**
   * ObjectId of ApplicationGroup. (internal use)
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly objectId?: string;
  /** Description of ApplicationGroup. */
  description?: string;
  /** Friendly name of ApplicationGroup. */
  friendlyName?: string;
  /** HostPool arm path of ApplicationGroup. */
  hostPoolArmPath: string;
  /**
   * Workspace arm path of ApplicationGroup.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly workspaceArmPath?: string;
  /** Resource Type of ApplicationGroup. */
  applicationGroupType: ApplicationGroupType;
  /**
   * Is cloud pc resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cloudPcResource?: boolean;
  /** Boolean representing whether the applicationGroup is show in the feed. */
  showInFeed?: boolean;
}

/** List of HostPool definitions. */
export interface HostPoolList {
  /** The HostPool items on this page */
  value: HostPool[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** Properties of HostPool. */
export interface HostPoolProperties {
  /**
   * ObjectId of HostPool. (internal use)
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly objectId?: string;
  /** Friendly name of HostPool. */
  friendlyName?: string;
  /** Description of HostPool. */
  description?: string;
  /** HostPool type for desktop. */
  hostPoolType: HostPoolType;
  /** PersonalDesktopAssignment type for HostPool. */
  personalDesktopAssignmentType?: PersonalDesktopAssignmentType;
  /** Custom rdp property of HostPool. */
  customRdpProperty?: string;
  /** The max session limit of HostPool. */
  maxSessionLimit?: number;
  /** The type of the load balancer. */
  loadBalancerType: LoadBalancerType;
  /** The ring number of HostPool. */
  ring?: number;
  /** Is validation environment. */
  validationEnvironment?: boolean;
  /** The registration info of HostPool. */
  registrationInfo?: RegistrationInfo;
  /** VM template for sessionhosts configuration within hostpool. */
  vmTemplate?: string;
  /**
   * List of applicationGroup links.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly applicationGroupReferences?: string[];
  /**
   * List of App Attach Package links.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly appAttachPackageReferences?: string[];
  /** URL to customer ADFS server for signing WVD SSO certificates. */
  ssoadfsAuthority?: string;
  /** ClientId for the registered Relying Party used to issue WVD SSO certificates. */
  ssoClientId?: string;
  /** Path to Azure KeyVault storing the secret used for communication to ADFS. */
  ssoClientSecretKeyVaultPath?: string;
  /** The type of single sign on Secret Type. */
  ssoSecretType?: SSOSecretType;
  /** The type of preferred application group type, default to Desktop Application Group */
  preferredAppGroupType: PreferredAppGroupType;
  /** The flag to turn on/off StartVMOnConnect feature. */
  startVMOnConnect?: boolean;
  /**
   * Is cloud pc resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cloudPcResource?: boolean;
  /** Enabled allows this resource to be accessed from both public and private networks, Disabled allows this resource to only be accessed via private endpoints */
  publicNetworkAccess?: HostpoolPublicNetworkAccess;
  /** The session host configuration for updating agent, monitoring agent, and stack component. */
  agentUpdate?: AgentUpdateProperties;
  /**
   * List of private endpoint connection associated with the specified resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly privateEndpointConnections?: PrivateEndpointConnection[];
  /** Default: AVD-wide settings are used to determine connection availability, Enabled: UDP will attempt this connection type when making connections. This means that this connection is possible, but is not guaranteed, as there are other factors that may prevent this connection type, Disabled: UDP will not attempt this connection type when making connections */
  managedPrivateUDP?: ManagedPrivateUDP;
  /** Default: AVD-wide settings are used to determine connection availability, Enabled: UDP will attempt this connection type when making connections. This means that this connection is possible, but is not guaranteed, as there are other factors that may prevent this connection type, Disabled: UDP will not attempt this connection type when making connections */
  directUDP?: DirectUDP;
  /** Default: AVD-wide settings are used to determine connection availability, Enabled: UDP will attempt this connection type when making connections. This means that this connection is possible, but is not guaranteed, as there are other factors that may prevent this connection type, Disabled: UDP will not attempt this connection type when making connections */
  publicUDP?: PublicUDP;
  /** Default: AVD-wide settings are used to determine connection availability, Enabled: UDP will attempt this connection type when making connections. This means that this connection is possible, but is not guaranteed, as there are other factors that may prevent this connection type, Disabled: UDP will not attempt this connection type when making connections */
  relayUDP?: RelayUDP;
}

/** Represents a RegistrationInfo definition. */
export interface RegistrationInfo {
  /** Expiration time of registration token. */
  expirationTime?: Date;
  /** The registration token base64 encoded string. */
  token?: string;
  /** The type of resetting the token. */
  registrationTokenOperation?: RegistrationTokenOperation;
}

/** The session host configuration for updating agent, monitoring agent, and stack component. */
export interface AgentUpdateProperties {
  /** The type of maintenance for session host components. */
  type?: SessionHostComponentUpdateType;
  /** Whether to use localTime of the virtual machine. */
  useSessionHostLocalTime?: boolean;
  /** Time zone for maintenance as defined in https://docs.microsoft.com/en-us/dotnet/api/system.timezoneinfo.findsystemtimezonebyid?view=net-5.0. Must be set if useLocalTime is true. */
  maintenanceWindowTimeZone?: string;
  /** List of maintenance windows. Maintenance windows are 2 hours long. */
  maintenanceWindows?: MaintenanceWindowProperties[];
}

/** Maintenance window starting hour and day of week. */
export interface MaintenanceWindowProperties {
  /** The update start hour of the day. (0 - 23) */
  hour?: number;
  /** Day of the week. */
  dayOfWeek?: DayOfWeek;
}

/** Properties of the private endpoint connection. */
export interface PrivateEndpointConnectionProperties {
  /**
   * The group ids for the private endpoint resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly groupIds?: string[];
  /** The private endpoint resource. */
  privateEndpoint?: PrivateEndpoint;
  /** A collection of information about the state of the connection between service consumer and provider. */
  privateLinkServiceConnectionState: PrivateLinkServiceConnectionState;
  /**
   * The provisioning state of the private endpoint connection resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: PrivateEndpointConnectionProvisioningState;
}

/** The private endpoint resource. */
export interface PrivateEndpoint {
  /**
   * The ARM identifier for private endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
}

/** A collection of information about the state of the connection between service consumer and provider. */
export interface PrivateLinkServiceConnectionState {
  /** Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service. */
  status?: PrivateEndpointServiceConnectionStatus;
  /** The reason for approval/rejection of the connection. */
  description?: string;
  /** A message indicating if changes on the service provider require any updates on the consumer. */
  actionsRequired?: string;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export interface ResourceAutoGenerated {
  /**
   * Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Azure Resource Manager metadata containing createdBy and modifiedBy information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** List of MSIX Package definitions. */
export interface MsixPackageList {
  /** The MsixPackage items on this page */
  value: MsixPackage[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** Schema for MSIX Package properties. */
export interface MsixPackageProperties {
  /** VHD/CIM image path on Network Share. */
  imagePath?: string;
  /** Package Name from appxmanifest.xml. */
  packageName?: string;
  /** Package Family Name from appxmanifest.xml. Contains Package Name and Publisher name. */
  packageFamilyName?: string;
  /** User friendly Name to be displayed in the portal. */
  displayName?: string;
  /** Relative Path to the package inside the image. */
  packageRelativePath?: string;
  /** Specifies how to register Package in feed. */
  isRegularRegistration?: boolean;
  /** Make this version of the package the active one across the hostpool. */
  isActive?: boolean;
  /** List of package dependencies. */
  packageDependencies?: MsixPackageDependencies[];
  /** Package version found in the appxmanifest.xml. */
  version?: string;
  /** Date Package was last updated, found in the appxmanifest.xml. */
  lastUpdated?: Date;
  /** List of package applications. */
  packageApplications?: MsixPackageApplications[];
}

/** MSIX Package properties that can be patched. */
export interface MsixPackagePatchProperties {
  /** Set a version of the package to be active across hostpool. */
  isActive?: boolean;
  /** Set Registration mode. Regular or Delayed. */
  isRegularRegistration?: boolean;
  /** Display name for MSIX Package. */
  displayName?: string;
}

/** List of scaling plan definitions. */
export interface ScalingPlanList {
  /** The ScalingPlan items on this page */
  value: ScalingPlan[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** Scaling plan properties. */
export interface ScalingPlanProperties {
  /**
   * ObjectId of scaling plan. (internal use)
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly objectId?: string;
  /** Description of scaling plan. */
  description?: string;
  /** User friendly name of scaling plan. */
  friendlyName?: string;
  /** Timezone of the scaling plan. */
  timeZone: string;
  /** HostPool type for desktop. */
  hostPoolType?: ScalingHostPoolType;
  /** Exclusion tag for scaling plan. */
  exclusionTag?: string;
  /** List of ScalingPlanPooledSchedule definitions. */
  schedules?: ScalingSchedule[];
  /** List of ScalingHostPoolReference definitions. */
  hostPoolReferences?: ScalingHostPoolReference[];
}

/** A ScalingPlanPooledSchedule. */
export interface ScalingSchedule {
  /** Name of the ScalingPlanPooledSchedule. */
  name?: string;
  /** Set of days of the week on which this schedule is active. */
  daysOfWeek?: ScalingScheduleDaysOfWeekItem[];
  /** Starting time for ramp up period. */
  rampUpStartTime?: Time;
  /** Load balancing algorithm for ramp up period. */
  rampUpLoadBalancingAlgorithm?: SessionHostLoadBalancingAlgorithm;
  /** Minimum host percentage for ramp up period. */
  rampUpMinimumHostsPct?: number;
  /** Capacity threshold for ramp up period. */
  rampUpCapacityThresholdPct?: number;
  /** Starting time for peak period. */
  peakStartTime?: Time;
  /** Load balancing algorithm for peak period. */
  peakLoadBalancingAlgorithm?: SessionHostLoadBalancingAlgorithm;
  /** Starting time for ramp down period. */
  rampDownStartTime?: Time;
  /** Load balancing algorithm for ramp down period. */
  rampDownLoadBalancingAlgorithm?: SessionHostLoadBalancingAlgorithm;
  /** Minimum host percentage for ramp down period. */
  rampDownMinimumHostsPct?: number;
  /** Capacity threshold for ramp down period. */
  rampDownCapacityThresholdPct?: number;
  /** Should users be logged off forcefully from hosts. */
  rampDownForceLogoffUsers?: boolean;
  /** Specifies when to stop hosts during ramp down period. */
  rampDownStopHostsWhen?: StopHostsWhen;
  /** Number of minutes to wait to stop hosts during ramp down period. */
  rampDownWaitTimeMinutes?: number;
  /** Notification message for users during ramp down period. */
  rampDownNotificationMessage?: string;
  /** Starting time for off-peak period. */
  offPeakStartTime?: Time;
  /** Load balancing algorithm for off-peak period. */
  offPeakLoadBalancingAlgorithm?: SessionHostLoadBalancingAlgorithm;
}

/** The time for a scaling action to occur. */
export interface Time {
  /** The hour. */
  hour: number;
  /** The minute. */
  minute: number;
}

/** Scaling plan reference to hostpool. */
export interface ScalingHostPoolReference {
  /** Arm path of referenced hostpool. */
  hostPoolArmPath?: string;
  /** Is the scaling plan enabled for this hostpool. */
  scalingPlanEnabled?: boolean;
}

/** List of Workspace definitions. */
export interface WorkspaceList {
  /** The Workspace items on this page */
  value: Workspace[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** Schema for Workspace properties. */
export interface WorkspaceProperties {
  /**
   * ObjectId of Workspace. (internal use)
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly objectId?: string;
  /** Description of Workspace. */
  description?: string;
  /** Friendly name of Workspace. */
  friendlyName?: string;
  /** List of applicationGroup resource Ids. */
  applicationGroupReferences?: string[];
  /**
   * Is cloud pc resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cloudPcResource?: boolean;
  /** Enabled allows this resource to be accessed from both public and private networks, Disabled allows this resource to only be accessed via private endpoints */
  publicNetworkAccess?: PublicNetworkAccess;
  /**
   * List of private endpoint connection associated with the specified resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly privateEndpointConnections?: PrivateEndpointConnection[];
}

/** Schema for patchable fields on an App Attach Package. */
export interface AppAttachPackagePatchProperties {
  /** Detailed properties for App Attach Package */
  image?: AppAttachPackageInfoProperties;
  /** List of Hostpool resource Ids. */
  hostPoolReferences?: string[];
  /** URL path to certificate name located in keyVault */
  keyVaultURL?: string;
  /** Parameter indicating how the health check should behave if this package fails staging */
  failHealthCheckOnStagingFailure?: FailHealthCheckOnStagingFailure;
}

/** ApplicationGroup properties that can be patched. */
export interface ApplicationGroupPatchProperties {
  /** Description of ApplicationGroup. */
  description?: string;
  /** Friendly name of ApplicationGroup. */
  friendlyName?: string;
  /** Boolean representing whether the applicationGroup is show in the feed. */
  showInFeed?: boolean;
}

/** List of Application definitions. */
export interface ApplicationList {
  /** The Application items on this page */
  value: Application[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** Schema for Application properties. */
export interface ApplicationProperties {
  /**
   * ObjectId of Application. (internal use)
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly objectId?: string;
  /** Description of Application. */
  description?: string;
  /** Friendly name of Application. */
  friendlyName?: string;
  /** Specifies a path for the executable file for the application. */
  filePath?: string;
  /** Specifies the package family name for MSIX applications */
  msixPackageFamilyName?: string;
  /** Specifies the package application Id for MSIX applications */
  msixPackageApplicationId?: string;
  /** Resource Type of Application. */
  applicationType?: RemoteApplicationType;
  /** Specifies whether this published application can be launched with command line arguments provided by the client, command line arguments specified at publish time, or no command line arguments at all. */
  commandLineSetting: CommandLineSetting;
  /** Command Line Arguments for Application. */
  commandLineArguments?: string;
  /** Specifies whether to show the RemoteApp program in the RD Web Access server. */
  showInPortal?: boolean;
  /** Path to icon. */
  iconPath?: string;
  /** Index of the icon. */
  iconIndex?: number;
  /**
   * Hash of the icon.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly iconHash?: string;
  /**
   * the icon a 64 bit string as a byte array.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly iconContent?: Uint8Array;
}

/** Application properties that can be patched. */
export interface ApplicationPatch {
  /** tags to be updated */
  tags?: { [propertyName: string]: string };
  /** Detailed properties for Application */
  properties?: ApplicationPatchProperties;
}

/** Application properties that can be patched. */
export interface ApplicationPatchProperties {
  /** Description of Application. */
  description?: string;
  /** Friendly name of Application. */
  friendlyName?: string;
  /** Specifies a path for the executable file for the application. */
  filePath?: string;
  /** Specifies whether this published application can be launched with command line arguments provided by the client, command line arguments specified at publish time, or no command line arguments at all. */
  commandLineSetting?: CommandLineSetting;
  /** Command Line Arguments for Application. */
  commandLineArguments?: string;
  /** Specifies whether to show the RemoteApp program in the RD Web Access server. */
  showInPortal?: boolean;
  /** Path to icon. */
  iconPath?: string;
  /** Index of the icon. */
  iconIndex?: number;
  /** Specifies the package family name for MSIX applications */
  msixPackageFamilyName?: string;
  /** Specifies the package application Id for MSIX applications */
  msixPackageApplicationId?: string;
  /** Resource Type of Application. */
  applicationType?: RemoteApplicationType;
}

/** List of Desktop definitions. */
export interface DesktopList {
  /** The Desktop items on this page */
  value: Desktop[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** Schema for Desktop properties. */
export interface DesktopProperties {
  /**
   * ObjectId of Desktop. (internal use)
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly objectId?: string;
  /** Description of Desktop. */
  description?: string;
  /** Friendly name of Desktop. */
  friendlyName?: string;
  /**
   * Hash of the icon.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly iconHash?: string;
  /**
   * The icon a 64 bit string as a byte array.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly iconContent?: Uint8Array;
}

/** Desktop properties that can be patched. */
export interface DesktopPatch {
  /** tags to be updated */
  tags?: { [propertyName: string]: string };
  /** Detailed properties for Desktop */
  properties?: DesktopPatchProperties;
}

/** Desktop properties that can be patched. */
export interface DesktopPatchProperties {
  /** Description of Desktop. */
  description?: string;
  /** Friendly name of Desktop. */
  friendlyName?: string;
}

/** List of StartMenuItem definitions. */
export interface StartMenuItemList {
  /** The StartMenuItem items on this page */
  value: StartMenuItem[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** Schema for StartMenuItem properties. */
export interface StartMenuItemProperties {
  /** Alias of StartMenuItem. */
  appAlias?: string;
  /** Path to the file of StartMenuItem. */
  filePath?: string;
  /** Command line arguments for StartMenuItem. */
  commandLineArguments?: string;
  /** Path to the icon. */
  iconPath?: string;
  /** Index of the icon. */
  iconIndex?: number;
}

/** Properties of HostPool. */
export interface HostPoolPatchProperties {
  /** Friendly name of HostPool. */
  friendlyName?: string;
  /** Description of HostPool. */
  description?: string;
  /** Custom rdp property of HostPool. */
  customRdpProperty?: string;
  /** The max session limit of HostPool. */
  maxSessionLimit?: number;
  /** PersonalDesktopAssignment type for HostPool. */
  personalDesktopAssignmentType?: PersonalDesktopAssignmentType;
  /** The type of the load balancer. */
  loadBalancerType?: LoadBalancerType;
  /** The ring number of HostPool. */
  ring?: number;
  /** Is validation environment. */
  validationEnvironment?: boolean;
  /** The registration info of HostPool. */
  registrationInfo?: RegistrationInfoPatch;
  /** VM template for sessionhosts configuration within hostpool. */
  vmTemplate?: string;
  /** URL to customer ADFS server for signing WVD SSO certificates. */
  ssoadfsAuthority?: string;
  /** ClientId for the registered Relying Party used to issue WVD SSO certificates. */
  ssoClientId?: string;
  /** Path to Azure KeyVault storing the secret used for communication to ADFS. */
  ssoClientSecretKeyVaultPath?: string;
  /** The type of single sign on Secret Type. */
  ssoSecretType?: SSOSecretType;
  /** The type of preferred application group type, default to Desktop Application Group */
  preferredAppGroupType?: PreferredAppGroupType;
  /** The flag to turn on/off StartVMOnConnect feature. */
  startVMOnConnect?: boolean;
  /** Enabled to allow this resource to be access from the public network */
  publicNetworkAccess?: HostpoolPublicNetworkAccess;
  /** The session host configuration for updating agent, monitoring agent, and stack component. */
  agentUpdate?: AgentUpdatePatchProperties;
  /** Default: AVD-wide settings are used to determine connection availability, Enabled: UDP will attempt this connection type when making connections. This means that this connection is possible, but is not guaranteed, as there are other factors that may prevent this connection type, Disabled: UDP will not attempt this connection type when making connections */
  managedPrivateUDP?: ManagedPrivateUDP;
  /** Default: AVD-wide settings are used to determine connection availability, Enabled: UDP will attempt this connection type when making connections. This means that this connection is possible, but is not guaranteed, as there are other factors that may prevent this connection type, Disabled: UDP will not attempt this connection type when making connections */
  directUDP?: DirectUDP;
  /** Default: AVD-wide settings are used to determine connection availability, Enabled: UDP will attempt this connection type when making connections. This means that this connection is possible, but is not guaranteed, as there are other factors that may prevent this connection type, Disabled: UDP will not attempt this connection type when making connections */
  publicUDP?: PublicUDP;
  /** Default: AVD-wide settings are used to determine connection availability, Enabled: UDP will attempt this connection type when making connections. This means that this connection is possible, but is not guaranteed, as there are other factors that may prevent this connection type, Disabled: UDP will not attempt this connection type when making connections */
  relayUDP?: RelayUDP;
}

/** Represents a RegistrationInfo definition. */
export interface RegistrationInfoPatch {
  /** Expiration time of registration token. */
  expirationTime?: Date;
  /** The type of resetting the token. */
  registrationTokenOperation?: RegistrationTokenOperation;
}

/** The session host configuration for updating agent, monitoring agent, and stack component. */
export interface AgentUpdatePatchProperties {
  /** The type of maintenance for session host components. */
  type?: SessionHostComponentUpdateType;
  /** Whether to use localTime of the virtual machine. */
  useSessionHostLocalTime?: boolean;
  /** Time zone for maintenance as defined in https://docs.microsoft.com/en-us/dotnet/api/system.timezoneinfo.findsystemtimezonebyid?view=net-5.0. Must be set if useLocalTime is true. */
  maintenanceWindowTimeZone?: string;
  /** List of maintenance windows. Maintenance windows are 2 hours long. */
  maintenanceWindows?: MaintenanceWindowPatchProperties[];
}

/** Maintenance window starting hour and day of week. */
export interface MaintenanceWindowPatchProperties {
  /** The update start hour of the day. (0 - 23) */
  hour?: number;
  /** Day of the week. */
  dayOfWeek?: DayOfWeek;
}

/** Represents URI referring to MSIX Image */
export interface MsixImageURI {
  /** URI to Image */
  uri?: string;
}

/** List of MSIX package properties retrieved from MSIX Image expansion. */
export interface ExpandMsixImageList {
  /** The ExpandMsixImage items on this page */
  value: ExpandMsixImage[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** Schema for Expand MSIX Image properties. */
export interface ExpandMsixImageProperties {
  /** Alias of MSIX Package. */
  packageAlias?: string;
  /** VHD/CIM image path on Network Share. */
  imagePath?: string;
  /** Package Name from appxmanifest.xml. */
  packageName?: string;
  /** Package Family Name from appxmanifest.xml. Contains Package Name and Publisher name. */
  packageFamilyName?: string;
  /** Package Full Name from appxmanifest.xml. */
  packageFullName?: string;
  /** User friendly Name to be displayed in the portal. */
  displayName?: string;
  /** Relative Path to the package inside the image. */
  packageRelativePath?: string;
  /** Specifies how to register Package in feed. */
  isRegularRegistration?: boolean;
  /** Make this version of the package the active one across the hostpool. */
  isActive?: boolean;
  /** List of package dependencies. */
  packageDependencies?: MsixPackageDependencies[];
  /** Package version found in the appxmanifest.xml. */
  version?: string;
  /** Date Package was last updated, found in the appxmanifest.xml. */
  lastUpdated?: Date;
  /** List of package applications. */
  packageApplications?: MsixPackageApplications[];
  /** Certificate name found in the appxmanifest.xml. */
  certificateName?: string;
  /** Date certificate expires, found in the appxmanifest.xml. */
  certificateExpiry?: Date;
}

/** Information to import app attach package */
export interface ImportPackageInfoRequest {
  /** URI to Image */
  path?: string;
  /** Possible device architectures that an app attach package can be configured for */
  packageArchitecture?: AppAttachPackageArchitectures;
}

/** List of RegistrationToken definitions. */
export interface RegistrationTokenList {
  /** List of RegistrationToken definitions. */
  value?: RegistrationTokenMinimal[];
  /**
   * Link to the next page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Represents a Minimal set of properties for RegistrationToken definition. */
export interface RegistrationTokenMinimal {
  /** Expiration time of registration token. */
  expirationTime?: Date;
  /** The registration token base64 encoded string. */
  token?: string;
}

/** List of private endpoint connection associated with the specified HostPool */
export interface PrivateEndpointConnectionOnHostPoolListResultWithSystemData {
  /** The PrivateEndpointConnectionOnHostPoolWithSystemData items on this page */
  value: PrivateEndpointConnectionOnHostPoolWithSystemData[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** A list of private link resources */
export interface PrivateLinkResourceListResult {
  /** The PrivateLinkResource items on this page */
  value: PrivateLinkResource[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** Properties of a private link resource. */
export interface PrivateLinkResourceProperties {
  /**
   * The private link resource group id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly groupId?: string;
  /**
   * The private link resource required member names.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly requiredMembers?: string[];
  /** The private link resource Private link DNS zone name. */
  requiredZoneNames?: string[];
}

/** List of SessionHost definitions. */
export interface SessionHostList {
  /** The SessionHost items on this page */
  value: SessionHost[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** Schema for SessionHost properties. */
export interface SessionHostProperties {
  /**
   * ObjectId of SessionHost. (internal use)
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly objectId?: string;
  /** Last heart beat from SessionHost. */
  lastHeartBeat?: Date;
  /** Number of sessions on SessionHost. */
  sessions?: number;
  /** Version of agent on SessionHost. */
  agentVersion?: string;
  /** Allow a new session. */
  allowNewSession?: boolean;
  /**
   * Virtual Machine Id of SessionHost's underlying virtual machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly virtualMachineId?: string;
  /**
   * Resource Id of SessionHost's underlying virtual machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resourceId?: string;
  /** User assigned to SessionHost. */
  assignedUser?: string;
  /** Friendly name of SessionHost */
  friendlyName?: string;
  /** Status for a SessionHost. */
  status?: Status;
  /**
   * The timestamp of the status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statusTimestamp?: Date;
  /** The version of the OS on the session host. */
  osVersion?: string;
  /** The version of the side by side stack on the session host. */
  sxSStackVersion?: string;
  /**
   * Update state of a SessionHost.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly updateState?: UpdateState;
  /**
   * The timestamp of the last update.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastUpdateTime?: Date;
  /** The error message. */
  updateErrorMessage?: string;
  /**
   * List of SessionHostHealthCheckReports
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sessionHostHealthCheckResults?: SessionHostHealthCheckReport[];
}

/** The report for session host information. */
export interface SessionHostHealthCheckReport {
  /**
   * Represents the name of the health check operation performed.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly healthCheckName?: HealthCheckName;
  /**
   * Represents the Health state of the health check we performed.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly healthCheckResult?: HealthCheckResult;
  /**
   * Additional detailed information on the failure.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalFailureDetails?: SessionHostHealthCheckFailureDetails;
}

/** Contains details on the failure. */
export interface SessionHostHealthCheckFailureDetails {
  /**
   * Failure message: hints on what is wrong and how to recover.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * Error code corresponding for the failure.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly errorCode?: number;
  /**
   * The timestamp of the last update.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastHealthCheckDateTime?: Date;
}

/** SessionHost properties that can be patched. */
export interface SessionHostPatchProperties {
  /** Allow a new session. */
  allowNewSession?: boolean;
  /** User assigned to SessionHost. */
  assignedUser?: string;
  /** Friendly name of SessionHost */
  friendlyName?: string;
}

/** List of UserSession definitions. */
export interface UserSessionList {
  /** The UserSession items on this page */
  value: UserSession[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** Schema for UserSession properties. */
export interface UserSessionProperties {
  /**
   * ObjectId of user session. (internal use)
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly objectId?: string;
  /** The user principal name. */
  userPrincipalName?: string;
  /** Application type of application. */
  applicationType?: ApplicationType;
  /** State of user session. */
  sessionState?: SessionState;
  /** The active directory user name. */
  activeDirectoryUserName?: string;
  /** The timestamp of the user session create. */
  createTime?: Date;
}

/** Represents message sent to a UserSession. */
export interface SendMessage {
  /** Title of message. */
  messageTitle?: string;
  /** Body of message. */
  messageBody?: string;
}

/** Scaling plan properties that can be patched. */
export interface ScalingPlanPatch {
  /** tags to be updated */
  tags?: { [propertyName: string]: string };
  /** Detailed properties for scaling plan */
  properties?: ScalingPlanPatchProperties;
}

/** Scaling plan properties. */
export interface ScalingPlanPatchProperties {
  /** Description of scaling plan. */
  description?: string;
  /** User friendly name of scaling plan. */
  friendlyName?: string;
  /** Timezone of the scaling plan. */
  timeZone?: string;
  /** Exclusion tag for scaling plan. */
  exclusionTag?: string;
  /** List of ScalingSchedule definitions. */
  schedules?: ScalingSchedule[];
  /** List of ScalingHostPoolReference definitions. */
  hostPoolReferences?: ScalingHostPoolReference[];
}

/** List of ScalingPlanPersonalSchedule definitions. */
export interface ScalingPlanPersonalScheduleList {
  /** The ScalingPlanPersonalSchedule items on this page */
  value: ScalingPlanPersonalSchedule[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** A ScalingPlanPersonalSchedule. */
export interface ScalingPlanPersonalScheduleProperties {
  /** Set of days of the week on which this schedule is active. */
  daysOfWeek?: DayOfWeek[];
  /** Starting time for ramp up period. */
  rampUpStartTime?: Time;
  /** The desired startup behavior during the ramp up period for personal vms in the hostpool. */
  rampUpAutoStartHosts?: StartupBehavior;
  /** The desired configuration of Start VM On Connect for the hostpool during the ramp up phase. If this is disabled, session hosts must be turned on using rampUpAutoStartHosts or by turning them on manually. */
  rampUpStartVMOnConnect?: SetStartVMOnConnect;
  /** Action to be taken after a user disconnect during the ramp up period. */
  rampUpActionOnDisconnect?: SessionHandlingOperation;
  /** The time in minutes to wait before performing the desired session handling action when a user disconnects during the ramp up period. */
  rampUpMinutesToWaitOnDisconnect?: number;
  /** Action to be taken after a logoff during the ramp up period. */
  rampUpActionOnLogoff?: SessionHandlingOperation;
  /** The time in minutes to wait before performing the desired session handling action when a user logs off during the ramp up period. */
  rampUpMinutesToWaitOnLogoff?: number;
  /** Starting time for peak period. */
  peakStartTime?: Time;
  /** The desired configuration of Start VM On Connect for the hostpool during the peak phase. */
  peakStartVMOnConnect?: SetStartVMOnConnect;
  /** Action to be taken after a user disconnect during the peak period. */
  peakActionOnDisconnect?: SessionHandlingOperation;
  /** The time in minutes to wait before performing the desired session handling action when a user disconnects during the peak period. */
  peakMinutesToWaitOnDisconnect?: number;
  /** Action to be taken after a logoff during the peak period. */
  peakActionOnLogoff?: SessionHandlingOperation;
  /** The time in minutes to wait before performing the desired session handling action when a user logs off during the peak period. */
  peakMinutesToWaitOnLogoff?: number;
  /** Starting time for ramp down period. */
  rampDownStartTime?: Time;
  /** The desired configuration of Start VM On Connect for the hostpool during the ramp down phase. */
  rampDownStartVMOnConnect?: SetStartVMOnConnect;
  /** Action to be taken after a user disconnect during the ramp down period. */
  rampDownActionOnDisconnect?: SessionHandlingOperation;
  /** The time in minutes to wait before performing the desired session handling action when a user disconnects during the ramp down period. */
  rampDownMinutesToWaitOnDisconnect?: number;
  /** Action to be taken after a logoff during the ramp down period. */
  rampDownActionOnLogoff?: SessionHandlingOperation;
  /** The time in minutes to wait before performing the desired session handling action when a user logs off during the ramp down period. */
  rampDownMinutesToWaitOnLogoff?: number;
  /** Starting time for off-peak period. */
  offPeakStartTime?: Time;
  /** The desired configuration of Start VM On Connect for the hostpool during the off-peak phase. */
  offPeakStartVMOnConnect?: SetStartVMOnConnect;
  /** Action to be taken after a user disconnect during the off-peak period. */
  offPeakActionOnDisconnect?: SessionHandlingOperation;
  /** The time in minutes to wait before performing the desired session handling action when a user disconnects during the off-peak period. */
  offPeakMinutesToWaitOnDisconnect?: number;
  /** Action to be taken after a logoff during the off-peak period. */
  offPeakActionOnLogoff?: SessionHandlingOperation;
  /** The time in minutes to wait before performing the desired session handling action when a user logs off during the off-peak period. */
  offPeakMinutesToWaitOnLogoff?: number;
}

/** ScalingPlanPersonalSchedule properties that can be patched. */
export interface ScalingPlanPersonalSchedulePatch {
  /** Detailed properties for ScalingPlanPersonalSchedule */
  properties?: ScalingPlanPersonalScheduleProperties;
}

/** List of ScalingPlanPooledSchedule definitions. */
export interface ScalingPlanPooledScheduleList {
  /** The ScalingPlanPooledSchedule items on this page */
  value: ScalingPlanPooledSchedule[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** A ScalingPlanPooledSchedule. */
export interface ScalingPlanPooledScheduleProperties {
  /** Set of days of the week on which this schedule is active. */
  daysOfWeek?: DayOfWeek[];
  /** Starting time for ramp up period. */
  rampUpStartTime?: Time;
  /** Load balancing algorithm for ramp up period. */
  rampUpLoadBalancingAlgorithm?: SessionHostLoadBalancingAlgorithm;
  /** Minimum host percentage for ramp up period. */
  rampUpMinimumHostsPct?: number;
  /** Capacity threshold for ramp up period. */
  rampUpCapacityThresholdPct?: number;
  /** Starting time for peak period. */
  peakStartTime?: Time;
  /** Load balancing algorithm for peak period. */
  peakLoadBalancingAlgorithm?: SessionHostLoadBalancingAlgorithm;
  /** Starting time for ramp down period. */
  rampDownStartTime?: Time;
  /** Load balancing algorithm for ramp down period. */
  rampDownLoadBalancingAlgorithm?: SessionHostLoadBalancingAlgorithm;
  /** Minimum host percentage for ramp down period. */
  rampDownMinimumHostsPct?: number;
  /** Capacity threshold for ramp down period. */
  rampDownCapacityThresholdPct?: number;
  /** Should users be logged off forcefully from hosts. */
  rampDownForceLogoffUsers?: boolean;
  /** Specifies when to stop hosts during ramp down period. */
  rampDownStopHostsWhen?: StopHostsWhen;
  /** Number of minutes to wait to stop hosts during ramp down period. */
  rampDownWaitTimeMinutes?: number;
  /** Notification message for users during ramp down period. */
  rampDownNotificationMessage?: string;
  /** Starting time for off-peak period. */
  offPeakStartTime?: Time;
  /** Load balancing algorithm for off-peak period. */
  offPeakLoadBalancingAlgorithm?: SessionHostLoadBalancingAlgorithm;
}

/** Workspace properties that can be patched. */
export interface WorkspacePatch {
  /** tags to be updated */
  tags?: { [propertyName: string]: string };
  /** Detailed properties for Workspace */
  properties?: WorkspacePatchProperties;
}

/** Workspace properties that can be patched. */
export interface WorkspacePatchProperties {
  /** Description of Workspace. */
  description?: string;
  /** Friendly name of Workspace. */
  friendlyName?: string;
  /** List of applicationGroup links. */
  applicationGroupReferences?: string[];
  /** Enabled to allow this resource to be access from the public network */
  publicNetworkAccess?: PublicNetworkAccess;
}

/** List of private endpoint connection associated with the specified Workspace */
export interface PrivateEndpointConnectionOnWorkspaceListResultWithSystemData {
  /** The PrivateEndpointConnectionOnHostPoolWithSystemData items on this page */
  value: PrivateEndpointConnectionOnHostPoolWithSystemData[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export interface TrackedResource extends Resource {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The geo-location where the resource lives */
  location: string;
}

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export interface ProxyResource extends Resource {}

/** The private endpoint connection resource. */
export interface PrivateEndpointConnection extends ResourceAutoGenerated {
  /** Resource properties. */
  properties?: PrivateEndpointConnectionProperties;
}

/** MSIX Package properties that can be patched. */
export interface MsixPackagePatch extends ResourceAutoGenerated {
  /** Detailed properties for MSIX Package */
  properties?: MsixPackagePatchProperties;
}

/** Schema for updatable App Attach Package properties. */
export interface AppAttachPackagePatch extends ResourceAutoGenerated {
  /** Detailed properties for App Attach Package */
  properties?: AppAttachPackagePatchProperties;
}

/** ApplicationGroup properties that can be patched. */
export interface ApplicationGroupPatch extends ResourceAutoGenerated {
  /** tags to be updated */
  tags?: { [propertyName: string]: string };
  /** ApplicationGroup properties that can be patched. */
  properties?: ApplicationGroupPatchProperties;
}

/** Represents a StartMenuItem definition. */
export interface StartMenuItem extends ResourceAutoGenerated {
  /** Detailed properties for StartMenuItem */
  properties?: StartMenuItemProperties;
}

/** HostPool properties that can be patched. */
export interface HostPoolPatch extends ResourceAutoGenerated {
  /** tags to be updated */
  tags?: { [propertyName: string]: string };
  /** HostPool properties that can be patched. */
  properties?: HostPoolPatchProperties;
}

/** Represents the definition of contents retrieved after expanding the MSIX Image. */
export interface ExpandMsixImage extends ResourceAutoGenerated {
  /** Detailed properties for ExpandMsixImage */
  properties?: ExpandMsixImageProperties;
}

/** A private link resource */
export interface PrivateLinkResource extends ResourceAutoGenerated {
  /** Resource properties. */
  properties?: PrivateLinkResourceProperties;
}

/** SessionHost properties that can be patched. */
export interface SessionHostPatch extends ResourceAutoGenerated {
  /** Detailed properties for SessionHost */
  properties?: SessionHostPatchProperties;
}

/** ScalingPlanPooledSchedule properties that can be patched. */
export interface ScalingPlanPooledSchedulePatch extends ResourceAutoGenerated {
  /** Detailed properties for ScalingPlanPooledSchedule */
  properties?: ScalingPlanPooledScheduleProperties;
}

/** Schema for App Attach Package properties. */
export interface AppAttachPackage extends TrackedResource {
  /** Detailed properties for App Attach Package */
  properties: AppAttachPackageProperties;
}

/** Represents a ApplicationGroup definition. */
export interface ApplicationGroup extends TrackedResource {
  /** Detailed properties for ApplicationGroup */
  properties: ApplicationGroupProperties;
}

/** Represents a HostPool definition. */
export interface HostPool extends TrackedResource {
  /** Detailed properties for HostPool */
  properties: HostPoolProperties;
}

/** Represents a scaling plan definition. */
export interface ScalingPlan extends TrackedResource {
  /** Detailed properties for scaling plan. */
  properties: ScalingPlanProperties;
}

/** Represents a Workspace definition. */
export interface Workspace extends TrackedResource {
  /** Detailed properties for Workspace */
  properties?: WorkspaceProperties;
}

/** Schema for MSIX Package properties. */
export interface MsixPackage extends ProxyResource {
  /** Detailed properties for MSIX Package */
  properties: MsixPackageProperties;
}

/** Schema for Application properties. */
export interface Application extends ProxyResource {
  /** Detailed properties for Application */
  properties: ApplicationProperties;
}

/** Schema for Desktop properties. */
export interface Desktop extends ProxyResource {
  /** Detailed properties for Desktop */
  properties?: DesktopProperties;
}

/** The Private Endpoint Connection resource. */
export interface PrivateEndpointConnectionOnHostPoolWithSystemData
  extends ProxyResource {
  /** The resource-specific properties for this resource. */
  properties?: Record<string, unknown>;
}

/** Represents a SessionHost definition. */
export interface SessionHost extends ProxyResource {
  /** Detailed properties for SessionHost */
  properties?: SessionHostProperties;
}

/** Represents a UserSession definition. */
export interface UserSession extends ProxyResource {
  /** Detailed properties for UserSession */
  properties?: UserSessionProperties;
}

/** Represents a ScalingPlanPersonalSchedule definition. */
export interface ScalingPlanPersonalSchedule extends ProxyResource {
  /** Detailed properties for ScalingPlanPersonalSchedule */
  properties: ScalingPlanPersonalScheduleProperties;
}

/** Represents a ScalingPlanPooledSchedule definition. */
export interface ScalingPlanPooledSchedule extends ProxyResource {
  /** Detailed properties for ScalingPlanPooledSchedule */
  properties: ScalingPlanPooledScheduleProperties;
}

/** The Private Endpoint Connection resource. */
export interface PrivateEndpointConnectionOnWorkspaceWithSystemData
  extends ProxyResource {
  /** The resource-specific properties for this resource. */
  properties?: Record<string, unknown>;
}

/** Known values of {@link Origin} that the service accepts. */
export enum KnownOrigin {
  /** User */
  User = "user",
  /** System */
  System = "system",
  /** UserSystem */
  UserSystem = "user,system",
}

/**
 * Defines values for Origin. \
 * {@link KnownOrigin} can be used interchangeably with Origin,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **user** \
 * **system** \
 * **user,system**
 */
export type Origin = string;

/** Known values of {@link ActionType} that the service accepts. */
export enum KnownActionType {
  /** Internal */
  Internal = "Internal",
}

/**
 * Defines values for ActionType. \
 * {@link KnownActionType} can be used interchangeably with ActionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Internal**
 */
export type ActionType = string;

/** Known values of {@link ProvisioningState} that the service accepts. */
export enum KnownProvisioningState {
  /** Provisioning Successful */
  Succeeded = "Succeeded",
  /** Provisioning in Progress */
  Provisioning = "Provisioning",
  /** Provisioning Failed */
  Failed = "Failed",
  /** Provisioning was Canceled */
  Canceled = "Canceled",
}

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded**: Provisioning Successful \
 * **Provisioning**: Provisioning in Progress \
 * **Failed**: Provisioning Failed \
 * **Canceled**: Provisioning was Canceled
 */
export type ProvisioningState = string;

/** Known values of {@link PackageTimestamped} that the service accepts. */
export enum KnownPackageTimestamped {
  /** Package is timestamped */
  Timestamped = "Timestamped",
  /** Package is not timestamped, use certificate expiry date */
  NotTimestamped = "NotTimestamped",
}

/**
 * Defines values for PackageTimestamped. \
 * {@link KnownPackageTimestamped} can be used interchangeably with PackageTimestamped,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Timestamped**: Package is timestamped \
 * **NotTimestamped**: Package is not timestamped, use certificate expiry date
 */
export type PackageTimestamped = string;

/** Known values of {@link FailHealthCheckOnStagingFailure} that the service accepts. */
export enum KnownFailHealthCheckOnStagingFailure {
  /** Health Check will report unhealthy */
  Unhealthy = "Unhealthy",
  /** Health Check will report NeedsAssistance */
  NeedsAssistance = "NeedsAssistance",
  /** Health Check will not report failure */
  DoNotFail = "DoNotFail",
}

/**
 * Defines values for FailHealthCheckOnStagingFailure. \
 * {@link KnownFailHealthCheckOnStagingFailure} can be used interchangeably with FailHealthCheckOnStagingFailure,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unhealthy**: Health Check will report unhealthy \
 * **NeedsAssistance**: Health Check will report NeedsAssistance \
 * **DoNotFail**: Health Check will not report failure
 */
export type FailHealthCheckOnStagingFailure = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  /** User */
  User = "User",
  /** Application */
  Application = "Application",
  /** ManagedIdentity */
  ManagedIdentity = "ManagedIdentity",
  /** Key */
  Key = "Key",
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link ApplicationGroupType} that the service accepts. */
export enum KnownApplicationGroupType {
  /** Application group is Remote and can launch individual applications without a Desktop. */
  RemoteApp = "RemoteApp",
  /** Application Group delivers a full expected Desktop experience */
  Desktop = "Desktop",
}

/**
 * Defines values for ApplicationGroupType. \
 * {@link KnownApplicationGroupType} can be used interchangeably with ApplicationGroupType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **RemoteApp**: Application group is Remote and can launch individual applications without a Desktop. \
 * **Desktop**: Application Group delivers a full expected Desktop experience
 */
export type ApplicationGroupType = string;

/** Known values of {@link HostPoolType} that the service accepts. */
export enum KnownHostPoolType {
  /** Users will be assigned a SessionHost either by administrators (PersonalDesktopAssignmentType = Direct) or upon connecting to the pool (PersonalDesktopAssignmentType = Automatic). They will always be redirected to their assigned SessionHost. */
  Personal = "Personal",
  /** Users get a new (random) SessionHost every time it connects to the HostPool. */
  Pooled = "Pooled",
  /** Users assign their own machines, load balancing logic remains the same as Personal. PersonalDesktopAssignmentType must be Direct. */
  BYODesktop = "BYODesktop",
}

/**
 * Defines values for HostPoolType. \
 * {@link KnownHostPoolType} can be used interchangeably with HostPoolType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Personal**: Users will be assigned a SessionHost either by administrators (PersonalDesktopAssignmentType = Direct) or upon connecting to the pool (PersonalDesktopAssignmentType = Automatic). They will always be redirected to their assigned SessionHost. \
 * **Pooled**: Users get a new (random) SessionHost every time it connects to the HostPool. \
 * **BYODesktop**: Users assign their own machines, load balancing logic remains the same as Personal. PersonalDesktopAssignmentType must be Direct.
 */
export type HostPoolType = string;

/** Known values of {@link PersonalDesktopAssignmentType} that the service accepts. */
export enum KnownPersonalDesktopAssignmentType {
  /** Automatically assigns an available personal desktop to the user. */
  Automatic = "Automatic",
  /** Manually assigns a specific personal desktop to the user. */
  Direct = "Direct",
}

/**
 * Defines values for PersonalDesktopAssignmentType. \
 * {@link KnownPersonalDesktopAssignmentType} can be used interchangeably with PersonalDesktopAssignmentType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Automatic**: Automatically assigns an available personal desktop to the user. \
 * **Direct**: Manually assigns a specific personal desktop to the user.
 */
export type PersonalDesktopAssignmentType = string;

/** Known values of {@link LoadBalancerType} that the service accepts. */
export enum KnownLoadBalancerType {
  /** Uses BreadthFirst algorithm for load balancing. */
  BreadthFirst = "BreadthFirst",
  /** Uses DepthFirst algorithm for load balancing. */
  DepthFirst = "DepthFirst",
  /** Maintains persistent conenctions. */
  Persistent = "Persistent",
}

/**
 * Defines values for LoadBalancerType. \
 * {@link KnownLoadBalancerType} can be used interchangeably with LoadBalancerType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **BreadthFirst**: Uses BreadthFirst algorithm for load balancing. \
 * **DepthFirst**: Uses DepthFirst algorithm for load balancing. \
 * **Persistent**: Maintains persistent conenctions.
 */
export type LoadBalancerType = string;

/** Known values of {@link RegistrationTokenOperation} that the service accepts. */
export enum KnownRegistrationTokenOperation {
  /** Delete operation */
  Delete = "Delete",
  /** No Operation */
  None = "None",
  /** Update Operation */
  Update = "Update",
}

/**
 * Defines values for RegistrationTokenOperation. \
 * {@link KnownRegistrationTokenOperation} can be used interchangeably with RegistrationTokenOperation,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Delete**: Delete operation \
 * **None**: No Operation \
 * **Update**: Update Operation
 */
export type RegistrationTokenOperation = string;

/** Known values of {@link SSOSecretType} that the service accepts. */
export enum KnownSSOSecretType {
  /** The SSO Secret is a Shared Key. */
  SharedKey = "SharedKey",
  /** The SSO Secret is a Certificate. */
  Certificate = "Certificate",
  /** The SSO Secret is a SharedKey that is stored in KeyVault. */
  SharedKeyInKeyVault = "SharedKeyInKeyVault",
  /** The SSO Secret is a Certificate that is stored in KeyVault. */
  CertificateInKeyVault = "CertificateInKeyVault",
}

/**
 * Defines values for SSOSecretType. \
 * {@link KnownSSOSecretType} can be used interchangeably with SSOSecretType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SharedKey**: The SSO Secret is a Shared Key. \
 * **Certificate**: The SSO Secret is a Certificate. \
 * **SharedKeyInKeyVault**: The SSO Secret is a SharedKey that is stored in KeyVault. \
 * **CertificateInKeyVault**: The SSO Secret is a Certificate that is stored in KeyVault.
 */
export type SSOSecretType = string;

/** Known values of {@link PreferredAppGroupType} that the service accepts. */
export enum KnownPreferredAppGroupType {
  /** Internal Use Only */
  None = "None",
  /** Use Desktop Application Group */
  Desktop = "Desktop",
  /** Use RailApplications (RemoteApp) */
  RailApplications = "RailApplications",
}

/**
 * Defines values for PreferredAppGroupType. \
 * {@link KnownPreferredAppGroupType} can be used interchangeably with PreferredAppGroupType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None**: Internal Use Only \
 * **Desktop**: Use Desktop Application Group \
 * **RailApplications**: Use RailApplications (RemoteApp)
 */
export type PreferredAppGroupType = string;

/** Known values of {@link HostpoolPublicNetworkAccess} that the service accepts. */
export enum KnownHostpoolPublicNetworkAccess {
  /** Allows this resource to be accessed from the public network */
  Enabled = "Enabled",
  /** Prevents this resource from being accessed from the public network */
  Disabled = "Disabled",
  /** Allows SessionHosts to be accessed from the public network */
  EnabledForSessionHostsOnly = "EnabledForSessionHostsOnly",
  /** Allows Clients to be accessed from the public network */
  EnabledForClientsOnly = "EnabledForClientsOnly",
}

/**
 * Defines values for HostpoolPublicNetworkAccess. \
 * {@link KnownHostpoolPublicNetworkAccess} can be used interchangeably with HostpoolPublicNetworkAccess,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled**: Allows this resource to be accessed from the public network \
 * **Disabled**: Prevents this resource from being accessed from the public network \
 * **EnabledForSessionHostsOnly**: Allows SessionHosts to be accessed from the public network \
 * **EnabledForClientsOnly**: Allows Clients to be accessed from the public network
 */
export type HostpoolPublicNetworkAccess = string;

/** Known values of {@link SessionHostComponentUpdateType} that the service accepts. */
export enum KnownSessionHostComponentUpdateType {
  /** Agent and other agent side components are delivery schedule is controlled by WVD Infra. */
  Default = "Default",
  /** TenantAdmin have opted in for Scheduled Component Update feature. */
  Scheduled = "Scheduled",
}

/**
 * Defines values for SessionHostComponentUpdateType. \
 * {@link KnownSessionHostComponentUpdateType} can be used interchangeably with SessionHostComponentUpdateType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Default**: Agent and other agent side components are delivery schedule is controlled by WVD Infra. \
 * **Scheduled**: TenantAdmin have opted in for Scheduled Component Update feature.
 */
export type SessionHostComponentUpdateType = string;

/** Known values of {@link PrivateEndpointServiceConnectionStatus} that the service accepts. */
export enum KnownPrivateEndpointServiceConnectionStatus {
  /** Connection is Pending */
  Pending = "Pending",
  /** Connection was Approved */
  Approved = "Approved",
  /** Connection was rejected */
  Rejected = "Rejected",
}

/**
 * Defines values for PrivateEndpointServiceConnectionStatus. \
 * {@link KnownPrivateEndpointServiceConnectionStatus} can be used interchangeably with PrivateEndpointServiceConnectionStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Pending**: Connection is Pending \
 * **Approved**: Connection was Approved \
 * **Rejected**: Connection was rejected
 */
export type PrivateEndpointServiceConnectionStatus = string;

/** Known values of {@link PrivateEndpointConnectionProvisioningState} that the service accepts. */
export enum KnownPrivateEndpointConnectionProvisioningState {
  /** Provisioning was successful */
  Succeeded = "Succeeded",
  /** A PrivateEndpointConnection is being created */
  Creating = "Creating",
  /** A PrivateEndpointConnection is being deleted */
  Deleting = "Deleting",
  /** Provisioning failed */
  Failed = "Failed",
}

/**
 * Defines values for PrivateEndpointConnectionProvisioningState. \
 * {@link KnownPrivateEndpointConnectionProvisioningState} can be used interchangeably with PrivateEndpointConnectionProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded**: Provisioning was successful \
 * **Creating**: A PrivateEndpointConnection is being created \
 * **Deleting**: A PrivateEndpointConnection is being deleted \
 * **Failed**: Provisioning failed
 */
export type PrivateEndpointConnectionProvisioningState = string;

/** Known values of {@link ManagedPrivateUDP} that the service accepts. */
export enum KnownManagedPrivateUDP {
  /** AVD-wide settings are used to determine connection availability */
  Default = "Default",
  /** UDP will attempt this connection type when making connections. */
  Enabled = "Enabled",
  /** UDP will not attempt this connection type when making connections */
  Disabled = "Disabled",
}

/**
 * Defines values for ManagedPrivateUDP. \
 * {@link KnownManagedPrivateUDP} can be used interchangeably with ManagedPrivateUDP,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Default**: AVD-wide settings are used to determine connection availability \
 * **Enabled**: UDP will attempt this connection type when making connections. \
 * **Disabled**: UDP will not attempt this connection type when making connections
 */
export type ManagedPrivateUDP = string;

/** Known values of {@link DirectUDP} that the service accepts. */
export enum KnownDirectUDP {
  /** AVD-wide settings are used to determine connection availability */
  Default = "Default",
  /** UDP will attempt this connection type when making connections. */
  Enabled = "Enabled",
  /** UDP will not attempt this connection type when making connections */
  Disabled = "Disabled",
}

/**
 * Defines values for DirectUDP. \
 * {@link KnownDirectUDP} can be used interchangeably with DirectUDP,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Default**: AVD-wide settings are used to determine connection availability \
 * **Enabled**: UDP will attempt this connection type when making connections. \
 * **Disabled**: UDP will not attempt this connection type when making connections
 */
export type DirectUDP = string;

/** Known values of {@link PublicUDP} that the service accepts. */
export enum KnownPublicUDP {
  /** AVD-wide settings are used to determine connection availability */
  Default = "Default",
  /** UDP will attempt this connection type when making connections. */
  Enabled = "Enabled",
  /** UDP will not attempt this connection type when making connections */
  Disabled = "Disabled",
}

/**
 * Defines values for PublicUDP. \
 * {@link KnownPublicUDP} can be used interchangeably with PublicUDP,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Default**: AVD-wide settings are used to determine connection availability \
 * **Enabled**: UDP will attempt this connection type when making connections. \
 * **Disabled**: UDP will not attempt this connection type when making connections
 */
export type PublicUDP = string;

/** Known values of {@link RelayUDP} that the service accepts. */
export enum KnownRelayUDP {
  /** AVD-wide settings are used to determine connection availability */
  Default = "Default",
  /** UDP will attempt this connection type when making connections. */
  Enabled = "Enabled",
  /** UDP will not attempt this connection type when making connections */
  Disabled = "Disabled",
}

/**
 * Defines values for RelayUDP. \
 * {@link KnownRelayUDP} can be used interchangeably with RelayUDP,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Default**: AVD-wide settings are used to determine connection availability \
 * **Enabled**: UDP will attempt this connection type when making connections. \
 * **Disabled**: UDP will not attempt this connection type when making connections
 */
export type RelayUDP = string;

/** Known values of {@link ScalingHostPoolType} that the service accepts. */
export enum KnownScalingHostPoolType {
  /** Users get a new (random) SessionHost every time it connects to the HostPool. */
  Pooled = "Pooled",
}

/**
 * Defines values for ScalingHostPoolType. \
 * {@link KnownScalingHostPoolType} can be used interchangeably with ScalingHostPoolType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Pooled**: Users get a new (random) SessionHost every time it connects to the HostPool.
 */
export type ScalingHostPoolType = string;

/** Known values of {@link ScalingScheduleDaysOfWeekItem} that the service accepts. */
export enum KnownScalingScheduleDaysOfWeekItem {
  /** Sunday */
  Sunday = "Sunday",
  /** Monday */
  Monday = "Monday",
  /** Tuesday */
  Tuesday = "Tuesday",
  /** Wednesday */
  Wednesday = "Wednesday",
  /** Thursday */
  Thursday = "Thursday",
  /** Friday */
  Friday = "Friday",
  /** Saturday */
  Saturday = "Saturday",
}

/**
 * Defines values for ScalingScheduleDaysOfWeekItem. \
 * {@link KnownScalingScheduleDaysOfWeekItem} can be used interchangeably with ScalingScheduleDaysOfWeekItem,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Sunday**: Sunday \
 * **Monday**: Monday \
 * **Tuesday**: Tuesday \
 * **Wednesday**: Wednesday \
 * **Thursday**: Thursday \
 * **Friday**: Friday \
 * **Saturday**: Saturday
 */
export type ScalingScheduleDaysOfWeekItem = string;

/** Known values of {@link SessionHostLoadBalancingAlgorithm} that the service accepts. */
export enum KnownSessionHostLoadBalancingAlgorithm {
  /** Breadth First Algorithm for Load Balancing */
  BreadthFirst = "BreadthFirst",
  /** Depth First Algorithm for Load Balancing */
  DepthFirst = "DepthFirst",
}

/**
 * Defines values for SessionHostLoadBalancingAlgorithm. \
 * {@link KnownSessionHostLoadBalancingAlgorithm} can be used interchangeably with SessionHostLoadBalancingAlgorithm,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **BreadthFirst**: Breadth First Algorithm for Load Balancing \
 * **DepthFirst**: Depth First Algorithm for Load Balancing
 */
export type SessionHostLoadBalancingAlgorithm = string;

/** Known values of {@link StopHostsWhen} that the service accepts. */
export enum KnownStopHostsWhen {
  /** Zero Total Sessions */
  ZeroSessions = "ZeroSessions",
  /** Zero Active Sessions */
  ZeroActiveSessions = "ZeroActiveSessions",
}

/**
 * Defines values for StopHostsWhen. \
 * {@link KnownStopHostsWhen} can be used interchangeably with StopHostsWhen,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ZeroSessions**: Zero Total Sessions \
 * **ZeroActiveSessions**: Zero Active Sessions
 */
export type StopHostsWhen = string;

/** Known values of {@link PublicNetworkAccess} that the service accepts. */
export enum KnownPublicNetworkAccess {
  /** This resource is accessible from the public network. */
  Enabled = "Enabled",
  /** This resource is not accessible from the public network. */
  Disabled = "Disabled",
}

/**
 * Defines values for PublicNetworkAccess. \
 * {@link KnownPublicNetworkAccess} can be used interchangeably with PublicNetworkAccess,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled**: This resource is accessible from the public network. \
 * **Disabled**: This resource is not accessible from the public network.
 */
export type PublicNetworkAccess = string;

/** Known values of {@link RemoteApplicationType} that the service accepts. */
export enum KnownRemoteApplicationType {
  /** Built-in applications */
  InBuilt = "InBuilt",
  /** Imported MSIX application packages */
  MsixApplication = "MsixApplication",
}

/**
 * Defines values for RemoteApplicationType. \
 * {@link KnownRemoteApplicationType} can be used interchangeably with RemoteApplicationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **InBuilt**: Built-in applications \
 * **MsixApplication**: Imported MSIX application packages
 */
export type RemoteApplicationType = string;

/** Known values of {@link CommandLineSetting} that the service accepts. */
export enum KnownCommandLineSetting {
  /** Cannot be launched with command line arguments. */
  DoNotAllow = "DoNotAllow",
  /** Can optionally be launched with command line arguments. */
  Allow = "Allow",
  /** Required to be launched with command line arguments. */
  Require = "Require",
}

/**
 * Defines values for CommandLineSetting. \
 * {@link KnownCommandLineSetting} can be used interchangeably with CommandLineSetting,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **DoNotAllow**: Cannot be launched with command line arguments. \
 * **Allow**: Can optionally be launched with command line arguments. \
 * **Require**: Required to be launched with command line arguments.
 */
export type CommandLineSetting = string;

/** Known values of {@link AppAttachPackageArchitectures} that the service accepts. */
export enum KnownAppAttachPackageArchitectures {
  /** ARM 32-bit */
  ARM = "ARM",
  /** ARM 64-bit */
  ARM64 = "ARM64",
  /** 32-bit x86 */
  X86 = "x86",
  /** 64-bit */
  X64 = "x64",
  /** Any architecture can be used */
  Neutral = "Neutral",
  /** X86 CHPE for ARM64 */
  X86A64 = "x86a64",
  /** Select all listed applications, no filters */
  ALL = "ALL",
}

/**
 * Defines values for AppAttachPackageArchitectures. \
 * {@link KnownAppAttachPackageArchitectures} can be used interchangeably with AppAttachPackageArchitectures,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ARM**: ARM 32-bit \
 * **ARM64**: ARM 64-bit \
 * **x86**: 32-bit x86 \
 * **x64**: 64-bit \
 * **Neutral**: Any architecture can be used \
 * **x86a64**: X86 CHPE for ARM64 \
 * **ALL**: Select all listed applications, no filters
 */
export type AppAttachPackageArchitectures = string;

/** Known values of {@link Status} that the service accepts. */
export enum KnownStatus {
  /** Session Host has passed all the health checks and is available to handle connections. */
  Available = "Available",
  /** Session Host is either turned off or has failed critical health checks which is causing service not to be able to route connections to this session host. Note this replaces previous 'NoHeartBeat' status. */
  Unavailable = "Unavailable",
  /** Session Host is shutdown - RD Agent reported session host to be stopped or deallocated. */
  Shutdown = "Shutdown",
  /** The Session Host is unavailable because it is currently disconnected. */
  Disconnected = "Disconnected",
  /** Session Host is unavailable because currently an upgrade of RDAgent\/side-by-side stack is in progress. Note: this state will be removed once the upgrade completes and the host is able to accept connections. */
  Upgrading = "Upgrading",
  /** Session Host is unavailable because the critical component upgrade (agent, side-by-side stack, etc.) failed. */
  UpgradeFailed = "UpgradeFailed",
  /** The Session Host is not heart beating. */
  NoHeartbeat = "NoHeartbeat",
  /** SessionHost is not joined to domain. */
  NotJoinedToDomain = "NotJoinedToDomain",
  /** SessionHost's domain trust relationship lost */
  DomainTrustRelationshipLost = "DomainTrustRelationshipLost",
  /** SxS stack installed on the SessionHost is not ready to receive connections. */
  SxSStackListenerNotReady = "SxSStackListenerNotReady",
  /** FSLogix is in an unhealthy state on the session host. */
  FSLogixNotHealthy = "FSLogixNotHealthy",
  /** New status to inform admins that the health on their endpoint needs to be fixed. The connections might not fail, as these issues are not fatal. */
  NeedsAssistance = "NeedsAssistance",
}

/**
 * Defines values for Status. \
 * {@link KnownStatus} can be used interchangeably with Status,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Available**: Session Host has passed all the health checks and is available to handle connections. \
 * **Unavailable**: Session Host is either turned off or has failed critical health checks which is causing service not to be able to route connections to this session host. Note this replaces previous 'NoHeartBeat' status. \
 * **Shutdown**: Session Host is shutdown - RD Agent reported session host to be stopped or deallocated. \
 * **Disconnected**: The Session Host is unavailable because it is currently disconnected. \
 * **Upgrading**: Session Host is unavailable because currently an upgrade of RDAgent\/side-by-side stack is in progress. Note: this state will be removed once the upgrade completes and the host is able to accept connections. \
 * **UpgradeFailed**: Session Host is unavailable because the critical component upgrade (agent, side-by-side stack, etc.) failed. \
 * **NoHeartbeat**: The Session Host is not heart beating. \
 * **NotJoinedToDomain**: SessionHost is not joined to domain. \
 * **DomainTrustRelationshipLost**: SessionHost's domain trust relationship lost \
 * **SxSStackListenerNotReady**: SxS stack installed on the SessionHost is not ready to receive connections. \
 * **FSLogixNotHealthy**: FSLogix is in an unhealthy state on the session host. \
 * **NeedsAssistance**: New status to inform admins that the health on their endpoint needs to be fixed. The connections might not fail, as these issues are not fatal.
 */
export type Status = string;

/** Known values of {@link UpdateState} that the service accepts. */
export enum KnownUpdateState {
  /** Update is initializing */
  Initial = "Initial",
  /** Update is pending */
  Pending = "Pending",
  /** Update has started */
  Started = "Started",
  /** Update has succeeded */
  Succeeded = "Succeeded",
  /** Update has failed */
  Failed = "Failed",
}

/**
 * Defines values for UpdateState. \
 * {@link KnownUpdateState} can be used interchangeably with UpdateState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Initial**: Update is initializing \
 * **Pending**: Update is pending \
 * **Started**: Update has started \
 * **Succeeded**: Update has succeeded \
 * **Failed**: Update has failed
 */
export type UpdateState = string;

/** Known values of {@link HealthCheckName} that the service accepts. */
export enum KnownHealthCheckName {
  /** Verifies the SessionHost is joined to a domain. If this check fails is classified as fatal as no connection can succeed if the SessionHost is not joined to the domain. (Currently Enabled) */
  DomainJoinedCheck = "DomainJoinedCheck",
  /** Verifies the SessionHost is not experiencing domain trust issues that will prevent authentication on SessionHost at connection time when session is created. If this check fails is classified as fatal as no connection can succeed if we cannot reach the domain for authentication on the SessionHost. (Currently Enabled) */
  DomainTrustCheck = "DomainTrustCheck",
  /** Verifies the FSLogix service is up and running to make sure users' profiles are loaded in the session. If this check fails is classified as fatal as even if the connection can succeed, user experience is bad as the user profile cannot be loaded and user will get a temporary profile in the session. (Currently Disabled) */
  FSLogixHealthCheck = "FSLogixHealthCheck",
  /** Verifies that the SxS stack is up and running so connections can succeed. If this check fails is classified as fatal as no connection can succeed if the SxS stack is not ready. (Currently Enabled) */
  SxSStackListenerCheck = "SxSStackListenerCheck",
  /** Verifies that the required WVD service and Geneva URLs are reachable from the SessionHost. These URLs are: RdTokenUri, RdBrokerURI, RdDiagnosticsUri and storage blob URLs for agent monitoring (geneva). If this check fails, it is non fatal and the machine still can service connections, main issue may be that monitoring agent is unable to store warm path data (logs, operations ...). (Currently Disabled) */
  UrlsAccessibleCheck = "UrlsAccessibleCheck",
  /** Verifies that the required Geneva agent is running. If this check fails, it is non fatal and the machine still can service connections, main issue may be that monitoring agent is missing or running (possibly) older version. (Currently Enabled) */
  MonitoringAgentCheck = "MonitoringAgentCheck",
  /** Verifies the domain the SessionHost is joined to is still reachable. If this check fails is classified as fatal as no connection can succeed if the domain the SessionHost is joined is not reachable at the time of connection. (Currently Disabled) */
  DomainReachable = "DomainReachable",
  /** Verifies whether the WebRTCRedirector component is healthy. The WebRTCRedirector component is used to optimize video and audio performance in Microsoft Teams. This checks whether the component is still running, and whether there is a higher version available. If this check fails, it is non fatal and the machine still can service connections, main issue may be the WebRTCRedirector component has to be restarted or updated. (Currently Disabled) */
  WebRTCRedirectorCheck = "WebRTCRedirectorCheck",
  /** Verifies the value of SecurityLayer registration key. If the value is 0 (SecurityLayer.RDP) this check fails with Error code = NativeMethodErrorCode.E_FAIL and is fatal. If the value is 1 (SecurityLayer.Negotiate) this check fails with Error code = NativeMethodErrorCode.ERROR_SUCCESS and is non fatal. (Currently Disabled) */
  SupportedEncryptionCheck = "SupportedEncryptionCheck",
  /** Verifies the metadata service is accessible and return compute properties. (Currently Enabled) */
  MetaDataServiceCheck = "MetaDataServiceCheck",
  /** Verifies that the AppAttachService is healthy (there were no issues during package staging). The AppAttachService is used to enable the staging\/registration (and eventual deregistration\/destaging) of MSIX apps that have been set up by the tenant admin. This checks whether the component had any failures during package staging. Failures in staging will prevent some MSIX apps from working properly for the end user. If this check fails, it is non fatal and the machine still can service connections, main issue may be certain apps will not work for end-users. (Currently Enabled) */
  AppAttachHealthCheck = "AppAttachHealthCheck",
}

/**
 * Defines values for HealthCheckName. \
 * {@link KnownHealthCheckName} can be used interchangeably with HealthCheckName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **DomainJoinedCheck**: Verifies the SessionHost is joined to a domain. If this check fails is classified as fatal as no connection can succeed if the SessionHost is not joined to the domain. (Currently Enabled) \
 * **DomainTrustCheck**: Verifies the SessionHost is not experiencing domain trust issues that will prevent authentication on SessionHost at connection time when session is created. If this check fails is classified as fatal as no connection can succeed if we cannot reach the domain for authentication on the SessionHost. (Currently Enabled) \
 * **FSLogixHealthCheck**: Verifies the FSLogix service is up and running to make sure users' profiles are loaded in the session. If this check fails is classified as fatal as even if the connection can succeed, user experience is bad as the user profile cannot be loaded and user will get a temporary profile in the session. (Currently Disabled) \
 * **SxSStackListenerCheck**: Verifies that the SxS stack is up and running so connections can succeed. If this check fails is classified as fatal as no connection can succeed if the SxS stack is not ready. (Currently Enabled) \
 * **UrlsAccessibleCheck**: Verifies that the required WVD service and Geneva URLs are reachable from the SessionHost. These URLs are: RdTokenUri, RdBrokerURI, RdDiagnosticsUri and storage blob URLs for agent monitoring (geneva). If this check fails, it is non fatal and the machine still can service connections, main issue may be that monitoring agent is unable to store warm path data (logs, operations ...). (Currently Disabled) \
 * **MonitoringAgentCheck**: Verifies that the required Geneva agent is running. If this check fails, it is non fatal and the machine still can service connections, main issue may be that monitoring agent is missing or running (possibly) older version. (Currently Enabled) \
 * **DomainReachable**: Verifies the domain the SessionHost is joined to is still reachable. If this check fails is classified as fatal as no connection can succeed if the domain the SessionHost is joined is not reachable at the time of connection. (Currently Disabled) \
 * **WebRTCRedirectorCheck**: Verifies whether the WebRTCRedirector component is healthy. The WebRTCRedirector component is used to optimize video and audio performance in Microsoft Teams. This checks whether the component is still running, and whether there is a higher version available. If this check fails, it is non fatal and the machine still can service connections, main issue may be the WebRTCRedirector component has to be restarted or updated. (Currently Disabled) \
 * **SupportedEncryptionCheck**: Verifies the value of SecurityLayer registration key. If the value is 0 (SecurityLayer.RDP) this check fails with Error code = NativeMethodErrorCode.E_FAIL and is fatal. If the value is 1 (SecurityLayer.Negotiate) this check fails with Error code = NativeMethodErrorCode.ERROR_SUCCESS and is non fatal. (Currently Disabled) \
 * **MetaDataServiceCheck**: Verifies the metadata service is accessible and return compute properties. (Currently Enabled) \
 * **AppAttachHealthCheck**: Verifies that the AppAttachService is healthy (there were no issues during package staging). The AppAttachService is used to enable the staging\/registration (and eventual deregistration\/destaging) of MSIX apps that have been set up by the tenant admin. This checks whether the component had any failures during package staging. Failures in staging will prevent some MSIX apps from working properly for the end user. If this check fails, it is non fatal and the machine still can service connections, main issue may be certain apps will not work for end-users. (Currently Enabled)
 */
export type HealthCheckName = string;

/** Known values of {@link HealthCheckResult} that the service accepts. */
export enum KnownHealthCheckResult {
  /** Health check result is not currently known. */
  Unknown = "Unknown",
  /** Health check passed. */
  HealthCheckSucceeded = "HealthCheckSucceeded",
  /** Health check failed. */
  HealthCheckFailed = "HealthCheckFailed",
  /** We received a Shutdown notification. */
  SessionHostShutdown = "SessionHostShutdown",
}

/**
 * Defines values for HealthCheckResult. \
 * {@link KnownHealthCheckResult} can be used interchangeably with HealthCheckResult,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown**: Health check result is not currently known. \
 * **HealthCheckSucceeded**: Health check passed. \
 * **HealthCheckFailed**: Health check failed. \
 * **SessionHostShutdown**: We received a Shutdown notification.
 */
export type HealthCheckResult = string;

/** Known values of {@link ApplicationType} that the service accepts. */
export enum KnownApplicationType {
  /** Remote Applications (non-desktop) */
  RemoteApp = "RemoteApp",
  /** Desktop Applications */
  Desktop = "Desktop",
}

/**
 * Defines values for ApplicationType. \
 * {@link KnownApplicationType} can be used interchangeably with ApplicationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **RemoteApp**: Remote Applications (non-desktop) \
 * **Desktop**: Desktop Applications
 */
export type ApplicationType = string;

/** Known values of {@link SessionState} that the service accepts. */
export enum KnownSessionState {
  /** SessionState is unknown */
  Unknown = "Unknown",
  /** Session is active */
  Active = "Active",
  /** Session is disconnected */
  Disconnected = "Disconnected",
  /** Session is pending connection */
  Pending = "Pending",
  /** Session is logging off */
  LogOff = "LogOff",
  /** Session has mounted user profile disk */
  UserProfileDiskMounted = "UserProfileDiskMounted",
}

/**
 * Defines values for SessionState. \
 * {@link KnownSessionState} can be used interchangeably with SessionState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown**: SessionState is unknown \
 * **Active**: Session is active \
 * **Disconnected**: Session is disconnected \
 * **Pending**: Session is pending connection \
 * **LogOff**: Session is logging off \
 * **UserProfileDiskMounted**: Session has mounted user profile disk
 */
export type SessionState = string;

/** Known values of {@link StartupBehavior} that the service accepts. */
export enum KnownStartupBehavior {
  /** Session hosts will not be started by the service. This setting depends on Start VM on Connect to be enabled to start the session hosts. */
  None = "None",
  /** Session hosts with an assigned user will be started during Ramp Up */
  WithAssignedUser = "WithAssignedUser",
  /** All personal session hosts in the hostpool will be started during ramp up. */
  All = "All",
}

/**
 * Defines values for StartupBehavior. \
 * {@link KnownStartupBehavior} can be used interchangeably with StartupBehavior,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None**: Session hosts will not be started by the service. This setting depends on Start VM on Connect to be enabled to start the session hosts. \
 * **WithAssignedUser**: Session hosts with an assigned user will be started during Ramp Up \
 * **All**: All personal session hosts in the hostpool will be started during ramp up.
 */
export type StartupBehavior = string;

/** Known values of {@link SetStartVMOnConnect} that the service accepts. */
export enum KnownSetStartVMOnConnect {
  /** Start VM on Connect is enabled */
  Enable = "Enable",
  /** Start VM on Connect is disabled, must use rampUpAutoStartHosts or turn on manually */
  Disable = "Disable",
}

/**
 * Defines values for SetStartVMOnConnect. \
 * {@link KnownSetStartVMOnConnect} can be used interchangeably with SetStartVMOnConnect,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enable**: Start VM on Connect is enabled \
 * **Disable**: Start VM on Connect is disabled, must use rampUpAutoStartHosts or turn on manually
 */
export type SetStartVMOnConnect = string;

/** Known values of {@link SessionHandlingOperation} that the service accepts. */
export enum KnownSessionHandlingOperation {
  /** No action will be taken after disconnect */
  None = "None",
  /** Session Host will be deallocated after disconnect */
  Deallocate = "Deallocate",
  /** Session Host will hibernate after disconnect */
  Hibernate = "Hibernate",
}

/**
 * Defines values for SessionHandlingOperation. \
 * {@link KnownSessionHandlingOperation} can be used interchangeably with SessionHandlingOperation,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None**: No action will be taken after disconnect \
 * **Deallocate**: Session Host will be deallocated after disconnect \
 * **Hibernate**: Session Host will hibernate after disconnect
 */
export type SessionHandlingOperation = string;
/** Defines values for DayOfWeek. */
export type DayOfWeek =
  | "Monday"
  | "Tuesday"
  | "Wednesday"
  | "Thursday"
  | "Friday"
  | "Saturday"
  | "Sunday";

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationListResult;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export interface AppAttachPackagesListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {
  /** OData filter expression. Valid properties for filtering are package name, host pool, and resource group. */
  filter?: string;
}

/** Contains response data for the listBySubscription operation. */
export type AppAttachPackagesListBySubscriptionResponse = AppAttachPackageList;

/** Optional parameters. */
export interface AppAttachPackagesListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {
  /** OData filter expression. Valid properties for filtering are package name and host pool. */
  filter?: string;
}

/** Contains response data for the listByResourceGroup operation. */
export type AppAttachPackagesListByResourceGroupResponse = AppAttachPackageList;

/** Optional parameters. */
export interface AppAttachPackagesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type AppAttachPackagesGetResponse = AppAttachPackage;

/** Optional parameters. */
export interface AppAttachPackagesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type AppAttachPackagesCreateOrUpdateResponse = AppAttachPackage;

/** Optional parameters. */
export interface AppAttachPackagesUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type AppAttachPackagesUpdateResponse = AppAttachPackage;

/** Optional parameters. */
export interface AppAttachPackagesDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface AppAttachPackagesListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type AppAttachPackagesListBySubscriptionNextResponse =
  AppAttachPackageList;

/** Optional parameters. */
export interface AppAttachPackagesListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type AppAttachPackagesListByResourceGroupNextResponse =
  AppAttachPackageList;

/** Optional parameters. */
export interface ApplicationGroupsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {
  /** OData filter expression. Valid properties for filtering are applicationGroupType. */
  filter?: string;
}

/** Contains response data for the listBySubscription operation. */
export type ApplicationGroupsListBySubscriptionResponse = ApplicationGroupList;

/** Optional parameters. */
export interface ApplicationGroupsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {
  /** OData filter expression. Valid properties for filtering are applicationGroupType. */
  filter?: string;
  /** Number of items per page. */
  pageSize?: number;
  /** Indicates whether the collection is descending. */
  isDescending?: boolean;
  /** Initial number of items to skip. */
  initialSkip?: number;
}

/** Contains response data for the listByResourceGroup operation. */
export type ApplicationGroupsListByResourceGroupResponse = ApplicationGroupList;

/** Optional parameters. */
export interface ApplicationGroupsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ApplicationGroupsGetResponse = ApplicationGroup;

/** Optional parameters. */
export interface ApplicationGroupsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type ApplicationGroupsCreateOrUpdateResponse = ApplicationGroup;

/** Optional parameters. */
export interface ApplicationGroupsUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type ApplicationGroupsUpdateResponse = ApplicationGroup;

/** Optional parameters. */
export interface ApplicationGroupsDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ApplicationGroupsListOptionalParams
  extends coreClient.OperationOptions {
  /** Number of items per page. */
  pageSize?: number;
  /** Indicates whether the collection is descending. */
  isDescending?: boolean;
  /** Initial number of items to skip. */
  initialSkip?: number;
}

/** Contains response data for the list operation. */
export type ApplicationGroupsListResponse = StartMenuItemList;

/** Optional parameters. */
export interface ApplicationGroupsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type ApplicationGroupsListBySubscriptionNextResponse =
  ApplicationGroupList;

/** Optional parameters. */
export interface ApplicationGroupsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type ApplicationGroupsListByResourceGroupNextResponse =
  ApplicationGroupList;

/** Optional parameters. */
export interface ApplicationGroupsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type ApplicationGroupsListNextResponse = StartMenuItemList;

/** Optional parameters. */
export interface HostPoolsListOptionalParams
  extends coreClient.OperationOptions {
  /** Number of items per page. */
  pageSize?: number;
  /** Indicates whether the collection is descending. */
  isDescending?: boolean;
  /** Initial number of items to skip. */
  initialSkip?: number;
}

/** Contains response data for the list operation. */
export type HostPoolsListResponse = HostPoolList;

/** Optional parameters. */
export interface HostPoolsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {
  /** Number of items per page. */
  pageSize?: number;
  /** Indicates whether the collection is descending. */
  isDescending?: boolean;
  /** Initial number of items to skip. */
  initialSkip?: number;
}

/** Contains response data for the listByResourceGroup operation. */
export type HostPoolsListByResourceGroupResponse = HostPoolList;

/** Optional parameters. */
export interface HostPoolsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type HostPoolsGetResponse = HostPool;

/** Optional parameters. */
export interface HostPoolsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type HostPoolsCreateOrUpdateResponse = HostPool;

/** Optional parameters. */
export interface HostPoolsUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type HostPoolsUpdateResponse = HostPool;

/** Optional parameters. */
export interface HostPoolsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Force flag to delete sessionHost. */
  force?: boolean;
}

/** Optional parameters. */
export interface HostPoolsExpandOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the expand operation. */
export type HostPoolsExpandResponse = ExpandMsixImageList;

/** Optional parameters. */
export interface HostPoolsImportAppAttachPackageInfoOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the importAppAttachPackageInfo operation. */
export type HostPoolsImportAppAttachPackageInfoResponse = AppAttachPackageList;

/** Optional parameters. */
export interface HostPoolsListByHostPoolOptionalParams
  extends coreClient.OperationOptions {
  /** Number of items per page. */
  pageSize?: number;
  /** Indicates whether the collection is descending. */
  isDescending?: boolean;
  /** Initial number of items to skip. */
  initialSkip?: number;
}

/** Contains response data for the listByHostPool operation. */
export type HostPoolsListByHostPoolResponse = ScalingPlanList;

/** Optional parameters. */
export interface HostPoolsListRegistrationTokensOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listRegistrationTokens operation. */
export type HostPoolsListRegistrationTokensResponse = RegistrationTokenList;

/** Optional parameters. */
export interface HostPoolsPrivateLinkResourcesListByHostPoolOptionalParams
  extends coreClient.OperationOptions {
  /** Number of items per page. */
  pageSize?: number;
  /** Indicates whether the collection is descending. */
  isDescending?: boolean;
  /** Initial number of items to skip. */
  initialSkip?: number;
}

/** Contains response data for the privateLinkResourcesListByHostPool operation. */
export type HostPoolsPrivateLinkResourcesListByHostPoolResponse =
  PrivateLinkResourceListResult;

/** Optional parameters. */
export interface HostPoolsRetrieveRegistrationTokenOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the retrieveRegistrationToken operation. */
export type HostPoolsRetrieveRegistrationTokenResponse = RegistrationInfo;

/** Optional parameters. */
export interface HostPoolsUserSessionsListByHostPoolOptionalParams
  extends coreClient.OperationOptions {
  /** OData filter expression. Valid properties for filtering are userprincipalname and sessionstate. */
  filter?: string;
  /** Number of items per page. */
  pageSize?: number;
  /** Indicates whether the collection is descending. */
  isDescending?: boolean;
  /** Initial number of items to skip. */
  initialSkip?: number;
}

/** Contains response data for the userSessionsListByHostPool operation. */
export type HostPoolsUserSessionsListByHostPoolResponse = UserSessionList;

/** Optional parameters. */
export interface HostPoolsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type HostPoolsListNextResponse = HostPoolList;

/** Optional parameters. */
export interface HostPoolsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type HostPoolsListByResourceGroupNextResponse = HostPoolList;

/** Optional parameters. */
export interface HostPoolsExpandNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the expandNext operation. */
export type HostPoolsExpandNextResponse = ExpandMsixImageList;

/** Optional parameters. */
export interface HostPoolsImportAppAttachPackageInfoNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the importAppAttachPackageInfoNext operation. */
export type HostPoolsImportAppAttachPackageInfoNextResponse =
  AppAttachPackageList;

/** Optional parameters. */
export interface HostPoolsListByHostPoolNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByHostPoolNext operation. */
export type HostPoolsListByHostPoolNextResponse = ScalingPlanList;

/** Optional parameters. */
export interface HostPoolsPrivateLinkResourcesListByHostPoolNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the privateLinkResourcesListByHostPoolNext operation. */
export type HostPoolsPrivateLinkResourcesListByHostPoolNextResponse =
  PrivateLinkResourceListResult;

/** Optional parameters. */
export interface HostPoolsUserSessionsListByHostPoolNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the userSessionsListByHostPoolNext operation. */
export type HostPoolsUserSessionsListByHostPoolNextResponse = UserSessionList;

/** Optional parameters. */
export interface MsixPackagesListOptionalParams
  extends coreClient.OperationOptions {
  /** Number of items per page. */
  pageSize?: number;
  /** Indicates whether the collection is descending. */
  isDescending?: boolean;
  /** Initial number of items to skip. */
  initialSkip?: number;
}

/** Contains response data for the list operation. */
export type MsixPackagesListResponse = MsixPackageList;

/** Optional parameters. */
export interface MsixPackagesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type MsixPackagesGetResponse = MsixPackage;

/** Optional parameters. */
export interface MsixPackagesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type MsixPackagesCreateOrUpdateResponse = MsixPackage;

/** Optional parameters. */
export interface MsixPackagesUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type MsixPackagesUpdateResponse = MsixPackage;

/** Optional parameters. */
export interface MsixPackagesDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface MsixPackagesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type MsixPackagesListNextResponse = MsixPackageList;

/** Optional parameters. */
export interface ScalingPlansListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {
  /** Number of items per page. */
  pageSize?: number;
  /** Indicates whether the collection is descending. */
  isDescending?: boolean;
  /** Initial number of items to skip. */
  initialSkip?: number;
}

/** Contains response data for the listBySubscription operation. */
export type ScalingPlansListBySubscriptionResponse = ScalingPlanList;

/** Optional parameters. */
export interface ScalingPlansListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {
  /** Number of items per page. */
  pageSize?: number;
  /** Indicates whether the collection is descending. */
  isDescending?: boolean;
  /** Initial number of items to skip. */
  initialSkip?: number;
}

/** Contains response data for the listByResourceGroup operation. */
export type ScalingPlansListByResourceGroupResponse = ScalingPlanList;

/** Optional parameters. */
export interface ScalingPlansGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ScalingPlansGetResponse = ScalingPlan;

/** Optional parameters. */
export interface ScalingPlansCreateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the create operation. */
export type ScalingPlansCreateResponse = ScalingPlan;

/** Optional parameters. */
export interface ScalingPlansUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type ScalingPlansUpdateResponse = ScalingPlan;

/** Optional parameters. */
export interface ScalingPlansDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ScalingPlansListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type ScalingPlansListBySubscriptionNextResponse = ScalingPlanList;

/** Optional parameters. */
export interface ScalingPlansListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type ScalingPlansListByResourceGroupNextResponse = ScalingPlanList;

/** Optional parameters. */
export interface WorkspacesListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type WorkspacesListBySubscriptionResponse = WorkspaceList;

/** Optional parameters. */
export interface WorkspacesListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {
  /** Number of items per page. */
  pageSize?: number;
  /** Indicates whether the collection is descending. */
  isDescending?: boolean;
  /** Initial number of items to skip. */
  initialSkip?: number;
}

/** Contains response data for the listByResourceGroup operation. */
export type WorkspacesListByResourceGroupResponse = WorkspaceList;

/** Optional parameters. */
export interface WorkspacesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type WorkspacesGetResponse = Workspace;

/** Optional parameters. */
export interface WorkspacesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type WorkspacesCreateOrUpdateResponse = Workspace;

/** Optional parameters. */
export interface WorkspacesUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type WorkspacesUpdateResponse = Workspace;

/** Optional parameters. */
export interface WorkspacesDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface WorkspacesListByWorkspaceOptionalParams
  extends coreClient.OperationOptions {
  /** Number of items per page. */
  pageSize?: number;
  /** Indicates whether the collection is descending. */
  isDescending?: boolean;
  /** Initial number of items to skip. */
  initialSkip?: number;
}

/** Contains response data for the listByWorkspace operation. */
export type WorkspacesListByWorkspaceResponse = PrivateLinkResourceListResult;

/** Optional parameters. */
export interface WorkspacesListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type WorkspacesListBySubscriptionNextResponse = WorkspaceList;

/** Optional parameters. */
export interface WorkspacesListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type WorkspacesListByResourceGroupNextResponse = WorkspaceList;

/** Optional parameters. */
export interface WorkspacesListByWorkspaceNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByWorkspaceNext operation. */
export type WorkspacesListByWorkspaceNextResponse =
  PrivateLinkResourceListResult;

/** Optional parameters. */
export interface ApplicationsListOptionalParams
  extends coreClient.OperationOptions {
  /** Number of items per page. */
  pageSize?: number;
  /** Indicates whether the collection is descending. */
  isDescending?: boolean;
  /** Initial number of items to skip. */
  initialSkip?: number;
}

/** Contains response data for the list operation. */
export type ApplicationsListResponse = ApplicationList;

/** Optional parameters. */
export interface ApplicationsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ApplicationsGetResponse = Application;

/** Optional parameters. */
export interface ApplicationsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type ApplicationsCreateOrUpdateResponse = Application;

/** Optional parameters. */
export interface ApplicationsUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type ApplicationsUpdateResponse = Application;

/** Optional parameters. */
export interface ApplicationsDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ApplicationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type ApplicationsListNextResponse = ApplicationList;

/** Optional parameters. */
export interface DesktopsListOptionalParams
  extends coreClient.OperationOptions {
  /** Number of items per page. */
  pageSize?: number;
  /** Indicates whether the collection is descending. */
  isDescending?: boolean;
  /** Initial number of items to skip. */
  initialSkip?: number;
}

/** Contains response data for the list operation. */
export type DesktopsListResponse = DesktopList;

/** Optional parameters. */
export interface DesktopsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type DesktopsGetResponse = Desktop;

/** Optional parameters. */
export interface DesktopsUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type DesktopsUpdateResponse = Desktop;

/** Optional parameters. */
export interface DesktopsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type DesktopsListNextResponse = DesktopList;

/** Optional parameters. */
export interface PrivateEndpointConnectionOnHostPoolWithSystemDataOperationGroupListByHostPoolOptionalParams
  extends coreClient.OperationOptions {
  /** Number of items per page. */
  pageSize?: number;
  /** Indicates whether the collection is descending. */
  isDescending?: boolean;
  /** Initial number of items to skip. */
  initialSkip?: number;
}

/** Contains response data for the listByHostPool operation. */
export type PrivateEndpointConnectionOnHostPoolWithSystemDataOperationGroupListByHostPoolResponse =
  PrivateEndpointConnectionOnHostPoolListResultWithSystemData;

/** Optional parameters. */
export interface PrivateEndpointConnectionOnHostPoolWithSystemDataOperationGroupGetByHostPoolOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getByHostPool operation. */
export type PrivateEndpointConnectionOnHostPoolWithSystemDataOperationGroupGetByHostPoolResponse =
  PrivateEndpointConnectionOnHostPoolWithSystemData;

/** Optional parameters. */
export interface PrivateEndpointConnectionOnHostPoolWithSystemDataOperationGroupUpdateByHostPoolOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the updateByHostPool operation. */
export type PrivateEndpointConnectionOnHostPoolWithSystemDataOperationGroupUpdateByHostPoolResponse =
  PrivateEndpointConnectionOnHostPoolWithSystemData;

/** Optional parameters. */
export interface PrivateEndpointConnectionOnHostPoolWithSystemDataOperationGroupDeleteByHostPoolOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface PrivateEndpointConnectionOnHostPoolWithSystemDataOperationGroupListByHostPoolNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByHostPoolNext operation. */
export type PrivateEndpointConnectionOnHostPoolWithSystemDataOperationGroupListByHostPoolNextResponse =
  PrivateEndpointConnectionOnHostPoolListResultWithSystemData;

/** Optional parameters. */
export interface SessionHostsListOptionalParams
  extends coreClient.OperationOptions {
  /** Number of items per page. */
  pageSize?: number;
  /** Indicates whether the collection is descending. */
  isDescending?: boolean;
  /** Initial number of items to skip. */
  initialSkip?: number;
}

/** Contains response data for the list operation. */
export type SessionHostsListResponse = SessionHostList;

/** Optional parameters. */
export interface SessionHostsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type SessionHostsGetResponse = SessionHost;

/** Optional parameters. */
export interface SessionHostsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Force flag to update assign, unassign or reassign personal desktop. */
  force?: boolean;
}

/** Contains response data for the update operation. */
export type SessionHostsUpdateResponse = SessionHost;

/** Optional parameters. */
export interface SessionHostsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Force flag to force sessionHost deletion even when userSession exists. */
  force?: boolean;
}

/** Optional parameters. */
export interface SessionHostsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type SessionHostsListNextResponse = SessionHostList;

/** Optional parameters. */
export interface UserSessionsListOptionalParams
  extends coreClient.OperationOptions {
  /** Number of items per page. */
  pageSize?: number;
  /** Indicates whether the collection is descending. */
  isDescending?: boolean;
  /** Initial number of items to skip. */
  initialSkip?: number;
}

/** Contains response data for the list operation. */
export type UserSessionsListResponse = UserSessionList;

/** Optional parameters. */
export interface UserSessionsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type UserSessionsGetResponse = UserSession;

/** Optional parameters. */
export interface UserSessionsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Force flag to login off userSession. */
  force?: boolean;
}

/** Optional parameters. */
export interface UserSessionsDisconnectOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface UserSessionsSendMessageOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface UserSessionsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type UserSessionsListNextResponse = UserSessionList;

/** Optional parameters. */
export interface ScalingPlanPersonalSchedulesListOptionalParams
  extends coreClient.OperationOptions {
  /** Number of items per page. */
  pageSize?: number;
  /** Indicates whether the collection is descending. */
  isDescending?: boolean;
  /** Initial number of items to skip. */
  initialSkip?: number;
}

/** Contains response data for the list operation. */
export type ScalingPlanPersonalSchedulesListResponse =
  ScalingPlanPersonalScheduleList;

/** Optional parameters. */
export interface ScalingPlanPersonalSchedulesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ScalingPlanPersonalSchedulesGetResponse =
  ScalingPlanPersonalSchedule;

/** Optional parameters. */
export interface ScalingPlanPersonalSchedulesCreateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the create operation. */
export type ScalingPlanPersonalSchedulesCreateResponse =
  ScalingPlanPersonalSchedule;

/** Optional parameters. */
export interface ScalingPlanPersonalSchedulesUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type ScalingPlanPersonalSchedulesUpdateResponse =
  ScalingPlanPersonalSchedule;

/** Optional parameters. */
export interface ScalingPlanPersonalSchedulesDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ScalingPlanPersonalSchedulesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type ScalingPlanPersonalSchedulesListNextResponse =
  ScalingPlanPersonalScheduleList;

/** Optional parameters. */
export interface ScalingPlanPooledSchedulesListOptionalParams
  extends coreClient.OperationOptions {
  /** Number of items per page. */
  pageSize?: number;
  /** Indicates whether the collection is descending. */
  isDescending?: boolean;
  /** Initial number of items to skip. */
  initialSkip?: number;
}

/** Contains response data for the list operation. */
export type ScalingPlanPooledSchedulesListResponse =
  ScalingPlanPooledScheduleList;

/** Optional parameters. */
export interface ScalingPlanPooledSchedulesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ScalingPlanPooledSchedulesGetResponse = ScalingPlanPooledSchedule;

/** Optional parameters. */
export interface ScalingPlanPooledSchedulesCreateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the create operation. */
export type ScalingPlanPooledSchedulesCreateResponse =
  ScalingPlanPooledSchedule;

/** Optional parameters. */
export interface ScalingPlanPooledSchedulesUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type ScalingPlanPooledSchedulesUpdateResponse =
  ScalingPlanPooledSchedule;

/** Optional parameters. */
export interface ScalingPlanPooledSchedulesDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ScalingPlanPooledSchedulesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type ScalingPlanPooledSchedulesListNextResponse =
  ScalingPlanPooledScheduleList;

/** Optional parameters. */
export interface PrivateEndpointConnectionOnWorkspaceWithSystemDataOperationGroupListByWorkspaceOptionalParams
  extends coreClient.OperationOptions {
  /** Number of items per page. */
  pageSize?: number;
  /** Indicates whether the collection is descending. */
  isDescending?: boolean;
  /** Initial number of items to skip. */
  initialSkip?: number;
}

/** Contains response data for the listByWorkspace operation. */
export type PrivateEndpointConnectionOnWorkspaceWithSystemDataOperationGroupListByWorkspaceResponse =
  PrivateEndpointConnectionOnWorkspaceListResultWithSystemData;

/** Optional parameters. */
export interface PrivateEndpointConnectionOnWorkspaceWithSystemDataOperationGroupGetByWorkspaceOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getByWorkspace operation. */
export type PrivateEndpointConnectionOnWorkspaceWithSystemDataOperationGroupGetByWorkspaceResponse =
  PrivateEndpointConnectionOnWorkspaceWithSystemData;

/** Optional parameters. */
export interface PrivateEndpointConnectionOnWorkspaceWithSystemDataOperationGroupUpdateByWorkspaceOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the updateByWorkspace operation. */
export type PrivateEndpointConnectionOnWorkspaceWithSystemDataOperationGroupUpdateByWorkspaceResponse =
  PrivateEndpointConnectionOnWorkspaceWithSystemData;

/** Optional parameters. */
export interface PrivateEndpointConnectionOnWorkspaceWithSystemDataOperationGroupDeleteByWorkspaceOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface PrivateEndpointConnectionOnWorkspaceWithSystemDataOperationGroupListByWorkspaceNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByWorkspaceNext operation. */
export type PrivateEndpointConnectionOnWorkspaceWithSystemDataOperationGroupListByWorkspaceNextResponse =
  PrivateEndpointConnectionOnWorkspaceListResultWithSystemData;

/** Optional parameters. */
export interface DesktopVirtualizationAPIClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
