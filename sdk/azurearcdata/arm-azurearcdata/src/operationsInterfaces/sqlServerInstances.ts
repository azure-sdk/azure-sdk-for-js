/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  SqlServerInstance,
  SqlServerInstancesListOptionalParams,
  SqlServerInstancesListByResourceGroupOptionalParams,
  SqlServerInstanceTelemetryRequest,
  SqlServerInstancesGetTelemetryOptionalParams,
  SqlServerInstancesGetOptionalParams,
  SqlServerInstancesGetResponse,
  SqlServerInstancesCreateOptionalParams,
  SqlServerInstancesCreateResponse,
  SqlServerInstancesDeleteOptionalParams,
  SqlServerInstanceUpdate,
  SqlServerInstancesUpdateOptionalParams,
  SqlServerInstancesUpdateResponse,
  SqlServerInstancesRunMigrationAssessmentOptionalParams,
  SqlServerInstancesRunMigrationAssessmentResponse,
  SqlServerInstancesGetJobsStatusOptionalParams,
  SqlServerInstancesGetJobsStatusResponse,
  SqlServerInstancesPreUpgradeOptionalParams,
  SqlServerInstancesPreUpgradeResponse,
  SqlServerInstancesPostUpgradeOptionalParams,
  SqlServerInstancesPostUpgradeResponse,
  SqlServerInstanceManagedInstanceLinkAssessmentRequest,
  SqlServerInstancesRunManagedInstanceLinkAssessmentOptionalParams,
  SqlServerInstancesRunManagedInstanceLinkAssessmentResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a SqlServerInstances. */
export interface SqlServerInstances {
  /**
   * List sqlServerInstance resources in the subscription
   * @param options The options parameters.
   */
  list(
    options?: SqlServerInstancesListOptionalParams,
  ): PagedAsyncIterableIterator<SqlServerInstance>;
  /**
   * Gets all sqlServerInstances in a resource group.
   * @param resourceGroupName The name of the Azure resource group
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: SqlServerInstancesListByResourceGroupOptionalParams,
  ): PagedAsyncIterableIterator<SqlServerInstance>;
  /**
   * Retrieves SQL Server instance telemetry
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param sqlServerInstanceTelemetryRequest Contains the parameters to get SQL Server instance
   *                                          telemetry.
   * @param options The options parameters.
   */
  beginListTelemetryAndWait(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    sqlServerInstanceTelemetryRequest: SqlServerInstanceTelemetryRequest,
    options?: SqlServerInstancesGetTelemetryOptionalParams,
  ): PagedAsyncIterableIterator<string[]>;
  /**
   * Retrieves a SQL Server Instance resource
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    options?: SqlServerInstancesGetOptionalParams,
  ): Promise<SqlServerInstancesGetResponse>;
  /**
   * Creates or replaces a SQL Server Instance resource
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param sqlServerInstance The SQL Server Instance to be created or updated.
   * @param options The options parameters.
   */
  beginCreate(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    sqlServerInstance: SqlServerInstance,
    options?: SqlServerInstancesCreateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<SqlServerInstancesCreateResponse>,
      SqlServerInstancesCreateResponse
    >
  >;
  /**
   * Creates or replaces a SQL Server Instance resource
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param sqlServerInstance The SQL Server Instance to be created or updated.
   * @param options The options parameters.
   */
  beginCreateAndWait(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    sqlServerInstance: SqlServerInstance,
    options?: SqlServerInstancesCreateOptionalParams,
  ): Promise<SqlServerInstancesCreateResponse>;
  /**
   * Deletes a SQL Server Instance resource
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    options?: SqlServerInstancesDeleteOptionalParams,
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Deletes a SQL Server Instance resource
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    options?: SqlServerInstancesDeleteOptionalParams,
  ): Promise<void>;
  /**
   * Updates a SQL Server Instance resource
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param parameters The SQL Server Instance.
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    parameters: SqlServerInstanceUpdate,
    options?: SqlServerInstancesUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<SqlServerInstancesUpdateResponse>,
      SqlServerInstancesUpdateResponse
    >
  >;
  /**
   * Updates a SQL Server Instance resource
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param parameters The SQL Server Instance.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    parameters: SqlServerInstanceUpdate,
    options?: SqlServerInstancesUpdateOptionalParams,
  ): Promise<SqlServerInstancesUpdateResponse>;
  /**
   * Runs migration assessment for SQL Server instance
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param options The options parameters.
   */
  runMigrationAssessment(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    options?: SqlServerInstancesRunMigrationAssessmentOptionalParams,
  ): Promise<SqlServerInstancesRunMigrationAssessmentResponse>;
  /**
   * Gets jobs status details for sql arc resource
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param options The options parameters.
   */
  getJobsStatus(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    options?: SqlServerInstancesGetJobsStatusOptionalParams,
  ): Promise<SqlServerInstancesGetJobsStatusResponse>;
  /**
   * Request Upgrade Permission before upgrading.
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param options The options parameters.
   */
  preUpgrade(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    options?: SqlServerInstancesPreUpgradeOptionalParams,
  ): Promise<SqlServerInstancesPreUpgradeResponse>;
  /**
   * Clean up after upgrading.
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param options The options parameters.
   */
  postUpgrade(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    options?: SqlServerInstancesPostUpgradeOptionalParams,
  ): Promise<SqlServerInstancesPostUpgradeResponse>;
  /**
   * Runs Managed Instance Link assessment for SQL Server instance
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param sqlServerInstanceManagedInstanceLinkAssessmentRequest Contains the parameters to run SQL
   *                                                              Server instance MI link assessment.
   * @param options The options parameters.
   */
  beginRunManagedInstanceLinkAssessment(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    sqlServerInstanceManagedInstanceLinkAssessmentRequest: SqlServerInstanceManagedInstanceLinkAssessmentRequest,
    options?: SqlServerInstancesRunManagedInstanceLinkAssessmentOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<SqlServerInstancesRunManagedInstanceLinkAssessmentResponse>,
      SqlServerInstancesRunManagedInstanceLinkAssessmentResponse
    >
  >;
  /**
   * Runs Managed Instance Link assessment for SQL Server instance
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param sqlServerInstanceManagedInstanceLinkAssessmentRequest Contains the parameters to run SQL
   *                                                              Server instance MI link assessment.
   * @param options The options parameters.
   */
  beginRunManagedInstanceLinkAssessmentAndWait(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    sqlServerInstanceManagedInstanceLinkAssessmentRequest: SqlServerInstanceManagedInstanceLinkAssessmentRequest,
    options?: SqlServerInstancesRunManagedInstanceLinkAssessmentOptionalParams,
  ): Promise<SqlServerInstancesRunManagedInstanceLinkAssessmentResponse>;
}
