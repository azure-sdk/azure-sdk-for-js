/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { SqlServerAvailabilityGroups } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { AzureArcDataManagementClient } from "../azureArcDataManagementClient.js";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl.js";
import {
  SqlServerAvailabilityGroupResource,
  SqlServerAvailabilityGroupsListNextOptionalParams,
  SqlServerAvailabilityGroupsListOptionalParams,
  SqlServerAvailabilityGroupsListResponse,
  SqlServerAvailabilityGroupsCreateOptionalParams,
  SqlServerAvailabilityGroupsCreateResponse,
  SqlServerAvailabilityGroupsDeleteOptionalParams,
  SqlServerAvailabilityGroupsDeleteResponse,
  SqlServerAvailabilityGroupsGetOptionalParams,
  SqlServerAvailabilityGroupsGetResponse,
  SqlServerAvailabilityGroupUpdate,
  SqlServerAvailabilityGroupsUpdateOptionalParams,
  SqlServerAvailabilityGroupsUpdateResponse,
  SqlServerAvailabilityGroupsDetailViewOptionalParams,
  SqlServerAvailabilityGroupsDetailViewResponse,
  SqlServerAvailabilityGroupsFailoverOptionalParams,
  SqlServerAvailabilityGroupsFailoverResponse,
  SqlServerAvailabilityGroupsForceFailoverAllowDataLossOptionalParams,
  SqlServerAvailabilityGroupsForceFailoverAllowDataLossResponse,
  AvailabilityGroupCreateUpdateConfiguration,
  SqlServerAvailabilityGroupsCreateAvailabilityGroupOptionalParams,
  SqlServerAvailabilityGroupsCreateAvailabilityGroupResponse,
  DistributedAvailabilityGroupCreateUpdateConfiguration,
  SqlServerAvailabilityGroupsCreateDistributedAvailabilityGroupOptionalParams,
  SqlServerAvailabilityGroupsCreateDistributedAvailabilityGroupResponse,
  ManagedInstanceLinkCreateUpdateConfiguration,
  SqlServerAvailabilityGroupsCreateManagedInstanceLinkOptionalParams,
  SqlServerAvailabilityGroupsCreateManagedInstanceLinkResponse,
  Databases,
  SqlServerAvailabilityGroupsAddDatabasesOptionalParams,
  SqlServerAvailabilityGroupsAddDatabasesResponse,
  FailoverMiLinkResourceId,
  SqlServerAvailabilityGroupsFailoverMiLinkOptionalParams,
  SqlServerAvailabilityGroupsFailoverMiLinkResponse,
  SqlServerAvailabilityGroupsRemoveDatabasesOptionalParams,
  SqlServerAvailabilityGroupsRemoveDatabasesResponse,
  SqlServerAvailabilityGroupsListNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing SqlServerAvailabilityGroups operations. */
export class SqlServerAvailabilityGroupsImpl
  implements SqlServerAvailabilityGroups
{
  private readonly client: AzureArcDataManagementClient;

  /**
   * Initialize a new instance of the class SqlServerAvailabilityGroups class.
   * @param client Reference to the service client
   */
  constructor(client: AzureArcDataManagementClient) {
    this.client = client;
  }

  /**
   * List the availability group associated with the given Arc Sql Server.
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    options?: SqlServerAvailabilityGroupsListOptionalParams,
  ): PagedAsyncIterableIterator<SqlServerAvailabilityGroupResource> {
    const iter = this.listPagingAll(
      resourceGroupName,
      sqlServerInstanceName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(
          resourceGroupName,
          sqlServerInstanceName,
          options,
          settings,
        );
      },
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    options?: SqlServerAvailabilityGroupsListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<SqlServerAvailabilityGroupResource[]> {
    let result: SqlServerAvailabilityGroupsListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(
        resourceGroupName,
        sqlServerInstanceName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        resourceGroupName,
        sqlServerInstanceName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    options?: SqlServerAvailabilityGroupsListOptionalParams,
  ): AsyncIterableIterator<SqlServerAvailabilityGroupResource> {
    for await (const page of this.listPagingPage(
      resourceGroupName,
      sqlServerInstanceName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Creates or replaces an Arc Sql Server Availability Group.
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param availabilityGroupName Name of SQL Availability Group
   * @param sqlServerAvailabilityGroupResource The request body for availability group resource.
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    availabilityGroupName: string,
    sqlServerAvailabilityGroupResource: SqlServerAvailabilityGroupResource,
    options?: SqlServerAvailabilityGroupsCreateOptionalParams,
  ): Promise<SqlServerAvailabilityGroupsCreateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        sqlServerInstanceName,
        availabilityGroupName,
        sqlServerAvailabilityGroupResource,
        options,
      },
      createOperationSpec,
    );
  }

  /**
   * Deletes an Arc Sql Server availability group resource.
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param availabilityGroupName Name of SQL Availability Group
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    availabilityGroupName: string,
    options?: SqlServerAvailabilityGroupsDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<SqlServerAvailabilityGroupsDeleteResponse>,
      SqlServerAvailabilityGroupsDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<SqlServerAvailabilityGroupsDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        sqlServerInstanceName,
        availabilityGroupName,
        options,
      },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<
      SqlServerAvailabilityGroupsDeleteResponse,
      OperationState<SqlServerAvailabilityGroupsDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
    });
    await poller.poll();
    return poller;
  }

  /**
   * Deletes an Arc Sql Server availability group resource.
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param availabilityGroupName Name of SQL Availability Group
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    availabilityGroupName: string,
    options?: SqlServerAvailabilityGroupsDeleteOptionalParams,
  ): Promise<SqlServerAvailabilityGroupsDeleteResponse> {
    const poller = await this.beginDelete(
      resourceGroupName,
      sqlServerInstanceName,
      availabilityGroupName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Retrieves an Arc Sql Server availability group.
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param availabilityGroupName Name of SQL Availability Group
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    availabilityGroupName: string,
    options?: SqlServerAvailabilityGroupsGetOptionalParams,
  ): Promise<SqlServerAvailabilityGroupsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        sqlServerInstanceName,
        availabilityGroupName,
        options,
      },
      getOperationSpec,
    );
  }

  /**
   * Updates an existing Availability Group.
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param availabilityGroupName Name of SQL Availability Group
   * @param sqlServerAvailabilityGroupUpdate The requested server availability group resource state.
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    availabilityGroupName: string,
    sqlServerAvailabilityGroupUpdate: SqlServerAvailabilityGroupUpdate,
    options?: SqlServerAvailabilityGroupsUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<SqlServerAvailabilityGroupsUpdateResponse>,
      SqlServerAvailabilityGroupsUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<SqlServerAvailabilityGroupsUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        sqlServerInstanceName,
        availabilityGroupName,
        sqlServerAvailabilityGroupUpdate,
        options,
      },
      spec: updateOperationSpec,
    });
    const poller = await createHttpPoller<
      SqlServerAvailabilityGroupsUpdateResponse,
      OperationState<SqlServerAvailabilityGroupsUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Updates an existing Availability Group.
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param availabilityGroupName Name of SQL Availability Group
   * @param sqlServerAvailabilityGroupUpdate The requested server availability group resource state.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    availabilityGroupName: string,
    sqlServerAvailabilityGroupUpdate: SqlServerAvailabilityGroupUpdate,
    options?: SqlServerAvailabilityGroupsUpdateOptionalParams,
  ): Promise<SqlServerAvailabilityGroupsUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      sqlServerInstanceName,
      availabilityGroupName,
      sqlServerAvailabilityGroupUpdate,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Retrieves detailed properties of the Availability Group.
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param availabilityGroupName Name of SQL Availability Group
   * @param options The options parameters.
   */
  detailView(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    availabilityGroupName: string,
    options?: SqlServerAvailabilityGroupsDetailViewOptionalParams,
  ): Promise<SqlServerAvailabilityGroupsDetailViewResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        sqlServerInstanceName,
        availabilityGroupName,
        options,
      },
      detailViewOperationSpec,
    );
  }

  /**
   * Request manual failover of the availability group to this server.
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param availabilityGroupName Name of SQL Availability Group
   * @param options The options parameters.
   */
  failover(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    availabilityGroupName: string,
    options?: SqlServerAvailabilityGroupsFailoverOptionalParams,
  ): Promise<SqlServerAvailabilityGroupsFailoverResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        sqlServerInstanceName,
        availabilityGroupName,
        options,
      },
      failoverOperationSpec,
    );
  }

  /**
   * Request forced failover of the availability group to this server.
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param availabilityGroupName Name of SQL Availability Group
   * @param options The options parameters.
   */
  forceFailoverAllowDataLoss(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    availabilityGroupName: string,
    options?: SqlServerAvailabilityGroupsForceFailoverAllowDataLossOptionalParams,
  ): Promise<SqlServerAvailabilityGroupsForceFailoverAllowDataLossResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        sqlServerInstanceName,
        availabilityGroupName,
        options,
      },
      forceFailoverAllowDataLossOperationSpec,
    );
  }

  /**
   * Create a SQL Server availability group
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param createAgConfiguration The configuration for the new SQL Server availability group resource.
   * @param options The options parameters.
   */
  async beginCreateAvailabilityGroup(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    createAgConfiguration: AvailabilityGroupCreateUpdateConfiguration,
    options?: SqlServerAvailabilityGroupsCreateAvailabilityGroupOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<SqlServerAvailabilityGroupsCreateAvailabilityGroupResponse>,
      SqlServerAvailabilityGroupsCreateAvailabilityGroupResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<SqlServerAvailabilityGroupsCreateAvailabilityGroupResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        sqlServerInstanceName,
        createAgConfiguration,
        options,
      },
      spec: createAvailabilityGroupOperationSpec,
    });
    const poller = await createHttpPoller<
      SqlServerAvailabilityGroupsCreateAvailabilityGroupResponse,
      OperationState<SqlServerAvailabilityGroupsCreateAvailabilityGroupResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create a SQL Server availability group
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param createAgConfiguration The configuration for the new SQL Server availability group resource.
   * @param options The options parameters.
   */
  async beginCreateAvailabilityGroupAndWait(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    createAgConfiguration: AvailabilityGroupCreateUpdateConfiguration,
    options?: SqlServerAvailabilityGroupsCreateAvailabilityGroupOptionalParams,
  ): Promise<SqlServerAvailabilityGroupsCreateAvailabilityGroupResponse> {
    const poller = await this.beginCreateAvailabilityGroup(
      resourceGroupName,
      sqlServerInstanceName,
      createAgConfiguration,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Create a SQL Server distributed availability group
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param createDagConfiguration The configuration for the new SQL Server availability group resource.
   * @param options The options parameters.
   */
  async beginCreateDistributedAvailabilityGroup(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    createDagConfiguration: DistributedAvailabilityGroupCreateUpdateConfiguration,
    options?: SqlServerAvailabilityGroupsCreateDistributedAvailabilityGroupOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<SqlServerAvailabilityGroupsCreateDistributedAvailabilityGroupResponse>,
      SqlServerAvailabilityGroupsCreateDistributedAvailabilityGroupResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<SqlServerAvailabilityGroupsCreateDistributedAvailabilityGroupResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        sqlServerInstanceName,
        createDagConfiguration,
        options,
      },
      spec: createDistributedAvailabilityGroupOperationSpec,
    });
    const poller = await createHttpPoller<
      SqlServerAvailabilityGroupsCreateDistributedAvailabilityGroupResponse,
      OperationState<SqlServerAvailabilityGroupsCreateDistributedAvailabilityGroupResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create a SQL Server distributed availability group
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param createDagConfiguration The configuration for the new SQL Server availability group resource.
   * @param options The options parameters.
   */
  async beginCreateDistributedAvailabilityGroupAndWait(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    createDagConfiguration: DistributedAvailabilityGroupCreateUpdateConfiguration,
    options?: SqlServerAvailabilityGroupsCreateDistributedAvailabilityGroupOptionalParams,
  ): Promise<SqlServerAvailabilityGroupsCreateDistributedAvailabilityGroupResponse> {
    const poller = await this.beginCreateDistributedAvailabilityGroup(
      resourceGroupName,
      sqlServerInstanceName,
      createDagConfiguration,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Create an Managed Instance Link
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param createManagedInstanceLinkConfiguration The configuration for the new Managed Instance Link
   *                                               resource.
   * @param options The options parameters.
   */
  async beginCreateManagedInstanceLink(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    createManagedInstanceLinkConfiguration: ManagedInstanceLinkCreateUpdateConfiguration,
    options?: SqlServerAvailabilityGroupsCreateManagedInstanceLinkOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<SqlServerAvailabilityGroupsCreateManagedInstanceLinkResponse>,
      SqlServerAvailabilityGroupsCreateManagedInstanceLinkResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<SqlServerAvailabilityGroupsCreateManagedInstanceLinkResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        sqlServerInstanceName,
        createManagedInstanceLinkConfiguration,
        options,
      },
      spec: createManagedInstanceLinkOperationSpec,
    });
    const poller = await createHttpPoller<
      SqlServerAvailabilityGroupsCreateManagedInstanceLinkResponse,
      OperationState<SqlServerAvailabilityGroupsCreateManagedInstanceLinkResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create an Managed Instance Link
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param createManagedInstanceLinkConfiguration The configuration for the new Managed Instance Link
   *                                               resource.
   * @param options The options parameters.
   */
  async beginCreateManagedInstanceLinkAndWait(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    createManagedInstanceLinkConfiguration: ManagedInstanceLinkCreateUpdateConfiguration,
    options?: SqlServerAvailabilityGroupsCreateManagedInstanceLinkOptionalParams,
  ): Promise<SqlServerAvailabilityGroupsCreateManagedInstanceLinkResponse> {
    const poller = await this.beginCreateManagedInstanceLink(
      resourceGroupName,
      sqlServerInstanceName,
      createManagedInstanceLinkConfiguration,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Request adding database(s) to an existing availability group.
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param availabilityGroupName Name of SQL Availability Group
   * @param databases The database names to add to the SQL Server availability group resource.
   * @param options The options parameters.
   */
  addDatabases(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    availabilityGroupName: string,
    databases: Databases,
    options?: SqlServerAvailabilityGroupsAddDatabasesOptionalParams,
  ): Promise<SqlServerAvailabilityGroupsAddDatabasesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        sqlServerInstanceName,
        availabilityGroupName,
        databases,
        options,
      },
      addDatabasesOperationSpec,
    );
  }

  /**
   * Request failover of Arc Sql Server to Azure Managed Instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param availabilityGroupName Name of SQL Availability Group
   * @param managedInstanceResourceId The azure resource identifier for the Sql Managed Instance.
   * @param options The options parameters.
   */
  async beginFailoverMiLink(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    availabilityGroupName: string,
    managedInstanceResourceId: FailoverMiLinkResourceId,
    options?: SqlServerAvailabilityGroupsFailoverMiLinkOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<SqlServerAvailabilityGroupsFailoverMiLinkResponse>,
      SqlServerAvailabilityGroupsFailoverMiLinkResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<SqlServerAvailabilityGroupsFailoverMiLinkResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        sqlServerInstanceName,
        availabilityGroupName,
        managedInstanceResourceId,
        options,
      },
      spec: failoverMiLinkOperationSpec,
    });
    const poller = await createHttpPoller<
      SqlServerAvailabilityGroupsFailoverMiLinkResponse,
      OperationState<SqlServerAvailabilityGroupsFailoverMiLinkResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Request failover of Arc Sql Server to Azure Managed Instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param availabilityGroupName Name of SQL Availability Group
   * @param managedInstanceResourceId The azure resource identifier for the Sql Managed Instance.
   * @param options The options parameters.
   */
  async beginFailoverMiLinkAndWait(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    availabilityGroupName: string,
    managedInstanceResourceId: FailoverMiLinkResourceId,
    options?: SqlServerAvailabilityGroupsFailoverMiLinkOptionalParams,
  ): Promise<SqlServerAvailabilityGroupsFailoverMiLinkResponse> {
    const poller = await this.beginFailoverMiLink(
      resourceGroupName,
      sqlServerInstanceName,
      availabilityGroupName,
      managedInstanceResourceId,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Request removing database(s) from an existing availability group.
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param availabilityGroupName Name of SQL Availability Group
   * @param databases The database names to remove from the SQL Server availability group resource.
   * @param options The options parameters.
   */
  removeDatabases(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    availabilityGroupName: string,
    databases: Databases,
    options?: SqlServerAvailabilityGroupsRemoveDatabasesOptionalParams,
  ): Promise<SqlServerAvailabilityGroupsRemoveDatabasesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        sqlServerInstanceName,
        availabilityGroupName,
        databases,
        options,
      },
      removeDatabasesOperationSpec,
    );
  }

  /**
   * List the availability group associated with the given Arc Sql Server.
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    options?: SqlServerAvailabilityGroupsListOptionalParams,
  ): Promise<SqlServerAvailabilityGroupsListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, sqlServerInstanceName, options },
      listOperationSpec,
    );
  }

  /**
   * ListNext
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    nextLink: string,
    options?: SqlServerAvailabilityGroupsListNextOptionalParams,
  ): Promise<SqlServerAvailabilityGroupsListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, sqlServerInstanceName, nextLink, options },
      listNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/availabilityGroups/{availabilityGroupName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SqlServerAvailabilityGroupResource,
    },
    201: {
      bodyMapper: Mappers.SqlServerAvailabilityGroupResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.sqlServerAvailabilityGroupResource,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sqlServerInstanceName,
    Parameters.availabilityGroupName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/availabilityGroups/{availabilityGroupName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.SqlServerAvailabilityGroupsDeleteHeaders,
    },
    201: {
      headersMapper: Mappers.SqlServerAvailabilityGroupsDeleteHeaders,
    },
    202: {
      headersMapper: Mappers.SqlServerAvailabilityGroupsDeleteHeaders,
    },
    204: {
      headersMapper: Mappers.SqlServerAvailabilityGroupsDeleteHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sqlServerInstanceName,
    Parameters.availabilityGroupName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/availabilityGroups/{availabilityGroupName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SqlServerAvailabilityGroupResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sqlServerInstanceName,
    Parameters.availabilityGroupName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/availabilityGroups/{availabilityGroupName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.SqlServerAvailabilityGroupResource,
    },
    201: {
      bodyMapper: Mappers.SqlServerAvailabilityGroupResource,
    },
    202: {
      bodyMapper: Mappers.SqlServerAvailabilityGroupResource,
    },
    204: {
      bodyMapper: Mappers.SqlServerAvailabilityGroupResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.sqlServerAvailabilityGroupUpdate,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sqlServerInstanceName,
    Parameters.availabilityGroupName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const detailViewOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/availabilityGroups/{availabilityGroupName}/getDetailView",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SqlServerAvailabilityGroupResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sqlServerInstanceName,
    Parameters.availabilityGroupName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const failoverOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/availabilityGroups/{availabilityGroupName}/failover",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SqlServerAvailabilityGroupResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sqlServerInstanceName,
    Parameters.availabilityGroupName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const forceFailoverAllowDataLossOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/availabilityGroups/{availabilityGroupName}/forceFailoverAllowDataLoss",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SqlServerAvailabilityGroupResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sqlServerInstanceName,
    Parameters.availabilityGroupName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createAvailabilityGroupOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/createAvailabilityGroup",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SqlServerAvailabilityGroupResource,
    },
    201: {
      bodyMapper: Mappers.SqlServerAvailabilityGroupResource,
    },
    202: {
      bodyMapper: Mappers.SqlServerAvailabilityGroupResource,
    },
    204: {
      bodyMapper: Mappers.SqlServerAvailabilityGroupResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.createAgConfiguration,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sqlServerInstanceName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const createDistributedAvailabilityGroupOperationSpec: coreClient.OperationSpec =
  {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/createDistributedAvailabilityGroup",
    httpMethod: "POST",
    responses: {
      200: {
        bodyMapper: Mappers.SqlServerAvailabilityGroupResource,
      },
      201: {
        bodyMapper: Mappers.SqlServerAvailabilityGroupResource,
      },
      202: {
        bodyMapper: Mappers.SqlServerAvailabilityGroupResource,
      },
      204: {
        bodyMapper: Mappers.SqlServerAvailabilityGroupResource,
      },
      default: {
        bodyMapper: Mappers.ErrorResponse,
      },
    },
    requestBody: Parameters.createDagConfiguration,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
      Parameters.$host,
      Parameters.subscriptionId,
      Parameters.resourceGroupName,
      Parameters.sqlServerInstanceName,
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer,
  };
const createManagedInstanceLinkOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/createManagedInstanceLink",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SqlServerAvailabilityGroupResource,
    },
    201: {
      bodyMapper: Mappers.SqlServerAvailabilityGroupResource,
    },
    202: {
      bodyMapper: Mappers.SqlServerAvailabilityGroupResource,
    },
    204: {
      bodyMapper: Mappers.SqlServerAvailabilityGroupResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.createManagedInstanceLinkConfiguration,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.sqlServerInstanceName,
    Parameters.resourceGroupName1,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const addDatabasesOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/availabilityGroups/{availabilityGroupName}/addDatabases",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SqlServerAvailabilityGroupResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.databases,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sqlServerInstanceName,
    Parameters.availabilityGroupName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const failoverMiLinkOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/availabilityGroups/{availabilityGroupName}/failoverMiLink",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SqlServerAvailabilityGroupResource,
    },
    201: {
      bodyMapper: Mappers.SqlServerAvailabilityGroupResource,
    },
    202: {
      bodyMapper: Mappers.SqlServerAvailabilityGroupResource,
    },
    204: {
      bodyMapper: Mappers.SqlServerAvailabilityGroupResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.managedInstanceResourceId,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.sqlServerInstanceName,
    Parameters.resourceGroupName1,
    Parameters.availabilityGroupName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const removeDatabasesOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/availabilityGroups/{availabilityGroupName}/removeDatabases",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SqlServerAvailabilityGroupResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.databases,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sqlServerInstanceName,
    Parameters.availabilityGroupName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/availabilityGroups",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ArcSqlServerAvailabilityGroupListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sqlServerInstanceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ArcSqlServerAvailabilityGroupListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sqlServerInstanceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
