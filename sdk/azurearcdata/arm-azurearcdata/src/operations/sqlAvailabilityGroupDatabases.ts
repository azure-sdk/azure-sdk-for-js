/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { SqlAvailabilityGroupDatabases } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureArcDataManagementClient } from "../azureArcDataManagementClient";
import {
  SqlAvailabilityGroupDatabaseResource,
  SqlAvailabilityGroupDatabasesListNextOptionalParams,
  SqlAvailabilityGroupDatabasesListOptionalParams,
  SqlAvailabilityGroupDatabasesListResponse,
  SqlAvailabilityGroupDatabasesCreateOptionalParams,
  SqlAvailabilityGroupDatabasesCreateResponse,
  SqlAvailabilityGroupDatabasesDeleteOptionalParams,
  SqlAvailabilityGroupDatabasesGetOptionalParams,
  SqlAvailabilityGroupDatabasesGetResponse,
  SqlAvailabilityGroupDatabaseUpdate,
  SqlAvailabilityGroupDatabasesUpdateOptionalParams,
  SqlAvailabilityGroupDatabasesUpdateResponse,
  SqlAvailabilityGroupDatabasesListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing SqlAvailabilityGroupDatabases operations. */
export class SqlAvailabilityGroupDatabasesImpl
  implements SqlAvailabilityGroupDatabases {
  private readonly client: AzureArcDataManagementClient;

  /**
   * Initialize a new instance of the class SqlAvailabilityGroupDatabases class.
   * @param client Reference to the service client
   */
  constructor(client: AzureArcDataManagementClient) {
    this.client = client;
  }

  /**
   * List the Availability Group Databases associated with the given Arc Sql AG.
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlAvailabilityGroupName Name of SQL Availability Group
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    sqlAvailabilityGroupName: string,
    options?: SqlAvailabilityGroupDatabasesListOptionalParams
  ): PagedAsyncIterableIterator<SqlAvailabilityGroupDatabaseResource> {
    const iter = this.listPagingAll(
      resourceGroupName,
      sqlAvailabilityGroupName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(
          resourceGroupName,
          sqlAvailabilityGroupName,
          options,
          settings
        );
      }
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    sqlAvailabilityGroupName: string,
    options?: SqlAvailabilityGroupDatabasesListOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<SqlAvailabilityGroupDatabaseResource[]> {
    let result: SqlAvailabilityGroupDatabasesListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(
        resourceGroupName,
        sqlAvailabilityGroupName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        resourceGroupName,
        sqlAvailabilityGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    sqlAvailabilityGroupName: string,
    options?: SqlAvailabilityGroupDatabasesListOptionalParams
  ): AsyncIterableIterator<SqlAvailabilityGroupDatabaseResource> {
    for await (const page of this.listPagingPage(
      resourceGroupName,
      sqlAvailabilityGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Creates or update database in an Arc Sql Availability Group.
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlAvailabilityGroupDatabaseName Name of SQL Availability Group Database
   * @param sqlAvailabilityGroupName Name of SQL Availability Group
   * @param sqlAvailabilityGroupDatabaseResource The request body for availability group databases
   *                                             resource.
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    sqlAvailabilityGroupDatabaseName: string,
    sqlAvailabilityGroupName: string,
    sqlAvailabilityGroupDatabaseResource: SqlAvailabilityGroupDatabaseResource,
    options?: SqlAvailabilityGroupDatabasesCreateOptionalParams
  ): Promise<SqlAvailabilityGroupDatabasesCreateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        sqlAvailabilityGroupDatabaseName,
        sqlAvailabilityGroupName,
        sqlAvailabilityGroupDatabaseResource,
        options
      },
      createOperationSpec
    );
  }

  /**
   * Deletes an Arc Sql availability group database resource.
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlAvailabilityGroupDatabaseName Name of SQL Availability Group Database
   * @param sqlAvailabilityGroupName Name of SQL Availability Group
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    sqlAvailabilityGroupDatabaseName: string,
    sqlAvailabilityGroupName: string,
    options?: SqlAvailabilityGroupDatabasesDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        sqlAvailabilityGroupDatabaseName,
        sqlAvailabilityGroupName,
        options
      },
      deleteOperationSpec
    );
  }

  /**
   * Retrieves an Arc Sql availability group database resource.
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlAvailabilityGroupDatabaseName Name of SQL Availability Group Database
   * @param sqlAvailabilityGroupName Name of SQL Availability Group
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    sqlAvailabilityGroupDatabaseName: string,
    sqlAvailabilityGroupName: string,
    options?: SqlAvailabilityGroupDatabasesGetOptionalParams
  ): Promise<SqlAvailabilityGroupDatabasesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        sqlAvailabilityGroupDatabaseName,
        sqlAvailabilityGroupName,
        options
      },
      getOperationSpec
    );
  }

  /**
   * Updates an existing Availability Group Database.
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlAvailabilityGroupDatabaseName Name of SQL Availability Group Database
   * @param sqlAvailabilityGroupName Name of SQL Availability Group
   * @param sqlAvailabilityGroupDatabaseUpdate The update availability group database resource.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    sqlAvailabilityGroupDatabaseName: string,
    sqlAvailabilityGroupName: string,
    sqlAvailabilityGroupDatabaseUpdate: SqlAvailabilityGroupDatabaseUpdate,
    options?: SqlAvailabilityGroupDatabasesUpdateOptionalParams
  ): Promise<SqlAvailabilityGroupDatabasesUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        sqlAvailabilityGroupDatabaseName,
        sqlAvailabilityGroupName,
        sqlAvailabilityGroupDatabaseUpdate,
        options
      },
      updateOperationSpec
    );
  }

  /**
   * List the Availability Group Databases associated with the given Arc Sql AG.
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlAvailabilityGroupName Name of SQL Availability Group
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    sqlAvailabilityGroupName: string,
    options?: SqlAvailabilityGroupDatabasesListOptionalParams
  ): Promise<SqlAvailabilityGroupDatabasesListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, sqlAvailabilityGroupName, options },
      listOperationSpec
    );
  }

  /**
   * ListNext
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlAvailabilityGroupName Name of SQL Availability Group
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    sqlAvailabilityGroupName: string,
    nextLink: string,
    options?: SqlAvailabilityGroupDatabasesListNextOptionalParams
  ): Promise<SqlAvailabilityGroupDatabasesListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, sqlAvailabilityGroupName, nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlAvailabilityGroups/{sqlAvailabilityGroupName}/databases/{sqlAvailabilityGroupDatabaseName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SqlAvailabilityGroupDatabaseResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.sqlAvailabilityGroupDatabaseResource,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sqlAvailabilityGroupName,
    Parameters.sqlAvailabilityGroupDatabaseName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlAvailabilityGroups/{sqlAvailabilityGroupName}/databases/{sqlAvailabilityGroupDatabaseName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sqlAvailabilityGroupName,
    Parameters.sqlAvailabilityGroupDatabaseName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlAvailabilityGroups/{sqlAvailabilityGroupName}/databases/{sqlAvailabilityGroupDatabaseName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SqlAvailabilityGroupDatabaseResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sqlAvailabilityGroupName,
    Parameters.sqlAvailabilityGroupDatabaseName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlAvailabilityGroups/{sqlAvailabilityGroupName}/databases/{sqlAvailabilityGroupDatabaseName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.SqlAvailabilityGroupDatabaseResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.sqlAvailabilityGroupDatabaseUpdate,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sqlAvailabilityGroupName,
    Parameters.sqlAvailabilityGroupDatabaseName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlAvailabilityGroups/{sqlAvailabilityGroupName}/databases",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ArcSqlAvailabilityGroupDatabasesListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sqlAvailabilityGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ArcSqlAvailabilityGroupDatabasesListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sqlAvailabilityGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
