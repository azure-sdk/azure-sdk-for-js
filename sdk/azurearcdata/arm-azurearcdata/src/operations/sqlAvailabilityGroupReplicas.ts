/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { SqlAvailabilityGroupReplicas } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureArcDataManagementClient } from "../azureArcDataManagementClient";
import {
  SqlAvailabilityGroupReplicaResource,
  SqlAvailabilityGroupReplicasListNextOptionalParams,
  SqlAvailabilityGroupReplicasListOptionalParams,
  SqlAvailabilityGroupReplicasListResponse,
  SqlAvailabilityGroupReplicasCreateOptionalParams,
  SqlAvailabilityGroupReplicasCreateResponse,
  SqlAvailabilityGroupReplicasDeleteOptionalParams,
  SqlAvailabilityGroupReplicasGetOptionalParams,
  SqlAvailabilityGroupReplicasGetResponse,
  SqlAvailabilityGroupReplicaUpdate,
  SqlAvailabilityGroupReplicasUpdateOptionalParams,
  SqlAvailabilityGroupReplicasUpdateResponse,
  SqlAvailabilityGroupReplicasListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing SqlAvailabilityGroupReplicas operations. */
export class SqlAvailabilityGroupReplicasImpl
  implements SqlAvailabilityGroupReplicas {
  private readonly client: AzureArcDataManagementClient;

  /**
   * Initialize a new instance of the class SqlAvailabilityGroupReplicas class.
   * @param client Reference to the service client
   */
  constructor(client: AzureArcDataManagementClient) {
    this.client = client;
  }

  /**
   * List the Availability Group Replica associated with the given Arc Sql AG.
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlAvailabilityGroupName Name of SQL Availability Group
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    sqlAvailabilityGroupName: string,
    options?: SqlAvailabilityGroupReplicasListOptionalParams
  ): PagedAsyncIterableIterator<SqlAvailabilityGroupReplicaResource> {
    const iter = this.listPagingAll(
      resourceGroupName,
      sqlAvailabilityGroupName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(
          resourceGroupName,
          sqlAvailabilityGroupName,
          options,
          settings
        );
      }
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    sqlAvailabilityGroupName: string,
    options?: SqlAvailabilityGroupReplicasListOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<SqlAvailabilityGroupReplicaResource[]> {
    let result: SqlAvailabilityGroupReplicasListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(
        resourceGroupName,
        sqlAvailabilityGroupName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        resourceGroupName,
        sqlAvailabilityGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    sqlAvailabilityGroupName: string,
    options?: SqlAvailabilityGroupReplicasListOptionalParams
  ): AsyncIterableIterator<SqlAvailabilityGroupReplicaResource> {
    for await (const page of this.listPagingPage(
      resourceGroupName,
      sqlAvailabilityGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Creates or replaces an Arc Sql Availability Group Replica.
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param sqlAvailabilityGroupName Name of SQL Availability Group
   * @param sqlAvailabilityGroupReplicaResource The request body for availability group replica resource.
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    sqlAvailabilityGroupName: string,
    sqlAvailabilityGroupReplicaResource: SqlAvailabilityGroupReplicaResource,
    options?: SqlAvailabilityGroupReplicasCreateOptionalParams
  ): Promise<SqlAvailabilityGroupReplicasCreateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        sqlServerInstanceName,
        sqlAvailabilityGroupName,
        sqlAvailabilityGroupReplicaResource,
        options
      },
      createOperationSpec
    );
  }

  /**
   * Deletes an Arc Sql availability group replica resource.
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param sqlAvailabilityGroupName Name of SQL Availability Group
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    sqlAvailabilityGroupName: string,
    options?: SqlAvailabilityGroupReplicasDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        sqlServerInstanceName,
        sqlAvailabilityGroupName,
        options
      },
      deleteOperationSpec
    );
  }

  /**
   * Retrieves an Arc Sql availability group replica.
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param sqlAvailabilityGroupName Name of SQL Availability Group
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    sqlAvailabilityGroupName: string,
    options?: SqlAvailabilityGroupReplicasGetOptionalParams
  ): Promise<SqlAvailabilityGroupReplicasGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        sqlServerInstanceName,
        sqlAvailabilityGroupName,
        options
      },
      getOperationSpec
    );
  }

  /**
   * Updates an existing Availability Group Replica.
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param sqlAvailabilityGroupName Name of SQL Availability Group
   * @param sqlAvailabilityGroupReplicaUpdate The requested availability group replica resource state.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    sqlAvailabilityGroupName: string,
    sqlAvailabilityGroupReplicaUpdate: SqlAvailabilityGroupReplicaUpdate,
    options?: SqlAvailabilityGroupReplicasUpdateOptionalParams
  ): Promise<SqlAvailabilityGroupReplicasUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        sqlServerInstanceName,
        sqlAvailabilityGroupName,
        sqlAvailabilityGroupReplicaUpdate,
        options
      },
      updateOperationSpec
    );
  }

  /**
   * List the Availability Group Replica associated with the given Arc Sql AG.
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlAvailabilityGroupName Name of SQL Availability Group
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    sqlAvailabilityGroupName: string,
    options?: SqlAvailabilityGroupReplicasListOptionalParams
  ): Promise<SqlAvailabilityGroupReplicasListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, sqlAvailabilityGroupName, options },
      listOperationSpec
    );
  }

  /**
   * ListNext
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlAvailabilityGroupName Name of SQL Availability Group
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    sqlAvailabilityGroupName: string,
    nextLink: string,
    options?: SqlAvailabilityGroupReplicasListNextOptionalParams
  ): Promise<SqlAvailabilityGroupReplicasListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, sqlAvailabilityGroupName, nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlAvailabilityGroups/{sqlAvailabilityGroupName}/sqlServerInstances/{sqlServerInstanceName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SqlAvailabilityGroupReplicaResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.sqlAvailabilityGroupReplicaResource,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sqlServerInstanceName,
    Parameters.sqlAvailabilityGroupName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlAvailabilityGroups/{sqlAvailabilityGroupName}/sqlServerInstances/{sqlServerInstanceName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sqlServerInstanceName,
    Parameters.sqlAvailabilityGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlAvailabilityGroups/{sqlAvailabilityGroupName}/sqlServerInstances/{sqlServerInstanceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SqlAvailabilityGroupReplicaResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sqlServerInstanceName,
    Parameters.sqlAvailabilityGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlAvailabilityGroups/{sqlAvailabilityGroupName}/sqlServerInstances/{sqlServerInstanceName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.SqlAvailabilityGroupReplicaResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.sqlAvailabilityGroupReplicaUpdate,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sqlServerInstanceName,
    Parameters.sqlAvailabilityGroupName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlAvailabilityGroups/{sqlAvailabilityGroupName}/sqlServerInstances",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ArcSqlAvailabilityGroupReplicaListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sqlAvailabilityGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ArcSqlAvailabilityGroupReplicaListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sqlAvailabilityGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
