/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { SqlServerLicenses } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureArcDataManagementClient } from "../azureArcDataManagementClient";
import {
  SqlServerLicense,
  SqlServerLicensesListNextOptionalParams,
  SqlServerLicensesListOptionalParams,
  SqlServerLicensesListResponse,
  SqlServerLicensesListByResourceGroupNextOptionalParams,
  SqlServerLicensesListByResourceGroupOptionalParams,
  SqlServerLicensesListByResourceGroupResponse,
  SqlServerLicensesGetOptionalParams,
  SqlServerLicensesGetResponse,
  SqlServerLicensesCreateOptionalParams,
  SqlServerLicensesCreateResponse,
  SqlServerLicensesDeleteOptionalParams,
  SqlServerLicenseUpdate,
  SqlServerLicensesUpdateOptionalParams,
  SqlServerLicensesUpdateResponse,
  SqlServerLicensesListNextResponse,
  SqlServerLicensesListByResourceGroupNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing SqlServerLicenses operations. */
export class SqlServerLicensesImpl implements SqlServerLicenses {
  private readonly client: AzureArcDataManagementClient;

  /**
   * Initialize a new instance of the class SqlServerLicenses class.
   * @param client Reference to the service client
   */
  constructor(client: AzureArcDataManagementClient) {
    this.client = client;
  }

  /**
   * List sqlServerLicense resources in the subscription
   * @param options The options parameters.
   */
  public list(
    options?: SqlServerLicensesListOptionalParams,
  ): PagedAsyncIterableIterator<SqlServerLicense> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(options, settings);
      },
    };
  }

  private async *listPagingPage(
    options?: SqlServerLicensesListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<SqlServerLicense[]> {
    let result: SqlServerLicensesListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    options?: SqlServerLicensesListOptionalParams,
  ): AsyncIterableIterator<SqlServerLicense> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Gets all sqlServerLicenses in a resource group.
   * @param resourceGroupName The name of the Azure resource group
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: SqlServerLicensesListByResourceGroupOptionalParams,
  ): PagedAsyncIterableIterator<SqlServerLicense> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByResourceGroupPagingPage(
          resourceGroupName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: SqlServerLicensesListByResourceGroupOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<SqlServerLicense[]> {
    let result: SqlServerLicensesListByResourceGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByResourceGroup(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: SqlServerLicensesListByResourceGroupOptionalParams,
  ): AsyncIterableIterator<SqlServerLicense> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List sqlServerLicense resources in the subscription
   * @param options The options parameters.
   */
  private _list(
    options?: SqlServerLicensesListOptionalParams,
  ): Promise<SqlServerLicensesListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * Gets all sqlServerLicenses in a resource group.
   * @param resourceGroupName The name of the Azure resource group
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: SqlServerLicensesListByResourceGroupOptionalParams,
  ): Promise<SqlServerLicensesListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec,
    );
  }

  /**
   * Retrieves a SQL Server license resource
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerLicenseName Name of SQL Server License
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    sqlServerLicenseName: string,
    options?: SqlServerLicensesGetOptionalParams,
  ): Promise<SqlServerLicensesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, sqlServerLicenseName, options },
      getOperationSpec,
    );
  }

  /**
   * Creates or replaces a SQL Server license resource
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerLicenseName Name of SQL Server License
   * @param sqlServerLicense The SQL Server license to be created or updated.
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    sqlServerLicenseName: string,
    sqlServerLicense: SqlServerLicense,
    options?: SqlServerLicensesCreateOptionalParams,
  ): Promise<SqlServerLicensesCreateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, sqlServerLicenseName, sqlServerLicense, options },
      createOperationSpec,
    );
  }

  /**
   * Deletes a SQL Server license resource
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerLicenseName Name of SQL Server License
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    sqlServerLicenseName: string,
    options?: SqlServerLicensesDeleteOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, sqlServerLicenseName, options },
      deleteOperationSpec,
    );
  }

  /**
   * Updates a SQL Server license resource
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerLicenseName Name of SQL Server License
   * @param parameters The SQL Server license.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    sqlServerLicenseName: string,
    parameters: SqlServerLicenseUpdate,
    options?: SqlServerLicensesUpdateOptionalParams,
  ): Promise<SqlServerLicensesUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, sqlServerLicenseName, parameters, options },
      updateOperationSpec,
    );
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    nextLink: string,
    options?: SqlServerLicensesListNextOptionalParams,
  ): Promise<SqlServerLicensesListNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextOperationSpec,
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the Azure resource group
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: SqlServerLicensesListByResourceGroupNextOptionalParams,
  ): Promise<SqlServerLicensesListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.AzureArcData/sqlServerLicenses",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SqlServerLicenseListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerLicenses",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SqlServerLicenseListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerLicenses/{sqlServerLicenseName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SqlServerLicense,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sqlServerLicenseName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerLicenses/{sqlServerLicenseName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SqlServerLicense,
    },
    201: {
      bodyMapper: Mappers.SqlServerLicense,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.sqlServerLicense,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sqlServerLicenseName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerLicenses/{sqlServerLicenseName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sqlServerLicenseName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerLicenses/{sqlServerLicenseName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.SqlServerLicense,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.parameters2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sqlServerLicenseName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SqlServerLicenseListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SqlServerLicenseListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
