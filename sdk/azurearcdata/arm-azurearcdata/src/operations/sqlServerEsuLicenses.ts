/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { SqlServerEsuLicenses } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { AzureArcDataManagementClient } from "../azureArcDataManagementClient.js";
import {
  SqlServerEsuLicense,
  SqlServerEsuLicensesListNextOptionalParams,
  SqlServerEsuLicensesListOptionalParams,
  SqlServerEsuLicensesListResponse,
  SqlServerEsuLicensesListByResourceGroupNextOptionalParams,
  SqlServerEsuLicensesListByResourceGroupOptionalParams,
  SqlServerEsuLicensesListByResourceGroupResponse,
  SqlServerEsuLicensesGetOptionalParams,
  SqlServerEsuLicensesGetResponse,
  SqlServerEsuLicensesCreateOptionalParams,
  SqlServerEsuLicensesCreateResponse,
  SqlServerEsuLicensesDeleteOptionalParams,
  SqlServerEsuLicenseUpdate,
  SqlServerEsuLicensesUpdateOptionalParams,
  SqlServerEsuLicensesUpdateResponse,
  SqlServerEsuLicensesListNextResponse,
  SqlServerEsuLicensesListByResourceGroupNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing SqlServerEsuLicenses operations. */
export class SqlServerEsuLicensesImpl implements SqlServerEsuLicenses {
  private readonly client: AzureArcDataManagementClient;

  /**
   * Initialize a new instance of the class SqlServerEsuLicenses class.
   * @param client Reference to the service client
   */
  constructor(client: AzureArcDataManagementClient) {
    this.client = client;
  }

  /**
   * List sqlServerEsuLicense resources in the subscription
   * @param options The options parameters.
   */
  public list(
    options?: SqlServerEsuLicensesListOptionalParams,
  ): PagedAsyncIterableIterator<SqlServerEsuLicense> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(options, settings);
      },
    };
  }

  private async *listPagingPage(
    options?: SqlServerEsuLicensesListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<SqlServerEsuLicense[]> {
    let result: SqlServerEsuLicensesListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    options?: SqlServerEsuLicensesListOptionalParams,
  ): AsyncIterableIterator<SqlServerEsuLicense> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Gets all sqlServerEsuLicenses in a resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: SqlServerEsuLicensesListByResourceGroupOptionalParams,
  ): PagedAsyncIterableIterator<SqlServerEsuLicense> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByResourceGroupPagingPage(resourceGroupName, options, settings);
      },
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: SqlServerEsuLicensesListByResourceGroupOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<SqlServerEsuLicense[]> {
    let result: SqlServerEsuLicensesListByResourceGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByResourceGroup(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByResourceGroupNext(resourceGroupName, continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: SqlServerEsuLicensesListByResourceGroupOptionalParams,
  ): AsyncIterableIterator<SqlServerEsuLicense> {
    for await (const page of this.listByResourceGroupPagingPage(resourceGroupName, options)) {
      yield* page;
    }
  }

  /**
   * List sqlServerEsuLicense resources in the subscription
   * @param options The options parameters.
   */
  private _list(
    options?: SqlServerEsuLicensesListOptionalParams,
  ): Promise<SqlServerEsuLicensesListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * Gets all sqlServerEsuLicenses in a resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: SqlServerEsuLicensesListByResourceGroupOptionalParams,
  ): Promise<SqlServerEsuLicensesListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec,
    );
  }

  /**
   * Retrieves a SQL Server ESU license resource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sqlServerEsuLicenseName Name of SQL Server ESU License
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    sqlServerEsuLicenseName: string,
    options?: SqlServerEsuLicensesGetOptionalParams,
  ): Promise<SqlServerEsuLicensesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, sqlServerEsuLicenseName, options },
      getOperationSpec,
    );
  }

  /**
   * Creates or replaces a SQL Server ESU license resource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sqlServerEsuLicenseName Name of SQL Server ESU License
   * @param sqlServerEsuLicense The SQL Server ESU license to be created or updated.
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    sqlServerEsuLicenseName: string,
    sqlServerEsuLicense: SqlServerEsuLicense,
    options?: SqlServerEsuLicensesCreateOptionalParams,
  ): Promise<SqlServerEsuLicensesCreateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        sqlServerEsuLicenseName,
        sqlServerEsuLicense,
        options,
      },
      createOperationSpec,
    );
  }

  /**
   * Deletes a SQL Server ESU license resource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sqlServerEsuLicenseName Name of SQL Server ESU License
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    sqlServerEsuLicenseName: string,
    options?: SqlServerEsuLicensesDeleteOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, sqlServerEsuLicenseName, options },
      deleteOperationSpec,
    );
  }

  /**
   * Updates a SQL Server ESU license resource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sqlServerEsuLicenseName Name of SQL Server ESU License
   * @param parameters The SQL Server ESU license.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    sqlServerEsuLicenseName: string,
    parameters: SqlServerEsuLicenseUpdate,
    options?: SqlServerEsuLicensesUpdateOptionalParams,
  ): Promise<SqlServerEsuLicensesUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, sqlServerEsuLicenseName, parameters, options },
      updateOperationSpec,
    );
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    nextLink: string,
    options?: SqlServerEsuLicensesListNextOptionalParams,
  ): Promise<SqlServerEsuLicensesListNextResponse> {
    return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec);
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: SqlServerEsuLicensesListByResourceGroupNextOptionalParams,
  ): Promise<SqlServerEsuLicensesListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.AzureArcData/sqlServerEsuLicenses",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SqlServerEsuLicenseListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerEsuLicenses",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SqlServerEsuLicenseListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId, Parameters.resourceGroupName1],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerEsuLicenses/{sqlServerEsuLicenseName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SqlServerEsuLicense,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName1,
    Parameters.sqlServerEsuLicenseName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerEsuLicenses/{sqlServerEsuLicenseName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SqlServerEsuLicense,
    },
    201: {
      bodyMapper: Mappers.SqlServerEsuLicense,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.sqlServerEsuLicense,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName1,
    Parameters.sqlServerEsuLicenseName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerEsuLicenses/{sqlServerEsuLicenseName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName1,
    Parameters.sqlServerEsuLicenseName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerEsuLicenses/{sqlServerEsuLicenseName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.SqlServerEsuLicense,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.parameters4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName1,
    Parameters.sqlServerEsuLicenseName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SqlServerEsuLicenseListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SqlServerEsuLicenseListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName1,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
