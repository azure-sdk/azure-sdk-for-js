/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { SqlServerInstances } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { AzureArcDataManagementClient } from "../azureArcDataManagementClient.js";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl.js";
import {
  SqlServerInstance,
  SqlServerInstancesListNextOptionalParams,
  SqlServerInstancesListOptionalParams,
  SqlServerInstancesListResponse,
  SqlServerInstancesListByResourceGroupNextOptionalParams,
  SqlServerInstancesListByResourceGroupOptionalParams,
  SqlServerInstancesListByResourceGroupResponse,
  SqlServerInstanceTelemetryRequest,
  SqlServerInstancesGetTelemetryNextOptionalParams,
  SqlServerInstancesGetTelemetryOptionalParams,
  SqlServerInstancesGetTelemetryResponse,
  SqlServerInstancesGetOptionalParams,
  SqlServerInstancesGetResponse,
  SqlServerInstancesCreateOptionalParams,
  SqlServerInstancesCreateResponse,
  SqlServerInstancesDeleteOptionalParams,
  SqlServerInstanceUpdate,
  SqlServerInstancesUpdateOptionalParams,
  SqlServerInstancesUpdateResponse,
  SqlServerInstancesRunMigrationAssessmentOptionalParams,
  SqlServerInstancesRunMigrationAssessmentResponse,
  SqlServerInstancesGetJobsStatusOptionalParams,
  SqlServerInstancesGetJobsStatusResponse,
  SqlServerInstancesPreUpgradeOptionalParams,
  SqlServerInstancesPreUpgradeResponse,
  SqlServerInstancesPostUpgradeOptionalParams,
  SqlServerInstancesPostUpgradeResponse,
  SqlServerInstanceManagedInstanceLinkAssessmentRequest,
  SqlServerInstancesRunManagedInstanceLinkAssessmentOptionalParams,
  SqlServerInstancesRunManagedInstanceLinkAssessmentResponse,
  SqlServerInstancesListNextResponse,
  SqlServerInstancesListByResourceGroupNextResponse,
  SqlServerInstancesGetTelemetryNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing SqlServerInstances operations. */
export class SqlServerInstancesImpl implements SqlServerInstances {
  private readonly client: AzureArcDataManagementClient;

  /**
   * Initialize a new instance of the class SqlServerInstances class.
   * @param client Reference to the service client
   */
  constructor(client: AzureArcDataManagementClient) {
    this.client = client;
  }

  /**
   * List sqlServerInstance resources in the subscription
   * @param options The options parameters.
   */
  public list(
    options?: SqlServerInstancesListOptionalParams,
  ): PagedAsyncIterableIterator<SqlServerInstance> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(options, settings);
      },
    };
  }

  private async *listPagingPage(
    options?: SqlServerInstancesListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<SqlServerInstance[]> {
    let result: SqlServerInstancesListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    options?: SqlServerInstancesListOptionalParams,
  ): AsyncIterableIterator<SqlServerInstance> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Gets all sqlServerInstances in a resource group.
   * @param resourceGroupName The name of the Azure resource group
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: SqlServerInstancesListByResourceGroupOptionalParams,
  ): PagedAsyncIterableIterator<SqlServerInstance> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByResourceGroupPagingPage(
          resourceGroupName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: SqlServerInstancesListByResourceGroupOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<SqlServerInstance[]> {
    let result: SqlServerInstancesListByResourceGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByResourceGroup(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: SqlServerInstancesListByResourceGroupOptionalParams,
  ): AsyncIterableIterator<SqlServerInstance> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Retrieves SQL Server instance telemetry
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param sqlServerInstanceTelemetryRequest Contains the parameters to get SQL Server instance
   *                                          telemetry.
   * @param options The options parameters.
   */
  public beginListTelemetryAndWait(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    sqlServerInstanceTelemetryRequest: SqlServerInstanceTelemetryRequest,
    options?: SqlServerInstancesGetTelemetryOptionalParams,
  ): PagedAsyncIterableIterator<string[]> {
    const iter = this.getTelemetryPagingAll(
      resourceGroupName,
      sqlServerInstanceName,
      sqlServerInstanceTelemetryRequest,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.getTelemetryPagingPage(
          resourceGroupName,
          sqlServerInstanceName,
          sqlServerInstanceTelemetryRequest,
          options,
          settings,
        );
      },
    };
  }

  private async *getTelemetryPagingPage(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    sqlServerInstanceTelemetryRequest: SqlServerInstanceTelemetryRequest,
    options?: SqlServerInstancesGetTelemetryOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<string[][]> {
    let result: SqlServerInstancesGetTelemetryResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      const poller = await this._getTelemetry(
        resourceGroupName,
        sqlServerInstanceName,
        sqlServerInstanceTelemetryRequest,
        options,
      );
      result = await poller.pollUntilDone();
      let page = result.rows || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._getTelemetryNext(
        resourceGroupName,
        sqlServerInstanceName,
        sqlServerInstanceTelemetryRequest,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.rows || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *getTelemetryPagingAll(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    sqlServerInstanceTelemetryRequest: SqlServerInstanceTelemetryRequest,
    options?: SqlServerInstancesGetTelemetryOptionalParams,
  ): AsyncIterableIterator<string[]> {
    for await (const page of this.getTelemetryPagingPage(
      resourceGroupName,
      sqlServerInstanceName,
      sqlServerInstanceTelemetryRequest,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List sqlServerInstance resources in the subscription
   * @param options The options parameters.
   */
  private _list(
    options?: SqlServerInstancesListOptionalParams,
  ): Promise<SqlServerInstancesListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * Gets all sqlServerInstances in a resource group.
   * @param resourceGroupName The name of the Azure resource group
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: SqlServerInstancesListByResourceGroupOptionalParams,
  ): Promise<SqlServerInstancesListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec,
    );
  }

  /**
   * Retrieves a SQL Server Instance resource
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    options?: SqlServerInstancesGetOptionalParams,
  ): Promise<SqlServerInstancesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, sqlServerInstanceName, options },
      getOperationSpec,
    );
  }

  /**
   * Creates or replaces a SQL Server Instance resource
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param sqlServerInstance The SQL Server Instance to be created or updated.
   * @param options The options parameters.
   */
  async beginCreate(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    sqlServerInstance: SqlServerInstance,
    options?: SqlServerInstancesCreateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<SqlServerInstancesCreateResponse>,
      SqlServerInstancesCreateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<SqlServerInstancesCreateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        sqlServerInstanceName,
        sqlServerInstance,
        options,
      },
      spec: createOperationSpec,
    });
    const poller = await createHttpPoller<
      SqlServerInstancesCreateResponse,
      OperationState<SqlServerInstancesCreateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Creates or replaces a SQL Server Instance resource
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param sqlServerInstance The SQL Server Instance to be created or updated.
   * @param options The options parameters.
   */
  async beginCreateAndWait(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    sqlServerInstance: SqlServerInstance,
    options?: SqlServerInstancesCreateOptionalParams,
  ): Promise<SqlServerInstancesCreateResponse> {
    const poller = await this.beginCreate(
      resourceGroupName,
      sqlServerInstanceName,
      sqlServerInstance,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Deletes a SQL Server Instance resource
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    options?: SqlServerInstancesDeleteOptionalParams,
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, sqlServerInstanceName, options },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
    });
    await poller.poll();
    return poller;
  }

  /**
   * Deletes a SQL Server Instance resource
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    options?: SqlServerInstancesDeleteOptionalParams,
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      sqlServerInstanceName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Updates a SQL Server Instance resource
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param parameters The SQL Server Instance.
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    parameters: SqlServerInstanceUpdate,
    options?: SqlServerInstancesUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<SqlServerInstancesUpdateResponse>,
      SqlServerInstancesUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<SqlServerInstancesUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, sqlServerInstanceName, parameters, options },
      spec: updateOperationSpec,
    });
    const poller = await createHttpPoller<
      SqlServerInstancesUpdateResponse,
      OperationState<SqlServerInstancesUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Updates a SQL Server Instance resource
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param parameters The SQL Server Instance.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    parameters: SqlServerInstanceUpdate,
    options?: SqlServerInstancesUpdateOptionalParams,
  ): Promise<SqlServerInstancesUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      sqlServerInstanceName,
      parameters,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Retrieves SQL Server instance telemetry
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param sqlServerInstanceTelemetryRequest Contains the parameters to get SQL Server instance
   *                                          telemetry.
   * @param options The options parameters.
   */
  private async _getTelemetry(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    sqlServerInstanceTelemetryRequest: SqlServerInstanceTelemetryRequest,
    options?: SqlServerInstancesGetTelemetryOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<SqlServerInstancesGetTelemetryResponse>,
      SqlServerInstancesGetTelemetryResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<SqlServerInstancesGetTelemetryResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        sqlServerInstanceName,
        sqlServerInstanceTelemetryRequest,
        options,
      },
      spec: getTelemetryOperationSpec,
    });
    const poller = await createHttpPoller<
      SqlServerInstancesGetTelemetryResponse,
      OperationState<SqlServerInstancesGetTelemetryResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Runs migration assessment for SQL Server instance
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param options The options parameters.
   */
  runMigrationAssessment(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    options?: SqlServerInstancesRunMigrationAssessmentOptionalParams,
  ): Promise<SqlServerInstancesRunMigrationAssessmentResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, sqlServerInstanceName, options },
      runMigrationAssessmentOperationSpec,
    );
  }

  /**
   * Gets jobs status details for sql arc resource
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param options The options parameters.
   */
  getJobsStatus(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    options?: SqlServerInstancesGetJobsStatusOptionalParams,
  ): Promise<SqlServerInstancesGetJobsStatusResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, sqlServerInstanceName, options },
      getJobsStatusOperationSpec,
    );
  }

  /**
   * Request Upgrade Permission before upgrading.
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param options The options parameters.
   */
  preUpgrade(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    options?: SqlServerInstancesPreUpgradeOptionalParams,
  ): Promise<SqlServerInstancesPreUpgradeResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, sqlServerInstanceName, options },
      preUpgradeOperationSpec,
    );
  }

  /**
   * Clean up after upgrading.
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param options The options parameters.
   */
  postUpgrade(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    options?: SqlServerInstancesPostUpgradeOptionalParams,
  ): Promise<SqlServerInstancesPostUpgradeResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, sqlServerInstanceName, options },
      postUpgradeOperationSpec,
    );
  }

  /**
   * Runs Managed Instance Link assessment for SQL Server instance
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param sqlServerInstanceManagedInstanceLinkAssessmentRequest Contains the parameters to run SQL
   *                                                              Server instance MI link assessment.
   * @param options The options parameters.
   */
  async beginRunManagedInstanceLinkAssessment(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    sqlServerInstanceManagedInstanceLinkAssessmentRequest: SqlServerInstanceManagedInstanceLinkAssessmentRequest,
    options?: SqlServerInstancesRunManagedInstanceLinkAssessmentOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<SqlServerInstancesRunManagedInstanceLinkAssessmentResponse>,
      SqlServerInstancesRunManagedInstanceLinkAssessmentResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<SqlServerInstancesRunManagedInstanceLinkAssessmentResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        sqlServerInstanceName,
        sqlServerInstanceManagedInstanceLinkAssessmentRequest,
        options,
      },
      spec: runManagedInstanceLinkAssessmentOperationSpec,
    });
    const poller = await createHttpPoller<
      SqlServerInstancesRunManagedInstanceLinkAssessmentResponse,
      OperationState<SqlServerInstancesRunManagedInstanceLinkAssessmentResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Runs Managed Instance Link assessment for SQL Server instance
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param sqlServerInstanceManagedInstanceLinkAssessmentRequest Contains the parameters to run SQL
   *                                                              Server instance MI link assessment.
   * @param options The options parameters.
   */
  async beginRunManagedInstanceLinkAssessmentAndWait(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    sqlServerInstanceManagedInstanceLinkAssessmentRequest: SqlServerInstanceManagedInstanceLinkAssessmentRequest,
    options?: SqlServerInstancesRunManagedInstanceLinkAssessmentOptionalParams,
  ): Promise<SqlServerInstancesRunManagedInstanceLinkAssessmentResponse> {
    const poller = await this.beginRunManagedInstanceLinkAssessment(
      resourceGroupName,
      sqlServerInstanceName,
      sqlServerInstanceManagedInstanceLinkAssessmentRequest,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    nextLink: string,
    options?: SqlServerInstancesListNextOptionalParams,
  ): Promise<SqlServerInstancesListNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextOperationSpec,
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the Azure resource group
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: SqlServerInstancesListByResourceGroupNextOptionalParams,
  ): Promise<SqlServerInstancesListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec,
    );
  }

  /**
   * GetTelemetryNext
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param sqlServerInstanceTelemetryRequest Contains the parameters to get SQL Server instance
   *                                          telemetry.
   * @param nextLink The nextLink from the previous successful call to the GetTelemetry method.
   * @param options The options parameters.
   */
  private _getTelemetryNext(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    sqlServerInstanceTelemetryRequest: SqlServerInstanceTelemetryRequest,
    nextLink: string,
    options?: SqlServerInstancesGetTelemetryNextOptionalParams,
  ): Promise<SqlServerInstancesGetTelemetryNextResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        sqlServerInstanceName,
        sqlServerInstanceTelemetryRequest,
        nextLink,
        options,
      },
      getTelemetryNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.AzureArcData/sqlServerInstances",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SqlServerInstanceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SqlServerInstanceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SqlServerInstance,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sqlServerInstanceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SqlServerInstance,
    },
    201: {
      bodyMapper: Mappers.SqlServerInstance,
    },
    202: {
      bodyMapper: Mappers.SqlServerInstance,
    },
    204: {
      bodyMapper: Mappers.SqlServerInstance,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.sqlServerInstance,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sqlServerInstanceName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sqlServerInstanceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.SqlServerInstance,
    },
    201: {
      bodyMapper: Mappers.SqlServerInstance,
    },
    202: {
      bodyMapper: Mappers.SqlServerInstance,
    },
    204: {
      bodyMapper: Mappers.SqlServerInstance,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.parameters1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sqlServerInstanceName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const getTelemetryOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/getTelemetry",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SqlServerInstanceTelemetryResponse,
    },
    201: {
      bodyMapper: Mappers.SqlServerInstanceTelemetryResponse,
    },
    202: {
      bodyMapper: Mappers.SqlServerInstanceTelemetryResponse,
    },
    204: {
      bodyMapper: Mappers.SqlServerInstanceTelemetryResponse,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.sqlServerInstanceTelemetryRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sqlServerInstanceName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const runMigrationAssessmentOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/runMigrationAssessment",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SqlServerInstanceRunMigrationAssessmentResponse,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sqlServerInstanceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getJobsStatusOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/getJobsStatus",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SqlServerInstanceJobsStatusResponse,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.sqlServerInstanceJobsStatusRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sqlServerInstanceName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const preUpgradeOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/preUpgrade",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SqlServerInstance,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sqlServerInstanceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const postUpgradeOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/postUpgrade",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SqlServerInstance,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sqlServerInstanceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const runManagedInstanceLinkAssessmentOperationSpec: coreClient.OperationSpec =
  {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/runManagedInstanceLinkAssessment",
    httpMethod: "POST",
    responses: {
      200: {
        bodyMapper:
          Mappers.SqlServerInstanceManagedInstanceLinkAssessmentResponse,
      },
      201: {
        bodyMapper:
          Mappers.SqlServerInstanceManagedInstanceLinkAssessmentResponse,
      },
      202: {
        bodyMapper:
          Mappers.SqlServerInstanceManagedInstanceLinkAssessmentResponse,
      },
      204: {
        bodyMapper:
          Mappers.SqlServerInstanceManagedInstanceLinkAssessmentResponse,
      },
      default: {
        bodyMapper: Mappers.ErrorResponse,
      },
    },
    requestBody:
      Parameters.sqlServerInstanceManagedInstanceLinkAssessmentRequest,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
      Parameters.$host,
      Parameters.subscriptionId,
      Parameters.sqlServerInstanceName,
      Parameters.resourceGroupName1,
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer,
  };
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SqlServerInstanceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SqlServerInstanceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getTelemetryNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SqlServerInstanceTelemetryResponse,
    },
    202: {
      headersMapper: Mappers.SqlServerInstancesGetTelemetryNextHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sqlServerInstanceName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
