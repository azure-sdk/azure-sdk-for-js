/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** Result of the request to list Azure Data Services on Azure Arc operations. */
export interface OperationListResult {
  /**
   * Array of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Operation[];
  /**
   * Link to retrieve next page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Azure Data Services on Azure Arc operation definition. */
export interface Operation {
  /** The name of the operation being performed on this particular object. */
  name: string;
  /** The localized display information for this particular operation / action. */
  display: OperationDisplay;
  /**
   * The intended executor of the operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly origin?: OperationOrigin;
  /** Indicates whether the operation is a data action */
  isDataAction: boolean;
  /**
   * Additional descriptions for the operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly properties?: { [propertyName: string]: any };
}

/** Display metadata associated with the operation. */
export interface OperationDisplay {
  /** The localized friendly form of the resource provider name. */
  provider: string;
  /** The localized friendly form of the resource type related to this action/operation. */
  resource: string;
  /** The localized friendly name for the operation. */
  operation: string;
  /** The localized friendly description for the operation. */
  description: string;
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export interface ErrorResponse {
  /** The error object. */
  error?: ErrorDetail;
}

/** The error detail. */
export interface ErrorDetail {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDetail[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
}

/** A list of SqlManagedInstance. */
export interface SqlManagedInstanceListResult {
  /**
   * Array of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: SqlManagedInstance[];
  /**
   * Link to retrieve next page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Properties of sqlManagedInstance. */
export interface SqlManagedInstanceProperties {
  /** null */
  dataControllerId?: string;
  /** The instance admin user */
  admin?: string;
  /** The instance start time */
  startTime?: string;
  /** The instance end time */
  endTime?: string;
  /** The raw kubernetes information */
  k8SRaw?: SqlManagedInstanceK8SRaw;
  /** Username and password for basic authentication. */
  basicLoginInformation?: BasicLoginInformation;
  /** Last uploaded date from Kubernetes cluster. Defaults to current date time */
  lastUploadedDate?: Date;
  /**
   * The provisioning state of the Arc-enabled SQL Managed Instance resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /** Active Directory information related to this SQL Managed Instance. */
  activeDirectoryInformation?: ActiveDirectoryInformation;
  /** The license type to apply for this managed instance. */
  licenseType?: ArcSqlManagedInstanceLicenseType;
  /** If a CustomLocation is provided, this contains the ARM id of the connected cluster the custom location belongs to. */
  clusterId?: string;
  /** If a CustomLocation is provided, this contains the ARM id of the extension the custom location belongs to. */
  extensionId?: string;
}

/** The raw kubernetes information. */
export interface SqlManagedInstanceK8SRaw {
  /** Describes unknown properties. The value of an unknown property can be of "any" type. */
  [property: string]: any;
  /** The kubernetes spec information. */
  spec?: SqlManagedInstanceK8SSpec;
}

/** The kubernetes spec information. */
export interface SqlManagedInstanceK8SSpec {
  /** Describes unknown properties. The value of an unknown property can be of "any" type. */
  [property: string]: any;
  /** The kubernetes scheduling information. */
  scheduling?: K8SScheduling;
  /** This option specifies the number of SQL Managed Instance replicas that will be deployed in your Kubernetes cluster for high availability purposes. If sku.tier is BusinessCritical, allowed values are '2' or '3' with default of '3'. If sku.tier is GeneralPurpose, replicas must be '1'. */
  replicas?: number;
  /** The kubernetes security information. */
  security?: K8SSecurity;
  /** The kubernetes settings information. */
  settings?: K8SSettings;
}

/** The kubernetes scheduling information. */
export interface K8SScheduling {
  /** Describes unknown properties. The value of an unknown property can be of "any" type. */
  [property: string]: any;
  /** The kubernetes scheduling options. It describes restrictions used to help Kubernetes select appropriate nodes to host the database service */
  default?: K8SSchedulingOptions;
}

/** The kubernetes scheduling options. It describes restrictions used to help Kubernetes select appropriate nodes to host the database service */
export interface K8SSchedulingOptions {
  /** Describes unknown properties. The value of an unknown property can be of "any" type. */
  [property: string]: any;
  /** The kubernetes resource limits and requests used to restrict or reserve resource usage. */
  resources?: K8SResourceRequirements;
}

/** The kubernetes resource limits and requests used to restrict or reserve resource usage. */
export interface K8SResourceRequirements {
  /** Describes unknown properties. The value of an unknown property can be of "any" type. */
  [property: string]: any;
  /** Requests for a kubernetes resource type (e.g 'cpu', 'memory'). The 'cpu' request must be less than or equal to 'cpu' limit. Default 'cpu' is 2, minimum is 1. Default 'memory' is '4Gi', minimum is '2Gi. If sku.tier is GeneralPurpose, maximum 'cpu' is 24 and maximum 'memory' is '128Gi'. */
  requests?: { [propertyName: string]: string };
  /** Limits for a kubernetes resource type (e.g 'cpu', 'memory'). The 'cpu' request must be less than or equal to 'cpu' limit. Default 'cpu' is 2, minimum is 1. Default 'memory' is '4Gi', minimum is '2Gi. If sku.tier is GeneralPurpose, maximum 'cpu' is 24 and maximum 'memory' is '128Gi'. */
  limits?: { [propertyName: string]: string };
}

/** The kubernetes security information. */
export interface K8SSecurity {
  /** Describes unknown properties. The value of an unknown property can be of "any" type. */
  [property: string]: any;
  /** Admin login secret key */
  adminLoginSecret?: string;
  /** Service certificate secret used */
  serviceCertificateSecret?: string;
  /** The kubernetes active directory information. */
  activeDirectory?: K8SActiveDirectory;
  /** Transparent data encryption information. */
  transparentDataEncryption?: K8StransparentDataEncryption;
}

/** The kubernetes active directory information. */
export interface K8SActiveDirectory {
  connector?: K8SActiveDirectoryConnector;
  /** Account name for AAD */
  accountName?: string;
  /** Keytab secret used to authenticate with Active Directory. */
  keytabSecret?: string;
  /** An array of encryption types */
  encryptionTypes?: string[];
}

export interface K8SActiveDirectoryConnector {
  /** Name of the connector */
  name?: string;
  /** Name space of the connector */
  namespace?: string;
}

/** Transparent data encryption information. */
export interface K8StransparentDataEncryption {
  /** Transparent data encryption mode. Can be Service Managed, Customer managed or disabled */
  mode?: string;
  /** Protector secret for customer managed Transparent data encryption mode */
  protectorSecret?: string;
}

/** The kubernetes settings information. */
export interface K8SSettings {
  /** Describes unknown properties. The value of an unknown property can be of "any" type. */
  [property: string]: any;
  /** The kubernetes network settings information. */
  network?: K8SNetworkSettings;
}

/** The kubernetes network settings information. */
export interface K8SNetworkSettings {
  /** If 1, then SQL Server forces all connections to be encrypted. By default, this option is 0 */
  forceencryption?: number;
  /** Specifies which ciphers are allowed by SQL Server for TLS */
  tlsciphers?: string;
  /** A comma-separated list of which TLS protocols are allowed by SQL Server */
  tlsprotocols?: string;
}

/** Username and password for basic login authentication. */
export interface BasicLoginInformation {
  /** Login username. */
  username?: string;
  /** Login password. */
  password?: string;
}

/** Active Directory information that related to the resource. */
export interface ActiveDirectoryInformation {
  /** Keytab information that is used for the Sql Managed Instance when Active Directory authentication is used. */
  keytabInformation?: KeytabInformation;
}

/** Keytab used for authenticate with Active Directory. */
export interface KeytabInformation {
  /** A base64-encoded keytab. */
  keytab?: string;
}

/** The complex type of the extended location. */
export interface ExtendedLocation {
  /** The name of the extended location. */
  name?: string;
  /** The type of the extended location. */
  type?: ExtendedLocationTypes;
}

/** The resource model definition representing SKU for Azure Managed Instance - Azure Arc */
export interface SqlManagedInstanceSku {
  /** The name of the SKU. */
  name: "vCore";
  /** The pricing tier for the instance. */
  tier?: SqlManagedInstanceSkuTier;
  /** Whether dev/test is enabled. When the dev field is set to true, the resource is used for dev/test purpose. */
  dev?: boolean;
  /** The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. */
  size?: string;
  /** The SKU family */
  family?: string;
  /** The SKU capacity */
  capacity?: number;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export interface Resource {
  /**
   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Azure Resource Manager metadata containing createdBy and modifiedBy information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The timestamp of resource last modification (UTC) */
  lastModifiedAt?: Date;
}

/** An update to a SQL Managed Instance. */
export interface SqlManagedInstanceUpdate {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
}

/** A list of failover groups. */
export interface FailoverGroupListResult {
  /**
   * Array of failover group results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: FailoverGroupResource[];
  /**
   * Link to retrieve next page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** The properties of a failover group resource. */
export interface FailoverGroupProperties {
  /** Describes unknown properties. The value of an unknown property can be of "any" type. */
  [property: string]: any;
  /**
   * The provisioning state of the failover group resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** The resource ID of the partner SQL managed instance. */
  partnerManagedInstanceId: string;
  /** The specifications of the failover group resource. */
  spec: FailoverGroupSpec;
  /** The status of the failover group custom resource. */
  status?: Record<string, unknown>;
}

/** The specifications of the failover group resource. */
export interface FailoverGroupSpec {
  /** Describes unknown properties. The value of an unknown property can be of "any" type. */
  [property: string]: any;
  /** The shared name of the failover group for this SQL managed instance. Both SQL managed instance and its partner have to use the same shared name. */
  sharedName?: string;
  /** The name of the SQL managed instance with this failover group role. */
  sourceMI?: string;
  /** The name of the partner SQL managed instance. */
  partnerMI?: string;
  /** The mirroring endpoint URL of the partner SQL managed instance. */
  partnerMirroringURL?: string;
  /** The mirroring endpoint public certificate for the partner SQL managed instance. Only PEM format is supported. */
  partnerMirroringCert?: string;
  /** The partner sync mode of the SQL managed instance. */
  partnerSyncMode?: FailoverGroupPartnerSyncMode;
  /** The role of the SQL managed instance in this failover group. */
  role: InstanceFailoverGroupRole;
}

/** A list of SqlServerInstance. */
export interface SqlServerInstanceListResult {
  /**
   * Array of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: SqlServerInstance[];
  /**
   * Link to retrieve next page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Properties of SqlServerInstance. */
export interface SqlServerInstanceProperties {
  /** SQL Server version. */
  version?: SqlVersion;
  /** SQL Server edition. */
  edition?: EditionType;
  /**
   * ARM Resource id of the container resource (Azure Arc for Servers).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly containerResourceId?: string;
  /**
   * The time when the resource was created.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createTime?: string;
  /**
   * The number of logical processors used by the SQL Server instance.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly vCore?: string;
  /** The number of total cores of the Operating System Environment (OSE) hosting the SQL Server instance. */
  cores?: string;
  /**
   * The cloud connectivity status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: ConnectionStatus;
  /**
   * SQL Server update level.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly patchLevel?: string;
  /**
   * SQL Server collation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly collation?: string;
  /**
   * SQL Server current version.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly currentVersion?: string;
  /** SQL Server instance name. */
  instanceName?: string;
  /**
   * Dynamic TCP ports used by SQL Server.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tcpDynamicPorts?: string;
  /**
   * Static TCP ports used by SQL Server.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tcpStaticPorts?: string;
  /**
   * SQL Server product ID.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly productId?: string;
  /**
   * SQL Server license type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly licenseType?: ArcSqlServerLicenseType;
  /**
   * Timestamp of last Azure Defender status update.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly azureDefenderStatusLastUpdated?: Date;
  /**
   * Status of Azure Defender.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly azureDefenderStatus?: DefenderStatus;
  /**
   * The provisioning state of the Arc-enabled SQL Server resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * The time when last successful inventory upload was performed.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastInventoryUploadTime?: Date;
  /**
   * The time when last successful usage upload was performed.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastUsageUploadTime?: Date;
  /** Type of host for Azure Arc SQL Server */
  hostType?: HostType;
  /**
   * The role of the SQL Server, based on availability.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly alwaysOnRole?: AlwaysOnRole;
  /** Failover Cluster Instance properties. */
  failoverCluster?: FailoverCluster;
  /** The backup profile for the SQL server. */
  backupPolicy?: BackupPolicy;
  /** Upgrade Action for this resource is locked until it expires. The Expiration time indicated by this value. It is not locked when it is empty. */
  upgradeLockedUntil?: Date;
  /** The monitoring configuration. */
  monitoring?: Monitoring;
}

/** Failover Cluster Instance properties. */
export interface FailoverCluster {
  /**
   * The GUID of the SQL Server's underlying Failover Cluster.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The network name to connect to the SQL FCI.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkName?: string;
  /**
   * The ARM IDs of the Arc SQL Server resources, belonging to the current server's Failover cluster.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sqlInstanceIds?: string[];
  /**
   * The host names which are part of the SQL FCI resource group.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly hostNames?: string[];
}

/** The backup profile for the SQL server. */
export interface BackupPolicy {
  /** The retention period for all the databases in this managed instance. */
  retentionPeriodDays?: number;
  /** The value indicating days between full backups. */
  fullBackupDays?: number;
  /** The differential backup interval in hours. */
  differentialBackupHours?: DifferentialBackupHours;
  /** The value indicating minutes between transaction log backups. */
  transactionLogBackupMinutes?: number;
}

/** The monitoring configuration. */
export interface Monitoring {
  /** Indicates if monitoring is enabled for this SQL Server instance. */
  enabled?: boolean;
}

/** An update to a SQL Server Instance. */
export interface SqlServerInstanceUpdate {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** null */
  properties?: SqlServerInstanceUpdateProperties;
}

/** Properties of update SqlServerInstance. */
export interface SqlServerInstanceUpdateProperties {
  /** SQL Server version. */
  version?: SqlVersion;
  /** SQL Server edition. */
  edition?: EditionType;
  /**
   * ARM Resource id of the container resource (Azure Arc for Servers).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly containerResourceId?: string;
  /**
   * The time when the resource was created.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createTime?: string;
  /**
   * The number of logical processors used by the SQL Server instance.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly vCore?: string;
  /** The number of total cores of the Operating System Environment (OSE) hosting the SQL Server instance. */
  cores?: string;
  /**
   * The cloud connectivity status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: ConnectionStatus;
  /**
   * SQL Server update level.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly patchLevel?: string;
  /**
   * SQL Server collation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly collation?: string;
  /**
   * SQL Server current version.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly currentVersion?: string;
  /** SQL Server instance name. */
  instanceName?: string;
  /**
   * Dynamic TCP ports used by SQL Server.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tcpDynamicPorts?: string;
  /**
   * Static TCP ports used by SQL Server.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tcpStaticPorts?: string;
  /**
   * SQL Server product ID.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly productId?: string;
  /**
   * SQL Server license type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly licenseType?: ArcSqlServerLicenseType;
  /**
   * Timestamp of last Azure Defender status update.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly azureDefenderStatusLastUpdated?: Date;
  /**
   * Status of Azure Defender.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly azureDefenderStatus?: DefenderStatus;
  /**
   * The provisioning state of the Arc-enabled SQL Server resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * The time when last successful inventory upload was performed.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastInventoryUploadTime?: Date;
  /**
   * The time when last successful usage upload was performed.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastUsageUploadTime?: Date;
  /** Type of host for Azure Arc SQL Server */
  hostType?: HostType;
  /**
   * The role of the SQL Server, based on availability.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly alwaysOnRole?: AlwaysOnRole;
  /** Failover Cluster Instance properties. */
  failoverCluster?: FailoverCluster;
  /** The backup profile for the SQL server. */
  backupPolicy?: BackupPolicy;
  /** Upgrade Action for this resource is locked until it expires. The Expiration time indicated by this value. It is not locked when it is empty. */
  upgradeLockedUntil?: Date;
  /** The monitoring configuration. */
  monitoring?: Monitoring;
}

/** The Arc SQL Server instance telemetry retrieval request. */
export interface SqlServerInstanceTelemetryRequest {
  /** The name of the telemetry dataset to retrieve. */
  datasetName: string;
  /** The start time for the time range to fetch telemetry for. If not specified, the current time minus 1 hour is used. */
  startTime?: Date;
  /** The end time for the time range to fetch telemetry for. If not specified, the current time is used. */
  endTime?: Date;
  /** The time granularity to fetch telemetry for. This is an ISO8601 duration. Examples: PT15M, PT1H, P1D */
  interval?: string;
  /** The aggregation type to use for the numerical columns in the dataset. */
  aggregationType?: AggregationType;
  /** The list of database names to return telemetry for. If not specified, telemetry for all databases will be aggregated and returned. */
  databaseNames?: string[];
}

/** A section of the telemetry response for the SQL Server instance. */
export interface SqlServerInstanceTelemetryResponse {
  /** The columns of the result telemetry table for the SQL Server instance. */
  columns: SqlServerInstanceTelemetryColumn[];
  /** A list of rows from the result telemetry table for the SQL Server instance. */
  rows: string[][];
  /**
   * The link to the next section of rows of the telemetry response for the SQL Server instance. Null if no more sections are available.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** The telemetry column for the SQL Server instance. */
export interface SqlServerInstanceTelemetryColumn {
  /** The name of the telemetry column. */
  name?: string;
  /** The type of the telemetry column. */
  type?: SqlServerInstanceTelemetryColumnType;
}

/** A list of data controllers. */
export interface PageOfDataControllerResource {
  /** Array of results. */
  value?: DataControllerResource[];
  /** Link to retrieve next page of results. */
  nextLink?: string;
}

/** The data controller properties. */
export interface DataControllerProperties {
  /** The infrastructure the data controller is running on. */
  infrastructure?: Infrastructure;
  /** Properties from the Kubernetes data controller */
  onPremiseProperty?: OnPremiseProperty;
  /** The raw kubernetes information */
  k8SRaw?: Record<string, unknown>;
  /** Properties on upload watermark.  Mostly timestamp for each upload data type */
  uploadWatermark?: UploadWatermark;
  /** Last uploaded date from Kubernetes cluster. Defaults to current date time */
  lastUploadedDate?: Date;
  /** Deprecated. Azure Arc Data Services data controller no longer expose any endpoint. All traffic are exposed through Kubernetes native API. */
  basicLoginInformation?: BasicLoginInformation;
  /** Login credential for metrics dashboard on the Kubernetes cluster. */
  metricsDashboardCredential?: BasicLoginInformation;
  /** Login credential for logs dashboard on the Kubernetes cluster. */
  logsDashboardCredential?: BasicLoginInformation;
  /** Log analytics workspace id and primary key */
  logAnalyticsWorkspaceConfig?: LogAnalyticsWorkspaceConfig;
  /** Deprecated. Service principal is deprecated in favor of Arc Kubernetes service extension managed identity. */
  uploadServicePrincipal?: UploadServicePrincipal;
  /**
   * The provisioning state of the Arc Data Controller resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /** If a CustomLocation is provided, this contains the ARM id of the connected cluster the custom location belongs to. */
  clusterId?: string;
  /** If a CustomLocation is provided, this contains the ARM id of the extension the custom location belongs to. */
  extensionId?: string;
}

/** Properties from the Kubernetes data controller */
export interface OnPremiseProperty {
  /** A globally unique ID identifying the associated Kubernetes cluster */
  id: string;
  /** Certificate that contains the Kubernetes cluster public key used to verify signing */
  publicSigningKey: string;
  /** Unique thumbprint returned to customer to verify the certificate being uploaded */
  signingCertificateThumbprint?: string;
}

/** Properties on upload watermark.  Mostly timestamp for each upload data type */
export interface UploadWatermark {
  /** Last uploaded date for metrics from kubernetes cluster. Defaults to current date time */
  metrics?: Date;
  /** Last uploaded date for logs from kubernetes cluster. Defaults to current date time */
  logs?: Date;
  /** Last uploaded date for usages from kubernetes cluster. Defaults to current date time */
  usages?: Date;
}

/** Log analytics workspace id and primary key */
export interface LogAnalyticsWorkspaceConfig {
  /** Azure Log Analytics workspace ID */
  workspaceId?: string;
  /** Primary key of the workspace */
  primaryKey?: string;
}

/** Service principal for uploading billing, metrics and logs. */
export interface UploadServicePrincipal {
  /** Client ID of the service principal for uploading data. */
  clientId?: string;
  /** Tenant ID of the service principal. */
  tenantId?: string;
  /** Authority for the service principal. Example: https://login.microsoftonline.com/ */
  authority?: string;
  /** Secret of the service principal */
  clientSecret?: string;
}

/** Used for updating a data controller resource. */
export interface DataControllerUpdate {
  /** Resource tags */
  tags?: { [propertyName: string]: string };
  /** The data controller's properties */
  properties?: DataControllerProperties;
}

/** A list of active directory connectors */
export interface ActiveDirectoryConnectorListResult {
  /**
   * Array of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: ActiveDirectoryConnectorResource[];
  /**
   * Link to retrieve next page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** The properties of an Active Directory connector resource */
export interface ActiveDirectoryConnectorProperties {
  /** Username and password for domain service account authentication. */
  domainServiceAccountLoginInformation?: BasicLoginInformation;
  /**
   * The provisioning state of the Active Directory connector resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /** null */
  spec: ActiveDirectoryConnectorSpec;
  /** null */
  status?: ActiveDirectoryConnectorStatus;
}

/** The specifications of the AD Kubernetes resource. */
export interface ActiveDirectoryConnectorSpec {
  /** null */
  activeDirectory: ActiveDirectoryConnectorDomainDetails;
  /** null */
  dns: ActiveDirectoryConnectorDNSDetails;
}

/** Active Directory domain details */
export interface ActiveDirectoryConnectorDomainDetails {
  /** Name (uppercase) of the Active Directory domain that this AD connector will be associated with. */
  realm: string;
  /** NETBIOS name of the Active Directory domain. */
  netbiosDomainName?: string;
  /** The service account provisioning mode for this Active Directory connector. */
  serviceAccountProvisioning?: AccountProvisioningMode;
  /** The distinguished name of the Active Directory Organizational Unit. */
  ouDistinguishedName?: string;
  /** null */
  domainControllers?: ActiveDirectoryDomainControllers;
}

/** Details about the Active Directory domain controllers associated with this AD connector instance */
export interface ActiveDirectoryDomainControllers {
  /** Information about the Primary Domain Controller (PDC) in the AD domain. */
  primaryDomainController?: ActiveDirectoryDomainController;
  /** null */
  secondaryDomainControllers?: ActiveDirectoryDomainController[];
}

/** Information about a domain controller in the AD domain. */
export interface ActiveDirectoryDomainController {
  /** Fully-qualified domain name of a domain controller in the AD domain. */
  hostname: string;
}

/** DNS server details */
export interface ActiveDirectoryConnectorDNSDetails {
  /** DNS domain name for which DNS lookups should be forwarded to the Active Directory DNS servers. */
  domainName?: string;
  /** List of Active Directory DNS server IP addresses. */
  nameserverIPAddresses: string[];
  /** Replica count for DNS proxy service. Default value is 1. */
  replicas?: number;
  /** Flag indicating whether to prefer Kubernetes DNS server response over AD DNS server response for IP address lookups. */
  preferK8SDnsForPtrLookups?: boolean;
}

/** The status of the Kubernetes custom resource. */
export interface ActiveDirectoryConnectorStatus {
  /** Describes unknown properties. The value of an unknown property can be of "any" type. */
  [property: string]: any;
  /** The time that the custom resource was last updated. */
  lastUpdateTime?: string;
  /** The version of the replicaSet associated with the AD connector custom resource. */
  observedGeneration?: number;
  /** The state of the AD connector custom resource. */
  state?: string;
}

/** A list of PostgresInstance. */
export interface PostgresInstanceListResult {
  /**
   * Array of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: PostgresInstance[];
  /**
   * Link to retrieve next page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Postgres Instance properties. */
export interface PostgresInstanceProperties {
  /** The data controller id */
  dataControllerId?: string;
  /** The instance admin */
  admin?: string;
  /** Username and password for basic authentication. */
  basicLoginInformation?: BasicLoginInformation;
  /** The raw kubernetes information */
  k8SRaw?: Record<string, unknown>;
  /** Last uploaded date from Kubernetes cluster. Defaults to current date time */
  lastUploadedDate?: Date;
  /**
   * The provisioning state of the Azure Arc-enabled PostgreSQL instance.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
}

/** The resource model definition representing SKU for ARM resources */
export interface CommonSku {
  /** The name of the SKU.  It is typically a letter+number code */
  name: string;
  /** Whether dev/test is enabled. When the dev field is set to true, the resource is used for dev/test purpose. */
  dev?: boolean;
  /** The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. */
  size?: string;
  /** If the service has different generations of hardware, for the same SKU, then that can be captured here. */
  family?: string;
  /** If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted. */
  capacity?: number;
}

/** An update to a Postgres Instance. */
export interface PostgresInstanceUpdate {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** Postgres Instance properties. */
  properties?: PostgresInstanceProperties;
}

/** The properties of Arc Sql Server availability group resource */
export interface SqlServerAvailabilityGroupResourceProperties {
  /**
   * ID GUID of the availability group.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly availabilityGroupId?: string;
  /**
   * the SQL server name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly serverName?: string;
  /**
   * the SQL Server Instance name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly instanceName?: string;
  /**
   * Timestamp for when the data was collected from the client machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly collectionTimestamp?: Date;
  /** Availability Group Info */
  info?: AvailabilityGroupInfo;
  /** A list of Availability Group Replicas. */
  replicas?: SqlServerAvailabilityGroupResourcePropertiesReplicas;
  /** A list of Availability Group Database Replicas. */
  databases?: SqlServerAvailabilityGroupResourcePropertiesDatabases;
  /**
   * The provisioning state of the Arc-enabled SQL Server availability group resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
}

/** The specifications of the availability group state */
export interface AvailabilityGroupInfo {
  /** User-defined failure condition level under which an automatic failover must be triggered. */
  failureConditionLevel?: number;
  /** Wait time (in milliseconds) for the sp_server_diagnostics system stored procedure to return server-health information, before the server instance is assumed to be slow or not responding. */
  healthCheckTimeout?: number;
  /**
   * Preferred location for performing backups on the availability databases in this availability group.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly automatedBackupPreferenceDescription?: string;
  /**
   * SQL Server availability group current version.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly version?: number;
  /** Specifies whether this is a basic availability group. */
  basicFeatures?: boolean;
  /** Specifies whether DTC support has been enabled for this availability group. */
  dtcSupport?: boolean;
  /** Specifies whether the availability group supports failover for database health conditions. */
  dbFailover?: boolean;
  /** Specifies whether this is a distributed availability group. */
  isDistributed?: boolean;
  /**
   * SQL Server availability group cluster type description
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly clusterTypeDescription?: string;
  /** The number of secondary replicas that must be in a synchronized state for a commit to complete. */
  requiredSynchronizedSecondariesToCommit?: number;
  /** SQL Server availability group contained system databases. */
  isContained?: boolean;
  /**
   * Name of the server instance that is hosting the current primary replica.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly primaryReplica?: string;
  /**
   * Indicates the recovery health of the primary replica.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly primaryRecoveryHealthDescription?: string;
  /**
   * Indicates the recovery health of a secondary replica.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly secondaryRecoveryHealthDescription?: string;
  /**
   * Reflects a roll-up of the synchronization health of all availability replicas in the availability group.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly synchronizationHealthDescription?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly replicationPartnerType?: ReplicationPartnerType;
}

/** A list of Availability Group Replicas. */
export interface SqlServerAvailabilityGroupResourcePropertiesReplicas {
  /** Array of Availability Group Replicas. */
  value?: SqlAvailabilityGroupReplicaResourceProperties[];
  /**
   * Link to retrieve next page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** The properties of Arc Sql availability group replica resource */
export interface SqlAvailabilityGroupReplicaResourceProperties {
  /**
   * ID GUID of the availability group.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly replicaId?: string;
  /** the replica name. */
  replicaName?: string;
  /** null */
  configure?: AvailabilityGroupConfigure;
  /** null */
  state?: AvailabilityGroupState;
}

/** The specifications of the availability group replica configuration */
export interface AvailabilityGroupConfigure {
  /** Mirroring endpoint URL of availability group replica */
  endpointUrl?: string;
  /**
   * The Availability Synchronization mode of the availability group replica.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly availabilityModeDescription?: string;
  /**
   * The failover mode of the availability group replica.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly failoverModeDescription?: string;
  /** The time-out period of availability group session replica, in seconds. */
  sessionTimeout?: number;
  /**
   * Whether the availability allows all connections or only read-write connections.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly primaryRoleAllowConnectionsDescription?: string;
  /**
   * Whether an availability replica that is performing the secondary role (that is, a secondary replica) can accept connections from clients.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly secondaryRoleAllowConnectionsDescription?: string;
  /**
   * Date that the replica was created.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly replicaCreateDate?: Date;
  /**
   * Date that the replica was modified.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly replicaModifyDate?: Date;
  /** Represents the user-specified priority for performing backups on this replica relative to the other replicas in the same availability group. */
  backupPriority?: number;
  /** Connectivity endpoint (URL) of the read only availability replica. */
  readOnlyRoutingUrl?: string;
  /** Connectivity endpoint (URL) of the read write availability replica. */
  readWriteRoutingUrl?: string;
  /**
   * Describes seeding mode.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly seedingModeDescription?: string;
}

/** The specifications of the availability group state */
export interface AvailabilityGroupState {
  /**
   * Current Always On availability groups role of the availability group replica.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly availabilityGroupReplicaRole?: string;
  /**
   * Current operational state of the availability group replica
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operationalStateDescription?: string;
  /**
   * Recovery health of the availability group replica.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly recoveryHealthDescription?: string;
  /**
   * Reflects a rollup of the database synchronization state (synchronization_state) of all joined availability databases (also known as replicas) and the availability mode of the replica (synchronous-commit or asynchronous-commit mode). The rollup will reflect the least healthy accumulated state the databases on the replica.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly synchronizationHealthDescription?: string;
  /**
   * Whether a secondary replica is currently connected to the primary replica.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly connectedStateDescription?: string;
  /**
   * Text description of the last connection error of the availability group replica.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastConnectErrorDescription?: string;
  /**
   * Date and time timestamp indicating when the last connect error occurred.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastConnectErrorTimestamp?: Date;
}

/** A list of Availability Group Database Replicas. */
export interface SqlServerAvailabilityGroupResourcePropertiesDatabases {
  /** Array of Availability Group Database Replicas. */
  value?: SqlAvailabilityGroupDatabaseReplicaResourceProperties[];
  /**
   * Link to retrieve next page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** The properties of Arc Sql availability group database replica resource */
export interface SqlAvailabilityGroupDatabaseReplicaResourceProperties {
  /** the database name. */
  databaseName?: string;
  /**
   * the database replica name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly replicaName?: string;
  /**
   * Whether the availability database is local.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isLocal?: boolean;
  /**
   * Returns 1 if the replica is primary, or 0 if it is a secondary replica.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isPrimaryReplica?: boolean;
  /**
   * Description of the data-movement state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly synchronizationStateDescription?: string;
  /**
   * Whether this replica is transaction committer.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isCommitParticipant?: boolean;
  /**
   * Description of the health of database.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly synchronizationHealthDescription?: string;
  /**
   * Description of the database state of the availability replica.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly databaseStateDescription?: string;
  /**
   * Whether this data movement is suspended.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isSuspended?: boolean;
  /**
   * Description of the database suspended state reason.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly suspendReasonDescription?: string;
}

/** An update to availability group resource. */
export interface SqlServerAvailabilityGroupUpdate {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The Server Availability Group's properties */
  properties?: SqlServerAvailabilityGroupResourceProperties;
}

/** A list of Arc Sql Server Availability Groups. */
export interface ArcSqlServerAvailabilityGroupListResult {
  /**
   * Array of Arc Sql Server Availability Groups.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: SqlServerAvailabilityGroupResource[];
  /**
   * Link to retrieve next page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** The properties of Arc Sql Server database resource */
export interface SqlServerDatabaseResourceProperties {
  /** Collation of the database. */
  collationName?: string;
  /** Creation date of the database. */
  databaseCreationDate?: Date;
  /** Compatibility level of the database */
  compatibilityLevel?: number;
  /** Size of the database. */
  sizeMB?: number;
  /** Space left of the database. */
  spaceAvailableMB?: number;
  /** State of the database. */
  state?: DatabaseState;
  /** Whether the database is read only or not. */
  isReadOnly?: boolean;
  /** Status of the database. */
  recoveryMode?: RecoveryMode;
  /** List of features that are enabled for the database */
  databaseOptions?: SqlServerDatabaseResourcePropertiesDatabaseOptions;
  backupInformation?: SqlServerDatabaseResourcePropertiesBackupInformation;
  /** The backup profile for the SQL server. */
  backupPolicy?: BackupPolicy;
  /**
   * This records the earliest start date and time that restore is available for this database (ISO8601 format).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly earliestRestoreDate?: Date;
  /** Database create mode. PointInTimeRestore: Create a database by restoring a point in time backup of an existing database. sourceDatabaseId and restorePointInTime must be specified. */
  createMode?: DatabaseCreateMode;
  /** The resource identifier of the source database associated with create operation of this database. */
  sourceDatabaseId?: string;
  /** Conditional. If createMode is PointInTimeRestore, this value is required. Specifies the point in time (ISO8601 format) of the source database that will be restored to create the new database. */
  restorePointInTime?: Date;
  /**
   * The provisioning state of the Arc-enabled SQL Server database resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * The time when last successful database upload was performed.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastDatabaseUploadTime?: Date;
}

/** List of features that are enabled for the database */
export interface SqlServerDatabaseResourcePropertiesDatabaseOptions {
  isAutoCloseOn?: boolean;
  isAutoShrinkOn?: boolean;
  isAutoCreateStatsOn?: boolean;
  isAutoUpdateStatsOn?: boolean;
  isRemoteDataArchiveEnabled?: boolean;
  isMemoryOptimizationEnabled?: boolean;
  isEncrypted?: boolean;
  isTrustworthyOn?: boolean;
}

export interface SqlServerDatabaseResourcePropertiesBackupInformation {
  /** Date time of last full backup. */
  lastFullBackup?: Date;
  /** Date time of last log backup. */
  lastLogBackup?: Date;
}

/** An update to database resource. */
export interface SqlServerDatabaseUpdate {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The data controller's properties */
  properties?: SqlServerDatabaseResourceProperties;
}

/** A list of Arc Sql Server database. */
export interface ArcSqlServerDatabaseListResult {
  /**
   * Array of  Arc Sql Server database.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: SqlServerDatabaseResource[];
  /**
   * Link to retrieve next page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export interface TrackedResource extends Resource {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The geo-location where the resource lives */
  location: string;
}

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export interface ProxyResource extends Resource {}

/** The resource model definition representing SKU for Azure Database for PostgresSQL - Azure Arc */
export interface PostgresInstanceSku extends CommonSku {
  /** This field is required to be implemented by the Resource Provider if the service has more than one tier. */
  tier?: "Hyperscale";
}

/** A SqlManagedInstance. */
export interface SqlManagedInstance extends TrackedResource {
  /** null */
  properties: SqlManagedInstanceProperties;
  /** The extendedLocation of the resource. */
  extendedLocation?: ExtendedLocation;
  /** Resource sku. */
  sku?: SqlManagedInstanceSku;
}

/** A SqlServerInstance. */
export interface SqlServerInstance extends TrackedResource {
  /** null */
  properties?: SqlServerInstanceProperties;
}

/** Data controller resource */
export interface DataControllerResource extends TrackedResource {
  /** The extendedLocation of the resource. */
  extendedLocation?: ExtendedLocation;
  /** The data controller's properties */
  properties: DataControllerProperties;
}

/** A Postgres Instance. */
export interface PostgresInstance extends TrackedResource {
  /** The extendedLocation of the resource. */
  extendedLocation?: ExtendedLocation;
  /** null */
  properties: PostgresInstanceProperties;
  /** Resource sku. */
  sku?: PostgresInstanceSku;
}

/** Arc Sql Server Availability Group */
export interface SqlServerAvailabilityGroupResource extends TrackedResource {
  /** Properties of Arc Sql Server availability group */
  properties: SqlServerAvailabilityGroupResourceProperties;
}

/** Arc Sql Server database */
export interface SqlServerDatabaseResource extends TrackedResource {
  /** Properties of Arc Sql Server database */
  properties: SqlServerDatabaseResourceProperties;
}

/** A failover group resource. */
export interface FailoverGroupResource extends ProxyResource {
  /** null */
  properties: FailoverGroupProperties;
}

/** Active directory connector resource */
export interface ActiveDirectoryConnectorResource extends ProxyResource {
  /** null */
  properties: ActiveDirectoryConnectorProperties;
}

/** Defines headers for SqlServerInstances_update operation. */
export interface SqlServerInstancesUpdateHeaders {
  /** The URL of the resource used to check the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for SqlServerInstances_getTelemetry operation. */
export interface SqlServerInstancesGetTelemetryHeaders {
  /** The URL to retrieve the operation status. */
  location?: string;
}

/** Defines headers for SqlServerInstances_getTelemetryNext operation. */
export interface SqlServerInstancesGetTelemetryNextHeaders {
  /** The URL to retrieve the operation status. */
  location?: string;
}

/** Defines headers for SqlServerAvailabilityGroups_delete operation. */
export interface SqlServerAvailabilityGroupsDeleteHeaders {
  /** The URL of the resource used to check the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for SqlServerAvailabilityGroups_update operation. */
export interface SqlServerAvailabilityGroupsUpdateHeaders {
  /** The URL of the resource used to check the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for SqlServerDatabases_delete operation. */
export interface SqlServerDatabasesDeleteHeaders {
  /** The URL of the resource used to check the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for SqlServerDatabases_update operation. */
export interface SqlServerDatabasesUpdateHeaders {
  /** The URL of the resource used to check the status of the asynchronous operation. */
  location?: string;
}

/** Known values of {@link OperationOrigin} that the service accepts. */
export enum KnownOperationOrigin {
  /** User */
  User = "user",
  /** System */
  System = "system",
}

/**
 * Defines values for OperationOrigin. \
 * {@link KnownOperationOrigin} can be used interchangeably with OperationOrigin,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **user** \
 * **system**
 */
export type OperationOrigin = string;

/** Known values of {@link ArcSqlManagedInstanceLicenseType} that the service accepts. */
export enum KnownArcSqlManagedInstanceLicenseType {
  /** BasePrice */
  BasePrice = "BasePrice",
  /** LicenseIncluded */
  LicenseIncluded = "LicenseIncluded",
  /** DisasterRecovery */
  DisasterRecovery = "DisasterRecovery",
}

/**
 * Defines values for ArcSqlManagedInstanceLicenseType. \
 * {@link KnownArcSqlManagedInstanceLicenseType} can be used interchangeably with ArcSqlManagedInstanceLicenseType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **BasePrice** \
 * **LicenseIncluded** \
 * **DisasterRecovery**
 */
export type ArcSqlManagedInstanceLicenseType = string;

/** Known values of {@link ExtendedLocationTypes} that the service accepts. */
export enum KnownExtendedLocationTypes {
  /** CustomLocation */
  CustomLocation = "CustomLocation",
}

/**
 * Defines values for ExtendedLocationTypes. \
 * {@link KnownExtendedLocationTypes} can be used interchangeably with ExtendedLocationTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **CustomLocation**
 */
export type ExtendedLocationTypes = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  /** User */
  User = "User",
  /** Application */
  Application = "Application",
  /** ManagedIdentity */
  ManagedIdentity = "ManagedIdentity",
  /** Key */
  Key = "Key",
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link ProvisioningState} that the service accepts. */
export enum KnownProvisioningState {
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Canceled */
  Canceled = "Canceled",
  /** Accepted */
  Accepted = "Accepted",
}

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Accepted**
 */
export type ProvisioningState = string;

/** Known values of {@link FailoverGroupPartnerSyncMode} that the service accepts. */
export enum KnownFailoverGroupPartnerSyncMode {
  /** Async */
  Async = "async",
  /** Sync */
  Sync = "sync",
}

/**
 * Defines values for FailoverGroupPartnerSyncMode. \
 * {@link KnownFailoverGroupPartnerSyncMode} can be used interchangeably with FailoverGroupPartnerSyncMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **async** \
 * **sync**
 */
export type FailoverGroupPartnerSyncMode = string;

/** Known values of {@link InstanceFailoverGroupRole} that the service accepts. */
export enum KnownInstanceFailoverGroupRole {
  /** Primary */
  Primary = "primary",
  /** Secondary */
  Secondary = "secondary",
  /** ForcePrimaryAllowDataLoss */
  ForcePrimaryAllowDataLoss = "force-primary-allow-data-loss",
  /** ForceSecondary */
  ForceSecondary = "force-secondary",
}

/**
 * Defines values for InstanceFailoverGroupRole. \
 * {@link KnownInstanceFailoverGroupRole} can be used interchangeably with InstanceFailoverGroupRole,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **primary** \
 * **secondary** \
 * **force-primary-allow-data-loss** \
 * **force-secondary**
 */
export type InstanceFailoverGroupRole = string;

/** Known values of {@link SqlVersion} that the service accepts. */
export enum KnownSqlVersion {
  /** SQLServer2012 */
  SQLServer2012 = "SQL Server 2012",
  /** SQLServer2014 */
  SQLServer2014 = "SQL Server 2014",
  /** SQLServer2016 */
  SQLServer2016 = "SQL Server 2016",
  /** SQLServer2017 */
  SQLServer2017 = "SQL Server 2017",
  /** SQLServer2019 */
  SQLServer2019 = "SQL Server 2019",
  /** SQLServer2022 */
  SQLServer2022 = "SQL Server 2022",
  /** Unknown */
  Unknown = "Unknown",
}

/**
 * Defines values for SqlVersion. \
 * {@link KnownSqlVersion} can be used interchangeably with SqlVersion,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SQL Server 2012** \
 * **SQL Server 2014** \
 * **SQL Server 2016** \
 * **SQL Server 2017** \
 * **SQL Server 2019** \
 * **SQL Server 2022** \
 * **Unknown**
 */
export type SqlVersion = string;

/** Known values of {@link EditionType} that the service accepts. */
export enum KnownEditionType {
  /** Evaluation */
  Evaluation = "Evaluation",
  /** Enterprise */
  Enterprise = "Enterprise",
  /** Standard */
  Standard = "Standard",
  /** Web */
  Web = "Web",
  /** Developer */
  Developer = "Developer",
  /** Express */
  Express = "Express",
  /** BusinessIntelligence */
  BusinessIntelligence = "Business Intelligence",
}

/**
 * Defines values for EditionType. \
 * {@link KnownEditionType} can be used interchangeably with EditionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Evaluation** \
 * **Enterprise** \
 * **Standard** \
 * **Web** \
 * **Developer** \
 * **Express** \
 * **Business Intelligence**
 */
export type EditionType = string;

/** Known values of {@link ConnectionStatus} that the service accepts. */
export enum KnownConnectionStatus {
  /** Connected */
  Connected = "Connected",
  /** Disconnected */
  Disconnected = "Disconnected",
  /** Registered */
  Registered = "Registered",
  /** Unknown */
  Unknown = "Unknown",
}

/**
 * Defines values for ConnectionStatus. \
 * {@link KnownConnectionStatus} can be used interchangeably with ConnectionStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Connected** \
 * **Disconnected** \
 * **Registered** \
 * **Unknown**
 */
export type ConnectionStatus = string;

/** Known values of {@link ArcSqlServerLicenseType} that the service accepts. */
export enum KnownArcSqlServerLicenseType {
  /** Undefined */
  Undefined = "Undefined",
  /** Free */
  Free = "Free",
  /** Hadr */
  Hadr = "HADR",
  /** ServerCAL */
  ServerCAL = "ServerCAL",
  /** LicenseOnly */
  LicenseOnly = "LicenseOnly",
  /** Payg */
  Payg = "PAYG",
  /** Paid */
  Paid = "Paid",
}

/**
 * Defines values for ArcSqlServerLicenseType. \
 * {@link KnownArcSqlServerLicenseType} can be used interchangeably with ArcSqlServerLicenseType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Undefined** \
 * **Free** \
 * **HADR** \
 * **ServerCAL** \
 * **LicenseOnly** \
 * **PAYG** \
 * **Paid**
 */
export type ArcSqlServerLicenseType = string;

/** Known values of {@link DefenderStatus} that the service accepts. */
export enum KnownDefenderStatus {
  /** Protected */
  Protected = "Protected",
  /** Unprotected */
  Unprotected = "Unprotected",
  /** Unknown */
  Unknown = "Unknown",
}

/**
 * Defines values for DefenderStatus. \
 * {@link KnownDefenderStatus} can be used interchangeably with DefenderStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Protected** \
 * **Unprotected** \
 * **Unknown**
 */
export type DefenderStatus = string;

/** Known values of {@link HostType} that the service accepts. */
export enum KnownHostType {
  /** AzureVirtualMachine */
  AzureVirtualMachine = "Azure Virtual Machine",
  /** AzureVMWareVirtualMachine */
  AzureVMWareVirtualMachine = "Azure VMWare Virtual Machine",
  /** AzureKubernetesService */
  AzureKubernetesService = "Azure Kubernetes Service",
  /** AWSVMWareVirtualMachine */
  AWSVMWareVirtualMachine = "AWS VMWare Virtual Machine",
  /** AWSKubernetesService */
  AWSKubernetesService = "AWS Kubernetes Service",
  /** GCPVMWareVirtualMachine */
  GCPVMWareVirtualMachine = "GCP VMWare Virtual Machine",
  /** GCPKubernetesService */
  GCPKubernetesService = "GCP Kubernetes Service",
  /** Container */
  Container = "Container",
  /** VirtualMachine */
  VirtualMachine = "Virtual Machine",
  /** PhysicalServer */
  PhysicalServer = "Physical Server",
  /** AWSVirtualMachine */
  AWSVirtualMachine = "AWS Virtual Machine",
  /** GCPVirtualMachine */
  GCPVirtualMachine = "GCP Virtual Machine",
  /** Other */
  Other = "Other",
}

/**
 * Defines values for HostType. \
 * {@link KnownHostType} can be used interchangeably with HostType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Azure Virtual Machine** \
 * **Azure VMWare Virtual Machine** \
 * **Azure Kubernetes Service** \
 * **AWS VMWare Virtual Machine** \
 * **AWS Kubernetes Service** \
 * **GCP VMWare Virtual Machine** \
 * **GCP Kubernetes Service** \
 * **Container** \
 * **Virtual Machine** \
 * **Physical Server** \
 * **AWS Virtual Machine** \
 * **GCP Virtual Machine** \
 * **Other**
 */
export type HostType = string;

/** Known values of {@link AlwaysOnRole} that the service accepts. */
export enum KnownAlwaysOnRole {
  /** None */
  None = "None",
  /** FailoverClusterInstance */
  FailoverClusterInstance = "FailoverClusterInstance",
  /** FailoverClusterNode */
  FailoverClusterNode = "FailoverClusterNode",
  /** AvailabilityGroupReplica */
  AvailabilityGroupReplica = "AvailabilityGroupReplica",
}

/**
 * Defines values for AlwaysOnRole. \
 * {@link KnownAlwaysOnRole} can be used interchangeably with AlwaysOnRole,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **FailoverClusterInstance** \
 * **FailoverClusterNode** \
 * **AvailabilityGroupReplica**
 */
export type AlwaysOnRole = string;

/** Known values of {@link AggregationType} that the service accepts. */
export enum KnownAggregationType {
  /** Average */
  Average = "Average",
  /** Minimum */
  Minimum = "Minimum",
  /** Maximum */
  Maximum = "Maximum",
  /** Sum */
  Sum = "Sum",
  /** Count */
  Count = "Count",
}

/**
 * Defines values for AggregationType. \
 * {@link KnownAggregationType} can be used interchangeably with AggregationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Average** \
 * **Minimum** \
 * **Maximum** \
 * **Sum** \
 * **Count**
 */
export type AggregationType = string;

/** Known values of {@link SqlServerInstanceTelemetryColumnType} that the service accepts. */
export enum KnownSqlServerInstanceTelemetryColumnType {
  /** Bool */
  Bool = "bool",
  /** Datetime */
  Datetime = "datetime",
  /** Int */
  Int = "int",
  /** Long */
  Long = "long",
  /** Double */
  Double = "double",
  /** String */
  String = "string",
  /** Guid */
  Guid = "guid",
  /** Timespan */
  Timespan = "timespan",
}

/**
 * Defines values for SqlServerInstanceTelemetryColumnType. \
 * {@link KnownSqlServerInstanceTelemetryColumnType} can be used interchangeably with SqlServerInstanceTelemetryColumnType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **bool** \
 * **datetime** \
 * **int** \
 * **long** \
 * **double** \
 * **string** \
 * **guid** \
 * **timespan**
 */
export type SqlServerInstanceTelemetryColumnType = string;

/** Known values of {@link AccountProvisioningMode} that the service accepts. */
export enum KnownAccountProvisioningMode {
  /** Automatic */
  Automatic = "automatic",
  /** Manual */
  Manual = "manual",
}

/**
 * Defines values for AccountProvisioningMode. \
 * {@link KnownAccountProvisioningMode} can be used interchangeably with AccountProvisioningMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **automatic** \
 * **manual**
 */
export type AccountProvisioningMode = string;

/** Known values of {@link DatabaseState} that the service accepts. */
export enum KnownDatabaseState {
  /** Online */
  Online = "Online",
  /** Restoring */
  Restoring = "Restoring",
  /** Recovering */
  Recovering = "Recovering",
  /** RecoveryPending */
  RecoveryPending = "RecoveryPending",
  /** Suspect */
  Suspect = "Suspect",
  /** Emergency */
  Emergency = "Emergency",
  /** Offline */
  Offline = "Offline",
  /** Copying */
  Copying = "Copying",
  /** OfflineSecondary */
  OfflineSecondary = "OfflineSecondary",
}

/**
 * Defines values for DatabaseState. \
 * {@link KnownDatabaseState} can be used interchangeably with DatabaseState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Online** \
 * **Restoring** \
 * **Recovering** \
 * **RecoveryPending** \
 * **Suspect** \
 * **Emergency** \
 * **Offline** \
 * **Copying** \
 * **OfflineSecondary**
 */
export type DatabaseState = string;

/** Known values of {@link RecoveryMode} that the service accepts. */
export enum KnownRecoveryMode {
  /** Full */
  Full = "Full",
  /** BulkLogged */
  BulkLogged = "Bulk-logged",
  /** Simple */
  Simple = "Simple",
}

/**
 * Defines values for RecoveryMode. \
 * {@link KnownRecoveryMode} can be used interchangeably with RecoveryMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Full** \
 * **Bulk-logged** \
 * **Simple**
 */
export type RecoveryMode = string;

/** Known values of {@link DatabaseCreateMode} that the service accepts. */
export enum KnownDatabaseCreateMode {
  /** Default */
  Default = "Default",
  /** PointInTimeRestore */
  PointInTimeRestore = "PointInTimeRestore",
}

/**
 * Defines values for DatabaseCreateMode. \
 * {@link KnownDatabaseCreateMode} can be used interchangeably with DatabaseCreateMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Default** \
 * **PointInTimeRestore**
 */
export type DatabaseCreateMode = string;
/** Defines values for SqlManagedInstanceSkuTier. */
export type SqlManagedInstanceSkuTier = "GeneralPurpose" | "BusinessCritical";
/** Defines values for DifferentialBackupHours. */
export type DifferentialBackupHours = 12 | 24;
/** Defines values for Infrastructure. */
export type Infrastructure =
  | "azure"
  | "gcp"
  | "aws"
  | "alibaba"
  | "onpremises"
  | "other";
/** Defines values for ReplicationPartnerType. */
export type ReplicationPartnerType =
  | "SQLServer"
  | "AzureSQLVM"
  | "AzureSQLManagedInstance"
  | "Unknown";

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationListResult;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export interface SqlManagedInstancesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type SqlManagedInstancesListResponse = SqlManagedInstanceListResult;

/** Optional parameters. */
export interface SqlManagedInstancesListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type SqlManagedInstancesListByResourceGroupResponse =
  SqlManagedInstanceListResult;

/** Optional parameters. */
export interface SqlManagedInstancesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type SqlManagedInstancesGetResponse = SqlManagedInstance;

/** Optional parameters. */
export interface SqlManagedInstancesCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type SqlManagedInstancesCreateResponse = SqlManagedInstance;

/** Optional parameters. */
export interface SqlManagedInstancesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface SqlManagedInstancesUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type SqlManagedInstancesUpdateResponse = SqlManagedInstance;

/** Optional parameters. */
export interface SqlManagedInstancesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type SqlManagedInstancesListNextResponse = SqlManagedInstanceListResult;

/** Optional parameters. */
export interface SqlManagedInstancesListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type SqlManagedInstancesListByResourceGroupNextResponse =
  SqlManagedInstanceListResult;

/** Optional parameters. */
export interface FailoverGroupsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type FailoverGroupsListResponse = FailoverGroupListResult;

/** Optional parameters. */
export interface FailoverGroupsCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type FailoverGroupsCreateResponse = FailoverGroupResource;

/** Optional parameters. */
export interface FailoverGroupsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface FailoverGroupsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type FailoverGroupsGetResponse = FailoverGroupResource;

/** Optional parameters. */
export interface FailoverGroupsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type FailoverGroupsListNextResponse = FailoverGroupListResult;

/** Optional parameters. */
export interface SqlServerInstancesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type SqlServerInstancesListResponse = SqlServerInstanceListResult;

/** Optional parameters. */
export interface SqlServerInstancesListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type SqlServerInstancesListByResourceGroupResponse =
  SqlServerInstanceListResult;

/** Optional parameters. */
export interface SqlServerInstancesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type SqlServerInstancesGetResponse = SqlServerInstance;

/** Optional parameters. */
export interface SqlServerInstancesCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type SqlServerInstancesCreateResponse = SqlServerInstance;

/** Optional parameters. */
export interface SqlServerInstancesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface SqlServerInstancesUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type SqlServerInstancesUpdateResponse = SqlServerInstance;

/** Optional parameters. */
export interface SqlServerInstancesGetTelemetryOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the getTelemetry operation. */
export type SqlServerInstancesGetTelemetryResponse =
  SqlServerInstanceTelemetryResponse;

/** Optional parameters. */
export interface SqlServerInstancesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type SqlServerInstancesListNextResponse = SqlServerInstanceListResult;

/** Optional parameters. */
export interface SqlServerInstancesListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type SqlServerInstancesListByResourceGroupNextResponse =
  SqlServerInstanceListResult;

/** Optional parameters. */
export interface SqlServerInstancesGetTelemetryNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getTelemetryNext operation. */
export type SqlServerInstancesGetTelemetryNextResponse =
  SqlServerInstanceTelemetryResponse;

/** Optional parameters. */
export interface DataControllersListInSubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listInSubscription operation. */
export type DataControllersListInSubscriptionResponse =
  PageOfDataControllerResource;

/** Optional parameters. */
export interface DataControllersListInGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listInGroup operation. */
export type DataControllersListInGroupResponse = PageOfDataControllerResource;

/** Optional parameters. */
export interface DataControllersPutDataControllerOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the putDataController operation. */
export type DataControllersPutDataControllerResponse = DataControllerResource;

/** Optional parameters. */
export interface DataControllersDeleteDataControllerOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DataControllersGetDataControllerOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getDataController operation. */
export type DataControllersGetDataControllerResponse = DataControllerResource;

/** Optional parameters. */
export interface DataControllersPatchDataControllerOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the patchDataController operation. */
export type DataControllersPatchDataControllerResponse = DataControllerResource;

/** Optional parameters. */
export interface DataControllersListInSubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listInSubscriptionNext operation. */
export type DataControllersListInSubscriptionNextResponse =
  PageOfDataControllerResource;

/** Optional parameters. */
export interface DataControllersListInGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listInGroupNext operation. */
export type DataControllersListInGroupNextResponse =
  PageOfDataControllerResource;

/** Optional parameters. */
export interface ActiveDirectoryConnectorsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type ActiveDirectoryConnectorsListResponse =
  ActiveDirectoryConnectorListResult;

/** Optional parameters. */
export interface ActiveDirectoryConnectorsCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type ActiveDirectoryConnectorsCreateResponse =
  ActiveDirectoryConnectorResource;

/** Optional parameters. */
export interface ActiveDirectoryConnectorsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ActiveDirectoryConnectorsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ActiveDirectoryConnectorsGetResponse =
  ActiveDirectoryConnectorResource;

/** Optional parameters. */
export interface ActiveDirectoryConnectorsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type ActiveDirectoryConnectorsListNextResponse =
  ActiveDirectoryConnectorListResult;

/** Optional parameters. */
export interface PostgresInstancesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type PostgresInstancesListResponse = PostgresInstanceListResult;

/** Optional parameters. */
export interface PostgresInstancesListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type PostgresInstancesListByResourceGroupResponse =
  PostgresInstanceListResult;

/** Optional parameters. */
export interface PostgresInstancesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type PostgresInstancesGetResponse = PostgresInstance;

/** Optional parameters. */
export interface PostgresInstancesCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type PostgresInstancesCreateResponse = PostgresInstance;

/** Optional parameters. */
export interface PostgresInstancesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface PostgresInstancesUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type PostgresInstancesUpdateResponse = PostgresInstance;

/** Optional parameters. */
export interface PostgresInstancesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type PostgresInstancesListNextResponse = PostgresInstanceListResult;

/** Optional parameters. */
export interface PostgresInstancesListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type PostgresInstancesListByResourceGroupNextResponse =
  PostgresInstanceListResult;

/** Optional parameters. */
export interface SqlServerAvailabilityGroupsCreateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the create operation. */
export type SqlServerAvailabilityGroupsCreateResponse =
  SqlServerAvailabilityGroupResource;

/** Optional parameters. */
export interface SqlServerAvailabilityGroupsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type SqlServerAvailabilityGroupsDeleteResponse =
  SqlServerAvailabilityGroupsDeleteHeaders;

/** Optional parameters. */
export interface SqlServerAvailabilityGroupsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type SqlServerAvailabilityGroupsGetResponse =
  SqlServerAvailabilityGroupResource;

/** Optional parameters. */
export interface SqlServerAvailabilityGroupsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type SqlServerAvailabilityGroupsUpdateResponse =
  SqlServerAvailabilityGroupResource;

/** Optional parameters. */
export interface SqlServerAvailabilityGroupsDetailViewOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the detailView operation. */
export type SqlServerAvailabilityGroupsDetailViewResponse =
  SqlServerAvailabilityGroupResource;

/** Optional parameters. */
export interface SqlServerAvailabilityGroupsFailoverOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the failover operation. */
export type SqlServerAvailabilityGroupsFailoverResponse =
  SqlServerAvailabilityGroupResource;

/** Optional parameters. */
export interface SqlServerAvailabilityGroupsForceFailoverAllowDataLossOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the forceFailoverAllowDataLoss operation. */
export type SqlServerAvailabilityGroupsForceFailoverAllowDataLossResponse =
  SqlServerAvailabilityGroupResource;

/** Optional parameters. */
export interface SqlServerAvailabilityGroupsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type SqlServerAvailabilityGroupsListResponse =
  ArcSqlServerAvailabilityGroupListResult;

/** Optional parameters. */
export interface SqlServerAvailabilityGroupsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type SqlServerAvailabilityGroupsListNextResponse =
  ArcSqlServerAvailabilityGroupListResult;

/** Optional parameters. */
export interface SqlServerDatabasesCreateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the create operation. */
export type SqlServerDatabasesCreateResponse = SqlServerDatabaseResource;

/** Optional parameters. */
export interface SqlServerDatabasesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type SqlServerDatabasesDeleteResponse = SqlServerDatabasesDeleteHeaders;

/** Optional parameters. */
export interface SqlServerDatabasesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type SqlServerDatabasesGetResponse = SqlServerDatabaseResource;

/** Optional parameters. */
export interface SqlServerDatabasesUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type SqlServerDatabasesUpdateResponse = SqlServerDatabaseResource;

/** Optional parameters. */
export interface SqlServerDatabasesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type SqlServerDatabasesListResponse = ArcSqlServerDatabaseListResult;

/** Optional parameters. */
export interface SqlServerDatabasesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type SqlServerDatabasesListNextResponse = ArcSqlServerDatabaseListResult;

/** Optional parameters. */
export interface AzureArcDataManagementClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
