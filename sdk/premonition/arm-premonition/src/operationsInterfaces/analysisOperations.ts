/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  Analysis,
  AnalysisOperationsListByParentOptionalParams,
  AnalysisOperationsGetOptionalParams,
  AnalysisOperationsGetResponse,
  AnalysisOperationsCreateOptionalParams,
  AnalysisOperationsCreateResponse,
  AnalysisUpdate,
  AnalysisOperationsUpdateOptionalParams,
  AnalysisOperationsUpdateResponse,
  AnalysisOperationsDeleteOptionalParams,
  AnalysisOperationsDeleteResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a AnalysisOperations. */
export interface AnalysisOperations {
  /**
   * List Analysis resources by Library
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param libraryName Name of the library
   * @param options The options parameters.
   */
  listByParent(
    resourceGroupName: string,
    libraryName: string,
    options?: AnalysisOperationsListByParentOptionalParams,
  ): PagedAsyncIterableIterator<Analysis>;
  /**
   * Get a Analysis
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param libraryName Name of the library
   * @param analysisName Name of the analysis
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    libraryName: string,
    analysisName: string,
    options?: AnalysisOperationsGetOptionalParams,
  ): Promise<AnalysisOperationsGetResponse>;
  /**
   * Create a Analysis
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param libraryName Name of the library
   * @param analysisName Name of the analysis
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  beginCreate(
    resourceGroupName: string,
    libraryName: string,
    analysisName: string,
    resource: Analysis,
    options?: AnalysisOperationsCreateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<AnalysisOperationsCreateResponse>,
      AnalysisOperationsCreateResponse
    >
  >;
  /**
   * Create a Analysis
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param libraryName Name of the library
   * @param analysisName Name of the analysis
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  beginCreateAndWait(
    resourceGroupName: string,
    libraryName: string,
    analysisName: string,
    resource: Analysis,
    options?: AnalysisOperationsCreateOptionalParams,
  ): Promise<AnalysisOperationsCreateResponse>;
  /**
   * Update a Analysis
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param libraryName Name of the library
   * @param analysisName Name of the analysis
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    libraryName: string,
    analysisName: string,
    properties: AnalysisUpdate,
    options?: AnalysisOperationsUpdateOptionalParams,
  ): Promise<AnalysisOperationsUpdateResponse>;
  /**
   * Delete a Analysis
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param libraryName Name of the library
   * @param analysisName Name of the analysis
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    libraryName: string,
    analysisName: string,
    options?: AnalysisOperationsDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<AnalysisOperationsDeleteResponse>,
      AnalysisOperationsDeleteResponse
    >
  >;
  /**
   * Delete a Analysis
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param libraryName Name of the library
   * @param analysisName Name of the analysis
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    libraryName: string,
    analysisName: string,
    options?: AnalysisOperationsDeleteOptionalParams,
  ): Promise<AnalysisOperationsDeleteResponse>;
}
