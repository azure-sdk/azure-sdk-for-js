/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  Sample,
  SampleOperationsListByParentOptionalParams,
  SampleOperationsGetOptionalParams,
  SampleOperationsGetResponse,
  SampleOperationsCreateOptionalParams,
  SampleOperationsCreateResponse,
  SampleUpdate,
  SampleOperationsUpdateOptionalParams,
  SampleOperationsUpdateResponse,
  SampleOperationsDeleteOptionalParams,
  IdentifyRequest,
  SampleOperationsIdentifyOptionalParams,
  SampleOperationsIdentifyResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a SampleOperations. */
export interface SampleOperations {
  /**
   * List Sample resources by Library
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param libraryName Name of the library
   * @param options The options parameters.
   */
  listByParent(
    resourceGroupName: string,
    libraryName: string,
    options?: SampleOperationsListByParentOptionalParams,
  ): PagedAsyncIterableIterator<Sample>;
  /**
   * Get a Sample
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param libraryName Name of the library
   * @param sampleName Name of the sample
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    libraryName: string,
    sampleName: string,
    options?: SampleOperationsGetOptionalParams,
  ): Promise<SampleOperationsGetResponse>;
  /**
   * Create a Sample
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param libraryName Name of the library
   * @param sampleName Name of the sample
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    libraryName: string,
    sampleName: string,
    resource: Sample,
    options?: SampleOperationsCreateOptionalParams,
  ): Promise<SampleOperationsCreateResponse>;
  /**
   * Update a Sample
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param libraryName Name of the library
   * @param sampleName Name of the sample
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    libraryName: string,
    sampleName: string,
    properties: SampleUpdate,
    options?: SampleOperationsUpdateOptionalParams,
  ): Promise<SampleOperationsUpdateResponse>;
  /**
   * Delete a Sample
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param libraryName Name of the library
   * @param sampleName Name of the sample
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    libraryName: string,
    sampleName: string,
    options?: SampleOperationsDeleteOptionalParams,
  ): Promise<void>;
  /**
   * Create a Metagenomics analysis of this sample
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param libraryName Name of the library
   * @param sampleName Name of the sample
   * @param body The content of the action request
   * @param options The options parameters.
   */
  beginIdentify(
    resourceGroupName: string,
    libraryName: string,
    sampleName: string,
    body: IdentifyRequest,
    options?: SampleOperationsIdentifyOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<SampleOperationsIdentifyResponse>,
      SampleOperationsIdentifyResponse
    >
  >;
  /**
   * Create a Metagenomics analysis of this sample
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param libraryName Name of the library
   * @param sampleName Name of the sample
   * @param body The content of the action request
   * @param options The options parameters.
   */
  beginIdentifyAndWait(
    resourceGroupName: string,
    libraryName: string,
    sampleName: string,
    body: IdentifyRequest,
    options?: SampleOperationsIdentifyOptionalParams,
  ): Promise<SampleOperationsIdentifyResponse>;
}
