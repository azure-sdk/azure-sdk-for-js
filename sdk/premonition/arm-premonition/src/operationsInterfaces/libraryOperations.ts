/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  Library,
  LibraryOperationsListBySubscriptionOptionalParams,
  LibraryOperationsListByResourceGroupOptionalParams,
  LibraryOperationsGetOptionalParams,
  LibraryOperationsGetResponse,
  LibraryOperationsCreateOptionalParams,
  LibraryOperationsCreateResponse,
  LibraryUpdate,
  LibraryOperationsUpdateOptionalParams,
  LibraryOperationsUpdateResponse,
  LibraryOperationsDeleteOptionalParams,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a LibraryOperations. */
export interface LibraryOperations {
  /**
   * List Library resources by subscription ID
   * @param options The options parameters.
   */
  listBySubscription(
    options?: LibraryOperationsListBySubscriptionOptionalParams,
  ): PagedAsyncIterableIterator<Library>;
  /**
   * List Library resources by resource group
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: LibraryOperationsListByResourceGroupOptionalParams,
  ): PagedAsyncIterableIterator<Library>;
  /**
   * Get a Library
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param libraryName Name of the library
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    libraryName: string,
    options?: LibraryOperationsGetOptionalParams,
  ): Promise<LibraryOperationsGetResponse>;
  /**
   * Create a Library
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param libraryName Name of the library
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    libraryName: string,
    resource: Library,
    options?: LibraryOperationsCreateOptionalParams,
  ): Promise<LibraryOperationsCreateResponse>;
  /**
   * Update a Library
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param libraryName Name of the library
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    libraryName: string,
    properties: LibraryUpdate,
    options?: LibraryOperationsUpdateOptionalParams,
  ): Promise<LibraryOperationsUpdateResponse>;
  /**
   * Delete a Library
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param libraryName Name of the library
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    libraryName: string,
    options?: LibraryOperationsDeleteOptionalParams,
  ): Promise<void>;
}
