/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { AnalysisOperations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MicrosoftPremonitionInsights } from "../microsoftPremonitionInsights";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  Analysis,
  AnalysisOperationsListByParentNextOptionalParams,
  AnalysisOperationsListByParentOptionalParams,
  AnalysisOperationsListByParentResponse,
  AnalysisOperationsGetOptionalParams,
  AnalysisOperationsGetResponse,
  AnalysisOperationsCreateOptionalParams,
  AnalysisOperationsCreateResponse,
  AnalysisUpdate,
  AnalysisOperationsUpdateOptionalParams,
  AnalysisOperationsUpdateResponse,
  AnalysisOperationsDeleteOptionalParams,
  AnalysisOperationsDeleteResponse,
  AnalysisOperationsListByParentNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing AnalysisOperations operations. */
export class AnalysisOperationsImpl implements AnalysisOperations {
  private readonly client: MicrosoftPremonitionInsights;

  /**
   * Initialize a new instance of the class AnalysisOperations class.
   * @param client Reference to the service client
   */
  constructor(client: MicrosoftPremonitionInsights) {
    this.client = client;
  }

  /**
   * List Analysis resources by Library
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param libraryName Name of the library
   * @param options The options parameters.
   */
  public listByParent(
    resourceGroupName: string,
    libraryName: string,
    options?: AnalysisOperationsListByParentOptionalParams,
  ): PagedAsyncIterableIterator<Analysis> {
    const iter = this.listByParentPagingAll(
      resourceGroupName,
      libraryName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByParentPagingPage(
          resourceGroupName,
          libraryName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByParentPagingPage(
    resourceGroupName: string,
    libraryName: string,
    options?: AnalysisOperationsListByParentOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<Analysis[]> {
    let result: AnalysisOperationsListByParentResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByParent(
        resourceGroupName,
        libraryName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByParentNext(
        resourceGroupName,
        libraryName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByParentPagingAll(
    resourceGroupName: string,
    libraryName: string,
    options?: AnalysisOperationsListByParentOptionalParams,
  ): AsyncIterableIterator<Analysis> {
    for await (const page of this.listByParentPagingPage(
      resourceGroupName,
      libraryName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List Analysis resources by Library
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param libraryName Name of the library
   * @param options The options parameters.
   */
  private _listByParent(
    resourceGroupName: string,
    libraryName: string,
    options?: AnalysisOperationsListByParentOptionalParams,
  ): Promise<AnalysisOperationsListByParentResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, libraryName, options },
      listByParentOperationSpec,
    );
  }

  /**
   * Get a Analysis
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param libraryName Name of the library
   * @param analysisName Name of the analysis
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    libraryName: string,
    analysisName: string,
    options?: AnalysisOperationsGetOptionalParams,
  ): Promise<AnalysisOperationsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, libraryName, analysisName, options },
      getOperationSpec,
    );
  }

  /**
   * Create a Analysis
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param libraryName Name of the library
   * @param analysisName Name of the analysis
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreate(
    resourceGroupName: string,
    libraryName: string,
    analysisName: string,
    resource: Analysis,
    options?: AnalysisOperationsCreateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<AnalysisOperationsCreateResponse>,
      AnalysisOperationsCreateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<AnalysisOperationsCreateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, libraryName, analysisName, resource, options },
      spec: createOperationSpec,
    });
    const poller = await createHttpPoller<
      AnalysisOperationsCreateResponse,
      OperationState<AnalysisOperationsCreateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create a Analysis
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param libraryName Name of the library
   * @param analysisName Name of the analysis
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreateAndWait(
    resourceGroupName: string,
    libraryName: string,
    analysisName: string,
    resource: Analysis,
    options?: AnalysisOperationsCreateOptionalParams,
  ): Promise<AnalysisOperationsCreateResponse> {
    const poller = await this.beginCreate(
      resourceGroupName,
      libraryName,
      analysisName,
      resource,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Update a Analysis
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param libraryName Name of the library
   * @param analysisName Name of the analysis
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    libraryName: string,
    analysisName: string,
    properties: AnalysisUpdate,
    options?: AnalysisOperationsUpdateOptionalParams,
  ): Promise<AnalysisOperationsUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, libraryName, analysisName, properties, options },
      updateOperationSpec,
    );
  }

  /**
   * Delete a Analysis
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param libraryName Name of the library
   * @param analysisName Name of the analysis
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    libraryName: string,
    analysisName: string,
    options?: AnalysisOperationsDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<AnalysisOperationsDeleteResponse>,
      AnalysisOperationsDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<AnalysisOperationsDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, libraryName, analysisName, options },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<
      AnalysisOperationsDeleteResponse,
      OperationState<AnalysisOperationsDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete a Analysis
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param libraryName Name of the library
   * @param analysisName Name of the analysis
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    libraryName: string,
    analysisName: string,
    options?: AnalysisOperationsDeleteOptionalParams,
  ): Promise<AnalysisOperationsDeleteResponse> {
    const poller = await this.beginDelete(
      resourceGroupName,
      libraryName,
      analysisName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * ListByParentNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param libraryName Name of the library
   * @param nextLink The nextLink from the previous successful call to the ListByParent method.
   * @param options The options parameters.
   */
  private _listByParentNext(
    resourceGroupName: string,
    libraryName: string,
    nextLink: string,
    options?: AnalysisOperationsListByParentNextOptionalParams,
  ): Promise<AnalysisOperationsListByParentNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, libraryName, nextLink, options },
      listByParentNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByParentOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Premonition/libraries/{libraryName}/analyses",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AnalysisListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.libraryName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Premonition/libraries/{libraryName}/analyses/{analysisName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Analysis,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.libraryName,
    Parameters.analysisName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Premonition/libraries/{libraryName}/analyses/{analysisName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Analysis,
    },
    201: {
      bodyMapper: Mappers.Analysis,
    },
    202: {
      bodyMapper: Mappers.Analysis,
    },
    204: {
      bodyMapper: Mappers.Analysis,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.resource1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.libraryName,
    Parameters.analysisName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Premonition/libraries/{libraryName}/analyses/{analysisName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Analysis,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.properties1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.libraryName,
    Parameters.analysisName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Premonition/libraries/{libraryName}/analyses/{analysisName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.AnalysisOperationsDeleteHeaders,
    },
    201: {
      headersMapper: Mappers.AnalysisOperationsDeleteHeaders,
    },
    202: {
      headersMapper: Mappers.AnalysisOperationsDeleteHeaders,
    },
    204: {
      headersMapper: Mappers.AnalysisOperationsDeleteHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.libraryName,
    Parameters.analysisName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByParentNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AnalysisListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.libraryName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
