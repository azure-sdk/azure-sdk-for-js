/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      isDataAction: {
        serializedName: "isDataAction",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay",
        },
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      actionType: {
        serializedName: "actionType",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail",
        },
      },
    },
  },
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail",
            },
          },
        },
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo",
            },
          },
        },
      },
    },
  },
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } },
        },
      },
    },
  },
};

export const LibraryListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LibraryListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Library",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const LibraryProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LibraryProperties",
    modelProperties: {
      container: {
        serializedName: "container",
        required: true,
        type: {
          name: "String",
        },
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData",
        },
      },
    },
  },
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String",
        },
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String",
        },
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime",
        },
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String",
        },
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String",
        },
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const LibraryPropertiesUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LibraryPropertiesUpdate",
    modelProperties: {
      container: {
        serializedName: "container",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AnalysisListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AnalysisListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Analysis",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AnalysisProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AnalysisProperties",
    modelProperties: {
      samples: {
        serializedName: "samples",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      settings: {
        serializedName: "settings",
        type: {
          name: "Composite",
          className: "AnalysisSettings",
        },
      },
      startedAt: {
        serializedName: "startedAt",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      finishedAt: {
        serializedName: "finishedAt",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      result: {
        serializedName: "result",
        type: {
          name: "Composite",
          className: "AnalysisResult",
        },
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "AnalysisPropertiesError",
        },
      },
    },
  },
};

export const AnalysisSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AnalysisSettings",
    uberParent: "AnalysisSettings",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind",
    },
    modelProperties: {
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AnalysisResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AnalysisResult",
    uberParent: "AnalysisResult",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind",
    },
    modelProperties: {
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String",
        },
      },
      files: {
        serializedName: "files",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const AnalysisPropertiesError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AnalysisPropertiesError",
    modelProperties: {
      code: {
        serializedName: "code",
        required: true,
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SampleListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SampleListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Sample",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SampleProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SampleProperties",
    modelProperties: {
      description: {
        serializedName: "description",
        type: {
          name: "String",
        },
      },
      paths: {
        serializedName: "paths",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SamplePropertiesUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SamplePropertiesUpdate",
    modelProperties: {
      description: {
        serializedName: "description",
        type: {
          name: "String",
        },
      },
      paths: {
        serializedName: "paths",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const IdentifyRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IdentifyRequest",
    modelProperties: {
      name: {
        constraints: {
          Pattern: new RegExp("^[\\w\\-]{3,24}$"),
        },
        serializedName: "name",
        required: true,
        type: {
          name: "String",
        },
      },
      settings: {
        serializedName: "settings",
        type: {
          name: "Composite",
          className: "MetagenomicsAnalysisSettings",
        },
      },
    },
  },
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AzureResourceManagerCommonTypesTrackedResourceUpdate: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "AzureResourceManagerCommonTypesTrackedResourceUpdate",
      modelProperties: {
        ...Resource.type.modelProperties,
        tags: {
          serializedName: "tags",
          type: {
            name: "Dictionary",
            value: { type: { name: "String" } },
          },
        },
      },
    },
  };

export const MetagenomicsAnalysisSettings: coreClient.CompositeMapper = {
  serializedName: "Metagenomics",
  type: {
    name: "Composite",
    className: "MetagenomicsAnalysisSettings",
    uberParent: "AnalysisSettings",
    polymorphicDiscriminator: AnalysisSettings.type.polymorphicDiscriminator,
    modelProperties: {
      ...AnalysisSettings.type.modelProperties,
      taxonomyVersion: {
        serializedName: "taxonomyVersion",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const MetagenomicsAnalysisResult: coreClient.CompositeMapper = {
  serializedName: "Metagenomics",
  type: {
    name: "Composite",
    className: "MetagenomicsAnalysisResult",
    uberParent: "AnalysisResult",
    polymorphicDiscriminator: AnalysisResult.type.polymorphicDiscriminator,
    modelProperties: {
      ...AnalysisResult.type.modelProperties,
      taxonomyVersion: {
        serializedName: "taxonomyVersion",
        required: true,
        type: {
          name: "String",
        },
      },
      totalReads: {
        serializedName: "totalReads",
        required: true,
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const Library: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Library",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "LibraryProperties",
        },
      },
    },
  },
};

export const Analysis: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Analysis",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "AnalysisProperties",
        },
      },
    },
  },
};

export const Sample: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Sample",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "SampleProperties",
        },
      },
    },
  },
};

export const LibraryUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LibraryUpdate",
    modelProperties: {
      ...AzureResourceManagerCommonTypesTrackedResourceUpdate.type
        .modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "LibraryPropertiesUpdate",
        },
      },
    },
  },
};

export const AnalysisUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AnalysisUpdate",
    modelProperties: {
      ...AzureResourceManagerCommonTypesTrackedResourceUpdate.type
        .modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } },
        },
      },
    },
  },
};

export const SampleUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SampleUpdate",
    modelProperties: {
      ...AzureResourceManagerCommonTypesTrackedResourceUpdate.type
        .modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "SamplePropertiesUpdate",
        },
      },
    },
  },
};

export const AnalysisOperationsCreateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AnalysisOperationsCreateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const AnalysisOperationsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AnalysisOperationsDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const SampleOperationsIdentifyHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SampleOperationsIdentifyHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export let discriminators = {
  AnalysisSettings: AnalysisSettings,
  AnalysisResult: AnalysisResult,
  "AnalysisSettings.Metagenomics": MetagenomicsAnalysisSettings,
  "AnalysisResult.Metagenomics": MetagenomicsAnalysisResult,
};
