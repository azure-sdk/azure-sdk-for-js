/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter,
} from "@azure/core-client";
import {
  Library as LibraryMapper,
  LibraryUpdate as LibraryUpdateMapper,
  Analysis as AnalysisMapper,
  AnalysisUpdate as AnalysisUpdateMapper,
  Sample as SampleMapper,
  SampleUpdate as SampleUpdateMapper,
  IdentifyRequest as IdentifyRequestMapper,
} from "../models/mappers";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String",
    },
  },
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2024-09-01-preview",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String",
    },
  },
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "Uuid",
    },
  },
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    constraints: {
      MaxLength: 90,
      MinLength: 1,
    },
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const libraryName: OperationURLParameter = {
  parameterPath: "libraryName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[\\w\\-]{3,24}$"),
    },
    serializedName: "libraryName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String",
    },
  },
};

export const resource: OperationParameter = {
  parameterPath: "resource",
  mapper: LibraryMapper,
};

export const properties: OperationParameter = {
  parameterPath: "properties",
  mapper: LibraryUpdateMapper,
};

export const analysisName: OperationURLParameter = {
  parameterPath: "analysisName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[\\w\\-]{3,24}$"),
    },
    serializedName: "analysisName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource1: OperationParameter = {
  parameterPath: "resource",
  mapper: AnalysisMapper,
};

export const properties1: OperationParameter = {
  parameterPath: "properties",
  mapper: AnalysisUpdateMapper,
};

export const sampleName: OperationURLParameter = {
  parameterPath: "sampleName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[\\w\\-]{3,24}$"),
    },
    serializedName: "sampleName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource2: OperationParameter = {
  parameterPath: "resource",
  mapper: SampleMapper,
};

export const properties2: OperationParameter = {
  parameterPath: "properties",
  mapper: SampleUpdateMapper,
};

export const body: OperationParameter = {
  parameterPath: "body",
  mapper: IdentifyRequestMapper,
};
