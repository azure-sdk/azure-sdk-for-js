/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  SubscriptionQuotaAllocations,
  GroupQuotaSubscriptionQuotaAllocationListOptionalParams,
  GroupQuotaSubscriptionQuotaAllocationCreateOrUpdateOptionalParams,
  GroupQuotaSubscriptionQuotaAllocationCreateOrUpdateResponse,
  GroupQuotaSubscriptionQuotaAllocationUpdateOptionalParams,
  GroupQuotaSubscriptionQuotaAllocationUpdateResponse,
  GroupQuotaSubscriptionQuotaAllocationGetOptionalParams,
  GroupQuotaSubscriptionQuotaAllocationGetResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a GroupQuotaSubscriptionQuotaAllocation. */
export interface GroupQuotaSubscriptionQuotaAllocation {
  /**
   * Gets all the quota allocated to a subscription for the specific Resource Provider, Location. This
   * will include the GroupQuota and total quota allocated to the subscription. Only the Group quota
   * allocated to the subscription can be allocated back to the MG Group Quota. Use the $filter parameter
   * to filter out the specific resource based on the ResourceProvider/Location. $filter is a required
   * parameter.
   * @param managementGroupId Management Group Id.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param filter | Field                    | Supported operators
   *               |---------------------|------------------------
   *
   *               |provider  eq {resourceProvider}  and location eq {location}
   *                Example: $filter= provider eq Microsoft.Compute and location eq eastus
   * @param options The options parameters.
   */
  list(
    managementGroupId: string,
    groupQuotaName: string,
    filter: string,
    options?: GroupQuotaSubscriptionQuotaAllocationListOptionalParams,
  ): PagedAsyncIterableIterator<SubscriptionQuotaAllocations>;
  /**
   * Request to assign a specific resource quota from group quota to a specific Subscription. The
   * subscriptions can also reduce the quota allocated to subscription to give back the group back to MG.
   * The quota assignment back to MG group quota is limited by the GroupQuota allocated to subscription,
   * which means the maximum unused quota allocated back to MG group quota will be the group quota
   * allocated to the subscriptions. So, this API can used to assign Quota to subscriptions and assign
   * back unused quota, which was previously allocated from MG group quota to subscription.
   * @param managementGroupId Management Group Id.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param resourceName Resource name.
   * @param allocateQuotaRequest Quota requests payload.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    managementGroupId: string,
    groupQuotaName: string,
    resourceName: string,
    allocateQuotaRequest: SubscriptionQuotaAllocations,
    options?: GroupQuotaSubscriptionQuotaAllocationCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<GroupQuotaSubscriptionQuotaAllocationCreateOrUpdateResponse>,
      GroupQuotaSubscriptionQuotaAllocationCreateOrUpdateResponse
    >
  >;
  /**
   * Request to assign a specific resource quota from group quota to a specific Subscription. The
   * subscriptions can also reduce the quota allocated to subscription to give back the group back to MG.
   * The quota assignment back to MG group quota is limited by the GroupQuota allocated to subscription,
   * which means the maximum unused quota allocated back to MG group quota will be the group quota
   * allocated to the subscriptions. So, this API can used to assign Quota to subscriptions and assign
   * back unused quota, which was previously allocated from MG group quota to subscription.
   * @param managementGroupId Management Group Id.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param resourceName Resource name.
   * @param allocateQuotaRequest Quota requests payload.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    managementGroupId: string,
    groupQuotaName: string,
    resourceName: string,
    allocateQuotaRequest: SubscriptionQuotaAllocations,
    options?: GroupQuotaSubscriptionQuotaAllocationCreateOrUpdateOptionalParams,
  ): Promise<GroupQuotaSubscriptionQuotaAllocationCreateOrUpdateResponse>;
  /**
   * Request to assign quota from group quota to a specific Subscription. The subscriptions and reduce
   * the quota allocated to subscription to give back the group back to MG. The quota assignment back to
   * MG group quota is limited by the GroupQuota allocated to subscription, using this API. So, this API
   * can used to assign Quota to subscriptions and assign back unused quota, which was previously
   * allocated from MG group quota to subscription(s).
   * @param managementGroupId Management Group Id.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param resourceName Resource name.
   * @param allocateQuotaRequest Quota requests payload.
   * @param options The options parameters.
   */
  beginUpdate(
    managementGroupId: string,
    groupQuotaName: string,
    resourceName: string,
    allocateQuotaRequest: SubscriptionQuotaAllocations,
    options?: GroupQuotaSubscriptionQuotaAllocationUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<GroupQuotaSubscriptionQuotaAllocationUpdateResponse>,
      GroupQuotaSubscriptionQuotaAllocationUpdateResponse
    >
  >;
  /**
   * Request to assign quota from group quota to a specific Subscription. The subscriptions and reduce
   * the quota allocated to subscription to give back the group back to MG. The quota assignment back to
   * MG group quota is limited by the GroupQuota allocated to subscription, using this API. So, this API
   * can used to assign Quota to subscriptions and assign back unused quota, which was previously
   * allocated from MG group quota to subscription(s).
   * @param managementGroupId Management Group Id.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param resourceName Resource name.
   * @param allocateQuotaRequest Quota requests payload.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    managementGroupId: string,
    groupQuotaName: string,
    resourceName: string,
    allocateQuotaRequest: SubscriptionQuotaAllocations,
    options?: GroupQuotaSubscriptionQuotaAllocationUpdateOptionalParams,
  ): Promise<GroupQuotaSubscriptionQuotaAllocationUpdateResponse>;
  /**
   * Gets Quota allocated to a subscription for the specific Resource Provider, Location, ResourceName.
   * This will include the GroupQuota and total quota allocated to the subscription. Only the Group quota
   * allocated to the subscription can be allocated back to the MG Group Quota.
   * @param managementGroupId Management Group Id.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param resourceName Resource name.
   * @param filter | Field                    | Supported operators
   *               |---------------------|------------------------
   *
   *               |provider  eq {resourceProvider}  and location eq {location}
   *                Example: $filter= provider eq Microsoft.Compute and location eq eastus
   * @param options The options parameters.
   */
  get(
    managementGroupId: string,
    groupQuotaName: string,
    resourceName: string,
    filter: string,
    options?: GroupQuotaSubscriptionQuotaAllocationGetOptionalParams,
  ): Promise<GroupQuotaSubscriptionQuotaAllocationGetResponse>;
}
