/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  GroupQuotaLimit,
  GroupQuotaLimitsListOptionalParams,
  GroupQuotaLimitsCreateOrUpdateOptionalParams,
  GroupQuotaLimitsCreateOrUpdateResponse,
  GroupQuotaLimitsUpdateOptionalParams,
  GroupQuotaLimitsUpdateResponse,
  GroupQuotaLimitsGetOptionalParams,
  GroupQuotaLimitsGetResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a GroupQuotaLimits. */
export interface GroupQuotaLimits {
  /**
   * Gets the List of resources groupQuotaLimits for the MGId, based on the filter. The filter can be -
   * $filter= provider eq Microsoft.Compute and location eq eastus. The list elements will be same as the
   * Get API - It will include the limits, availableLimits, AllocatedToSubscriptions: Quotas allocated to
   * subscriptions from the group quota.
   * @param managementGroupId Management Group Id.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param filter | Field                    | Supported operators
   *               |---------------------|------------------------
   *
   *               |provider  eq {resourceProvider}  and location eq {location}
   *                Example: $filter= provider eq Microsoft.Compute and location eq eastus
   * @param options The options parameters.
   */
  list(
    managementGroupId: string,
    groupQuotaName: string,
    filter: string,
    options?: GroupQuotaLimitsListOptionalParams,
  ): PagedAsyncIterableIterator<GroupQuotaLimit>;
  /**
   * Updates the GroupQuotaLimits for the specific resource for a specific resource based on the
   * resourceProviderScope. The resourceProviderScope will be provided in the request body, as
   * resourceProviderScope. Example of resourceProviderScope for compute -
   * /providers/{Microsoft.Compute}/locations/{eastus}. GroupQuotaLimitRequestId will be returned by the
   * Service in the response. The status can be polled periodically. The status Async polling is using
   * standards defined at -
   * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
   * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified
   * in retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI
   * will change to Get URI for groupQuotaRequests and full details can be checked from the Get API for
   * groupQuotaRequests.
   * @param managementGroupId Management Group Id.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param resourceName Resource name.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    managementGroupId: string,
    groupQuotaName: string,
    resourceName: string,
    options?: GroupQuotaLimitsCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<GroupQuotaLimitsCreateOrUpdateResponse>,
      GroupQuotaLimitsCreateOrUpdateResponse
    >
  >;
  /**
   * Updates the GroupQuotaLimits for the specific resource for a specific resource based on the
   * resourceProviderScope. The resourceProviderScope will be provided in the request body, as
   * resourceProviderScope. Example of resourceProviderScope for compute -
   * /providers/{Microsoft.Compute}/locations/{eastus}. GroupQuotaLimitRequestId will be returned by the
   * Service in the response. The status can be polled periodically. The status Async polling is using
   * standards defined at -
   * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
   * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified
   * in retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI
   * will change to Get URI for groupQuotaRequests and full details can be checked from the Get API for
   * groupQuotaRequests.
   * @param managementGroupId Management Group Id.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param resourceName Resource name.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    managementGroupId: string,
    groupQuotaName: string,
    resourceName: string,
    options?: GroupQuotaLimitsCreateOrUpdateOptionalParams,
  ): Promise<GroupQuotaLimitsCreateOrUpdateResponse>;
  /**
   * Updates the GroupQuotaLimits for the specific resource. The resourceProviderScope will be provided
   * in the request body, as resourceProviderScope field. A groupQuotaLimitRequestId will be returned by
   * the Service. The status will be updated periodically. The status Async polling is using standards
   * defined at -
   * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
   * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified
   * in retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI
   * will change to Get URI and full details can be checked.
   * @param managementGroupId Management Group Id.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param resourceName Resource name.
   * @param options The options parameters.
   */
  beginUpdate(
    managementGroupId: string,
    groupQuotaName: string,
    resourceName: string,
    options?: GroupQuotaLimitsUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<GroupQuotaLimitsUpdateResponse>,
      GroupQuotaLimitsUpdateResponse
    >
  >;
  /**
   * Updates the GroupQuotaLimits for the specific resource. The resourceProviderScope will be provided
   * in the request body, as resourceProviderScope field. A groupQuotaLimitRequestId will be returned by
   * the Service. The status will be updated periodically. The status Async polling is using standards
   * defined at -
   * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
   * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified
   * in retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI
   * will change to Get URI and full details can be checked.
   * @param managementGroupId Management Group Id.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param resourceName Resource name.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    managementGroupId: string,
    groupQuotaName: string,
    resourceName: string,
    options?: GroupQuotaLimitsUpdateOptionalParams,
  ): Promise<GroupQuotaLimitsUpdateResponse>;
  /**
   * Gets the resource groupQuotaLimits for the MGId. The resourceProviderScope will be included in the
   * filer query parameter. The filter can be - $filter= provider eq Microsoft.Compute and location eq
   * eastus. The $filter is a required parameter to filter out the specific resource based on the
   * ResourceProvider/Location. It will include the limits, availableLimits, AllocatedToSubscriptions:
   * Quotas allocated to subscriptions from the group quota.
   * @param managementGroupId Management Group Id.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param resourceName Resource name.
   * @param filter | Field                    | Supported operators
   *               |---------------------|------------------------
   *
   *               |provider  eq {resourceProvider}  and location eq {location}
   *                Example: $filter= provider eq Microsoft.Compute and location eq eastus
   * @param options The options parameters.
   */
  get(
    managementGroupId: string,
    groupQuotaName: string,
    resourceName: string,
    filter: string,
    options?: GroupQuotaLimitsGetOptionalParams,
  ): Promise<GroupQuotaLimitsGetResponse>;
}
