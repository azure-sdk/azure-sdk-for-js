/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  GroupQuotaLimit,
  GroupQuotaLimitsListOptionalParams,
  GroupQuotaLimitsCreateOrUpdateOptionalParams,
  GroupQuotaLimitsCreateOrUpdateResponse,
  GroupQuotaLimitsUpdateOptionalParams,
  GroupQuotaLimitsUpdateResponse,
  GroupQuotaLimitsGetOptionalParams,
  GroupQuotaLimitsGetResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a GroupQuotaLimits. */
export interface GroupQuotaLimits {
  /**
   * Gets the List of resources groupQuotaLimits for the MGId, based on the scope. The scope can be -
   * providers/Microsoft.Compute/locations/<eastus>. The list elements will be same as the Get API - It
   * will include the limits, availableLimits, assignedToSubscriptions: Quotas assigned to subscriptions
   * from the groupQuota.
   * @param mgId Management Group Id.
   * @param resourceProviderScope Scope for the resource. Some resources do not require location
   *                              parameter, such as CosmosDb, so can be skipped in scope. For most of the resources require -
   *                              providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires
   *                              batchAccountName -
   *                              providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension
   *                              enables to specify resources for any all the RPs.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param options The options parameters.
   */
  list(
    mgId: string,
    resourceProviderScope: string,
    groupQuotaName: string,
    options?: GroupQuotaLimitsListOptionalParams
  ): PagedAsyncIterableIterator<GroupQuotaLimit>;
  /**
   * Updates the GroupQuotaLimits for the specific resource under a Management Group. A
   * groupQuotaLimitRequestId will be returned by the Service. The status can be polled periodically. The
   * status Async polling is using standards defined at -
   * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
   * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified
   * in retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI
   * will change to Get URI and full details can be checked.
   * @param mgId Management Group Id.
   * @param resourceProviderScope Scope for the resource. Some resources do not require location
   *                              parameter, such as CosmosDb, so can be skipped in scope. For most of the resources require -
   *                              providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires
   *                              batchAccountName -
   *                              providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension
   *                              enables to specify resources for any all the RPs.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param resourceName Resource name.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    mgId: string,
    resourceProviderScope: string,
    groupQuotaName: string,
    resourceName: string,
    options?: GroupQuotaLimitsCreateOrUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<GroupQuotaLimitsCreateOrUpdateResponse>,
      GroupQuotaLimitsCreateOrUpdateResponse
    >
  >;
  /**
   * Updates the GroupQuotaLimits for the specific resource under a Management Group. A
   * groupQuotaLimitRequestId will be returned by the Service. The status can be polled periodically. The
   * status Async polling is using standards defined at -
   * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
   * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified
   * in retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI
   * will change to Get URI and full details can be checked.
   * @param mgId Management Group Id.
   * @param resourceProviderScope Scope for the resource. Some resources do not require location
   *                              parameter, such as CosmosDb, so can be skipped in scope. For most of the resources require -
   *                              providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires
   *                              batchAccountName -
   *                              providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension
   *                              enables to specify resources for any all the RPs.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param resourceName Resource name.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    mgId: string,
    resourceProviderScope: string,
    groupQuotaName: string,
    resourceName: string,
    options?: GroupQuotaLimitsCreateOrUpdateOptionalParams
  ): Promise<GroupQuotaLimitsCreateOrUpdateResponse>;
  /**
   * Updates the GroupQuotaLimits for the specific resource under a Management Group. A
   * groupQuotaLimitRequestId will be returned by the Service. The status will be updated periodically.
   * The status Async polling is using standards defined at -
   * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
   * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified
   * in retry-after header. Once the operation gets to terminal state - Succeeded | Failed,then the URI
   * will change to Get URI and full details can be checked.
   * @param mgId Management Group Id.
   * @param resourceProviderScope Scope for the resource. Some resources do not require location
   *                              parameter, such as CosmosDb, so can be skipped in scope. For most of the resources require -
   *                              providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires
   *                              batchAccountName -
   *                              providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension
   *                              enables to specify resources for any all the RPs.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param resourceName Resource name.
   * @param options The options parameters.
   */
  beginUpdate(
    mgId: string,
    resourceProviderScope: string,
    groupQuotaName: string,
    resourceName: string,
    options?: GroupQuotaLimitsUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<GroupQuotaLimitsUpdateResponse>,
      GroupQuotaLimitsUpdateResponse
    >
  >;
  /**
   * Updates the GroupQuotaLimits for the specific resource under a Management Group. A
   * groupQuotaLimitRequestId will be returned by the Service. The status will be updated periodically.
   * The status Async polling is using standards defined at -
   * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
   * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified
   * in retry-after header. Once the operation gets to terminal state - Succeeded | Failed,then the URI
   * will change to Get URI and full details can be checked.
   * @param mgId Management Group Id.
   * @param resourceProviderScope Scope for the resource. Some resources do not require location
   *                              parameter, such as CosmosDb, so can be skipped in scope. For most of the resources require -
   *                              providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires
   *                              batchAccountName -
   *                              providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension
   *                              enables to specify resources for any all the RPs.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param resourceName Resource name.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    mgId: string,
    resourceProviderScope: string,
    groupQuotaName: string,
    resourceName: string,
    options?: GroupQuotaLimitsUpdateOptionalParams
  ): Promise<GroupQuotaLimitsUpdateResponse>;
  /**
   * Gets the resource groupQuotaLimits for the MGId. It will include the limits, availableLimits,
   * assignedToSubscriptions: Quotas assigned to subscriptions from the groupQuota.
   * @param mgId Management Group Id.
   * @param resourceProviderScope Scope for the resource. Some resources do not require location
   *                              parameter, such as CosmosDb, so can be skipped in scope. For most of the resources require -
   *                              providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires
   *                              batchAccountName -
   *                              providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension
   *                              enables to specify resources for any all the RPs.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param resourceName Resource name.
   * @param options The options parameters.
   */
  get(
    mgId: string,
    resourceProviderScope: string,
    groupQuotaName: string,
    resourceName: string,
    options?: GroupQuotaLimitsGetOptionalParams
  ): Promise<GroupQuotaLimitsGetResponse>;
}
