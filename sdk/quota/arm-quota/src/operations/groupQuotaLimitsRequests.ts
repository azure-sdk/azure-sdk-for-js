/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { GroupQuotaLimitsRequests } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureQuotaExtensionAPI } from "../azureQuotaExtensionAPI";
import {
  SubmittedResourceRequestStatus,
  GroupQuotaLimitsRequestsListNextOptionalParams,
  GroupQuotaLimitsRequestsListOptionalParams,
  GroupQuotaLimitsRequestsListResponse,
  GroupQuotaLimitsRequestsGetOptionalParams,
  GroupQuotaLimitsRequestsGetResponse,
  GroupQuotaLimitsRequestsListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing GroupQuotaLimitsRequests operations. */
export class GroupQuotaLimitsRequestsImpl implements GroupQuotaLimitsRequests {
  private readonly client: AzureQuotaExtensionAPI;

  /**
   * Initialize a new instance of the class GroupQuotaLimitsRequests class.
   * @param client Reference to the service client
   */
  constructor(client: AzureQuotaExtensionAPI) {
    this.client = client;
  }

  /**
   * List API to check the status of a GroupQuota requests by requestId. The groupQuotaRequest history is
   * maintained for 1 year.
   * @param mgId Management Group Id.
   * @param resourceProviderScope Scope for the resource. Some resources do not require location
   *                              parameter, such as CosmosDb, so can be skipped in scope. For most of the resources require -
   *                              providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires
   *                              batchAccountName -
   *                              providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension
   *                              enables to specify resources for any all the RPs.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param options The options parameters.
   */
  public list(
    mgId: string,
    resourceProviderScope: string,
    groupQuotaName: string,
    options?: GroupQuotaLimitsRequestsListOptionalParams
  ): PagedAsyncIterableIterator<SubmittedResourceRequestStatus> {
    const iter = this.listPagingAll(
      mgId,
      resourceProviderScope,
      groupQuotaName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(
          mgId,
          resourceProviderScope,
          groupQuotaName,
          options,
          settings
        );
      }
    };
  }

  private async *listPagingPage(
    mgId: string,
    resourceProviderScope: string,
    groupQuotaName: string,
    options?: GroupQuotaLimitsRequestsListOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<SubmittedResourceRequestStatus[]> {
    let result: GroupQuotaLimitsRequestsListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(
        mgId,
        resourceProviderScope,
        groupQuotaName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        mgId,
        resourceProviderScope,
        groupQuotaName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    mgId: string,
    resourceProviderScope: string,
    groupQuotaName: string,
    options?: GroupQuotaLimitsRequestsListOptionalParams
  ): AsyncIterableIterator<SubmittedResourceRequestStatus> {
    for await (const page of this.listPagingPage(
      mgId,
      resourceProviderScope,
      groupQuotaName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List API to check the status of a GroupQuota requests by requestId. The groupQuotaRequest history is
   * maintained for 1 year.
   * @param mgId Management Group Id.
   * @param resourceProviderScope Scope for the resource. Some resources do not require location
   *                              parameter, such as CosmosDb, so can be skipped in scope. For most of the resources require -
   *                              providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires
   *                              batchAccountName -
   *                              providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension
   *                              enables to specify resources for any all the RPs.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param options The options parameters.
   */
  private _list(
    mgId: string,
    resourceProviderScope: string,
    groupQuotaName: string,
    options?: GroupQuotaLimitsRequestsListOptionalParams
  ): Promise<GroupQuotaLimitsRequestsListResponse> {
    return this.client.sendOperationRequest(
      { mgId, resourceProviderScope, groupQuotaName, options },
      listOperationSpec
    );
  }

  /**
   * Get API to check the status of a GroupQuota request by requestId.  Use the polling API -
   * OperationsStatus URI specified in Azure-AsyncOperation header field, with retry-after duration in
   * seconds to check the intermediate status. This API provides the finals status with the request
   * details and status.
   * @param mgId Management Group Id.
   * @param resourceProviderScope Scope for the resource. Some resources do not require location
   *                              parameter, such as CosmosDb, so can be skipped in scope. For most of the resources require -
   *                              providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires
   *                              batchAccountName -
   *                              providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension
   *                              enables to specify resources for any all the RPs.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param requestId Request Id.
   * @param options The options parameters.
   */
  get(
    mgId: string,
    resourceProviderScope: string,
    groupQuotaName: string,
    requestId: string,
    options?: GroupQuotaLimitsRequestsGetOptionalParams
  ): Promise<GroupQuotaLimitsRequestsGetResponse> {
    return this.client.sendOperationRequest(
      { mgId, resourceProviderScope, groupQuotaName, requestId, options },
      getOperationSpec
    );
  }

  /**
   * ListNext
   * @param mgId Management Group Id.
   * @param resourceProviderScope Scope for the resource. Some resources do not require location
   *                              parameter, such as CosmosDb, so can be skipped in scope. For most of the resources require -
   *                              providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires
   *                              batchAccountName -
   *                              providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension
   *                              enables to specify resources for any all the RPs.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    mgId: string,
    resourceProviderScope: string,
    groupQuotaName: string,
    nextLink: string,
    options?: GroupQuotaLimitsRequestsListNextOptionalParams
  ): Promise<GroupQuotaLimitsRequestsListNextResponse> {
    return this.client.sendOperationRequest(
      { mgId, resourceProviderScope, groupQuotaName, nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Management/managementGroups/{mgId}/{resourceProviderScope}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/groupQuotaRequests",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SubmittedResourceRequestStatusList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.mgId,
    Parameters.groupQuotaName,
    Parameters.resourceProviderScope
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Management/managementGroups/{mgId}/{resourceProviderScope}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/groupQuotaRequests/{requestId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SubmittedResourceRequestStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.mgId,
    Parameters.groupQuotaName,
    Parameters.requestId,
    Parameters.resourceProviderScope
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SubmittedResourceRequestStatusList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.mgId,
    Parameters.groupQuotaName,
    Parameters.nextLink,
    Parameters.resourceProviderScope
  ],
  headerParameters: [Parameters.accept],
  serializer
};
