/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { GroupQuotas } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureQuotaExtensionAPI } from "../azureQuotaExtensionAPI";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  GroupQuotasEntity,
  GroupQuotasListNextOptionalParams,
  GroupQuotasListOptionalParams,
  GroupQuotasListResponse,
  GroupQuotasCreateOrUpdateOptionalParams,
  GroupQuotasCreateOrUpdateResponse,
  GroupQuotasUpdateOptionalParams,
  GroupQuotasUpdateResponse,
  GroupQuotasGetOptionalParams,
  GroupQuotasGetResponse,
  GroupQuotasDeleteOptionalParams,
  GroupQuotasListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing GroupQuotas operations. */
export class GroupQuotasImpl implements GroupQuotas {
  private readonly client: AzureQuotaExtensionAPI;

  /**
   * Initialize a new instance of the class GroupQuotas class.
   * @param client Reference to the service client
   */
  constructor(client: AzureQuotaExtensionAPI) {
    this.client = client;
  }

  /**
   * Lists GroupQuotas for the scope passed. It will return the GroupQuotas QuotaEntity properties
   * only.The details on groupQuota can be access from the groupQuota APIs.
   * @param mgId Management Group Id.
   * @param options The options parameters.
   */
  public list(
    mgId: string,
    options?: GroupQuotasListOptionalParams
  ): PagedAsyncIterableIterator<GroupQuotasEntity> {
    const iter = this.listPagingAll(mgId, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(mgId, options, settings);
      }
    };
  }

  private async *listPagingPage(
    mgId: string,
    options?: GroupQuotasListOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<GroupQuotasEntity[]> {
    let result: GroupQuotasListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(mgId, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(mgId, continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    mgId: string,
    options?: GroupQuotasListOptionalParams
  ): AsyncIterableIterator<GroupQuotasEntity> {
    for await (const page of this.listPagingPage(mgId, options)) {
      yield* page;
    }
  }

  /**
   * Creates a new GroupQuota for the name passed. A RequestId will be returned by the Service. The
   * status can be polled periodically. The status Async polling is using standards defined at -
   * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
   * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified
   * in retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI
   * will change to Get URI and full details can be checked.
   * @param mgId Management Group Id.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    mgId: string,
    groupQuotaName: string,
    options?: GroupQuotasCreateOrUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<GroupQuotasCreateOrUpdateResponse>,
      GroupQuotasCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<GroupQuotasCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { mgId, groupQuotaName, options },
      spec: createOrUpdateOperationSpec
    });
    const poller = await createHttpPoller<
      GroupQuotasCreateOrUpdateResponse,
      OperationState<GroupQuotasCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Creates a new GroupQuota for the name passed. A RequestId will be returned by the Service. The
   * status can be polled periodically. The status Async polling is using standards defined at -
   * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
   * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified
   * in retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI
   * will change to Get URI and full details can be checked.
   * @param mgId Management Group Id.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    mgId: string,
    groupQuotaName: string,
    options?: GroupQuotasCreateOrUpdateOptionalParams
  ): Promise<GroupQuotasCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      mgId,
      groupQuotaName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Updates the GroupQuotas for the name passed. A GroupQuotas RequestId will be returned by the
   * Service. The status can be polled periodically. The status Async polling is using standards defined
   * at -
   * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
   * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified
   * in retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI
   * will change to Get URI and full details can be checked.
   *  Any change in the filters will be applicable to the future quota assignments, existing quota
   * assigned to subscriptions from the GroupQuotas remains unchanged.
   * @param mgId Management Group Id.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param options The options parameters.
   */
  async beginUpdate(
    mgId: string,
    groupQuotaName: string,
    options?: GroupQuotasUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<GroupQuotasUpdateResponse>,
      GroupQuotasUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<GroupQuotasUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { mgId, groupQuotaName, options },
      spec: updateOperationSpec
    });
    const poller = await createHttpPoller<
      GroupQuotasUpdateResponse,
      OperationState<GroupQuotasUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Updates the GroupQuotas for the name passed. A GroupQuotas RequestId will be returned by the
   * Service. The status can be polled periodically. The status Async polling is using standards defined
   * at -
   * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
   * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified
   * in retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI
   * will change to Get URI and full details can be checked.
   *  Any change in the filters will be applicable to the future quota assignments, existing quota
   * assigned to subscriptions from the GroupQuotas remains unchanged.
   * @param mgId Management Group Id.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    mgId: string,
    groupQuotaName: string,
    options?: GroupQuotasUpdateOptionalParams
  ): Promise<GroupQuotasUpdateResponse> {
    const poller = await this.beginUpdate(mgId, groupQuotaName, options);
    return poller.pollUntilDone();
  }

  /**
   * Gets the GroupQuotas for the name passed. It will return the GroupQuotas properties only. The
   * details on groupQuota can be access from the groupQuota APIs.
   * @param mgId Management Group Id.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param options The options parameters.
   */
  get(
    mgId: string,
    groupQuotaName: string,
    options?: GroupQuotasGetOptionalParams
  ): Promise<GroupQuotasGetResponse> {
    return this.client.sendOperationRequest(
      { mgId, groupQuotaName, options },
      getOperationSpec
    );
  }

  /**
   * Deletes the GroupQuotas for the name passed. All the remaining shareQuota in the GroupQuotas will be
   * lost.
   * @param mgId Management Group Id.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param options The options parameters.
   */
  delete(
    mgId: string,
    groupQuotaName: string,
    options?: GroupQuotasDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { mgId, groupQuotaName, options },
      deleteOperationSpec
    );
  }

  /**
   * Lists GroupQuotas for the scope passed. It will return the GroupQuotas QuotaEntity properties
   * only.The details on groupQuota can be access from the groupQuota APIs.
   * @param mgId Management Group Id.
   * @param options The options parameters.
   */
  private _list(
    mgId: string,
    options?: GroupQuotasListOptionalParams
  ): Promise<GroupQuotasListResponse> {
    return this.client.sendOperationRequest(
      { mgId, options },
      listOperationSpec
    );
  }

  /**
   * ListNext
   * @param mgId Management Group Id.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    mgId: string,
    nextLink: string,
    options?: GroupQuotasListNextOptionalParams
  ): Promise<GroupQuotasListNextResponse> {
    return this.client.sendOperationRequest(
      { mgId, nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Management/managementGroups/{mgId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.GroupQuotasEntity
    },
    201: {
      bodyMapper: Mappers.GroupQuotasEntity
    },
    202: {
      bodyMapper: Mappers.GroupQuotasEntity
    },
    204: {
      bodyMapper: Mappers.GroupQuotasEntity
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.groupQuotaPutRequestBody,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.mgId, Parameters.groupQuotaName],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Management/managementGroups/{mgId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.GroupQuotasEntity
    },
    201: {
      bodyMapper: Mappers.GroupQuotasEntity
    },
    202: {
      bodyMapper: Mappers.GroupQuotasEntity
    },
    204: {
      bodyMapper: Mappers.GroupQuotasEntity
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.groupQuotasPatchRequestBody,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.mgId, Parameters.groupQuotaName],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Management/managementGroups/{mgId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GroupQuotasEntity
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.mgId, Parameters.groupQuotaName],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Management/managementGroups/{mgId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.mgId, Parameters.groupQuotaName],
  headerParameters: [Parameters.accept],
  serializer
};
const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Management/managementGroups/{mgId}/providers/Microsoft.Quota/groupQuotas",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GroupQuotaList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.mgId],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GroupQuotaList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [Parameters.$host, Parameters.mgId, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
