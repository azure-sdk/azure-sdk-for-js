/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { SubscriptionRequests } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureQuotaExtensionAPI } from "../azureQuotaExtensionAPI";
import {
  GroupQuotaSubscriptionId,
  SubscriptionRequestsListNextOptionalParams,
  SubscriptionRequestsListOptionalParams,
  SubscriptionRequestsListResponse,
  SubscriptionRequestsGetOptionalParams,
  SubscriptionRequestsGetResponse,
  SubscriptionRequestsListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing SubscriptionRequests operations. */
export class SubscriptionRequestsImpl implements SubscriptionRequests {
  private readonly client: AzureQuotaExtensionAPI;

  /**
   * Initialize a new instance of the class SubscriptionRequests class.
   * @param client Reference to the service client
   */
  constructor(client: AzureQuotaExtensionAPI) {
    this.client = client;
  }

  /**
   * List API to check the status of a subscriptionId requests by requestId. Request history is
   * maintained for 1 year.
   * @param mgId Management Group Id.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param options The options parameters.
   */
  public list(
    mgId: string,
    groupQuotaName: string,
    options?: SubscriptionRequestsListOptionalParams
  ): PagedAsyncIterableIterator<GroupQuotaSubscriptionId> {
    const iter = this.listPagingAll(mgId, groupQuotaName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(mgId, groupQuotaName, options, settings);
      }
    };
  }

  private async *listPagingPage(
    mgId: string,
    groupQuotaName: string,
    options?: SubscriptionRequestsListOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<GroupQuotaSubscriptionId[]> {
    let result: SubscriptionRequestsListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(mgId, groupQuotaName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        mgId,
        groupQuotaName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    mgId: string,
    groupQuotaName: string,
    options?: SubscriptionRequestsListOptionalParams
  ): AsyncIterableIterator<GroupQuotaSubscriptionId> {
    for await (const page of this.listPagingPage(
      mgId,
      groupQuotaName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List API to check the status of a subscriptionId requests by requestId. Request history is
   * maintained for 1 year.
   * @param mgId Management Group Id.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param options The options parameters.
   */
  private _list(
    mgId: string,
    groupQuotaName: string,
    options?: SubscriptionRequestsListOptionalParams
  ): Promise<SubscriptionRequestsListResponse> {
    return this.client.sendOperationRequest(
      { mgId, groupQuotaName, options },
      listOperationSpec
    );
  }

  /**
   * Get API to check the status of a subscriptionIds request by requestId.  Use the polling API -
   * OperationsStatus URI specified in Azure-AsyncOperation header field, with retry-after duration in
   * seconds to check the intermediate status. This API provides the finals status with the request
   * details and status.
   * @param mgId Management Group Id.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param requestId Request Id.
   * @param options The options parameters.
   */
  get(
    mgId: string,
    groupQuotaName: string,
    requestId: string,
    options?: SubscriptionRequestsGetOptionalParams
  ): Promise<SubscriptionRequestsGetResponse> {
    return this.client.sendOperationRequest(
      { mgId, groupQuotaName, requestId, options },
      getOperationSpec
    );
  }

  /**
   * ListNext
   * @param mgId Management Group Id.
   * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context
   *                       tenantId/MgId.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    mgId: string,
    groupQuotaName: string,
    nextLink: string,
    options?: SubscriptionRequestsListNextOptionalParams
  ): Promise<SubscriptionRequestsListNextResponse> {
    return this.client.sendOperationRequest(
      { mgId, groupQuotaName, nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Management/managementGroups/{mgId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/subscriptionRequests",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GroupQuotaSubscriptionIdList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.mgId, Parameters.groupQuotaName],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Management/managementGroups/{mgId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/subscriptionRequests/{requestId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GroupQuotaSubscriptionId
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.mgId,
    Parameters.groupQuotaName,
    Parameters.requestId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GroupQuotaSubscriptionIdList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.mgId,
    Parameters.groupQuotaName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
