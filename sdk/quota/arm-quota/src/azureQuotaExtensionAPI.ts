/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreRestPipeline from "@azure/core-rest-pipeline";
import * as coreAuth from "@azure/core-auth";
import {
  GroupQuotasImpl,
  GroupQuotaSubscriptionsImpl,
  SubscriptionRequestsImpl,
  GroupQuotaLimitsImpl,
  GroupQuotaLimitsRequestsImpl,
  GroupQuotaSubscriptionQuotaAllocationImpl,
  GroupQuotaSubscriptionQuotaAllocationRequestsImpl,
  UsagesImpl,
  QuotaImpl,
  QuotaRequestStatusImpl,
  QuotaOperationImpl
} from "./operations";
import {
  GroupQuotas,
  GroupQuotaSubscriptions,
  SubscriptionRequests,
  GroupQuotaLimits,
  GroupQuotaLimitsRequests,
  GroupQuotaSubscriptionQuotaAllocation,
  GroupQuotaSubscriptionQuotaAllocationRequests,
  Usages,
  Quota,
  QuotaRequestStatus,
  QuotaOperation
} from "./operationsInterfaces";
import { AzureQuotaExtensionAPIOptionalParams } from "./models";

export class AzureQuotaExtensionAPI extends coreClient.ServiceClient {
  $host: string;
  subscriptionId?: string;

  /**
   * Initializes a new instance of the AzureQuotaExtensionAPI class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param $host server parameter
   * @param subscriptionId The ID of the target subscription. The value must be an UUID.
   * @param options The parameter options
   */
  constructor(
    credentials: coreAuth.TokenCredential,
    $host: string,
    subscriptionId: string,
    options?: AzureQuotaExtensionAPIOptionalParams
  );
  constructor(
    credentials: coreAuth.TokenCredential,
    $host: string,
    options?: AzureQuotaExtensionAPIOptionalParams
  );
  constructor(
    credentials: coreAuth.TokenCredential,
    $host: string,
    subscriptionIdOrOptions?: AzureQuotaExtensionAPIOptionalParams | string,
    options?: AzureQuotaExtensionAPIOptionalParams
  ) {
    if (credentials === undefined) {
      throw new Error("'credentials' cannot be null");
    }
    if ($host === undefined) {
      throw new Error("'$host' cannot be null");
    }

    let subscriptionId: string | undefined;

    if (typeof subscriptionIdOrOptions === "string") {
      subscriptionId = subscriptionIdOrOptions;
    } else if (typeof subscriptionIdOrOptions === "object") {
      options = subscriptionIdOrOptions;
    }

    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: AzureQuotaExtensionAPIOptionalParams = {
      requestContentType: "application/json; charset=utf-8",
      credential: credentials
    };

    const packageDetails = `azsdk-js-arm-quota/1.0.0-beta.6`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix
      },
      endpoint:
        options.endpoint ?? options.baseUri ?? "https://management.azure.com"
    };
    super(optionsWithDefaults);

    let bearerTokenAuthenticationPolicyFound: boolean = false;
    if (options?.pipeline && options.pipeline.getOrderedPolicies().length > 0) {
      const pipelinePolicies: coreRestPipeline.PipelinePolicy[] = options.pipeline.getOrderedPolicies();
      bearerTokenAuthenticationPolicyFound = pipelinePolicies.some(
        (pipelinePolicy) =>
          pipelinePolicy.name ===
          coreRestPipeline.bearerTokenAuthenticationPolicyName
      );
    }
    if (
      !options ||
      !options.pipeline ||
      options.pipeline.getOrderedPolicies().length == 0 ||
      !bearerTokenAuthenticationPolicyFound
    ) {
      this.pipeline.removePolicy({
        name: coreRestPipeline.bearerTokenAuthenticationPolicyName
      });
      this.pipeline.addPolicy(
        coreRestPipeline.bearerTokenAuthenticationPolicy({
          credential: credentials,
          scopes:
            optionsWithDefaults.credentialScopes ??
            `${optionsWithDefaults.endpoint}/.default`,
          challengeCallbacks: {
            authorizeRequestOnChallenge:
              coreClient.authorizeRequestOnClaimChallenge
          }
        })
      );
    }
    // Parameter assignments
    this.$host = $host;
    this.subscriptionId = subscriptionId;
    this.groupQuotas = new GroupQuotasImpl(this);
    this.groupQuotaSubscriptions = new GroupQuotaSubscriptionsImpl(this);
    this.subscriptionRequests = new SubscriptionRequestsImpl(this);
    this.groupQuotaLimits = new GroupQuotaLimitsImpl(this);
    this.groupQuotaLimitsRequests = new GroupQuotaLimitsRequestsImpl(this);
    this.groupQuotaSubscriptionQuotaAllocation = new GroupQuotaSubscriptionQuotaAllocationImpl(
      this
    );
    this.groupQuotaSubscriptionQuotaAllocationRequests = new GroupQuotaSubscriptionQuotaAllocationRequestsImpl(
      this
    );
    this.usages = new UsagesImpl(this);
    this.quota = new QuotaImpl(this);
    this.quotaRequestStatus = new QuotaRequestStatusImpl(this);
    this.quotaOperation = new QuotaOperationImpl(this);
  }

  groupQuotas: GroupQuotas;
  groupQuotaSubscriptions: GroupQuotaSubscriptions;
  subscriptionRequests: SubscriptionRequests;
  groupQuotaLimits: GroupQuotaLimits;
  groupQuotaLimitsRequests: GroupQuotaLimitsRequests;
  groupQuotaSubscriptionQuotaAllocation: GroupQuotaSubscriptionQuotaAllocation;
  groupQuotaSubscriptionQuotaAllocationRequests: GroupQuotaSubscriptionQuotaAllocationRequests;
  usages: Usages;
  quota: Quota;
  quotaRequestStatus: QuotaRequestStatus;
  quotaOperation: QuotaOperation;
}
