/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { Alerts } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AuthorizationManagementClient } from "../authorizationManagementClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  Alert,
  AlertsListForScopeNextOptionalParams,
  AlertsListForScopeOptionalParams,
  AlertsListForScopeResponse,
  AlertsGetOptionalParams,
  AlertsGetResponse,
  AlertsUpdateOptionalParams,
  AlertsUpdateResponse,
  AlertsRefreshOptionalParams,
  AlertsRefreshResponse,
  AlertsRefreshAllOptionalParams,
  AlertsRefreshAllResponse,
  AlertsListForScopeNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Alerts operations. */
export class AlertsImpl implements Alerts {
  private readonly client: AuthorizationManagementClient;

  /**
   * Initialize a new instance of the class Alerts class.
   * @param client Reference to the service client
   */
  constructor(client: AuthorizationManagementClient) {
    this.client = client;
  }

  /**
   * Gets alerts for a resource scope.
   * @param scope The scope of the alert.
   * @param options The options parameters.
   */
  public listForScope(
    scope: string,
    options?: AlertsListForScopeOptionalParams
  ): PagedAsyncIterableIterator<Alert> {
    const iter = this.listForScopePagingAll(scope, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listForScopePagingPage(scope, options, settings);
      }
    };
  }

  private async *listForScopePagingPage(
    scope: string,
    options?: AlertsListForScopeOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Alert[]> {
    let result: AlertsListForScopeResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listForScope(scope, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listForScopeNext(scope, continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listForScopePagingAll(
    scope: string,
    options?: AlertsListForScopeOptionalParams
  ): AsyncIterableIterator<Alert> {
    for await (const page of this.listForScopePagingPage(scope, options)) {
      yield* page;
    }
  }

  /**
   * Get the specified alert.
   * @param scope The scope of the alert. The scope can be any REST resource instance. For example, use
   *              '/providers/Microsoft.Subscription/subscriptions/{subscription-id}/' for a subscription,
   *              '/providers/Microsoft.Subscription/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}'
   *              for a resource group, and
   *              '/providers/Microsoft.Subscription/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider}/{resource-type}/{resource-name}'
   *              for a resource.
   * @param alertId The name of the alert to get.
   * @param options The options parameters.
   */
  get(
    scope: string,
    alertId: string,
    options?: AlertsGetOptionalParams
  ): Promise<AlertsGetResponse> {
    return this.client.sendOperationRequest(
      { scope, alertId, options },
      getOperationSpec
    );
  }

  /**
   * Update an alert.
   * @param scope The scope of the alert.
   * @param alertId The name of the alert to dismiss.
   * @param parameters Parameters for the alert.
   * @param options The options parameters.
   */
  update(
    scope: string,
    alertId: string,
    parameters: Alert,
    options?: AlertsUpdateOptionalParams
  ): Promise<AlertsUpdateResponse> {
    return this.client.sendOperationRequest(
      { scope, alertId, parameters, options },
      updateOperationSpec
    );
  }

  /**
   * Gets alerts for a resource scope.
   * @param scope The scope of the alert.
   * @param options The options parameters.
   */
  private _listForScope(
    scope: string,
    options?: AlertsListForScopeOptionalParams
  ): Promise<AlertsListForScopeResponse> {
    return this.client.sendOperationRequest(
      { scope, options },
      listForScopeOperationSpec
    );
  }

  /**
   * Refresh an alert.
   * @param scope The scope of the alert.
   * @param alertId The name of the alert to refresh.
   * @param options The options parameters.
   */
  async beginRefresh(
    scope: string,
    alertId: string,
    options?: AlertsRefreshOptionalParams
  ): Promise<
    PollerLike<PollOperationState<AlertsRefreshResponse>, AlertsRefreshResponse>
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<AlertsRefreshResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { scope, alertId, options },
      refreshOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Refresh an alert.
   * @param scope The scope of the alert.
   * @param alertId The name of the alert to refresh.
   * @param options The options parameters.
   */
  async beginRefreshAndWait(
    scope: string,
    alertId: string,
    options?: AlertsRefreshOptionalParams
  ): Promise<AlertsRefreshResponse> {
    const poller = await this.beginRefresh(scope, alertId, options);
    return poller.pollUntilDone();
  }

  /**
   * Refresh all alerts for a resource scope.
   * @param scope The scope of the alert.
   * @param options The options parameters.
   */
  async beginRefreshAll(
    scope: string,
    options?: AlertsRefreshAllOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<AlertsRefreshAllResponse>,
      AlertsRefreshAllResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<AlertsRefreshAllResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { scope, options },
      refreshAllOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Refresh all alerts for a resource scope.
   * @param scope The scope of the alert.
   * @param options The options parameters.
   */
  async beginRefreshAllAndWait(
    scope: string,
    options?: AlertsRefreshAllOptionalParams
  ): Promise<AlertsRefreshAllResponse> {
    const poller = await this.beginRefreshAll(scope, options);
    return poller.pollUntilDone();
  }

  /**
   * ListForScopeNext
   * @param scope The scope of the alert.
   * @param nextLink The nextLink from the previous successful call to the ListForScope method.
   * @param options The options parameters.
   */
  private _listForScopeNext(
    scope: string,
    nextLink: string,
    options?: AlertsListForScopeNextOptionalParams
  ): Promise<AlertsListForScopeNextResponse> {
    return this.client.sendOperationRequest(
      { scope, nextLink, options },
      listForScopeNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.Authorization/roleManagementAlerts/alerts/{alertId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Alert
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [Parameters.$host, Parameters.scope1, Parameters.alertId],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.Authorization/roleManagementAlerts/alerts/{alertId}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Alert
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [Parameters.$host, Parameters.scope1, Parameters.alertId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listForScopeOperationSpec: coreClient.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.Authorization/roleManagementAlerts/alerts",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AlertListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [Parameters.$host, Parameters.scope1],
  headerParameters: [Parameters.accept],
  serializer
};
const refreshOperationSpec: coreClient.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.Authorization/roleManagementAlerts/alerts/{alertId}/refresh",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AlertOperationResult,
      headersMapper: Mappers.AlertsRefreshHeaders
    },
    201: {
      bodyMapper: Mappers.AlertOperationResult,
      headersMapper: Mappers.AlertsRefreshHeaders
    },
    202: {
      bodyMapper: Mappers.AlertOperationResult,
      headersMapper: Mappers.AlertsRefreshHeaders
    },
    204: {
      bodyMapper: Mappers.AlertOperationResult,
      headersMapper: Mappers.AlertsRefreshHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [Parameters.$host, Parameters.scope1, Parameters.alertId],
  headerParameters: [Parameters.accept],
  serializer
};
const refreshAllOperationSpec: coreClient.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.Authorization/roleManagementAlerts/alerts/refresh",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AlertOperationResult,
      headersMapper: Mappers.AlertsRefreshAllHeaders
    },
    201: {
      bodyMapper: Mappers.AlertOperationResult,
      headersMapper: Mappers.AlertsRefreshAllHeaders
    },
    202: {
      bodyMapper: Mappers.AlertOperationResult,
      headersMapper: Mappers.AlertsRefreshAllHeaders
    },
    204: {
      bodyMapper: Mappers.AlertOperationResult,
      headersMapper: Mappers.AlertsRefreshAllHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [Parameters.$host, Parameters.scope1],
  headerParameters: [Parameters.accept],
  serializer
};
const listForScopeNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AlertListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.scope1],
  headerParameters: [Parameters.accept],
  serializer
};
