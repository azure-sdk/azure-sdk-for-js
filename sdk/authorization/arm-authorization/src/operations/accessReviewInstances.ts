/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { AccessReviewInstances } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AuthorizationManagementClient } from "../authorizationManagementClient";
import {
  AccessReviewInstance,
  AccessReviewInstancesListNextOptionalParams,
  AccessReviewInstancesListOptionalParams,
  AccessReviewInstancesListResponse,
  AccessReviewInstancesGetByIdOptionalParams,
  AccessReviewInstancesGetByIdResponse,
  AccessReviewInstanceProperties,
  AccessReviewInstancesCreateOptionalParams,
  AccessReviewInstancesCreateResponse,
  AccessReviewInstancesListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing AccessReviewInstances operations. */
export class AccessReviewInstancesImpl implements AccessReviewInstances {
  private readonly client: AuthorizationManagementClient;

  /**
   * Initialize a new instance of the class AccessReviewInstances class.
   * @param client Reference to the service client
   */
  constructor(client: AuthorizationManagementClient) {
    this.client = client;
  }

  /**
   * Get access review instances
   * @param scheduleDefinitionId The id of the access review schedule definition.
   * @param subscriptionId The ID of the target subscription.
   * @param options The options parameters.
   */
  public list(
    scheduleDefinitionId: string,
    subscriptionId: string,
    options?: AccessReviewInstancesListOptionalParams
  ): PagedAsyncIterableIterator<AccessReviewInstance> {
    const iter = this.listPagingAll(
      scheduleDefinitionId,
      subscriptionId,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage(
          scheduleDefinitionId,
          subscriptionId,
          options
        );
      }
    };
  }

  private async *listPagingPage(
    scheduleDefinitionId: string,
    subscriptionId: string,
    options?: AccessReviewInstancesListOptionalParams
  ): AsyncIterableIterator<AccessReviewInstance[]> {
    let result = await this._list(
      scheduleDefinitionId,
      subscriptionId,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext(
        scheduleDefinitionId,
        subscriptionId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(
    scheduleDefinitionId: string,
    subscriptionId: string,
    options?: AccessReviewInstancesListOptionalParams
  ): AsyncIterableIterator<AccessReviewInstance> {
    for await (const page of this.listPagingPage(
      scheduleDefinitionId,
      subscriptionId,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Get access review instances
   * @param scheduleDefinitionId The id of the access review schedule definition.
   * @param subscriptionId The ID of the target subscription.
   * @param options The options parameters.
   */
  private _list(
    scheduleDefinitionId: string,
    subscriptionId: string,
    options?: AccessReviewInstancesListOptionalParams
  ): Promise<AccessReviewInstancesListResponse> {
    return this.client.sendOperationRequest(
      { scheduleDefinitionId, subscriptionId, options },
      listOperationSpec
    );
  }

  /**
   * Get access review instances
   * @param scheduleDefinitionId The id of the access review schedule definition.
   * @param id The id of the access review instance.
   * @param subscriptionId The ID of the target subscription.
   * @param options The options parameters.
   */
  getById(
    scheduleDefinitionId: string,
    id: string,
    subscriptionId: string,
    options?: AccessReviewInstancesGetByIdOptionalParams
  ): Promise<AccessReviewInstancesGetByIdResponse> {
    return this.client.sendOperationRequest(
      { scheduleDefinitionId, id, subscriptionId, options },
      getByIdOperationSpec
    );
  }

  /**
   * Update access review instance.
   * @param scheduleDefinitionId The id of the access review schedule definition.
   * @param id The id of the access review instance.
   * @param subscriptionId The ID of the target subscription.
   * @param properties Access review instance properties.
   * @param options The options parameters.
   */
  create(
    scheduleDefinitionId: string,
    id: string,
    subscriptionId: string,
    properties: AccessReviewInstanceProperties,
    options?: AccessReviewInstancesCreateOptionalParams
  ): Promise<AccessReviewInstancesCreateResponse> {
    return this.client.sendOperationRequest(
      { scheduleDefinitionId, id, subscriptionId, properties, options },
      createOperationSpec
    );
  }

  /**
   * ListNext
   * @param scheduleDefinitionId The id of the access review schedule definition.
   * @param subscriptionId The ID of the target subscription.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    scheduleDefinitionId: string,
    subscriptionId: string,
    nextLink: string,
    options?: AccessReviewInstancesListNextOptionalParams
  ): Promise<AccessReviewInstancesListNextResponse> {
    return this.client.sendOperationRequest(
      { scheduleDefinitionId, subscriptionId, nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/instances",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AccessReviewInstanceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorDefinition
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.scheduleDefinitionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getByIdOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/instances/{id}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AccessReviewInstance
    },
    default: {
      bodyMapper: Mappers.ErrorDefinition
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.scheduleDefinitionId,
    Parameters.id
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/instances/{id}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.AccessReviewInstance
    },
    default: {
      bodyMapper: Mappers.ErrorDefinition
    }
  },
  requestBody: Parameters.properties2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.scheduleDefinitionId,
    Parameters.id
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AccessReviewInstanceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorDefinition
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.scheduleDefinitionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
