/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export type RoleManagementPolicyRuleUnion =
  | RoleManagementPolicyRule
  | RoleManagementPolicyApprovalRule
  | RoleManagementPolicyAuthenticationContextRule
  | RoleManagementPolicyEnablementRule
  | RoleManagementPolicyExpirationRule
  | RoleManagementPolicyNotificationRule
  | RoleManagementPolicyPimOnlyModeRule;

/** Role management policy */
export interface RoleManagementPolicy {
  /**
   * The role management policy Id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The role management policy name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The role management policy type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** The role management policy scope. */
  scope?: string;
  /** The role management policy display name. */
  displayName?: string;
  /** The role management policy description. */
  description?: string;
  /** The role management policy is default policy. */
  isOrganizationDefault?: boolean;
  /**
   * The name of the entity last modified it
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastModifiedBy?: Principal;
  /**
   * The last modified date time.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastModifiedDateTime?: Date;
  /** The rule applied to the policy. */
  rules?: RoleManagementPolicyRuleUnion[];
  /**
   * The readonly computed rule applied to the policy.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly effectiveRules?: RoleManagementPolicyRuleUnion[];
  /**
   * Additional properties of scope
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly policyProperties?: PolicyProperties;
}

/** The name of the entity last modified it */
export interface Principal {
  /** The id of the principal made changes */
  id?: string;
  /** The name of the principal made changes */
  displayName?: string;
  /** Type of principal such as user , group etc */
  type?: string;
  /** Email of principal */
  email?: string;
}

/** The role management policy rule. */
export interface RoleManagementPolicyRule {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  ruleType:
    | "RoleManagementPolicyApprovalRule"
    | "RoleManagementPolicyAuthenticationContextRule"
    | "RoleManagementPolicyEnablementRule"
    | "RoleManagementPolicyExpirationRule"
    | "RoleManagementPolicyNotificationRule"
    | "RoleManagementPolicyPimOnlyModeRule";
  /** The id of the rule. */
  id?: string;
  /** The target of the current rule. */
  target?: RoleManagementPolicyRuleTarget;
}

/** The role management policy rule target. */
export interface RoleManagementPolicyRuleTarget {
  /** The caller of the setting. */
  caller?: string;
  /** The type of operation. */
  operations?: string[];
  /** The assignment level to which rule is applied. */
  level?: string;
  /** The list of target objects. */
  targetObjects?: string[];
  /** The list of inheritable settings. */
  inheritableSettings?: string[];
  /** The list of enforced settings. */
  enforcedSettings?: string[];
}

/** Expanded info of resource scope */
export interface PolicyProperties {
  /**
   * Details of the resource scope
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly scope?: PolicyPropertiesScope;
}

/** Details of the resource scope */
export interface PolicyPropertiesScope {
  /** Scope id of the resource */
  id?: string;
  /** Display name of the resource */
  displayName?: string;
  /** Type of the resource */
  type?: string;
}

/** An error response from the service. */
export interface CloudError {
  /** An error response from the service. */
  error?: CloudErrorBody;
}

/** An error response from the service. */
export interface CloudErrorBody {
  /** An identifier for the error. Codes are invariant and are intended to be consumed programmatically. */
  code?: string;
  /** A message describing the error, intended to be suitable for display in a user interface. */
  message?: string;
}

/** Role management policy list operation result. */
export interface RoleManagementPolicyListResult {
  /** Role management policy list. */
  value?: RoleManagementPolicy[];
  /** The URL to use for getting the next set of results. */
  nextLink?: string;
}

/** Role management policy */
export interface RoleManagementPolicyAssignment {
  /**
   * The role management policy Id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The role management policy name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The role management policy type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** The role management policy scope. */
  scope?: string;
  /** The role definition of management policy assignment. */
  roleDefinitionId?: string;
  /** The policy id role management policy assignment. */
  policyId?: string;
  /**
   * The readonly computed rule applied to the policy.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly effectiveRules?: RoleManagementPolicyRuleUnion[];
  /**
   * Additional properties of scope, role definition and policy
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly policyAssignmentProperties?: PolicyAssignmentProperties;
}

/** Expanded info of resource scope, role definition and policy */
export interface PolicyAssignmentProperties {
  /** Details of the resource scope */
  scope?: PolicyAssignmentPropertiesScope;
  /** Details of role definition */
  roleDefinition?: PolicyAssignmentPropertiesRoleDefinition;
  /** Details of the policy */
  policy?: PolicyAssignmentPropertiesPolicy;
}

/** Details of the resource scope */
export interface PolicyAssignmentPropertiesScope {
  /** Scope id of the resource */
  id?: string;
  /** Display name of the resource */
  displayName?: string;
  /** Type of the resource */
  type?: string;
}

/** Details of role definition */
export interface PolicyAssignmentPropertiesRoleDefinition {
  /** Id of the role definition */
  id?: string;
  /** Display name of the role definition */
  displayName?: string;
  /** Type of the role definition */
  type?: string;
}

/** Details of the policy */
export interface PolicyAssignmentPropertiesPolicy {
  /** Id of the policy */
  id?: string;
  /**
   * The name of the entity last modified it
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastModifiedBy?: Principal;
  /** The last modified date time. */
  lastModifiedDateTime?: Date;
}

/** Role management policy assignment list operation result. */
export interface RoleManagementPolicyAssignmentListResult {
  /** Role management policy assignment list. */
  value?: RoleManagementPolicyAssignment[];
  /** The URL to use for getting the next set of results. */
  nextLink?: string;
}

/** Role definition permissions. */
export interface Permission {
  /** Allowed actions. */
  actions?: string[];
  /** Denied actions. */
  notActions?: string[];
  /** Allowed Data actions. */
  dataActions?: string[];
  /** Denied Data actions. */
  notDataActions?: string[];
}

/** The approval settings. */
export interface ApprovalSettings {
  /** Determines whether approval is required or not. */
  isApprovalRequired?: boolean;
  /** Determines whether approval is required for assignment extension. */
  isApprovalRequiredForExtension?: boolean;
  /** Determine whether requestor justification is required. */
  isRequestorJustificationRequired?: boolean;
  /** The type of rule */
  approvalMode?: ApprovalMode;
  /** The approval stages of the request. */
  approvalStages?: ApprovalStage[];
}

/** The approval stage. */
export interface ApprovalStage {
  /** The time in days when approval request would be timed out */
  approvalStageTimeOutInDays?: number;
  /** Determines whether approver need to provide justification for his decision. */
  isApproverJustificationRequired?: boolean;
  /** The time in minutes when the approval request would be escalated if the primary approver does not approve */
  escalationTimeInMinutes?: number;
  /** The primary approver of the request. */
  primaryApprovers?: UserSet[];
  /** The value determine whether escalation feature is enabled. */
  isEscalationEnabled?: boolean;
  /** The escalation approver of the request. */
  escalationApprovers?: UserSet[];
}

/** The detail of a user. */
export interface UserSet {
  /** The type of user. */
  userType?: UserType;
  /** The value indicating whether the user is a backup fallback approver */
  isBackup?: boolean;
  /** The object id of the user. */
  id?: string;
  /** The description of the user. */
  description?: string;
}

/** The PIM Only Mode settings. */
export interface PIMOnlyModeSettings {
  /** Determines whether the setting is enabled, disabled or report only. */
  mode?: PIMOnlyMode;
  /** The list of object IDs that the rule does not apply to. */
  excludes?: string[];
  /** Exclude all service principals from this rule. */
  excludeAllServicePrincipals?: boolean;
}

/** The role management policy approval rule. */
export interface RoleManagementPolicyApprovalRule
  extends RoleManagementPolicyRule {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  ruleType: "RoleManagementPolicyApprovalRule";
  /** The approval setting */
  setting?: ApprovalSettings;
}

/** The role management policy authentication context rule. */
export interface RoleManagementPolicyAuthenticationContextRule
  extends RoleManagementPolicyRule {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  ruleType: "RoleManagementPolicyAuthenticationContextRule";
  /** The value indicating if rule is enabled. */
  isEnabled?: boolean;
  /** The claim value. */
  claimValue?: string;
}

/** The role management policy enablement rule. */
export interface RoleManagementPolicyEnablementRule
  extends RoleManagementPolicyRule {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  ruleType: "RoleManagementPolicyEnablementRule";
  /** The list of enabled rules. */
  enabledRules?: EnablementRules[];
}

/** The role management policy expiration rule. */
export interface RoleManagementPolicyExpirationRule
  extends RoleManagementPolicyRule {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  ruleType: "RoleManagementPolicyExpirationRule";
  /** The value indicating whether expiration is required. */
  isExpirationRequired?: boolean;
  /** The maximum duration of expiration in timespan. */
  maximumDuration?: string;
}

/** The role management policy notification rule. */
export interface RoleManagementPolicyNotificationRule
  extends RoleManagementPolicyRule {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  ruleType: "RoleManagementPolicyNotificationRule";
  /** The type of notification. */
  notificationType?: NotificationDeliveryMechanism;
  /** The notification level. */
  notificationLevel?: NotificationLevel;
  /** The recipient type. */
  recipientType?: RecipientType;
  /** The list of notification recipients. */
  notificationRecipients?: string[];
  /** Determines if the notification will be sent to the recipient type specified in the policy rule. */
  isDefaultRecipientsEnabled?: boolean;
}

/** The role management policy PIM only mode rule. */
export interface RoleManagementPolicyPimOnlyModeRule
  extends RoleManagementPolicyRule {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  ruleType: "RoleManagementPolicyPimOnlyModeRule";
  /** The PIM Only Mode settings */
  pimOnlyModeSettings?: PIMOnlyModeSettings;
}

/** Known values of {@link RoleManagementPolicyRuleType} that the service accepts. */
export enum KnownRoleManagementPolicyRuleType {
  /** RoleManagementPolicyApprovalRule */
  RoleManagementPolicyApprovalRule = "RoleManagementPolicyApprovalRule",
  /** RoleManagementPolicyAuthenticationContextRule */
  RoleManagementPolicyAuthenticationContextRule = "RoleManagementPolicyAuthenticationContextRule",
  /** RoleManagementPolicyEnablementRule */
  RoleManagementPolicyEnablementRule = "RoleManagementPolicyEnablementRule",
  /** RoleManagementPolicyExpirationRule */
  RoleManagementPolicyExpirationRule = "RoleManagementPolicyExpirationRule",
  /** RoleManagementPolicyNotificationRule */
  RoleManagementPolicyNotificationRule = "RoleManagementPolicyNotificationRule",
  /** RoleManagementPolicyPimOnlyModeRule */
  RoleManagementPolicyPimOnlyModeRule = "RoleManagementPolicyPimOnlyModeRule",
}

/**
 * Defines values for RoleManagementPolicyRuleType. \
 * {@link KnownRoleManagementPolicyRuleType} can be used interchangeably with RoleManagementPolicyRuleType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **RoleManagementPolicyApprovalRule** \
 * **RoleManagementPolicyAuthenticationContextRule** \
 * **RoleManagementPolicyEnablementRule** \
 * **RoleManagementPolicyExpirationRule** \
 * **RoleManagementPolicyNotificationRule** \
 * **RoleManagementPolicyPimOnlyModeRule**
 */
export type RoleManagementPolicyRuleType = string;

/** Known values of {@link ApprovalMode} that the service accepts. */
export enum KnownApprovalMode {
  /** SingleStage */
  SingleStage = "SingleStage",
  /** Serial */
  Serial = "Serial",
  /** Parallel */
  Parallel = "Parallel",
  /** NoApproval */
  NoApproval = "NoApproval",
}

/**
 * Defines values for ApprovalMode. \
 * {@link KnownApprovalMode} can be used interchangeably with ApprovalMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SingleStage** \
 * **Serial** \
 * **Parallel** \
 * **NoApproval**
 */
export type ApprovalMode = string;

/** Known values of {@link UserType} that the service accepts. */
export enum KnownUserType {
  /** User */
  User = "User",
  /** Group */
  Group = "Group",
}

/**
 * Defines values for UserType. \
 * {@link KnownUserType} can be used interchangeably with UserType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Group**
 */
export type UserType = string;

/** Known values of {@link EnablementRules} that the service accepts. */
export enum KnownEnablementRules {
  /** MultiFactorAuthentication */
  MultiFactorAuthentication = "MultiFactorAuthentication",
  /** Justification */
  Justification = "Justification",
  /** Ticketing */
  Ticketing = "Ticketing",
}

/**
 * Defines values for EnablementRules. \
 * {@link KnownEnablementRules} can be used interchangeably with EnablementRules,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **MultiFactorAuthentication** \
 * **Justification** \
 * **Ticketing**
 */
export type EnablementRules = string;

/** Known values of {@link NotificationDeliveryMechanism} that the service accepts. */
export enum KnownNotificationDeliveryMechanism {
  /** Email */
  Email = "Email",
}

/**
 * Defines values for NotificationDeliveryMechanism. \
 * {@link KnownNotificationDeliveryMechanism} can be used interchangeably with NotificationDeliveryMechanism,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Email**
 */
export type NotificationDeliveryMechanism = string;

/** Known values of {@link NotificationLevel} that the service accepts. */
export enum KnownNotificationLevel {
  /** None */
  None = "None",
  /** Critical */
  Critical = "Critical",
  /** All */
  All = "All",
}

/**
 * Defines values for NotificationLevel. \
 * {@link KnownNotificationLevel} can be used interchangeably with NotificationLevel,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Critical** \
 * **All**
 */
export type NotificationLevel = string;

/** Known values of {@link RecipientType} that the service accepts. */
export enum KnownRecipientType {
  /** Requestor */
  Requestor = "Requestor",
  /** Approver */
  Approver = "Approver",
  /** Admin */
  Admin = "Admin",
}

/**
 * Defines values for RecipientType. \
 * {@link KnownRecipientType} can be used interchangeably with RecipientType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Requestor** \
 * **Approver** \
 * **Admin**
 */
export type RecipientType = string;

/** Known values of {@link PIMOnlyMode} that the service accepts. */
export enum KnownPIMOnlyMode {
  /** Disabled */
  Disabled = "Disabled",
  /** Enabled */
  Enabled = "Enabled",
  /** ReportOnly */
  ReportOnly = "ReportOnly",
}

/**
 * Defines values for PIMOnlyMode. \
 * {@link KnownPIMOnlyMode} can be used interchangeably with PIMOnlyMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Disabled** \
 * **Enabled** \
 * **ReportOnly**
 */
export type PIMOnlyMode = string;

/** Optional parameters. */
export interface RoleManagementPoliciesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type RoleManagementPoliciesGetResponse = RoleManagementPolicy;

/** Optional parameters. */
export interface RoleManagementPoliciesUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type RoleManagementPoliciesUpdateResponse = RoleManagementPolicy;

/** Optional parameters. */
export interface RoleManagementPoliciesDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface RoleManagementPoliciesListForScopeOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listForScope operation. */
export type RoleManagementPoliciesListForScopeResponse =
  RoleManagementPolicyListResult;

/** Optional parameters. */
export interface RoleManagementPoliciesListForScopeNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listForScopeNext operation. */
export type RoleManagementPoliciesListForScopeNextResponse =
  RoleManagementPolicyListResult;

/** Optional parameters. */
export interface RoleManagementPolicyAssignmentsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type RoleManagementPolicyAssignmentsGetResponse =
  RoleManagementPolicyAssignment;

/** Optional parameters. */
export interface RoleManagementPolicyAssignmentsCreateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the create operation. */
export type RoleManagementPolicyAssignmentsCreateResponse =
  RoleManagementPolicyAssignment;

/** Optional parameters. */
export interface RoleManagementPolicyAssignmentsDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface RoleManagementPolicyAssignmentsListForScopeOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listForScope operation. */
export type RoleManagementPolicyAssignmentsListForScopeResponse =
  RoleManagementPolicyAssignmentListResult;

/** Optional parameters. */
export interface RoleManagementPolicyAssignmentsListForScopeNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listForScopeNext operation. */
export type RoleManagementPolicyAssignmentsListForScopeNextResponse =
  RoleManagementPolicyAssignmentListResult;

/** Optional parameters. */
export interface AuthorizationManagementClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
