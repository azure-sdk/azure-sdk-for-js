/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      isDataAction: {
        serializedName: "isDataAction",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay",
        },
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      actionType: {
        serializedName: "actionType",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail",
        },
      },
    },
  },
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail",
            },
          },
        },
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo",
            },
          },
        },
      },
    },
  },
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } },
        },
      },
    },
  },
};

export const MdsResourceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MdsResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MdsResource",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const MdsResourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MdsResourceProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      version: {
        serializedName: "version",
        type: {
          name: "String",
        },
      },
      enableCopilot: {
        serializedName: "enableCopilot",
        type: {
          name: "Boolean",
        },
      },
      enableDiagnosticSettings: {
        serializedName: "enableDiagnosticSettings",
        type: {
          name: "Boolean",
        },
      },
      aadApplicationId: {
        constraints: {
          Pattern: new RegExp(
            "^[0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}$",
          ),
        },
        serializedName: "aadApplicationId",
        required: true,
        type: {
          name: "String",
        },
      },
      aksAdminGroupId: {
        defaultValue: "00000000-0000-0000-0000-000000000000",
        constraints: {
          Pattern: new RegExp(
            "^[{]?[0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}[}]?$|^$",
          ),
        },
        serializedName: "aksAdminGroupId",
        type: {
          name: "String",
        },
      },
      serviceUrl: {
        serializedName: "serviceUrl",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      aksProfile: {
        serializedName: "aksProfile",
        type: {
          name: "Composite",
          className: "AksProfile",
        },
      },
      storageProfile: {
        serializedName: "storageProfile",
        type: {
          name: "Composite",
          className: "StorageProfile",
        },
      },
      databaseProfile: {
        serializedName: "databaseProfile",
        type: {
          name: "Composite",
          className: "DatabaseProfile",
        },
      },
      adxProfile: {
        serializedName: "adxProfile",
        type: {
          name: "Composite",
          className: "AdxProfile",
        },
      },
      redisProfile: {
        serializedName: "redisProfile",
        type: {
          name: "Composite",
          className: "RedisProfile",
        },
      },
      monitoringProfile: {
        serializedName: "monitoringProfile",
        type: {
          name: "Composite",
          className: "MonitoringProfile",
        },
      },
      eventHubProfile: {
        serializedName: "eventHubProfile",
        type: {
          name: "Composite",
          className: "EventHubProfile",
        },
      },
      functionAppProfile: {
        serializedName: "functionAppProfile",
        type: {
          name: "Composite",
          className: "FunctionAppProfile",
        },
      },
      openAIProfile: {
        serializedName: "openAIProfile",
        type: {
          name: "Composite",
          className: "OpenAIProfile",
        },
      },
      managedResourceGroupConfiguration: {
        serializedName: "managedResourceGroupConfiguration",
        type: {
          name: "Composite",
          className: "ManagedResourceGroupConfiguration",
        },
      },
      managedOnBehalfOfConfiguration: {
        serializedName: "managedOnBehalfOfConfiguration",
        type: {
          name: "Composite",
          className: "ManagedOnBehalfOfConfiguration",
        },
      },
      cmkProfile: {
        serializedName: "cmkProfile",
        type: {
          name: "Composite",
          className: "CmkProfile",
        },
      },
      fabricProfile: {
        serializedName: "fabricProfile",
        type: {
          name: "Composite",
          className: "FabricProfile",
        },
      },
      userManagedOpenAIProfile: {
        serializedName: "userManagedOpenAIProfile",
        type: {
          name: "Composite",
          className: "UserManagedOpenAIProfile",
        },
      },
      denyAssignmentExclusions: {
        serializedName: "denyAssignmentExclusions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DenyAssignmentExclusion",
            },
          },
        },
      },
      resourceState: {
        serializedName: "resourceState",
        type: {
          name: "String",
        },
      },
      redundancyState: {
        serializedName: "redundancyState",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AksProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AksProfile",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const StorageProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageProfile",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const DatabaseProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseProfile",
    modelProperties: {
      cosmosId: {
        serializedName: "cosmosId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AdxProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AdxProfile",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      uri: {
        serializedName: "uri",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      dataIngestionUri: {
        serializedName: "dataIngestionUri",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const RedisProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RedisProfile",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const MonitoringProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MonitoringProfile",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const EventHubProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EventHubProfile",
    modelProperties: {
      adxInstanceId: {
        serializedName: "adxInstanceId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      hostName: {
        serializedName: "hostName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const FunctionAppProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FunctionAppProfile",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OpenAIProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OpenAIProfile",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      gptModelName: {
        serializedName: "gptModelName",
        type: {
          name: "String",
        },
      },
      gptModelVersion: {
        serializedName: "gptModelVersion",
        type: {
          name: "String",
        },
      },
      gptModelCapacity: {
        serializedName: "gptModelCapacity",
        type: {
          name: "Number",
        },
      },
      gptModelSkuName: {
        serializedName: "gptModelSkuName",
        type: {
          name: "String",
        },
      },
      embeddingModelName: {
        serializedName: "embeddingModelName",
        type: {
          name: "String",
        },
      },
      embeddingModelVersion: {
        serializedName: "embeddingModelVersion",
        type: {
          name: "String",
        },
      },
      embeddingModelSkuName: {
        serializedName: "embeddingModelSkuName",
        type: {
          name: "String",
        },
      },
      embeddingModelCapacity: {
        serializedName: "embeddingModelCapacity",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const ManagedResourceGroupConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedResourceGroupConfiguration",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String",
        },
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ManagedOnBehalfOfConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedOnBehalfOfConfiguration",
    modelProperties: {
      moboBrokerResources: {
        serializedName: "moboBrokerResources",
        required: true,
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MoboBrokerResource",
            },
          },
        },
      },
    },
  },
};

export const MoboBrokerResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MoboBrokerResource",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const CmkProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CmkProfile",
    modelProperties: {
      keyUri: {
        serializedName: "keyUri",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const FabricProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FabricProfile",
    modelProperties: {
      keyUri: {
        serializedName: "keyUri",
        required: true,
        type: {
          name: "String",
        },
      },
      oneLakeUri: {
        serializedName: "oneLakeUri",
        required: true,
        type: {
          name: "String",
        },
      },
      oneLakePath: {
        serializedName: "oneLakePath",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const UserManagedOpenAIProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserManagedOpenAIProfile",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String",
        },
      },
      gptModelDeploymentName: {
        serializedName: "gptModelDeploymentName",
        required: true,
        type: {
          name: "String",
        },
      },
      embeddingModelDeploymentName: {
        serializedName: "embeddingModelDeploymentName",
        required: true,
        type: {
          name: "String",
        },
      },
      embeddingModelType: {
        serializedName: "embeddingModelType",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const DenyAssignmentExclusion: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DenyAssignmentExclusion",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ManagedServiceIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedServiceIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "Uuid",
        },
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "Uuid",
        },
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String",
        },
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "UserAssignedIdentity" },
          },
        },
      },
    },
  },
};

export const UserAssignedIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserAssignedIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "Uuid",
        },
      },
      clientId: {
        serializedName: "clientId",
        readOnly: true,
        type: {
          name: "Uuid",
        },
      },
    },
  },
};

export const Sku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String",
        },
      },
      tier: {
        serializedName: "tier",
        type: {
          name: "Enum",
          allowedValues: ["Free", "Basic", "Standard", "Premium"],
        },
      },
      size: {
        serializedName: "size",
        type: {
          name: "String",
        },
      },
      family: {
        serializedName: "family",
        type: {
          name: "String",
        },
      },
      capacity: {
        serializedName: "capacity",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData",
        },
      },
    },
  },
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String",
        },
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String",
        },
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime",
        },
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String",
        },
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String",
        },
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const MdsResourceUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MdsResourceUpdate",
    modelProperties: {
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className:
            "AzureResourceManagerCommonTypesManagedServiceIdentityUpdate",
        },
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "AzureResourceManagerCommonTypesSkuUpdate",
        },
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "MdsResourceUpdateProperties",
        },
      },
    },
  },
};

export const AzureResourceManagerCommonTypesManagedServiceIdentityUpdate: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "AzureResourceManagerCommonTypesManagedServiceIdentityUpdate",
      modelProperties: {
        type: {
          serializedName: "type",
          type: {
            name: "String",
          },
        },
        userAssignedIdentities: {
          serializedName: "userAssignedIdentities",
          type: {
            name: "Dictionary",
            value: {
              type: { name: "Composite", className: "UserAssignedIdentity" },
            },
          },
        },
      },
    },
  };

export const AzureResourceManagerCommonTypesSkuUpdate: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "AzureResourceManagerCommonTypesSkuUpdate",
      modelProperties: {
        name: {
          serializedName: "name",
          type: {
            name: "String",
          },
        },
        tier: {
          serializedName: "tier",
          type: {
            name: "Enum",
            allowedValues: ["Free", "Basic", "Standard", "Premium"],
          },
        },
        size: {
          serializedName: "size",
          type: {
            name: "String",
          },
        },
        family: {
          serializedName: "family",
          type: {
            name: "String",
          },
        },
        capacity: {
          serializedName: "capacity",
          type: {
            name: "Number",
          },
        },
      },
    },
  };

export const MdsResourceUpdateProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MdsResourceUpdateProperties",
    modelProperties: {
      version: {
        serializedName: "version",
        type: {
          name: "String",
        },
      },
      enableCopilot: {
        serializedName: "enableCopilot",
        type: {
          name: "Boolean",
        },
      },
      enableDiagnosticSettings: {
        serializedName: "enableDiagnosticSettings",
        type: {
          name: "Boolean",
        },
      },
      openAIProfile: {
        serializedName: "openAIProfile",
        type: {
          name: "Composite",
          className: "OpenAIProfile",
        },
      },
      fabricProfile: {
        serializedName: "fabricProfile",
        type: {
          name: "Composite",
          className: "FabricProfileUpdate",
        },
      },
      userManagedOpenAIProfile: {
        serializedName: "userManagedOpenAIProfile",
        type: {
          name: "Composite",
          className: "UserManagedOpenAIProfileUpdate",
        },
      },
      denyAssignmentExclusions: {
        serializedName: "denyAssignmentExclusions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DenyAssignmentExclusion",
            },
          },
        },
      },
      resourceState: {
        serializedName: "resourceState",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const FabricProfileUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FabricProfileUpdate",
    modelProperties: {
      keyUri: {
        serializedName: "keyUri",
        type: {
          name: "String",
        },
      },
      oneLakeUri: {
        serializedName: "oneLakeUri",
        type: {
          name: "String",
        },
      },
      oneLakePath: {
        serializedName: "oneLakePath",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const UserManagedOpenAIProfileUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserManagedOpenAIProfileUpdate",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String",
        },
      },
      gptModelDeploymentName: {
        serializedName: "gptModelDeploymentName",
        type: {
          name: "String",
        },
      },
      embeddingModelDeploymentName: {
        serializedName: "embeddingModelDeploymentName",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AvailableVersionListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AvailableVersionListResult",
    modelProperties: {
      versions: {
        serializedName: "versions",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationVersion",
            },
          },
        },
      },
    },
  },
};

export const ApplicationVersion: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationVersion",
    modelProperties: {
      version: {
        serializedName: "version",
        required: true,
        type: {
          name: "String",
        },
      },
      isLatest: {
        serializedName: "isLatest",
        required: true,
        type: {
          name: "Boolean",
        },
      },
      isPreview: {
        serializedName: "isPreview",
        required: true,
        type: {
          name: "Boolean",
        },
      },
      isDeprecated: {
        serializedName: "isDeprecated",
        required: true,
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const MdsResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MdsResource",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "MdsResourceProperties",
        },
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity",
        },
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku",
        },
      },
    },
  },
};

export const ManufacturingDataServicesCreateOrUpdateHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "ManufacturingDataServicesCreateOrUpdateHeaders",
      modelProperties: {
        azureAsyncOperation: {
          serializedName: "azure-asyncoperation",
          type: {
            name: "String",
          },
        },
        retryAfter: {
          serializedName: "retry-after",
          type: {
            name: "Number",
          },
        },
      },
    },
  };

export const ManufacturingDataServicesUpdateHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "ManufacturingDataServicesUpdateHeaders",
      modelProperties: {
        location: {
          serializedName: "location",
          type: {
            name: "String",
          },
        },
        retryAfter: {
          serializedName: "retry-after",
          type: {
            name: "Number",
          },
        },
      },
    },
  };

export const ManufacturingDataServicesDeleteHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "ManufacturingDataServicesDeleteHeaders",
      modelProperties: {
        location: {
          serializedName: "location",
          type: {
            name: "String",
          },
        },
        retryAfter: {
          serializedName: "retry-after",
          type: {
            name: "Number",
          },
        },
      },
    },
  };
