/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      isDataAction: {
        serializedName: "isDataAction",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay",
        },
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      actionType: {
        serializedName: "actionType",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail",
        },
      },
    },
  },
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail",
            },
          },
        },
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo",
            },
          },
        },
      },
    },
  },
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } },
        },
      },
    },
  },
};

export const CustomLocationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomLocationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CustomLocation",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const CustomLocationPropertiesAuthentication: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "CustomLocationPropertiesAuthentication",
      modelProperties: {
        type: {
          serializedName: "type",
          type: {
            name: "String",
          },
        },
        value: {
          serializedName: "value",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const Identity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Identity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData",
        },
      },
    },
  },
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String",
        },
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String",
        },
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime",
        },
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String",
        },
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String",
        },
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const PatchableCustomLocations: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PatchableCustomLocations",
    modelProperties: {
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "Identity",
        },
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      authentication: {
        serializedName: "properties.authentication",
        type: {
          name: "Composite",
          className: "CustomLocationPropertiesAuthentication",
        },
      },
      clusterExtensionIds: {
        serializedName: "properties.clusterExtensionIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      displayName: {
        serializedName: "properties.displayName",
        type: {
          name: "String",
        },
      },
      hostResourceId: {
        serializedName: "properties.hostResourceId",
        type: {
          name: "String",
        },
      },
      hostType: {
        serializedName: "properties.hostType",
        type: {
          name: "String",
        },
      },
      namespace: {
        serializedName: "properties.namespace",
        type: {
          name: "String",
        },
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const EnabledResourceTypeListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EnabledResourceTypeListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EnabledResourceType",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const EnabledResourceTypePropertiesTypesMetadataItem: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "EnabledResourceTypePropertiesTypesMetadataItem",
      modelProperties: {
        apiVersion: {
          serializedName: "apiVersion",
          type: {
            name: "String",
          },
        },
        resourceProviderNamespace: {
          serializedName: "resourceProviderNamespace",
          type: {
            name: "String",
          },
        },
        resourceType: {
          serializedName: "resourceType",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const CustomLocationFindTargetResourceGroupProperties: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "CustomLocationFindTargetResourceGroupProperties",
      modelProperties: {
        labels: {
          serializedName: "labels",
          type: {
            name: "Dictionary",
            value: { type: { name: "String" } },
          },
        },
      },
    },
  };

export const CustomLocationFindTargetResourceGroupResult: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "CustomLocationFindTargetResourceGroupResult",
      modelProperties: {
        matchedResourceSyncRule: {
          serializedName: "matchedResourceSyncRule",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        targetResourceGroup: {
          serializedName: "targetResourceGroup",
          readOnly: true,
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const ResourceSyncRuleListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceSyncRuleListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceSyncRule",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ResourceSyncRulePropertiesSelector: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceSyncRulePropertiesSelector",
    modelProperties: {
      matchExpressions: {
        serializedName: "matchExpressions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MatchExpressionsProperties",
            },
          },
        },
      },
      matchLabels: {
        serializedName: "matchLabels",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
    },
  },
};

export const MatchExpressionsProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MatchExpressionsProperties",
    modelProperties: {
      key: {
        serializedName: "key",
        type: {
          name: "String",
        },
      },
      operator: {
        serializedName: "operator",
        type: {
          name: "String",
        },
      },
      values: {
        serializedName: "values",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const PatchableResourceSyncRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PatchableResourceSyncRule",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      priority: {
        serializedName: "properties.priority",
        type: {
          name: "Number",
        },
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      selector: {
        serializedName: "properties.selector",
        type: {
          name: "Composite",
          className: "ResourceSyncRulePropertiesSelector",
        },
      },
      targetResourceGroup: {
        serializedName: "properties.targetResourceGroup",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties,
    },
  },
};

export const CustomLocation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomLocation",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "Identity",
        },
      },
      authentication: {
        serializedName: "properties.authentication",
        type: {
          name: "Composite",
          className: "CustomLocationPropertiesAuthentication",
        },
      },
      clusterExtensionIds: {
        serializedName: "properties.clusterExtensionIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      displayName: {
        serializedName: "properties.displayName",
        type: {
          name: "String",
        },
      },
      hostResourceId: {
        serializedName: "properties.hostResourceId",
        type: {
          name: "String",
        },
      },
      hostType: {
        serializedName: "properties.hostType",
        type: {
          name: "String",
        },
      },
      namespace: {
        serializedName: "properties.namespace",
        type: {
          name: "String",
        },
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ResourceSyncRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceSyncRule",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      priority: {
        serializedName: "properties.priority",
        type: {
          name: "Number",
        },
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      selector: {
        serializedName: "properties.selector",
        type: {
          name: "Composite",
          className: "ResourceSyncRulePropertiesSelector",
        },
      },
      targetResourceGroup: {
        serializedName: "properties.targetResourceGroup",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const EnabledResourceType: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EnabledResourceType",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      clusterExtensionId: {
        serializedName: "properties.clusterExtensionId",
        type: {
          name: "String",
        },
      },
      extensionType: {
        serializedName: "properties.extensionType",
        type: {
          name: "String",
        },
      },
      typesMetadata: {
        serializedName: "properties.typesMetadata",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EnabledResourceTypePropertiesTypesMetadataItem",
            },
          },
        },
      },
    },
  },
};

export const CustomLocationsCreateOrUpdateHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "CustomLocationsCreateOrUpdateHeaders",
      modelProperties: {
        azureAsyncOperation: {
          serializedName: "azure-asyncoperation",
          type: {
            name: "String",
          },
        },
        retryAfter: {
          serializedName: "retry-after",
          type: {
            name: "Number",
          },
        },
      },
    },
  };

export const CustomLocationsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomLocationsDeleteHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const ResourceSyncRulesCreateOrUpdateHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "ResourceSyncRulesCreateOrUpdateHeaders",
      modelProperties: {
        azureAsyncOperation: {
          serializedName: "azure-asyncoperation",
          type: {
            name: "String",
          },
        },
        retryAfter: {
          serializedName: "retry-after",
          type: {
            name: "Number",
          },
        },
      },
    },
  };
