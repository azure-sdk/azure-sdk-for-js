/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      isDataAction: {
        serializedName: "isDataAction",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay",
        },
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      actionType: {
        serializedName: "actionType",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail",
        },
      },
    },
  },
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail",
            },
          },
        },
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo",
            },
          },
        },
      },
    },
  },
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } },
        },
      },
    },
  },
};

export const TargetListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TargetListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Target",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData",
        },
      },
    },
  },
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String",
        },
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String",
        },
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime",
        },
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String",
        },
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String",
        },
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const CapabilityListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CapabilityListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Capability",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ExperimentListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExperimentListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Experiment",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Step: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Step",
    modelProperties: {
      name: {
        constraints: {
          MinLength: 1,
        },
        serializedName: "name",
        required: true,
        type: {
          name: "String",
        },
      },
      branches: {
        serializedName: "branches",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Branch",
            },
          },
        },
      },
    },
  },
};

export const Branch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Branch",
    modelProperties: {
      name: {
        constraints: {
          MinLength: 1,
        },
        serializedName: "name",
        required: true,
        type: {
          name: "String",
        },
      },
      actions: {
        serializedName: "actions",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Action",
            },
          },
        },
      },
    },
  },
};

export const Action: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Action",
    uberParent: "Action",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type",
    },
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String",
        },
      },
      name: {
        constraints: {
          MaxLength: 2048,
        },
        serializedName: "name",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ChaosTargetSelector: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ChaosTargetSelector",
    uberParent: "ChaosTargetSelector",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type",
    },
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String",
        },
      },
      id: {
        constraints: {
          MinLength: 1,
        },
        serializedName: "id",
        required: true,
        type: {
          name: "String",
        },
      },
      filter: {
        serializedName: "filter",
        type: {
          name: "Composite",
          className: "Filter",
        },
      },
    },
  },
};

export const Filter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Filter",
    uberParent: "Filter",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type",
    },
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ManagedServiceIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedServiceIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "Uuid",
        },
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "Uuid",
        },
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String",
        },
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "UserAssignedIdentity" },
          },
        },
      },
    },
  },
};

export const UserAssignedIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserAssignedIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "Uuid",
        },
      },
      clientId: {
        serializedName: "clientId",
        readOnly: true,
        type: {
          name: "Uuid",
        },
      },
    },
  },
};

export const OperationStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationStatus",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail",
        },
      },
      id: {
        serializedName: "id",
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "String",
        },
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "String",
        },
      },
      status: {
        serializedName: "status",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AzureCoreFoundationsErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureCoreFoundationsErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "AzureCoreFoundationsError",
        },
      },
    },
  },
};

export const AzureCoreFoundationsError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureCoreFoundationsError",
    modelProperties: {
      code: {
        serializedName: "code",
        required: true,
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        required: true,
        type: {
          name: "String",
        },
      },
      target: {
        serializedName: "target",
        type: {
          name: "String",
        },
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AzureCoreFoundationsError",
            },
          },
        },
      },
      innererror: {
        serializedName: "innererror",
        type: {
          name: "Composite",
          className: "AzureCoreFoundationsInnerError",
        },
      },
    },
  },
};

export const AzureCoreFoundationsInnerError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureCoreFoundationsInnerError",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String",
        },
      },
      innererror: {
        serializedName: "innererror",
        type: {
          name: "Composite",
          className: "AzureCoreFoundationsInnerError",
        },
      },
    },
  },
};

export const TargetTypeListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TargetTypeListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TargetType",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const CapabilityTypeListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CapabilityTypeListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CapabilityType",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const CapabilityTypePropertiesRuntimeProperties: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "CapabilityTypePropertiesRuntimeProperties",
      modelProperties: {
        kind: {
          serializedName: "kind",
          readOnly: true,
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const ExperimentUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExperimentUpdate",
    modelProperties: {
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ResourceIdentity",
        },
      },
    },
  },
};

export const ResourceIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceIdentity",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String",
        },
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "UserAssignedIdentityAutoGenerated",
            },
          },
        },
      },
    },
  },
};

export const UserAssignedIdentityAutoGenerated: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserAssignedIdentityAutoGenerated",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      clientId: {
        serializedName: "clientId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ExperimentExecutionListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExperimentExecutionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExperimentExecution",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ExperimentExecutionDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExperimentExecutionDetails",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ExperimentExecutionDetailsProperties",
        },
      },
    },
  },
};

export const ExperimentExecutionDetailsProperties: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "ExperimentExecutionDetailsProperties",
      modelProperties: {
        status: {
          serializedName: "status",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        startedAt: {
          serializedName: "startedAt",
          readOnly: true,
          type: {
            name: "DateTime",
          },
        },
        stoppedAt: {
          serializedName: "stoppedAt",
          readOnly: true,
          type: {
            name: "DateTime",
          },
        },
        failureReason: {
          serializedName: "failureReason",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        lastActionAt: {
          serializedName: "lastActionAt",
          readOnly: true,
          type: {
            name: "DateTime",
          },
        },
        runInformation: {
          serializedName: "runInformation",
          type: {
            name: "Composite",
            className: "ExperimentExecutionDetailsPropertiesRunInformation",
          },
        },
      },
    },
  };

export const ExperimentExecutionDetailsPropertiesRunInformation: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "ExperimentExecutionDetailsPropertiesRunInformation",
      modelProperties: {
        steps: {
          serializedName: "steps",
          readOnly: true,
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "Composite",
                className: "StepStatus",
              },
            },
          },
        },
      },
    },
  };

export const StepStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StepStatus",
    modelProperties: {
      stepName: {
        serializedName: "stepName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      stepId: {
        serializedName: "stepId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      branches: {
        serializedName: "branches",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BranchStatus",
            },
          },
        },
      },
    },
  },
};

export const BranchStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BranchStatus",
    modelProperties: {
      branchName: {
        serializedName: "branchName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      branchId: {
        serializedName: "branchId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      actions: {
        serializedName: "actions",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ActionStatus",
            },
          },
        },
      },
    },
  },
};

export const ActionStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ActionStatus",
    modelProperties: {
      actionName: {
        serializedName: "actionName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      actionId: {
        serializedName: "actionId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      startTime: {
        serializedName: "startTime",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      endTime: {
        serializedName: "endTime",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      targets: {
        serializedName: "targets",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExperimentExecutionActionTargetDetailsProperties",
            },
          },
        },
      },
    },
  },
};

export const ExperimentExecutionActionTargetDetailsProperties: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "ExperimentExecutionActionTargetDetailsProperties",
      modelProperties: {
        status: {
          serializedName: "status",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        target: {
          serializedName: "target",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        targetFailedTime: {
          serializedName: "targetFailedTime",
          readOnly: true,
          type: {
            name: "DateTime",
          },
        },
        targetCompletedTime: {
          serializedName: "targetCompletedTime",
          readOnly: true,
          type: {
            name: "DateTime",
          },
        },
        error: {
          serializedName: "error",
          type: {
            name: "Composite",
            className: "ExperimentExecutionActionTargetDetailsError",
          },
        },
      },
    },
  };

export const ExperimentExecutionActionTargetDetailsError: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "ExperimentExecutionActionTargetDetailsError",
      modelProperties: {
        code: {
          serializedName: "code",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        message: {
          serializedName: "message",
          readOnly: true,
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const TargetReference: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TargetReference",
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String",
        },
      },
      id: {
        constraints: {
          Pattern: new RegExp(
            "^\\/[Ss][Uu][Bb][Ss][Cc][Rr][Ii][Pp][Tt][Ii][Oo][Nn][Ss]\\/[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\/[Rr][Ee][Ss][Oo][Uu][Rr][Cc][Ee][Gg][Rr][Oo][Uu][Pp][Ss]\\/[a-zA-Z0-9_\\-\\.\\(\\)]*[a-zA-Z0-9_\\-\\(\\)]\\/[Pp][Rr][Oo][Vv][Ii][Dd][Ee][Rr][Ss]\\/[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\/[a-zA-Z0-9_\\-\\.]+\\/[a-zA-Z0-9_\\-\\.]+\\/[Pp][Rr][Oo][Vv][Ii][Dd][Ee][Rr][Ss]\\/[Mm][Ii][Cc][Rr][Oo][Ss][Oo][Ff][Tt]\\.[Cc][Hh][Aa][Oo][Ss]\\/[Tt][Aa][Rr][Gg][Ee][Tt][Ss]\\/[a-zA-Z0-9_\\-\\.]+$",
          ),
        },
        serializedName: "id",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ChaosTargetSimpleFilterParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ChaosTargetSimpleFilterParameters",
    modelProperties: {
      zones: {
        serializedName: "zones",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const KeyValuePair: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KeyValuePair",
    modelProperties: {
      key: {
        constraints: {
          MinLength: 1,
        },
        serializedName: "key",
        required: true,
        type: {
          name: "String",
        },
      },
      value: {
        constraints: {
          MinLength: 1,
        },
        serializedName: "value",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties,
    },
  },
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ContinuousAction: coreClient.CompositeMapper = {
  serializedName: "continuous",
  type: {
    name: "Composite",
    className: "ContinuousAction",
    uberParent: "Action",
    polymorphicDiscriminator: Action.type.polymorphicDiscriminator,
    modelProperties: {
      ...Action.type.modelProperties,
      duration: {
        serializedName: "duration",
        required: true,
        type: {
          name: "TimeSpan",
        },
      },
      parameters: {
        serializedName: "parameters",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "KeyValuePair",
            },
          },
        },
      },
      selectorId: {
        constraints: {
          MinLength: 1,
        },
        serializedName: "selectorId",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const DelayAction: coreClient.CompositeMapper = {
  serializedName: "delay",
  type: {
    name: "Composite",
    className: "DelayAction",
    uberParent: "Action",
    polymorphicDiscriminator: Action.type.polymorphicDiscriminator,
    modelProperties: {
      ...Action.type.modelProperties,
      duration: {
        serializedName: "duration",
        required: true,
        type: {
          name: "TimeSpan",
        },
      },
    },
  },
};

export const DiscreteAction: coreClient.CompositeMapper = {
  serializedName: "discrete",
  type: {
    name: "Composite",
    className: "DiscreteAction",
    uberParent: "Action",
    polymorphicDiscriminator: Action.type.polymorphicDiscriminator,
    modelProperties: {
      ...Action.type.modelProperties,
      parameters: {
        serializedName: "parameters",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "KeyValuePair",
            },
          },
        },
      },
      selectorId: {
        constraints: {
          MinLength: 1,
        },
        serializedName: "selectorId",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ChaosTargetListSelector: coreClient.CompositeMapper = {
  serializedName: "List",
  type: {
    name: "Composite",
    className: "ChaosTargetListSelector",
    uberParent: "ChaosTargetSelector",
    polymorphicDiscriminator: ChaosTargetSelector.type.polymorphicDiscriminator,
    modelProperties: {
      ...ChaosTargetSelector.type.modelProperties,
      targets: {
        serializedName: "targets",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TargetReference",
            },
          },
        },
      },
    },
  },
};

export const ChaosTargetQuerySelector: coreClient.CompositeMapper = {
  serializedName: "Query",
  type: {
    name: "Composite",
    className: "ChaosTargetQuerySelector",
    uberParent: "ChaosTargetSelector",
    polymorphicDiscriminator: ChaosTargetSelector.type.polymorphicDiscriminator,
    modelProperties: {
      ...ChaosTargetSelector.type.modelProperties,
      queryString: {
        serializedName: "queryString",
        required: true,
        type: {
          name: "String",
        },
      },
      subscriptionIds: {
        serializedName: "subscriptionIds",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const ChaosTargetSimpleFilter: coreClient.CompositeMapper = {
  serializedName: "Simple",
  type: {
    name: "Composite",
    className: "ChaosTargetSimpleFilter",
    uberParent: "Filter",
    polymorphicDiscriminator: Filter.type.polymorphicDiscriminator,
    modelProperties: {
      ...Filter.type.modelProperties,
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "ChaosTargetSimpleFilterParameters",
        },
      },
    },
  },
};

export const Target: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Target",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } },
        },
      },
    },
  },
};

export const Capability: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Capability",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      publisher: {
        serializedName: "properties.publisher",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      targetType: {
        serializedName: "properties.targetType",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "properties.description",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      parametersSchema: {
        constraints: {
          MaxLength: 2048,
        },
        serializedName: "properties.parametersSchema",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      urn: {
        constraints: {
          MaxLength: 2048,
        },
        serializedName: "properties.urn",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const TargetType: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TargetType",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      displayName: {
        serializedName: "properties.displayName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "properties.description",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      propertiesSchema: {
        constraints: {
          MaxLength: 2048,
        },
        serializedName: "properties.propertiesSchema",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      resourceTypes: {
        serializedName: "properties.resourceTypes",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const CapabilityType: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CapabilityType",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      publisher: {
        serializedName: "properties.publisher",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      targetType: {
        serializedName: "properties.targetType",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      displayName: {
        serializedName: "properties.displayName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "properties.description",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      parametersSchema: {
        constraints: {
          MaxLength: 2048,
        },
        serializedName: "properties.parametersSchema",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      urn: {
        constraints: {
          MaxLength: 2048,
        },
        serializedName: "properties.urn",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      kind: {
        serializedName: "properties.kind",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      azureRbacActions: {
        serializedName: "properties.azureRbacActions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      azureRbacDataActions: {
        serializedName: "properties.azureRbacDataActions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      runtimeProperties: {
        serializedName: "properties.runtimeProperties",
        type: {
          name: "Composite",
          className: "CapabilityTypePropertiesRuntimeProperties",
        },
      },
    },
  },
};

export const ExperimentExecution: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExperimentExecution",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      status: {
        serializedName: "properties.status",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      startedAt: {
        serializedName: "properties.startedAt",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      stoppedAt: {
        serializedName: "properties.stoppedAt",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const Experiment: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Experiment",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity",
        },
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      steps: {
        serializedName: "properties.steps",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Step",
            },
          },
        },
      },
      selectors: {
        serializedName: "properties.selectors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ChaosTargetSelector",
            },
          },
        },
      },
    },
  },
};

export const ExperimentsCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExperimentsCreateOrUpdateHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const ExperimentsUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExperimentsUpdateHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ExperimentsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExperimentsDeleteHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ExperimentsCancelHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExperimentsCancelHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ExperimentsStartHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExperimentsStartHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OperationStatusesOperationsGetExceptionHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "OperationStatusesOperationsGetExceptionHeaders",
      modelProperties: {
        xMsErrorCode: {
          serializedName: "x-ms-error-code",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export let discriminators = {
  Action: Action,
  ChaosTargetSelector: ChaosTargetSelector,
  Filter: Filter,
  "Action.continuous": ContinuousAction,
  "Action.delay": DelayAction,
  "Action.discrete": DiscreteAction,
  "ChaosTargetSelector.List": ChaosTargetListSelector,
  "ChaosTargetSelector.Query": ChaosTargetQuerySelector,
  "Filter.Simple": ChaosTargetSimpleFilter,
};
