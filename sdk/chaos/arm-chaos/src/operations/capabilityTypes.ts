/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { CapabilityTypes } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ChaosManagementClient } from "../chaosManagementClient";
import {
  CapabilityType,
  CapabilityTypesListByTargetTypeNextOptionalParams,
  CapabilityTypesListByTargetTypeOptionalParams,
  CapabilityTypesListByTargetTypeResponse,
  CapabilityTypesGetOptionalParams,
  CapabilityTypesGetResponse,
  CapabilityTypesListByTargetTypeNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing CapabilityTypes operations. */
export class CapabilityTypesImpl implements CapabilityTypes {
  private readonly client: ChaosManagementClient;

  /**
   * Initialize a new instance of the class CapabilityTypes class.
   * @param client Reference to the service client
   */
  constructor(client: ChaosManagementClient) {
    this.client = client;
  }

  /**
   * Get a list of Capability Type resources for given Target Type and location.
   * @param location The name of Azure region.
   * @param targetTypeName String that represents a Target Type resource name.
   * @param options The options parameters.
   */
  public listByTargetType(
    location: string,
    targetTypeName: string,
    options?: CapabilityTypesListByTargetTypeOptionalParams,
  ): PagedAsyncIterableIterator<CapabilityType> {
    const iter = this.listByTargetTypePagingAll(
      location,
      targetTypeName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByTargetTypePagingPage(
          location,
          targetTypeName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByTargetTypePagingPage(
    location: string,
    targetTypeName: string,
    options?: CapabilityTypesListByTargetTypeOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<CapabilityType[]> {
    let result: CapabilityTypesListByTargetTypeResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByTargetType(location, targetTypeName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByTargetTypeNext(
        location,
        targetTypeName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByTargetTypePagingAll(
    location: string,
    targetTypeName: string,
    options?: CapabilityTypesListByTargetTypeOptionalParams,
  ): AsyncIterableIterator<CapabilityType> {
    for await (const page of this.listByTargetTypePagingPage(
      location,
      targetTypeName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Get a list of Capability Type resources for given Target Type and location.
   * @param location The name of Azure region.
   * @param targetTypeName String that represents a Target Type resource name.
   * @param options The options parameters.
   */
  private _listByTargetType(
    location: string,
    targetTypeName: string,
    options?: CapabilityTypesListByTargetTypeOptionalParams,
  ): Promise<CapabilityTypesListByTargetTypeResponse> {
    return this.client.sendOperationRequest(
      { location, targetTypeName, options },
      listByTargetTypeOperationSpec,
    );
  }

  /**
   * Get a Capability Type resource for given Target Type and location.
   * @param location The name of Azure region.
   * @param targetTypeName String that represents a Target Type resource name.
   * @param capabilityTypeName String that represents a Capability Type resource name.
   * @param options The options parameters.
   */
  get(
    location: string,
    targetTypeName: string,
    capabilityTypeName: string,
    options?: CapabilityTypesGetOptionalParams,
  ): Promise<CapabilityTypesGetResponse> {
    return this.client.sendOperationRequest(
      { location, targetTypeName, capabilityTypeName, options },
      getOperationSpec,
    );
  }

  /**
   * ListByTargetTypeNext
   * @param location The name of Azure region.
   * @param targetTypeName String that represents a Target Type resource name.
   * @param nextLink The nextLink from the previous successful call to the ListByTargetType method.
   * @param options The options parameters.
   */
  private _listByTargetTypeNext(
    location: string,
    targetTypeName: string,
    nextLink: string,
    options?: CapabilityTypesListByTargetTypeNextOptionalParams,
  ): Promise<CapabilityTypesListByTargetTypeNextResponse> {
    return this.client.sendOperationRequest(
      { location, targetTypeName, nextLink, options },
      listByTargetTypeNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByTargetTypeOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Chaos/locations/{location}/targetTypes/{targetTypeName}/capabilityTypes",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CapabilityTypeListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion, Parameters.continuationToken],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
    Parameters.targetTypeName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Chaos/locations/{location}/targetTypes/{targetTypeName}/capabilityTypes/{capabilityTypeName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CapabilityType,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
    Parameters.targetTypeName,
    Parameters.capabilityTypeName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByTargetTypeNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CapabilityTypeListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.location,
    Parameters.targetTypeName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
