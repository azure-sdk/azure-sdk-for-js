/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { Targets } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ChaosManagementClient } from "../chaosManagementClient";
import {
  Target,
  TargetsListByLocationNextOptionalParams,
  TargetsListByLocationOptionalParams,
  TargetsListByLocationResponse,
  TargetsGetOptionalParams,
  TargetsGetResponse,
  TargetsCreateOrUpdateOptionalParams,
  TargetsCreateOrUpdateResponse,
  TargetsDeleteOptionalParams,
  TargetsListByLocationNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Targets operations. */
export class TargetsImpl implements Targets {
  private readonly client: ChaosManagementClient;

  /**
   * Initialize a new instance of the class Targets class.
   * @param client Reference to the service client
   */
  constructor(client: ChaosManagementClient) {
    this.client = client;
  }

  /**
   * Get a list of Target resources that extend a tracked regional resource.
   * @param parentProviderNamespace The parent resource provider namespace.
   * @param parentResourceType The parent resource type.
   * @param parentResourceName The parent resource name.
   * @param location The name of Azure region.
   * @param options The options parameters.
   */
  public listByLocation(
    parentProviderNamespace: string,
    parentResourceType: string,
    parentResourceName: string,
    location: string,
    options?: TargetsListByLocationOptionalParams,
  ): PagedAsyncIterableIterator<Target> {
    const iter = this.listByLocationPagingAll(
      parentProviderNamespace,
      parentResourceType,
      parentResourceName,
      location,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByLocationPagingPage(
          parentProviderNamespace,
          parentResourceType,
          parentResourceName,
          location,
          options,
          settings,
        );
      },
    };
  }

  private async *listByLocationPagingPage(
    parentProviderNamespace: string,
    parentResourceType: string,
    parentResourceName: string,
    location: string,
    options?: TargetsListByLocationOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<Target[]> {
    let result: TargetsListByLocationResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByLocation(
        parentProviderNamespace,
        parentResourceType,
        parentResourceName,
        location,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByLocationNext(
        parentProviderNamespace,
        parentResourceType,
        parentResourceName,
        location,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByLocationPagingAll(
    parentProviderNamespace: string,
    parentResourceType: string,
    parentResourceName: string,
    location: string,
    options?: TargetsListByLocationOptionalParams,
  ): AsyncIterableIterator<Target> {
    for await (const page of this.listByLocationPagingPage(
      parentProviderNamespace,
      parentResourceType,
      parentResourceName,
      location,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Get a list of Target resources that extend a tracked regional resource.
   * @param parentProviderNamespace The parent resource provider namespace.
   * @param parentResourceType The parent resource type.
   * @param parentResourceName The parent resource name.
   * @param location The name of Azure region.
   * @param options The options parameters.
   */
  private _listByLocation(
    parentProviderNamespace: string,
    parentResourceType: string,
    parentResourceName: string,
    location: string,
    options?: TargetsListByLocationOptionalParams,
  ): Promise<TargetsListByLocationResponse> {
    return this.client.sendOperationRequest(
      {
        parentProviderNamespace,
        parentResourceType,
        parentResourceName,
        location,
        options,
      },
      listByLocationOperationSpec,
    );
  }

  /**
   * Get a Target resource that extends a tracked regional resource.
   * @param parentProviderNamespace The parent resource provider namespace.
   * @param parentResourceType The parent resource type.
   * @param parentResourceName The parent resource name.
   * @param location The name of Azure region.
   * @param targetName String that represents a Target resource name.
   * @param options The options parameters.
   */
  get(
    parentProviderNamespace: string,
    parentResourceType: string,
    parentResourceName: string,
    location: string,
    targetName: string,
    options?: TargetsGetOptionalParams,
  ): Promise<TargetsGetResponse> {
    return this.client.sendOperationRequest(
      {
        parentProviderNamespace,
        parentResourceType,
        parentResourceName,
        location,
        targetName,
        options,
      },
      getOperationSpec,
    );
  }

  /**
   * Create or update a Target resource that extends a tracked regional resource.
   * @param parentProviderNamespace The parent resource provider namespace.
   * @param parentResourceType The parent resource type.
   * @param parentResourceName The parent resource name.
   * @param location The name of Azure region.
   * @param targetName String that represents a Target resource name.
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  createOrUpdate(
    parentProviderNamespace: string,
    parentResourceType: string,
    parentResourceName: string,
    location: string,
    targetName: string,
    resource: Target,
    options?: TargetsCreateOrUpdateOptionalParams,
  ): Promise<TargetsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        parentProviderNamespace,
        parentResourceType,
        parentResourceName,
        location,
        targetName,
        resource,
        options,
      },
      createOrUpdateOperationSpec,
    );
  }

  /**
   * Delete a Target resource that extends a tracked regional resource.
   * @param parentProviderNamespace The parent resource provider namespace.
   * @param parentResourceType The parent resource type.
   * @param parentResourceName The parent resource name.
   * @param location The name of Azure region.
   * @param targetName String that represents a Target resource name.
   * @param options The options parameters.
   */
  delete(
    parentProviderNamespace: string,
    parentResourceType: string,
    parentResourceName: string,
    location: string,
    targetName: string,
    options?: TargetsDeleteOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      {
        parentProviderNamespace,
        parentResourceType,
        parentResourceName,
        location,
        targetName,
        options,
      },
      deleteOperationSpec,
    );
  }

  /**
   * ListByLocationNext
   * @param parentProviderNamespace The parent resource provider namespace.
   * @param parentResourceType The parent resource type.
   * @param parentResourceName The parent resource name.
   * @param location The name of Azure region.
   * @param nextLink The nextLink from the previous successful call to the ListByLocation method.
   * @param options The options parameters.
   */
  private _listByLocationNext(
    parentProviderNamespace: string,
    parentResourceType: string,
    parentResourceName: string,
    location: string,
    nextLink: string,
    options?: TargetsListByLocationNextOptionalParams,
  ): Promise<TargetsListByLocationNextResponse> {
    return this.client.sendOperationRequest(
      {
        parentProviderNamespace,
        parentResourceType,
        parentResourceName,
        location,
        nextLink,
        options,
      },
      listByLocationNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByLocationOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/{parentProviderNamespace}/{parentResourceType}/{parentResourceName}/providers/Microsoft.Chaos/locations/{location}/targets",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TargetListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion, Parameters.continuationToken],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.parentProviderNamespace,
    Parameters.parentResourceType,
    Parameters.parentResourceName,
    Parameters.location,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/{parentProviderNamespace}/{parentResourceType}/{parentResourceName}/providers/Microsoft.Chaos/locations/{location}/targets/{targetName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Target,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.parentProviderNamespace,
    Parameters.parentResourceType,
    Parameters.parentResourceName,
    Parameters.location,
    Parameters.targetName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/{parentProviderNamespace}/{parentResourceType}/{parentResourceName}/providers/Microsoft.Chaos/locations/{location}/targets/{targetName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Target,
    },
    201: {
      bodyMapper: Mappers.Target,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.resource,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.parentProviderNamespace,
    Parameters.parentResourceType,
    Parameters.parentResourceName,
    Parameters.location,
    Parameters.targetName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/{parentProviderNamespace}/{parentResourceType}/{parentResourceName}/providers/Microsoft.Chaos/locations/{location}/targets/{targetName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.parentProviderNamespace,
    Parameters.parentResourceType,
    Parameters.parentResourceName,
    Parameters.location,
    Parameters.targetName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByLocationNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TargetListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.parentProviderNamespace,
    Parameters.parentResourceType,
    Parameters.parentResourceName,
    Parameters.location,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
