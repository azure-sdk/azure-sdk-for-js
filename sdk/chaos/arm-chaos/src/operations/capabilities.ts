/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { Capabilities } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ChaosManagementClient } from "../chaosManagementClient";
import {
  Capability,
  CapabilitiesListByTargetNextOptionalParams,
  CapabilitiesListByTargetOptionalParams,
  CapabilitiesListByTargetResponse,
  CapabilitiesGetOptionalParams,
  CapabilitiesGetResponse,
  CapabilitiesCreateOrUpdateOptionalParams,
  CapabilitiesCreateOrUpdateResponse,
  CapabilitiesDeleteOptionalParams,
  CapabilitiesListByTargetNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Capabilities operations. */
export class CapabilitiesImpl implements Capabilities {
  private readonly client: ChaosManagementClient;

  /**
   * Initialize a new instance of the class Capabilities class.
   * @param client Reference to the service client
   */
  constructor(client: ChaosManagementClient) {
    this.client = client;
  }

  /**
   * Get a list of Capability resources that extend a Target resource..
   * @param parentProviderNamespace The parent resource provider namespace.
   * @param parentResourceType The parent resource type.
   * @param parentResourceName The parent resource name.
   * @param location The name of Azure region.
   * @param targetName String that represents a Target resource name.
   * @param options The options parameters.
   */
  public listByTarget(
    parentProviderNamespace: string,
    parentResourceType: string,
    parentResourceName: string,
    location: string,
    targetName: string,
    options?: CapabilitiesListByTargetOptionalParams,
  ): PagedAsyncIterableIterator<Capability> {
    const iter = this.listByTargetPagingAll(
      parentProviderNamespace,
      parentResourceType,
      parentResourceName,
      location,
      targetName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByTargetPagingPage(
          parentProviderNamespace,
          parentResourceType,
          parentResourceName,
          location,
          targetName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByTargetPagingPage(
    parentProviderNamespace: string,
    parentResourceType: string,
    parentResourceName: string,
    location: string,
    targetName: string,
    options?: CapabilitiesListByTargetOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<Capability[]> {
    let result: CapabilitiesListByTargetResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByTarget(
        parentProviderNamespace,
        parentResourceType,
        parentResourceName,
        location,
        targetName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByTargetNext(
        parentProviderNamespace,
        parentResourceType,
        parentResourceName,
        location,
        targetName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByTargetPagingAll(
    parentProviderNamespace: string,
    parentResourceType: string,
    parentResourceName: string,
    location: string,
    targetName: string,
    options?: CapabilitiesListByTargetOptionalParams,
  ): AsyncIterableIterator<Capability> {
    for await (const page of this.listByTargetPagingPage(
      parentProviderNamespace,
      parentResourceType,
      parentResourceName,
      location,
      targetName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Get a list of Capability resources that extend a Target resource..
   * @param parentProviderNamespace The parent resource provider namespace.
   * @param parentResourceType The parent resource type.
   * @param parentResourceName The parent resource name.
   * @param location The name of Azure region.
   * @param targetName String that represents a Target resource name.
   * @param options The options parameters.
   */
  private _listByTarget(
    parentProviderNamespace: string,
    parentResourceType: string,
    parentResourceName: string,
    location: string,
    targetName: string,
    options?: CapabilitiesListByTargetOptionalParams,
  ): Promise<CapabilitiesListByTargetResponse> {
    return this.client.sendOperationRequest(
      {
        parentProviderNamespace,
        parentResourceType,
        parentResourceName,
        location,
        targetName,
        options,
      },
      listByTargetOperationSpec,
    );
  }

  /**
   * Get a Capability resource that extends a Target resource.
   * @param parentProviderNamespace The parent resource provider namespace.
   * @param parentResourceType The parent resource type.
   * @param parentResourceName The parent resource name.
   * @param location The name of Azure region.
   * @param targetName String that represents a Target resource name.
   * @param capabilityName String that represents a Capability resource name.
   * @param options The options parameters.
   */
  get(
    parentProviderNamespace: string,
    parentResourceType: string,
    parentResourceName: string,
    location: string,
    targetName: string,
    capabilityName: string,
    options?: CapabilitiesGetOptionalParams,
  ): Promise<CapabilitiesGetResponse> {
    return this.client.sendOperationRequest(
      {
        parentProviderNamespace,
        parentResourceType,
        parentResourceName,
        location,
        targetName,
        capabilityName,
        options,
      },
      getOperationSpec,
    );
  }

  /**
   * Create or update a Capability resource that extends a Target resource.
   * @param parentProviderNamespace The parent resource provider namespace.
   * @param parentResourceType The parent resource type.
   * @param parentResourceName The parent resource name.
   * @param location The name of Azure region.
   * @param targetName String that represents a Target resource name.
   * @param capabilityName String that represents a Capability resource name.
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  createOrUpdate(
    parentProviderNamespace: string,
    parentResourceType: string,
    parentResourceName: string,
    location: string,
    targetName: string,
    capabilityName: string,
    resource: Capability,
    options?: CapabilitiesCreateOrUpdateOptionalParams,
  ): Promise<CapabilitiesCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        parentProviderNamespace,
        parentResourceType,
        parentResourceName,
        location,
        targetName,
        capabilityName,
        resource,
        options,
      },
      createOrUpdateOperationSpec,
    );
  }

  /**
   * Delete a Capability that extends a Target resource.
   * @param parentProviderNamespace The parent resource provider namespace.
   * @param parentResourceType The parent resource type.
   * @param parentResourceName The parent resource name.
   * @param location The name of Azure region.
   * @param targetName String that represents a Target resource name.
   * @param capabilityName String that represents a Capability resource name.
   * @param options The options parameters.
   */
  delete(
    parentProviderNamespace: string,
    parentResourceType: string,
    parentResourceName: string,
    location: string,
    targetName: string,
    capabilityName: string,
    options?: CapabilitiesDeleteOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      {
        parentProviderNamespace,
        parentResourceType,
        parentResourceName,
        location,
        targetName,
        capabilityName,
        options,
      },
      deleteOperationSpec,
    );
  }

  /**
   * ListByTargetNext
   * @param parentProviderNamespace The parent resource provider namespace.
   * @param parentResourceType The parent resource type.
   * @param parentResourceName The parent resource name.
   * @param location The name of Azure region.
   * @param targetName String that represents a Target resource name.
   * @param nextLink The nextLink from the previous successful call to the ListByTarget method.
   * @param options The options parameters.
   */
  private _listByTargetNext(
    parentProviderNamespace: string,
    parentResourceType: string,
    parentResourceName: string,
    location: string,
    targetName: string,
    nextLink: string,
    options?: CapabilitiesListByTargetNextOptionalParams,
  ): Promise<CapabilitiesListByTargetNextResponse> {
    return this.client.sendOperationRequest(
      {
        parentProviderNamespace,
        parentResourceType,
        parentResourceName,
        location,
        targetName,
        nextLink,
        options,
      },
      listByTargetNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByTargetOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/{parentProviderNamespace}/{parentResourceType}/{parentResourceName}/providers/Microsoft.Chaos/locations/{location}/targets/{targetName}/capabilities",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CapabilityListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion, Parameters.continuationToken],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.parentProviderNamespace,
    Parameters.parentResourceType,
    Parameters.parentResourceName,
    Parameters.location,
    Parameters.targetName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/{parentProviderNamespace}/{parentResourceType}/{parentResourceName}/providers/Microsoft.Chaos/locations/{location}/targets/{targetName}/capabilities/{capabilityName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Capability,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.parentProviderNamespace,
    Parameters.parentResourceType,
    Parameters.parentResourceName,
    Parameters.location,
    Parameters.targetName,
    Parameters.capabilityName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/{parentProviderNamespace}/{parentResourceType}/{parentResourceName}/providers/Microsoft.Chaos/locations/{location}/targets/{targetName}/capabilities/{capabilityName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Capability,
    },
    201: {
      bodyMapper: Mappers.Capability,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.resource1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.parentProviderNamespace,
    Parameters.parentResourceType,
    Parameters.parentResourceName,
    Parameters.location,
    Parameters.targetName,
    Parameters.capabilityName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/{parentProviderNamespace}/{parentResourceType}/{parentResourceName}/providers/Microsoft.Chaos/locations/{location}/targets/{targetName}/capabilities/{capabilityName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.parentProviderNamespace,
    Parameters.parentResourceType,
    Parameters.parentResourceName,
    Parameters.location,
    Parameters.targetName,
    Parameters.capabilityName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByTargetNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CapabilityListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.parentProviderNamespace,
    Parameters.parentResourceType,
    Parameters.parentResourceName,
    Parameters.location,
    Parameters.targetName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
