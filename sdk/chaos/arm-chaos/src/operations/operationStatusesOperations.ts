/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { OperationStatusesOperations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ChaosManagementClient } from "../chaosManagementClient";
import {
  OperationStatusesOperationsGetOptionalParams,
  OperationStatusesOperationsGetResponse,
} from "../models";

/** Class containing OperationStatusesOperations operations. */
export class OperationStatusesOperationsImpl
  implements OperationStatusesOperations
{
  private readonly client: ChaosManagementClient;

  /**
   * Initialize a new instance of the class OperationStatusesOperations class.
   * @param client Reference to the service client
   */
  constructor(client: ChaosManagementClient) {
    this.client = client;
  }

  /**
   * Get the status of a long running azure asynchronous operation.
   * @param location The region name of operation.
   * @param asyncOperationId The operation Id.
   * @param subscriptionId GUID that represents an Azure subscription ID.
   * @param options The options parameters.
   */
  get(
    location: string,
    asyncOperationId: string,
    subscriptionId: string,
    options?: OperationStatusesOperationsGetOptionalParams,
  ): Promise<OperationStatusesOperationsGetResponse> {
    return this.client.sendOperationRequest(
      { location, asyncOperationId, subscriptionId, options },
      getOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Chaos/locations/{location}/operationsStatuses/{asyncOperationId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus,
    },
    default: {
      bodyMapper: Mappers.AzureCoreFoundationsErrorResponse,
      headersMapper: Mappers.OperationStatusesOperationsGetExceptionHeaders,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.location1,
    Parameters.asyncOperationId,
    Parameters.subscriptionId1,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
