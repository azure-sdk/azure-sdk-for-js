/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { ExperimentExecutions } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ChaosManagementClient } from "../chaosManagementClient";
import {
  ExperimentExecution,
  ExperimentExecutionsListByExperimentNextOptionalParams,
  ExperimentExecutionsListByExperimentOptionalParams,
  ExperimentExecutionsListByExperimentResponse,
  ExperimentExecutionsGetExecutionOptionalParams,
  ExperimentExecutionsGetExecutionResponse,
  ExperimentExecutionsExecutionDetailsOptionalParams,
  ExperimentExecutionsExecutionDetailsResponse,
  ExperimentExecutionsListByExperimentNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ExperimentExecutions operations. */
export class ExperimentExecutionsImpl implements ExperimentExecutions {
  private readonly client: ChaosManagementClient;

  /**
   * Initialize a new instance of the class ExperimentExecutions class.
   * @param client Reference to the service client
   */
  constructor(client: ChaosManagementClient) {
    this.client = client;
  }

  /**
   * Get a list of executions of an Experiment resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param experimentName String that represents a Experiment resource name.
   * @param options The options parameters.
   */
  public listByExperiment(
    resourceGroupName: string,
    experimentName: string,
    options?: ExperimentExecutionsListByExperimentOptionalParams,
  ): PagedAsyncIterableIterator<ExperimentExecution> {
    const iter = this.listByExperimentPagingAll(
      resourceGroupName,
      experimentName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByExperimentPagingPage(
          resourceGroupName,
          experimentName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByExperimentPagingPage(
    resourceGroupName: string,
    experimentName: string,
    options?: ExperimentExecutionsListByExperimentOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<ExperimentExecution[]> {
    let result: ExperimentExecutionsListByExperimentResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByExperiment(
        resourceGroupName,
        experimentName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByExperimentNext(
        resourceGroupName,
        experimentName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByExperimentPagingAll(
    resourceGroupName: string,
    experimentName: string,
    options?: ExperimentExecutionsListByExperimentOptionalParams,
  ): AsyncIterableIterator<ExperimentExecution> {
    for await (const page of this.listByExperimentPagingPage(
      resourceGroupName,
      experimentName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Get a list of executions of an Experiment resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param experimentName String that represents a Experiment resource name.
   * @param options The options parameters.
   */
  private _listByExperiment(
    resourceGroupName: string,
    experimentName: string,
    options?: ExperimentExecutionsListByExperimentOptionalParams,
  ): Promise<ExperimentExecutionsListByExperimentResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, experimentName, options },
      listByExperimentOperationSpec,
    );
  }

  /**
   * Get an execution of an Experiment resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param experimentName String that represents a Experiment resource name.
   * @param executionId GUID that represents a Experiment execution detail.
   * @param options The options parameters.
   */
  getExecution(
    resourceGroupName: string,
    experimentName: string,
    executionId: string,
    options?: ExperimentExecutionsGetExecutionOptionalParams,
  ): Promise<ExperimentExecutionsGetExecutionResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, experimentName, executionId, options },
      getExecutionOperationSpec,
    );
  }

  /**
   * Execution details of an experiment resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param experimentName String that represents a Experiment resource name.
   * @param executionId GUID that represents a Experiment execution detail.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  executionDetails(
    resourceGroupName: string,
    experimentName: string,
    executionId: string,
    body: Record<string, unknown>,
    options?: ExperimentExecutionsExecutionDetailsOptionalParams,
  ): Promise<ExperimentExecutionsExecutionDetailsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, experimentName, executionId, body, options },
      executionDetailsOperationSpec,
    );
  }

  /**
   * ListByExperimentNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param experimentName String that represents a Experiment resource name.
   * @param nextLink The nextLink from the previous successful call to the ListByExperiment method.
   * @param options The options parameters.
   */
  private _listByExperimentNext(
    resourceGroupName: string,
    experimentName: string,
    nextLink: string,
    options?: ExperimentExecutionsListByExperimentNextOptionalParams,
  ): Promise<ExperimentExecutionsListByExperimentNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, experimentName, nextLink, options },
      listByExperimentNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByExperimentOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/experiments/{experimentName}/executions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ExperimentExecutionListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.experimentName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getExecutionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/experiments/{experimentName}/executions/{executionId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ExperimentExecution,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.experimentName,
    Parameters.executionId,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const executionDetailsOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/experiments/{experimentName}/executions/{executionId}/executionDetails",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ExperimentExecutionDetails,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.experimentName,
    Parameters.executionId,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const listByExperimentNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ExperimentExecutionListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.experimentName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
