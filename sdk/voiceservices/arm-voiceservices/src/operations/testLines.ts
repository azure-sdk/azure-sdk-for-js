/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { TestLines } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MicrosoftVoiceServices } from "../microsoftVoiceServices";
import {
  TestLine,
  TestLinesListByCommunicationsGatewayNextOptionalParams,
  TestLinesListByCommunicationsGatewayOptionalParams,
  TestLinesListByCommunicationsGatewayResponse,
  TestLinesListByCommunicationsGatewayNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing TestLines operations. */
export class TestLinesImpl implements TestLines {
  private readonly client: MicrosoftVoiceServices;

  /**
   * Initialize a new instance of the class TestLines class.
   * @param client Reference to the service client
   */
  constructor(client: MicrosoftVoiceServices) {
    this.client = client;
  }

  /**
   * List TestLine resources by CommunicationsGateway
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationsGatewayName Unique identifier for this deployment
   * @param options The options parameters.
   */
  public listByCommunicationsGateway(
    resourceGroupName: string,
    communicationsGatewayName: string,
    options?: TestLinesListByCommunicationsGatewayOptionalParams,
  ): PagedAsyncIterableIterator<TestLine> {
    const iter = this.listByCommunicationsGatewayPagingAll(
      resourceGroupName,
      communicationsGatewayName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByCommunicationsGatewayPagingPage(
          resourceGroupName,
          communicationsGatewayName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByCommunicationsGatewayPagingPage(
    resourceGroupName: string,
    communicationsGatewayName: string,
    options?: TestLinesListByCommunicationsGatewayOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<TestLine[]> {
    let result: TestLinesListByCommunicationsGatewayResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByCommunicationsGateway(
        resourceGroupName,
        communicationsGatewayName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByCommunicationsGatewayNext(
        resourceGroupName,
        communicationsGatewayName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByCommunicationsGatewayPagingAll(
    resourceGroupName: string,
    communicationsGatewayName: string,
    options?: TestLinesListByCommunicationsGatewayOptionalParams,
  ): AsyncIterableIterator<TestLine> {
    for await (const page of this.listByCommunicationsGatewayPagingPage(
      resourceGroupName,
      communicationsGatewayName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List TestLine resources by CommunicationsGateway
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationsGatewayName Unique identifier for this deployment
   * @param options The options parameters.
   */
  private _listByCommunicationsGateway(
    resourceGroupName: string,
    communicationsGatewayName: string,
    options?: TestLinesListByCommunicationsGatewayOptionalParams,
  ): Promise<TestLinesListByCommunicationsGatewayResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, communicationsGatewayName, options },
      listByCommunicationsGatewayOperationSpec,
    );
  }

  /**
   * ListByCommunicationsGatewayNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationsGatewayName Unique identifier for this deployment
   * @param nextLink The nextLink from the previous successful call to the ListByCommunicationsGateway
   *                 method.
   * @param options The options parameters.
   */
  private _listByCommunicationsGatewayNext(
    resourceGroupName: string,
    communicationsGatewayName: string,
    nextLink: string,
    options?: TestLinesListByCommunicationsGatewayNextOptionalParams,
  ): Promise<TestLinesListByCommunicationsGatewayNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, communicationsGatewayName, nextLink, options },
      listByCommunicationsGatewayNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByCommunicationsGatewayOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VoiceServices/communicationsGateways/{communicationsGatewayName}/testLines",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TestLineListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.communicationsGatewayName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByCommunicationsGatewayNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TestLineListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.communicationsGatewayName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
