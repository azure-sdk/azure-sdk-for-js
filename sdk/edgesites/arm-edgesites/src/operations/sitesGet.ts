/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { SitesGet } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { EdgeSites } from "../edgeSites";
import {
  SitesGetAtSubscriptionOptionalParams,
  SitesGetAtSubscriptionResponse,
  SitesGetByResourceGroupOptionalParams,
  SitesGetByResourceGroupResponse
} from "../models";

/** Class containing SitesGet operations. */
export class SitesGetImpl implements SitesGet {
  private readonly client: EdgeSites;

  /**
   * Initialize a new instance of the class SitesGet class.
   * @param client Reference to the service client
   */
  constructor(client: EdgeSites) {
    this.client = client;
  }

  /**
   * Get a Site at Subscription scope
   * @param options The options parameters.
   */
  atSubscription(
    options?: SitesGetAtSubscriptionOptionalParams
  ): Promise<SitesGetAtSubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      atSubscriptionOperationSpec
    );
  }

  /**
   * Get a Site at Resource Group scope
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  byResourceGroup(
    resourceGroupName: string,
    options?: SitesGetByResourceGroupOptionalParams
  ): Promise<SitesGetByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      byResourceGroupOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const atSubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Edge/sites/{siteName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Site
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.siteName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const byResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/sites/{siteName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Site
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
