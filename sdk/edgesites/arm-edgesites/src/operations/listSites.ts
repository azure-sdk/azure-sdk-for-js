/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { ListSites } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { EdgeSites } from "../edgeSites";
import {
  Site,
  ListSitesBySubscriptionNextOptionalParams,
  ListSitesBySubscriptionOptionalParams,
  ListSitesBySubscriptionResponse,
  ListSitesByResourceGroupNextOptionalParams,
  ListSitesByResourceGroupOptionalParams,
  ListSitesByResourceGroupResponse,
  ListSitesBySubscriptionNextResponse,
  ListSitesByResourceGroupNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ListSites operations. */
export class ListSitesImpl implements ListSites {
  private readonly client: EdgeSites;

  /**
   * Initialize a new instance of the class ListSites class.
   * @param client Reference to the service client
   */
  constructor(client: EdgeSites) {
    this.client = client;
  }

  /**
   * List Site resources by Subscription
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: ListSitesBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<Site> {
    const iter = this.bySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.bySubscriptionPagingPage(options, settings);
      }
    };
  }

  private async *bySubscriptionPagingPage(
    options?: ListSitesBySubscriptionOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Site[]> {
    let result: ListSitesBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._bySubscription(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._bySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *bySubscriptionPagingAll(
    options?: ListSitesBySubscriptionOptionalParams
  ): AsyncIterableIterator<Site> {
    for await (const page of this.bySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * List Site resources by ResourceGroup
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: ListSitesByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<Site> {
    const iter = this.byResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.byResourceGroupPagingPage(
          resourceGroupName,
          options,
          settings
        );
      }
    };
  }

  private async *byResourceGroupPagingPage(
    resourceGroupName: string,
    options?: ListSitesByResourceGroupOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Site[]> {
    let result: ListSitesByResourceGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._byResourceGroup(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._byResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *byResourceGroupPagingAll(
    resourceGroupName: string,
    options?: ListSitesByResourceGroupOptionalParams
  ): AsyncIterableIterator<Site> {
    for await (const page of this.byResourceGroupPagingPage(
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List Site resources by Subscription
   * @param options The options parameters.
   */
  private _bySubscription(
    options?: ListSitesBySubscriptionOptionalParams
  ): Promise<ListSitesBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      bySubscriptionOperationSpec
    );
  }

  /**
   * List Site resources by ResourceGroup
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _byResourceGroup(
    resourceGroupName: string,
    options?: ListSitesByResourceGroupOptionalParams
  ): Promise<ListSitesByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      byResourceGroupOperationSpec
    );
  }

  /**
   * BySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the BySubscription method.
   * @param options The options parameters.
   */
  private _bySubscriptionNext(
    nextLink: string,
    options?: ListSitesBySubscriptionNextOptionalParams
  ): Promise<ListSitesBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      bySubscriptionNextOperationSpec
    );
  }

  /**
   * ByResourceGroupNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ByResourceGroup method.
   * @param options The options parameters.
   */
  private _byResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: ListSitesByResourceGroupNextOptionalParams
  ): Promise<ListSitesByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      byResourceGroupNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const bySubscriptionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Edge/sites",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SiteListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const byResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/sites",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SiteListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const bySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SiteListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const byResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SiteListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
