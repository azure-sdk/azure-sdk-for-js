/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { SitesUpdate } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { EdgeSites } from "../edgeSites";
import {
  SiteUpdate,
  SitesUpdateAtSubscriptionOptionalParams,
  SitesUpdateAtSubscriptionResponse,
  SitesUpdateByResourceGroupOptionalParams,
  SitesUpdateByResourceGroupResponse
} from "../models";

/** Class containing SitesUpdate operations. */
export class SitesUpdateImpl implements SitesUpdate {
  private readonly client: EdgeSites;

  /**
   * Initialize a new instance of the class SitesUpdate class.
   * @param client Reference to the service client
   */
  constructor(client: EdgeSites) {
    this.client = client;
  }

  /**
   * Update a Site at Subscription Scope
   * @param site The resource properties to be updated.
   * @param options The options parameters.
   */
  atSubscription(
    site: SiteUpdate,
    options?: SitesUpdateAtSubscriptionOptionalParams
  ): Promise<SitesUpdateAtSubscriptionResponse> {
    return this.client.sendOperationRequest(
      { site, options },
      atSubscriptionOperationSpec
    );
  }

  /**
   * Update a Site at Resource Group scope
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param site The resource properties to be updated.
   * @param options The options parameters.
   */
  byResourceGroup(
    resourceGroupName: string,
    site: SiteUpdate,
    options?: SitesUpdateByResourceGroupOptionalParams
  ): Promise<SitesUpdateByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, site, options },
      byResourceGroupOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const atSubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Edge/sites/{siteName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Site
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.site1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.siteName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const byResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/sites/{siteName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Site
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.site1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
