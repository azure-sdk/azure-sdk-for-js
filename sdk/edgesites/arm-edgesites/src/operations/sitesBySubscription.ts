/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { SitesBySubscription } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { EdgeSites } from "../edgeSites";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  Site,
  SitesBySubscriptionListNextOptionalParams,
  SitesBySubscriptionListOptionalParams,
  SitesBySubscriptionListResponse,
  SitesBySubscriptionGetOptionalParams,
  SitesBySubscriptionGetResponse,
  SitesBySubscriptionCreateOrUpdateOptionalParams,
  SitesBySubscriptionCreateOrUpdateResponse,
  SiteUpdate,
  SitesBySubscriptionUpdateOptionalParams,
  SitesBySubscriptionUpdateResponse,
  SitesBySubscriptionDeleteOptionalParams,
  SitesBySubscriptionListNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing SitesBySubscription operations. */
export class SitesBySubscriptionImpl implements SitesBySubscription {
  private readonly client: EdgeSites;

  /**
   * Initialize a new instance of the class SitesBySubscription class.
   * @param client Reference to the service client
   */
  constructor(client: EdgeSites) {
    this.client = client;
  }

  /**
   * List Site resources by subscription ID
   * @param options The options parameters.
   */
  public list(
    options?: SitesBySubscriptionListOptionalParams,
  ): PagedAsyncIterableIterator<Site> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(options, settings);
      },
    };
  }

  private async *listPagingPage(
    options?: SitesBySubscriptionListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<Site[]> {
    let result: SitesBySubscriptionListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    options?: SitesBySubscriptionListOptionalParams,
  ): AsyncIterableIterator<Site> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * List Site resources by subscription ID
   * @param options The options parameters.
   */
  private _list(
    options?: SitesBySubscriptionListOptionalParams,
  ): Promise<SitesBySubscriptionListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * Get a Site
   * @param siteName Name of Site resource
   * @param options The options parameters.
   */
  get(
    siteName: string,
    options?: SitesBySubscriptionGetOptionalParams,
  ): Promise<SitesBySubscriptionGetResponse> {
    return this.client.sendOperationRequest(
      { siteName, options },
      getOperationSpec,
    );
  }

  /**
   * Create a Site
   * @param siteName Name of Site resource
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    siteName: string,
    resource: Site,
    options?: SitesBySubscriptionCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<SitesBySubscriptionCreateOrUpdateResponse>,
      SitesBySubscriptionCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<SitesBySubscriptionCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { siteName, resource, options },
      spec: createOrUpdateOperationSpec,
    });
    const poller = await createHttpPoller<
      SitesBySubscriptionCreateOrUpdateResponse,
      OperationState<SitesBySubscriptionCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create a Site
   * @param siteName Name of Site resource
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    siteName: string,
    resource: Site,
    options?: SitesBySubscriptionCreateOrUpdateOptionalParams,
  ): Promise<SitesBySubscriptionCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(siteName, resource, options);
    return poller.pollUntilDone();
  }

  /**
   * Update a Site
   * @param siteName Name of Site resource
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  update(
    siteName: string,
    properties: SiteUpdate,
    options?: SitesBySubscriptionUpdateOptionalParams,
  ): Promise<SitesBySubscriptionUpdateResponse> {
    return this.client.sendOperationRequest(
      { siteName, properties, options },
      updateOperationSpec,
    );
  }

  /**
   * Delete a Site
   * @param siteName Name of Site resource
   * @param options The options parameters.
   */
  delete(
    siteName: string,
    options?: SitesBySubscriptionDeleteOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { siteName, options },
      deleteOperationSpec,
    );
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    nextLink: string,
    options?: SitesBySubscriptionListNextOptionalParams,
  ): Promise<SitesBySubscriptionListNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Edge/sites",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SiteListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Edge/sites/{siteName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Site,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.siteName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Edge/sites/{siteName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Site,
    },
    201: {
      bodyMapper: Mappers.Site,
    },
    202: {
      bodyMapper: Mappers.Site,
    },
    204: {
      bodyMapper: Mappers.Site,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.resource,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.siteName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Edge/sites/{siteName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Site,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.properties,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.siteName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Edge/sites/{siteName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.siteName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SiteListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
