/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter,
} from "@azure/core-client";
import {
  Zone as ZoneMapper,
  ZoneUpdate as ZoneUpdateMapper,
  DnsResourceReferenceRequest as DnsResourceReferenceRequestMapper,
  RecordSet as RecordSetMapper,
  DnssecConfig as DnssecConfigMapper,
} from "../models/mappers.js";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String",
    },
  },
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2023-07-01-preview",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String",
    },
  },
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    constraints: {
      MinLength: 1,
    },
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const top: OperationQueryParameter = {
  parameterPath: ["options", "top"],
  mapper: {
    serializedName: "$top",
    type: {
      name: "Number",
    },
  },
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    constraints: {
      MaxLength: 90,
      MinLength: 1,
    },
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const zoneName: OperationURLParameter = {
  parameterPath: "zoneName",
  mapper: {
    serializedName: "zoneName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String",
    },
  },
};

export const parameters: OperationParameter = {
  parameterPath: "parameters",
  mapper: ZoneMapper,
};

export const ifMatch: OperationParameter = {
  parameterPath: ["options", "ifMatch"],
  mapper: {
    serializedName: "if-match",
    type: {
      name: "String",
    },
  },
};

export const ifNoneMatch: OperationParameter = {
  parameterPath: ["options", "ifNoneMatch"],
  mapper: {
    serializedName: "if-none-match",
    type: {
      name: "String",
    },
  },
};

export const parameters1: OperationParameter = {
  parameterPath: "parameters",
  mapper: ZoneUpdateMapper,
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const body: OperationParameter = {
  parameterPath: "body",
  mapper: DnsResourceReferenceRequestMapper,
};

export const recordType: OperationURLParameter = {
  parameterPath: "recordType",
  mapper: {
    serializedName: "recordType",
    required: true,
    type: {
      name: "Enum",
      allowedValues: [
        "A",
        "AAAA",
        "CAA",
        "CNAME",
        "MX",
        "NS",
        "PTR",
        "SOA",
        "SRV",
        "TXT",
        "TLSA",
        "DS",
        "NAPTR",
      ],
    },
  },
};

export const recordsetnamesuffix: OperationQueryParameter = {
  parameterPath: ["options", "recordsetnamesuffix"],
  mapper: {
    serializedName: "$recordsetnamesuffix",
    type: {
      name: "String",
    },
  },
};

export const relativeRecordSetName: OperationURLParameter = {
  parameterPath: "relativeRecordSetName",
  mapper: {
    serializedName: "relativeRecordSetName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const parameters2: OperationParameter = {
  parameterPath: "parameters",
  mapper: RecordSetMapper,
};

export const recordSetNameSuffix: OperationQueryParameter = {
  parameterPath: ["options", "recordSetNameSuffix"],
  mapper: {
    serializedName: "$recordsetnamesuffix",
    type: {
      name: "String",
    },
  },
};

export const resource: OperationParameter = {
  parameterPath: "resource",
  mapper: DnssecConfigMapper,
};
