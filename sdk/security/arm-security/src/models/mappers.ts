/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const HealthReportsList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HealthReportsList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HealthReport"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceDetails",
    modelProperties: {
      source: {
        serializedName: "source",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      connectorId: {
        serializedName: "connectorId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EnvironmentDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EnvironmentDetails",
    modelProperties: {
      nativeResourceId: {
        serializedName: "nativeResourceId",
        type: {
          name: "String"
        }
      },
      environmentHierarchyId: {
        serializedName: "environmentHierarchyId",
        type: {
          name: "String"
        }
      },
      organizationalHierarchyId: {
        serializedName: "organizationalHierarchyId",
        type: {
          name: "String"
        }
      },
      subscriptionId: {
        serializedName: "subscriptionId",
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HealthDataClassification: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HealthDataClassification",
    modelProperties: {
      component: {
        serializedName: "component",
        type: {
          name: "String"
        }
      },
      scenario: {
        serializedName: "scenario",
        type: {
          name: "String"
        }
      },
      scope: {
        serializedName: "scope",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Status: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Status",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      reason: {
        serializedName: "reason",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastScannedDate: {
        serializedName: "lastScannedDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      statusChangeDate: {
        serializedName: "statusChangeDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      firstEvaluationDate: {
        serializedName: "firstEvaluationDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const Issue: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Issue",
    modelProperties: {
      issueKey: {
        serializedName: "issueKey",
        required: true,
        type: {
          name: "String"
        }
      },
      issueName: {
        serializedName: "issueName",
        type: {
          name: "String"
        }
      },
      securityValues: {
        serializedName: "securityValues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      issueDescription: {
        serializedName: "issueDescription",
        type: {
          name: "String"
        }
      },
      remediationSteps: {
        serializedName: "remediationSteps",
        type: {
          name: "String"
        }
      },
      remediationScript: {
        serializedName: "remediationScript",
        type: {
          name: "String"
        }
      },
      issueAdditionalData: {
        serializedName: "issueAdditionalData",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail"
            }
          }
        }
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const CustomRecommendationsList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomRecommendationsList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CustomRecommendation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomRecommendationMetaData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomRecommendationMetaData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      createdOn: {
        serializedName: "createdOn",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastUpdatedBy: {
        serializedName: "lastUpdatedBy",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastUpdatedOn: {
        serializedName: "lastUpdatedOn",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const CloudError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudError",
    modelProperties: {
      code: {
        serializedName: "error.code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "error.message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "error.target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "error.details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CloudErrorBody"
            }
          }
        }
      },
      additionalInfo: {
        serializedName: "error.additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const CloudErrorBody: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudErrorBody",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CloudErrorBody"
            }
          }
        }
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const SecurityStandardList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecurityStandardList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SecurityStandard"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AssessmentProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AssessmentProperties",
    modelProperties: {
      assessmentKey: {
        serializedName: "assessmentKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StandardMetadata: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StandardMetadata",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      createdOn: {
        serializedName: "createdOn",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastUpdatedBy: {
        serializedName: "lastUpdatedBy",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastUpdatedOn: {
        serializedName: "lastUpdatedOn",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const AssignedStandardItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AssignedStandardItem",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StandardAssignmentPropertiesExemptionData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StandardAssignmentPropertiesExemptionData",
    modelProperties: {
      exemptionCategory: {
        serializedName: "exemptionCategory",
        type: {
          name: "String"
        }
      },
      assignedAssessment: {
        serializedName: "assignedAssessment",
        type: {
          name: "Composite",
          className: "AssignedAssessmentItem"
        }
      }
    }
  }
};

export const AssignedAssessmentItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AssignedAssessmentItem",
    modelProperties: {
      assessmentKey: {
        serializedName: "assessmentKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StandardAssignmentMetadata: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StandardAssignmentMetadata",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      createdOn: {
        serializedName: "createdOn",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastUpdatedBy: {
        serializedName: "lastUpdatedBy",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastUpdatedOn: {
        serializedName: "lastUpdatedOn",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const StandardAssignmentsList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StandardAssignmentsList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StandardAssignment"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HealthReport: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HealthReport",
    modelProperties: {
      ...Resource.type.modelProperties,
      resourceDetails: {
        serializedName: "properties.resourceDetails",
        type: {
          name: "Composite",
          className: "ResourceDetails"
        }
      },
      environmentDetails: {
        serializedName: "properties.environmentDetails",
        type: {
          name: "Composite",
          className: "EnvironmentDetails"
        }
      },
      healthDataClassification: {
        serializedName: "properties.healthDataClassification",
        type: {
          name: "Composite",
          className: "HealthDataClassification"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "Composite",
          className: "Status"
        }
      },
      affectedDefendersPlans: {
        serializedName: "properties.affectedDefendersPlans",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      affectedDefendersSubPlans: {
        serializedName: "properties.affectedDefendersSubPlans",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      reportAdditionalData: {
        serializedName: "properties.reportAdditionalData",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      issues: {
        serializedName: "properties.issues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Issue"
            }
          }
        }
      }
    }
  }
};

export const CustomRecommendation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomRecommendation",
    modelProperties: {
      ...Resource.type.modelProperties,
      query: {
        serializedName: "properties.query",
        type: {
          name: "String"
        }
      },
      cloudProviders: {
        serializedName: "properties.cloudProviders",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      severity: {
        serializedName: "properties.severity",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      remediationDescription: {
        serializedName: "properties.remediationDescription",
        type: {
          name: "String"
        }
      },
      assessmentKey: {
        serializedName: "properties.assessmentKey",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      metadata: {
        serializedName: "properties.metadata",
        type: {
          name: "Composite",
          className: "CustomRecommendationMetaData"
        }
      }
    }
  }
};

export const SecurityStandard: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecurityStandard",
    modelProperties: {
      ...Resource.type.modelProperties,
      displayName: {
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      },
      standardType: {
        serializedName: "properties.standardType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      assessments: {
        serializedName: "properties.assessments",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AssessmentProperties"
            }
          }
        }
      },
      cloudProviders: {
        serializedName: "properties.cloudProviders",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      policySetDefinitionId: {
        serializedName: "properties.policySetDefinitionId",
        type: {
          name: "String"
        }
      },
      metadata: {
        serializedName: "properties.metadata",
        type: {
          name: "Composite",
          className: "StandardMetadata"
        }
      }
    }
  }
};

export const StandardAssignment: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StandardAssignment",
    modelProperties: {
      ...Resource.type.modelProperties,
      displayName: {
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      assignedStandard: {
        serializedName: "properties.assignedStandard",
        type: {
          name: "Composite",
          className: "AssignedStandardItem"
        }
      },
      effect: {
        serializedName: "properties.effect",
        type: {
          name: "String"
        }
      },
      excludedScopes: {
        serializedName: "properties.excludedScopes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      expiresOn: {
        serializedName: "properties.expiresOn",
        type: {
          name: "DateTime"
        }
      },
      exemptionData: {
        serializedName: "properties.exemptionData",
        type: {
          name: "Composite",
          className: "StandardAssignmentPropertiesExemptionData"
        }
      },
      metadata: {
        serializedName: "properties.metadata",
        type: {
          name: "Composite",
          className: "StandardAssignmentMetadata"
        }
      }
    }
  }
};
