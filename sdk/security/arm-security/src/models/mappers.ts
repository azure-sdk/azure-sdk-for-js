/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const AzureDevOpsOrgListResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureDevOpsOrgListResponse",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AzureDevOpsOrg",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String",
        },
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String",
        },
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime",
        },
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String",
        },
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String",
        },
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const AzureDevOpsOrgProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureDevOpsOrgProperties",
    modelProperties: {
      provisioningStatusMessage: {
        serializedName: "provisioningStatusMessage",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      provisioningStatusUpdateTimeUtc: {
        serializedName: "provisioningStatusUpdateTimeUtc",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      provisioningState: {
        serializedName: "provisioningState",
        type: {
          name: "String",
        },
      },
      onboardingState: {
        serializedName: "onboardingState",
        type: {
          name: "String",
        },
      },
      actionableRemediation: {
        serializedName: "actionableRemediation",
        type: {
          name: "Composite",
          className: "ActionableRemediation",
        },
      },
    },
  },
};

export const ActionableRemediation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ActionableRemediation",
    modelProperties: {
      state: {
        serializedName: "state",
        type: {
          name: "String",
        },
      },
      categoryConfigurations: {
        serializedName: "categoryConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CategoryConfiguration",
            },
          },
        },
      },
      branchConfiguration: {
        serializedName: "branchConfiguration",
        type: {
          name: "Composite",
          className: "TargetBranchConfiguration",
        },
      },
      inheritFromParentState: {
        serializedName: "inheritFromParentState",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const CategoryConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CategoryConfiguration",
    modelProperties: {
      minimumSeverityLevel: {
        serializedName: "minimumSeverityLevel",
        type: {
          name: "String",
        },
      },
      category: {
        serializedName: "category",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const TargetBranchConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TargetBranchConfiguration",
    modelProperties: {
      branchNames: {
        serializedName: "branchNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      annotateDefaultBranch: {
        serializedName: "annotateDefaultBranch",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail",
        },
      },
    },
  },
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail",
            },
          },
        },
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo",
            },
          },
        },
      },
    },
  },
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } },
        },
      },
    },
  },
};

export const AzureDevOpsProjectListResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureDevOpsProjectListResponse",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AzureDevOpsProject",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AzureDevOpsProjectProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureDevOpsProjectProperties",
    modelProperties: {
      provisioningStatusMessage: {
        serializedName: "provisioningStatusMessage",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      provisioningStatusUpdateTimeUtc: {
        serializedName: "provisioningStatusUpdateTimeUtc",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      provisioningState: {
        serializedName: "provisioningState",
        type: {
          name: "String",
        },
      },
      parentOrgName: {
        serializedName: "parentOrgName",
        type: {
          name: "String",
        },
      },
      projectId: {
        serializedName: "projectId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      onboardingState: {
        serializedName: "onboardingState",
        type: {
          name: "String",
        },
      },
      actionableRemediation: {
        serializedName: "actionableRemediation",
        type: {
          name: "Composite",
          className: "ActionableRemediation",
        },
      },
    },
  },
};

export const AzureDevOpsRepositoryListResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureDevOpsRepositoryListResponse",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AzureDevOpsRepository",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AzureDevOpsRepositoryProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureDevOpsRepositoryProperties",
    modelProperties: {
      provisioningStatusMessage: {
        serializedName: "provisioningStatusMessage",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      provisioningStatusUpdateTimeUtc: {
        serializedName: "provisioningStatusUpdateTimeUtc",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      provisioningState: {
        serializedName: "provisioningState",
        type: {
          name: "String",
        },
      },
      parentOrgName: {
        serializedName: "parentOrgName",
        type: {
          name: "String",
        },
      },
      parentProjectName: {
        serializedName: "parentProjectName",
        type: {
          name: "String",
        },
      },
      repoId: {
        serializedName: "repoId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      repoUrl: {
        serializedName: "repoUrl",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      visibility: {
        serializedName: "visibility",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      onboardingState: {
        serializedName: "onboardingState",
        type: {
          name: "String",
        },
      },
      actionableRemediation: {
        serializedName: "actionableRemediation",
        type: {
          name: "Composite",
          className: "ActionableRemediation",
        },
      },
    },
  },
};

export const DevOpsConfigurationListResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DevOpsConfigurationListResponse",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DevOpsConfiguration",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const DevOpsConfigurationProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DevOpsConfigurationProperties",
    modelProperties: {
      provisioningStatusMessage: {
        serializedName: "provisioningStatusMessage",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      provisioningStatusUpdateTimeUtc: {
        serializedName: "provisioningStatusUpdateTimeUtc",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      provisioningState: {
        serializedName: "provisioningState",
        type: {
          name: "String",
        },
      },
      authorization: {
        serializedName: "authorization",
        type: {
          name: "Composite",
          className: "Authorization",
        },
      },
      autoDiscovery: {
        serializedName: "autoDiscovery",
        type: {
          name: "String",
        },
      },
      topLevelInventoryList: {
        serializedName: "topLevelInventoryList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      capabilities: {
        serializedName: "capabilities",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DevOpsCapability",
            },
          },
        },
      },
    },
  },
};

export const Authorization: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Authorization",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const DevOpsCapability: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DevOpsCapability",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const GitHubOwnerListResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GitHubOwnerListResponse",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GitHubOwner",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const GitHubOwnerProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GitHubOwnerProperties",
    modelProperties: {
      provisioningStatusMessage: {
        serializedName: "provisioningStatusMessage",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      provisioningStatusUpdateTimeUtc: {
        serializedName: "provisioningStatusUpdateTimeUtc",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      provisioningState: {
        serializedName: "provisioningState",
        type: {
          name: "String",
        },
      },
      ownerUrl: {
        serializedName: "ownerUrl",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      gitHubInternalId: {
        serializedName: "gitHubInternalId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      onboardingState: {
        serializedName: "onboardingState",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const GitHubRepositoryListResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GitHubRepositoryListResponse",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GitHubRepository",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const GitHubRepositoryProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GitHubRepositoryProperties",
    modelProperties: {
      provisioningStatusMessage: {
        serializedName: "provisioningStatusMessage",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      provisioningStatusUpdateTimeUtc: {
        serializedName: "provisioningStatusUpdateTimeUtc",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      provisioningState: {
        serializedName: "provisioningState",
        type: {
          name: "String",
        },
      },
      repoId: {
        serializedName: "repoId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      repoName: {
        serializedName: "repoName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      repoFullName: {
        serializedName: "repoFullName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      onboardingState: {
        serializedName: "onboardingState",
        type: {
          name: "String",
        },
      },
      repoUrl: {
        serializedName: "repoUrl",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      parentOwnerName: {
        serializedName: "parentOwnerName",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const GitLabGroupListResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GitLabGroupListResponse",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GitLabGroup",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const GitLabGroupProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GitLabGroupProperties",
    modelProperties: {
      provisioningStatusMessage: {
        serializedName: "provisioningStatusMessage",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      provisioningStatusUpdateTimeUtc: {
        serializedName: "provisioningStatusUpdateTimeUtc",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      provisioningState: {
        serializedName: "provisioningState",
        type: {
          name: "String",
        },
      },
      fullyQualifiedName: {
        serializedName: "fullyQualifiedName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      fullyQualifiedFriendlyName: {
        serializedName: "fullyQualifiedFriendlyName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      url: {
        serializedName: "url",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      onboardingState: {
        serializedName: "onboardingState",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const GitLabProjectListResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GitLabProjectListResponse",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GitLabProject",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const GitLabProjectProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GitLabProjectProperties",
    modelProperties: {
      provisioningStatusMessage: {
        serializedName: "provisioningStatusMessage",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      provisioningStatusUpdateTimeUtc: {
        serializedName: "provisioningStatusUpdateTimeUtc",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      provisioningState: {
        serializedName: "provisioningState",
        type: {
          name: "String",
        },
      },
      fullyQualifiedName: {
        serializedName: "fullyQualifiedName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      fullyQualifiedFriendlyName: {
        serializedName: "fullyQualifiedFriendlyName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      fullyQualifiedParentGroupName: {
        serializedName: "fullyQualifiedParentGroupName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      url: {
        serializedName: "url",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      onboardingState: {
        serializedName: "onboardingState",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OperationStatusResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationStatusResult",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      status: {
        serializedName: "status",
        required: true,
        type: {
          name: "String",
        },
      },
      percentComplete: {
        constraints: {
          InclusiveMaximum: 100,
          InclusiveMinimum: 0,
        },
        serializedName: "percentComplete",
        type: {
          name: "Number",
        },
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime",
        },
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime",
        },
      },
      operations: {
        serializedName: "operations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationStatusResult",
            },
          },
        },
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail",
        },
      },
    },
  },
};

export const AzureDevOpsOrganizationConfiguration: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "AzureDevOpsOrganizationConfiguration",
      modelProperties: {
        autoDiscovery: {
          serializedName: "autoDiscovery",
          type: {
            name: "String",
          },
        },
        projectConfigs: {
          serializedName: "projectConfigs",
          nullable: true,
          type: {
            name: "Dictionary",
            value: {
              type: {
                name: "Composite",
                className: "AzureDevOpsProjectConfiguration",
              },
            },
          },
        },
      },
    },
  };

export const AzureDevOpsProjectConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureDevOpsProjectConfiguration",
    modelProperties: {
      autoDiscovery: {
        serializedName: "autoDiscovery",
        type: {
          name: "String",
        },
      },
      repositoryConfigs: {
        serializedName: "repositoryConfigs",
        nullable: true,
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "BaseResourceConfiguration" },
          },
        },
      },
    },
  },
};

export const BaseResourceConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BaseResourceConfiguration",
    modelProperties: {
      desiredOnboardingState: {
        serializedName: "desiredOnboardingState",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const GitHubOwnerConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GitHubOwnerConfiguration",
    modelProperties: {
      autoDiscovery: {
        serializedName: "autoDiscovery",
        type: {
          name: "String",
        },
      },
      repositoryConfigs: {
        serializedName: "repositoryConfigs",
        nullable: true,
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "BaseResourceConfiguration" },
          },
        },
      },
    },
  },
};

export const GitLabGroupConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GitLabGroupConfiguration",
    modelProperties: {
      autoDiscovery: {
        serializedName: "autoDiscovery",
        type: {
          name: "String",
        },
      },
      projectConfigs: {
        serializedName: "projectConfigs",
        nullable: true,
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "BaseResourceConfiguration" },
          },
        },
      },
    },
  },
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties,
    },
  },
};

export const AzureDevOpsOrg: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureDevOpsOrg",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData",
        },
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "AzureDevOpsOrgProperties",
        },
      },
    },
  },
};

export const AzureDevOpsProject: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureDevOpsProject",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData",
        },
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "AzureDevOpsProjectProperties",
        },
      },
    },
  },
};

export const AzureDevOpsRepository: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureDevOpsRepository",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData",
        },
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "AzureDevOpsRepositoryProperties",
        },
      },
    },
  },
};

export const DevOpsConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DevOpsConfiguration",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData",
        },
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "DevOpsConfigurationProperties",
        },
      },
    },
  },
};

export const GitHubOwner: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GitHubOwner",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData",
        },
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "GitHubOwnerProperties",
        },
      },
    },
  },
};

export const GitHubRepository: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GitHubRepository",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData",
        },
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "GitHubRepositoryProperties",
        },
      },
    },
  },
};

export const GitLabGroup: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GitLabGroup",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData",
        },
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "GitLabGroupProperties",
        },
      },
    },
  },
};

export const GitLabProject: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GitLabProject",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData",
        },
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "GitLabProjectProperties",
        },
      },
    },
  },
};
