/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const SecurityAssessmentMetadataResponseList: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "SecurityAssessmentMetadataResponseList",
      modelProperties: {
        value: {
          serializedName: "value",
          readOnly: true,
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "Composite",
                className: "SecurityAssessmentMetadataResponse",
              },
            },
          },
        },
        nextLink: {
          serializedName: "nextLink",
          readOnly: true,
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const SecurityAssessmentMetadataPropertiesResponsePublishDates: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "SecurityAssessmentMetadataPropertiesResponsePublishDates",
      modelProperties: {
        ga: {
          constraints: {
            Pattern: new RegExp("^([0-9]{2}\\/){2}[0-9]{4}$"),
          },
          serializedName: "GA",
          type: {
            name: "String",
          },
        },
        public: {
          constraints: {
            Pattern: new RegExp("^([0-9]{2}\\/){2}[0-9]{4}$"),
          },
          serializedName: "public",
          required: true,
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const SecurityAssessmentMetadataProperties: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "SecurityAssessmentMetadataProperties",
      modelProperties: {
        displayName: {
          serializedName: "displayName",
          required: true,
          type: {
            name: "String",
          },
        },
        policyDefinitionId: {
          serializedName: "policyDefinitionId",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        description: {
          serializedName: "description",
          type: {
            name: "String",
          },
        },
        remediationDescription: {
          serializedName: "remediationDescription",
          type: {
            name: "String",
          },
        },
        categories: {
          serializedName: "categories",
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "String",
              },
            },
          },
        },
        severity: {
          serializedName: "severity",
          required: true,
          type: {
            name: "String",
          },
        },
        userImpact: {
          serializedName: "userImpact",
          type: {
            name: "String",
          },
        },
        implementationEffort: {
          serializedName: "implementationEffort",
          type: {
            name: "String",
          },
        },
        threats: {
          serializedName: "threats",
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "String",
              },
            },
          },
        },
        preview: {
          serializedName: "preview",
          type: {
            name: "Boolean",
          },
        },
        assessmentType: {
          serializedName: "assessmentType",
          required: true,
          type: {
            name: "String",
          },
        },
        partnerData: {
          serializedName: "partnerData",
          type: {
            name: "Composite",
            className: "SecurityAssessmentMetadataPartnerData",
          },
        },
      },
    },
  };

export const SecurityAssessmentMetadataPartnerData: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "SecurityAssessmentMetadataPartnerData",
      modelProperties: {
        partnerName: {
          serializedName: "partnerName",
          required: true,
          type: {
            name: "String",
          },
        },
        productName: {
          serializedName: "productName",
          type: {
            name: "String",
          },
        },
        secret: {
          serializedName: "secret",
          required: true,
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const CloudError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudError",
    modelProperties: {
      code: {
        serializedName: "error.code",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "error.message",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      target: {
        serializedName: "error.target",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      details: {
        serializedName: "error.details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CloudErrorBody",
            },
          },
        },
      },
      additionalInfo: {
        serializedName: "error.additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo",
            },
          },
        },
      },
    },
  },
};

export const CloudErrorBody: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudErrorBody",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CloudErrorBody",
            },
          },
        },
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo",
            },
          },
        },
      },
    },
  },
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } },
        },
      },
    },
  },
};

export const SecurityAssessmentList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecurityAssessmentList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SecurityAssessmentResponse",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AssessmentStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AssessmentStatus",
    modelProperties: {
      code: {
        serializedName: "code",
        required: true,
        type: {
          name: "String",
        },
      },
      cause: {
        serializedName: "cause",
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "description",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SecurityAssessmentPropertiesBase: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecurityAssessmentPropertiesBase",
    modelProperties: {
      resourceDetails: {
        serializedName: "resourceDetails",
        type: {
          name: "Composite",
          className: "ResourceDetails",
        },
      },
      displayName: {
        serializedName: "displayName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      additionalData: {
        serializedName: "additionalData",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      links: {
        serializedName: "links",
        type: {
          name: "Composite",
          className: "AssessmentLinks",
        },
      },
      metadata: {
        serializedName: "metadata",
        type: {
          name: "Composite",
          className: "SecurityAssessmentMetadataProperties",
        },
      },
      partnersData: {
        serializedName: "partnersData",
        type: {
          name: "Composite",
          className: "SecurityAssessmentPartnerData",
        },
      },
      risk: {
        serializedName: "risk",
        type: {
          name: "Composite",
          className: "AssessmentRisk",
        },
      },
    },
  },
};

export const ResourceDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceDetails",
    uberParent: "ResourceDetails",
    polymorphicDiscriminator: {
      serializedName: "source",
      clientName: "source",
    },
    modelProperties: {
      source: {
        serializedName: "source",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AssessmentLinks: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AssessmentLinks",
    modelProperties: {
      azurePortalUri: {
        serializedName: "azurePortalUri",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SecurityAssessmentPartnerData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecurityAssessmentPartnerData",
    modelProperties: {
      partnerName: {
        serializedName: "partnerName",
        required: true,
        type: {
          name: "String",
        },
      },
      secret: {
        serializedName: "secret",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AssessmentRisk: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AssessmentRisk",
    modelProperties: {
      level: {
        serializedName: "level",
        type: {
          name: "String",
        },
      },
      attackPathsReferences: {
        serializedName: "attackPathsReferences",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      riskFactors: {
        serializedName: "riskFactors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      paths: {
        serializedName: "paths",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AssessmentRiskPath",
            },
          },
        },
      },
    },
  },
};

export const AssessmentRiskPath: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AssessmentRiskPath",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String",
        },
      },
      nodes: {
        serializedName: "nodes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AssessmentRiskPathReferenceItem",
            },
          },
        },
      },
      edges: {
        serializedName: "edges",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AssessmentRiskPathReferenceItem",
            },
          },
        },
      },
      insights: {
        serializedName: "insights",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AssessmentRiskPathReferenceItem",
            },
          },
        },
      },
    },
  },
};

export const AssessmentRiskPathReferenceItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AssessmentRiskPathReferenceItem",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        type: {
          name: "String",
        },
      },
      subjectId: {
        serializedName: "subjectId",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SecurityAssessmentMetadataPropertiesResponse: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "SecurityAssessmentMetadataPropertiesResponse",
      modelProperties: {
        ...SecurityAssessmentMetadataProperties.type.modelProperties,
        publishDates: {
          serializedName: "publishDates",
          type: {
            name: "Composite",
            className:
              "SecurityAssessmentMetadataPropertiesResponsePublishDates",
          },
        },
        plannedDeprecationDate: {
          constraints: {
            Pattern: new RegExp("^[0-9]{2}\\/[0-9]{4}$"),
          },
          serializedName: "plannedDeprecationDate",
          type: {
            name: "String",
          },
        },
        tactics: {
          serializedName: "tactics",
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "String",
              },
            },
          },
        },
        techniques: {
          serializedName: "techniques",
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "String",
              },
            },
          },
        },
        cloudProviders: {
          serializedName: "cloudProviders",
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "String",
              },
            },
          },
        },
        remediationPolicy: {
          serializedName: "remediationPolicy",
          type: {
            name: "String",
          },
        },
        managementProvider: {
          serializedName: "managementProvider",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const SecurityAssessmentMetadataResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecurityAssessmentMetadataResponse",
    modelProperties: {
      ...Resource.type.modelProperties,
      displayName: {
        serializedName: "properties.displayName",
        type: {
          name: "String",
        },
      },
      policyDefinitionId: {
        serializedName: "properties.policyDefinitionId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String",
        },
      },
      remediationDescription: {
        serializedName: "properties.remediationDescription",
        type: {
          name: "String",
        },
      },
      categories: {
        serializedName: "properties.categories",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      severity: {
        serializedName: "properties.severity",
        type: {
          name: "String",
        },
      },
      userImpact: {
        serializedName: "properties.userImpact",
        type: {
          name: "String",
        },
      },
      implementationEffort: {
        serializedName: "properties.implementationEffort",
        type: {
          name: "String",
        },
      },
      threats: {
        serializedName: "properties.threats",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      preview: {
        serializedName: "properties.preview",
        type: {
          name: "Boolean",
        },
      },
      assessmentType: {
        serializedName: "properties.assessmentType",
        type: {
          name: "String",
        },
      },
      partnerData: {
        serializedName: "properties.partnerData",
        type: {
          name: "Composite",
          className: "SecurityAssessmentMetadataPartnerData",
        },
      },
      publishDates: {
        serializedName: "properties.publishDates",
        type: {
          name: "Composite",
          className: "SecurityAssessmentMetadataPropertiesResponsePublishDates",
        },
      },
      plannedDeprecationDate: {
        constraints: {
          Pattern: new RegExp("^[0-9]{2}\\/[0-9]{4}$"),
        },
        serializedName: "properties.plannedDeprecationDate",
        type: {
          name: "String",
        },
      },
      tactics: {
        serializedName: "properties.tactics",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      techniques: {
        serializedName: "properties.techniques",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      cloudProviders: {
        serializedName: "properties.cloudProviders",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      remediationPolicy: {
        serializedName: "properties.remediationPolicy",
        type: {
          name: "String",
        },
      },
      managementProvider: {
        serializedName: "properties.managementProvider",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SecurityAssessmentResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecurityAssessmentResponse",
    modelProperties: {
      ...Resource.type.modelProperties,
      resourceDetails: {
        serializedName: "properties.resourceDetails",
        type: {
          name: "Composite",
          className: "ResourceDetails",
        },
      },
      displayName: {
        serializedName: "properties.displayName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      additionalData: {
        serializedName: "properties.additionalData",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      links: {
        serializedName: "properties.links",
        type: {
          name: "Composite",
          className: "AssessmentLinks",
        },
      },
      metadata: {
        serializedName: "properties.metadata",
        type: {
          name: "Composite",
          className: "SecurityAssessmentMetadataProperties",
        },
      },
      partnersData: {
        serializedName: "properties.partnersData",
        type: {
          name: "Composite",
          className: "SecurityAssessmentPartnerData",
        },
      },
      risk: {
        serializedName: "properties.risk",
        type: {
          name: "Composite",
          className: "AssessmentRisk",
        },
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "Composite",
          className: "AssessmentStatusResponse",
        },
      },
    },
  },
};

export const SecurityAssessment: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecurityAssessment",
    modelProperties: {
      ...Resource.type.modelProperties,
      resourceDetails: {
        serializedName: "properties.resourceDetails",
        type: {
          name: "Composite",
          className: "ResourceDetails",
        },
      },
      displayName: {
        serializedName: "properties.displayName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      additionalData: {
        serializedName: "properties.additionalData",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      links: {
        serializedName: "properties.links",
        type: {
          name: "Composite",
          className: "AssessmentLinks",
        },
      },
      metadata: {
        serializedName: "properties.metadata",
        type: {
          name: "Composite",
          className: "SecurityAssessmentMetadataProperties",
        },
      },
      partnersData: {
        serializedName: "properties.partnersData",
        type: {
          name: "Composite",
          className: "SecurityAssessmentPartnerData",
        },
      },
      risk: {
        serializedName: "properties.risk",
        type: {
          name: "Composite",
          className: "AssessmentRisk",
        },
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "Composite",
          className: "AssessmentStatus",
        },
      },
    },
  },
};

export const SecurityAssessmentMetadata: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecurityAssessmentMetadata",
    modelProperties: {
      ...Resource.type.modelProperties,
      displayName: {
        serializedName: "properties.displayName",
        type: {
          name: "String",
        },
      },
      policyDefinitionId: {
        serializedName: "properties.policyDefinitionId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String",
        },
      },
      remediationDescription: {
        serializedName: "properties.remediationDescription",
        type: {
          name: "String",
        },
      },
      categories: {
        serializedName: "properties.categories",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      severity: {
        serializedName: "properties.severity",
        type: {
          name: "String",
        },
      },
      userImpact: {
        serializedName: "properties.userImpact",
        type: {
          name: "String",
        },
      },
      implementationEffort: {
        serializedName: "properties.implementationEffort",
        type: {
          name: "String",
        },
      },
      threats: {
        serializedName: "properties.threats",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      preview: {
        serializedName: "properties.preview",
        type: {
          name: "Boolean",
        },
      },
      assessmentType: {
        serializedName: "properties.assessmentType",
        type: {
          name: "String",
        },
      },
      partnerData: {
        serializedName: "properties.partnerData",
        type: {
          name: "Composite",
          className: "SecurityAssessmentMetadataPartnerData",
        },
      },
    },
  },
};

export const AssessmentStatusResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AssessmentStatusResponse",
    modelProperties: {
      ...AssessmentStatus.type.modelProperties,
      firstEvaluationDate: {
        serializedName: "firstEvaluationDate",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      statusChangeDate: {
        serializedName: "statusChangeDate",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const SecurityAssessmentPropertiesResponse: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "SecurityAssessmentPropertiesResponse",
      modelProperties: {
        ...SecurityAssessmentPropertiesBase.type.modelProperties,
        status: {
          serializedName: "status",
          type: {
            name: "Composite",
            className: "AssessmentStatusResponse",
          },
        },
      },
    },
  };

export const SecurityAssessmentProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecurityAssessmentProperties",
    modelProperties: {
      ...SecurityAssessmentPropertiesBase.type.modelProperties,
      status: {
        serializedName: "status",
        type: {
          name: "Composite",
          className: "AssessmentStatus",
        },
      },
    },
  },
};

export const AzureResourceDetails: coreClient.CompositeMapper = {
  serializedName: "Azure",
  type: {
    name: "Composite",
    className: "AzureResourceDetails",
    uberParent: "ResourceDetails",
    polymorphicDiscriminator: ResourceDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...ResourceDetails.type.modelProperties,
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OnPremiseResourceDetails: coreClient.CompositeMapper = {
  serializedName: "OnPremise",
  type: {
    name: "Composite",
    className: "OnPremiseResourceDetails",
    uberParent: "ResourceDetails",
    polymorphicDiscriminator: {
      serializedName: "source",
      clientName: "source",
    },
    modelProperties: {
      ...ResourceDetails.type.modelProperties,
      workspaceId: {
        serializedName: "workspaceId",
        required: true,
        type: {
          name: "String",
        },
      },
      vmuuid: {
        serializedName: "vmuuid",
        required: true,
        type: {
          name: "String",
        },
      },
      sourceComputerId: {
        serializedName: "sourceComputerId",
        required: true,
        type: {
          name: "String",
        },
      },
      machineName: {
        serializedName: "machineName",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OnPremiseSqlResourceDetails: coreClient.CompositeMapper = {
  serializedName: "OnPremiseSql",
  type: {
    name: "Composite",
    className: "OnPremiseSqlResourceDetails",
    uberParent: "OnPremiseResourceDetails",
    polymorphicDiscriminator:
      OnPremiseResourceDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...OnPremiseResourceDetails.type.modelProperties,
      serverName: {
        serializedName: "serverName",
        required: true,
        type: {
          name: "String",
        },
      },
      databaseName: {
        serializedName: "databaseName",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export let discriminators = {
  ResourceDetails: ResourceDetails,
  "ResourceDetails.Azure": AzureResourceDetails,
  "ResourceDetails.OnPremise": OnPremiseResourceDetails,
  "OnPremiseResourceDetails.OnPremiseSql": OnPremiseSqlResourceDetails,
};
