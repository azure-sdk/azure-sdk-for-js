/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** List of RP resources which supports pagination. */
export interface AzureDevOpsOrgListResponse {
  /** Gets or sets list of resources. */
  value?: AzureDevOpsOrg[];
  /** Gets or sets next link to scroll over the results. */
  nextLink?: string;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The timestamp of resource last modification (UTC) */
  lastModifiedAt?: Date;
}

/** Azure DevOps Organization properties. */
export interface AzureDevOpsOrgProperties {
  /**
   * Gets or sets resource status message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningStatusMessage?: string;
  /**
   * Gets or sets time when resource was last checked.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningStatusUpdateTimeUtc?: Date;
  /**
   * The provisioning state of the resource.
   *
   * Pending - Provisioning pending.
   * Failed - Provisioning failed.
   * Succeeded - Successful provisioning.
   * Canceled - Provisioning canceled.
   * PendingDeletion - Deletion pending.
   * DeletionSuccess - Deletion successful.
   * DeletionFailure - Deletion failure.
   */
  provisioningState?: DevOpsProvisioningState;
  /**
   * Details about resource onboarding status across all connectors.
   *
   * OnboardedByOtherConnector - this resource has already been onboarded to another connector. This is only applicable to top-level resources.
   * Onboarded - this resource has already been onboarded by the specified connector.
   * NotOnboarded - this resource has not been onboarded to any connector.
   * NotApplicable - the onboarding state is not applicable to the current endpoint.
   */
  onboardingState?: OnboardingState;
  /** Configuration payload for PR Annotations. */
  actionableRemediation?: ActionableRemediation;
}

/** Configuration payload for PR Annotations. */
export interface ActionableRemediation {
  /**
   * ActionableRemediation Setting.
   * None - the setting was never set.
   * Enabled - ActionableRemediation is enabled.
   * Disabled - ActionableRemediation is disabled.
   */
  state?: ActionableRemediationState;
  /** Gets or sets list of categories and severity levels. */
  categoryConfigurations?: CategoryConfiguration[];
  /** Repository branch configuration for PR Annotations. */
  branchConfiguration?: TargetBranchConfiguration;
  /**
   * Update Settings.
   *
   * Enabled - Resource should inherit configurations from parent.
   * Disabled - Resource should not inherit configurations from parent.
   */
  inheritFromParentState?: InheritFromParentState;
}

/** Severity level per category configuration for PR Annotations. */
export interface CategoryConfiguration {
  /** Gets or sets minimum severity level for a given category. */
  minimumSeverityLevel?: string;
  /**
   * Rule categories.
   * Code - code scanning results.
   * Artifact scanning results.
   * Dependencies scanning results.
   * IaC results.
   * Secrets scanning results.
   * Container scanning results.
   */
  category?: RuleCategory;
}

/** Repository branch configuration for PR Annotations. */
export interface TargetBranchConfiguration {
  /** Gets or sets branches that should have annotations. */
  branchNames?: string[];
  /**
   * Configuration of PR Annotations on default branch.
   *
   * Enabled - PR Annotations are enabled on the resource's default branch.
   * Disabled - PR Annotations are disabled on the resource's default branch.
   */
  annotateDefaultBranch?: AnnotateDefaultBranchState;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export interface Resource {
  /**
   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export interface ErrorResponse {
  /** The error object. */
  error?: ErrorDetail;
}

/** The error detail. */
export interface ErrorDetail {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDetail[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
}

/** List of RP resources which supports pagination. */
export interface AzureDevOpsProjectListResponse {
  /** Gets or sets list of resources. */
  value?: AzureDevOpsProject[];
  /** Gets or sets next link to scroll over the results. */
  nextLink?: string;
}

/** Azure DevOps Project properties. */
export interface AzureDevOpsProjectProperties {
  /**
   * Gets or sets resource status message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningStatusMessage?: string;
  /**
   * Gets or sets time when resource was last checked.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningStatusUpdateTimeUtc?: Date;
  /**
   * The provisioning state of the resource.
   *
   * Pending - Provisioning pending.
   * Failed - Provisioning failed.
   * Succeeded - Successful provisioning.
   * Canceled - Provisioning canceled.
   * PendingDeletion - Deletion pending.
   * DeletionSuccess - Deletion successful.
   * DeletionFailure - Deletion failure.
   */
  provisioningState?: DevOpsProvisioningState;
  /** Gets or sets parent Azure DevOps Organization name. */
  parentOrgName?: string;
  /**
   * Gets or sets Azure DevOps Project id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly projectId?: string;
  /**
   * Details about resource onboarding status across all connectors.
   *
   * OnboardedByOtherConnector - this resource has already been onboarded to another connector. This is only applicable to top-level resources.
   * Onboarded - this resource has already been onboarded by the specified connector.
   * NotOnboarded - this resource has not been onboarded to any connector.
   * NotApplicable - the onboarding state is not applicable to the current endpoint.
   */
  onboardingState?: OnboardingState;
  /** Configuration payload for PR Annotations. */
  actionableRemediation?: ActionableRemediation;
}

/** List of RP resources which supports pagination. */
export interface AzureDevOpsRepositoryListResponse {
  /** Gets or sets list of resources. */
  value?: AzureDevOpsRepository[];
  /** Gets or sets next link to scroll over the results. */
  nextLink?: string;
}

/** Azure DevOps Repository properties. */
export interface AzureDevOpsRepositoryProperties {
  /**
   * Gets or sets resource status message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningStatusMessage?: string;
  /**
   * Gets or sets time when resource was last checked.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningStatusUpdateTimeUtc?: Date;
  /**
   * The provisioning state of the resource.
   *
   * Pending - Provisioning pending.
   * Failed - Provisioning failed.
   * Succeeded - Successful provisioning.
   * Canceled - Provisioning canceled.
   * PendingDeletion - Deletion pending.
   * DeletionSuccess - Deletion successful.
   * DeletionFailure - Deletion failure.
   */
  provisioningState?: DevOpsProvisioningState;
  /** Gets or sets parent Azure DevOps Organization name. */
  parentOrgName?: string;
  /** Gets or sets parent Azure DevOps Project name. */
  parentProjectName?: string;
  /**
   * Gets or sets Azure DevOps Repository id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly repoId?: string;
  /**
   * Gets or sets Azure DevOps Repository url.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly repoUrl?: string;
  /**
   * Gets or sets Azure DevOps repository visibility, whether it is public or private etc.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly visibility?: string;
  /**
   * Details about resource onboarding status across all connectors.
   *
   * OnboardedByOtherConnector - this resource has already been onboarded to another connector. This is only applicable to top-level resources.
   * Onboarded - this resource has already been onboarded by the specified connector.
   * NotOnboarded - this resource has not been onboarded to any connector.
   * NotApplicable - the onboarding state is not applicable to the current endpoint.
   */
  onboardingState?: OnboardingState;
  /** Configuration payload for PR Annotations. */
  actionableRemediation?: ActionableRemediation;
}

/** List of RP resources which supports pagination. */
export interface DevOpsConfigurationListResponse {
  /** Gets or sets list of resources. */
  value?: DevOpsConfiguration[];
  /** Gets or sets next link to scroll over the results. */
  nextLink?: string;
}

/** DevOps Configuration properties. */
export interface DevOpsConfigurationProperties {
  /**
   * Gets or sets resource status message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningStatusMessage?: string;
  /**
   * Gets or sets time when resource was last checked.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningStatusUpdateTimeUtc?: Date;
  /**
   * The provisioning state of the resource.
   *
   * Pending - Provisioning pending.
   * Failed - Provisioning failed.
   * Succeeded - Successful provisioning.
   * Canceled - Provisioning canceled.
   * PendingDeletion - Deletion pending.
   * DeletionSuccess - Deletion successful.
   * DeletionFailure - Deletion failure.
   */
  provisioningState?: DevOpsProvisioningState;
  /** Authorization payload. */
  authorization?: Authorization;
  /** AutoDiscovery states. */
  autoDiscovery?: AutoDiscovery;
  /**
   * List of top-level inventory to select when AutoDiscovery is disabled.
   * This field is ignored when AutoDiscovery is enabled.
   */
  topLevelInventoryList?: string[];
  /**
   * List of capabilities assigned to the DevOps configuration during the discovery process.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly capabilities?: DevOpsCapability[];
}

/** Authorization payload. */
export interface Authorization {
  /**
   * Gets or sets one-time OAuth code to exchange for refresh and access tokens.
   *
   * Only used during PUT/PATCH operations. The secret is cleared during GET.
   */
  code?: string;
}

/** Details about DevOps capability. */
export interface DevOpsCapability {
  /**
   * Gets the name of the DevOps capability.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Gets the value of the DevOps capability.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: string;
}

/** List of RP resources which supports pagination. */
export interface GitHubOwnerListResponse {
  /** Gets or sets list of resources. */
  value?: GitHubOwner[];
  /** Gets or sets next link to scroll over the results. */
  nextLink?: string;
}

/** GitHub Owner properties. */
export interface GitHubOwnerProperties {
  /**
   * Gets or sets resource status message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningStatusMessage?: string;
  /**
   * Gets or sets time when resource was last checked.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningStatusUpdateTimeUtc?: Date;
  /**
   * The provisioning state of the resource.
   *
   * Pending - Provisioning pending.
   * Failed - Provisioning failed.
   * Succeeded - Successful provisioning.
   * Canceled - Provisioning canceled.
   * PendingDeletion - Deletion pending.
   * DeletionSuccess - Deletion successful.
   * DeletionFailure - Deletion failure.
   */
  provisioningState?: DevOpsProvisioningState;
  /**
   * Gets or sets GitHub Owner url.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ownerUrl?: string;
  /**
   * Gets or sets internal GitHub id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly gitHubInternalId?: string;
  /**
   * Details about resource onboarding status across all connectors.
   *
   * OnboardedByOtherConnector - this resource has already been onboarded to another connector. This is only applicable to top-level resources.
   * Onboarded - this resource has already been onboarded by the specified connector.
   * NotOnboarded - this resource has not been onboarded to any connector.
   * NotApplicable - the onboarding state is not applicable to the current endpoint.
   */
  onboardingState?: OnboardingState;
}

/** List of RP resources which supports pagination. */
export interface GitHubRepositoryListResponse {
  /** Gets or sets list of resources. */
  value?: GitHubRepository[];
  /** Gets or sets next link to scroll over the results. */
  nextLink?: string;
}

/** GitHub Repository properties. */
export interface GitHubRepositoryProperties {
  /**
   * Gets or sets resource status message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningStatusMessage?: string;
  /**
   * Gets or sets time when resource was last checked.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningStatusUpdateTimeUtc?: Date;
  /**
   * The provisioning state of the resource.
   *
   * Pending - Provisioning pending.
   * Failed - Provisioning failed.
   * Succeeded - Successful provisioning.
   * Canceled - Provisioning canceled.
   * PendingDeletion - Deletion pending.
   * DeletionSuccess - Deletion successful.
   * DeletionFailure - Deletion failure.
   */
  provisioningState?: DevOpsProvisioningState;
  /**
   * Gets or sets GitHub Repository id.
   *
   * This is a numeric id defined by Github.
   * Eg: "123456".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly repoId?: string;
  /**
   * Gets or sets GitHub Repository name.
   * Eg: "new-repo-1".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly repoName?: string;
  /**
   * Gets or sets GitHub Full Name.
   * Repository name, prefixed with Owner name.
   * Eg: "my-org/new-repo-1".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly repoFullName?: string;
  /**
   * Details about resource onboarding status across all connectors.
   *
   * OnboardedByOtherConnector - this resource has already been onboarded to another connector. This is only applicable to top-level resources.
   * Onboarded - this resource has already been onboarded by the specified connector.
   * NotOnboarded - this resource has not been onboarded to any connector.
   * NotApplicable - the onboarding state is not applicable to the current endpoint.
   */
  onboardingState?: OnboardingState;
  /**
   * Gets or sets GitHub Repository url.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly repoUrl?: string;
  /** Gets or sets parent GitHub Owner name. */
  parentOwnerName?: string;
}

/** List of RP resources which supports pagination. */
export interface GitLabGroupListResponse {
  /** Gets or sets list of resources. */
  value?: GitLabGroup[];
  /** Gets or sets next link to scroll over the results. */
  nextLink?: string;
}

/** GitLab Group properties. */
export interface GitLabGroupProperties {
  /**
   * Gets or sets resource status message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningStatusMessage?: string;
  /**
   * Gets or sets time when resource was last checked.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningStatusUpdateTimeUtc?: Date;
  /**
   * The provisioning state of the resource.
   *
   * Pending - Provisioning pending.
   * Failed - Provisioning failed.
   * Succeeded - Successful provisioning.
   * Canceled - Provisioning canceled.
   * PendingDeletion - Deletion pending.
   * DeletionSuccess - Deletion successful.
   * DeletionFailure - Deletion failure.
   */
  provisioningState?: DevOpsProvisioningState;
  /**
   * Gets or sets the fully-qualified name of the Group object.
   *
   * This contains the entire namespace hierarchy where namespaces are separated by the '$' character.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fullyQualifiedName?: string;
  /**
   * Gets or sets the human readable fully-qualified name of the Group object.
   *
   * This contains the entire namespace hierarchy as seen on GitLab UI where namespaces are separated by the '/' character.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fullyQualifiedFriendlyName?: string;
  /**
   * Gets or sets the url of the GitLab Group.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly url?: string;
  /**
   * Details about resource onboarding status across all connectors.
   *
   * OnboardedByOtherConnector - this resource has already been onboarded to another connector. This is only applicable to top-level resources.
   * Onboarded - this resource has already been onboarded by the specified connector.
   * NotOnboarded - this resource has not been onboarded to any connector.
   * NotApplicable - the onboarding state is not applicable to the current endpoint.
   */
  onboardingState?: OnboardingState;
}

/** List of RP resources which supports pagination. */
export interface GitLabProjectListResponse {
  /** Gets or sets list of resources. */
  value?: GitLabProject[];
  /** Gets or sets next link to scroll over the results. */
  nextLink?: string;
}

/** GitLab Project properties. */
export interface GitLabProjectProperties {
  /**
   * Gets or sets resource status message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningStatusMessage?: string;
  /**
   * Gets or sets time when resource was last checked.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningStatusUpdateTimeUtc?: Date;
  /**
   * The provisioning state of the resource.
   *
   * Pending - Provisioning pending.
   * Failed - Provisioning failed.
   * Succeeded - Successful provisioning.
   * Canceled - Provisioning canceled.
   * PendingDeletion - Deletion pending.
   * DeletionSuccess - Deletion successful.
   * DeletionFailure - Deletion failure.
   */
  provisioningState?: DevOpsProvisioningState;
  /**
   * Gets or sets the fully-qualified name of the project object.
   *
   * This contains the entire hierarchy where entities are separated by the '$' character.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fullyQualifiedName?: string;
  /**
   * Gets or sets the human readable fully-qualified name of the Project object.
   *
   * This contains the entire namespace hierarchy as seen on GitLab UI where entities are separated by the '/' character.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fullyQualifiedFriendlyName?: string;
  /**
   * Gets or sets the fully-qualified name of the project's parent group object.
   *
   * This contains the entire hierarchy where namespaces are separated by the '$' character.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fullyQualifiedParentGroupName?: string;
  /**
   * Gets or sets the url of the GitLab Project.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly url?: string;
  /**
   * Details about resource onboarding status across all connectors.
   *
   * OnboardedByOtherConnector - this resource has already been onboarded to another connector. This is only applicable to top-level resources.
   * Onboarded - this resource has already been onboarded by the specified connector.
   * NotOnboarded - this resource has not been onboarded to any connector.
   * NotApplicable - the onboarding state is not applicable to the current endpoint.
   */
  onboardingState?: OnboardingState;
}

/** The current status of an async operation. */
export interface OperationStatusResult {
  /** Fully qualified ID for the async operation. */
  id?: string;
  /** Name of the async operation. */
  name?: string;
  /** Operation status. */
  status: string;
  /** Percent of the operation that is complete. */
  percentComplete?: number;
  /** The start time of the operation. */
  startTime?: Date;
  /** The end time of the operation. */
  endTime?: Date;
  /** The operations list. */
  operations?: OperationStatusResult[];
  /** If present, details of the operation error. */
  error?: ErrorDetail;
}

/** AzureDevOps Org Inventory Configuration. */
export interface AzureDevOpsOrganizationConfiguration {
  /** AutoDiscovery states. */
  autoDiscovery?: AutoDiscovery;
  /**
   * AzureDevOps Project Inventory Configuration.
   * Dictionary of AzureDevOps project name to desired project configuration.
   * If AutoDiscovery is Enabled, this field should be empty or null.
   */
  projectConfigs?: { [propertyName: string]: AzureDevOpsProjectConfiguration };
}

/** AzureDevOps Project Inventory Configuration. */
export interface AzureDevOpsProjectConfiguration {
  /** AutoDiscovery states. */
  autoDiscovery?: AutoDiscovery;
  /**
   * AzureDevOps Repository Inventory Configuration.
   * Dictionary of AzureDevOps repository name to desired repository configuration.
   * If AutoDiscovery is Enabled, this field should be null or empty.
   */
  repositoryConfigs?: { [propertyName: string]: BaseResourceConfiguration };
}

/** Base Resource Inventory configuration changes. */
export interface BaseResourceConfiguration {
  /** Onboarding states. */
  desiredOnboardingState?: DesiredOnboardingState;
}

/** GitHub Owner Inventory Configuration. */
export interface GitHubOwnerConfiguration {
  /** AutoDiscovery states. */
  autoDiscovery?: AutoDiscovery;
  /**
   * GitHub Repository Inventory Configuration.
   * Dictionary of GitHub repository name to desired repository configuration.
   * If AutoDiscovery is Enabled, this field should be null or empty.
   */
  repositoryConfigs?: { [propertyName: string]: BaseResourceConfiguration };
}

/** GitLab Group Inventory Configuration. */
export interface GitLabGroupConfiguration {
  /** AutoDiscovery states. */
  autoDiscovery?: AutoDiscovery;
  /**
   * GitLab Project Inventory Configuration.
   * Dictionary of GitLab fully-qualified project name to desired project configuration.
   * If AutoDiscovery is Enabled, this field should be null or empty.
   */
  projectConfigs?: { [propertyName: string]: BaseResourceConfiguration };
}

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export interface ProxyResource extends Resource {}

/** Azure DevOps Organization resource. */
export interface AzureDevOpsOrg extends ProxyResource {
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** Azure DevOps Organization properties. */
  properties?: AzureDevOpsOrgProperties;
}

/** Azure DevOps Project resource. */
export interface AzureDevOpsProject extends ProxyResource {
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** Azure DevOps Project properties. */
  properties?: AzureDevOpsProjectProperties;
}

/** Azure DevOps Repository resource. */
export interface AzureDevOpsRepository extends ProxyResource {
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** Azure DevOps Repository properties. */
  properties?: AzureDevOpsRepositoryProperties;
}

/** DevOps Configuration resource. */
export interface DevOpsConfiguration extends ProxyResource {
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** DevOps Configuration properties. */
  properties?: DevOpsConfigurationProperties;
}

/** GitHub Owner resource. */
export interface GitHubOwner extends ProxyResource {
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** GitHub Owner properties. */
  properties?: GitHubOwnerProperties;
}

/** GitHub Repository resource. */
export interface GitHubRepository extends ProxyResource {
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** GitHub Repository properties. */
  properties?: GitHubRepositoryProperties;
}

/** GitLab Group resource. */
export interface GitLabGroup extends ProxyResource {
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** GitLab Group properties. */
  properties?: GitLabGroupProperties;
}

/** GitLab Project resource. */
export interface GitLabProject extends ProxyResource {
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** GitLab Project properties. */
  properties?: GitLabProjectProperties;
}

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  /** User */
  User = "User",
  /** Application */
  Application = "Application",
  /** ManagedIdentity */
  ManagedIdentity = "ManagedIdentity",
  /** Key */
  Key = "Key",
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link DevOpsProvisioningState} that the service accepts. */
export enum KnownDevOpsProvisioningState {
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Canceled */
  Canceled = "Canceled",
  /** Pending */
  Pending = "Pending",
  /** PendingDeletion */
  PendingDeletion = "PendingDeletion",
  /** DeletionSuccess */
  DeletionSuccess = "DeletionSuccess",
  /** DeletionFailure */
  DeletionFailure = "DeletionFailure",
}

/**
 * Defines values for DevOpsProvisioningState. \
 * {@link KnownDevOpsProvisioningState} can be used interchangeably with DevOpsProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Pending** \
 * **PendingDeletion** \
 * **DeletionSuccess** \
 * **DeletionFailure**
 */
export type DevOpsProvisioningState = string;

/** Known values of {@link OnboardingState} that the service accepts. */
export enum KnownOnboardingState {
  /** NotApplicable */
  NotApplicable = "NotApplicable",
  /** OnboardedByOtherConnector */
  OnboardedByOtherConnector = "OnboardedByOtherConnector",
  /** Onboarded */
  Onboarded = "Onboarded",
  /** NotOnboarded */
  NotOnboarded = "NotOnboarded",
}

/**
 * Defines values for OnboardingState. \
 * {@link KnownOnboardingState} can be used interchangeably with OnboardingState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotApplicable** \
 * **OnboardedByOtherConnector** \
 * **Onboarded** \
 * **NotOnboarded**
 */
export type OnboardingState = string;

/** Known values of {@link ActionableRemediationState} that the service accepts. */
export enum KnownActionableRemediationState {
  /** None */
  None = "None",
  /** Disabled */
  Disabled = "Disabled",
  /** Enabled */
  Enabled = "Enabled",
}

/**
 * Defines values for ActionableRemediationState. \
 * {@link KnownActionableRemediationState} can be used interchangeably with ActionableRemediationState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Disabled** \
 * **Enabled**
 */
export type ActionableRemediationState = string;

/** Known values of {@link RuleCategory} that the service accepts. */
export enum KnownRuleCategory {
  /** Code */
  Code = "Code",
  /** Artifacts */
  Artifacts = "Artifacts",
  /** Dependencies */
  Dependencies = "Dependencies",
  /** Secrets */
  Secrets = "Secrets",
  /** IaC */
  IaC = "IaC",
  /** Containers */
  Containers = "Containers",
}

/**
 * Defines values for RuleCategory. \
 * {@link KnownRuleCategory} can be used interchangeably with RuleCategory,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Code** \
 * **Artifacts** \
 * **Dependencies** \
 * **Secrets** \
 * **IaC** \
 * **Containers**
 */
export type RuleCategory = string;

/** Known values of {@link AnnotateDefaultBranchState} that the service accepts. */
export enum KnownAnnotateDefaultBranchState {
  /** Disabled */
  Disabled = "Disabled",
  /** Enabled */
  Enabled = "Enabled",
}

/**
 * Defines values for AnnotateDefaultBranchState. \
 * {@link KnownAnnotateDefaultBranchState} can be used interchangeably with AnnotateDefaultBranchState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Disabled** \
 * **Enabled**
 */
export type AnnotateDefaultBranchState = string;

/** Known values of {@link InheritFromParentState} that the service accepts. */
export enum KnownInheritFromParentState {
  /** Disabled */
  Disabled = "Disabled",
  /** Enabled */
  Enabled = "Enabled",
}

/**
 * Defines values for InheritFromParentState. \
 * {@link KnownInheritFromParentState} can be used interchangeably with InheritFromParentState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Disabled** \
 * **Enabled**
 */
export type InheritFromParentState = string;

/** Known values of {@link AutoDiscovery} that the service accepts. */
export enum KnownAutoDiscovery {
  /** Disabled */
  Disabled = "Disabled",
  /** Enabled */
  Enabled = "Enabled",
  /** NotApplicable */
  NotApplicable = "NotApplicable",
}

/**
 * Defines values for AutoDiscovery. \
 * {@link KnownAutoDiscovery} can be used interchangeably with AutoDiscovery,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Disabled** \
 * **Enabled** \
 * **NotApplicable**
 */
export type AutoDiscovery = string;

/** Known values of {@link DesiredOnboardingState} that the service accepts. */
export enum KnownDesiredOnboardingState {
  /** Disabled */
  Disabled = "Disabled",
  /** Enabled */
  Enabled = "Enabled",
}

/**
 * Defines values for DesiredOnboardingState. \
 * {@link KnownDesiredOnboardingState} can be used interchangeably with DesiredOnboardingState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Disabled** \
 * **Enabled**
 */
export type DesiredOnboardingState = string;

/** Optional parameters. */
export interface AzureDevOpsOrgsListAvailableOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listAvailable operation. */
export type AzureDevOpsOrgsListAvailableResponse = AzureDevOpsOrgListResponse;

/** Optional parameters. */
export interface AzureDevOpsOrgsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type AzureDevOpsOrgsListResponse = AzureDevOpsOrgListResponse;

/** Optional parameters. */
export interface AzureDevOpsOrgsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type AzureDevOpsOrgsGetResponse = AzureDevOpsOrg;

/** Optional parameters. */
export interface AzureDevOpsOrgsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type AzureDevOpsOrgsCreateOrUpdateResponse = AzureDevOpsOrg;

/** Optional parameters. */
export interface AzureDevOpsOrgsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type AzureDevOpsOrgsUpdateResponse = AzureDevOpsOrg;

/** Optional parameters. */
export interface AzureDevOpsOrgsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type AzureDevOpsOrgsListNextResponse = AzureDevOpsOrgListResponse;

/** Optional parameters. */
export interface AzureDevOpsProjectsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type AzureDevOpsProjectsListResponse = AzureDevOpsProjectListResponse;

/** Optional parameters. */
export interface AzureDevOpsProjectsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type AzureDevOpsProjectsGetResponse = AzureDevOpsProject;

/** Optional parameters. */
export interface AzureDevOpsProjectsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type AzureDevOpsProjectsCreateOrUpdateResponse = AzureDevOpsProject;

/** Optional parameters. */
export interface AzureDevOpsProjectsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type AzureDevOpsProjectsUpdateResponse = AzureDevOpsProject;

/** Optional parameters. */
export interface AzureDevOpsProjectsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type AzureDevOpsProjectsListNextResponse =
  AzureDevOpsProjectListResponse;

/** Optional parameters. */
export interface AzureDevOpsReposListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type AzureDevOpsReposListResponse = AzureDevOpsRepositoryListResponse;

/** Optional parameters. */
export interface AzureDevOpsReposGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type AzureDevOpsReposGetResponse = AzureDevOpsRepository;

/** Optional parameters. */
export interface AzureDevOpsReposCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type AzureDevOpsReposCreateOrUpdateResponse = AzureDevOpsRepository;

/** Optional parameters. */
export interface AzureDevOpsReposUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type AzureDevOpsReposUpdateResponse = AzureDevOpsRepository;

/** Optional parameters. */
export interface AzureDevOpsReposListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type AzureDevOpsReposListNextResponse =
  AzureDevOpsRepositoryListResponse;

/** Optional parameters. */
export interface DevOpsConfigurationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type DevOpsConfigurationsListResponse = DevOpsConfigurationListResponse;

/** Optional parameters. */
export interface DevOpsConfigurationsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type DevOpsConfigurationsGetResponse = DevOpsConfiguration;

/** Optional parameters. */
export interface DevOpsConfigurationsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type DevOpsConfigurationsCreateOrUpdateResponse = DevOpsConfiguration;

/** Optional parameters. */
export interface DevOpsConfigurationsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type DevOpsConfigurationsUpdateResponse = DevOpsConfiguration;

/** Optional parameters. */
export interface DevOpsConfigurationsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DevOpsConfigurationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type DevOpsConfigurationsListNextResponse =
  DevOpsConfigurationListResponse;

/** Optional parameters. */
export interface GitHubOwnersListAvailableOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listAvailable operation. */
export type GitHubOwnersListAvailableResponse = GitHubOwnerListResponse;

/** Optional parameters. */
export interface GitHubOwnersListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type GitHubOwnersListResponse = GitHubOwnerListResponse;

/** Optional parameters. */
export interface GitHubOwnersGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type GitHubOwnersGetResponse = GitHubOwner;

/** Optional parameters. */
export interface GitHubOwnersListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type GitHubOwnersListNextResponse = GitHubOwnerListResponse;

/** Optional parameters. */
export interface GitHubReposListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type GitHubReposListResponse = GitHubRepositoryListResponse;

/** Optional parameters. */
export interface GitHubReposGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type GitHubReposGetResponse = GitHubRepository;

/** Optional parameters. */
export interface GitHubReposListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type GitHubReposListNextResponse = GitHubRepositoryListResponse;

/** Optional parameters. */
export interface GitLabGroupsListAvailableOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listAvailable operation. */
export type GitLabGroupsListAvailableResponse = GitLabGroupListResponse;

/** Optional parameters. */
export interface GitLabGroupsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type GitLabGroupsListResponse = GitLabGroupListResponse;

/** Optional parameters. */
export interface GitLabGroupsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type GitLabGroupsGetResponse = GitLabGroup;

/** Optional parameters. */
export interface GitLabGroupsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type GitLabGroupsListNextResponse = GitLabGroupListResponse;

/** Optional parameters. */
export interface GitLabSubgroupsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type GitLabSubgroupsListResponse = GitLabGroupListResponse;

/** Optional parameters. */
export interface GitLabProjectsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type GitLabProjectsListResponse = GitLabProjectListResponse;

/** Optional parameters. */
export interface GitLabProjectsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type GitLabProjectsGetResponse = GitLabProject;

/** Optional parameters. */
export interface GitLabProjectsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type GitLabProjectsListNextResponse = GitLabProjectListResponse;

/** Optional parameters. */
export interface DevOpsOperationResultsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type DevOpsOperationResultsGetResponse = OperationStatusResult;

/** Optional parameters. */
export interface SecurityCenterOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
