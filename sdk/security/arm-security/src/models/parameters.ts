/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter
} from "@azure/core-client";
import {
  CustomRecommendation as CustomRecommendationMapper,
  SecurityStandard as SecurityStandardMapper,
  StandardAssignment as StandardAssignmentMapper
} from "../models/mappers";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2023-05-01-preview",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const scope: OperationURLParameter = {
  parameterPath: "scope",
  mapper: {
    constraints: {
      MaxLength: 90,
      MinLength: 1
    },
    serializedName: "scope",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const resourceId: OperationURLParameter = {
  parameterPath: "resourceId",
  mapper: {
    serializedName: "resourceId",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const healthReportName: OperationURLParameter = {
  parameterPath: "healthReportName",
  mapper: {
    constraints: {
      Pattern: new RegExp(
        "[{]?[0-9a-fA-F]{8}-(?:[0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}[}]?$"
      )
    },
    serializedName: "healthReportName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const scope1: OperationURLParameter = {
  parameterPath: "scope",
  mapper: {
    serializedName: "scope",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const customRecommendationName: OperationURLParameter = {
  parameterPath: "customRecommendationName",
  mapper: {
    constraints: {
      Pattern: new RegExp(
        "[{]?[0-9a-fA-F]{8}-(?:[0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}[}]?$"
      )
    },
    serializedName: "customRecommendationName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const customRecommendationBody: OperationParameter = {
  parameterPath: "customRecommendationBody",
  mapper: CustomRecommendationMapper
};

export const standardId: OperationURLParameter = {
  parameterPath: "standardId",
  mapper: {
    constraints: {
      Pattern: new RegExp(
        "[{]?[0-9a-fA-F]{8}-(?:[0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}[}]?$"
      )
    },
    serializedName: "standardId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const standard: OperationParameter = {
  parameterPath: "standard",
  mapper: SecurityStandardMapper
};

export const standardAssignmentName: OperationURLParameter = {
  parameterPath: "standardAssignmentName",
  mapper: {
    constraints: {
      Pattern: new RegExp(
        "[{]?[0-9a-fA-F]{8}-(?:[0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}[}]?$"
      )
    },
    serializedName: "standardAssignmentName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const standardAssignment: OperationParameter = {
  parameterPath: "standardAssignment",
  mapper: StandardAssignmentMapper
};
