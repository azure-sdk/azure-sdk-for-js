/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter,
} from "@azure/core-client";
import {
  AzureDevOpsOrg as AzureDevOpsOrgMapper,
  AzureDevOpsProject as AzureDevOpsProjectMapper,
  AzureDevOpsRepository as AzureDevOpsRepositoryMapper,
  DevOpsConfiguration as DevOpsConfigurationMapper,
} from "../models/mappers";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String",
    },
  },
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    constraints: {
      MinLength: 1,
    },
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    constraints: {
      MaxLength: 90,
      MinLength: 1,
    },
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const securityConnectorName: OperationURLParameter = {
  parameterPath: "securityConnectorName",
  mapper: {
    serializedName: "securityConnectorName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2025-05-15-preview",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String",
    },
  },
};

export const orgName: OperationURLParameter = {
  parameterPath: "orgName",
  mapper: {
    serializedName: "orgName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String",
    },
  },
};

export const azureDevOpsOrg: OperationParameter = {
  parameterPath: "azureDevOpsOrg",
  mapper: AzureDevOpsOrgMapper,
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const projectName: OperationURLParameter = {
  parameterPath: "projectName",
  mapper: {
    serializedName: "projectName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const azureDevOpsProject: OperationParameter = {
  parameterPath: "azureDevOpsProject",
  mapper: AzureDevOpsProjectMapper,
};

export const repoName: OperationURLParameter = {
  parameterPath: "repoName",
  mapper: {
    serializedName: "repoName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const azureDevOpsRepository: OperationParameter = {
  parameterPath: "azureDevOpsRepository",
  mapper: AzureDevOpsRepositoryMapper,
};

export const devOpsConfiguration: OperationParameter = {
  parameterPath: "devOpsConfiguration",
  mapper: DevOpsConfigurationMapper,
};

export const ownerName: OperationURLParameter = {
  parameterPath: "ownerName",
  mapper: {
    serializedName: "ownerName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const groupFQName: OperationURLParameter = {
  parameterPath: "groupFQName",
  mapper: {
    serializedName: "groupFQName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const operationResultId: OperationURLParameter = {
  parameterPath: "operationResultId",
  mapper: {
    serializedName: "operationResultId",
    required: true,
    type: {
      name: "String",
    },
  },
};
