/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  SecurityStandard,
  SecurityStandardsListOptionalParams,
  SecurityStandardsGetOptionalParams,
  SecurityStandardsGetResponse,
  SecurityStandardsCreateOrUpdateOptionalParams,
  SecurityStandardsCreateOrUpdateResponse,
  SecurityStandardsDeleteOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a SecurityStandards. */
export interface SecurityStandards {
  /**
   * Get a list of all relevant security standards over a scope
   * @param scope The scope of the security standard. Valid scopes are: management group (format:
   *              'providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
   *              'subscriptions/{subscriptionId}'), or security connector (format:
   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
   * @param options The options parameters.
   */
  list(
    scope: string,
    options?: SecurityStandardsListOptionalParams
  ): PagedAsyncIterableIterator<SecurityStandard>;
  /**
   * Get a specific security standard for the requested scope by standardId
   * @param scope The scope of the security standard. Valid scopes are: management group (format:
   *              'providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
   *              'subscriptions/{subscriptionId}'), or security connector (format:
   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
   * @param standardId The Security Standard key - unique key for the standard type
   * @param options The options parameters.
   */
  get(
    scope: string,
    standardId: string,
    options?: SecurityStandardsGetOptionalParams
  ): Promise<SecurityStandardsGetResponse>;
  /**
   * Creates or updates a security standard over a given scope
   * @param scope The scope of the security standard. Valid scopes are: management group (format:
   *              'providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
   *              'subscriptions/{subscriptionId}'), or security connector (format:
   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
   * @param standardId The Security Standard key - unique key for the standard type
   * @param standard Custom security standard over a pre-defined scope
   * @param options The options parameters.
   */
  createOrUpdate(
    scope: string,
    standardId: string,
    standard: SecurityStandard,
    options?: SecurityStandardsCreateOrUpdateOptionalParams
  ): Promise<SecurityStandardsCreateOrUpdateResponse>;
  /**
   * Delete a security standard over a given scope
   * @param scope The scope of the security standard. Valid scopes are: management group (format:
   *              'providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
   *              'subscriptions/{subscriptionId}'), or security connector (format:
   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
   * @param standardId The Security Standard key - unique key for the standard type
   * @param options The options parameters.
   */
  beginDelete(
    scope: string,
    standardId: string,
    options?: SecurityStandardsDeleteOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Delete a security standard over a given scope
   * @param scope The scope of the security standard. Valid scopes are: management group (format:
   *              'providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
   *              'subscriptions/{subscriptionId}'), or security connector (format:
   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
   * @param standardId The Security Standard key - unique key for the standard type
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    scope: string,
    standardId: string,
    options?: SecurityStandardsDeleteOptionalParams
  ): Promise<void>;
}
