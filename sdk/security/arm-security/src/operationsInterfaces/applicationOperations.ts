/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  Application,
  ApplicationListOptionalParams,
  ApplicationListByRuleIdOptionalParams,
  ApplicationGetOptionalParams,
  ApplicationGetResponse,
  ApplicationUpdateOptionalParams,
  ApplicationUpdateResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a ApplicationOperations. */
export interface ApplicationOperations {
  /**
   * Get a list of all relevant applications over a scope
   * @param scope The scope of the application. Valid scopes are: management group (format:
   *              'providers/Microsoft.Management/managementGroups/{resourceName}'), subscription (format:
   *              'subscriptions/{subscriptionId}'), or security connector (format:
   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Security/securityConnectors/{resourceName})'
   * @param options The options parameters.
   */
  list(
    scope: string,
    options?: ApplicationListOptionalParams
  ): PagedAsyncIterableIterator<Application>;
  /**
   * Get a list of all relevant applications over a rule Id.
   * @param scope The scope of the application. Valid scopes are: management group (format:
   *              'providers/Microsoft.Management/managementGroups/{resourceName}'), subscription (format:
   *              'subscriptions/{subscriptionId}'), or security connector (format:
   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Security/securityConnectors/{resourceName})'
   * @param ruleId The rule Key - unique key for the rule (GUID)
   * @param options The options parameters.
   */
  listByRuleId(
    scope: string,
    ruleId: string,
    options?: ApplicationListByRuleIdOptionalParams
  ): PagedAsyncIterableIterator<Application>;
  /**
   * Retrieves details of a specific application
   * @param scope The scope of the application. Valid scopes are: management group (format:
   *              'providers/Microsoft.Management/managementGroups/{resourceName}'), subscription (format:
   *              'subscriptions/{subscriptionId}'), or security connector (format:
   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Security/securityConnectors/{resourceName})'
   * @param ruleId The rule Key - unique key for the rule (GUID)
   * @param applicationId The rule Key - unique key for the application (GUID)
   * @param options The options parameters.
   */
  get(
    scope: string,
    ruleId: string,
    applicationId: string,
    options?: ApplicationGetOptionalParams
  ): Promise<ApplicationGetResponse>;
  /**
   * Updates a single application
   * @param scope The scope of the application. Valid scopes are: management group (format:
   *              'providers/Microsoft.Management/managementGroups/{resourceName}'), subscription (format:
   *              'subscriptions/{subscriptionId}'), or security connector (format:
   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Security/securityConnectors/{resourceName})'
   * @param ruleId The rule Key - unique key for the rule (GUID)
   * @param applicationId The rule Key - unique key for the application (GUID)
   * @param application The application resource
   * @param options The options parameters.
   */
  update(
    scope: string,
    ruleId: string,
    applicationId: string,
    application: Application,
    options?: ApplicationUpdateOptionalParams
  ): Promise<ApplicationUpdateResponse>;
}
