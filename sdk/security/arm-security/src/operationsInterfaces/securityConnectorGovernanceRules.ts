/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  SecurityConnectorGovernanceRulesGetOptionalParams,
  SecurityConnectorGovernanceRulesGetResponse,
  GovernanceRule,
  SecurityConnectorGovernanceRulesCreateOrUpdateOptionalParams,
  SecurityConnectorGovernanceRulesCreateOrUpdateResponse,
  SecurityConnectorGovernanceRulesDeleteOptionalParams
} from "../models";

/** Interface representing a SecurityConnectorGovernanceRules. */
export interface SecurityConnectorGovernanceRules {
  /**
   * Get a specific governance rule for the requested scope by ruleId
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param securityConnectorName The security connector name.
   * @param ruleId The governance rule key - unique key for the standard governance rule (GUID)
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    securityConnectorName: string,
    ruleId: string,
    options?: SecurityConnectorGovernanceRulesGetOptionalParams
  ): Promise<SecurityConnectorGovernanceRulesGetResponse>;
  /**
   * Creates or updates a governance rule on the given security connector
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param securityConnectorName The security connector name.
   * @param ruleId The governance rule key - unique key for the standard governance rule (GUID)
   * @param governanceRule Governance rule over a given scope
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    securityConnectorName: string,
    ruleId: string,
    governanceRule: GovernanceRule,
    options?: SecurityConnectorGovernanceRulesCreateOrUpdateOptionalParams
  ): Promise<SecurityConnectorGovernanceRulesCreateOrUpdateResponse>;
  /**
   * Delete a Governance rule over a given scope
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param securityConnectorName The security connector name.
   * @param ruleId The governance rule key - unique key for the standard governance rule (GUID)
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    securityConnectorName: string,
    ruleId: string,
    options?: SecurityConnectorGovernanceRulesDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Delete a Governance rule over a given scope
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param securityConnectorName The security connector name.
   * @param ruleId The governance rule key - unique key for the standard governance rule (GUID)
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    securityConnectorName: string,
    ruleId: string,
    options?: SecurityConnectorGovernanceRulesDeleteOptionalParams
  ): Promise<void>;
}
