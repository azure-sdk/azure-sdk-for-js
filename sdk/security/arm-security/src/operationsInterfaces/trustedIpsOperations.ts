/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  TrustedIps,
  TrustedIpsListOptionalParams,
  TrustedIpsGetOptionalParams,
  TrustedIpsGetResponse,
  TrustedIpsCreateOrUpdateOptionalParams,
  TrustedIpsCreateOrUpdateResponse,
  TrustedIpsDeleteOptionalParams,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a TrustedIpsOperations. */
export interface TrustedIpsOperations {
  /**
   * Get a list of all relevant trusted IPs over a scope
   * @param scope The scope of the Trusted IPs. Valid scopes are: management group (format:
   *              'providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
   *              'subscriptions/{subscriptionId}'), or security connector (format:
   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
   * @param options The options parameters.
   */
  list(
    scope: string,
    options?: TrustedIpsListOptionalParams,
  ): PagedAsyncIterableIterator<TrustedIps>;
  /**
   * Get a specific trusted IPs object for the requested scope by trusted IPs Id
   * @param scope The scope of the Trusted IPs. Valid scopes are: management group (format:
   *              'providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
   *              'subscriptions/{subscriptionId}'), or security connector (format:
   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
   * @param trustedIpsId The trusted IPs key - unique key for the specific trusted IPs range (GUID)
   * @param options The options parameters.
   */
  get(
    scope: string,
    trustedIpsId: string,
    options?: TrustedIpsGetOptionalParams,
  ): Promise<TrustedIpsGetResponse>;
  /**
   * Creates or updates a trusted IPs object over a given scope
   * @param scope The scope of the Trusted IPs. Valid scopes are: management group (format:
   *              'providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
   *              'subscriptions/{subscriptionId}'), or security connector (format:
   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
   * @param trustedIpsId The trusted IPs key - unique key for the specific trusted IPs range (GUID)
   * @param trustedIps Trusted IPs over a given scope
   * @param options The options parameters.
   */
  createOrUpdate(
    scope: string,
    trustedIpsId: string,
    trustedIps: TrustedIps,
    options?: TrustedIpsCreateOrUpdateOptionalParams,
  ): Promise<TrustedIpsCreateOrUpdateResponse>;
  /**
   * Delete a trusted IPs object over a given scope
   * @param scope The scope of the Trusted IPs. Valid scopes are: management group (format:
   *              'providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
   *              'subscriptions/{subscriptionId}'), or security connector (format:
   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
   * @param trustedIpsId The trusted IPs key - unique key for the specific trusted IPs range (GUID)
   * @param options The options parameters.
   */
  delete(
    scope: string,
    trustedIpsId: string,
    options?: TrustedIpsDeleteOptionalParams,
  ): Promise<void>;
}
