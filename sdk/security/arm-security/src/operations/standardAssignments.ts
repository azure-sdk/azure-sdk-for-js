/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { StandardAssignments } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SecurityCenter } from "../securityCenter";
import {
  StandardAssignment,
  StandardAssignmentsListNextOptionalParams,
  StandardAssignmentsListOptionalParams,
  StandardAssignmentsListResponse,
  StandardAssignmentsGetOptionalParams,
  StandardAssignmentsGetResponse,
  StandardAssignmentsCreateOptionalParams,
  StandardAssignmentsCreateResponse,
  StandardAssignmentsDeleteOptionalParams,
  StandardAssignmentsListNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing StandardAssignments operations. */
export class StandardAssignmentsImpl implements StandardAssignments {
  private readonly client: SecurityCenter;

  /**
   * Initialize a new instance of the class StandardAssignments class.
   * @param client Reference to the service client
   */
  constructor(client: SecurityCenter) {
    this.client = client;
  }

  /**
   * Get a list of all relevant standard assignments over a scope
   * @param scope The scope of the standard assignment. Valid scopes are: management group (format:
   *              'providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
   *              'subscriptions/{subscriptionId}'), or security connector (format:
   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
   * @param options The options parameters.
   */
  public list(
    scope: string,
    options?: StandardAssignmentsListOptionalParams,
  ): PagedAsyncIterableIterator<StandardAssignment> {
    const iter = this.listPagingAll(scope, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(scope, options, settings);
      },
    };
  }

  private async *listPagingPage(
    scope: string,
    options?: StandardAssignmentsListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<StandardAssignment[]> {
    let result: StandardAssignmentsListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(scope, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(scope, continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    scope: string,
    options?: StandardAssignmentsListOptionalParams,
  ): AsyncIterableIterator<StandardAssignment> {
    for await (const page of this.listPagingPage(scope, options)) {
      yield* page;
    }
  }

  /**
   * This operation retrieves a single standard assignment, given its name and the scope it was created
   * at.
   * @param resourceId The identifier of the resource.
   * @param standardAssignmentName The standard assignments assignment key - unique key for the standard
   *                               assignment
   * @param options The options parameters.
   */
  get(
    resourceId: string,
    standardAssignmentName: string,
    options?: StandardAssignmentsGetOptionalParams,
  ): Promise<StandardAssignmentsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceId, standardAssignmentName, options },
      getOperationSpec,
    );
  }

  /**
   *  This operation creates or updates a standard assignment with the given scope and name. standard
   * assignments apply to all resources contained within their scope. For example, when you assign a
   * policy at resource group scope, that policy applies to all resources in the group.
   * @param resourceId The identifier of the resource.
   * @param standardAssignmentName The standard assignments assignment key - unique key for the standard
   *                               assignment
   * @param standardAssignment Custom standard assignment over a pre-defined scope
   * @param options The options parameters.
   */
  create(
    resourceId: string,
    standardAssignmentName: string,
    standardAssignment: StandardAssignment,
    options?: StandardAssignmentsCreateOptionalParams,
  ): Promise<StandardAssignmentsCreateResponse> {
    return this.client.sendOperationRequest(
      { resourceId, standardAssignmentName, standardAssignment, options },
      createOperationSpec,
    );
  }

  /**
   * This operation deletes a standard assignment, given its name and the scope it was created in. The
   * scope of a standard assignment is the part of its ID preceding
   * '/providers/Microsoft.Security/standardAssignments/{standardAssignmentName}'.
   * @param resourceId The identifier of the resource.
   * @param standardAssignmentName The standard assignments assignment key - unique key for the standard
   *                               assignment
   * @param options The options parameters.
   */
  delete(
    resourceId: string,
    standardAssignmentName: string,
    options?: StandardAssignmentsDeleteOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceId, standardAssignmentName, options },
      deleteOperationSpec,
    );
  }

  /**
   * Get a list of all relevant standard assignments over a scope
   * @param scope The scope of the standard assignment. Valid scopes are: management group (format:
   *              'providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
   *              'subscriptions/{subscriptionId}'), or security connector (format:
   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
   * @param options The options parameters.
   */
  private _list(
    scope: string,
    options?: StandardAssignmentsListOptionalParams,
  ): Promise<StandardAssignmentsListResponse> {
    return this.client.sendOperationRequest(
      { scope, options },
      listOperationSpec,
    );
  }

  /**
   * ListNext
   * @param scope The scope of the standard assignment. Valid scopes are: management group (format:
   *              'providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
   *              'subscriptions/{subscriptionId}'), or security connector (format:
   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    scope: string,
    nextLink: string,
    options?: StandardAssignmentsListNextOptionalParams,
  ): Promise<StandardAssignmentsListNextResponse> {
    return this.client.sendOperationRequest(
      { scope, nextLink, options },
      listNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path: "/{resourceId}/providers/Microsoft.Security/standardAssignments/{standardAssignmentName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StandardAssignment,
    },
    default: {
      bodyMapper: Mappers.ErrorResponseAutoGenerated,
    },
  },
  queryParameters: [Parameters.apiVersion27],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceId,
    Parameters.standardAssignmentName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOperationSpec: coreClient.OperationSpec = {
  path: "/{resourceId}/providers/Microsoft.Security/standardAssignments/{standardAssignmentName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.StandardAssignment,
    },
    201: {
      bodyMapper: Mappers.StandardAssignment,
    },
    default: {
      bodyMapper: Mappers.ErrorResponseAutoGenerated,
    },
  },
  requestBody: Parameters.standardAssignment,
  queryParameters: [Parameters.apiVersion27],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceId,
    Parameters.standardAssignmentName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/{resourceId}/providers/Microsoft.Security/standardAssignments/{standardAssignmentName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponseAutoGenerated,
    },
  },
  queryParameters: [Parameters.apiVersion27],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceId,
    Parameters.standardAssignmentName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listOperationSpec: coreClient.OperationSpec = {
  path: "/{scope}/providers/Microsoft.Security/standardAssignments",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StandardAssignmentsList,
    },
    default: {
      bodyMapper: Mappers.ErrorResponseAutoGenerated,
    },
  },
  queryParameters: [Parameters.apiVersion27],
  urlParameters: [Parameters.$host, Parameters.scope1],
  headerParameters: [Parameters.accept],
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StandardAssignmentsList,
    },
    default: {
      bodyMapper: Mappers.ErrorResponseAutoGenerated,
    },
  },
  urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.scope1],
  headerParameters: [Parameters.accept],
  serializer,
};
