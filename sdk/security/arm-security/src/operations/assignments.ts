/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { Assignments } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SecurityCenter } from "../securityCenter";
import {
  Assignment,
  AssignmentsListBySubscriptionNextOptionalParams,
  AssignmentsListBySubscriptionOptionalParams,
  AssignmentsListBySubscriptionResponse,
  AssignmentsListNextOptionalParams,
  AssignmentsListOptionalParams,
  AssignmentsListResponse,
  AssignmentsGetOptionalParams,
  AssignmentsGetResponse,
  AssignmentsCreateOrUpdateOptionalParams,
  AssignmentsCreateOrUpdateResponse,
  AssignmentsDeleteOptionalParams,
  AssignmentsListBySubscriptionNextResponse,
  AssignmentsListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Assignments operations. */
export class AssignmentsImpl implements Assignments {
  private readonly client: SecurityCenter;

  /**
   * Initialize a new instance of the class Assignments class.
   * @param client Reference to the service client
   */
  constructor(client: SecurityCenter) {
    this.client = client;
  }

  /**
   * Get a list of all relevant standardAssignments over a subscription level scope
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: AssignmentsListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<Assignment> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionPagingPage(options, settings);
      }
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: AssignmentsListBySubscriptionOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Assignment[]> {
    let result: AssignmentsListBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySubscription(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySubscriptionPagingAll(
    options?: AssignmentsListBySubscriptionOptionalParams
  ): AsyncIterableIterator<Assignment> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Get a list of all relevant standardAssignments available for scope
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    options?: AssignmentsListOptionalParams
  ): PagedAsyncIterableIterator<Assignment> {
    const iter = this.listPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(resourceGroupName, options, settings);
      }
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    options?: AssignmentsListOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Assignment[]> {
    let result: AssignmentsListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    options?: AssignmentsListOptionalParams
  ): AsyncIterableIterator<Assignment> {
    for await (const page of this.listPagingPage(resourceGroupName, options)) {
      yield* page;
    }
  }

  /**
   * Get a list of all relevant standardAssignments over a subscription level scope
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: AssignmentsListBySubscriptionOptionalParams
  ): Promise<AssignmentsListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec
    );
  }

  /**
   * Get a list of all relevant standardAssignments available for scope
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    options?: AssignmentsListOptionalParams
  ): Promise<AssignmentsListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listOperationSpec
    );
  }

  /**
   * Get a specific standard assignment for the requested scope by resourceId
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param assignmentId The security assignment key - unique key for the standard assignment
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    assignmentId: string,
    options?: AssignmentsGetOptionalParams
  ): Promise<AssignmentsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, assignmentId, options },
      getOperationSpec
    );
  }

  /**
   * Create a security assignment on the given scope. Will create/update the required standard
   * assignment.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param assignmentId The security assignment key - unique key for the standard assignment
   * @param assignment Custom standard assignment over a pre-defined scope
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    assignmentId: string,
    assignment: Assignment,
    options?: AssignmentsCreateOrUpdateOptionalParams
  ): Promise<AssignmentsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, assignmentId, assignment, options },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Delete a standard assignment over a given scope
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param assignmentId The security assignment key - unique key for the standard assignment
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    assignmentId: string,
    options?: AssignmentsDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, assignmentId, options },
      deleteOperationSpec
    );
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: AssignmentsListBySubscriptionNextOptionalParams
  ): Promise<AssignmentsListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec
    );
  }

  /**
   * ListNext
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    nextLink: string,
    options?: AssignmentsListNextOptionalParams
  ): Promise<AssignmentsListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Security/assignments",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AssignmentList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/assignments",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AssignmentList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/assignments/{assignmentId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Assignment
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.assignmentId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/assignments/{assignmentId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Assignment
    },
    201: {
      bodyMapper: Mappers.Assignment
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.assignment,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.assignmentId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/assignments/{assignmentId}",
  httpMethod: "DELETE",
  responses: { 200: {}, 204: {}, default: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.assignmentId
  ],
  serializer
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AssignmentList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AssignmentList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
