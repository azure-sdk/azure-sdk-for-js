/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { ApplicationMappingRules } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SecurityCenter } from "../securityCenter";
import {
  ApplicationMappingRule,
  ApplicationMappingRulesListNextOptionalParams,
  ApplicationMappingRulesListOptionalParams,
  ApplicationMappingRulesListResponse,
  ApplicationMappingRulesGetOptionalParams,
  ApplicationMappingRulesGetResponse,
  ApplicationMappingRulesCreateOrUpdateOptionalParams,
  ApplicationMappingRulesCreateOrUpdateResponse,
  ApplicationMappingRulesDeleteOptionalParams,
  ApplicationMappingRulesListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ApplicationMappingRules operations. */
export class ApplicationMappingRulesImpl implements ApplicationMappingRules {
  private readonly client: SecurityCenter;

  /**
   * Initialize a new instance of the class ApplicationMappingRules class.
   * @param client Reference to the service client
   */
  constructor(client: SecurityCenter) {
    this.client = client;
  }

  /**
   * Get a list of all relevant application mapping rules over a scope.
   * @param scope The scope of the application mapping rules rules. Valid scopes are: management group
   *              (format: 'providers/Microsoft.Management/managementGroups/{resourceName}'), subscription (format:
   *              'subscriptions/{subscriptionId}'), or security connector (format:
   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Security/securityConnectors/{resourceName})'
   * @param options The options parameters.
   */
  public list(
    scope: string,
    options?: ApplicationMappingRulesListOptionalParams
  ): PagedAsyncIterableIterator<ApplicationMappingRule> {
    const iter = this.listPagingAll(scope, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(scope, options, settings);
      }
    };
  }

  private async *listPagingPage(
    scope: string,
    options?: ApplicationMappingRulesListOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<ApplicationMappingRule[]> {
    let result: ApplicationMappingRulesListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(scope, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(scope, continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    scope: string,
    options?: ApplicationMappingRulesListOptionalParams
  ): AsyncIterableIterator<ApplicationMappingRule> {
    for await (const page of this.listPagingPage(scope, options)) {
      yield* page;
    }
  }

  /**
   * Get a list of all relevant application mapping rules over a scope.
   * @param scope The scope of the application mapping rules rules. Valid scopes are: management group
   *              (format: 'providers/Microsoft.Management/managementGroups/{resourceName}'), subscription (format:
   *              'subscriptions/{subscriptionId}'), or security connector (format:
   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Security/securityConnectors/{resourceName})'
   * @param options The options parameters.
   */
  private _list(
    scope: string,
    options?: ApplicationMappingRulesListOptionalParams
  ): Promise<ApplicationMappingRulesListResponse> {
    return this.client.sendOperationRequest(
      { scope, options },
      listOperationSpec
    );
  }

  /**
   * Retrieves details of a specific application mapping rule for the requested scope by ruleId.
   * @param scope The scope of the application mapping rules rules. Valid scopes are: management group
   *              (format: 'providers/Microsoft.Management/managementGroups/{resourceName}'), subscription (format:
   *              'subscriptions/{subscriptionId}'), or security connector (format:
   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Security/securityConnectors/{resourceName})'
   * @param ruleId The rule key - unique key for the rule (GUID)
   * @param options The options parameters.
   */
  get(
    scope: string,
    ruleId: string,
    options?: ApplicationMappingRulesGetOptionalParams
  ): Promise<ApplicationMappingRulesGetResponse> {
    return this.client.sendOperationRequest(
      { scope, ruleId, options },
      getOperationSpec
    );
  }

  /**
   * Creates or updates a single application mapping rule over a given scope.
   * @param scope The scope of the application mapping rules rules. Valid scopes are: management group
   *              (format: 'providers/Microsoft.Management/managementGroups/{resourceName}'), subscription (format:
   *              'subscriptions/{subscriptionId}'), or security connector (format:
   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Security/securityConnectors/{resourceName})'
   * @param ruleId The rule key - unique key for the rule (GUID)
   * @param applicationMappingRule The application mapping rules resource
   * @param options The options parameters.
   */
  createOrUpdate(
    scope: string,
    ruleId: string,
    applicationMappingRule: ApplicationMappingRule,
    options?: ApplicationMappingRulesCreateOrUpdateOptionalParams
  ): Promise<ApplicationMappingRulesCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { scope, ruleId, applicationMappingRule, options },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Delete a single application mapping rule over a given scope.
   * @param scope The scope of the application mapping rules rules. Valid scopes are: management group
   *              (format: 'providers/Microsoft.Management/managementGroups/{resourceName}'), subscription (format:
   *              'subscriptions/{subscriptionId}'), or security connector (format:
   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Security/securityConnectors/{resourceName})'
   * @param ruleId The rule key - unique key for the rule (GUID)
   * @param options The options parameters.
   */
  delete(
    scope: string,
    ruleId: string,
    options?: ApplicationMappingRulesDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { scope, ruleId, options },
      deleteOperationSpec
    );
  }

  /**
   * ListNext
   * @param scope The scope of the application mapping rules rules. Valid scopes are: management group
   *              (format: 'providers/Microsoft.Management/managementGroups/{resourceName}'), subscription (format:
   *              'subscriptions/{subscriptionId}'), or security connector (format:
   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Security/securityConnectors/{resourceName})'
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    scope: string,
    nextLink: string,
    options?: ApplicationMappingRulesListNextOptionalParams
  ): Promise<ApplicationMappingRulesListNextResponse> {
    return this.client.sendOperationRequest(
      { scope, nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/{scope}/providers/Microsoft.Security/applicationMappingRules",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationMappingRuleList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.scope],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.Security/applicationMappingRules/{ruleId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationMappingRule
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.scope, Parameters.ruleId],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.Security/applicationMappingRules/{ruleId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationMappingRule
    },
    201: {
      bodyMapper: Mappers.ApplicationMappingRule
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.applicationMappingRule,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.scope, Parameters.ruleId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.Security/applicationMappingRules/{ruleId}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.scope, Parameters.ruleId],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationMappingRuleList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [Parameters.$host, Parameters.scope, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
