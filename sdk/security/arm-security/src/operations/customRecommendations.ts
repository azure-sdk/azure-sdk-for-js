/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { CustomRecommendations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SecurityCenter } from "../securityCenter";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  CustomRecommendation,
  CustomRecommendationsListNextOptionalParams,
  CustomRecommendationsListOptionalParams,
  CustomRecommendationsListResponse,
  CustomRecommendationsGetOptionalParams,
  CustomRecommendationsGetResponse,
  CustomRecommendationsCreateOrUpdateOptionalParams,
  CustomRecommendationsCreateOrUpdateResponse,
  CustomRecommendationsDeleteOptionalParams,
  CustomRecommendationsListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing CustomRecommendations operations. */
export class CustomRecommendationsImpl implements CustomRecommendations {
  private readonly client: SecurityCenter;

  /**
   * Initialize a new instance of the class CustomRecommendations class.
   * @param client Reference to the service client
   */
  constructor(client: SecurityCenter) {
    this.client = client;
  }

  /**
   * Get a list of all relevant custom recommendations over a scope
   * @param scope The scope of the custom recommendation. Valid scopes are: management group (format:
   *              'providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
   *              'subscriptions/{subscriptionId}'), or security connector (format:
   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
   * @param options The options parameters.
   */
  public list(
    scope: string,
    options?: CustomRecommendationsListOptionalParams
  ): PagedAsyncIterableIterator<CustomRecommendation> {
    const iter = this.listPagingAll(scope, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(scope, options, settings);
      }
    };
  }

  private async *listPagingPage(
    scope: string,
    options?: CustomRecommendationsListOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<CustomRecommendation[]> {
    let result: CustomRecommendationsListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(scope, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(scope, continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    scope: string,
    options?: CustomRecommendationsListOptionalParams
  ): AsyncIterableIterator<CustomRecommendation> {
    for await (const page of this.listPagingPage(scope, options)) {
      yield* page;
    }
  }

  /**
   * Get a list of all relevant custom recommendations over a scope
   * @param scope The scope of the custom recommendation. Valid scopes are: management group (format:
   *              'providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
   *              'subscriptions/{subscriptionId}'), or security connector (format:
   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
   * @param options The options parameters.
   */
  private _list(
    scope: string,
    options?: CustomRecommendationsListOptionalParams
  ): Promise<CustomRecommendationsListResponse> {
    return this.client.sendOperationRequest(
      { scope, options },
      listOperationSpec
    );
  }

  /**
   * Get a specific custom recommendation for the requested scope by customRecommendationName
   * @param scope The scope of the custom recommendation. Valid scopes are: management group (format:
   *              'providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
   *              'subscriptions/{subscriptionId}'), or security connector (format:
   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
   * @param customRecommendationName Name of the Custom Recommendation.
   * @param options The options parameters.
   */
  get(
    scope: string,
    customRecommendationName: string,
    options?: CustomRecommendationsGetOptionalParams
  ): Promise<CustomRecommendationsGetResponse> {
    return this.client.sendOperationRequest(
      { scope, customRecommendationName, options },
      getOperationSpec
    );
  }

  /**
   * Creates or updates a custom recommendation over a given scope
   * @param scope The scope of the custom recommendation. Valid scopes are: management group (format:
   *              'providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
   *              'subscriptions/{subscriptionId}'), or security connector (format:
   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
   * @param customRecommendationName Name of the Custom Recommendation.
   * @param customRecommendationBody Custom Recommendation body
   * @param options The options parameters.
   */
  createOrUpdate(
    scope: string,
    customRecommendationName: string,
    customRecommendationBody: CustomRecommendation,
    options?: CustomRecommendationsCreateOrUpdateOptionalParams
  ): Promise<CustomRecommendationsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { scope, customRecommendationName, customRecommendationBody, options },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Delete a custom recommendation over a given scope
   * @param scope The scope of the custom recommendation. Valid scopes are: management group (format:
   *              'providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
   *              'subscriptions/{subscriptionId}'), or security connector (format:
   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
   * @param customRecommendationName Name of the Custom Recommendation.
   * @param options The options parameters.
   */
  async beginDelete(
    scope: string,
    customRecommendationName: string,
    options?: CustomRecommendationsDeleteOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { scope, customRecommendationName, options },
      spec: deleteOperationSpec
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete a custom recommendation over a given scope
   * @param scope The scope of the custom recommendation. Valid scopes are: management group (format:
   *              'providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
   *              'subscriptions/{subscriptionId}'), or security connector (format:
   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
   * @param customRecommendationName Name of the Custom Recommendation.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    scope: string,
    customRecommendationName: string,
    options?: CustomRecommendationsDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      scope,
      customRecommendationName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * ListNext
   * @param scope The scope of the custom recommendation. Valid scopes are: management group (format:
   *              'providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
   *              'subscriptions/{subscriptionId}'), or security connector (format:
   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    scope: string,
    nextLink: string,
    options?: CustomRecommendationsListNextOptionalParams
  ): Promise<CustomRecommendationsListNextResponse> {
    return this.client.sendOperationRequest(
      { scope, nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/{scope}/providers/Microsoft.Security/customRecommendations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CustomRecommendationsList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.scope1],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.Security/customRecommendations/{customRecommendationName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CustomRecommendation
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.scope1,
    Parameters.customRecommendationName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.Security/customRecommendations/{customRecommendationName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.CustomRecommendation
    },
    201: {
      bodyMapper: Mappers.CustomRecommendation
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.customRecommendationBody,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.scope1,
    Parameters.customRecommendationName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.Security/customRecommendations/{customRecommendationName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.scope1,
    Parameters.customRecommendationName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CustomRecommendationsList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.scope1],
  headerParameters: [Parameters.accept],
  serializer
};
