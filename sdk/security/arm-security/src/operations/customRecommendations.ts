/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { CustomRecommendations } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { SecurityCenter } from "../securityCenter.js";
import {
  CustomRecommendation,
  CustomRecommendationsListNextOptionalParams,
  CustomRecommendationsListOptionalParams,
  CustomRecommendationsListResponse,
  CustomRecommendationsGetOptionalParams,
  CustomRecommendationsGetResponse,
  CustomRecommendationsCreateOrUpdateOptionalParams,
  CustomRecommendationsCreateOrUpdateResponse,
  CustomRecommendationsDeleteOptionalParams,
  CustomRecommendationsListNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing CustomRecommendations operations. */
export class CustomRecommendationsImpl implements CustomRecommendations {
  private readonly client: SecurityCenter;

  /**
   * Initialize a new instance of the class CustomRecommendations class.
   * @param client Reference to the service client
   */
  constructor(client: SecurityCenter) {
    this.client = client;
  }

  /**
   * Get a list of all relevant custom recommendations over a scope
   * @param scope The scope of the custom recommendation. Valid scopes are: management group (format:
   *              'providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
   *              'subscriptions/{subscriptionId}'), or security connector (format:
   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
   * @param options The options parameters.
   */
  public list(
    scope: string,
    options?: CustomRecommendationsListOptionalParams,
  ): PagedAsyncIterableIterator<CustomRecommendation> {
    const iter = this.listPagingAll(scope, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(scope, options, settings);
      },
    };
  }

  private async *listPagingPage(
    scope: string,
    options?: CustomRecommendationsListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<CustomRecommendation[]> {
    let result: CustomRecommendationsListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(scope, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(scope, continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    scope: string,
    options?: CustomRecommendationsListOptionalParams,
  ): AsyncIterableIterator<CustomRecommendation> {
    for await (const page of this.listPagingPage(scope, options)) {
      yield* page;
    }
  }

  /**
   * Get a list of all relevant custom recommendations over a scope
   * @param scope The scope of the custom recommendation. Valid scopes are: management group (format:
   *              'providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
   *              'subscriptions/{subscriptionId}'), or security connector (format:
   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
   * @param options The options parameters.
   */
  private _list(
    scope: string,
    options?: CustomRecommendationsListOptionalParams,
  ): Promise<CustomRecommendationsListResponse> {
    return this.client.sendOperationRequest(
      { scope, options },
      listOperationSpec,
    );
  }

  /**
   * Get a specific custom recommendation for the requested scope by customRecommendationName
   * @param scope The scope of the custom recommendation. Valid scopes are: management group (format:
   *              'providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
   *              'subscriptions/{subscriptionId}'), or security connector (format:
   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
   * @param customRecommendationName Name of the Custom Recommendation.
   * @param options The options parameters.
   */
  get(
    scope: string,
    customRecommendationName: string,
    options?: CustomRecommendationsGetOptionalParams,
  ): Promise<CustomRecommendationsGetResponse> {
    return this.client.sendOperationRequest(
      { scope, customRecommendationName, options },
      getOperationSpec,
    );
  }

  /**
   * Creates or updates a custom recommendation over a given scope
   * @param scope The scope of the custom recommendation. Valid scopes are: management group (format:
   *              'providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
   *              'subscriptions/{subscriptionId}'), or security connector (format:
   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
   * @param customRecommendationName Name of the Custom Recommendation.
   * @param customRecommendationBody Custom Recommendation body
   * @param options The options parameters.
   */
  createOrUpdate(
    scope: string,
    customRecommendationName: string,
    customRecommendationBody: CustomRecommendation,
    options?: CustomRecommendationsCreateOrUpdateOptionalParams,
  ): Promise<CustomRecommendationsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { scope, customRecommendationName, customRecommendationBody, options },
      createOrUpdateOperationSpec,
    );
  }

  /**
   * Delete a custom recommendation over a given scope
   * @param scope The scope of the custom recommendation. Valid scopes are: management group (format:
   *              'providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
   *              'subscriptions/{subscriptionId}'), or security connector (format:
   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
   * @param customRecommendationName Name of the Custom Recommendation.
   * @param options The options parameters.
   */
  delete(
    scope: string,
    customRecommendationName: string,
    options?: CustomRecommendationsDeleteOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { scope, customRecommendationName, options },
      deleteOperationSpec,
    );
  }

  /**
   * ListNext
   * @param scope The scope of the custom recommendation. Valid scopes are: management group (format:
   *              'providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
   *              'subscriptions/{subscriptionId}'), or security connector (format:
   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    scope: string,
    nextLink: string,
    options?: CustomRecommendationsListNextOptionalParams,
  ): Promise<CustomRecommendationsListNextResponse> {
    return this.client.sendOperationRequest(
      { scope, nextLink, options },
      listNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/{scope}/providers/Microsoft.Security/customRecommendations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CustomRecommendationsList,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion26],
  urlParameters: [Parameters.$host, Parameters.scope1],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/{scope}/providers/Microsoft.Security/customRecommendations/{customRecommendationName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CustomRecommendation,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion26],
  urlParameters: [
    Parameters.$host,
    Parameters.scope1,
    Parameters.customRecommendationName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/{scope}/providers/Microsoft.Security/customRecommendations/{customRecommendationName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.CustomRecommendation,
    },
    201: {
      bodyMapper: Mappers.CustomRecommendation,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.customRecommendationBody,
  queryParameters: [Parameters.apiVersion26],
  urlParameters: [
    Parameters.$host,
    Parameters.scope1,
    Parameters.customRecommendationName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/{scope}/providers/Microsoft.Security/customRecommendations/{customRecommendationName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion26],
  urlParameters: [
    Parameters.$host,
    Parameters.scope1,
    Parameters.customRecommendationName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CustomRecommendationsList,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.scope1],
  headerParameters: [Parameters.accept],
  serializer,
};
