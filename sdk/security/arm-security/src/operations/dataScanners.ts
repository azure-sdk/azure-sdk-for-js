/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { DataScanners } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SecurityCenter } from "../securityCenter";
import {
  DataScanner,
  DataScannersListBySubscriptionNextOptionalParams,
  DataScannersListBySubscriptionOptionalParams,
  DataScannersListBySubscriptionResponse,
  DataScannersGetOptionalParams,
  DataScannersGetResponse,
  DataScannersCreateOrUpdateOptionalParams,
  DataScannersCreateOrUpdateResponse,
  DataScannersDeleteOptionalParams,
  DataScannersListBySubscriptionNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing DataScanners operations. */
export class DataScannersImpl implements DataScanners {
  private readonly client: SecurityCenter;

  /**
   * Initialize a new instance of the class DataScanners class.
   * @param client Reference to the service client
   */
  constructor(client: SecurityCenter) {
    this.client = client;
  }

  /**
   * Get a list of all relevant security data scanners over a subscription level scope.
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: DataScannersListBySubscriptionOptionalParams,
  ): PagedAsyncIterableIterator<DataScanner> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionPagingPage(options, settings);
      },
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: DataScannersListBySubscriptionOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<DataScanner[]> {
    let result: DataScannersListBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySubscription(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySubscriptionPagingAll(
    options?: DataScannersListBySubscriptionOptionalParams,
  ): AsyncIterableIterator<DataScanner> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Get a list of all relevant security data scanners over a subscription level scope.
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: DataScannersListBySubscriptionOptionalParams,
  ): Promise<DataScannersListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec,
    );
  }

  /**
   * Get a specific security data scanner for the requested scope
   * @param dataScannerName Security data scanner name
   * @param options The options parameters.
   */
  get(
    dataScannerName: string,
    options?: DataScannersGetOptionalParams,
  ): Promise<DataScannersGetResponse> {
    return this.client.sendOperationRequest(
      { dataScannerName, options },
      getOperationSpec,
    );
  }

  /**
   * Create a security data scanner
   * @param dataScannerName Name of the data scanner.
   * @param options The options parameters.
   */
  createOrUpdate(
    dataScannerName: string,
    options?: DataScannersCreateOrUpdateOptionalParams,
  ): Promise<DataScannersCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { dataScannerName, options },
      createOrUpdateOperationSpec,
    );
  }

  /**
   * Delete a security data scanners.
   * @param dataScannerName Security data scanner name
   * @param options The options parameters.
   */
  delete(
    dataScannerName: string,
    options?: DataScannersDeleteOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { dataScannerName, options },
      deleteOperationSpec,
    );
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: DataScannersListBySubscriptionNextOptionalParams,
  ): Promise<DataScannersListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Security/dataScanners",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DataScannersList,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion16],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Security/dataScanners/{dataScannerName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DataScanner,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion16],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.dataScannerName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Security/dataScanners/{dataScannerName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.DataScanner,
    },
    201: {
      bodyMapper: Mappers.DataScanner,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion16],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.dataScannerName1,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Security/dataScanners/{dataScannerName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion16],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.dataScannerName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DataScannersList,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
