/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { SubscriptionGovernanceRulesOperationResult } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SecurityCenter } from "../securityCenter";
import {
  SubscriptionGovernanceRulesOperationResultGetOptionalParams,
  SubscriptionGovernanceRulesOperationResultGetResponse
} from "../models";

/** Class containing SubscriptionGovernanceRulesOperationResult operations. */
export class SubscriptionGovernanceRulesOperationResultImpl
  implements SubscriptionGovernanceRulesOperationResult {
  private readonly client: SecurityCenter;

  /**
   * Initialize a new instance of the class SubscriptionGovernanceRulesOperationResult class.
   * @param client Reference to the service client
   */
  constructor(client: SecurityCenter) {
    this.client = client;
  }

  /**
   * Get governance rules long run operation result for the requested scope by ruleId and operationId
   * @param ruleId The governance rule key - unique key for the standard governance rule (GUID)
   * @param operationId The governance rule execution key - unique key for the execution of governance
   *                    rule
   * @param options The options parameters.
   */
  get(
    ruleId: string,
    operationId: string,
    options?: SubscriptionGovernanceRulesOperationResultGetOptionalParams
  ): Promise<SubscriptionGovernanceRulesOperationResultGetResponse> {
    return this.client.sendOperationRequest(
      { ruleId, operationId, options },
      getOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Security/governanceRules/{ruleId}/operationResults/{operationId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OperationResultAutoGenerated
    },
    202: {
      headersMapper:
        Mappers.SubscriptionGovernanceRulesOperationResultGetHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion18],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.ruleId,
    Parameters.operationId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
