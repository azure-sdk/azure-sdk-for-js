/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { SensitivitySettings } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SecurityCenter } from "../securityCenter";
import {
  UpdateSensitivitySettingsRequest,
  SensitivitySettingsUpdateOptionalParams,
  SensitivitySettingsUpdateResponse,
  SensitivitySettingsGetOptionalParams,
  SensitivitySettingsGetResponse,
  SensitivitySettingsListOptionalParams,
  SensitivitySettingsListResponse
} from "../models";

/** Class containing SensitivitySettings operations. */
export class SensitivitySettingsImpl implements SensitivitySettings {
  private readonly client: SecurityCenter;

  /**
   * Initialize a new instance of the class SensitivitySettings class.
   * @param client Reference to the service client
   */
  constructor(client: SecurityCenter) {
    this.client = client;
  }

  /**
   * Updates data sensitivity settings for sensitive data discovery
   * @param sensitivitySettings The data sensitivity settings to update
   * @param options The options parameters.
   */
  update(
    sensitivitySettings: UpdateSensitivitySettingsRequest,
    options?: SensitivitySettingsUpdateOptionalParams
  ): Promise<SensitivitySettingsUpdateResponse> {
    return this.client.sendOperationRequest(
      { sensitivitySettings, options },
      updateOperationSpec
    );
  }

  /**
   * Gets data sensitivity settings for sensitive data discovery
   * @param options The options parameters.
   */
  get(
    options?: SensitivitySettingsGetOptionalParams
  ): Promise<SensitivitySettingsGetResponse> {
    return this.client.sendOperationRequest({ options }, getOperationSpec);
  }

  /**
   * Gets a list with a single sensitivity settings resource
   * @param options The options parameters.
   */
  list(
    options?: SensitivitySettingsListOptionalParams
  ): Promise<SensitivitySettingsListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const updateOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Security/sensitivitySettings/current",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.GetSensitivitySettingsResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.sensitivitySettings,
  queryParameters: [Parameters.apiVersion12],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Security/sensitivitySettings/current",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GetSensitivitySettingsResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion12],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const listOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Security/sensitivitySettings",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GetSensitivitySettingsListResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion12],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
