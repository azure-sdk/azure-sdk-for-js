/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { DefenderForStorage } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { SecurityCenter } from "../securityCenter.js";
import {
  SettingNameAutoGenerated,
  DefenderForStorageGetOptionalParams,
  DefenderForStorageGetResponse,
  DefenderForStorageSetting,
  DefenderForStorageCreateOptionalParams,
  DefenderForStorageCreateResponse,
  DefenderForStorageStartMalwareScanOptionalParams,
  DefenderForStorageStartMalwareScanResponse,
  DefenderForStorageCancelMalwareScanOptionalParams,
  DefenderForStorageCancelMalwareScanResponse,
  DefenderForStorageGetMalwareScanOptionalParams,
  DefenderForStorageGetMalwareScanResponse,
} from "../models/index.js";

/** Class containing DefenderForStorage operations. */
export class DefenderForStorageImpl implements DefenderForStorage {
  private readonly client: SecurityCenter;

  /**
   * Initialize a new instance of the class DefenderForStorage class.
   * @param client Reference to the service client
   */
  constructor(client: SecurityCenter) {
    this.client = client;
  }

  /**
   * Gets the Defender for Storage settings for the specified storage account.
   * @param resourceId The identifier of the resource.
   * @param settingName Defender for Storage setting name.
   * @param options The options parameters.
   */
  get(
    resourceId: string,
    settingName: SettingNameAutoGenerated,
    options?: DefenderForStorageGetOptionalParams,
  ): Promise<DefenderForStorageGetResponse> {
    return this.client.sendOperationRequest({ resourceId, settingName, options }, getOperationSpec);
  }

  /**
   * Creates or updates the Defender for Storage settings on a specified storage account.
   * @param resourceId The identifier of the resource.
   * @param settingName Defender for Storage setting name.
   * @param defenderForStorageSetting Defender for Storage Settings
   * @param options The options parameters.
   */
  create(
    resourceId: string,
    settingName: SettingNameAutoGenerated,
    defenderForStorageSetting: DefenderForStorageSetting,
    options?: DefenderForStorageCreateOptionalParams,
  ): Promise<DefenderForStorageCreateResponse> {
    return this.client.sendOperationRequest(
      { resourceId, settingName, defenderForStorageSetting, options },
      createOperationSpec,
    );
  }

  /**
   * Initiate a Defender for Storage malware scan for the specified storage account.
   * @param resourceId The identifier of the resource.
   * @param settingName Defender for Storage setting name.
   * @param options The options parameters.
   */
  startMalwareScan(
    resourceId: string,
    settingName: SettingNameAutoGenerated,
    options?: DefenderForStorageStartMalwareScanOptionalParams,
  ): Promise<DefenderForStorageStartMalwareScanResponse> {
    return this.client.sendOperationRequest(
      { resourceId, settingName, options },
      startMalwareScanOperationSpec,
    );
  }

  /**
   * Cancels a Defender for Storage malware scan for the specified storage account.
   * @param resourceId The identifier of the resource.
   * @param settingName Defender for Storage setting name.
   * @param scanId The identifier of the scan. Can be either 'latest' or a GUID.
   * @param options The options parameters.
   */
  cancelMalwareScan(
    resourceId: string,
    settingName: SettingNameAutoGenerated,
    scanId: string,
    options?: DefenderForStorageCancelMalwareScanOptionalParams,
  ): Promise<DefenderForStorageCancelMalwareScanResponse> {
    return this.client.sendOperationRequest(
      { resourceId, settingName, scanId, options },
      cancelMalwareScanOperationSpec,
    );
  }

  /**
   * Gets the Defender for Storage malware scan for the specified storage resource.
   * @param resourceId The identifier of the resource.
   * @param settingName Defender for Storage setting name.
   * @param scanId The identifier of the scan. Can be either 'latest' or a GUID.
   * @param options The options parameters.
   */
  getMalwareScan(
    resourceId: string,
    settingName: SettingNameAutoGenerated,
    scanId: string,
    options?: DefenderForStorageGetMalwareScanOptionalParams,
  ): Promise<DefenderForStorageGetMalwareScanResponse> {
    return this.client.sendOperationRequest(
      { resourceId, settingName, scanId, options },
      getMalwareScanOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path: "/{resourceId}/providers/Microsoft.Security/defenderForStorageSettings/{settingName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DefenderForStorageSetting,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion28],
  urlParameters: [Parameters.$host, Parameters.resourceId, Parameters.settingName3],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOperationSpec: coreClient.OperationSpec = {
  path: "/{resourceId}/providers/Microsoft.Security/defenderForStorageSettings/{settingName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.DefenderForStorageSetting,
    },
    201: {
      bodyMapper: Mappers.DefenderForStorageSetting,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  requestBody: Parameters.defenderForStorageSetting,
  queryParameters: [Parameters.apiVersion28],
  urlParameters: [Parameters.$host, Parameters.resourceId, Parameters.settingName3],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const startMalwareScanOperationSpec: coreClient.OperationSpec = {
  path: "/{resourceId}/providers/Microsoft.Security/defenderForStorageSettings/{settingName}/startMalwareScan",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.MalwareScan,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion28],
  urlParameters: [Parameters.$host, Parameters.resourceId, Parameters.settingName3],
  headerParameters: [Parameters.accept],
  serializer,
};
const cancelMalwareScanOperationSpec: coreClient.OperationSpec = {
  path: "/{resourceId}/providers/Microsoft.Security/defenderForStorageSettings/{settingName}/malwareScans/{scanId}/cancelMalwareScan",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.MalwareScan,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion28],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceId,
    Parameters.settingName3,
    Parameters.scanId1,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getMalwareScanOperationSpec: coreClient.OperationSpec = {
  path: "/{resourceId}/providers/Microsoft.Security/defenderForStorageSettings/{settingName}/malwareScans/{scanId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MalwareScan,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion28],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceId,
    Parameters.settingName3,
    Parameters.scanId1,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
