/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { TrustedIpsOperations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SecurityCenter } from "../securityCenter";
import {
  TrustedIps,
  TrustedIpsListNextOptionalParams,
  TrustedIpsListOptionalParams,
  TrustedIpsListResponse,
  TrustedIpsGetOptionalParams,
  TrustedIpsGetResponse,
  TrustedIpsCreateOrUpdateOptionalParams,
  TrustedIpsCreateOrUpdateResponse,
  TrustedIpsDeleteOptionalParams,
  TrustedIpsListNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing TrustedIpsOperations operations. */
export class TrustedIpsOperationsImpl implements TrustedIpsOperations {
  private readonly client: SecurityCenter;

  /**
   * Initialize a new instance of the class TrustedIpsOperations class.
   * @param client Reference to the service client
   */
  constructor(client: SecurityCenter) {
    this.client = client;
  }

  /**
   * Get a list of all relevant trusted IPs over a scope
   * @param scope The scope of the Trusted IPs. Valid scopes are: management group (format:
   *              'providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
   *              'subscriptions/{subscriptionId}'), or security connector (format:
   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
   * @param options The options parameters.
   */
  public list(
    scope: string,
    options?: TrustedIpsListOptionalParams,
  ): PagedAsyncIterableIterator<TrustedIps> {
    const iter = this.listPagingAll(scope, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(scope, options, settings);
      },
    };
  }

  private async *listPagingPage(
    scope: string,
    options?: TrustedIpsListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<TrustedIps[]> {
    let result: TrustedIpsListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(scope, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(scope, continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    scope: string,
    options?: TrustedIpsListOptionalParams,
  ): AsyncIterableIterator<TrustedIps> {
    for await (const page of this.listPagingPage(scope, options)) {
      yield* page;
    }
  }

  /**
   * Get a list of all relevant trusted IPs over a scope
   * @param scope The scope of the Trusted IPs. Valid scopes are: management group (format:
   *              'providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
   *              'subscriptions/{subscriptionId}'), or security connector (format:
   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
   * @param options The options parameters.
   */
  private _list(
    scope: string,
    options?: TrustedIpsListOptionalParams,
  ): Promise<TrustedIpsListResponse> {
    return this.client.sendOperationRequest(
      { scope, options },
      listOperationSpec,
    );
  }

  /**
   * Get a specific trusted IPs object for the requested scope by trusted IPs Id
   * @param scope The scope of the Trusted IPs. Valid scopes are: management group (format:
   *              'providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
   *              'subscriptions/{subscriptionId}'), or security connector (format:
   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
   * @param trustedIpsId The trusted IPs key - unique key for the specific trusted IPs range (GUID)
   * @param options The options parameters.
   */
  get(
    scope: string,
    trustedIpsId: string,
    options?: TrustedIpsGetOptionalParams,
  ): Promise<TrustedIpsGetResponse> {
    return this.client.sendOperationRequest(
      { scope, trustedIpsId, options },
      getOperationSpec,
    );
  }

  /**
   * Creates or updates a trusted IPs object over a given scope
   * @param scope The scope of the Trusted IPs. Valid scopes are: management group (format:
   *              'providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
   *              'subscriptions/{subscriptionId}'), or security connector (format:
   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
   * @param trustedIpsId The trusted IPs key - unique key for the specific trusted IPs range (GUID)
   * @param trustedIps Trusted IPs over a given scope
   * @param options The options parameters.
   */
  createOrUpdate(
    scope: string,
    trustedIpsId: string,
    trustedIps: TrustedIps,
    options?: TrustedIpsCreateOrUpdateOptionalParams,
  ): Promise<TrustedIpsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { scope, trustedIpsId, trustedIps, options },
      createOrUpdateOperationSpec,
    );
  }

  /**
   * Delete a trusted IPs object over a given scope
   * @param scope The scope of the Trusted IPs. Valid scopes are: management group (format:
   *              'providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
   *              'subscriptions/{subscriptionId}'), or security connector (format:
   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
   * @param trustedIpsId The trusted IPs key - unique key for the specific trusted IPs range (GUID)
   * @param options The options parameters.
   */
  delete(
    scope: string,
    trustedIpsId: string,
    options?: TrustedIpsDeleteOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { scope, trustedIpsId, options },
      deleteOperationSpec,
    );
  }

  /**
   * ListNext
   * @param scope The scope of the Trusted IPs. Valid scopes are: management group (format:
   *              'providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
   *              'subscriptions/{subscriptionId}'), or security connector (format:
   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    scope: string,
    nextLink: string,
    options?: TrustedIpsListNextOptionalParams,
  ): Promise<TrustedIpsListNextResponse> {
    return this.client.sendOperationRequest(
      { scope, nextLink, options },
      listNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/{scope}/providers/Microsoft.Security/trustedIps",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TrustedIpsList,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion27],
  urlParameters: [Parameters.$host, Parameters.scope1],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/{scope}/providers/Microsoft.Security/trustedIps/{trustedIpsId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TrustedIps,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion27],
  urlParameters: [Parameters.$host, Parameters.scope1, Parameters.trustedIpsId],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/{scope}/providers/Microsoft.Security/trustedIps/{trustedIpsId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.TrustedIps,
    },
    201: {
      bodyMapper: Mappers.TrustedIps,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  requestBody: Parameters.trustedIps,
  queryParameters: [Parameters.apiVersion27],
  urlParameters: [Parameters.$host, Parameters.scope1, Parameters.trustedIpsId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/{scope}/providers/Microsoft.Security/trustedIps/{trustedIpsId}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponseAutoGenerated2,
    },
  },
  queryParameters: [Parameters.apiVersion27],
  urlParameters: [Parameters.$host, Parameters.scope1, Parameters.trustedIpsId],
  headerParameters: [Parameters.accept],
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TrustedIpsList,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.scope1],
  headerParameters: [Parameters.accept],
  serializer,
};
