/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { Membership } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { McppClient } from "../mcppClient";
import {
  MembershipGetPurchaseDetailsOptionalParams,
  MembershipGetPurchaseDetailsResponse,
  ProductCode,
  MembershipCreatePurchaseOptionalParams,
  MembershipCreatePurchaseResponse,
  MembershipCancelMcppPuchaseOptionalParams
} from "../models";

/** Class containing Membership operations. */
export class MembershipImpl implements Membership {
  private readonly client: McppClient;

  /**
   * Initialize a new instance of the class Membership class.
   * @param client Reference to the service client
   */
  constructor(client: McppClient) {
    this.client = client;
  }

  /**
   * The operation to fetch purchase details of a CloudPartnerProgramMembership offer
   * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g.
   *                       00000000-0000-0000-0000-000000000000)
   * @param resourceGroupName The name of the resource group.
   * @param resourceName The name of the resource.
   * @param options The options parameters.
   */
  getPurchaseDetails(
    subscriptionId: string,
    resourceGroupName: string,
    resourceName: string,
    options?: MembershipGetPurchaseDetailsOptionalParams
  ): Promise<MembershipGetPurchaseDetailsResponse> {
    return this.client.sendOperationRequest(
      { subscriptionId, resourceGroupName, resourceName, options },
      getPurchaseDetailsOperationSpec
    );
  }

  /**
   * Create a CloudPartnerProgramMembership purchase
   * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g.
   *                       00000000-0000-0000-0000-000000000000)
   * @param resourceGroupName The name of the resource group.
   * @param resourceName The name of the resource.
   * @param body The product upn that needs to be purchased
   * @param options The options parameters.
   */
  createPurchase(
    subscriptionId: string,
    resourceGroupName: string,
    resourceName: string,
    body: ProductCode,
    options?: MembershipCreatePurchaseOptionalParams
  ): Promise<MembershipCreatePurchaseResponse> {
    return this.client.sendOperationRequest(
      { subscriptionId, resourceGroupName, resourceName, body, options },
      createPurchaseOperationSpec
    );
  }

  /**
   * The operation to cancel a CloudPartnerProgramMembership offer
   * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g.
   *                       00000000-0000-0000-0000-000000000000)
   * @param resourceGroupName The name of the resource group.
   * @param resourceName The name of the resource.
   * @param options The options parameters.
   */
  cancelMcppPuchase(
    subscriptionId: string,
    resourceGroupName: string,
    resourceName: string,
    options?: MembershipCancelMcppPuchaseOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { subscriptionId, resourceGroupName, resourceName, options },
      cancelMcppPuchaseOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getPurchaseDetailsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CloudPartnerProgram/membership/{resourceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MembershipDetailsResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createPurchaseOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CloudPartnerProgram/membership/{resourceName}",
  httpMethod: "PUT",
  responses: {
    202: {
      bodyMapper: Mappers.MembershipDetailsResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const cancelMcppPuchaseOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CloudPartnerProgram/membership/{resourceName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
