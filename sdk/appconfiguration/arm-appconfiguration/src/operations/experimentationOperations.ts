/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { ExperimentationOperations } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { AppConfigurationManagementClient } from "../appConfigurationManagementClient.js";
import { SimplePollerLike, OperationState, createHttpPoller } from "@azure/core-lro";
import { createLroSpec } from "../lroImpl.js";
import {
  Experimentation,
  ExperimentationListNextOptionalParams,
  ExperimentationListOptionalParams,
  ExperimentationListResponse,
  ExperimentationGetOptionalParams,
  ExperimentationGetResponse,
  ExperimentationCreateOptionalParams,
  ExperimentationCreateResponse,
  ExperimentationDeleteOptionalParams,
  ExperimentationDeleteResponse,
  ExperimentationListNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing ExperimentationOperations operations. */
export class ExperimentationOperationsImpl implements ExperimentationOperations {
  private readonly client: AppConfigurationManagementClient;

  /**
   * Initialize a new instance of the class ExperimentationOperations class.
   * @param client Reference to the service client
   */
  constructor(client: AppConfigurationManagementClient) {
    this.client = client;
  }

  /**
   * Lists experimentation for a given configuration store.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param configStoreName The name of the configuration store.
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    configStoreName: string,
    options?: ExperimentationListOptionalParams,
  ): PagedAsyncIterableIterator<Experimentation> {
    const iter = this.listPagingAll(resourceGroupName, configStoreName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(resourceGroupName, configStoreName, options, settings);
      },
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    configStoreName: string,
    options?: ExperimentationListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<Experimentation[]> {
    let result: ExperimentationListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(resourceGroupName, configStoreName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(resourceGroupName, configStoreName, continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    configStoreName: string,
    options?: ExperimentationListOptionalParams,
  ): AsyncIterableIterator<Experimentation> {
    for await (const page of this.listPagingPage(resourceGroupName, configStoreName, options)) {
      yield* page;
    }
  }

  /**
   * Lists experimentation for a given configuration store.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param configStoreName The name of the configuration store.
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    configStoreName: string,
    options?: ExperimentationListOptionalParams,
  ): Promise<ExperimentationListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, configStoreName, options },
      listOperationSpec,
    );
  }

  /**
   * Gets the properties of the experimentation.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param configStoreName The name of the configuration store.
   * @param experimentationName The name of the experimentation.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    configStoreName: string,
    experimentationName: string,
    options?: ExperimentationGetOptionalParams,
  ): Promise<ExperimentationGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, configStoreName, experimentationName, options },
      getOperationSpec,
    );
  }

  /**
   * Creates the experimentation.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param configStoreName The name of the configuration store.
   * @param experimentationName The name of the experimentation.
   * @param options The options parameters.
   */
  async beginCreate(
    resourceGroupName: string,
    configStoreName: string,
    experimentationName: string,
    options?: ExperimentationCreateOptionalParams,
  ): Promise<
    SimplePollerLike<OperationState<ExperimentationCreateResponse>, ExperimentationCreateResponse>
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ExperimentationCreateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        configStoreName,
        experimentationName,
        options,
      },
      spec: createOperationSpec,
    });
    const poller = await createHttpPoller<
      ExperimentationCreateResponse,
      OperationState<ExperimentationCreateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Creates the experimentation.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param configStoreName The name of the configuration store.
   * @param experimentationName The name of the experimentation.
   * @param options The options parameters.
   */
  async beginCreateAndWait(
    resourceGroupName: string,
    configStoreName: string,
    experimentationName: string,
    options?: ExperimentationCreateOptionalParams,
  ): Promise<ExperimentationCreateResponse> {
    const poller = await this.beginCreate(
      resourceGroupName,
      configStoreName,
      experimentationName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Deletes the experimentation.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param configStoreName The name of the configuration store.
   * @param experimentationName The name of the experimentation.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    configStoreName: string,
    experimentationName: string,
    options?: ExperimentationDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<OperationState<ExperimentationDeleteResponse>, ExperimentationDeleteResponse>
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ExperimentationDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        configStoreName,
        experimentationName,
        options,
      },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<
      ExperimentationDeleteResponse,
      OperationState<ExperimentationDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Deletes the experimentation.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param configStoreName The name of the configuration store.
   * @param experimentationName The name of the experimentation.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    configStoreName: string,
    experimentationName: string,
    options?: ExperimentationDeleteOptionalParams,
  ): Promise<ExperimentationDeleteResponse> {
    const poller = await this.beginDelete(
      resourceGroupName,
      configStoreName,
      experimentationName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * ListNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param configStoreName The name of the configuration store.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    configStoreName: string,
    nextLink: string,
    options?: ExperimentationListNextOptionalParams,
  ): Promise<ExperimentationListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, configStoreName, nextLink, options },
      listNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}/experimentation",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ExperimentationListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponseAutoGenerated,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.configStoreName,
    Parameters.resourceGroupName1,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}/experimentation/{experimentationName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Experimentation,
    },
    default: {
      bodyMapper: Mappers.ErrorResponseAutoGenerated,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.configStoreName,
    Parameters.resourceGroupName1,
    Parameters.experimentationName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}/experimentation/{experimentationName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Experimentation,
    },
    201: {
      bodyMapper: Mappers.Experimentation,
    },
    202: {
      bodyMapper: Mappers.Experimentation,
    },
    204: {
      bodyMapper: Mappers.Experimentation,
    },
    default: {
      bodyMapper: Mappers.ErrorResponseAutoGenerated,
    },
  },
  requestBody: Parameters.experimentationCreationParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.configStoreName,
    Parameters.resourceGroupName1,
    Parameters.experimentationName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}/experimentation/{experimentationName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.ExperimentationDeleteHeaders,
    },
    201: {
      headersMapper: Mappers.ExperimentationDeleteHeaders,
    },
    202: {
      headersMapper: Mappers.ExperimentationDeleteHeaders,
    },
    204: {
      headersMapper: Mappers.ExperimentationDeleteHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponseAutoGenerated,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.configStoreName,
    Parameters.resourceGroupName1,
    Parameters.experimentationName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ExperimentationListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponseAutoGenerated,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.configStoreName,
    Parameters.nextLink,
    Parameters.resourceGroupName1,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
