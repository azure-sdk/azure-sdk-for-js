/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const JavaAppsCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JavaAppsCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "JavaApp"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JavaProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JavaProperties",
    modelProperties: {
      runtimeVersion: {
        serializedName: "runtimeVersion",
        type: {
          name: "String"
        }
      },
      jvmOptions: {
        serializedName: "jvmOptions",
        type: {
          name: "String"
        }
      },
      jarFileSource: {
        serializedName: "jarFileSource",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Template: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Template",
    modelProperties: {
      revisionSuffix: {
        serializedName: "revisionSuffix",
        type: {
          name: "String"
        }
      },
      terminationGracePeriodSeconds: {
        serializedName: "terminationGracePeriodSeconds",
        type: {
          name: "Number"
        }
      },
      initContainers: {
        serializedName: "initContainers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InitContainer"
            }
          }
        }
      },
      containers: {
        serializedName: "containers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Container"
            }
          }
        }
      },
      scale: {
        serializedName: "scale",
        type: {
          name: "Composite",
          className: "Scale"
        }
      },
      volumes: {
        serializedName: "volumes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Volume"
            }
          }
        }
      },
      serviceBinds: {
        serializedName: "serviceBinds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServiceBind"
            }
          }
        }
      }
    }
  }
};

export const BaseContainer: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BaseContainer",
    modelProperties: {
      image: {
        serializedName: "image",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      command: {
        serializedName: "command",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      args: {
        serializedName: "args",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      env: {
        serializedName: "env",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EnvironmentVar"
            }
          }
        }
      },
      resources: {
        serializedName: "resources",
        type: {
          name: "Composite",
          className: "ContainerResources"
        }
      },
      volumeMounts: {
        serializedName: "volumeMounts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VolumeMount"
            }
          }
        }
      }
    }
  }
};

export const EnvironmentVar: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EnvironmentVar",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      },
      secretRef: {
        serializedName: "secretRef",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContainerResources: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerResources",
    modelProperties: {
      cpu: {
        serializedName: "cpu",
        type: {
          name: "Number"
        }
      },
      memory: {
        serializedName: "memory",
        type: {
          name: "String"
        }
      },
      ephemeralStorage: {
        serializedName: "ephemeralStorage",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VolumeMount: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VolumeMount",
    modelProperties: {
      volumeName: {
        serializedName: "volumeName",
        type: {
          name: "String"
        }
      },
      mountPath: {
        serializedName: "mountPath",
        type: {
          name: "String"
        }
      },
      subPath: {
        serializedName: "subPath",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContainerAppProbe: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerAppProbe",
    modelProperties: {
      failureThreshold: {
        serializedName: "failureThreshold",
        type: {
          name: "Number"
        }
      },
      httpGet: {
        serializedName: "httpGet",
        type: {
          name: "Composite",
          className: "ContainerAppProbeHttpGet"
        }
      },
      initialDelaySeconds: {
        serializedName: "initialDelaySeconds",
        type: {
          name: "Number"
        }
      },
      periodSeconds: {
        serializedName: "periodSeconds",
        type: {
          name: "Number"
        }
      },
      successThreshold: {
        serializedName: "successThreshold",
        type: {
          name: "Number"
        }
      },
      tcpSocket: {
        serializedName: "tcpSocket",
        type: {
          name: "Composite",
          className: "ContainerAppProbeTcpSocket"
        }
      },
      terminationGracePeriodSeconds: {
        serializedName: "terminationGracePeriodSeconds",
        type: {
          name: "Number"
        }
      },
      timeoutSeconds: {
        serializedName: "timeoutSeconds",
        type: {
          name: "Number"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContainerAppProbeHttpGet: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerAppProbeHttpGet",
    modelProperties: {
      host: {
        serializedName: "host",
        type: {
          name: "String"
        }
      },
      httpHeaders: {
        serializedName: "httpHeaders",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ContainerAppProbeHttpGetHttpHeadersItem"
            }
          }
        }
      },
      path: {
        serializedName: "path",
        type: {
          name: "String"
        }
      },
      port: {
        serializedName: "port",
        required: true,
        type: {
          name: "Number"
        }
      },
      scheme: {
        serializedName: "scheme",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContainerAppProbeHttpGetHttpHeadersItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerAppProbeHttpGetHttpHeadersItem",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContainerAppProbeTcpSocket: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerAppProbeTcpSocket",
    modelProperties: {
      host: {
        serializedName: "host",
        type: {
          name: "String"
        }
      },
      port: {
        serializedName: "port",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Scale: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Scale",
    modelProperties: {
      minReplicas: {
        serializedName: "minReplicas",
        type: {
          name: "Number"
        }
      },
      maxReplicas: {
        defaultValue: 10,
        serializedName: "maxReplicas",
        type: {
          name: "Number"
        }
      },
      rules: {
        serializedName: "rules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ScaleRule"
            }
          }
        }
      }
    }
  }
};

export const ScaleRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScaleRule",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      azureQueue: {
        serializedName: "azureQueue",
        type: {
          name: "Composite",
          className: "QueueScaleRule"
        }
      },
      custom: {
        serializedName: "custom",
        type: {
          name: "Composite",
          className: "CustomScaleRule"
        }
      },
      http: {
        serializedName: "http",
        type: {
          name: "Composite",
          className: "HttpScaleRule"
        }
      },
      tcp: {
        serializedName: "tcp",
        type: {
          name: "Composite",
          className: "TcpScaleRule"
        }
      }
    }
  }
};

export const QueueScaleRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QueueScaleRule",
    modelProperties: {
      queueName: {
        serializedName: "queueName",
        type: {
          name: "String"
        }
      },
      queueLength: {
        serializedName: "queueLength",
        type: {
          name: "Number"
        }
      },
      auth: {
        serializedName: "auth",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ScaleRuleAuth"
            }
          }
        }
      }
    }
  }
};

export const ScaleRuleAuth: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScaleRuleAuth",
    modelProperties: {
      secretRef: {
        serializedName: "secretRef",
        type: {
          name: "String"
        }
      },
      triggerParameter: {
        serializedName: "triggerParameter",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomScaleRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomScaleRule",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      metadata: {
        serializedName: "metadata",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      auth: {
        serializedName: "auth",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ScaleRuleAuth"
            }
          }
        }
      }
    }
  }
};

export const HttpScaleRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HttpScaleRule",
    modelProperties: {
      metadata: {
        serializedName: "metadata",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      auth: {
        serializedName: "auth",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ScaleRuleAuth"
            }
          }
        }
      }
    }
  }
};

export const TcpScaleRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TcpScaleRule",
    modelProperties: {
      metadata: {
        serializedName: "metadata",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      auth: {
        serializedName: "auth",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ScaleRuleAuth"
            }
          }
        }
      }
    }
  }
};

export const Volume: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Volume",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      storageType: {
        serializedName: "storageType",
        type: {
          name: "String"
        }
      },
      storageName: {
        serializedName: "storageName",
        type: {
          name: "String"
        }
      },
      secrets: {
        serializedName: "secrets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SecretVolumeItem"
            }
          }
        }
      },
      mountOptions: {
        serializedName: "mountOptions",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SecretVolumeItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecretVolumeItem",
    modelProperties: {
      secretRef: {
        serializedName: "secretRef",
        type: {
          name: "String"
        }
      },
      path: {
        serializedName: "path",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceBind: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceBind",
    modelProperties: {
      serviceId: {
        serializedName: "serviceId",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExtendedLocation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExtendedLocation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedServiceIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedServiceIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "UserAssignedIdentity" }
          }
        }
      }
    }
  }
};

export const UserAssignedIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserAssignedIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      clientId: {
        serializedName: "clientId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      }
    }
  }
};

export const Configuration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Configuration",
    modelProperties: {
      secrets: {
        serializedName: "secrets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Secret"
            }
          }
        }
      },
      activeRevisionsMode: {
        defaultValue: "Single",
        serializedName: "activeRevisionsMode",
        type: {
          name: "String"
        }
      },
      ingress: {
        serializedName: "ingress",
        type: {
          name: "Composite",
          className: "Ingress"
        }
      },
      registries: {
        serializedName: "registries",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RegistryCredentials"
            }
          }
        }
      },
      dapr: {
        serializedName: "dapr",
        type: {
          name: "Composite",
          className: "Dapr"
        }
      },
      maxInactiveRevisions: {
        serializedName: "maxInactiveRevisions",
        type: {
          name: "Number"
        }
      },
      service: {
        serializedName: "service",
        type: {
          name: "Composite",
          className: "Service"
        }
      }
    }
  }
};

export const Secret: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Secret",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "String"
        }
      },
      keyVaultUrl: {
        serializedName: "keyVaultUrl",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Ingress: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Ingress",
    modelProperties: {
      fqdn: {
        serializedName: "fqdn",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      external: {
        defaultValue: false,
        serializedName: "external",
        type: {
          name: "Boolean"
        }
      },
      targetPort: {
        serializedName: "targetPort",
        type: {
          name: "Number"
        }
      },
      exposedPort: {
        serializedName: "exposedPort",
        type: {
          name: "Number"
        }
      },
      transport: {
        defaultValue: "auto",
        serializedName: "transport",
        type: {
          name: "String"
        }
      },
      traffic: {
        serializedName: "traffic",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TrafficWeight"
            }
          }
        }
      },
      customDomains: {
        serializedName: "customDomains",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CustomDomain"
            }
          }
        }
      },
      allowInsecure: {
        defaultValue: false,
        serializedName: "allowInsecure",
        type: {
          name: "Boolean"
        }
      },
      ipSecurityRestrictions: {
        serializedName: "ipSecurityRestrictions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IpSecurityRestrictionRule"
            }
          }
        }
      },
      stickySessions: {
        serializedName: "stickySessions",
        type: {
          name: "Composite",
          className: "IngressStickySessions"
        }
      },
      clientCertificateMode: {
        serializedName: "clientCertificateMode",
        type: {
          name: "String"
        }
      },
      corsPolicy: {
        serializedName: "corsPolicy",
        type: {
          name: "Composite",
          className: "CorsPolicy"
        }
      }
    }
  }
};

export const TrafficWeight: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrafficWeight",
    modelProperties: {
      revisionName: {
        serializedName: "revisionName",
        type: {
          name: "String"
        }
      },
      weight: {
        serializedName: "weight",
        type: {
          name: "Number"
        }
      },
      latestRevision: {
        defaultValue: false,
        serializedName: "latestRevision",
        type: {
          name: "Boolean"
        }
      },
      label: {
        serializedName: "label",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomDomain: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomDomain",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      bindingType: {
        serializedName: "bindingType",
        type: {
          name: "String"
        }
      },
      certificateId: {
        serializedName: "certificateId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IpSecurityRestrictionRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpSecurityRestrictionRule",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      ipAddressRange: {
        serializedName: "ipAddressRange",
        required: true,
        type: {
          name: "String"
        }
      },
      action: {
        serializedName: "action",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IngressStickySessions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IngressStickySessions",
    modelProperties: {
      affinity: {
        serializedName: "affinity",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CorsPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CorsPolicy",
    modelProperties: {
      allowedOrigins: {
        serializedName: "allowedOrigins",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      allowedMethods: {
        serializedName: "allowedMethods",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      allowedHeaders: {
        serializedName: "allowedHeaders",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      exposeHeaders: {
        serializedName: "exposeHeaders",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      maxAge: {
        serializedName: "maxAge",
        type: {
          name: "Number"
        }
      },
      allowCredentials: {
        serializedName: "allowCredentials",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const RegistryCredentials: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RegistryCredentials",
    modelProperties: {
      server: {
        serializedName: "server",
        type: {
          name: "String"
        }
      },
      username: {
        serializedName: "username",
        type: {
          name: "String"
        }
      },
      passwordSecretRef: {
        serializedName: "passwordSecretRef",
        type: {
          name: "String"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Dapr: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Dapr",
    modelProperties: {
      enabled: {
        defaultValue: false,
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      },
      appId: {
        serializedName: "appId",
        type: {
          name: "String"
        }
      },
      appProtocol: {
        defaultValue: "http",
        serializedName: "appProtocol",
        type: {
          name: "String"
        }
      },
      appPort: {
        serializedName: "appPort",
        type: {
          name: "Number"
        }
      },
      httpReadBufferSize: {
        serializedName: "httpReadBufferSize",
        type: {
          name: "Number"
        }
      },
      httpMaxRequestSize: {
        serializedName: "httpMaxRequestSize",
        type: {
          name: "Number"
        }
      },
      logLevel: {
        serializedName: "logLevel",
        type: {
          name: "String"
        }
      },
      enableApiLogging: {
        serializedName: "enableApiLogging",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const Service: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Service",
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail"
            }
          }
        }
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const SecretsCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecretsCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AppSecret"
            }
          }
        }
      }
    }
  }
};

export const ContainerAppSecret: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerAppSecret",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      identity: {
        serializedName: "identity",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      keyVaultUrl: {
        serializedName: "keyVaultUrl",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RevisionCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RevisionCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Revision"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReplicaContainer: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReplicaContainer",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      containerId: {
        serializedName: "containerId",
        type: {
          name: "String"
        }
      },
      ready: {
        serializedName: "ready",
        type: {
          name: "Boolean"
        }
      },
      started: {
        serializedName: "started",
        type: {
          name: "Boolean"
        }
      },
      restartCount: {
        serializedName: "restartCount",
        type: {
          name: "Number"
        }
      },
      runningState: {
        serializedName: "runningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      runningStateDetails: {
        serializedName: "runningStateDetails",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      logStreamEndpoint: {
        serializedName: "logStreamEndpoint",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      execEndpoint: {
        serializedName: "execEndpoint",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReplicaCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReplicaCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Replica"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JavaEnvironmentsCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JavaEnvironmentsCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "JavaEnvironment"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceUploadDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceUploadDefinition",
    modelProperties: {
      relativePath: {
        serializedName: "relativePath",
        type: {
          name: "String"
        }
      },
      uploadUrl: {
        serializedName: "uploadUrl",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckNameAvailabilityRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityRequest",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckNameAvailabilityResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityResponse",
    modelProperties: {
      nameAvailable: {
        serializedName: "nameAvailable",
        type: {
          name: "Boolean"
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MiddlewareEurekaServerResourceCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MiddlewareEurekaServerResourceCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MiddlewareEurekaServer"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConfigServerResourceCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConfigServerResourceCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MiddlewareConfigServer"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MiddlewareConfigServerSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MiddlewareConfigServerSettings",
    modelProperties: {
      gitProperty: {
        serializedName: "gitProperty",
        type: {
          name: "Composite",
          className: "MiddlewareConfigServerGitProperty"
        }
      }
    }
  }
};

export const MiddlewareConfigServerGitProperty: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MiddlewareConfigServerGitProperty",
    modelProperties: {
      repositories: {
        serializedName: "repositories",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MiddlewareGitPatternRepository"
            }
          }
        }
      },
      uri: {
        serializedName: "uri",
        required: true,
        type: {
          name: "String"
        }
      },
      label: {
        serializedName: "label",
        type: {
          name: "String"
        }
      },
      searchPaths: {
        serializedName: "searchPaths",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      username: {
        serializedName: "username",
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "password",
        type: {
          name: "String"
        }
      },
      hostKey: {
        serializedName: "hostKey",
        type: {
          name: "String"
        }
      },
      hostKeyAlgorithm: {
        serializedName: "hostKeyAlgorithm",
        type: {
          name: "String"
        }
      },
      privateKey: {
        serializedName: "privateKey",
        type: {
          name: "String"
        }
      },
      strictHostKeyChecking: {
        serializedName: "strictHostKeyChecking",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MiddlewareGitPatternRepository: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MiddlewareGitPatternRepository",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      pattern: {
        serializedName: "pattern",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      uri: {
        serializedName: "uri",
        required: true,
        type: {
          name: "String"
        }
      },
      label: {
        serializedName: "label",
        type: {
          name: "String"
        }
      },
      searchPaths: {
        serializedName: "searchPaths",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      username: {
        serializedName: "username",
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "password",
        type: {
          name: "String"
        }
      },
      hostKey: {
        serializedName: "hostKey",
        type: {
          name: "String"
        }
      },
      hostKeyAlgorithm: {
        serializedName: "hostKeyAlgorithm",
        type: {
          name: "String"
        }
      },
      privateKey: {
        serializedName: "privateKey",
        type: {
          name: "String"
        }
      },
      strictHostKeyChecking: {
        serializedName: "strictHostKeyChecking",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MiddlewareConfigServerSettingsValidateResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MiddlewareConfigServerSettingsValidateResult",
    modelProperties: {
      isValid: {
        serializedName: "isValid",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConfigServerSettingsErrorRecord"
            }
          }
        }
      }
    }
  }
};

export const ConfigServerSettingsErrorRecord: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConfigServerSettingsErrorRecord",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      uri: {
        serializedName: "uri",
        type: {
          name: "String"
        }
      },
      messages: {
        serializedName: "messages",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ClusterResourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterResourceProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      networkProfile: {
        serializedName: "networkProfile",
        type: {
          name: "Composite",
          className: "NetworkProfile"
        }
      },
      vnetAddons: {
        serializedName: "vnetAddons",
        type: {
          name: "Composite",
          className: "ServiceVNetAddons"
        }
      },
      maintenanceScheduleConfiguration: {
        serializedName: "maintenanceScheduleConfiguration",
        type: {
          name: "Composite",
          className: "MaintenanceScheduleConfiguration"
        }
      },
      version: {
        serializedName: "version",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      serviceId: {
        serializedName: "serviceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      managedEnvironmentId: {
        serializedName: "managedEnvironmentId",
        type: {
          name: "String"
        }
      },
      infraResourceGroup: {
        serializedName: "infraResourceGroup",
        type: {
          name: "String"
        }
      },
      powerState: {
        serializedName: "powerState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      zoneRedundant: {
        defaultValue: false,
        serializedName: "zoneRedundant",
        type: {
          name: "Boolean"
        }
      },
      fqdn: {
        serializedName: "fqdn",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      marketplaceResource: {
        serializedName: "marketplaceResource",
        type: {
          name: "Composite",
          className: "MarketplaceResource"
        }
      }
    }
  }
};

export const NetworkProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkProfile",
    modelProperties: {
      serviceRuntimeSubnetId: {
        serializedName: "serviceRuntimeSubnetId",
        type: {
          name: "String"
        }
      },
      appSubnetId: {
        serializedName: "appSubnetId",
        type: {
          name: "String"
        }
      },
      serviceCidr: {
        serializedName: "serviceCidr",
        type: {
          name: "String"
        }
      },
      serviceRuntimeNetworkResourceGroup: {
        serializedName: "serviceRuntimeNetworkResourceGroup",
        type: {
          name: "String"
        }
      },
      appNetworkResourceGroup: {
        serializedName: "appNetworkResourceGroup",
        type: {
          name: "String"
        }
      },
      outboundIPs: {
        serializedName: "outboundIPs",
        type: {
          name: "Composite",
          className: "NetworkProfileOutboundIPs"
        }
      },
      requiredTraffics: {
        serializedName: "requiredTraffics",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RequiredTraffic"
            }
          }
        }
      },
      ingressConfig: {
        serializedName: "ingressConfig",
        type: {
          name: "Composite",
          className: "IngressConfig"
        }
      },
      outboundType: {
        serializedName: "outboundType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkProfileOutboundIPs: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkProfileOutboundIPs",
    modelProperties: {
      publicIPs: {
        serializedName: "publicIPs",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const RequiredTraffic: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RequiredTraffic",
    modelProperties: {
      protocol: {
        serializedName: "protocol",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      port: {
        serializedName: "port",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      ips: {
        serializedName: "ips",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      fqdns: {
        serializedName: "fqdns",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      direction: {
        serializedName: "direction",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IngressConfig: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IngressConfig",
    modelProperties: {
      readTimeoutInSeconds: {
        serializedName: "readTimeoutInSeconds",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ServiceVNetAddons: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceVNetAddons",
    modelProperties: {
      logStreamPublicEndpoint: {
        defaultValue: false,
        serializedName: "logStreamPublicEndpoint",
        type: {
          name: "Boolean"
        }
      },
      dataPlanePublicEndpoint: {
        defaultValue: false,
        serializedName: "dataPlanePublicEndpoint",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const MaintenanceScheduleConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MaintenanceScheduleConfiguration",
    uberParent: "MaintenanceScheduleConfiguration",
    polymorphicDiscriminator: {
      serializedName: "frequency",
      clientName: "frequency"
    },
    modelProperties: {
      frequency: {
        serializedName: "frequency",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MarketplaceResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MarketplaceResource",
    modelProperties: {
      plan: {
        serializedName: "plan",
        type: {
          name: "String"
        }
      },
      publisher: {
        serializedName: "publisher",
        type: {
          name: "String"
        }
      },
      product: {
        serializedName: "product",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Sku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      name: {
        defaultValue: "S0",
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      tier: {
        defaultValue: "Standard",
        serializedName: "tier",
        type: {
          name: "String"
        }
      },
      capacity: {
        serializedName: "capacity",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ResourceAutoGenerated: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceAutoGenerated",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemDataAutoGenerated"
        }
      }
    }
  }
};

export const SystemDataAutoGenerated: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemDataAutoGenerated",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const CloudError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudError",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "CloudErrorBody"
        }
      }
    }
  }
};

export const CloudErrorBody: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudErrorBody",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CloudErrorBody"
            }
          }
        }
      }
    }
  }
};

export const TestKeys: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TestKeys",
    modelProperties: {
      primaryKey: {
        serializedName: "primaryKey",
        type: {
          name: "String"
        }
      },
      secondaryKey: {
        serializedName: "secondaryKey",
        type: {
          name: "String"
        }
      },
      primaryTestEndpoint: {
        serializedName: "primaryTestEndpoint",
        type: {
          name: "String"
        }
      },
      secondaryTestEndpoint: {
        serializedName: "secondaryTestEndpoint",
        type: {
          name: "String"
        }
      },
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const RegenerateTestKeyRequestPayload: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RegenerateTestKeyRequestPayload",
    modelProperties: {
      keyType: {
        serializedName: "keyType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SupportedApmTypes: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SupportedApmTypes",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SupportedApmType"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SupportedApmType: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SupportedApmType",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GloballyEnabledApms: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GloballyEnabledApms",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ApmReference: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApmReference",
    modelProperties: {
      resourceId: {
        serializedName: "resourceId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApmResourceCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApmResourceCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApmResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApmProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApmProperties",
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      secrets: {
        serializedName: "secrets",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const ApmSecretKeys: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApmSecretKeys",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const EurekaServerResourceCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EurekaServerResourceCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EurekaServerResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EurekaServerProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EurekaServerProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      enabledState: {
        serializedName: "enabledState",
        type: {
          name: "String"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorModel"
        }
      }
    }
  }
};

export const ErrorModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorModel",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConfigServerProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConfigServerProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorModel"
        }
      },
      enabledState: {
        serializedName: "enabledState",
        type: {
          name: "String"
        }
      },
      configServer: {
        serializedName: "configServer",
        type: {
          name: "Composite",
          className: "ConfigServerSettings"
        }
      }
    }
  }
};

export const ConfigServerSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConfigServerSettings",
    modelProperties: {
      gitProperty: {
        serializedName: "gitProperty",
        type: {
          name: "Composite",
          className: "ConfigServerGitProperty"
        }
      }
    }
  }
};

export const ConfigServerGitProperty: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConfigServerGitProperty",
    modelProperties: {
      repositories: {
        serializedName: "repositories",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GitPatternRepository"
            }
          }
        }
      },
      uri: {
        serializedName: "uri",
        required: true,
        type: {
          name: "String"
        }
      },
      label: {
        serializedName: "label",
        type: {
          name: "String"
        }
      },
      searchPaths: {
        serializedName: "searchPaths",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      username: {
        serializedName: "username",
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "password",
        type: {
          name: "String"
        }
      },
      hostKey: {
        serializedName: "hostKey",
        type: {
          name: "String"
        }
      },
      hostKeyAlgorithm: {
        serializedName: "hostKeyAlgorithm",
        type: {
          name: "String"
        }
      },
      privateKey: {
        serializedName: "privateKey",
        type: {
          name: "String"
        }
      },
      strictHostKeyChecking: {
        serializedName: "strictHostKeyChecking",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const GitPatternRepository: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GitPatternRepository",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      pattern: {
        serializedName: "pattern",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      uri: {
        serializedName: "uri",
        required: true,
        type: {
          name: "String"
        }
      },
      label: {
        serializedName: "label",
        type: {
          name: "String"
        }
      },
      searchPaths: {
        serializedName: "searchPaths",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      username: {
        serializedName: "username",
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "password",
        type: {
          name: "String"
        }
      },
      hostKey: {
        serializedName: "hostKey",
        type: {
          name: "String"
        }
      },
      hostKeyAlgorithm: {
        serializedName: "hostKeyAlgorithm",
        type: {
          name: "String"
        }
      },
      privateKey: {
        serializedName: "privateKey",
        type: {
          name: "String"
        }
      },
      strictHostKeyChecking: {
        serializedName: "strictHostKeyChecking",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ConfigServerSettingsValidateResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConfigServerSettingsValidateResult",
    modelProperties: {
      isValid: {
        serializedName: "isValid",
        type: {
          name: "Boolean"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConfigServerSettingsErrorRecord"
            }
          }
        }
      }
    }
  }
};

export const ConfigurationServiceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConfigurationServiceProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      generation: {
        defaultValue: "Gen1",
        serializedName: "generation",
        type: {
          name: "String"
        }
      },
      resourceRequests: {
        serializedName: "resourceRequests",
        type: {
          name: "Composite",
          className: "ConfigurationServiceResourceRequests"
        }
      },
      instances: {
        serializedName: "instances",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConfigurationServiceInstance"
            }
          }
        }
      },
      settings: {
        serializedName: "settings",
        type: {
          name: "Composite",
          className: "ConfigurationServiceSettings"
        }
      }
    }
  }
};

export const ConfigurationServiceResourceRequests: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConfigurationServiceResourceRequests",
    modelProperties: {
      cpu: {
        serializedName: "cpu",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      memory: {
        serializedName: "memory",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      instanceCount: {
        serializedName: "instanceCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ConfigurationServiceInstance: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConfigurationServiceInstance",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConfigurationServiceSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConfigurationServiceSettings",
    modelProperties: {
      gitProperty: {
        serializedName: "gitProperty",
        type: {
          name: "Composite",
          className: "ConfigurationServiceGitProperty"
        }
      }
    }
  }
};

export const ConfigurationServiceGitProperty: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConfigurationServiceGitProperty",
    modelProperties: {
      repositories: {
        serializedName: "repositories",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConfigurationServiceGitRepository"
            }
          }
        }
      }
    }
  }
};

export const ConfigurationServiceGitRepository: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConfigurationServiceGitRepository",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      patterns: {
        serializedName: "patterns",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      uri: {
        serializedName: "uri",
        required: true,
        type: {
          name: "String"
        }
      },
      label: {
        serializedName: "label",
        required: true,
        type: {
          name: "String"
        }
      },
      searchPaths: {
        serializedName: "searchPaths",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      username: {
        serializedName: "username",
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "password",
        type: {
          name: "String"
        }
      },
      hostKey: {
        serializedName: "hostKey",
        type: {
          name: "String"
        }
      },
      hostKeyAlgorithm: {
        serializedName: "hostKeyAlgorithm",
        type: {
          name: "String"
        }
      },
      privateKey: {
        serializedName: "privateKey",
        type: {
          name: "String"
        }
      },
      strictHostKeyChecking: {
        serializedName: "strictHostKeyChecking",
        type: {
          name: "Boolean"
        }
      },
      gitImplementation: {
        serializedName: "gitImplementation",
        type: {
          name: "String"
        }
      },
      caCertResourceId: {
        serializedName: "caCertResourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConfigurationServiceResourceCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConfigurationServiceResourceCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConfigurationServiceResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConfigurationServiceSettingsValidateResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConfigurationServiceSettingsValidateResult",
    modelProperties: {
      gitPropertyValidationResult: {
        serializedName: "gitPropertyValidationResult",
        type: {
          name: "Composite",
          className: "ConfigurationServiceGitPropertyValidateResult"
        }
      }
    }
  }
};

export const ConfigurationServiceGitPropertyValidateResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConfigurationServiceGitPropertyValidateResult",
    modelProperties: {
      isValid: {
        serializedName: "isValid",
        type: {
          name: "Boolean"
        }
      },
      gitReposValidationResult: {
        serializedName: "gitReposValidationResult",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ValidationMessages"
            }
          }
        }
      }
    }
  }
};

export const ValidationMessages: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ValidationMessages",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      messages: {
        serializedName: "messages",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ServiceRegistryProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceRegistryProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceRequests: {
        serializedName: "resourceRequests",
        type: {
          name: "Composite",
          className: "ServiceRegistryResourceRequests"
        }
      },
      instances: {
        serializedName: "instances",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServiceRegistryInstance"
            }
          }
        }
      }
    }
  }
};

export const ServiceRegistryResourceRequests: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceRegistryResourceRequests",
    modelProperties: {
      cpu: {
        serializedName: "cpu",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      memory: {
        serializedName: "memory",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      instanceCount: {
        serializedName: "instanceCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ServiceRegistryInstance: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceRegistryInstance",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceRegistryResourceCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceRegistryResourceCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServiceRegistryResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationLiveViewResourceCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationLiveViewResourceCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationLiveViewResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationLiveViewProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationLiveViewProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      components: {
        serializedName: "components",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationLiveViewComponent"
            }
          }
        }
      }
    }
  }
};

export const ApplicationLiveViewComponent: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationLiveViewComponent",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "any"
        }
      },
      resourceRequests: {
        serializedName: "resourceRequests",
        type: {
          name: "Composite",
          className: "ApplicationLiveViewResourceRequests"
        }
      },
      instances: {
        serializedName: "instances",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationLiveViewInstance"
            }
          }
        }
      }
    }
  }
};

export const ApplicationLiveViewResourceRequests: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationLiveViewResourceRequests",
    modelProperties: {
      cpu: {
        serializedName: "cpu",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      memory: {
        serializedName: "memory",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      instanceCount: {
        serializedName: "instanceCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ApplicationLiveViewInstance: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationLiveViewInstance",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DevToolPortalResourceCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DevToolPortalResourceCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DevToolPortalResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DevToolPortalProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DevToolPortalProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      components: {
        serializedName: "components",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DevToolPortalComponent"
            }
          }
        }
      },
      public: {
        defaultValue: false,
        serializedName: "public",
        type: {
          name: "Boolean"
        }
      },
      url: {
        serializedName: "url",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ssoProperties: {
        serializedName: "ssoProperties",
        type: {
          name: "Composite",
          className: "DevToolPortalSsoProperties"
        }
      },
      features: {
        serializedName: "features",
        type: {
          name: "Composite",
          className: "DevToolPortalFeatureSettings"
        }
      }
    }
  }
};

export const DevToolPortalComponent: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DevToolPortalComponent",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceRequests: {
        serializedName: "resourceRequests",
        type: {
          name: "Composite",
          className: "DevToolPortalResourceRequests"
        }
      },
      instances: {
        serializedName: "instances",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DevToolPortalInstance"
            }
          }
        }
      }
    }
  }
};

export const DevToolPortalResourceRequests: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DevToolPortalResourceRequests",
    modelProperties: {
      cpu: {
        serializedName: "cpu",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      memory: {
        serializedName: "memory",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      instanceCount: {
        serializedName: "instanceCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DevToolPortalInstance: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DevToolPortalInstance",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DevToolPortalSsoProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DevToolPortalSsoProperties",
    modelProperties: {
      scopes: {
        serializedName: "scopes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      clientId: {
        serializedName: "clientId",
        type: {
          name: "String"
        }
      },
      clientSecret: {
        serializedName: "clientSecret",
        type: {
          name: "String"
        }
      },
      metadataUrl: {
        serializedName: "metadataUrl",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DevToolPortalFeatureSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DevToolPortalFeatureSettings",
    modelProperties: {
      applicationAccelerator: {
        serializedName: "applicationAccelerator",
        type: {
          name: "Composite",
          className: "DevToolPortalFeatureDetail"
        }
      },
      applicationLiveView: {
        serializedName: "applicationLiveView",
        type: {
          name: "Composite",
          className: "DevToolPortalFeatureDetail"
        }
      }
    }
  }
};

export const DevToolPortalFeatureDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DevToolPortalFeatureDetail",
    modelProperties: {
      state: {
        defaultValue: "Enabled",
        serializedName: "state",
        type: {
          name: "String"
        }
      },
      route: {
        serializedName: "route",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContainerRegistryResourceCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerRegistryResourceCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ContainerRegistryResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContainerRegistryProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerRegistryProperties",
    modelProperties: {
      credentials: {
        serializedName: "credentials",
        type: {
          name: "Composite",
          className: "ContainerRegistryCredentials"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContainerRegistryCredentials: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerRegistryCredentials",
    uberParent: "ContainerRegistryCredentials",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContainerRegistryValidateResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerRegistryValidateResult",
    modelProperties: {
      isValid: {
        serializedName: "isValid",
        type: {
          name: "Boolean"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BuildServiceCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BuildServiceCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BuildService"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BuildServiceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BuildServiceProperties",
    modelProperties: {
      containerRegistry: {
        serializedName: "containerRegistry",
        type: {
          name: "String"
        }
      },
      kPackVersion: {
        serializedName: "kPackVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceRequests: {
        serializedName: "resourceRequests",
        type: {
          name: "Composite",
          className: "BuildServicePropertiesResourceRequests"
        }
      }
    }
  }
};

export const BuildServicePropertiesResourceRequests: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BuildServicePropertiesResourceRequests",
    modelProperties: {
      cpu: {
        serializedName: "cpu",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      memory: {
        serializedName: "memory",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BuildCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BuildCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Build"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BuildProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BuildProperties",
    modelProperties: {
      relativePath: {
        serializedName: "relativePath",
        type: {
          name: "String"
        }
      },
      builder: {
        serializedName: "builder",
        type: {
          name: "String"
        }
      },
      agentPool: {
        serializedName: "agentPool",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      env: {
        serializedName: "env",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      apms: {
        serializedName: "apms",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApmReference"
            }
          }
        }
      },
      certificates: {
        serializedName: "certificates",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CertificateReference"
            }
          }
        }
      },
      triggeredBuildResult: {
        serializedName: "triggeredBuildResult",
        type: {
          name: "Composite",
          className: "TriggeredBuildResult"
        }
      },
      resourceRequests: {
        serializedName: "resourceRequests",
        type: {
          name: "Composite",
          className: "BuildResourceRequests"
        }
      }
    }
  }
};

export const CertificateReference: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CertificateReference",
    modelProperties: {
      resourceId: {
        serializedName: "resourceId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TriggeredBuildResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TriggeredBuildResult",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BuildResourceRequests: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BuildResourceRequests",
    modelProperties: {
      cpu: {
        defaultValue: "1",
        serializedName: "cpu",
        type: {
          name: "String"
        }
      },
      memory: {
        defaultValue: "2Gi",
        serializedName: "memory",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BuildpackBindingResourceCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BuildpackBindingResourceCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BuildpackBindingResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BuildpackBindingProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BuildpackBindingProperties",
    modelProperties: {
      bindingType: {
        serializedName: "bindingType",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      launchProperties: {
        serializedName: "launchProperties",
        type: {
          name: "Composite",
          className: "BuildpackBindingLaunchProperties"
        }
      }
    }
  }
};

export const BuildpackBindingLaunchProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BuildpackBindingLaunchProperties",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      secrets: {
        serializedName: "secrets",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const BuildResultCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BuildResultCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BuildResult"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BuildResultProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BuildResultProperties",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorModel"
        }
      },
      buildPodName: {
        serializedName: "buildPodName",
        type: {
          name: "String"
        }
      },
      buildStages: {
        serializedName: "buildStages",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BuildStageProperties"
            }
          }
        }
      },
      image: {
        serializedName: "image",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BuildStageProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BuildStageProperties",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      exitCode: {
        serializedName: "exitCode",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      reason: {
        serializedName: "reason",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BuildResultLog: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BuildResultLog",
    modelProperties: {
      blobUrl: {
        serializedName: "blobUrl",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BuilderProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BuilderProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      stack: {
        serializedName: "stack",
        type: {
          name: "Composite",
          className: "StackProperties"
        }
      },
      buildpackGroups: {
        serializedName: "buildpackGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BuildpacksGroupProperties"
            }
          }
        }
      }
    }
  }
};

export const StackProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StackProperties",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BuildpacksGroupProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BuildpacksGroupProperties",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      buildpacks: {
        serializedName: "buildpacks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BuildpackProperties"
            }
          }
        }
      }
    }
  }
};

export const BuildpackProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BuildpackProperties",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BuilderResourceCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BuilderResourceCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BuilderResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SupportedBuildpacksCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SupportedBuildpacksCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SupportedBuildpackResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SupportedBuildpackResourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SupportedBuildpackResourceProperties",
    modelProperties: {
      buildpackId: {
        serializedName: "buildpackId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SupportedStacksCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SupportedStacksCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SupportedStackResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SupportedStackResourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SupportedStackResourceProperties",
    modelProperties: {
      stackId: {
        serializedName: "stackId",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BuildServiceAgentPoolResourceCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BuildServiceAgentPoolResourceCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BuildServiceAgentPoolResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BuildServiceAgentPoolProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BuildServiceAgentPoolProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      poolSize: {
        serializedName: "poolSize",
        type: {
          name: "Composite",
          className: "BuildServiceAgentPoolSizeProperties"
        }
      }
    }
  }
};

export const BuildServiceAgentPoolSizeProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BuildServiceAgentPoolSizeProperties",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      cpu: {
        serializedName: "cpu",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      memory: {
        serializedName: "memory",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MonitoringSettingProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MonitoringSettingProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorModel"
        }
      },
      traceEnabled: {
        serializedName: "traceEnabled",
        type: {
          name: "Boolean"
        }
      },
      appInsightsInstrumentationKey: {
        serializedName: "appInsightsInstrumentationKey",
        type: {
          name: "String"
        }
      },
      appInsightsSamplingRate: {
        constraints: {
          InclusiveMaximum: 100,
          InclusiveMinimum: 0
        },
        serializedName: "appInsightsSamplingRate",
        type: {
          name: "Number"
        }
      },
      appInsightsAgentVersions: {
        serializedName: "appInsightsAgentVersions",
        type: {
          name: "Composite",
          className: "ApplicationInsightsAgentVersions"
        }
      }
    }
  }
};

export const ApplicationInsightsAgentVersions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationInsightsAgentVersions",
    modelProperties: {
      java: {
        serializedName: "java",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AppResourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AppResourceProperties",
    modelProperties: {
      public: {
        serializedName: "public",
        type: {
          name: "Boolean"
        }
      },
      url: {
        serializedName: "url",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      addonConfigs: {
        serializedName: "addonConfigs",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Dictionary", value: { type: { name: "any" } } }
          }
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      fqdn: {
        serializedName: "fqdn",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      httpsOnly: {
        defaultValue: false,
        serializedName: "httpsOnly",
        type: {
          name: "Boolean"
        }
      },
      temporaryDisk: {
        serializedName: "temporaryDisk",
        type: {
          name: "Composite",
          className: "TemporaryDisk"
        }
      },
      persistentDisk: {
        serializedName: "persistentDisk",
        type: {
          name: "Composite",
          className: "PersistentDisk"
        }
      },
      customPersistentDisks: {
        serializedName: "customPersistentDisks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CustomPersistentDiskResource"
            }
          }
        }
      },
      enableEndToEndTLS: {
        defaultValue: false,
        serializedName: "enableEndToEndTLS",
        type: {
          name: "Boolean"
        }
      },
      loadedCertificates: {
        serializedName: "loadedCertificates",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LoadedCertificate"
            }
          }
        }
      },
      vnetAddons: {
        serializedName: "vnetAddons",
        type: {
          name: "Composite",
          className: "AppVNetAddons"
        }
      },
      ingressSettings: {
        serializedName: "ingressSettings",
        type: {
          name: "Composite",
          className: "IngressSettings"
        }
      },
      secrets: {
        serializedName: "secrets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SecretAutoGenerated"
            }
          }
        }
      },
      workloadProfileName: {
        serializedName: "workloadProfileName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TemporaryDisk: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TemporaryDisk",
    modelProperties: {
      sizeInGB: {
        constraints: {
          InclusiveMaximum: 5,
          InclusiveMinimum: 0
        },
        serializedName: "sizeInGB",
        type: {
          name: "Number"
        }
      },
      mountPath: {
        defaultValue: "/tmp",
        serializedName: "mountPath",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PersistentDisk: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PersistentDisk",
    modelProperties: {
      sizeInGB: {
        constraints: {
          InclusiveMaximum: 50,
          InclusiveMinimum: 0
        },
        serializedName: "sizeInGB",
        type: {
          name: "Number"
        }
      },
      usedInGB: {
        constraints: {
          InclusiveMaximum: 50,
          InclusiveMinimum: 0
        },
        serializedName: "usedInGB",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      mountPath: {
        serializedName: "mountPath",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomPersistentDiskResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomPersistentDiskResource",
    modelProperties: {
      customPersistentDiskProperties: {
        serializedName: "customPersistentDiskProperties",
        type: {
          name: "Composite",
          className: "CustomPersistentDiskProperties"
        }
      },
      storageId: {
        serializedName: "storageId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomPersistentDiskProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomPersistentDiskProperties",
    uberParent: "CustomPersistentDiskProperties",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      mountPath: {
        serializedName: "mountPath",
        required: true,
        type: {
          name: "String"
        }
      },
      readOnly: {
        serializedName: "readOnly",
        type: {
          name: "Boolean"
        }
      },
      enableSubPath: {
        defaultValue: false,
        serializedName: "enableSubPath",
        type: {
          name: "Boolean"
        }
      },
      mountOptions: {
        serializedName: "mountOptions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const LoadedCertificate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LoadedCertificate",
    modelProperties: {
      resourceId: {
        serializedName: "resourceId",
        required: true,
        type: {
          name: "String"
        }
      },
      loadTrustStore: {
        defaultValue: false,
        serializedName: "loadTrustStore",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const AppVNetAddons: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AppVNetAddons",
    modelProperties: {
      publicEndpoint: {
        defaultValue: false,
        serializedName: "publicEndpoint",
        type: {
          name: "Boolean"
        }
      },
      publicEndpointUrl: {
        serializedName: "publicEndpointUrl",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IngressSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IngressSettings",
    modelProperties: {
      readTimeoutInSeconds: {
        serializedName: "readTimeoutInSeconds",
        type: {
          name: "Number"
        }
      },
      sendTimeoutInSeconds: {
        serializedName: "sendTimeoutInSeconds",
        type: {
          name: "Number"
        }
      },
      sessionAffinity: {
        serializedName: "sessionAffinity",
        type: {
          name: "String"
        }
      },
      sessionCookieMaxAge: {
        serializedName: "sessionCookieMaxAge",
        type: {
          name: "Number"
        }
      },
      backendProtocol: {
        serializedName: "backendProtocol",
        type: {
          name: "String"
        }
      },
      clientAuth: {
        serializedName: "clientAuth",
        type: {
          name: "Composite",
          className: "IngressSettingsClientAuth"
        }
      }
    }
  }
};

export const IngressSettingsClientAuth: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IngressSettingsClientAuth",
    modelProperties: {
      certificates: {
        serializedName: "certificates",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const SecretAutoGenerated: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecretAutoGenerated",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedIdentityProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedIdentityProperties",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      principalId: {
        serializedName: "principalId",
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        type: {
          name: "String"
        }
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "UserAssignedManagedIdentity"
            }
          }
        }
      }
    }
  }
};

export const UserAssignedManagedIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserAssignedManagedIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      clientId: {
        serializedName: "clientId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AppResourceCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AppResourceCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AppResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ActiveDeploymentCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ActiveDeploymentCollection",
    modelProperties: {
      activeDeploymentNames: {
        serializedName: "activeDeploymentNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const BindingResourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BindingResourceProperties",
    modelProperties: {
      resourceName: {
        serializedName: "resourceName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceType: {
        serializedName: "resourceType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceId: {
        serializedName: "resourceId",
        type: {
          name: "String"
        }
      },
      key: {
        serializedName: "key",
        type: {
          name: "String"
        }
      },
      bindingParameters: {
        serializedName: "bindingParameters",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      generatedProperties: {
        serializedName: "generatedProperties",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      updatedAt: {
        serializedName: "updatedAt",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BindingResourceCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BindingResourceCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BindingResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageProperties",
    uberParent: "StorageProperties",
    polymorphicDiscriminator: {
      serializedName: "storageType",
      clientName: "storageType"
    },
    modelProperties: {
      storageType: {
        serializedName: "storageType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageResourceCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageResourceCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CertificateProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CertificateProperties",
    uberParent: "CertificateProperties",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      thumbprint: {
        serializedName: "thumbprint",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      issuer: {
        serializedName: "issuer",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      issuedDate: {
        serializedName: "issuedDate",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      expirationDate: {
        serializedName: "expirationDate",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      activateDate: {
        serializedName: "activateDate",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      subjectName: {
        serializedName: "subjectName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      dnsNames: {
        serializedName: "dnsNames",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CertificateResourceCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CertificateResourceCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CertificateResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NameAvailabilityParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NameAvailabilityParameters",
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NameAvailability: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NameAvailability",
    modelProperties: {
      nameAvailable: {
        serializedName: "nameAvailable",
        type: {
          name: "Boolean"
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomDomainProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomDomainProperties",
    modelProperties: {
      thumbprint: {
        serializedName: "thumbprint",
        type: {
          name: "String"
        }
      },
      appName: {
        serializedName: "appName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      certName: {
        serializedName: "certName",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomDomainResourceCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomDomainResourceCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CustomDomainResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomDomainValidatePayload: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomDomainValidatePayload",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomDomainValidateResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomDomainValidateResult",
    modelProperties: {
      isValid: {
        serializedName: "isValid",
        type: {
          name: "Boolean"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeploymentResourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeploymentResourceProperties",
    modelProperties: {
      source: {
        serializedName: "source",
        type: {
          name: "Composite",
          className: "UserSourceInfo"
        }
      },
      deploymentSettings: {
        serializedName: "deploymentSettings",
        type: {
          name: "Composite",
          className: "DeploymentSettings"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      active: {
        serializedName: "active",
        type: {
          name: "Boolean"
        }
      },
      instances: {
        serializedName: "instances",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeploymentInstance"
            }
          }
        }
      }
    }
  }
};

export const UserSourceInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserSourceInfo",
    uberParent: "UserSourceInfo",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeploymentSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeploymentSettings",
    modelProperties: {
      resourceRequests: {
        serializedName: "resourceRequests",
        type: {
          name: "Composite",
          className: "ResourceRequests"
        }
      },
      environmentVariables: {
        serializedName: "environmentVariables",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      apms: {
        serializedName: "apms",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApmReference"
            }
          }
        }
      },
      addonConfigs: {
        serializedName: "addonConfigs",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Dictionary", value: { type: { name: "any" } } }
          }
        }
      },
      livenessProbe: {
        serializedName: "livenessProbe",
        type: {
          name: "Composite",
          className: "Probe"
        }
      },
      readinessProbe: {
        serializedName: "readinessProbe",
        type: {
          name: "Composite",
          className: "Probe"
        }
      },
      startupProbe: {
        serializedName: "startupProbe",
        type: {
          name: "Composite",
          className: "Probe"
        }
      },
      terminationGracePeriodSeconds: {
        defaultValue: 90,
        serializedName: "terminationGracePeriodSeconds",
        type: {
          name: "Number"
        }
      },
      scale: {
        serializedName: "scale",
        type: {
          name: "Composite",
          className: "ScaleAutoGenerated"
        }
      },
      containerProbeSettings: {
        serializedName: "containerProbeSettings",
        type: {
          name: "Composite",
          className: "ContainerProbeSettings"
        }
      }
    }
  }
};

export const ResourceRequests: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceRequests",
    modelProperties: {
      cpu: {
        serializedName: "cpu",
        type: {
          name: "String"
        }
      },
      memory: {
        serializedName: "memory",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Probe: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Probe",
    modelProperties: {
      probeAction: {
        serializedName: "probeAction",
        type: {
          name: "Composite",
          className: "ProbeAction"
        }
      },
      disableProbe: {
        defaultValue: false,
        serializedName: "disableProbe",
        required: true,
        type: {
          name: "Boolean"
        }
      },
      initialDelaySeconds: {
        serializedName: "initialDelaySeconds",
        type: {
          name: "Number"
        }
      },
      periodSeconds: {
        serializedName: "periodSeconds",
        type: {
          name: "Number"
        }
      },
      timeoutSeconds: {
        serializedName: "timeoutSeconds",
        type: {
          name: "Number"
        }
      },
      failureThreshold: {
        serializedName: "failureThreshold",
        type: {
          name: "Number"
        }
      },
      successThreshold: {
        serializedName: "successThreshold",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ProbeAction: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProbeAction",
    uberParent: "ProbeAction",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ScaleAutoGenerated: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScaleAutoGenerated",
    modelProperties: {
      minReplicas: {
        serializedName: "minReplicas",
        type: {
          name: "Number"
        }
      },
      maxReplicas: {
        defaultValue: 10,
        serializedName: "maxReplicas",
        type: {
          name: "Number"
        }
      },
      rules: {
        serializedName: "rules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ScaleRuleAutoGenerated"
            }
          }
        }
      }
    }
  }
};

export const ScaleRuleAutoGenerated: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScaleRuleAutoGenerated",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      azureQueue: {
        serializedName: "azureQueue",
        type: {
          name: "Composite",
          className: "QueueScaleRuleAutoGenerated"
        }
      },
      custom: {
        serializedName: "custom",
        type: {
          name: "Composite",
          className: "CustomScaleRuleAutoGenerated"
        }
      },
      http: {
        serializedName: "http",
        type: {
          name: "Composite",
          className: "HttpScaleRuleAutoGenerated"
        }
      },
      tcp: {
        serializedName: "tcp",
        type: {
          name: "Composite",
          className: "TcpScaleRuleAutoGenerated"
        }
      }
    }
  }
};

export const QueueScaleRuleAutoGenerated: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QueueScaleRuleAutoGenerated",
    modelProperties: {
      queueName: {
        serializedName: "queueName",
        type: {
          name: "String"
        }
      },
      queueLength: {
        serializedName: "queueLength",
        type: {
          name: "Number"
        }
      },
      auth: {
        serializedName: "auth",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ScaleRuleAuthAutoGenerated"
            }
          }
        }
      }
    }
  }
};

export const ScaleRuleAuthAutoGenerated: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScaleRuleAuthAutoGenerated",
    modelProperties: {
      secretRef: {
        serializedName: "secretRef",
        type: {
          name: "String"
        }
      },
      triggerParameter: {
        serializedName: "triggerParameter",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomScaleRuleAutoGenerated: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomScaleRuleAutoGenerated",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      metadata: {
        serializedName: "metadata",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      auth: {
        serializedName: "auth",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ScaleRuleAuthAutoGenerated"
            }
          }
        }
      }
    }
  }
};

export const HttpScaleRuleAutoGenerated: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HttpScaleRuleAutoGenerated",
    modelProperties: {
      metadata: {
        serializedName: "metadata",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      auth: {
        serializedName: "auth",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ScaleRuleAuthAutoGenerated"
            }
          }
        }
      }
    }
  }
};

export const TcpScaleRuleAutoGenerated: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TcpScaleRuleAutoGenerated",
    modelProperties: {
      metadata: {
        serializedName: "metadata",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      auth: {
        serializedName: "auth",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ScaleRuleAuthAutoGenerated"
            }
          }
        }
      }
    }
  }
};

export const ContainerProbeSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerProbeSettings",
    modelProperties: {
      disableProbe: {
        serializedName: "disableProbe",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const DeploymentInstance: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeploymentInstance",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      reason: {
        serializedName: "reason",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      discoveryStatus: {
        serializedName: "discoveryStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      zone: {
        serializedName: "zone",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeploymentResourceCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeploymentResourceCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeploymentResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeploymentList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeploymentList",
    modelProperties: {
      deployments: {
        serializedName: "deployments",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const RemoteDebuggingPayload: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RemoteDebuggingPayload",
    modelProperties: {
      port: {
        serializedName: "port",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const RemoteDebugging: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RemoteDebugging",
    modelProperties: {
      port: {
        serializedName: "port",
        type: {
          name: "Number"
        }
      },
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const LogFileUrlResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LogFileUrlResponse",
    modelProperties: {
      url: {
        serializedName: "url",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DiagnosticParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiagnosticParameters",
    modelProperties: {
      appInstance: {
        serializedName: "appInstance",
        type: {
          name: "String"
        }
      },
      filePath: {
        serializedName: "filePath",
        type: {
          name: "String"
        }
      },
      duration: {
        serializedName: "duration",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceResourceList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceResourceList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServiceResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AvailableOperations: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AvailableOperations",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationDetail"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDetail",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        type: {
          name: "Boolean"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      actionType: {
        serializedName: "actionType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      origin: {
        serializedName: "origin",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "OperationProperties"
        }
      }
    }
  }
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationProperties",
    modelProperties: {
      serviceSpecification: {
        serializedName: "serviceSpecification",
        type: {
          name: "Composite",
          className: "ServiceSpecification"
        }
      }
    }
  }
};

export const ServiceSpecification: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceSpecification",
    modelProperties: {
      logSpecifications: {
        serializedName: "logSpecifications",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LogSpecification"
            }
          }
        }
      },
      metricSpecifications: {
        serializedName: "metricSpecifications",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricSpecification"
            }
          }
        }
      }
    }
  }
};

export const LogSpecification: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LogSpecification",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      blobDuration: {
        serializedName: "blobDuration",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MetricSpecification: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricSpecification",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      displayDescription: {
        serializedName: "displayDescription",
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      category: {
        serializedName: "category",
        type: {
          name: "String"
        }
      },
      aggregationType: {
        serializedName: "aggregationType",
        type: {
          name: "String"
        }
      },
      supportedAggregationTypes: {
        serializedName: "supportedAggregationTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      supportedTimeGrainTypes: {
        serializedName: "supportedTimeGrainTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      fillGapWithZero: {
        serializedName: "fillGapWithZero",
        type: {
          name: "Boolean"
        }
      },
      dimensions: {
        serializedName: "dimensions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricDimension"
            }
          }
        }
      },
      sourceMdmNamespace: {
        serializedName: "sourceMdmNamespace",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MetricDimension: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricDimension",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      toBeExportedForShoebox: {
        serializedName: "toBeExportedForShoebox",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const AvailableRuntimeVersions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AvailableRuntimeVersions",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SupportedRuntimeVersion"
            }
          }
        }
      }
    }
  }
};

export const SupportedRuntimeVersion: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SupportedRuntimeVersion",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      },
      platform: {
        serializedName: "platform",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceSkuCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceSkuCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceSku"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceSku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceSku",
    modelProperties: {
      resourceType: {
        serializedName: "resourceType",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        type: {
          name: "String"
        }
      },
      capacity: {
        serializedName: "capacity",
        type: {
          name: "Composite",
          className: "SkuCapacity"
        }
      },
      locations: {
        serializedName: "locations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      locationInfo: {
        serializedName: "locationInfo",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceSkuLocationInfo"
            }
          }
        }
      },
      restrictions: {
        serializedName: "restrictions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceSkuRestrictions"
            }
          }
        }
      }
    }
  }
};

export const SkuCapacity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SkuCapacity",
    modelProperties: {
      minimum: {
        serializedName: "minimum",
        required: true,
        type: {
          name: "Number"
        }
      },
      maximum: {
        serializedName: "maximum",
        type: {
          name: "Number"
        }
      },
      default: {
        serializedName: "default",
        type: {
          name: "Number"
        }
      },
      scaleType: {
        serializedName: "scaleType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceSkuLocationInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceSkuLocationInfo",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      zones: {
        serializedName: "zones",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      zoneDetails: {
        serializedName: "zoneDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceSkuZoneDetails"
            }
          }
        }
      }
    }
  }
};

export const ResourceSkuZoneDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceSkuZoneDetails",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      capabilities: {
        serializedName: "capabilities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceSkuCapabilities"
            }
          }
        }
      }
    }
  }
};

export const ResourceSkuCapabilities: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceSkuCapabilities",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceSkuRestrictions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceSkuRestrictions",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      values: {
        serializedName: "values",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      restrictionInfo: {
        serializedName: "restrictionInfo",
        type: {
          name: "Composite",
          className: "ResourceSkuRestrictionInfo"
        }
      },
      reasonCode: {
        serializedName: "reasonCode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceSkuRestrictionInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceSkuRestrictionInfo",
    modelProperties: {
      locations: {
        serializedName: "locations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      zones: {
        serializedName: "zones",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const GatewayProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GatewayProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      public: {
        defaultValue: false,
        serializedName: "public",
        type: {
          name: "Boolean"
        }
      },
      url: {
        serializedName: "url",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      httpsOnly: {
        defaultValue: false,
        serializedName: "httpsOnly",
        type: {
          name: "Boolean"
        }
      },
      ssoProperties: {
        serializedName: "ssoProperties",
        type: {
          name: "Composite",
          className: "SsoProperties"
        }
      },
      apiMetadataProperties: {
        serializedName: "apiMetadataProperties",
        type: {
          name: "Composite",
          className: "GatewayApiMetadataProperties"
        }
      },
      corsProperties: {
        serializedName: "corsProperties",
        type: {
          name: "Composite",
          className: "GatewayCorsProperties"
        }
      },
      clientAuth: {
        serializedName: "clientAuth",
        type: {
          name: "Composite",
          className: "GatewayPropertiesClientAuth"
        }
      },
      apmTypes: {
        constraints: {
          UniqueItems: true
        },
        serializedName: "apmTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      environmentVariables: {
        serializedName: "environmentVariables",
        type: {
          name: "Composite",
          className: "GatewayPropertiesEnvironmentVariables"
        }
      },
      resourceRequests: {
        serializedName: "resourceRequests",
        type: {
          name: "Composite",
          className: "GatewayResourceRequests"
        }
      },
      addonConfigs: {
        serializedName: "addonConfigs",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Dictionary", value: { type: { name: "any" } } }
          }
        }
      },
      instances: {
        serializedName: "instances",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GatewayInstance"
            }
          }
        }
      },
      operatorProperties: {
        serializedName: "operatorProperties",
        type: {
          name: "Composite",
          className: "GatewayOperatorProperties"
        }
      }
    }
  }
};

export const SsoProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SsoProperties",
    modelProperties: {
      scope: {
        serializedName: "scope",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      clientId: {
        serializedName: "clientId",
        type: {
          name: "String"
        }
      },
      clientSecret: {
        serializedName: "clientSecret",
        type: {
          name: "String"
        }
      },
      issuerUri: {
        serializedName: "issuerUri",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GatewayApiMetadataProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GatewayApiMetadataProperties",
    modelProperties: {
      title: {
        serializedName: "title",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      documentation: {
        serializedName: "documentation",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        type: {
          name: "String"
        }
      },
      serverUrl: {
        serializedName: "serverUrl",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GatewayCorsProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GatewayCorsProperties",
    modelProperties: {
      allowedOrigins: {
        serializedName: "allowedOrigins",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      allowedOriginPatterns: {
        serializedName: "allowedOriginPatterns",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      allowedMethods: {
        serializedName: "allowedMethods",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      allowedHeaders: {
        serializedName: "allowedHeaders",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      maxAge: {
        serializedName: "maxAge",
        type: {
          name: "Number"
        }
      },
      allowCredentials: {
        serializedName: "allowCredentials",
        type: {
          name: "Boolean"
        }
      },
      exposedHeaders: {
        serializedName: "exposedHeaders",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const GatewayPropertiesClientAuth: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GatewayPropertiesClientAuth",
    modelProperties: {
      certificates: {
        constraints: {
          UniqueItems: true
        },
        serializedName: "certificates",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      certificateVerification: {
        defaultValue: "Disabled",
        serializedName: "certificateVerification",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GatewayPropertiesEnvironmentVariables: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GatewayPropertiesEnvironmentVariables",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      secrets: {
        serializedName: "secrets",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const GatewayResourceRequests: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GatewayResourceRequests",
    modelProperties: {
      cpu: {
        defaultValue: "1",
        serializedName: "cpu",
        type: {
          name: "String"
        }
      },
      memory: {
        defaultValue: "2Gi",
        serializedName: "memory",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GatewayInstance: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GatewayInstance",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GatewayOperatorProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GatewayOperatorProperties",
    modelProperties: {
      resourceRequests: {
        serializedName: "resourceRequests",
        type: {
          name: "Composite",
          className: "GatewayOperatorResourceRequests"
        }
      },
      instances: {
        serializedName: "instances",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GatewayInstance"
            }
          }
        }
      }
    }
  }
};

export const GatewayOperatorResourceRequests: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GatewayOperatorResourceRequests",
    modelProperties: {
      cpu: {
        serializedName: "cpu",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      memory: {
        serializedName: "memory",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      instanceCount: {
        serializedName: "instanceCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SkuObject: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SkuObject",
    modelProperties: {
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      }
    }
  }
};

export const GatewayResourceCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GatewayResourceCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GatewayResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GatewayRouteConfigProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GatewayRouteConfigProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      appResourceId: {
        serializedName: "appResourceId",
        type: {
          name: "String"
        }
      },
      openApi: {
        serializedName: "openApi",
        type: {
          name: "Composite",
          className: "GatewayRouteConfigOpenApiProperties"
        }
      },
      protocol: {
        defaultValue: "HTTP",
        serializedName: "protocol",
        type: {
          name: "String"
        }
      },
      routes: {
        serializedName: "routes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GatewayApiRoute"
            }
          }
        }
      },
      ssoEnabled: {
        serializedName: "ssoEnabled",
        type: {
          name: "Boolean"
        }
      },
      predicates: {
        serializedName: "predicates",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      filters: {
        serializedName: "filters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const GatewayRouteConfigOpenApiProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GatewayRouteConfigOpenApiProperties",
    modelProperties: {
      uri: {
        serializedName: "uri",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GatewayApiRoute: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GatewayApiRoute",
    modelProperties: {
      title: {
        serializedName: "title",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      uri: {
        serializedName: "uri",
        type: {
          name: "String"
        }
      },
      ssoEnabled: {
        serializedName: "ssoEnabled",
        type: {
          name: "Boolean"
        }
      },
      tokenRelay: {
        serializedName: "tokenRelay",
        type: {
          name: "Boolean"
        }
      },
      predicates: {
        serializedName: "predicates",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      filters: {
        serializedName: "filters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      order: {
        serializedName: "order",
        type: {
          name: "Number"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const GatewayRouteConfigResourceCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GatewayRouteConfigResourceCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GatewayRouteConfigResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GatewayCustomDomainProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GatewayCustomDomainProperties",
    modelProperties: {
      thumbprint: {
        serializedName: "thumbprint",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GatewayCustomDomainResourceCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GatewayCustomDomainResourceCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GatewayCustomDomainResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApiPortalProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApiPortalProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      public: {
        defaultValue: false,
        serializedName: "public",
        type: {
          name: "Boolean"
        }
      },
      url: {
        serializedName: "url",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      httpsOnly: {
        defaultValue: false,
        serializedName: "httpsOnly",
        type: {
          name: "Boolean"
        }
      },
      gatewayIds: {
        serializedName: "gatewayIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      sourceUrls: {
        serializedName: "sourceUrls",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      ssoProperties: {
        serializedName: "ssoProperties",
        type: {
          name: "Composite",
          className: "SsoProperties"
        }
      },
      resourceRequests: {
        serializedName: "resourceRequests",
        type: {
          name: "Composite",
          className: "ApiPortalResourceRequests"
        }
      },
      instances: {
        serializedName: "instances",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApiPortalInstance"
            }
          }
        }
      }
    }
  }
};

export const ApiPortalResourceRequests: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApiPortalResourceRequests",
    modelProperties: {
      cpu: {
        serializedName: "cpu",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      memory: {
        serializedName: "memory",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApiPortalInstance: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApiPortalInstance",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApiPortalResourceCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApiPortalResourceCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApiPortalResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApiPortalCustomDomainProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApiPortalCustomDomainProperties",
    modelProperties: {
      thumbprint: {
        serializedName: "thumbprint",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApiPortalCustomDomainResourceCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApiPortalCustomDomainResourceCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApiPortalCustomDomainResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationAcceleratorResourceCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationAcceleratorResourceCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationAcceleratorResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationAcceleratorProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationAcceleratorProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      components: {
        serializedName: "components",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationAcceleratorComponent"
            }
          }
        }
      }
    }
  }
};

export const ApplicationAcceleratorComponent: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationAcceleratorComponent",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceRequests: {
        serializedName: "resourceRequests",
        type: {
          name: "Composite",
          className: "ApplicationAcceleratorResourceRequests"
        }
      },
      instances: {
        serializedName: "instances",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationAcceleratorInstance"
            }
          }
        }
      }
    }
  }
};

export const ApplicationAcceleratorResourceRequests: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationAcceleratorResourceRequests",
    modelProperties: {
      cpu: {
        serializedName: "cpu",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      memory: {
        serializedName: "memory",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      instanceCount: {
        serializedName: "instanceCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ApplicationAcceleratorInstance: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationAcceleratorInstance",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomizedAcceleratorResourceCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomizedAcceleratorResourceCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CustomizedAcceleratorResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomizedAcceleratorProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomizedAcceleratorProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      iconUrl: {
        serializedName: "iconUrl",
        type: {
          name: "String"
        }
      },
      acceleratorTags: {
        serializedName: "acceleratorTags",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      gitRepository: {
        serializedName: "gitRepository",
        type: {
          name: "Composite",
          className: "AcceleratorGitRepository"
        }
      }
    }
  }
};

export const AcceleratorGitRepository: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AcceleratorGitRepository",
    modelProperties: {
      url: {
        serializedName: "url",
        required: true,
        type: {
          name: "String"
        }
      },
      intervalInSeconds: {
        serializedName: "intervalInSeconds",
        type: {
          name: "Number"
        }
      },
      branch: {
        serializedName: "branch",
        type: {
          name: "String"
        }
      },
      commit: {
        serializedName: "commit",
        type: {
          name: "String"
        }
      },
      gitTag: {
        serializedName: "gitTag",
        type: {
          name: "String"
        }
      },
      authSetting: {
        serializedName: "authSetting",
        type: {
          name: "Composite",
          className: "AcceleratorAuthSetting"
        }
      }
    }
  }
};

export const AcceleratorAuthSetting: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AcceleratorAuthSetting",
    uberParent: "AcceleratorAuthSetting",
    polymorphicDiscriminator: {
      serializedName: "authType",
      clientName: "authType"
    },
    modelProperties: {
      authType: {
        serializedName: "authType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomizedAcceleratorValidateResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomizedAcceleratorValidateResult",
    modelProperties: {
      state: {
        defaultValue: "Valid",
        serializedName: "state",
        type: {
          name: "String"
        }
      },
      errorMessage: {
        serializedName: "errorMessage",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PredefinedAcceleratorResourceCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PredefinedAcceleratorResourceCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PredefinedAcceleratorResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PredefinedAcceleratorProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PredefinedAcceleratorProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      iconUrl: {
        serializedName: "iconUrl",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      acceleratorTags: {
        serializedName: "acceleratorTags",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      state: {
        defaultValue: "Enabled",
        serializedName: "state",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomContainer: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomContainer",
    modelProperties: {
      server: {
        serializedName: "server",
        type: {
          name: "String"
        }
      },
      containerImage: {
        serializedName: "containerImage",
        type: {
          name: "String"
        }
      },
      command: {
        serializedName: "command",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      args: {
        serializedName: "args",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      imageRegistryCredential: {
        serializedName: "imageRegistryCredential",
        type: {
          name: "Composite",
          className: "ImageRegistryCredential"
        }
      },
      languageFramework: {
        serializedName: "languageFramework",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImageRegistryCredential: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImageRegistryCredential",
    modelProperties: {
      username: {
        serializedName: "username",
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "password",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SpringAppsTemplate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SpringAppsTemplate",
    modelProperties: {
      ...Template.type.modelProperties,
      javaProperties: {
        serializedName: "javaProperties",
        type: {
          name: "Composite",
          className: "JavaProperties"
        }
      }
    }
  }
};

export const InitContainer: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InitContainer",
    modelProperties: {
      ...BaseContainer.type.modelProperties
    }
  }
};

export const Container: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Container",
    modelProperties: {
      ...BaseContainer.type.modelProperties,
      probes: {
        serializedName: "probes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ContainerAppProbe"
            }
          }
        }
      }
    }
  }
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const AppSecret: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AppSecret",
    modelProperties: {
      ...ContainerAppSecret.type.modelProperties
    }
  }
};

export const WeeklyMaintenanceScheduleConfiguration: coreClient.CompositeMapper = {
  serializedName: "Weekly",
  type: {
    name: "Composite",
    className: "WeeklyMaintenanceScheduleConfiguration",
    uberParent: "MaintenanceScheduleConfiguration",
    polymorphicDiscriminator:
      MaintenanceScheduleConfiguration.type.polymorphicDiscriminator,
    modelProperties: {
      ...MaintenanceScheduleConfiguration.type.modelProperties,
      hour: {
        constraints: {
          InclusiveMaximum: 23,
          InclusiveMinimum: 0
        },
        serializedName: "hour",
        required: true,
        type: {
          name: "Number"
        }
      },
      duration: {
        serializedName: "duration",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      day: {
        serializedName: "day",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrackedResourceAutoGenerated: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResourceAutoGenerated",
    modelProperties: {
      ...ResourceAutoGenerated.type.modelProperties,
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const ProxyResourceAutoGenerated: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResourceAutoGenerated",
    modelProperties: {
      ...ResourceAutoGenerated.type.modelProperties
    }
  }
};

export const ContainerRegistryBasicCredentials: coreClient.CompositeMapper = {
  serializedName: "BasicAuth",
  type: {
    name: "Composite",
    className: "ContainerRegistryBasicCredentials",
    uberParent: "ContainerRegistryCredentials",
    polymorphicDiscriminator:
      ContainerRegistryCredentials.type.polymorphicDiscriminator,
    modelProperties: {
      ...ContainerRegistryCredentials.type.modelProperties,
      server: {
        serializedName: "server",
        required: true,
        type: {
          name: "String"
        }
      },
      username: {
        serializedName: "username",
        required: true,
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "password",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureFileVolume: coreClient.CompositeMapper = {
  serializedName: "AzureFileVolume",
  type: {
    name: "Composite",
    className: "AzureFileVolume",
    uberParent: "CustomPersistentDiskProperties",
    polymorphicDiscriminator:
      CustomPersistentDiskProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...CustomPersistentDiskProperties.type.modelProperties,
      shareName: {
        serializedName: "shareName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageAccount: coreClient.CompositeMapper = {
  serializedName: "StorageAccount",
  type: {
    name: "Composite",
    className: "StorageAccount",
    uberParent: "StorageProperties",
    polymorphicDiscriminator: StorageProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...StorageProperties.type.modelProperties,
      accountName: {
        serializedName: "accountName",
        required: true,
        type: {
          name: "String"
        }
      },
      accountKey: {
        serializedName: "accountKey",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KeyVaultCertificateProperties: coreClient.CompositeMapper = {
  serializedName: "KeyVaultCertificate",
  type: {
    name: "Composite",
    className: "KeyVaultCertificateProperties",
    uberParent: "CertificateProperties",
    polymorphicDiscriminator:
      CertificateProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...CertificateProperties.type.modelProperties,
      vaultUri: {
        serializedName: "vaultUri",
        required: true,
        type: {
          name: "String"
        }
      },
      keyVaultCertName: {
        serializedName: "keyVaultCertName",
        required: true,
        type: {
          name: "String"
        }
      },
      certVersion: {
        serializedName: "certVersion",
        type: {
          name: "String"
        }
      },
      excludePrivateKey: {
        defaultValue: false,
        serializedName: "excludePrivateKey",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ContentCertificateProperties: coreClient.CompositeMapper = {
  serializedName: "ContentCertificate",
  type: {
    name: "Composite",
    className: "ContentCertificateProperties",
    uberParent: "CertificateProperties",
    polymorphicDiscriminator:
      CertificateProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...CertificateProperties.type.modelProperties,
      content: {
        serializedName: "content",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UploadedUserSourceInfo: coreClient.CompositeMapper = {
  serializedName: "UploadedUserSourceInfo",
  type: {
    name: "Composite",
    className: "UploadedUserSourceInfo",
    uberParent: "UserSourceInfo",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    modelProperties: {
      ...UserSourceInfo.type.modelProperties,
      relativePath: {
        serializedName: "relativePath",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BuildResultUserSourceInfo: coreClient.CompositeMapper = {
  serializedName: "BuildResult",
  type: {
    name: "Composite",
    className: "BuildResultUserSourceInfo",
    uberParent: "UserSourceInfo",
    polymorphicDiscriminator: UserSourceInfo.type.polymorphicDiscriminator,
    modelProperties: {
      ...UserSourceInfo.type.modelProperties,
      buildResultId: {
        serializedName: "buildResultId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomContainerUserSourceInfo: coreClient.CompositeMapper = {
  serializedName: "Container",
  type: {
    name: "Composite",
    className: "CustomContainerUserSourceInfo",
    uberParent: "UserSourceInfo",
    polymorphicDiscriminator: UserSourceInfo.type.polymorphicDiscriminator,
    modelProperties: {
      ...UserSourceInfo.type.modelProperties,
      customContainer: {
        serializedName: "customContainer",
        type: {
          name: "Composite",
          className: "CustomContainer"
        }
      }
    }
  }
};

export const HttpGetAction: coreClient.CompositeMapper = {
  serializedName: "HTTPGetAction",
  type: {
    name: "Composite",
    className: "HttpGetAction",
    uberParent: "ProbeAction",
    polymorphicDiscriminator: ProbeAction.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProbeAction.type.modelProperties,
      path: {
        serializedName: "path",
        type: {
          name: "String"
        }
      },
      scheme: {
        serializedName: "scheme",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExecAction: coreClient.CompositeMapper = {
  serializedName: "ExecAction",
  type: {
    name: "Composite",
    className: "ExecAction",
    uberParent: "ProbeAction",
    polymorphicDiscriminator: ProbeAction.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProbeAction.type.modelProperties,
      command: {
        serializedName: "command",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const TCPSocketAction: coreClient.CompositeMapper = {
  serializedName: "TCPSocketAction",
  type: {
    name: "Composite",
    className: "TCPSocketAction",
    uberParent: "ProbeAction",
    polymorphicDiscriminator: ProbeAction.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProbeAction.type.modelProperties
    }
  }
};

export const AcceleratorPublicSetting: coreClient.CompositeMapper = {
  serializedName: "Public",
  type: {
    name: "Composite",
    className: "AcceleratorPublicSetting",
    uberParent: "AcceleratorAuthSetting",
    polymorphicDiscriminator:
      AcceleratorAuthSetting.type.polymorphicDiscriminator,
    modelProperties: {
      ...AcceleratorAuthSetting.type.modelProperties,
      caCertResourceId: {
        serializedName: "caCertResourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AcceleratorBasicAuthSetting: coreClient.CompositeMapper = {
  serializedName: "BasicAuth",
  type: {
    name: "Composite",
    className: "AcceleratorBasicAuthSetting",
    uberParent: "AcceleratorAuthSetting",
    polymorphicDiscriminator:
      AcceleratorAuthSetting.type.polymorphicDiscriminator,
    modelProperties: {
      ...AcceleratorAuthSetting.type.modelProperties,
      caCertResourceId: {
        serializedName: "caCertResourceId",
        type: {
          name: "String"
        }
      },
      username: {
        serializedName: "username",
        required: true,
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "password",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AcceleratorSshSetting: coreClient.CompositeMapper = {
  serializedName: "SSH",
  type: {
    name: "Composite",
    className: "AcceleratorSshSetting",
    uberParent: "AcceleratorAuthSetting",
    polymorphicDiscriminator:
      AcceleratorAuthSetting.type.polymorphicDiscriminator,
    modelProperties: {
      ...AcceleratorAuthSetting.type.modelProperties,
      hostKey: {
        serializedName: "hostKey",
        type: {
          name: "String"
        }
      },
      hostKeyAlgorithm: {
        serializedName: "hostKeyAlgorithm",
        type: {
          name: "String"
        }
      },
      privateKey: {
        serializedName: "privateKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContainerApp: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerApp",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      extendedLocation: {
        serializedName: "extendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity"
        }
      },
      managedBy: {
        serializedName: "managedBy",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      managedEnvironmentId: {
        serializedName: "properties.managedEnvironmentId",
        type: {
          name: "String"
        }
      },
      environmentId: {
        serializedName: "properties.environmentId",
        type: {
          name: "String"
        }
      },
      workloadProfileName: {
        serializedName: "properties.workloadProfileName",
        type: {
          name: "String"
        }
      },
      latestRevisionName: {
        serializedName: "properties.latestRevisionName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      latestReadyRevisionName: {
        serializedName: "properties.latestReadyRevisionName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      latestRevisionFqdn: {
        serializedName: "properties.latestRevisionFqdn",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      customDomainVerificationId: {
        serializedName: "properties.customDomainVerificationId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      configuration: {
        serializedName: "properties.configuration",
        type: {
          name: "Composite",
          className: "Configuration"
        }
      },
      template: {
        serializedName: "properties.template",
        type: {
          name: "Composite",
          className: "Template"
        }
      },
      outboundIpAddresses: {
        serializedName: "properties.outboundIpAddresses",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      eventStreamEndpoint: {
        serializedName: "properties.eventStreamEndpoint",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JavaEnvironment: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JavaEnvironment",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      environmentId: {
        serializedName: "properties.environmentId",
        type: {
          name: "String"
        }
      },
      infraResourceGroup: {
        serializedName: "properties.infraResourceGroup",
        type: {
          name: "String"
        }
      },
      zoneRedundant: {
        serializedName: "properties.zoneRedundant",
        type: {
          name: "String"
        }
      },
      defaultDomain: {
        serializedName: "properties.defaultDomain",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JavaEnvironmentForPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JavaEnvironmentForPatch",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const RevisionAutoGenerated: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RevisionAutoGenerated",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      createdTime: {
        serializedName: "properties.createdTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastActiveTime: {
        serializedName: "properties.lastActiveTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      fqdn: {
        serializedName: "properties.fqdn",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      template: {
        serializedName: "properties.template",
        type: {
          name: "Composite",
          className: "Template"
        }
      },
      active: {
        serializedName: "properties.active",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      replicas: {
        serializedName: "properties.replicas",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      trafficWeight: {
        serializedName: "properties.trafficWeight",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      provisioningError: {
        serializedName: "properties.provisioningError",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      healthState: {
        serializedName: "properties.healthState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      runningState: {
        serializedName: "properties.runningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReplicaAutoGenerated: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReplicaAutoGenerated",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      createdTime: {
        serializedName: "properties.createdTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      runningState: {
        serializedName: "properties.runningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      runningStateDetails: {
        serializedName: "properties.runningStateDetails",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      containers: {
        serializedName: "properties.containers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ReplicaContainer"
            }
          }
        }
      },
      initContainers: {
        serializedName: "properties.initContainers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ReplicaContainer"
            }
          }
        }
      }
    }
  }
};

export const MiddlewareEurekaServer: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MiddlewareEurekaServer",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      dashboardUri: {
        serializedName: "properties.dashboardUri",
        type: {
          name: "String"
        }
      },
      enabledState: {
        serializedName: "properties.enabledState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MiddlewareConfigServer: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MiddlewareConfigServer",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      enabledState: {
        serializedName: "properties.enabledState",
        type: {
          name: "String"
        }
      },
      configServer: {
        serializedName: "properties.configServer",
        type: {
          name: "Composite",
          className: "MiddlewareConfigServerSettings"
        }
      }
    }
  }
};

export const ServiceResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceResource",
    modelProperties: {
      ...TrackedResourceAutoGenerated.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ClusterResourceProperties"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      }
    }
  }
};

export const ApmResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApmResource",
    modelProperties: {
      ...ProxyResourceAutoGenerated.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ApmProperties"
        }
      }
    }
  }
};

export const EurekaServerResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EurekaServerResource",
    modelProperties: {
      ...ProxyResourceAutoGenerated.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "EurekaServerProperties"
        }
      }
    }
  }
};

export const ConfigServerResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConfigServerResource",
    modelProperties: {
      ...ProxyResourceAutoGenerated.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ConfigServerProperties"
        }
      }
    }
  }
};

export const ConfigurationServiceResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConfigurationServiceResource",
    modelProperties: {
      ...ProxyResourceAutoGenerated.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ConfigurationServiceProperties"
        }
      }
    }
  }
};

export const ServiceRegistryResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceRegistryResource",
    modelProperties: {
      ...ProxyResourceAutoGenerated.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ServiceRegistryProperties"
        }
      }
    }
  }
};

export const ApplicationLiveViewResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationLiveViewResource",
    modelProperties: {
      ...ProxyResourceAutoGenerated.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ApplicationLiveViewProperties"
        }
      }
    }
  }
};

export const DevToolPortalResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DevToolPortalResource",
    modelProperties: {
      ...ProxyResourceAutoGenerated.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "DevToolPortalProperties"
        }
      }
    }
  }
};

export const ContainerRegistryResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerRegistryResource",
    modelProperties: {
      ...ProxyResourceAutoGenerated.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ContainerRegistryProperties"
        }
      }
    }
  }
};

export const BuildService: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BuildService",
    modelProperties: {
      ...ProxyResourceAutoGenerated.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "BuildServiceProperties"
        }
      }
    }
  }
};

export const Build: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Build",
    modelProperties: {
      ...ProxyResourceAutoGenerated.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "BuildProperties"
        }
      }
    }
  }
};

export const BuildpackBindingResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BuildpackBindingResource",
    modelProperties: {
      ...ProxyResourceAutoGenerated.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "BuildpackBindingProperties"
        }
      }
    }
  }
};

export const BuildResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BuildResult",
    modelProperties: {
      ...ProxyResourceAutoGenerated.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "BuildResultProperties"
        }
      }
    }
  }
};

export const BuilderResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BuilderResource",
    modelProperties: {
      ...ProxyResourceAutoGenerated.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "BuilderProperties"
        }
      }
    }
  }
};

export const SupportedBuildpackResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SupportedBuildpackResource",
    modelProperties: {
      ...ProxyResourceAutoGenerated.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "SupportedBuildpackResourceProperties"
        }
      }
    }
  }
};

export const SupportedStackResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SupportedStackResource",
    modelProperties: {
      ...ProxyResourceAutoGenerated.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "SupportedStackResourceProperties"
        }
      }
    }
  }
};

export const BuildServiceAgentPoolResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BuildServiceAgentPoolResource",
    modelProperties: {
      ...ProxyResourceAutoGenerated.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "BuildServiceAgentPoolProperties"
        }
      }
    }
  }
};

export const MonitoringSettingResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MonitoringSettingResource",
    modelProperties: {
      ...ProxyResourceAutoGenerated.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "MonitoringSettingProperties"
        }
      }
    }
  }
};

export const AppResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AppResource",
    modelProperties: {
      ...ProxyResourceAutoGenerated.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "AppResourceProperties"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedIdentityProperties"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BindingResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BindingResource",
    modelProperties: {
      ...ProxyResourceAutoGenerated.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "BindingResourceProperties"
        }
      }
    }
  }
};

export const StorageResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageResource",
    modelProperties: {
      ...ProxyResourceAutoGenerated.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "StorageProperties"
        }
      }
    }
  }
};

export const CertificateResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CertificateResource",
    modelProperties: {
      ...ProxyResourceAutoGenerated.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "CertificateProperties"
        }
      }
    }
  }
};

export const CustomDomainResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomDomainResource",
    modelProperties: {
      ...ProxyResourceAutoGenerated.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "CustomDomainProperties"
        }
      }
    }
  }
};

export const DeploymentResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeploymentResource",
    modelProperties: {
      ...ProxyResourceAutoGenerated.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "DeploymentResourceProperties"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      }
    }
  }
};

export const GatewayResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GatewayResource",
    modelProperties: {
      ...ProxyResourceAutoGenerated.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "GatewayProperties"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      }
    }
  }
};

export const GatewayRouteConfigResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GatewayRouteConfigResource",
    modelProperties: {
      ...ProxyResourceAutoGenerated.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "GatewayRouteConfigProperties"
        }
      }
    }
  }
};

export const GatewayCustomDomainResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GatewayCustomDomainResource",
    modelProperties: {
      ...ProxyResourceAutoGenerated.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "GatewayCustomDomainProperties"
        }
      }
    }
  }
};

export const ApiPortalResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApiPortalResource",
    modelProperties: {
      ...ProxyResourceAutoGenerated.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ApiPortalProperties"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      }
    }
  }
};

export const ApiPortalCustomDomainResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApiPortalCustomDomainResource",
    modelProperties: {
      ...ProxyResourceAutoGenerated.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ApiPortalCustomDomainProperties"
        }
      }
    }
  }
};

export const ApplicationAcceleratorResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationAcceleratorResource",
    modelProperties: {
      ...ProxyResourceAutoGenerated.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ApplicationAcceleratorProperties"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      }
    }
  }
};

export const CustomizedAcceleratorResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomizedAcceleratorResource",
    modelProperties: {
      ...ProxyResourceAutoGenerated.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "CustomizedAcceleratorProperties"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      }
    }
  }
};

export const PredefinedAcceleratorResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PredefinedAcceleratorResource",
    modelProperties: {
      ...ProxyResourceAutoGenerated.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "PredefinedAcceleratorProperties"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      }
    }
  }
};

export const JarUploadedUserSourceInfo: coreClient.CompositeMapper = {
  serializedName: "Jar",
  type: {
    name: "Composite",
    className: "JarUploadedUserSourceInfo",
    uberParent: "UploadedUserSourceInfo",
    polymorphicDiscriminator:
      UploadedUserSourceInfo.type.polymorphicDiscriminator,
    modelProperties: {
      ...UploadedUserSourceInfo.type.modelProperties,
      runtimeVersion: {
        serializedName: "runtimeVersion",
        type: {
          name: "String"
        }
      },
      jvmOptions: {
        serializedName: "jvmOptions",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SourceUploadedUserSourceInfo: coreClient.CompositeMapper = {
  serializedName: "Source",
  type: {
    name: "Composite",
    className: "SourceUploadedUserSourceInfo",
    uberParent: "UploadedUserSourceInfo",
    polymorphicDiscriminator:
      UploadedUserSourceInfo.type.polymorphicDiscriminator,
    modelProperties: {
      ...UploadedUserSourceInfo.type.modelProperties,
      artifactSelector: {
        serializedName: "artifactSelector",
        type: {
          name: "String"
        }
      },
      runtimeVersion: {
        serializedName: "runtimeVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetCoreZipUploadedUserSourceInfo: coreClient.CompositeMapper = {
  serializedName: "NetCoreZip",
  type: {
    name: "Composite",
    className: "NetCoreZipUploadedUserSourceInfo",
    uberParent: "UploadedUserSourceInfo",
    polymorphicDiscriminator:
      UploadedUserSourceInfo.type.polymorphicDiscriminator,
    modelProperties: {
      ...UploadedUserSourceInfo.type.modelProperties,
      netCoreMainEntryPath: {
        serializedName: "netCoreMainEntryPath",
        type: {
          name: "String"
        }
      },
      runtimeVersion: {
        serializedName: "runtimeVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JavaApp: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JavaApp",
    modelProperties: {
      ...ContainerApp.type.modelProperties,
      provisioningStatePropertiesProvisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      templatePropertiesTemplate: {
        serializedName: "properties.template",
        type: {
          name: "Composite",
          className: "SpringAppsTemplate"
        }
      }
    }
  }
};

export const JavaEnvironmentForPatchBody: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JavaEnvironmentForPatchBody",
    modelProperties: {
      ...JavaEnvironmentForPatch.type.modelProperties
    }
  }
};

export const Revision: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Revision",
    modelProperties: {
      ...RevisionAutoGenerated.type.modelProperties,
      provisioningStatePropertiesProvisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      templatePropertiesTemplate: {
        serializedName: "properties.template",
        type: {
          name: "Composite",
          className: "SpringAppsTemplate"
        }
      }
    }
  }
};

export const Replica: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Replica",
    modelProperties: {
      ...ReplicaAutoGenerated.type.modelProperties,
      discoveryStatus: {
        serializedName: "properties.discoveryStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JavaAppForPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JavaAppForPatch",
    modelProperties: {
      ...JavaApp.type.modelProperties
    }
  }
};

export const JavaAppsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JavaAppsDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JavaAppsUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JavaAppsUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JavaAppsStartHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JavaAppsStartHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JavaAppsStopHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JavaAppsStopHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RevisionsActivateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RevisionsActivateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RevisionsDeactivateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RevisionsDeactivateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RevisionsRestartHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RevisionsRestartHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JavaEnvironmentsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JavaEnvironmentsDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JavaEnvironmentsUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JavaEnvironmentsUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MiddlewareEurekaServersCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MiddlewareEurekaServersCreateOrUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MiddlewareEurekaServersUpdatePatchHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MiddlewareEurekaServersUpdatePatchHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MiddlewareConfigServersUpdatePatchHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MiddlewareConfigServersUpdatePatchHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MiddlewareConfigServersValidateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MiddlewareConfigServersValidateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServicesFlushVnetDnsSettingHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServicesFlushVnetDnsSettingHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServicesEnableApmGloballyHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServicesEnableApmGloballyHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServicesDisableApmGloballyHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServicesDisableApmGloballyHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApmsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApmsDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EurekaServersUpdatePutHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EurekaServersUpdatePutHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EurekaServersUpdatePatchHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EurekaServersUpdatePatchHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConfigurationServicesValidateResourceHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConfigurationServicesValidateResourceHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContainerRegistriesDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerRegistriesDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContainerRegistriesValidateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerRegistriesValidateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BuildServiceDeleteBuildHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BuildServiceDeleteBuildHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GatewaysUpdateCapacityHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GatewaysUpdateCapacityHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GatewaysRestartHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GatewaysRestartHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export let discriminators = {
  MaintenanceScheduleConfiguration: MaintenanceScheduleConfiguration,
  ContainerRegistryCredentials: ContainerRegistryCredentials,
  CustomPersistentDiskProperties: CustomPersistentDiskProperties,
  StorageProperties: StorageProperties,
  CertificateProperties: CertificateProperties,
  UserSourceInfo: UserSourceInfo,
  ProbeAction: ProbeAction,
  AcceleratorAuthSetting: AcceleratorAuthSetting,
  "MaintenanceScheduleConfiguration.Weekly": WeeklyMaintenanceScheduleConfiguration,
  "ContainerRegistryCredentials.BasicAuth": ContainerRegistryBasicCredentials,
  "CustomPersistentDiskProperties.AzureFileVolume": AzureFileVolume,
  "StorageProperties.StorageAccount": StorageAccount,
  "CertificateProperties.KeyVaultCertificate": KeyVaultCertificateProperties,
  "CertificateProperties.ContentCertificate": ContentCertificateProperties,
  "UserSourceInfo.UploadedUserSourceInfo": UploadedUserSourceInfo,
  "UserSourceInfo.BuildResult": BuildResultUserSourceInfo,
  "UserSourceInfo.Container": CustomContainerUserSourceInfo,
  "ProbeAction.HTTPGetAction": HttpGetAction,
  "ProbeAction.ExecAction": ExecAction,
  "ProbeAction.TCPSocketAction": TCPSocketAction,
  "AcceleratorAuthSetting.Public": AcceleratorPublicSetting,
  "AcceleratorAuthSetting.BasicAuth": AcceleratorBasicAuthSetting,
  "AcceleratorAuthSetting.SSH": AcceleratorSshSetting,
  "UploadedUserSourceInfo.Jar": JarUploadedUserSourceInfo,
  "UploadedUserSourceInfo.Source": SourceUploadedUserSourceInfo,
  "UploadedUserSourceInfo.NetCoreZip": NetCoreZipUploadedUserSourceInfo
};
