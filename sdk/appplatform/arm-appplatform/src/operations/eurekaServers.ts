/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { EurekaServers } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { AppPlatformManagementClient } from "../appPlatformManagementClient.js";
import { SimplePollerLike, OperationState, createHttpPoller } from "@azure/core-lro";
import { createLroSpec } from "../lroImpl.js";
import {
  EurekaServersListOptionalParams,
  EurekaServersListResponse,
  EurekaServersGetOptionalParams,
  EurekaServersGetResponse,
  EurekaServerResource,
  EurekaServersUpdatePutOptionalParams,
  EurekaServersUpdatePutResponse,
  EurekaServersUpdatePatchOptionalParams,
  EurekaServersUpdatePatchResponse,
} from "../models/index.js";

/** Class containing EurekaServers operations. */
export class EurekaServersImpl implements EurekaServers {
  private readonly client: AppPlatformManagementClient;

  /**
   * Initialize a new instance of the class EurekaServers class.
   * @param client Reference to the service client
   */
  constructor(client: AppPlatformManagementClient) {
    this.client = client;
  }

  /**
   * List the eureka server settings.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    serviceName: string,
    options?: EurekaServersListOptionalParams,
  ): Promise<EurekaServersListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, serviceName, options },
      listOperationSpec,
    );
  }

  /**
   * Get the eureka server settings.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    serviceName: string,
    options?: EurekaServersGetOptionalParams,
  ): Promise<EurekaServersGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, serviceName, options },
      getOperationSpec,
    );
  }

  /**
   * Update the eureka server settings.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param eurekaServerResource Parameters for the update operation
   * @param options The options parameters.
   */
  async beginUpdatePut(
    resourceGroupName: string,
    serviceName: string,
    eurekaServerResource: EurekaServerResource,
    options?: EurekaServersUpdatePutOptionalParams,
  ): Promise<
    SimplePollerLike<OperationState<EurekaServersUpdatePutResponse>, EurekaServersUpdatePutResponse>
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<EurekaServersUpdatePutResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, serviceName, eurekaServerResource, options },
      spec: updatePutOperationSpec,
    });
    const poller = await createHttpPoller<
      EurekaServersUpdatePutResponse,
      OperationState<EurekaServersUpdatePutResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Update the eureka server settings.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param eurekaServerResource Parameters for the update operation
   * @param options The options parameters.
   */
  async beginUpdatePutAndWait(
    resourceGroupName: string,
    serviceName: string,
    eurekaServerResource: EurekaServerResource,
    options?: EurekaServersUpdatePutOptionalParams,
  ): Promise<EurekaServersUpdatePutResponse> {
    const poller = await this.beginUpdatePut(
      resourceGroupName,
      serviceName,
      eurekaServerResource,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Update the eureka server settings.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param eurekaServerResource Parameters for the update operation
   * @param options The options parameters.
   */
  async beginUpdatePatch(
    resourceGroupName: string,
    serviceName: string,
    eurekaServerResource: EurekaServerResource,
    options?: EurekaServersUpdatePatchOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<EurekaServersUpdatePatchResponse>,
      EurekaServersUpdatePatchResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<EurekaServersUpdatePatchResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, serviceName, eurekaServerResource, options },
      spec: updatePatchOperationSpec,
    });
    const poller = await createHttpPoller<
      EurekaServersUpdatePatchResponse,
      OperationState<EurekaServersUpdatePatchResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Update the eureka server settings.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param eurekaServerResource Parameters for the update operation
   * @param options The options parameters.
   */
  async beginUpdatePatchAndWait(
    resourceGroupName: string,
    serviceName: string,
    eurekaServerResource: EurekaServerResource,
    options?: EurekaServersUpdatePatchOptionalParams,
  ): Promise<EurekaServersUpdatePatchResponse> {
    const poller = await this.beginUpdatePatch(
      resourceGroupName,
      serviceName,
      eurekaServerResource,
      options,
    );
    return poller.pollUntilDone();
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/eurekaServers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EurekaServerResourceCollection,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/eurekaServers/default",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EurekaServerResource,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const updatePutOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/eurekaServers/default",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.EurekaServerResource,
    },
    201: {
      bodyMapper: Mappers.EurekaServerResource,
    },
    202: {
      bodyMapper: Mappers.EurekaServerResource,
    },
    204: {
      bodyMapper: Mappers.EurekaServerResource,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  requestBody: Parameters.eurekaServerResource,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const updatePatchOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/eurekaServers/default",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.EurekaServerResource,
    },
    201: {
      bodyMapper: Mappers.EurekaServerResource,
    },
    202: {
      bodyMapper: Mappers.EurekaServerResource,
    },
    204: {
      bodyMapper: Mappers.EurekaServerResource,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  requestBody: Parameters.eurekaServerResource,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
