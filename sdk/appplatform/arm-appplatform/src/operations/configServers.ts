/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { ConfigServers } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { AppPlatformManagementClient } from "../appPlatformManagementClient.js";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl.js";
import {
  ConfigServerResource,
  ConfigServersListNextOptionalParams,
  ConfigServersListOptionalParams,
  ConfigServersListResponse,
  ConfigServersGetOptionalParams,
  ConfigServersGetResponse,
  ConfigServersUpdatePutOptionalParams,
  ConfigServersUpdatePutResponse,
  ConfigServersUpdatePatchOptionalParams,
  ConfigServersUpdatePatchResponse,
  ConfigServersDeleteOptionalParams,
  ConfigServersDeleteResponse,
  ConfigServerSettings,
  ConfigServersValidateOptionalParams,
  ConfigServersValidateResponse,
  ConfigServersListNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing ConfigServers operations. */
export class ConfigServersImpl implements ConfigServers {
  private readonly client: AppPlatformManagementClient;

  /**
   * Initialize a new instance of the class ConfigServers class.
   * @param client Reference to the service client
   */
  constructor(client: AppPlatformManagementClient) {
    this.client = client;
  }

  /**
   * Handles requests to list all config server resources in a Service.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    serviceName: string,
    options?: ConfigServersListOptionalParams,
  ): PagedAsyncIterableIterator<ConfigServerResource> {
    const iter = this.listPagingAll(resourceGroupName, serviceName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(
          resourceGroupName,
          serviceName,
          options,
          settings,
        );
      },
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    serviceName: string,
    options?: ConfigServersListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<ConfigServerResource[]> {
    let result: ConfigServersListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(resourceGroupName, serviceName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        resourceGroupName,
        serviceName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    serviceName: string,
    options?: ConfigServersListOptionalParams,
  ): AsyncIterableIterator<ConfigServerResource> {
    for await (const page of this.listPagingPage(
      resourceGroupName,
      serviceName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Get the config server and its properties.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    serviceName: string,
    options?: ConfigServersGetOptionalParams,
  ): Promise<ConfigServersGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, serviceName, options },
      getOperationSpec,
    );
  }

  /**
   * Update the config server.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param configServerResource Parameters for the update operation
   * @param options The options parameters.
   */
  async beginUpdatePut(
    resourceGroupName: string,
    serviceName: string,
    configServerResource: ConfigServerResource,
    options?: ConfigServersUpdatePutOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ConfigServersUpdatePutResponse>,
      ConfigServersUpdatePutResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ConfigServersUpdatePutResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, serviceName, configServerResource, options },
      spec: updatePutOperationSpec,
    });
    const poller = await createHttpPoller<
      ConfigServersUpdatePutResponse,
      OperationState<ConfigServersUpdatePutResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
    });
    await poller.poll();
    return poller;
  }

  /**
   * Update the config server.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param configServerResource Parameters for the update operation
   * @param options The options parameters.
   */
  async beginUpdatePutAndWait(
    resourceGroupName: string,
    serviceName: string,
    configServerResource: ConfigServerResource,
    options?: ConfigServersUpdatePutOptionalParams,
  ): Promise<ConfigServersUpdatePutResponse> {
    const poller = await this.beginUpdatePut(
      resourceGroupName,
      serviceName,
      configServerResource,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Update the config server.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param configServerResource Parameters for the update operation
   * @param options The options parameters.
   */
  async beginUpdatePatch(
    resourceGroupName: string,
    serviceName: string,
    configServerResource: ConfigServerResource,
    options?: ConfigServersUpdatePatchOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ConfigServersUpdatePatchResponse>,
      ConfigServersUpdatePatchResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ConfigServersUpdatePatchResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, serviceName, configServerResource, options },
      spec: updatePatchOperationSpec,
    });
    const poller = await createHttpPoller<
      ConfigServersUpdatePatchResponse,
      OperationState<ConfigServersUpdatePatchResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
    });
    await poller.poll();
    return poller;
  }

  /**
   * Update the config server.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param configServerResource Parameters for the update operation
   * @param options The options parameters.
   */
  async beginUpdatePatchAndWait(
    resourceGroupName: string,
    serviceName: string,
    configServerResource: ConfigServerResource,
    options?: ConfigServersUpdatePatchOptionalParams,
  ): Promise<ConfigServersUpdatePatchResponse> {
    const poller = await this.beginUpdatePatch(
      resourceGroupName,
      serviceName,
      configServerResource,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Disable the default Config Server, only available in Enterprise Plan.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    serviceName: string,
    options?: ConfigServersDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ConfigServersDeleteResponse>,
      ConfigServersDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ConfigServersDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, serviceName, options },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<
      ConfigServersDeleteResponse,
      OperationState<ConfigServersDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
    });
    await poller.poll();
    return poller;
  }

  /**
   * Disable the default Config Server, only available in Enterprise Plan.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    serviceName: string,
    options?: ConfigServersDeleteOptionalParams,
  ): Promise<ConfigServersDeleteResponse> {
    const poller = await this.beginDelete(
      resourceGroupName,
      serviceName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Handles requests to list all config server resources in a Service.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    serviceName: string,
    options?: ConfigServersListOptionalParams,
  ): Promise<ConfigServersListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, serviceName, options },
      listOperationSpec,
    );
  }

  /**
   * Check if the config server settings are valid.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param configServerSettings Config server settings to be validated
   * @param options The options parameters.
   */
  async beginValidate(
    resourceGroupName: string,
    serviceName: string,
    configServerSettings: ConfigServerSettings,
    options?: ConfigServersValidateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ConfigServersValidateResponse>,
      ConfigServersValidateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ConfigServersValidateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, serviceName, configServerSettings, options },
      spec: validateOperationSpec,
    });
    const poller = await createHttpPoller<
      ConfigServersValidateResponse,
      OperationState<ConfigServersValidateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Check if the config server settings are valid.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param configServerSettings Config server settings to be validated
   * @param options The options parameters.
   */
  async beginValidateAndWait(
    resourceGroupName: string,
    serviceName: string,
    configServerSettings: ConfigServerSettings,
    options?: ConfigServersValidateOptionalParams,
  ): Promise<ConfigServersValidateResponse> {
    const poller = await this.beginValidate(
      resourceGroupName,
      serviceName,
      configServerSettings,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * ListNext
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    serviceName: string,
    nextLink: string,
    options?: ConfigServersListNextOptionalParams,
  ): Promise<ConfigServersListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, serviceName, nextLink, options },
      listNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/configServers/default",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ConfigServerResource,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const updatePutOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/configServers/default",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ConfigServerResource,
    },
    201: {
      bodyMapper: Mappers.ConfigServerResource,
    },
    202: {
      bodyMapper: Mappers.ConfigServerResource,
    },
    204: {
      bodyMapper: Mappers.ConfigServerResource,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  requestBody: Parameters.configServerResource,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const updatePatchOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/configServers/default",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.ConfigServerResource,
    },
    201: {
      bodyMapper: Mappers.ConfigServerResource,
    },
    202: {
      bodyMapper: Mappers.ConfigServerResource,
    },
    204: {
      bodyMapper: Mappers.ConfigServerResource,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  requestBody: Parameters.configServerResource,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/configServers/default",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.ConfigServersDeleteHeaders,
    },
    201: {
      headersMapper: Mappers.ConfigServersDeleteHeaders,
    },
    202: {
      headersMapper: Mappers.ConfigServersDeleteHeaders,
    },
    204: {
      headersMapper: Mappers.ConfigServersDeleteHeaders,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/configServers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ConfigServerResourceCollection,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const validateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/configServers/validate",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ConfigServerSettingsValidateResult,
    },
    201: {
      bodyMapper: Mappers.ConfigServerSettingsValidateResult,
    },
    202: {
      bodyMapper: Mappers.ConfigServerSettingsValidateResult,
    },
    204: {
      bodyMapper: Mappers.ConfigServerSettingsValidateResult,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  requestBody: Parameters.configServerSettings,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ConfigServerResourceCollection,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
