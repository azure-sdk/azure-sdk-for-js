/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { BuildSettings } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AppPlatformManagementClient } from "../appPlatformManagementClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  BuildSettingResource,
  BuildSettingsListNextOptionalParams,
  BuildSettingsListOptionalParams,
  BuildSettingsListResponse,
  SupportedBuildSettingType,
  BuildSettingsListSupportedTypesNextOptionalParams,
  BuildSettingsListSupportedTypesOptionalParams,
  BuildSettingsListSupportedTypesResponse,
  BuildSettingsGetOptionalParams,
  BuildSettingsGetResponse,
  BuildSettingsDeleteOptionalParams,
  BuildSettingsDeleteResponse,
  BuildSettingsListNextResponse,
  BuildSettingsListSupportedTypesNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing BuildSettings operations. */
export class BuildSettingsImpl implements BuildSettings {
  private readonly client: AppPlatformManagementClient;

  /**
   * Initialize a new instance of the class BuildSettings class.
   * @param client Reference to the service client
   */
  constructor(client: AppPlatformManagementClient) {
    this.client = client;
  }

  /**
   * Get collection of build settings.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param buildServiceName The name of the build service resource.
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    serviceName: string,
    buildServiceName: string,
    options?: BuildSettingsListOptionalParams,
  ): PagedAsyncIterableIterator<BuildSettingResource> {
    const iter = this.listPagingAll(
      resourceGroupName,
      serviceName,
      buildServiceName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(
          resourceGroupName,
          serviceName,
          buildServiceName,
          options,
          settings,
        );
      },
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    serviceName: string,
    buildServiceName: string,
    options?: BuildSettingsListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<BuildSettingResource[]> {
    let result: BuildSettingsListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(
        resourceGroupName,
        serviceName,
        buildServiceName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        resourceGroupName,
        serviceName,
        buildServiceName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    serviceName: string,
    buildServiceName: string,
    options?: BuildSettingsListOptionalParams,
  ): AsyncIterableIterator<BuildSettingResource> {
    for await (const page of this.listPagingPage(
      resourceGroupName,
      serviceName,
      buildServiceName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List supported build setting types for a Service.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param buildServiceName The name of the build service resource.
   * @param options The options parameters.
   */
  public listSupportedTypes(
    resourceGroupName: string,
    serviceName: string,
    buildServiceName: string,
    options?: BuildSettingsListSupportedTypesOptionalParams,
  ): PagedAsyncIterableIterator<SupportedBuildSettingType> {
    const iter = this.listSupportedTypesPagingAll(
      resourceGroupName,
      serviceName,
      buildServiceName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listSupportedTypesPagingPage(
          resourceGroupName,
          serviceName,
          buildServiceName,
          options,
          settings,
        );
      },
    };
  }

  private async *listSupportedTypesPagingPage(
    resourceGroupName: string,
    serviceName: string,
    buildServiceName: string,
    options?: BuildSettingsListSupportedTypesOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<SupportedBuildSettingType[]> {
    let result: BuildSettingsListSupportedTypesResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listSupportedTypes(
        resourceGroupName,
        serviceName,
        buildServiceName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listSupportedTypesNext(
        resourceGroupName,
        serviceName,
        buildServiceName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listSupportedTypesPagingAll(
    resourceGroupName: string,
    serviceName: string,
    buildServiceName: string,
    options?: BuildSettingsListSupportedTypesOptionalParams,
  ): AsyncIterableIterator<SupportedBuildSettingType> {
    for await (const page of this.listSupportedTypesPagingPage(
      resourceGroupName,
      serviceName,
      buildServiceName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Get collection of build settings.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param buildServiceName The name of the build service resource.
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    serviceName: string,
    buildServiceName: string,
    options?: BuildSettingsListOptionalParams,
  ): Promise<BuildSettingsListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, serviceName, buildServiceName, options },
      listOperationSpec,
    );
  }

  /**
   * Get the build setting by name.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param buildServiceName The name of the build service resource.
   * @param buildSettingName The name of the build setting
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    serviceName: string,
    buildServiceName: string,
    buildSettingName: string,
    options?: BuildSettingsGetOptionalParams,
  ): Promise<BuildSettingsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        buildServiceName,
        buildSettingName,
        options,
      },
      getOperationSpec,
    );
  }

  /**
   * Operation to delete a build setting
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param buildServiceName The name of the build service resource.
   * @param buildSettingName The name of the build setting
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    serviceName: string,
    buildServiceName: string,
    buildSettingName: string,
    options?: BuildSettingsDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<BuildSettingsDeleteResponse>,
      BuildSettingsDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<BuildSettingsDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        serviceName,
        buildServiceName,
        buildSettingName,
        options,
      },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<
      BuildSettingsDeleteResponse,
      OperationState<BuildSettingsDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Operation to delete a build setting
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param buildServiceName The name of the build service resource.
   * @param buildSettingName The name of the build setting
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    serviceName: string,
    buildServiceName: string,
    buildSettingName: string,
    options?: BuildSettingsDeleteOptionalParams,
  ): Promise<BuildSettingsDeleteResponse> {
    const poller = await this.beginDelete(
      resourceGroupName,
      serviceName,
      buildServiceName,
      buildSettingName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * List supported build setting types for a Service.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param buildServiceName The name of the build service resource.
   * @param options The options parameters.
   */
  private _listSupportedTypes(
    resourceGroupName: string,
    serviceName: string,
    buildServiceName: string,
    options?: BuildSettingsListSupportedTypesOptionalParams,
  ): Promise<BuildSettingsListSupportedTypesResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, serviceName, buildServiceName, options },
      listSupportedTypesOperationSpec,
    );
  }

  /**
   * ListNext
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param buildServiceName The name of the build service resource.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    serviceName: string,
    buildServiceName: string,
    nextLink: string,
    options?: BuildSettingsListNextOptionalParams,
  ): Promise<BuildSettingsListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, serviceName, buildServiceName, nextLink, options },
      listNextOperationSpec,
    );
  }

  /**
   * ListSupportedTypesNext
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param buildServiceName The name of the build service resource.
   * @param nextLink The nextLink from the previous successful call to the ListSupportedTypes method.
   * @param options The options parameters.
   */
  private _listSupportedTypesNext(
    resourceGroupName: string,
    serviceName: string,
    buildServiceName: string,
    nextLink: string,
    options?: BuildSettingsListSupportedTypesNextOptionalParams,
  ): Promise<BuildSettingsListSupportedTypesNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, serviceName, buildServiceName, nextLink, options },
      listSupportedTypesNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/buildSettings",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BuildSettingResourceCollection,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.buildServiceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/buildSettings/{buildSettingName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BuildSettingResource,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.buildServiceName,
    Parameters.buildSettingName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/buildSettings/{buildSettingName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.BuildSettingsDeleteHeaders,
    },
    201: {
      headersMapper: Mappers.BuildSettingsDeleteHeaders,
    },
    202: {
      headersMapper: Mappers.BuildSettingsDeleteHeaders,
    },
    204: {
      headersMapper: Mappers.BuildSettingsDeleteHeaders,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.buildServiceName,
    Parameters.buildSettingName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listSupportedTypesOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/supportedBuildSettingTypes",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SupportedBuildSettingTypes,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.buildServiceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BuildSettingResourceCollection,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.nextLink,
    Parameters.buildServiceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listSupportedTypesNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SupportedBuildSettingTypes,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.nextLink,
    Parameters.buildServiceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
