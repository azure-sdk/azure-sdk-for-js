/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  BuildSettingResource,
  BuildSettingsListOptionalParams,
  SupportedBuildSettingType,
  BuildSettingsListSupportedTypesOptionalParams,
  BuildSettingsGetOptionalParams,
  BuildSettingsGetResponse,
  BuildSettingsDeleteOptionalParams,
  BuildSettingsDeleteResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a BuildSettings. */
export interface BuildSettings {
  /**
   * Get collection of build settings.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param buildServiceName The name of the build service resource.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    serviceName: string,
    buildServiceName: string,
    options?: BuildSettingsListOptionalParams,
  ): PagedAsyncIterableIterator<BuildSettingResource>;
  /**
   * List supported build setting types for a Service.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param buildServiceName The name of the build service resource.
   * @param options The options parameters.
   */
  listSupportedTypes(
    resourceGroupName: string,
    serviceName: string,
    buildServiceName: string,
    options?: BuildSettingsListSupportedTypesOptionalParams,
  ): PagedAsyncIterableIterator<SupportedBuildSettingType>;
  /**
   * Get the build setting by name.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param buildServiceName The name of the build service resource.
   * @param buildSettingName The name of the build setting
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    serviceName: string,
    buildServiceName: string,
    buildSettingName: string,
    options?: BuildSettingsGetOptionalParams,
  ): Promise<BuildSettingsGetResponse>;
  /**
   * Operation to delete a build setting
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param buildServiceName The name of the build service resource.
   * @param buildSettingName The name of the build setting
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    serviceName: string,
    buildServiceName: string,
    buildSettingName: string,
    options?: BuildSettingsDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<BuildSettingsDeleteResponse>,
      BuildSettingsDeleteResponse
    >
  >;
  /**
   * Operation to delete a build setting
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param buildServiceName The name of the build service resource.
   * @param buildSettingName The name of the build setting
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    serviceName: string,
    buildServiceName: string,
    buildSettingName: string,
    options?: BuildSettingsDeleteOptionalParams,
  ): Promise<BuildSettingsDeleteResponse>;
}
