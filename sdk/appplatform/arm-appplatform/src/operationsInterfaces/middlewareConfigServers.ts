/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  MiddlewareConfigServer,
  MiddlewareConfigServersListOptionalParams,
  MiddlewareConfigServersGetOptionalParams,
  MiddlewareConfigServersGetResponse,
  MiddlewareConfigServersCreateOrUpdateOptionalParams,
  MiddlewareConfigServersCreateOrUpdateResponse,
  MiddlewareConfigServersUpdatePatchOptionalParams,
  MiddlewareConfigServersUpdatePatchResponse,
  MiddlewareConfigServerSettings,
  MiddlewareConfigServersValidateOptionalParams,
  MiddlewareConfigServersValidateResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a MiddlewareConfigServers. */
export interface MiddlewareConfigServers {
  /**
   * List the config server settings.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    options?: MiddlewareConfigServersListOptionalParams
  ): PagedAsyncIterableIterator<MiddlewareConfigServer>;
  /**
   * Operation to get the config server and its properties.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    options?: MiddlewareConfigServersGetOptionalParams
  ): Promise<MiddlewareConfigServersGetResponse>;
  /**
   * Operation to create or update the config server.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param configServerResource Parameters for the update operation
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    configServerResource: MiddlewareConfigServer,
    options?: MiddlewareConfigServersCreateOrUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<MiddlewareConfigServersCreateOrUpdateResponse>,
      MiddlewareConfigServersCreateOrUpdateResponse
    >
  >;
  /**
   * Operation to create or update the config server.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param configServerResource Parameters for the update operation
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    configServerResource: MiddlewareConfigServer,
    options?: MiddlewareConfigServersCreateOrUpdateOptionalParams
  ): Promise<MiddlewareConfigServersCreateOrUpdateResponse>;
  /**
   * Operation to update the config server.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param configServerResource Parameters for the update operation
   * @param options The options parameters.
   */
  beginUpdatePatch(
    resourceGroupName: string,
    configServerResource: MiddlewareConfigServer,
    options?: MiddlewareConfigServersUpdatePatchOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<MiddlewareConfigServersUpdatePatchResponse>,
      MiddlewareConfigServersUpdatePatchResponse
    >
  >;
  /**
   * Operation to update the config server.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param configServerResource Parameters for the update operation
   * @param options The options parameters.
   */
  beginUpdatePatchAndWait(
    resourceGroupName: string,
    configServerResource: MiddlewareConfigServer,
    options?: MiddlewareConfigServersUpdatePatchOptionalParams
  ): Promise<MiddlewareConfigServersUpdatePatchResponse>;
  /**
   * Check if the config server settings are valid.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param configServerSettings Config server settings to be validated
   * @param options The options parameters.
   */
  beginValidate(
    resourceGroupName: string,
    configServerSettings: MiddlewareConfigServerSettings,
    options?: MiddlewareConfigServersValidateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<MiddlewareConfigServersValidateResponse>,
      MiddlewareConfigServersValidateResponse
    >
  >;
  /**
   * Check if the config server settings are valid.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param configServerSettings Config server settings to be validated
   * @param options The options parameters.
   */
  beginValidateAndWait(
    resourceGroupName: string,
    configServerSettings: MiddlewareConfigServerSettings,
    options?: MiddlewareConfigServersValidateOptionalParams
  ): Promise<MiddlewareConfigServersValidateResponse>;
}
