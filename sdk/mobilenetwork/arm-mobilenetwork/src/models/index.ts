/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export type ClusterServiceClusterTypeSpecificDataUnion =
  | ClusterServiceClusterTypeSpecificData
  | ClusterServiceAksClusterData
  | ClusterServiceNexusAksClusterData;
export type ExtendedUeInfoPropertiesUnion =
  | ExtendedUeInfoProperties
  | UeInfo4G
  | UeInfo5G;

/** A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of results. */
export interface OperationListResult {
  /**
   * List of operations supported by the resource provider
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Operation[];
  /**
   * URL to get the next set of operation list results (if there are any).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Details of a REST API operation, returned from the Resource Provider Operations API */
export interface Operation {
  /**
   * The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for ARM/control-plane operations.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isDataAction?: boolean;
  /** Localized display information for this particular operation. */
  display?: OperationDisplay;
  /**
   * The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is "user,system"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly origin?: Origin;
  /**
   * Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly actionType?: ActionType;
}

/** Localized display information for this particular operation. */
export interface OperationDisplay {
  /**
   * The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft Compute".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provider?: string;
  /**
   * The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job Schedule Collections".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resource?: string;
  /**
   * The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operation?: string;
  /**
   * The short, localized friendly description of the operation; suitable for tool tips and detailed views.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export interface ErrorResponse {
  /** The error object. */
  error?: ErrorDetail;
}

/** The error detail. */
export interface ErrorDetail {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDetail[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
}

/** The response of a PacketCoreControlPlaneVersion list operation. */
export interface PacketCoreControlPlaneVersionListResult {
  /** The PacketCoreControlPlaneVersion items on this page */
  value: PacketCoreControlPlaneVersion[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** Platform specific packet core control plane version properties. */
export interface Platform {
  /** The platform type where this version can be deployed. */
  platformType?: PlatformType;
  /** The state of this packet core control plane version on this platform. */
  versionState?: VersionState;
  /** The minimum software version of the platform where this packet core version can be deployed. */
  minimumPlatformSoftwareVersion?: string;
  /** The maximum software version of the platform where this packet core version can be deployed. */
  maximumPlatformSoftwareVersion?: string;
  /** Indicates whether this is the recommended version for this platform. */
  recommendedVersion?: RecommendedVersion;
  /** Indicates whether this version is obsoleted for this platform. */
  obsoleteVersion?: ObsoleteVersion;
  /** The list of versions to which a high availability upgrade from this version is supported. */
  haUpgradesAvailable?: string[];
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export interface Resource {
  /**
   * Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Azure Resource Manager metadata containing createdBy and modifiedBy information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The timestamp of resource last modification (UTC) */
  lastModifiedAt?: Date;
}

/** The response of a AmfDeploymentResource list operation. */
export interface AmfDeploymentResourceListResult {
  /** The AmfDeploymentResource items on this page */
  value: AmfDeploymentResource[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** Operational Status of the resource */
export interface OperationalStatus {
  /**
   * Status of the deployed workload
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly workload?: string;
  /**
   * Health check results
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly healthCheck?: string;
}

/** The response of a ClusterServiceResource list operation. */
export interface ClusterServiceResourceListResult {
  /** The ClusterServiceResource items on this page */
  value: ClusterServiceResource[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** Cluster Service cluster type specific data. */
export interface ClusterServiceClusterTypeSpecificData {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "Aks" | "NexusAks";
  /** Custom Location resource ID */
  customLocationId: string;
}

/** Containerized Network Function (CNF) Qualified Deployment Parameters */
export interface QualifiedComponentDeploymentParameters {
  /** Component Type */
  type: string;
  /** Deployment Parameters */
  parameters?: string;
  /** Deployment secrets */
  secrets?: string;
}

/** The response of a MobileNetwork list operation. */
export interface MobileNetworkListResult {
  /** The MobileNetwork items on this page */
  value: MobileNetwork[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** Public land mobile network (PLMN) ID. This is made up of the mobile country code and mobile network code, as defined in https://www.itu.int/rec/T-REC-E.212. The values 001-01 and 001-001 can be used for testing and the values 999-99 and 999-999 can be used on internal private networks. */
export interface PlmnId {
  /** Mobile country code (MCC). */
  mcc: string;
  /** Mobile network code (MNC). */
  mnc: string;
}

/** Configuration relating to SUPI concealment. */
export interface PublicLandMobileNetworkHomeNetworkPublicKeys {
  /** This provides a mapping to identify which public key has been used for SUPI concealment using the Profile A Protection Scheme. */
  profileA?: HomeNetworkPublicKey[];
  /** This provides a mapping to identify which public key has been used for SUPI concealment using the Profile B Protection Scheme. */
  profileB?: HomeNetworkPublicKey[];
}

/** A key used for SUPI concealment. */
export interface HomeNetworkPublicKey {
  /** The Home Network Public Key Identifier determines which public key was used to generate the SUCI sent to the AMF. See TS 23.003 Section 2.2B Section 5. */
  id: number;
  /** The URL of Azure Key Vault secret containing the private key, versioned or unversioned. For example: https://contosovault.vault.azure.net/secrets/mySuciPrivateKey/562a4bb76b524a1493a6afe8e536ee78. */
  url?: string;
}

/** Managed service identity (User assigned identity). */
export interface ManagedServiceIdentity {
  /** Type of managed service identity (currently only UserAssigned allowed). */
  type: ManagedServiceIdentityType;
  /** The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests. */
  userAssignedIdentities?: { [propertyName: string]: UserAssignedIdentity };
}

/** User assigned identity properties. */
export interface UserAssignedIdentity {
  /**
   * The principal ID of the assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The client ID of the assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly clientId?: string;
}

/** The response of a NrfDeploymentResource list operation. */
export interface NrfDeploymentResourceListResult {
  /** The NrfDeploymentResource items on this page */
  value: NrfDeploymentResource[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** The response of a NssfDeploymentResource list operation. */
export interface NssfDeploymentResourceListResult {
  /** The NssfDeploymentResource items on this page */
  value: NssfDeploymentResource[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** The response of a ObservabilityServiceResource list operation. */
export interface ObservabilityServiceResourceListResult {
  /** The ObservabilityServiceResource items on this page */
  value: ObservabilityServiceResource[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** The response of a PacketCoreControlPlane list operation. */
export interface PacketCoreControlPlaneListResult {
  /** The PacketCoreControlPlane items on this page */
  value: PacketCoreControlPlane[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** The installation state of the packet core. */
export interface Installation {
  /** The desired installation state */
  desiredState?: DesiredInstallationState;
  /**
   * Installation state
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly state?: InstallationState;
  /**
   * Whether a reinstall of the packet core is required to pick up the latest configuration changes.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly reinstallRequired?: ReinstallRequired;
  /**
   * Reason(s) for the current installation state of the packet core.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly reasons?: InstallationReason[];
  /**
   * A reference to an in-progress installation operation
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operation?: AsyncOperationId;
}

/** Reference to an Azure Async Operation ID. */
export interface AsyncOperationId {
  /** Azure Async Operation ID. */
  id: string;
}

/** Reference to a site resource. */
export interface SiteResourceId {
  /** Site resource ID. */
  id: string;
}

/** The platform where the packet core is deployed. */
export interface PlatformConfiguration {
  /** The platform type where packet core is deployed. */
  type: PlatformType;
  /** The Azure Stack Edge device where the packet core is deployed. If the device is part of a fault tolerant pair, either device in the pair can be specified. */
  azureStackEdgeDevice?: AzureStackEdgeDeviceResourceId;
  /**
   * The Azure Stack Edge devices where the packet core is deployed. If the packet core is deployed across multiple devices, all devices will appear in this list.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly azureStackEdgeDevices?: AzureStackEdgeDeviceResourceId[];
  /** The Azure Stack HCI cluster where the packet core is deployed. */
  azureStackHciCluster?: AzureStackHCIClusterResourceId;
  /** Azure Arc connected cluster where the packet core is deployed. */
  connectedCluster?: ConnectedClusterResourceId;
  /** Azure Arc custom location where the packet core is deployed. */
  customLocation?: CustomLocationResourceId;
}

/** Reference to an Azure Stack Edge device resource. */
export interface AzureStackEdgeDeviceResourceId {
  /** Azure Stack Edge device resource ID. */
  id: string;
}

/** Reference to an Azure Stack HCI cluster resource. */
export interface AzureStackHCIClusterResourceId {
  /** Azure Stack HCI cluster resource ID. */
  id: string;
}

/** Reference to an Azure Arc custom location resource. */
export interface ConnectedClusterResourceId {
  /** Azure Arc custom location resource ID. */
  id: string;
}

/** Reference to an Azure Arc custom location resource. */
export interface CustomLocationResourceId {
  /** Azure Arc custom location resource ID. */
  id: string;
}

/** Interface properties */
export interface InterfaceProperties {
  /** The logical name for this interface. This should match one of the interfaces configured on your Azure Stack Edge device. */
  name?: string;
  /** The IPv4 address. */
  ipv4Address?: string;
  /** The IPv4 subnet. */
  ipv4Subnet?: string;
  /** The default IPv4 gateway (router). */
  ipv4Gateway?: string;
  /** VLAN identifier of the network interface. Example: 501. */
  vlanId?: number;
  /** The list of IPv4 addresses, for a multi-node system. */
  ipv4AddressList?: string[];
  /** The IPv4 addresses of the endpoints to send BFD probes to. */
  bfdIpv4Endpoints?: string[];
}

/** The kubernetes ingress configuration to control access to packet core diagnostics over local APIs. */
export interface LocalDiagnosticsAccessConfiguration {
  /** How to authenticate users who access local diagnostics APIs. */
  authenticationType: AuthenticationType;
  /** The HTTPS server TLS certificate used to secure local access to diagnostics. */
  httpsServerCertificate?: HttpsServerCertificate;
}

/** HTTPS server certificate configuration. */
export interface HttpsServerCertificate {
  /** The certificate URL, unversioned. For example: https://contosovault.vault.azure.net/certificates/ingress. */
  certificateUrl: string;
  /**
   * The provisioning state of the certificate.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioning?: CertificateProvisioning;
}

/** Certificate provisioning state */
export interface CertificateProvisioning {
  /**
   * The certificate's provisioning state
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly state?: CertificateProvisioningState;
  /**
   * Reason for certificate provisioning failure.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly reason?: string;
}

/** Configuration for uploading packet core diagnostics. */
export interface DiagnosticsUploadConfiguration {
  /** The Storage Account Container URL to upload diagnostics to. */
  storageAccountContainerUrl: string;
}

/** Configuration for sending packet core events to Azure Event Hub. */
export interface EventHubConfiguration {
  /** Resource ID  of Azure Event Hub to send packet core events to. */
  id: string;
  /** The duration (in seconds) between UE usage reports. */
  reportingInterval?: number;
}

/** Signaling configuration for the packet core. */
export interface SignalingConfiguration {
  /** Configuration enabling 4G NAS reroute. */
  nasReroute?: NASRerouteConfiguration;
  /** An ordered list of NAS encryption algorithms, used to encrypt control plane traffic between the UE and packet core, in order from most to least preferred. If not specified, the packet core will use a built-in default ordering. */
  nasEncryption?: NASEncryptionType[];
}

/** Configuration enabling NAS reroute. */
export interface NASRerouteConfiguration {
  /** The macro network's MME group ID. This is where unknown UEs are sent to via NAS reroute. */
  macroMmeGroupId: number;
}

/** Home network private keys provisioning state. */
export interface HomeNetworkPrivateKeysProvisioning {
  /**
   * The provisioning state of the private keys for SUPI concealment.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly state: HomeNetworkPrivateKeysProvisioningState;
}

/** The user consent configuration for the packet core */
export interface UserConsentConfiguration {
  /** Allow Microsoft to access non-PII telemetry information from the packet core. */
  allowSupportTelemetryAccess?: boolean;
}

/** The response of a SimGroup list operation. */
export interface SimGroupListResult {
  /** The SimGroup items on this page */
  value: SimGroup[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** An Azure key vault key. */
export interface KeyVaultKey {
  /** The key URL, unversioned. For example: https://contosovault.vault.azure.net/keys/azureKey. */
  keyUrl?: string;
}

/** Reference to a mobile network resource. */
export interface MobileNetworkResourceId {
  /** Mobile network resource ID. */
  id: string;
}

/** The response of a SmfDeploymentResource list operation. */
export interface SmfDeploymentResourceListResult {
  /** The SmfDeploymentResource items on this page */
  value: SmfDeploymentResource[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** The response of a UpfDeploymentResource list operation. */
export interface UpfDeploymentResourceListResult {
  /** The UpfDeploymentResource items on this page */
  value: UpfDeploymentResource[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** The type used for updating tags in AmfDeploymentResource resources. */
export interface AmfDeploymentResourceTagsUpdate {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
}

/** The type used for updating tags in ClusterServiceResource resources. */
export interface ClusterServiceResourceTagsUpdate {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
}

/** Identity and Tags object for patch operations. */
export interface IdentityAndTagsObject {
  /** The managed service identity associated with this resource. */
  identity?: ManagedServiceIdentity;
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
}

/** The response of a DataNetwork list operation. */
export interface DataNetworkListResult {
  /** The DataNetwork items on this page */
  value: DataNetwork[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** Tags object for patch operations. */
export interface TagsObject {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
}

/** The response of a Service list operation. */
export interface ServiceListResult {
  /** The Service items on this page */
  value: Service[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** QoS policy */
export interface QosPolicy {
  /** 5G QoS Flow Indicator value. The 5QI identifies a specific QoS forwarding treatment to be provided to a flow. See 3GPP TS23.501 section 5.7.2.1 for a full description of the 5QI parameter, and table 5.7.4-1 for the definition the 5QI values. */
  fiveQi?: number;
  /** QoS Flow allocation and retention priority (ARP) level. Flows with higher priority preempt flows with lower priority, if the settings of `preemptionCapability` and `preemptionVulnerability` allow it. 1 is the highest level of priority. If this field is not specified then `5qi` is used to derive the ARP value. See 3GPP TS23.501 section 5.7.2.2 for a full description of the ARP parameters. */
  allocationAndRetentionPriorityLevel?: number;
  /** QoS Flow preemption capability. The preemption capability of a QoS Flow controls whether it can preempt another QoS Flow with a lower priority level. See 3GPP TS23.501 section 5.7.2.2 for a full description of the ARP parameters. */
  preemptionCapability?: PreemptionCapability;
  /** QoS Flow preemption vulnerability. The preemption vulnerability of a QoS Flow controls whether it can be preempted by a QoS Flow with a higher priority level. See 3GPP TS23.501 section 5.7.2.2 for a full description of the ARP parameters. */
  preemptionVulnerability?: PreemptionVulnerability;
  /** The maximum bit rate (MBR) for all service data flows that use this data flow policy rule or service. */
  maximumBitRate: Ambr;
}

/** Aggregate maximum bit rate. */
export interface Ambr {
  /** Uplink bit rate. */
  uplink: string;
  /** Downlink bit rate. */
  downlink: string;
}

/** Data flow policy rule configuration */
export interface PccRuleConfiguration {
  /** The name of the rule. This must be unique within the parent service. You must not use any of the following reserved strings - `default`, `requested` or `service`. */
  ruleName: string;
  /** A precedence value that is used to decide between data flow policy rules when identifying the QoS values to use for a particular SIM. A lower value means a higher priority. This value should be unique among all data flow policy rules configured in the mobile network. */
  rulePrecedence: number;
  /** The QoS policy to use for packets matching this rule. If this field is null then the parent service will define the QoS settings. */
  ruleQosPolicy?: PccRuleQosPolicy;
  /** Determines whether flows that match this data flow policy rule are permitted. */
  trafficControl?: TrafficControlPermission;
  /** The set of data flow templates to use for this data flow policy rule. */
  serviceDataFlowTemplates: ServiceDataFlowTemplate[];
}

/** Data flow template */
export interface ServiceDataFlowTemplate {
  /** The name of the data flow template. This must be unique within the parent data flow policy rule. You must not use any of the following reserved strings - `default`, `requested` or `service`. */
  templateName: string;
  /** The direction of this flow. */
  direction: SdfDirection;
  /** A list of the allowed protocol(s) for this flow. If you want this flow to be able to use any protocol within the internet protocol suite, use the value `ip`. If you only want to allow a selection of protocols, you must use the corresponding IANA Assigned Internet Protocol Number for each protocol, as described in https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml. For example, for UDP, you must use 17. If you use the value `ip` then you must leave the field `port` unspecified. */
  protocol: string[];
  /** The remote IP address(es) to which UEs will connect for this flow. If you want to allow connections on any IP address, use the value `any`. Otherwise, you must provide each of the remote IP addresses to which the packet core instance will connect for this flow. You must provide each IP address in CIDR notation, including the netmask (for example, 192.0.2.54/24). */
  remoteIpList: string[];
  /** The port(s) to which UEs will connect for this flow. You can specify zero or more ports or port ranges. If you specify one or more ports or port ranges then you must specify a value other than `ip` in the `protocol` field. This is an optional setting. If you do not specify it then connections will be allowed on all ports. Port ranges must be specified as <FirstPort>-<LastPort>. For example: [`8080`, `8082-8085`]. */
  ports?: string[];
}

/** The response of a SimPolicy list operation. */
export interface SimPolicyListResult {
  /** The SimPolicy items on this page */
  value: SimPolicy[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** Reference to a slice resource. */
export interface SliceResourceId {
  /** Slice resource ID. */
  id: string;
}

/** Per-slice settings */
export interface SliceConfiguration {
  /** A reference to the slice that these settings apply to. The slice must be in the same location as the SIM policy. */
  slice: SliceResourceId;
  /** The default data network to use if the UE does not explicitly specify it. Configuration for this object must exist in the `dataNetworkConfigurations` map. The data network must be in the same location as the SIM policy. */
  defaultDataNetwork: DataNetworkResourceId;
  /** The allowed data networks and the settings to use for them. The list must not contain duplicate items and must contain at least one item. */
  dataNetworkConfigurations: DataNetworkConfiguration[];
}

/** Reference to a data network resource. */
export interface DataNetworkResourceId {
  /** Data network resource ID. */
  id: string;
}

/** Settings controlling data network use */
export interface DataNetworkConfiguration {
  /** A reference to the data network that these settings apply to. The data network must be in the same location as the SIM policy. */
  dataNetwork: DataNetworkResourceId;
  /** Aggregate maximum bit rate across all non-GBR QoS flows of a given PDU session. See 3GPP TS23.501 section 5.7.2.6 for a full description of the Session-AMBR. */
  sessionAmbr: Ambr;
  /** Default 5G QoS Flow Indicator value. The 5QI identifies a specific QoS forwarding treatment to be provided to a flow. See 3GPP TS23.501 section 5.7.2.1 for a full description of the 5QI parameter, and table 5.7.4-1 for the definition the 5QI values. */
  fiveQi?: number;
  /** Default QoS Flow allocation and retention priority (ARP) level. Flows with higher priority preempt flows with lower priority, if the settings of `preemptionCapability` and `preemptionVulnerability` allow it. 1 is the highest level of priority. If this field is not specified then `5qi` is used to derive the ARP value. See 3GPP TS23.501 section 5.7.2.2 for a full description of the ARP parameters. */
  allocationAndRetentionPriorityLevel?: number;
  /** Default QoS Flow preemption capability. The preemption capability of a QoS Flow controls whether it can preempt another QoS Flow with a lower priority level. See 3GPP TS23.501 section 5.7.2.2 for a full description of the ARP parameters. */
  preemptionCapability?: PreemptionCapability;
  /** Default QoS Flow preemption vulnerability. The preemption vulnerability of a QoS Flow controls whether it can be preempted by a QoS Flow with a higher priority level. See 3GPP TS23.501 section 5.7.2.2 for a full description of the ARP parameters. */
  preemptionVulnerability?: PreemptionVulnerability;
  /** The default PDU session type, which is used if the UE does not request a specific session type. */
  defaultSessionType?: PduSessionType;
  /** Allowed session types in addition to the default session type. Must not duplicate the default session type. */
  additionalAllowedSessionTypes?: PduSessionType[];
  /** List of services that can be used as part of this SIM policy. The list must not contain duplicate items and must contain at least one item. The services must be in the same location as the SIM policy. */
  allowedServices: ServiceResourceId[];
  /** The maximum number of downlink packets to buffer at the user plane for High Latency Communication - Extended Buffering. See 3GPP TS29.272 v15.10.0 section 7.3.188 for a full description. This maximum is not guaranteed because there is a internal limit on buffered packets across all PDU sessions. */
  maximumNumberOfBufferedPackets?: number;
}

/** Reference to a service resource. */
export interface ServiceResourceId {
  /** Service resource ID. */
  id: string;
}

/** The response of a Site list operation. */
export interface SiteListResult {
  /** The Site items on this page */
  value: Site[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** Reference to another sub resource. */
export interface SubResource {
  /** Resource ID. */
  id: string;
}

/** The packet core to delete under a site. */
export interface SiteDeletePacketCore {
  /** Reference to an packet core control plane resource. */
  packetCore?: PacketCoreControlPlaneResourceId;
}

/** Reference to an packet core control plane resource. */
export interface PacketCoreControlPlaneResourceId {
  /** Packet core control plane resource ID. */
  id: string;
}

/** The current status of an async operation. */
export interface AsyncOperationStatus {
  /** Fully qualified ID for the async operation. */
  id?: string;
  /** Name of the async operation. */
  name?: string;
  /** The operation status. */
  status: string;
  /** Fully qualified ID for the resource that this async operation status relates to. */
  resourceId?: string;
  /** The start time of the operation. */
  startTime?: Date;
  /** The end time of the operation. */
  endTime?: Date;
  /** Percentage of the operation that is complete. */
  percentComplete?: number;
  /** Properties returned by the resource provider on a successful operation */
  properties?: Record<string, unknown>;
  /** If present, details of the operation error. */
  error?: ErrorDetail;
}

/** The response of a Slice list operation. */
export interface SliceListResult {
  /** The Slice items on this page */
  value: Slice[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** Single-network slice selection assistance information (S-NSSAI). */
export interface Snssai {
  /** Slice/service type (SST). */
  sst: number;
  /** Slice differentiator (SD). */
  sd?: string;
}

/** The type used for updating tags in NrfDeploymentResource resources. */
export interface NrfDeploymentResourceTagsUpdate {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
}

/** The type used for updating tags in NssfDeploymentResource resources. */
export interface NssfDeploymentResourceTagsUpdate {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
}

/** The type used for updating tags in ObservabilityServiceResource resources. */
export interface ObservabilityServiceResourceTagsUpdate {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
}

/** Packet core control plane collect diagnostics package options */
export interface PacketCoreControlPlaneCollectDiagnosticsPackage {
  /** The Storage Account Blob URL to upload the diagnostics package to. */
  storageAccountBlobUrl: string;
}

/** The response of a DiagnosticsPackage list operation. */
export interface DiagnosticsPackageListResult {
  /** The DiagnosticsPackage items on this page */
  value: DiagnosticsPackage[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** The response of a PacketCapture list operation. */
export interface PacketCaptureListResult {
  /** The PacketCapture items on this page */
  value: PacketCapture[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** The response of a PacketCoreDataPlane list operation. */
export interface PacketCoreDataPlaneListResult {
  /** The PacketCoreDataPlane items on this page */
  value: PacketCoreDataPlane[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** The response of a AttachedDataNetwork list operation. */
export interface AttachedDataNetworkListResult {
  /** The AttachedDataNetwork items on this page */
  value: AttachedDataNetwork[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** The network address and port translation settings to use for the attached data network. */
export interface NaptConfiguration {
  /** Whether NAPT is enabled for connections to this attached data network. */
  enabled?: NaptEnabled;
  /**
   * Range of port numbers to use as translated ports on each translated address.
   * If not specified and NAPT is enabled, this range defaults to 1,024 - 49,999.
   * (Ports under 1,024 should not be used because these are special purpose ports reserved by IANA. Ports 50,000 and above are reserved for non-NAPT use.)
   */
  portRange?: PortRange;
  /** The minimum time (in seconds) that will pass before a port that was used by a closed pinhole can be recycled for use by another pinhole. All hold times must be at least 1 second. */
  portReuseHoldTime?: PortReuseHoldTimes;
  /** Maximum number of UDP and TCP pinholes that can be open simultaneously on the core interface. For 5G networks, this is the N6 interface. For 4G networks, this is the SGi interface. */
  pinholeLimits?: number;
  /** Expiry times of inactive NAPT pinholes, in seconds. All timers must be at least 1 second. */
  pinholeTimeouts?: PinholeTimeouts;
}

/**
 * Range of port numbers to use as translated ports on each translated address.
 * If not specified and NAPT is enabled, this range defaults to 1,024 - 49,999.
 * (Ports under 1,024 should not be used because these are special purpose ports reserved by IANA. Ports 50,000 and above are reserved for non-NAPT use.)
 */
export interface PortRange {
  /** The minimum port number */
  minPort?: number;
  /** The maximum port number */
  maxPort?: number;
}

/** The minimum time (in seconds) that will pass before a port that was used by a closed pinhole can be recycled for use by another pinhole. All hold times must be minimum 1 second. */
export interface PortReuseHoldTimes {
  /** Minimum time in seconds that will pass before a TCP port that was used by a closed pinhole can be reused. Default for TCP is 2 minutes. */
  tcp?: number;
  /** Minimum time in seconds that will pass before a UDP port that was used by a closed pinhole can be reused. Default for UDP is 1 minute. */
  udp?: number;
}

/** Expiry times of inactive NAPT pinholes, in seconds. All timers must be at least 1 second. */
export interface PinholeTimeouts {
  /** Pinhole timeout for TCP pinholes in seconds. Default for TCP is 3 minutes. */
  tcp?: number;
  /** Pinhole timeout for UDP pinholes in seconds. Default for UDP is 30 seconds. */
  udp?: number;
  /** Pinhole timeout for ICMP pinholes in seconds. Default for ICMP Echo is 30 seconds. */
  icmp?: number;
}

/** The response of a RoutingInfoModel list operation. */
export interface RoutingInfoModelListResult {
  /** The RoutingInfoModel items on this page */
  value: RoutingInfoModel[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** An IPv4 route. */
export interface Ipv4Route {
  /** The destination IPv4 prefix. */
  destination?: string;
  /** A list of next hops for the destination. */
  nextHops?: Ipv4RouteNextHop[];
}

/** The next hop in an IPv4 route. */
export interface Ipv4RouteNextHop {
  /** The next hop address. */
  address?: string;
  /** The priority of this next hop. Next hops with lower preference values are preferred. */
  priority?: number;
}

/** Attached data networks and their IPv4 routes. */
export interface UserPlaneDataRoutesItem {
  /** Reference to an attached data network resource. */
  attachedDataNetwork?: AttachedDataNetworkResourceId;
  /** A list of IPv4 routes. */
  routes?: Ipv4Route[];
}

/** Reference to an attached data network resource. */
export interface AttachedDataNetworkResourceId {
  /** Attached data network resource ID. */
  id: string;
}

/** The response of a UeInfo list operation. */
export interface UeInfoListResult {
  /** The UeInfo items on this page */
  value: UeInfo[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** DNN and UE IP address */
export interface DnnIpPair {
  /** Data network name */
  dnn?: string;
  /** UE IP address */
  ueIpAddress?: UeIpAddress;
}

/** UE IP address */
export interface UeIpAddress {
  /** IPv4 address. */
  ipV4Addr?: string;
}

/** Extended UE Information Properties. */
export interface ExtendedUeInfoProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  ratType: "4G" | "5G";
  /** The timestamp of last UE info read from the packet core (UTC). */
  lastReadAt?: Date;
}

/** The SIMs to clone. */
export interface SimClone {
  /** The SIM Group where the SIMs should be cloned. */
  targetSimGroupId?: SimGroupResourceId;
  /** A list of SIM resource names to be cloned. */
  sims?: string[];
}

/** Reference to a SIM group resource. */
export interface SimGroupResourceId {
  /** SIM group resource ID. */
  id: string;
}

/** The SIMs to delete. */
export interface SimDeleteList {
  /** A list of SIM resource names to delete. */
  sims?: string[];
}

/** The SIMs to move. */
export interface SimMove {
  /** The SIM Group where the SIMs should be moved. */
  targetSimGroupId?: SimGroupResourceId;
  /** A list of SIM resource names to be moved. */
  sims?: string[];
}

/** The response of a Sim list operation. */
export interface SimListResult {
  /** The Sim items on this page */
  value: Sim[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** Common SIM properties. */
export interface CommonSimPropertiesFormat {
  /**
   * The provisioning state of the SIM resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The state of the SIM resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly simState?: SimState;
  /**
   * A dictionary of sites to the provisioning state of this SIM on that site.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly siteProvisioningState?: {
    [propertyName: string]: SiteProvisioningState;
  };
  /** The international mobile subscriber identity (IMSI) for the SIM. */
  internationalMobileSubscriberIdentity: string;
  /** The integrated circuit card ID (ICCID) for the SIM. */
  integratedCircuitCardIdentifier?: string;
  /** An optional free-form text field that can be used to record the device type this SIM is associated with, for example 'Video camera'. The Azure portal allows SIMs to be grouped and filtered based on this value. */
  deviceType?: string;
  /** The SIM policy used by this SIM. The SIM policy must be in the same location as the SIM. */
  simPolicy?: SimPolicyResourceId;
  /** A list of static IP addresses assigned to this SIM. Each address is assigned at a defined network scope, made up of {attached data network, slice}. */
  staticIpConfiguration?: SimStaticIpProperties[];
  /**
   * The name of the SIM vendor who provided this SIM, if any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly vendorName?: string;
  /**
   * The public key fingerprint of the SIM vendor who provided this SIM, if any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly vendorKeyFingerprint?: string;
}

/** Reference to a SIM policy resource. */
export interface SimPolicyResourceId {
  /** SIM policy resource ID. */
  id: string;
}

/** Static IP configuration for a SIM, scoped to a particular attached data network and slice. */
export interface SimStaticIpProperties {
  /** The attached data network on which the static IP address will be used. The combination of attached data network and slice defines the network scope of the IP address. The attached data network must be in the same location as the SIM. */
  attachedDataNetwork?: AttachedDataNetworkResourceId;
  /** The network slice on which the static IP address will be used. The combination of attached data network and slice defines the network scope of the IP address. The slice must be in the same location as the SIM. */
  slice?: SliceResourceId;
  /** The static IP configuration for the SIM to use at the defined network scope. */
  staticIp?: SimStaticIpPropertiesStaticIp;
}

/** The static IP configuration for the SIM to use at the defined network scope. */
export interface SimStaticIpPropertiesStaticIp {
  /** The IPv4 address assigned to the SIM at this network scope. This address must be in the userEquipmentStaticAddressPoolPrefix defined in the attached data network. */
  ipv4Address?: string;
}

/** The SIMs to upload. The SIM credentials must be encrypted. */
export interface EncryptedSimUploadList {
  /** The upload file format version. */
  version: number;
  /** An identifier for the Azure SIM onboarding public key used for encrypted upload. */
  azureKeyIdentifier: number;
  /** The fingerprint of the SIM vendor public key. The private counterpart is used for signing the encrypted transport key. */
  vendorKeyFingerprint: string;
  /** The transport key used for encrypting SIM credentials, encrypted using the SIM onboarding public key. */
  encryptedTransportKey: string;
  /** The encrypted transport key, signed using the SIM vendor private key. */
  signedTransportKey: string;
  /** A list of SIMs to upload, with encrypted properties. */
  sims: SimNameAndEncryptedProperties[];
}

/** SIM name and encrypted properties. */
export interface SimNameAndEncryptedProperties {
  /** The name of the SIM. */
  name: string;
  /**
   * The provisioning state of the SIM resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The state of the SIM resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly simState?: SimState;
  /**
   * A dictionary of sites to the provisioning state of this SIM on that site.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly siteProvisioningState?: {
    [propertyName: string]: SiteProvisioningState;
  };
  /** The international mobile subscriber identity (IMSI) for the SIM. */
  internationalMobileSubscriberIdentity: string;
  /** The integrated circuit card ID (ICCID) for the SIM. */
  integratedCircuitCardIdentifier?: string;
  /** An optional free-form text field that can be used to record the device type this SIM is associated with, for example 'Video camera'. The Azure portal allows SIMs to be grouped and filtered based on this value. */
  deviceType?: string;
  /** The SIM policy used by this SIM. The SIM policy must be in the same location as the SIM. */
  simPolicy?: SimPolicyResourceId;
  /** A list of static IP addresses assigned to this SIM. Each address is assigned at a defined network scope, made up of {attached data network, slice}. */
  staticIpConfiguration?: SimStaticIpProperties[];
  /**
   * The name of the SIM vendor who provided this SIM, if any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly vendorName?: string;
  /**
   * The public key fingerprint of the SIM vendor who provided this SIM, if any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly vendorKeyFingerprint?: string;
  /** The encrypted SIM credentials. */
  encryptedCredentials?: string;
}

/** The SIMs to upload. */
export interface SimUploadList {
  /** A list of SIMs to upload. */
  sims: SimNameAndProperties[];
}

/** SIM name and properties. */
export interface SimNameAndProperties {
  /** The name of the SIM. */
  name: string;
  /**
   * The provisioning state of the SIM resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The state of the SIM resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly simState?: SimState;
  /**
   * A dictionary of sites to the provisioning state of this SIM on that site.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly siteProvisioningState?: {
    [propertyName: string]: SiteProvisioningState;
  };
  /** The international mobile subscriber identity (IMSI) for the SIM. */
  internationalMobileSubscriberIdentity: string;
  /** The integrated circuit card ID (ICCID) for the SIM. */
  integratedCircuitCardIdentifier?: string;
  /** An optional free-form text field that can be used to record the device type this SIM is associated with, for example 'Video camera'. The Azure portal allows SIMs to be grouped and filtered based on this value. */
  deviceType?: string;
  /** The SIM policy used by this SIM. The SIM policy must be in the same location as the SIM. */
  simPolicy?: SimPolicyResourceId;
  /** A list of static IP addresses assigned to this SIM. Each address is assigned at a defined network scope, made up of {attached data network, slice}. */
  staticIpConfiguration?: SimStaticIpProperties[];
  /**
   * The name of the SIM vendor who provided this SIM, if any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly vendorName?: string;
  /**
   * The public key fingerprint of the SIM vendor who provided this SIM, if any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly vendorKeyFingerprint?: string;
  /** The Ki value for the SIM. */
  authenticationKey?: string;
  /** The Opc value for the SIM. */
  operatorKeyCode?: string;
}

/** The type used for updating tags in SmfDeploymentResource resources. */
export interface SmfDeploymentResourceTagsUpdate {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
}

/** The type used for updating tags in UpfDeploymentResource resources. */
export interface UpfDeploymentResourceTagsUpdate {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
}

/** AMF identifier. */
export interface AmfId {
  /** AMF pointer. */
  pointer: number;
  /** AMF region identifier. */
  regionId: number;
  /** AMF set identifier. */
  setId: number;
}

/** gNodeB identifier. */
export interface GNbId {
  /** Bit length. */
  bitLength?: number;
  /** gNodeB value. */
  gNBValue?: string;
}

/** Global RAN Node ID. */
export interface GlobalRanNodeId {
  /** eNodeB identifier. */
  eNbId?: string;
  /** gNodeB identifier. */
  gNbId?: GNbId;
  /** N3 IWF identifier. */
  n3IwfId?: string;
  /** NG-eNodeB identifier. */
  ngeNbId?: string;
  /** Network identifier. */
  nid?: string;
  /** PLMN Identifier. */
  plmnId: PlmnId;
  /** TNGF identifier. */
  tngfId?: string;
  /** W-AGF identifier. */
  wagfId?: string;
}

/** Globally Unique Temporary Identifier (4G). */
export interface Guti4G {
  /** MME identifier. */
  mmeId: MmeId;
  /** MME Temporary Mobile Subscriber Identity. */
  mTmsi: number;
  /** PLMN Identifier. */
  plmn: PlmnId;
}

/** MME identifier. */
export interface MmeId {
  /** MME code. */
  code: number;
  /** MME group identifier. */
  groupId: number;
}

/** Globally Unique Temporary Identifier (5G). */
export interface Guti5G {
  /** AMF identifier. */
  amfId: AmfId;
  /** 5G Temporary Mobile Subscriber Identity. */
  fivegTmsi: number;
  /** PLMN Identifier. */
  plmn: PlmnId;
}

/** UE Connection Info for 4G. */
export interface UeConnectionInfo4G {
  /** eNodeB S1AP identifier. */
  enbS1ApId: number;
  /** Global RAN Node ID. */
  globalRanNodeId: GlobalRanNodeId;
  /** The timestamp of last activity of UE (UTC). */
  lastActivityTime?: Date;
  /** Last Visited TAI. */
  lastVisitedTai?: string;
  /** UE Location Info properties. */
  locationInfo?: UeLocationInfo;
  /** MME S1AP identifier. */
  mmeS1ApId: number;
  /** Per-UE transport network layer association. */
  perUeTnla?: string;
  /** Radio connection establishment cause. */
  rrcEstablishmentCause: RrcEstablishmentCause;
  /** State of the UE. */
  ueState: UeState;
  /** The UE's usage setting. */
  ueUsageSetting?: UeUsageSetting;
}

/** UE Location Info properties. */
export interface UeLocationInfo {
  /** Location Type. */
  locationType: string;
  /** PLMN Identifier. */
  plmn: PlmnId;
  /** Type Allocation Code of UE. */
  tac: string;
}

/** UE Connection Info for 5G. */
export interface UeConnectionInfo5G {
  /** Allowed Network Slice Selection Assistance Information. */
  allowedNssai?: Snssai[];
  /** The AMF UE NGAP ID. */
  amfUeNgapId: number;
  /** Global RAN Node ID. */
  globalRanNodeId: GlobalRanNodeId;
  /** The timestamp of last activity of UE (UTC). */
  lastActivityTime?: Date;
  /** Last Visited TAI. */
  lastVisitedTai?: string;
  /** UE Location Info properties. */
  locationInfo?: UeLocationInfo;
  /** Per-UE transport network layer association. */
  perUeTnla?: string;
  /** The RAN UE NGAP ID. */
  ranUeNgapId: number;
  /** Radio connection establishment cause. */
  rrcEstablishmentCause: RrcEstablishmentCause;
  /** State of the UE. */
  ueState: UeState;
  /** The UE's usage setting. */
  ueUsageSetting?: UeUsageSetting;
}

/** UE Information properties for 4G. */
export interface UeInfo4GProperties {
  /** UE Connection Info for 4G. */
  connectionInfo?: UeConnectionInfo4G;
  /** Globally Unique Temporary Identifier (4G). */
  guti: Guti4G;
  /** International mobile equipment identity. */
  imei?: string;
  /** International mobile equipment identity – software version. */
  imeisv?: string;
  /** International mobile subscriber identifier. */
  imsi: string;
  /** UE Session Info for 4G. */
  sessionInfo?: UeSessionInfo4G[];
}

/** UE Session Info for 4G. */
export interface UeSessionInfo4G {
  /** Access point name. */
  apn: string;
  /** EPS bearer identifier. */
  ebi: number;
  /** Packet Data Network Type. */
  pdnType: PdnType;
  /** UE IP address. */
  ueIpAddress: UeIpAddress;
}

/** UE Information properties for 5G. */
export interface UeInfo5GProperties {
  /** UE Connection Info for 5G. */
  connectionInfo?: UeConnectionInfo5G;
  /** Globally Unique Temporary Identifier (5G). */
  fivegGuti: Guti5G;
  /** Permanent Equipment Identifier. */
  pei?: string;
  /** UE Session Info for 5G. */
  sessionInfo?: UeSessionInfo5G[];
  /** Subscription Permanent Identifier. */
  supi: string;
}

/** UE Session Info for 5G. */
export interface UeSessionInfo5G {
  /** Aggregate maximum bit rate. */
  ambr: Ambr;
  /** Data network name. */
  dnn: string;
  /** Packet Data Network Type. */
  pdnType: PdnType;
  /** PDU session identifier. */
  pduSessionId: number;
  /** QoS Flow. */
  qosFlow: UeQOSFlow[];
  /** Single-network slice selection assistance information (S-NSSAI). */
  snssai: Snssai;
  /** UE IP address. */
  ueIpAddress: UeIpAddress;
}

/** QoS Flow. */
export interface UeQOSFlow {
  /** 5G QoS Identifier. */
  fiveqi: number;
  /** Guaranteed Bit Rate. */
  gbr?: Ambr;
  /** Maximum Bit Rate. */
  mbr?: Ambr;
  /** Qos Flow Identifier. */
  qfi: number;
}

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export interface ProxyResource extends Resource {}

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export interface TrackedResource extends Resource {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The geo-location where the resource lives */
  location: string;
}

/** AKS Cluster specific data. */
export interface ClusterServiceAksClusterData
  extends ClusterServiceClusterTypeSpecificData {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "Aks";
}

/** Nexus AKS Cluster specific data. */
export interface ClusterServiceNexusAksClusterData
  extends ClusterServiceClusterTypeSpecificData {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "NexusAks";
}

/** Configuration relating to a particular PLMN */
export interface PublicLandMobileNetwork extends PlmnId {
  /** Configuration relating to SUPI concealment. */
  homeNetworkPublicKeys?: PublicLandMobileNetworkHomeNetworkPublicKeys;
}

/** Data flow policy rule QoS policy */
export interface PccRuleQosPolicy extends QosPolicy {
  /** The guaranteed bit rate (GBR) for all service data flows that use this data flow policy rule. This is an optional setting. If you do not provide a value, there will be no GBR set for the data flow policy rule that uses this QoS definition. */
  guaranteedBitRate?: Ambr;
}

/** UE Information for 4G. */
export interface UeInfo4G extends ExtendedUeInfoProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  ratType: "4G";
  /** UE Information properties for 4G. */
  info: UeInfo4GProperties;
}

/** UE Information for 5G. */
export interface UeInfo5G extends ExtendedUeInfoProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  ratType: "5G";
  /** UE Information properties for 5G. */
  info: UeInfo5GProperties;
}

/** SIM properties. */
export interface SimPropertiesFormat extends CommonSimPropertiesFormat {
  /** The Ki value for the SIM. */
  authenticationKey?: string;
  /** The Opc value for the SIM. */
  operatorKeyCode?: string;
}

/** Encrypted SIM properties. */
export interface EncryptedSimPropertiesFormat
  extends CommonSimPropertiesFormat {
  /** The encrypted SIM credentials. */
  encryptedCredentials?: string;
}

/** Packet core control plane version resource. */
export interface PacketCoreControlPlaneVersion extends ProxyResource {
  /**
   * The provisioning state of the packet core control plane version resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** Platform specific packet core control plane version properties. */
  platforms?: Platform[];
}

/** Diagnostics package resource. */
export interface DiagnosticsPackage extends ProxyResource {
  /**
   * The provisioning state of the diagnostics package resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The status of the diagnostics package collection.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: DiagnosticsPackageStatus;
  /**
   * The reason for the current state of the diagnostics package collection.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly reason?: string;
}

/** Packet capture session resource. */
export interface PacketCapture extends ProxyResource {
  /**
   * The provisioning state of the packet capture session resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The status of the packet capture session.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: PacketCaptureStatus;
  /**
   * The reason the current packet capture session state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly reason?: string;
  /**
   * The start time of the packet capture session.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly captureStartTime?: Date;
  /** List of network interfaces to capture on. */
  networkInterfaces?: string[];
  /** Number of bytes captured per packet, the remaining bytes are truncated. The default "0" means the entire packet is captured. */
  bytesToCapturePerPacket?: number;
  /** Maximum size of the capture output. */
  totalBytesPerSession?: number;
  /** Maximum duration of the capture session in seconds. */
  timeLimitInSeconds?: number;
  /**
   * The list of output files of a packet capture session.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly outputFiles?: string[];
}

/** Routing information */
export interface RoutingInfoModel extends ProxyResource {
  /** A list of IPv4 control plane access routes. */
  controlPlaneAccessRoutes?: Ipv4Route[];
  /** A list of IPv4 user plane access routes. */
  userPlaneAccessRoutes?: Ipv4Route[];
  /** A list of attached data networks and their IPv4 routes. */
  userPlaneDataRoutes?: UserPlaneDataRoutesItem[];
}

/** Basic UE Information. */
export interface UeInfo extends ProxyResource {
  /** RAT Type */
  ratType?: RatType;
  /** State of the UE. */
  ueState?: UeState;
  /** List of DNN and UE IP addresses. */
  ueIpAddresses?: DnnIpPair[];
  /** The timestamp of last list UEs call to the packet core (UTC). */
  lastReadAt?: Date;
}

/** Extended User Equipment (UE) information. */
export interface ExtendedUeInfo extends ProxyResource {
  /** RAT Type */
  ratType?: RatType;
  /** The timestamp of last UE info read from the packet core (UTC). */
  lastReadAt?: Date;
}

/** SIM resource. */
export interface Sim extends ProxyResource {
  /**
   * The provisioning state of the SIM resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The state of the SIM resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly simState?: SimState;
  /**
   * A dictionary of sites to the provisioning state of this SIM on that site.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly siteProvisioningState?: {
    [propertyName: string]: SiteProvisioningState;
  };
  /** The international mobile subscriber identity (IMSI) for the SIM. */
  internationalMobileSubscriberIdentity?: string;
  /** The integrated circuit card ID (ICCID) for the SIM. */
  integratedCircuitCardIdentifier?: string;
  /** An optional free-form text field that can be used to record the device type this SIM is associated with, for example 'Video camera'. The Azure portal allows SIMs to be grouped and filtered based on this value. */
  deviceType?: string;
  /** The SIM policy used by this SIM. The SIM policy must be in the same location as the SIM. */
  simPolicy?: SimPolicyResourceId;
  /** A list of static IP addresses assigned to this SIM. Each address is assigned at a defined network scope, made up of {attached data network, slice}. */
  staticIpConfiguration?: SimStaticIpProperties[];
  /**
   * The name of the SIM vendor who provided this SIM, if any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly vendorName?: string;
  /**
   * The public key fingerprint of the SIM vendor who provided this SIM, if any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly vendorKeyFingerprint?: string;
  /** The Ki value for the SIM. */
  authenticationKey?: string;
  /** The Opc value for the SIM. */
  operatorKeyCode?: string;
}

/** Azure for Operators 5G Core Access and Mobility Function (AMF) Deployment Resource */
export interface AmfDeploymentResource extends TrackedResource {
  /**
   * The status of the last operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** Azure for Operators 5G Core AMF component parameters */
  componentParameters?: string;
  /** Azure for Operators 5G Core AMF secrets parameters */
  secretsParameters?: string;
  /** Reference to cluster where the Network Function is deployed */
  clusterService?: string;
  /**
   * Release version. This is inherited from the cluster
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly releaseVersion?: string;
  /**
   * Operational status
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operationalStatus?: OperationalStatus;
}

/** Azure for Operators 5G Core Cluster Service Resource */
export interface ClusterServiceResource extends TrackedResource {
  /**
   * The status of the last operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** Cluster type (Lab or Production) */
  deploymentType?: SkuDeploymentType;
  /** Azure for Operators 5G Core Release Version.  This is applied to all platform as a service (PaaS) components and running workloads in this cluster */
  releaseVersion?: string;
  /** Cluster type specific data.  Contents depend on the cluster type */
  clusterTypeSpecificData?: ClusterServiceClusterTypeSpecificDataUnion;
  /** Azure for Operators 5G Core Local PaaS component parameters.  One set per component type */
  componentParameters?: QualifiedComponentDeploymentParameters[];
  /**
   * Operational status
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operationalStatus?: OperationalStatus;
}

/** Mobile network resource. */
export interface MobileNetwork extends TrackedResource {
  /** The identity used to retrieve any private keys used for SUPI concealment from Azure key vault. */
  identity?: ManagedServiceIdentity;
  /**
   * The provisioning state of the mobile network resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** The unique public land mobile network identifier for the network. If both 'publicLandMobileNetworks' and 'publicLandMobileNetworkIdentifier' are specified, then the 'publicLandMobileNetworks' will take precedence. */
  publicLandMobileNetworkIdentifier?: PlmnId;
  /** A list of public land mobile networks including their identifiers. If both 'publicLandMobileNetworks' and 'publicLandMobileNetworkIdentifier' are specified, then the 'publicLandMobileNetworks' will take precedence. */
  publicLandMobileNetworks?: PublicLandMobileNetwork[];
  /**
   * The mobile network resource identifier
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly serviceKey?: string;
}

/** Azure for Operators 5G Core Network Repository Function (NRF) Deployment Resource */
export interface NrfDeploymentResource extends TrackedResource {
  /**
   * The status of the last operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** Azure for Operators 5G Core NRF component parameters */
  componentParameters?: string;
  /** Azure for Operators 5G Core NRF secrets parameters */
  secretsParameters?: string;
  /** Reference to cluster where the Network Function is deployed */
  clusterService?: string;
  /**
   * Release version. This is inherited from the cluster
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly releaseVersion?: string;
  /**
   * Operational status
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operationalStatus?: OperationalStatus;
}

/** Azure for Operators 5G Core Network Slice Selection Function (NSSF) Deployment Resource */
export interface NssfDeploymentResource extends TrackedResource {
  /**
   * The status of the last operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** Azure for Operators 5G Core NSSF component parameters */
  componentParameters?: string;
  /** Azure for Operators 5G Core NSSF secrets parameters */
  secretsParameters?: string;
  /** Reference to cluster where the Network Function is deployed */
  clusterService?: string;
  /**
   * Release version. This is inherited from the cluster
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly releaseVersion?: string;
  /**
   * Operational status
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operationalStatus?: OperationalStatus;
}

/** Azure for Operators 5G Core Observability Service Resource */
export interface ObservabilityServiceResource extends TrackedResource {
  /**
   * The status of the last operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** Azure for Operators 5G Core Observability component parameters.  One set per component type */
  componentParameters?: QualifiedComponentDeploymentParameters[];
  /** Reference to cluster where the observability components are deployed */
  clusterService?: string;
  /**
   * Release version. This is inherited from the cluster
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly releaseVersion?: string;
  /**
   * Operational status
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operationalStatus?: OperationalStatus;
}

/** Packet core control plane resource. */
export interface PacketCoreControlPlane extends TrackedResource {
  /** The identity used to retrieve the ingress certificate from Azure key vault. */
  identity?: ManagedServiceIdentity;
  /**
   * The provisioning state of the packet core control plane resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** The installation state of the packet core control plane resource. */
  installation?: Installation;
  /** Site(s) under which this packet core control plane should be deployed. The sites must be in the same location as the packet core control plane. */
  sites?: SiteResourceId[];
  /** The platform where the packet core is deployed. */
  platform?: PlatformConfiguration;
  /** The core network technology generation (5G core or EPC / 4G core). */
  coreNetworkTechnology?: CoreNetworkType;
  /** The desired version of the packet core software. */
  version?: string;
  /**
   * The currently installed version of the packet core software.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly installedVersion?: string;
  /**
   * The previous version of the packet core software that was deployed. Used when performing the rollback action.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly rollbackVersion?: string;
  /** The control plane interface on the access network. For 5G networks, this is the N2 interface. For 4G networks, this is the S1-MME interface. */
  controlPlaneAccessInterface?: InterfaceProperties;
  /** The virtual IP address(es) for the control plane on the access network in a High Availability (HA) system. In an HA deployment the access network router should be configured to anycast traffic for this address to the control plane access interfaces on the active and standby nodes. In non-HA system this list should be omitted or empty. */
  controlPlaneAccessVirtualIpv4Addresses?: string[];
  /** The SKU defining the throughput and SIM allowances for this packet core control plane deployment. */
  sku?: BillingSku;
  /** The MTU (in bytes) signaled to the UE. The same MTU is set on the user plane data links for all data networks. The MTU set on the user plane access link is calculated to be 60 bytes greater than this value to allow for GTP encapsulation. */
  ueMtu?: number;
  /** The kubernetes ingress configuration to control access to packet core diagnostics over local APIs. */
  localDiagnosticsAccess?: LocalDiagnosticsAccessConfiguration;
  /** Configuration for uploading packet core diagnostics */
  diagnosticsUpload?: DiagnosticsUploadConfiguration;
  /** Configuration for sending packet core events to an Azure Event Hub. */
  eventHub?: EventHubConfiguration;
  /** Signaling configuration for the packet core. */
  signaling?: SignalingConfiguration;
  /** Settings to allow interoperability with third party components e.g. RANs and UEs. */
  interopSettings?: Record<string, unknown>;
  /**
   * The provisioning state of the secret containing private keys and keyIds for SUPI concealment.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly homeNetworkPrivateKeysProvisioning?: HomeNetworkPrivateKeysProvisioning;
  /** The user consent configuration for the packet core. */
  userConsent?: UserConsentConfiguration;
}

/** SIM group resource. */
export interface SimGroup extends TrackedResource {
  /** The identity used to retrieve the encryption key from Azure key vault. */
  identity?: ManagedServiceIdentity;
  /**
   * The provisioning state of the SIM group resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** A key to encrypt the SIM data that belongs to this SIM group. */
  encryptionKey?: KeyVaultKey;
  /** Mobile network that this SIM group belongs to. The mobile network must be in the same location as the SIM group. */
  mobileNetwork?: MobileNetworkResourceId;
}

/** Azure for Operators 5G Core Session Management Function (SMF) Deployment Resource */
export interface SmfDeploymentResource extends TrackedResource {
  /**
   * The status of the last operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** Azure for Operators 5G Core SMF component parameters */
  componentParameters?: string;
  /** Azure for Operators 5G Core SMF secrets parameters */
  secretsParameters?: string;
  /** Reference to cluster where the Network Function is deployed */
  clusterService?: string;
  /**
   * Release version. This is inherited from the cluster
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly releaseVersion?: string;
  /**
   * Operational status
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operationalStatus?: OperationalStatus;
}

/** Azure for Operators 5G Core User Plane Function (UPF) Deployment Resource */
export interface UpfDeploymentResource extends TrackedResource {
  /**
   * The status of the last operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** Azure for Operators 5G Core UPF component parameters */
  componentParameters?: string;
  /** Azure for Operators 5G Core F secrets parameters */
  secretsParameters?: string;
  /** Reference to cluster where the Network Function is deployed */
  clusterService?: string;
  /**
   * Release version. This is inherited from the cluster
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly releaseVersion?: string;
  /**
   * Operational status
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operationalStatus?: OperationalStatus;
}

/** Data network resource. Must be created in the same location as its parent mobile network. */
export interface DataNetwork extends TrackedResource {
  /**
   * The provisioning state of the data network resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** An optional description for this data network. */
  description?: string;
}

/** Service resource. Must be created in the same location as its parent mobile network. */
export interface Service extends TrackedResource {
  /**
   * The provisioning state of the service resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** A precedence value that is used to decide between services when identifying the QoS values to use for a particular SIM. A lower value means a higher priority. This value should be unique among all services configured in the mobile network. */
  servicePrecedence?: number;
  /** The QoS policy to use for packets matching this service. This can be overridden for particular flows using the ruleQosPolicy field in a PccRuleConfiguration. If this field is null then the UE's SIM policy will define the QoS settings. */
  serviceQosPolicy?: QosPolicy;
  /** The set of data flow policy rules that make up this service. */
  pccRules?: PccRuleConfiguration[];
}

/** SIM policy resource. */
export interface SimPolicy extends TrackedResource {
  /**
   * The provisioning state of the SIM policy resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * A dictionary of sites to the provisioning state of this SIM policy on that site.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly siteProvisioningState?: {
    [propertyName: string]: SiteProvisioningState;
  };
  /** Aggregate maximum bit rate across all non-GBR QoS flows of all PDU sessions of a given UE. See 3GPP TS23.501 section 5.7.2.6 for a full description of the UE-AMBR. */
  ueAmbr?: Ambr;
  /** The default slice to use if the UE does not explicitly specify it. This slice must exist in the `sliceConfigurations` map. The slice must be in the same location as the SIM policy. */
  defaultSlice?: SliceResourceId;
  /** RAT/Frequency Selection Priority Index, defined in 3GPP TS 36.413. This is an optional setting and by default is unspecified. */
  rfspIndex?: number;
  /** UE periodic registration update timer (5G) or UE periodic tracking area update timer (4G), in seconds. */
  registrationTimer?: number;
  /** The allowed slices and the settings to use for them. The list must not contain duplicate items and must contain at least one item. */
  sliceConfigurations?: SliceConfiguration[];
}

/** Site resource. Must be created in the same location as its parent mobile network. */
export interface Site extends TrackedResource {
  /**
   * The provisioning state of the site resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * An array of IDs of the network functions deployed in the site. Deleting the site will delete any network functions that are deployed in the site.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkFunctions?: SubResource[];
}

/** Network slice resource. Must be created in the same location as its parent mobile network. */
export interface Slice extends TrackedResource {
  /**
   * The provisioning state of the network slice resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** Single-network slice selection assistance information (S-NSSAI). Unique at the scope of a mobile network. */
  snssai?: Snssai;
  /** An optional description for this network slice. */
  description?: string;
}

/** Packet core data plane resource. Must be created in the same location as its parent packet core control plane. */
export interface PacketCoreDataPlane extends TrackedResource {
  /**
   * The provisioning state of the packet core data plane resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** The user plane interface on the access network. For 5G networks, this is the N3 interface. For 4G networks, this is the S1-U interface. */
  userPlaneAccessInterface?: InterfaceProperties;
  /** The virtual IP address(es) for the user plane on the access network in a High Availability (HA) system. In an HA deployment the access network router should be configured to forward traffic for this address to the control plane access interface on the active or standby node. In non-HA system this list should be omitted or empty. */
  userPlaneAccessVirtualIpv4Addresses?: string[];
}

/** Attached data network resource. Must be created in the same location as its parent packet core data plane. */
export interface AttachedDataNetwork extends TrackedResource {
  /**
   * The provisioning state of the attached data network resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** The user plane interface on the data network. For 5G networks, this is the N6 interface. For 4G networks, this is the SGi interface. */
  userPlaneDataInterface?: InterfaceProperties;
  /** The DNS servers to signal to UEs to use for this attached data network. This configuration is mandatory - if you don't want DNS servers, you must provide an empty array. */
  dnsAddresses?: string[];
  /**
   * The network address and port translation (NAPT) configuration.
   * If this is not specified, the attached data network will use a default NAPT configuration with NAPT enabled.
   */
  naptConfiguration?: NaptConfiguration;
  /**
   * The user equipment (UE) address pool prefixes for the attached data network from which the packet core instance will dynamically assign IP addresses to UEs.
   * The packet core instance assigns an IP address to a UE when the UE sets up a PDU session.
   *  You must define at least one of userEquipmentAddressPoolPrefix and userEquipmentStaticAddressPoolPrefix. If you define both, they must be of the same size.
   */
  userEquipmentAddressPoolPrefix?: string[];
  /**
   * The user equipment (UE) address pool prefixes for the attached data network from which the packet core instance will assign static IP addresses to UEs.
   * The packet core instance assigns an IP address to a UE when the UE sets up a PDU session. The static IP address for a specific UE is set in StaticIPConfiguration on the corresponding SIM resource.
   * At least one of userEquipmentAddressPoolPrefix and userEquipmentStaticAddressPoolPrefix must be defined. If both are defined, they must be of the same size.
   */
  userEquipmentStaticAddressPoolPrefix?: string[];
}

/** Defines headers for AmfDeployments_createOrUpdate operation. */
export interface AmfDeploymentsCreateOrUpdateHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for AmfDeployments_delete operation. */
export interface AmfDeploymentsDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for ClusterServices_createOrUpdate operation. */
export interface ClusterServicesCreateOrUpdateHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for ClusterServices_delete operation. */
export interface ClusterServicesDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for MobileNetworks_createOrUpdate operation. */
export interface MobileNetworksCreateOrUpdateHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for MobileNetworks_delete operation. */
export interface MobileNetworksDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for NrfDeployments_createOrUpdate operation. */
export interface NrfDeploymentsCreateOrUpdateHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for NrfDeployments_delete operation. */
export interface NrfDeploymentsDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for NssfDeployments_createOrUpdate operation. */
export interface NssfDeploymentsCreateOrUpdateHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for NssfDeployments_delete operation. */
export interface NssfDeploymentsDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for ObservabilityServices_createOrUpdate operation. */
export interface ObservabilityServicesCreateOrUpdateHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for ObservabilityServices_delete operation. */
export interface ObservabilityServicesDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for PacketCoreControlPlanes_createOrUpdate operation. */
export interface PacketCoreControlPlanesCreateOrUpdateHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for PacketCoreControlPlanes_delete operation. */
export interface PacketCoreControlPlanesDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for PacketCoreControlPlanes_collectDiagnosticsPackage operation. */
export interface PacketCoreControlPlanesCollectDiagnosticsPackageHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for PacketCoreControlPlanes_reinstall operation. */
export interface PacketCoreControlPlanesReinstallHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for PacketCoreControlPlanes_rollback operation. */
export interface PacketCoreControlPlanesRollbackHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for SimGroups_createOrUpdate operation. */
export interface SimGroupsCreateOrUpdateHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for SimGroups_delete operation. */
export interface SimGroupsDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for SmfDeployments_createOrUpdate operation. */
export interface SmfDeploymentsCreateOrUpdateHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for SmfDeployments_delete operation. */
export interface SmfDeploymentsDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for UpfDeployments_createOrUpdate operation. */
export interface UpfDeploymentsCreateOrUpdateHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for UpfDeployments_delete operation. */
export interface UpfDeploymentsDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for DataNetworks_createOrUpdate operation. */
export interface DataNetworksCreateOrUpdateHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for DataNetworks_delete operation. */
export interface DataNetworksDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Services_createOrUpdate operation. */
export interface ServicesCreateOrUpdateHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Services_delete operation. */
export interface ServicesDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for SimPolicies_createOrUpdate operation. */
export interface SimPoliciesCreateOrUpdateHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for SimPolicies_delete operation. */
export interface SimPoliciesDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Sites_createOrUpdate operation. */
export interface SitesCreateOrUpdateHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Sites_delete operation. */
export interface SitesDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Sites_deletePacketCore operation. */
export interface SitesDeletePacketCoreHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Slices_createOrUpdate operation. */
export interface SlicesCreateOrUpdateHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Slices_delete operation. */
export interface SlicesDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for DiagnosticsPackages_createOrUpdate operation. */
export interface DiagnosticsPackagesCreateOrUpdateHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for DiagnosticsPackages_delete operation. */
export interface DiagnosticsPackagesDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for PacketCaptures_createOrUpdate operation. */
export interface PacketCapturesCreateOrUpdateHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for PacketCaptures_delete operation. */
export interface PacketCapturesDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for PacketCaptures_stop operation. */
export interface PacketCapturesStopHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for PacketCoreDataPlanes_createOrUpdate operation. */
export interface PacketCoreDataPlanesCreateOrUpdateHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for PacketCoreDataPlanes_delete operation. */
export interface PacketCoreDataPlanesDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for AttachedDataNetworks_createOrUpdate operation. */
export interface AttachedDataNetworksCreateOrUpdateHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for AttachedDataNetworks_delete operation. */
export interface AttachedDataNetworksDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Sims_clone operation. */
export interface SimsCloneHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Sims_bulkDelete operation. */
export interface SimsBulkDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Sims_move operation. */
export interface SimsMoveHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Sims_createOrUpdate operation. */
export interface SimsCreateOrUpdateHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Sims_delete operation. */
export interface SimsDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Sims_bulkUploadEncrypted operation. */
export interface SimsBulkUploadEncryptedHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Sims_bulkUpload operation. */
export interface SimsBulkUploadHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Known values of {@link Origin} that the service accepts. */
export enum KnownOrigin {
  /** User */
  User = "user",
  /** System */
  System = "system",
  /** UserSystem */
  UserSystem = "user,system",
}

/**
 * Defines values for Origin. \
 * {@link KnownOrigin} can be used interchangeably with Origin,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **user** \
 * **system** \
 * **user,system**
 */
export type Origin = string;

/** Known values of {@link ActionType} that the service accepts. */
export enum KnownActionType {
  /** Internal */
  Internal = "Internal",
}

/**
 * Defines values for ActionType. \
 * {@link KnownActionType} can be used interchangeably with ActionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Internal**
 */
export type ActionType = string;

/** Known values of {@link ProvisioningState} that the service accepts. */
export enum KnownProvisioningState {
  /** Resource has been created. */
  Succeeded = "Succeeded",
  /** Resource creation failed. */
  Failed = "Failed",
  /** Resource creation was canceled. */
  Canceled = "Canceled",
  /** Resource is getting provisioned */
  Provisioning = "Provisioning",
  /** Resource is updating */
  Updating = "Updating",
  /** Resource creation state is unknown. */
  Unknown = "Unknown",
  /** Resource has been accepted. */
  Accepted = "Accepted",
  /** Resource is getting deleted. */
  Deleting = "Deleting",
  /** Resource has been deleted. */
  Deleted = "Deleted",
}

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded**: Resource has been created. \
 * **Failed**: Resource creation failed. \
 * **Canceled**: Resource creation was canceled. \
 * **Provisioning**: Resource is getting provisioned \
 * **Updating**: Resource is updating \
 * **Unknown**: Resource creation state is unknown. \
 * **Accepted**: Resource has been accepted. \
 * **Deleting**: Resource is getting deleted. \
 * **Deleted**: Resource has been deleted.
 */
export type ProvisioningState = string;

/** Known values of {@link PlatformType} that the service accepts. */
export enum KnownPlatformType {
  /** If this option is chosen, you must set one of "azureStackEdgeDevice", "connectedCluster" or "customLocation". If multiple are set, they must be consistent with each other. */
  AKSHCI = "AKS-HCI",
  /** If this option is chosen, you must set one of "azureStackHciCluster", "connectedCluster" or "customLocation". If multiple are set, they must be consistent with each other. */
  ThreePAzureStackHCI = "3P-AZURE-STACK-HCI",
}

/**
 * Defines values for PlatformType. \
 * {@link KnownPlatformType} can be used interchangeably with PlatformType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AKS-HCI**: If this option is chosen, you must set one of "azureStackEdgeDevice", "connectedCluster" or "customLocation". If multiple are set, they must be consistent with each other. \
 * **3P-AZURE-STACK-HCI**: If this option is chosen, you must set one of "azureStackHciCluster", "connectedCluster" or "customLocation". If multiple are set, they must be consistent with each other.
 */
export type PlatformType = string;

/** Known values of {@link VersionState} that the service accepts. */
export enum KnownVersionState {
  /** The state of this version is unknown. */
  Unknown = "Unknown",
  /** This version is a preview and is not suitable for production use. */
  Preview = "Preview",
  /** This version is currently being validated. */
  Validating = "Validating",
  /** This version failed validation. */
  ValidationFailed = "ValidationFailed",
  /** This version is active and suitable for production use. */
  Active = "Active",
  /** This version is deprecated and is no longer supported. */
  Deprecated = "Deprecated",
}

/**
 * Defines values for VersionState. \
 * {@link KnownVersionState} can be used interchangeably with VersionState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown**: The state of this version is unknown. \
 * **Preview**: This version is a preview and is not suitable for production use. \
 * **Validating**: This version is currently being validated. \
 * **ValidationFailed**: This version failed validation. \
 * **Active**: This version is active and suitable for production use. \
 * **Deprecated**: This version is deprecated and is no longer supported.
 */
export type VersionState = string;

/** Known values of {@link RecommendedVersion} that the service accepts. */
export enum KnownRecommendedVersion {
  /** This is the recommended version to use for new packet core control plane deployments. */
  Recommended = "Recommended",
  /** This is not the recommended version to use for new packet core control plane deployments. */
  NotRecommended = "NotRecommended",
}

/**
 * Defines values for RecommendedVersion. \
 * {@link KnownRecommendedVersion} can be used interchangeably with RecommendedVersion,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Recommended**: This is the recommended version to use for new packet core control plane deployments. \
 * **NotRecommended**: This is not the recommended version to use for new packet core control plane deployments.
 */
export type RecommendedVersion = string;

/** Known values of {@link ObsoleteVersion} that the service accepts. */
export enum KnownObsoleteVersion {
  /** This version is obsolete for use in new packet core control plane deployments. */
  Obsolete = "Obsolete",
  /** This version is not obsolete for use in new packet core control plane deployments. */
  NotObsolete = "NotObsolete",
}

/**
 * Defines values for ObsoleteVersion. \
 * {@link KnownObsoleteVersion} can be used interchangeably with ObsoleteVersion,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Obsolete**: This version is obsolete for use in new packet core control plane deployments. \
 * **NotObsolete**: This version is not obsolete for use in new packet core control plane deployments.
 */
export type ObsoleteVersion = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  /** User */
  User = "User",
  /** Application */
  Application = "Application",
  /** ManagedIdentity */
  ManagedIdentity = "ManagedIdentity",
  /** Key */
  Key = "Key",
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link SkuDeploymentType} that the service accepts. */
export enum KnownSkuDeploymentType {
  /** Production Deployment */
  Production = "Production",
  /** Lab Deployment */
  Lab = "Lab",
}

/**
 * Defines values for SkuDeploymentType. \
 * {@link KnownSkuDeploymentType} can be used interchangeably with SkuDeploymentType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Production**: Production Deployment \
 * **Lab**: Lab Deployment
 */
export type SkuDeploymentType = string;

/** Known values of {@link ClusterType} that the service accepts. */
export enum KnownClusterType {
  /** Azure Kubernetes Service */
  Aks = "Aks",
  /** Azure Operator Nexus Kubernetes Service */
  NexusAks = "NexusAks",
}

/**
 * Defines values for ClusterType. \
 * {@link KnownClusterType} can be used interchangeably with ClusterType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Aks**: Azure Kubernetes Service \
 * **NexusAks**: Azure Operator Nexus Kubernetes Service
 */
export type ClusterType = string;

/** Known values of {@link ManagedServiceIdentityType} that the service accepts. */
export enum KnownManagedServiceIdentityType {
  /** No managed identity is assigned. */
  None = "None",
  /** A managed identity assigned by the user. */
  UserAssigned = "UserAssigned",
}

/**
 * Defines values for ManagedServiceIdentityType. \
 * {@link KnownManagedServiceIdentityType} can be used interchangeably with ManagedServiceIdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None**: No managed identity is assigned. \
 * **UserAssigned**: A managed identity assigned by the user.
 */
export type ManagedServiceIdentityType = string;

/** Known values of {@link DesiredInstallationState} that the service accepts. */
export enum KnownDesiredInstallationState {
  /** Don't install the packet core. */
  Uninstalled = "Uninstalled",
  /** Install the packet core. */
  Installed = "Installed",
}

/**
 * Defines values for DesiredInstallationState. \
 * {@link KnownDesiredInstallationState} can be used interchangeably with DesiredInstallationState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Uninstalled**: Don't install the packet core. \
 * **Installed**: Install the packet core.
 */
export type DesiredInstallationState = string;

/** Known values of {@link InstallationState} that the service accepts. */
export enum KnownInstallationState {
  /** The packet core is uninstalled. */
  Uninstalled = "Uninstalled",
  /** The packet core is installing. */
  Installing = "Installing",
  /** The packet core is installed. */
  Installed = "Installed",
  /** The packet core is updating its configuration. */
  Updating = "Updating",
  /** The packet core is upgrading to a different software version. */
  Upgrading = "Upgrading",
  /** The packet core is uninstalling. */
  Uninstalling = "Uninstalling",
  /** The packet core is reinstalling. */
  Reinstalling = "Reinstalling",
  /** The packet core is rolling back to its previous version. */
  RollingBack = "RollingBack",
  /** The packet core is in failed state. */
  Failed = "Failed",
}

/**
 * Defines values for InstallationState. \
 * {@link KnownInstallationState} can be used interchangeably with InstallationState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Uninstalled**: The packet core is uninstalled. \
 * **Installing**: The packet core is installing. \
 * **Installed**: The packet core is installed. \
 * **Updating**: The packet core is updating its configuration. \
 * **Upgrading**: The packet core is upgrading to a different software version. \
 * **Uninstalling**: The packet core is uninstalling. \
 * **Reinstalling**: The packet core is reinstalling. \
 * **RollingBack**: The packet core is rolling back to its previous version. \
 * **Failed**: The packet core is in failed state.
 */
export type InstallationState = string;

/** Known values of {@link ReinstallRequired} that the service accepts. */
export enum KnownReinstallRequired {
  /** A reinstall of the packet core is required. */
  Required = "Required",
  /** A reinstall of the packet core is not required. */
  NotRequired = "NotRequired",
}

/**
 * Defines values for ReinstallRequired. \
 * {@link KnownReinstallRequired} can be used interchangeably with ReinstallRequired,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Required**: A reinstall of the packet core is required. \
 * **NotRequired**: A reinstall of the packet core is not required.
 */
export type ReinstallRequired = string;

/** Known values of {@link InstallationReason} that the service accepts. */
export enum KnownInstallationReason {
  /** The packet core has not been installed as the mobile network does not have any applicable configured slices. */
  NoSlices = "NoSlices",
  /** The packet core has not been installed as there is no configured data plane for this packet core. */
  NoPacketCoreDataPlane = "NoPacketCoreDataPlane",
  /** The packet core has not been installed as the packet core has no attached data networks. */
  NoAttachedDataNetworks = "NoAttachedDataNetworks",
  /** A reinstall is required as the packet core is running with out-of-date PLMN ID. */
  PublicLandMobileNetworkIdentifierHasChanged = "PublicLandMobileNetworkIdentifierHasChanged",
  /** A reinstall is required as the packet core is running with out-of-date control plane access interface information. */
  ControlPlaneAccessInterfaceHasChanged = "ControlPlaneAccessInterfaceHasChanged",
  /** A reinstall is required as the packet core is running with out-of-date user plane core interface. */
  UserPlaneAccessInterfaceHasChanged = "UserPlaneAccessInterfaceHasChanged",
  /** A reinstall is required as the packet core is running with out-of-date user plane access interface. */
  UserPlaneDataInterfaceHasChanged = "UserPlaneDataInterfaceHasChanged",
  /** A reinstall is required as the packet core is running with out-of-date control plane access network virtual IP address. */
  ControlPlaneAccessVirtualIpv4AddressesHasChanged = "ControlPlaneAccessVirtualIpv4AddressesHasChanged",
  /** A reinstall is required as the packet core is running with out-of-date user plane access network virtual IP address. */
  UserPlaneAccessVirtualIpv4AddressesHasChanged = "UserPlaneAccessVirtualIpv4AddressesHasChanged",
}

/**
 * Defines values for InstallationReason. \
 * {@link KnownInstallationReason} can be used interchangeably with InstallationReason,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NoSlices**: The packet core has not been installed as the mobile network does not have any applicable configured slices. \
 * **NoPacketCoreDataPlane**: The packet core has not been installed as there is no configured data plane for this packet core. \
 * **NoAttachedDataNetworks**: The packet core has not been installed as the packet core has no attached data networks. \
 * **PublicLandMobileNetworkIdentifierHasChanged**: A reinstall is required as the packet core is running with out-of-date PLMN ID. \
 * **ControlPlaneAccessInterfaceHasChanged**: A reinstall is required as the packet core is running with out-of-date control plane access interface information. \
 * **UserPlaneAccessInterfaceHasChanged**: A reinstall is required as the packet core is running with out-of-date user plane core interface. \
 * **UserPlaneDataInterfaceHasChanged**: A reinstall is required as the packet core is running with out-of-date user plane access interface. \
 * **ControlPlaneAccessVirtualIpv4AddressesHasChanged**: A reinstall is required as the packet core is running with out-of-date control plane access network virtual IP address. \
 * **UserPlaneAccessVirtualIpv4AddressesHasChanged**: A reinstall is required as the packet core is running with out-of-date user plane access network virtual IP address.
 */
export type InstallationReason = string;

/** Known values of {@link BillingSku} that the service accepts. */
export enum KnownBillingSku {
  /** 100 Mbps, 20 active SIMs plan, 2 RANs */
  G0 = "G0",
  /** 1 Gbps, 100 active SIMs plan, 5 RANs */
  G1 = "G1",
  /** 2 Gbps, 200 active SIMs plan, 10 RANs */
  G2 = "G2",
  /** 5 Gbps, 500 active SIMs plan */
  G5 = "G5",
  /** 10 Gbps, 1000 active SIMs plan */
  G10 = "G10",
}

/**
 * Defines values for BillingSku. \
 * {@link KnownBillingSku} can be used interchangeably with BillingSku,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **G0**: 100 Mbps, 20 active SIMs plan, 2 RANs \
 * **G1**: 1 Gbps, 100 active SIMs plan, 5 RANs \
 * **G2**: 2 Gbps, 200 active SIMs plan, 10 RANs \
 * **G5**: 5 Gbps, 500 active SIMs plan \
 * **G10**: 10 Gbps, 1000 active SIMs plan
 */
export type BillingSku = string;

/** Known values of {@link AuthenticationType} that the service accepts. */
export enum KnownAuthenticationType {
  /** Use AAD SSO to authenticate the user (this requires internet access). */
  AAD = "AAD",
  /** Use locally stored passwords to authenticate the user. */
  Password = "Password",
}

/**
 * Defines values for AuthenticationType. \
 * {@link KnownAuthenticationType} can be used interchangeably with AuthenticationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AAD**: Use AAD SSO to authenticate the user (this requires internet access). \
 * **Password**: Use locally stored passwords to authenticate the user.
 */
export type AuthenticationType = string;

/** Known values of {@link CertificateProvisioningState} that the service accepts. */
export enum KnownCertificateProvisioningState {
  /** The certificate has not been provisioned. */
  NotProvisioned = "NotProvisioned",
  /** The certificate has been provisioned. */
  Provisioned = "Provisioned",
  /** The certificate failed to be provisioned. The "reason" property explains why. */
  Failed = "Failed",
}

/**
 * Defines values for CertificateProvisioningState. \
 * {@link KnownCertificateProvisioningState} can be used interchangeably with CertificateProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotProvisioned**: The certificate has not been provisioned. \
 * **Provisioned**: The certificate has been provisioned. \
 * **Failed**: The certificate failed to be provisioned. The "reason" property explains why.
 */
export type CertificateProvisioningState = string;

/** Known values of {@link NASEncryptionType} that the service accepts. */
export enum KnownNASEncryptionType {
  /** NAS signaling is not encrypted. */
  NEA0EEA0 = "NEA0/EEA0",
  /** NAS signaling is encrypted with SNOW 3G cipher. */
  NEA1EEA1 = "NEA1/EEA1",
  /** NAS signaling is encrypted with AES cipher. */
  NEA2EEA2 = "NEA2/EEA2",
}

/**
 * Defines values for NASEncryptionType. \
 * {@link KnownNASEncryptionType} can be used interchangeably with NASEncryptionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NEA0\/EEA0**: NAS signaling is not encrypted. \
 * **NEA1\/EEA1**: NAS signaling is encrypted with SNOW 3G cipher. \
 * **NEA2\/EEA2**: NAS signaling is encrypted with AES cipher.
 */
export type NASEncryptionType = string;

/** Known values of {@link HomeNetworkPrivateKeysProvisioningState} that the service accepts. */
export enum KnownHomeNetworkPrivateKeysProvisioningState {
  /** Provisioning of the private keys for SUPI concealment has not been attempted. */
  NotProvisioned = "NotProvisioned",
  /** The private keys for SUPI concealment are successfully provisioned. */
  Provisioned = "Provisioned",
  /** Provisioning of the private keys for SUPI concealment has failed. */
  Failed = "Failed",
}

/**
 * Defines values for HomeNetworkPrivateKeysProvisioningState. \
 * {@link KnownHomeNetworkPrivateKeysProvisioningState} can be used interchangeably with HomeNetworkPrivateKeysProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotProvisioned**: Provisioning of the private keys for SUPI concealment has not been attempted. \
 * **Provisioned**: The private keys for SUPI concealment are successfully provisioned. \
 * **Failed**: Provisioning of the private keys for SUPI concealment has failed.
 */
export type HomeNetworkPrivateKeysProvisioningState = string;

/** Known values of {@link PreemptionCapability} that the service accepts. */
export enum KnownPreemptionCapability {
  /** Cannot preempt */
  NotPreempt = "NotPreempt",
  /** May preempt */
  MayPreempt = "MayPreempt",
}

/**
 * Defines values for PreemptionCapability. \
 * {@link KnownPreemptionCapability} can be used interchangeably with PreemptionCapability,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotPreempt**: Cannot preempt \
 * **MayPreempt**: May preempt
 */
export type PreemptionCapability = string;

/** Known values of {@link PreemptionVulnerability} that the service accepts. */
export enum KnownPreemptionVulnerability {
  /** Cannot be preempted */
  NotPreemptable = "NotPreemptable",
  /** May be preempted */
  Preemptable = "Preemptable",
}

/**
 * Defines values for PreemptionVulnerability. \
 * {@link KnownPreemptionVulnerability} can be used interchangeably with PreemptionVulnerability,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotPreemptable**: Cannot be preempted \
 * **Preemptable**: May be preempted
 */
export type PreemptionVulnerability = string;

/** Known values of {@link TrafficControlPermission} that the service accepts. */
export enum KnownTrafficControlPermission {
  /** Traffic matching this rule is allowed to flow. */
  Enabled = "Enabled",
  /** Traffic matching this rule is not allowed to flow. */
  Blocked = "Blocked",
}

/**
 * Defines values for TrafficControlPermission. \
 * {@link KnownTrafficControlPermission} can be used interchangeably with TrafficControlPermission,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled**: Traffic matching this rule is allowed to flow. \
 * **Blocked**: Traffic matching this rule is not allowed to flow.
 */
export type TrafficControlPermission = string;

/** Known values of {@link SdfDirection} that the service accepts. */
export enum KnownSdfDirection {
  /** Traffic flowing from the UE to the data network. */
  Uplink = "Uplink",
  /** Traffic flowing from the data network to the UE. */
  Downlink = "Downlink",
  /** Traffic flowing both to and from the UE. */
  Bidirectional = "Bidirectional",
}

/**
 * Defines values for SdfDirection. \
 * {@link KnownSdfDirection} can be used interchangeably with SdfDirection,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Uplink**: Traffic flowing from the UE to the data network. \
 * **Downlink**: Traffic flowing from the data network to the UE. \
 * **Bidirectional**: Traffic flowing both to and from the UE.
 */
export type SdfDirection = string;

/** Known values of {@link SiteProvisioningState} that the service accepts. */
export enum KnownSiteProvisioningState {
  /** The resource should not be provisioned on this site. */
  NotApplicable = "NotApplicable",
  /** The resource is being added to this site. */
  Adding = "Adding",
  /** The resource is being updated on this site. */
  Updating = "Updating",
  /** The resource is being deleted from this site. */
  Deleting = "Deleting",
  /** The resource is provisioned on this site. */
  Provisioned = "Provisioned",
  /** The resource failed to be provisioned on this site. */
  Failed = "Failed",
}

/**
 * Defines values for SiteProvisioningState. \
 * {@link KnownSiteProvisioningState} can be used interchangeably with SiteProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotApplicable**: The resource should not be provisioned on this site. \
 * **Adding**: The resource is being added to this site. \
 * **Updating**: The resource is being updated on this site. \
 * **Deleting**: The resource is being deleted from this site. \
 * **Provisioned**: The resource is provisioned on this site. \
 * **Failed**: The resource failed to be provisioned on this site.
 */
export type SiteProvisioningState = string;

/** Known values of {@link PduSessionType} that the service accepts. */
export enum KnownPduSessionType {
  /** PDU session type IPv4. */
  IPv4 = "IPv4",
  /** PDU session type IPv6. */
  IPv6 = "IPv6",
}

/**
 * Defines values for PduSessionType. \
 * {@link KnownPduSessionType} can be used interchangeably with PduSessionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **IPv4**: PDU session type IPv4. \
 * **IPv6**: PDU session type IPv6.
 */
export type PduSessionType = string;

/** Known values of {@link DiagnosticsPackageStatus} that the service accepts. */
export enum KnownDiagnosticsPackageStatus {
  /** Diagnostics package collection is not started. */
  NotStarted = "NotStarted",
  /** Diagnostics package collection is in-progress. */
  Collecting = "Collecting",
  /** Diagnostics package has been collected. */
  Collected = "Collected",
  /** Error on collecting diagnostics package. */
  Error = "Error",
}

/**
 * Defines values for DiagnosticsPackageStatus. \
 * {@link KnownDiagnosticsPackageStatus} can be used interchangeably with DiagnosticsPackageStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotStarted**: Diagnostics package collection is not started. \
 * **Collecting**: Diagnostics package collection is in-progress. \
 * **Collected**: Diagnostics package has been collected. \
 * **Error**: Error on collecting diagnostics package.
 */
export type DiagnosticsPackageStatus = string;

/** Known values of {@link PacketCaptureStatus} that the service accepts. */
export enum KnownPacketCaptureStatus {
  /** Packet capture is not started. */
  NotStarted = "NotStarted",
  /** Packet capture is in-progress. */
  Running = "Running",
  /** Packet capture has been stopped. */
  Stopped = "Stopped",
  /** Error on packet capture. */
  Error = "Error",
}

/**
 * Defines values for PacketCaptureStatus. \
 * {@link KnownPacketCaptureStatus} can be used interchangeably with PacketCaptureStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotStarted**: Packet capture is not started. \
 * **Running**: Packet capture is in-progress. \
 * **Stopped**: Packet capture has been stopped. \
 * **Error**: Error on packet capture.
 */
export type PacketCaptureStatus = string;

/** Known values of {@link NaptEnabled} that the service accepts. */
export enum KnownNaptEnabled {
  /** NAPT is enabled */
  Enabled = "Enabled",
  /** NAPT is disabled */
  Disabled = "Disabled",
}

/**
 * Defines values for NaptEnabled. \
 * {@link KnownNaptEnabled} can be used interchangeably with NaptEnabled,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled**: NAPT is enabled \
 * **Disabled**: NAPT is disabled
 */
export type NaptEnabled = string;

/** Known values of {@link RatType} that the service accepts. */
export enum KnownRatType {
  /** RAT type 4G. */
  FourG = "4G",
  /** RAT type 5G. */
  FiveG = "5G",
}

/**
 * Defines values for RatType. \
 * {@link KnownRatType} can be used interchangeably with RatType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **4G**: RAT type 4G. \
 * **5G**: RAT type 5G.
 */
export type RatType = string;

/** Known values of {@link UeState} that the service accepts. */
export enum KnownUeState {
  /** UE has been connected. */
  Connected = "Connected",
  /** UE is idle. */
  Idle = "Idle",
  /** UE has been detached. */
  Detached = "Detached",
  /** UE has been deregistered. */
  Deregistered = "Deregistered",
  /** UE state is unknown. */
  Unknown = "Unknown",
}

/**
 * Defines values for UeState. \
 * {@link KnownUeState} can be used interchangeably with UeState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Connected**: UE has been connected. \
 * **Idle**: UE is idle. \
 * **Detached**: UE has been detached. \
 * **Deregistered**: UE has been deregistered. \
 * **Unknown**: UE state is unknown.
 */
export type UeState = string;

/** Known values of {@link SimState} that the service accepts. */
export enum KnownSimState {
  /** The SIM is disabled because not all configuration required for enabling is present. */
  Disabled = "Disabled",
  /** The SIM is enabled. */
  Enabled = "Enabled",
  /** The SIM cannot be enabled because some of the associated configuration is invalid. */
  Invalid = "Invalid",
}

/**
 * Defines values for SimState. \
 * {@link KnownSimState} can be used interchangeably with SimState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Disabled**: The SIM is disabled because not all configuration required for enabling is present. \
 * **Enabled**: The SIM is enabled. \
 * **Invalid**: The SIM cannot be enabled because some of the associated configuration is invalid.
 */
export type SimState = string;

/** Known values of {@link RrcEstablishmentCause} that the service accepts. */
export enum KnownRrcEstablishmentCause {
  /** Emergency Cause. */
  Emergency = "Emergency",
  /** Mobile Originated Data. */
  MobileOriginatedData = "MobileOriginatedData",
  /** Mobile Originated Signaling. */
  MobileOriginatedSignaling = "MobileOriginatedSignaling",
  /** Mobile Terminated Data. */
  MobileTerminatedData = "MobileTerminatedData",
  /** Mobile Terminated Signaling. */
  MobileTerminatedSignaling = "MobileTerminatedSignaling",
  /** Short Message Service. */
  SMS = "SMS",
}

/**
 * Defines values for RrcEstablishmentCause. \
 * {@link KnownRrcEstablishmentCause} can be used interchangeably with RrcEstablishmentCause,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Emergency**: Emergency Cause. \
 * **MobileOriginatedData**: Mobile Originated Data. \
 * **MobileOriginatedSignaling**: Mobile Originated Signaling. \
 * **MobileTerminatedData**: Mobile Terminated Data. \
 * **MobileTerminatedSignaling**: Mobile Terminated Signaling. \
 * **SMS**: Short Message Service.
 */
export type RrcEstablishmentCause = string;

/** Known values of {@link UeUsageSetting} that the service accepts. */
export enum KnownUeUsageSetting {
  /** Data Centric. */
  DataCentric = "DataCentric",
  /** Voice Centric. */
  VoiceCentric = "VoiceCentric",
}

/**
 * Defines values for UeUsageSetting. \
 * {@link KnownUeUsageSetting} can be used interchangeably with UeUsageSetting,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **DataCentric**: Data Centric. \
 * **VoiceCentric**: Voice Centric.
 */
export type UeUsageSetting = string;

/** Known values of {@link PdnType} that the service accepts. */
export enum KnownPdnType {
  /** Packet Data Network Type IPv4. */
  IPV4 = "IPV4",
}

/**
 * Defines values for PdnType. \
 * {@link KnownPdnType} can be used interchangeably with PdnType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **IPV4**: Packet Data Network Type IPv4.
 */
export type PdnType = string;
/** Defines values for CoreNetworkType. */
export type CoreNetworkType = "5GC" | "EPC" | "EPC + 5GC";

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationListResult;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export interface PacketCoreControlPlaneVersionsTenantResourceListByTenantOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByTenant operation. */
export type PacketCoreControlPlaneVersionsTenantResourceListByTenantResponse =
  PacketCoreControlPlaneVersionListResult;

/** Optional parameters. */
export interface PacketCoreControlPlaneVersionsTenantResourceGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type PacketCoreControlPlaneVersionsTenantResourceGetResponse =
  PacketCoreControlPlaneVersion;

/** Optional parameters. */
export interface PacketCoreControlPlaneVersionsTenantResourceListByTenantNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByTenantNext operation. */
export type PacketCoreControlPlaneVersionsTenantResourceListByTenantNextResponse =
  PacketCoreControlPlaneVersionListResult;

/** Optional parameters. */
export interface AmfDeploymentsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type AmfDeploymentsListBySubscriptionResponse =
  AmfDeploymentResourceListResult;

/** Optional parameters. */
export interface AmfDeploymentsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type AmfDeploymentsListByResourceGroupResponse =
  AmfDeploymentResourceListResult;

/** Optional parameters. */
export interface AmfDeploymentsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type AmfDeploymentsGetResponse = AmfDeploymentResource;

/** Optional parameters. */
export interface AmfDeploymentsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type AmfDeploymentsCreateOrUpdateResponse = AmfDeploymentResource;

/** Optional parameters. */
export interface AmfDeploymentsUpdateTagsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the updateTags operation. */
export type AmfDeploymentsUpdateTagsResponse = AmfDeploymentResource;

/** Optional parameters. */
export interface AmfDeploymentsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type AmfDeploymentsDeleteResponse = AmfDeploymentsDeleteHeaders;

/** Optional parameters. */
export interface AmfDeploymentsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type AmfDeploymentsListBySubscriptionNextResponse =
  AmfDeploymentResourceListResult;

/** Optional parameters. */
export interface AmfDeploymentsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type AmfDeploymentsListByResourceGroupNextResponse =
  AmfDeploymentResourceListResult;

/** Optional parameters. */
export interface ClusterServicesListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type ClusterServicesListBySubscriptionResponse =
  ClusterServiceResourceListResult;

/** Optional parameters. */
export interface ClusterServicesListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type ClusterServicesListByResourceGroupResponse =
  ClusterServiceResourceListResult;

/** Optional parameters. */
export interface ClusterServicesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ClusterServicesGetResponse = ClusterServiceResource;

/** Optional parameters. */
export interface ClusterServicesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type ClusterServicesCreateOrUpdateResponse = ClusterServiceResource;

/** Optional parameters. */
export interface ClusterServicesUpdateTagsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the updateTags operation. */
export type ClusterServicesUpdateTagsResponse = ClusterServiceResource;

/** Optional parameters. */
export interface ClusterServicesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type ClusterServicesDeleteResponse = ClusterServicesDeleteHeaders;

/** Optional parameters. */
export interface ClusterServicesListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type ClusterServicesListBySubscriptionNextResponse =
  ClusterServiceResourceListResult;

/** Optional parameters. */
export interface ClusterServicesListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type ClusterServicesListByResourceGroupNextResponse =
  ClusterServiceResourceListResult;

/** Optional parameters. */
export interface MobileNetworksListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type MobileNetworksListBySubscriptionResponse = MobileNetworkListResult;

/** Optional parameters. */
export interface MobileNetworksListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type MobileNetworksListByResourceGroupResponse = MobileNetworkListResult;

/** Optional parameters. */
export interface MobileNetworksGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type MobileNetworksGetResponse = MobileNetwork;

/** Optional parameters. */
export interface MobileNetworksCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type MobileNetworksCreateOrUpdateResponse = MobileNetwork;

/** Optional parameters. */
export interface MobileNetworksUpdateTagsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the updateTags operation. */
export type MobileNetworksUpdateTagsResponse = MobileNetwork;

/** Optional parameters. */
export interface MobileNetworksDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type MobileNetworksDeleteResponse = MobileNetworksDeleteHeaders;

/** Optional parameters. */
export interface MobileNetworksListSimGroupsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listSimGroups operation. */
export type MobileNetworksListSimGroupsResponse = SimGroupListResult;

/** Optional parameters. */
export interface MobileNetworksListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type MobileNetworksListBySubscriptionNextResponse =
  MobileNetworkListResult;

/** Optional parameters. */
export interface MobileNetworksListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type MobileNetworksListByResourceGroupNextResponse =
  MobileNetworkListResult;

/** Optional parameters. */
export interface MobileNetworksListSimGroupsNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listSimGroupsNext operation. */
export type MobileNetworksListSimGroupsNextResponse = SimGroupListResult;

/** Optional parameters. */
export interface NrfDeploymentsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type NrfDeploymentsListBySubscriptionResponse =
  NrfDeploymentResourceListResult;

/** Optional parameters. */
export interface NrfDeploymentsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type NrfDeploymentsListByResourceGroupResponse =
  NrfDeploymentResourceListResult;

/** Optional parameters. */
export interface NrfDeploymentsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type NrfDeploymentsGetResponse = NrfDeploymentResource;

/** Optional parameters. */
export interface NrfDeploymentsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type NrfDeploymentsCreateOrUpdateResponse = NrfDeploymentResource;

/** Optional parameters. */
export interface NrfDeploymentsUpdateTagsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the updateTags operation. */
export type NrfDeploymentsUpdateTagsResponse = NrfDeploymentResource;

/** Optional parameters. */
export interface NrfDeploymentsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type NrfDeploymentsDeleteResponse = NrfDeploymentsDeleteHeaders;

/** Optional parameters. */
export interface NrfDeploymentsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type NrfDeploymentsListBySubscriptionNextResponse =
  NrfDeploymentResourceListResult;

/** Optional parameters. */
export interface NrfDeploymentsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type NrfDeploymentsListByResourceGroupNextResponse =
  NrfDeploymentResourceListResult;

/** Optional parameters. */
export interface NssfDeploymentsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type NssfDeploymentsListBySubscriptionResponse =
  NssfDeploymentResourceListResult;

/** Optional parameters. */
export interface NssfDeploymentsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type NssfDeploymentsListByResourceGroupResponse =
  NssfDeploymentResourceListResult;

/** Optional parameters. */
export interface NssfDeploymentsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type NssfDeploymentsGetResponse = NssfDeploymentResource;

/** Optional parameters. */
export interface NssfDeploymentsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type NssfDeploymentsCreateOrUpdateResponse = NssfDeploymentResource;

/** Optional parameters. */
export interface NssfDeploymentsUpdateTagsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the updateTags operation. */
export type NssfDeploymentsUpdateTagsResponse = NssfDeploymentResource;

/** Optional parameters. */
export interface NssfDeploymentsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type NssfDeploymentsDeleteResponse = NssfDeploymentsDeleteHeaders;

/** Optional parameters. */
export interface NssfDeploymentsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type NssfDeploymentsListBySubscriptionNextResponse =
  NssfDeploymentResourceListResult;

/** Optional parameters. */
export interface NssfDeploymentsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type NssfDeploymentsListByResourceGroupNextResponse =
  NssfDeploymentResourceListResult;

/** Optional parameters. */
export interface ObservabilityServicesListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type ObservabilityServicesListBySubscriptionResponse =
  ObservabilityServiceResourceListResult;

/** Optional parameters. */
export interface ObservabilityServicesListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type ObservabilityServicesListByResourceGroupResponse =
  ObservabilityServiceResourceListResult;

/** Optional parameters. */
export interface ObservabilityServicesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ObservabilityServicesGetResponse = ObservabilityServiceResource;

/** Optional parameters. */
export interface ObservabilityServicesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type ObservabilityServicesCreateOrUpdateResponse =
  ObservabilityServiceResource;

/** Optional parameters. */
export interface ObservabilityServicesUpdateTagsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the updateTags operation. */
export type ObservabilityServicesUpdateTagsResponse =
  ObservabilityServiceResource;

/** Optional parameters. */
export interface ObservabilityServicesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type ObservabilityServicesDeleteResponse =
  ObservabilityServicesDeleteHeaders;

/** Optional parameters. */
export interface ObservabilityServicesListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type ObservabilityServicesListBySubscriptionNextResponse =
  ObservabilityServiceResourceListResult;

/** Optional parameters. */
export interface ObservabilityServicesListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type ObservabilityServicesListByResourceGroupNextResponse =
  ObservabilityServiceResourceListResult;

/** Optional parameters. */
export interface PacketCoreControlPlaneVersionsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type PacketCoreControlPlaneVersionsListBySubscriptionResponse =
  PacketCoreControlPlaneVersionListResult;

/** Optional parameters. */
export interface PacketCoreControlPlaneVersionsGetBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getBySubscription operation. */
export type PacketCoreControlPlaneVersionsGetBySubscriptionResponse =
  PacketCoreControlPlaneVersion;

/** Optional parameters. */
export interface PacketCoreControlPlaneVersionsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type PacketCoreControlPlaneVersionsListBySubscriptionNextResponse =
  PacketCoreControlPlaneVersionListResult;

/** Optional parameters. */
export interface PacketCoreControlPlanesListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type PacketCoreControlPlanesListBySubscriptionResponse =
  PacketCoreControlPlaneListResult;

/** Optional parameters. */
export interface PacketCoreControlPlanesListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type PacketCoreControlPlanesListByResourceGroupResponse =
  PacketCoreControlPlaneListResult;

/** Optional parameters. */
export interface PacketCoreControlPlanesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type PacketCoreControlPlanesGetResponse = PacketCoreControlPlane;

/** Optional parameters. */
export interface PacketCoreControlPlanesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type PacketCoreControlPlanesCreateOrUpdateResponse =
  PacketCoreControlPlane;

/** Optional parameters. */
export interface PacketCoreControlPlanesUpdateTagsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the updateTags operation. */
export type PacketCoreControlPlanesUpdateTagsResponse = PacketCoreControlPlane;

/** Optional parameters. */
export interface PacketCoreControlPlanesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type PacketCoreControlPlanesDeleteResponse =
  PacketCoreControlPlanesDeleteHeaders;

/** Optional parameters. */
export interface PacketCoreControlPlanesCollectDiagnosticsPackageOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the collectDiagnosticsPackage operation. */
export type PacketCoreControlPlanesCollectDiagnosticsPackageResponse =
  AsyncOperationStatus;

/** Optional parameters. */
export interface PacketCoreControlPlanesReinstallOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the reinstall operation. */
export type PacketCoreControlPlanesReinstallResponse = AsyncOperationStatus;

/** Optional parameters. */
export interface PacketCoreControlPlanesRollbackOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the rollback operation. */
export type PacketCoreControlPlanesRollbackResponse = AsyncOperationStatus;

/** Optional parameters. */
export interface PacketCoreControlPlanesListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type PacketCoreControlPlanesListBySubscriptionNextResponse =
  PacketCoreControlPlaneListResult;

/** Optional parameters. */
export interface PacketCoreControlPlanesListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type PacketCoreControlPlanesListByResourceGroupNextResponse =
  PacketCoreControlPlaneListResult;

/** Optional parameters. */
export interface SimGroupsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type SimGroupsListBySubscriptionResponse = SimGroupListResult;

/** Optional parameters. */
export interface SimGroupsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type SimGroupsListByResourceGroupResponse = SimGroupListResult;

/** Optional parameters. */
export interface SimGroupsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type SimGroupsGetResponse = SimGroup;

/** Optional parameters. */
export interface SimGroupsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type SimGroupsCreateOrUpdateResponse = SimGroup;

/** Optional parameters. */
export interface SimGroupsUpdateTagsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the updateTags operation. */
export type SimGroupsUpdateTagsResponse = SimGroup;

/** Optional parameters. */
export interface SimGroupsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type SimGroupsDeleteResponse = SimGroupsDeleteHeaders;

/** Optional parameters. */
export interface SimGroupsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type SimGroupsListBySubscriptionNextResponse = SimGroupListResult;

/** Optional parameters. */
export interface SimGroupsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type SimGroupsListByResourceGroupNextResponse = SimGroupListResult;

/** Optional parameters. */
export interface SmfDeploymentsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type SmfDeploymentsListBySubscriptionResponse =
  SmfDeploymentResourceListResult;

/** Optional parameters. */
export interface SmfDeploymentsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type SmfDeploymentsListByResourceGroupResponse =
  SmfDeploymentResourceListResult;

/** Optional parameters. */
export interface SmfDeploymentsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type SmfDeploymentsGetResponse = SmfDeploymentResource;

/** Optional parameters. */
export interface SmfDeploymentsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type SmfDeploymentsCreateOrUpdateResponse = SmfDeploymentResource;

/** Optional parameters. */
export interface SmfDeploymentsUpdateTagsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the updateTags operation. */
export type SmfDeploymentsUpdateTagsResponse = SmfDeploymentResource;

/** Optional parameters. */
export interface SmfDeploymentsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type SmfDeploymentsDeleteResponse = SmfDeploymentsDeleteHeaders;

/** Optional parameters. */
export interface SmfDeploymentsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type SmfDeploymentsListBySubscriptionNextResponse =
  SmfDeploymentResourceListResult;

/** Optional parameters. */
export interface SmfDeploymentsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type SmfDeploymentsListByResourceGroupNextResponse =
  SmfDeploymentResourceListResult;

/** Optional parameters. */
export interface UpfDeploymentsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type UpfDeploymentsListBySubscriptionResponse =
  UpfDeploymentResourceListResult;

/** Optional parameters. */
export interface UpfDeploymentsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type UpfDeploymentsListByResourceGroupResponse =
  UpfDeploymentResourceListResult;

/** Optional parameters. */
export interface UpfDeploymentsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type UpfDeploymentsGetResponse = UpfDeploymentResource;

/** Optional parameters. */
export interface UpfDeploymentsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type UpfDeploymentsCreateOrUpdateResponse = UpfDeploymentResource;

/** Optional parameters. */
export interface UpfDeploymentsUpdateTagsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the updateTags operation. */
export type UpfDeploymentsUpdateTagsResponse = UpfDeploymentResource;

/** Optional parameters. */
export interface UpfDeploymentsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type UpfDeploymentsDeleteResponse = UpfDeploymentsDeleteHeaders;

/** Optional parameters. */
export interface UpfDeploymentsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type UpfDeploymentsListBySubscriptionNextResponse =
  UpfDeploymentResourceListResult;

/** Optional parameters. */
export interface UpfDeploymentsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type UpfDeploymentsListByResourceGroupNextResponse =
  UpfDeploymentResourceListResult;

/** Optional parameters. */
export interface DataNetworksListByMobileNetworkOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByMobileNetwork operation. */
export type DataNetworksListByMobileNetworkResponse = DataNetworkListResult;

/** Optional parameters. */
export interface DataNetworksGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type DataNetworksGetResponse = DataNetwork;

/** Optional parameters. */
export interface DataNetworksCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type DataNetworksCreateOrUpdateResponse = DataNetwork;

/** Optional parameters. */
export interface DataNetworksUpdateTagsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the updateTags operation. */
export type DataNetworksUpdateTagsResponse = DataNetwork;

/** Optional parameters. */
export interface DataNetworksDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type DataNetworksDeleteResponse = DataNetworksDeleteHeaders;

/** Optional parameters. */
export interface DataNetworksListByMobileNetworkNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByMobileNetworkNext operation. */
export type DataNetworksListByMobileNetworkNextResponse = DataNetworkListResult;

/** Optional parameters. */
export interface ServicesListByMobileNetworkOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByMobileNetwork operation. */
export type ServicesListByMobileNetworkResponse = ServiceListResult;

/** Optional parameters. */
export interface ServicesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ServicesGetResponse = Service;

/** Optional parameters. */
export interface ServicesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type ServicesCreateOrUpdateResponse = Service;

/** Optional parameters. */
export interface ServicesUpdateTagsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the updateTags operation. */
export type ServicesUpdateTagsResponse = Service;

/** Optional parameters. */
export interface ServicesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type ServicesDeleteResponse = ServicesDeleteHeaders;

/** Optional parameters. */
export interface ServicesListByMobileNetworkNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByMobileNetworkNext operation. */
export type ServicesListByMobileNetworkNextResponse = ServiceListResult;

/** Optional parameters. */
export interface SimPoliciesListByMobileNetworkOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByMobileNetwork operation. */
export type SimPoliciesListByMobileNetworkResponse = SimPolicyListResult;

/** Optional parameters. */
export interface SimPoliciesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type SimPoliciesGetResponse = SimPolicy;

/** Optional parameters. */
export interface SimPoliciesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type SimPoliciesCreateOrUpdateResponse = SimPolicy;

/** Optional parameters. */
export interface SimPoliciesUpdateTagsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the updateTags operation. */
export type SimPoliciesUpdateTagsResponse = SimPolicy;

/** Optional parameters. */
export interface SimPoliciesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type SimPoliciesDeleteResponse = SimPoliciesDeleteHeaders;

/** Optional parameters. */
export interface SimPoliciesListByMobileNetworkNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByMobileNetworkNext operation. */
export type SimPoliciesListByMobileNetworkNextResponse = SimPolicyListResult;

/** Optional parameters. */
export interface SitesListByMobileNetworkOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByMobileNetwork operation. */
export type SitesListByMobileNetworkResponse = SiteListResult;

/** Optional parameters. */
export interface SitesGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type SitesGetResponse = Site;

/** Optional parameters. */
export interface SitesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type SitesCreateOrUpdateResponse = Site;

/** Optional parameters. */
export interface SitesUpdateTagsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the updateTags operation. */
export type SitesUpdateTagsResponse = Site;

/** Optional parameters. */
export interface SitesDeleteOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type SitesDeleteResponse = SitesDeleteHeaders;

/** Optional parameters. */
export interface SitesDeletePacketCoreOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the deletePacketCore operation. */
export type SitesDeletePacketCoreResponse = AsyncOperationStatus;

/** Optional parameters. */
export interface SitesListByMobileNetworkNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByMobileNetworkNext operation. */
export type SitesListByMobileNetworkNextResponse = SiteListResult;

/** Optional parameters. */
export interface SlicesListByMobileNetworkOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByMobileNetwork operation. */
export type SlicesListByMobileNetworkResponse = SliceListResult;

/** Optional parameters. */
export interface SlicesGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type SlicesGetResponse = Slice;

/** Optional parameters. */
export interface SlicesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type SlicesCreateOrUpdateResponse = Slice;

/** Optional parameters. */
export interface SlicesUpdateTagsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the updateTags operation. */
export type SlicesUpdateTagsResponse = Slice;

/** Optional parameters. */
export interface SlicesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type SlicesDeleteResponse = SlicesDeleteHeaders;

/** Optional parameters. */
export interface SlicesListByMobileNetworkNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByMobileNetworkNext operation. */
export type SlicesListByMobileNetworkNextResponse = SliceListResult;

/** Optional parameters. */
export interface DiagnosticsPackagesListByPacketCoreControlPlaneOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByPacketCoreControlPlane operation. */
export type DiagnosticsPackagesListByPacketCoreControlPlaneResponse =
  DiagnosticsPackageListResult;

/** Optional parameters. */
export interface DiagnosticsPackagesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type DiagnosticsPackagesGetResponse = DiagnosticsPackage;

/** Optional parameters. */
export interface DiagnosticsPackagesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type DiagnosticsPackagesCreateOrUpdateResponse = DiagnosticsPackage;

/** Optional parameters. */
export interface DiagnosticsPackagesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type DiagnosticsPackagesDeleteResponse =
  DiagnosticsPackagesDeleteHeaders;

/** Optional parameters. */
export interface DiagnosticsPackagesListByPacketCoreControlPlaneNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByPacketCoreControlPlaneNext operation. */
export type DiagnosticsPackagesListByPacketCoreControlPlaneNextResponse =
  DiagnosticsPackageListResult;

/** Optional parameters. */
export interface PacketCapturesListByPacketCoreControlPlaneOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByPacketCoreControlPlane operation. */
export type PacketCapturesListByPacketCoreControlPlaneResponse =
  PacketCaptureListResult;

/** Optional parameters. */
export interface PacketCapturesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type PacketCapturesGetResponse = PacketCapture;

/** Optional parameters. */
export interface PacketCapturesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type PacketCapturesCreateOrUpdateResponse = PacketCapture;

/** Optional parameters. */
export interface PacketCapturesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type PacketCapturesDeleteResponse = PacketCapturesDeleteHeaders;

/** Optional parameters. */
export interface PacketCapturesStopOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the stop operation. */
export type PacketCapturesStopResponse = AsyncOperationStatus;

/** Optional parameters. */
export interface PacketCapturesListByPacketCoreControlPlaneNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByPacketCoreControlPlaneNext operation. */
export type PacketCapturesListByPacketCoreControlPlaneNextResponse =
  PacketCaptureListResult;

/** Optional parameters. */
export interface PacketCoreDataPlanesListByPacketCoreControlPlaneOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByPacketCoreControlPlane operation. */
export type PacketCoreDataPlanesListByPacketCoreControlPlaneResponse =
  PacketCoreDataPlaneListResult;

/** Optional parameters. */
export interface PacketCoreDataPlanesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type PacketCoreDataPlanesGetResponse = PacketCoreDataPlane;

/** Optional parameters. */
export interface PacketCoreDataPlanesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type PacketCoreDataPlanesCreateOrUpdateResponse = PacketCoreDataPlane;

/** Optional parameters. */
export interface PacketCoreDataPlanesUpdateTagsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the updateTags operation. */
export type PacketCoreDataPlanesUpdateTagsResponse = PacketCoreDataPlane;

/** Optional parameters. */
export interface PacketCoreDataPlanesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type PacketCoreDataPlanesDeleteResponse =
  PacketCoreDataPlanesDeleteHeaders;

/** Optional parameters. */
export interface PacketCoreDataPlanesListByPacketCoreControlPlaneNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByPacketCoreControlPlaneNext operation. */
export type PacketCoreDataPlanesListByPacketCoreControlPlaneNextResponse =
  PacketCoreDataPlaneListResult;

/** Optional parameters. */
export interface AttachedDataNetworksListByPacketCoreDataPlaneOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByPacketCoreDataPlane operation. */
export type AttachedDataNetworksListByPacketCoreDataPlaneResponse =
  AttachedDataNetworkListResult;

/** Optional parameters. */
export interface AttachedDataNetworksGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type AttachedDataNetworksGetResponse = AttachedDataNetwork;

/** Optional parameters. */
export interface AttachedDataNetworksCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type AttachedDataNetworksCreateOrUpdateResponse = AttachedDataNetwork;

/** Optional parameters. */
export interface AttachedDataNetworksUpdateTagsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the updateTags operation. */
export type AttachedDataNetworksUpdateTagsResponse = AttachedDataNetwork;

/** Optional parameters. */
export interface AttachedDataNetworksDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type AttachedDataNetworksDeleteResponse =
  AttachedDataNetworksDeleteHeaders;

/** Optional parameters. */
export interface AttachedDataNetworksListByPacketCoreDataPlaneNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByPacketCoreDataPlaneNext operation. */
export type AttachedDataNetworksListByPacketCoreDataPlaneNextResponse =
  AttachedDataNetworkListResult;

/** Optional parameters. */
export interface RoutingInfoModelsListByPacketCoreControlPlaneOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByPacketCoreControlPlane operation. */
export type RoutingInfoModelsListByPacketCoreControlPlaneResponse =
  RoutingInfoModelListResult;

/** Optional parameters. */
export interface RoutingInfoModelsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type RoutingInfoModelsGetResponse = RoutingInfoModel;

/** Optional parameters. */
export interface RoutingInfoModelsListByPacketCoreControlPlaneNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByPacketCoreControlPlaneNext operation. */
export type RoutingInfoModelsListByPacketCoreControlPlaneNextResponse =
  RoutingInfoModelListResult;

/** Optional parameters. */
export interface UesListByPacketCoreControlPlaneOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByPacketCoreControlPlane operation. */
export type UesListByPacketCoreControlPlaneResponse = UeInfoListResult;

/** Optional parameters. */
export interface UesListByPacketCoreControlPlaneNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByPacketCoreControlPlaneNext operation. */
export type UesListByPacketCoreControlPlaneNextResponse = UeInfoListResult;

/** Optional parameters. */
export interface ExtendedUeInfosGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ExtendedUeInfosGetResponse = ExtendedUeInfo;

/** Optional parameters. */
export interface SimsCloneOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the clone operation. */
export type SimsCloneResponse = AsyncOperationStatus;

/** Optional parameters. */
export interface SimsBulkDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the bulkDelete operation. */
export type SimsBulkDeleteResponse = AsyncOperationStatus;

/** Optional parameters. */
export interface SimsMoveOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the move operation. */
export type SimsMoveResponse = AsyncOperationStatus;

/** Optional parameters. */
export interface SimsListByGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByGroup operation. */
export type SimsListByGroupResponse = SimListResult;

/** Optional parameters. */
export interface SimsGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type SimsGetResponse = Sim;

/** Optional parameters. */
export interface SimsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type SimsCreateOrUpdateResponse = Sim;

/** Optional parameters. */
export interface SimsDeleteOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type SimsDeleteResponse = SimsDeleteHeaders;

/** Optional parameters. */
export interface SimsBulkUploadEncryptedOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the bulkUploadEncrypted operation. */
export type SimsBulkUploadEncryptedResponse = AsyncOperationStatus;

/** Optional parameters. */
export interface SimsBulkUploadOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the bulkUpload operation. */
export type SimsBulkUploadResponse = AsyncOperationStatus;

/** Optional parameters. */
export interface SimsListByGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByGroupNext operation. */
export type SimsListByGroupNextResponse = SimListResult;

/** Optional parameters. */
export interface MobileNetworkManagementClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
