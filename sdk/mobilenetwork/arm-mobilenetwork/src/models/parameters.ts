/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter,
} from "@azure/core-client";
import {
  AmfDeploymentResource as AmfDeploymentResourceMapper,
  AmfDeploymentResourceTagsUpdate as AmfDeploymentResourceTagsUpdateMapper,
  ClusterServiceResource as ClusterServiceResourceMapper,
  ClusterServiceResourceTagsUpdate as ClusterServiceResourceTagsUpdateMapper,
  MobileNetwork as MobileNetworkMapper,
  IdentityAndTagsObject as IdentityAndTagsObjectMapper,
  NrfDeploymentResource as NrfDeploymentResourceMapper,
  NrfDeploymentResourceTagsUpdate as NrfDeploymentResourceTagsUpdateMapper,
  NssfDeploymentResource as NssfDeploymentResourceMapper,
  NssfDeploymentResourceTagsUpdate as NssfDeploymentResourceTagsUpdateMapper,
  ObservabilityServiceResource as ObservabilityServiceResourceMapper,
  ObservabilityServiceResourceTagsUpdate as ObservabilityServiceResourceTagsUpdateMapper,
  PacketCoreControlPlane as PacketCoreControlPlaneMapper,
  PacketCoreControlPlaneCollectDiagnosticsPackage as PacketCoreControlPlaneCollectDiagnosticsPackageMapper,
  SimGroup as SimGroupMapper,
  SmfDeploymentResource as SmfDeploymentResourceMapper,
  SmfDeploymentResourceTagsUpdate as SmfDeploymentResourceTagsUpdateMapper,
  UpfDeploymentResource as UpfDeploymentResourceMapper,
  UpfDeploymentResourceTagsUpdate as UpfDeploymentResourceTagsUpdateMapper,
  DataNetwork as DataNetworkMapper,
  TagsObject as TagsObjectMapper,
  Service as ServiceMapper,
  SimPolicy as SimPolicyMapper,
  Site as SiteMapper,
  SiteDeletePacketCore as SiteDeletePacketCoreMapper,
  Slice as SliceMapper,
  PacketCapture as PacketCaptureMapper,
  PacketCoreDataPlane as PacketCoreDataPlaneMapper,
  AttachedDataNetwork as AttachedDataNetworkMapper,
  SimClone as SimCloneMapper,
  SimDeleteList as SimDeleteListMapper,
  SimMove as SimMoveMapper,
  Sim as SimMapper,
  EncryptedSimUploadList as EncryptedSimUploadListMapper,
  SimUploadList as SimUploadListMapper,
} from "../models/mappers";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String",
    },
  },
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2024-06-01",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String",
    },
  },
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const versionName: OperationURLParameter = {
  parameterPath: "versionName",
  mapper: {
    constraints: {
      Pattern: new RegExp(".*"),
    },
    serializedName: "versionName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "Uuid",
    },
  },
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    constraints: {
      MaxLength: 90,
      MinLength: 1,
    },
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const amfDeploymentName: OperationURLParameter = {
  parameterPath: "amfDeploymentName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]$"),
      MaxLength: 63,
      MinLength: 1,
    },
    serializedName: "amfDeploymentName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String",
    },
  },
};

export const resource: OperationParameter = {
  parameterPath: "resource",
  mapper: AmfDeploymentResourceMapper,
};

export const properties: OperationParameter = {
  parameterPath: "properties",
  mapper: AmfDeploymentResourceTagsUpdateMapper,
};

export const clusterServiceName: OperationURLParameter = {
  parameterPath: "clusterServiceName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]$"),
      MaxLength: 63,
      MinLength: 1,
    },
    serializedName: "clusterServiceName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource1: OperationParameter = {
  parameterPath: "resource",
  mapper: ClusterServiceResourceMapper,
};

export const properties1: OperationParameter = {
  parameterPath: "properties",
  mapper: ClusterServiceResourceTagsUpdateMapper,
};

export const mobileNetworkName: OperationURLParameter = {
  parameterPath: "mobileNetworkName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_-]*$"),
      MaxLength: 64,
    },
    serializedName: "mobileNetworkName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource2: OperationParameter = {
  parameterPath: "resource",
  mapper: MobileNetworkMapper,
};

export const properties2: OperationParameter = {
  parameterPath: "properties",
  mapper: IdentityAndTagsObjectMapper,
};

export const nrfDeploymentName: OperationURLParameter = {
  parameterPath: "nrfDeploymentName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]$"),
      MaxLength: 63,
      MinLength: 1,
    },
    serializedName: "nrfDeploymentName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource3: OperationParameter = {
  parameterPath: "resource",
  mapper: NrfDeploymentResourceMapper,
};

export const properties3: OperationParameter = {
  parameterPath: "properties",
  mapper: NrfDeploymentResourceTagsUpdateMapper,
};

export const nssfDeploymentName: OperationURLParameter = {
  parameterPath: "nssfDeploymentName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]$"),
      MaxLength: 63,
      MinLength: 1,
    },
    serializedName: "nssfDeploymentName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource4: OperationParameter = {
  parameterPath: "resource",
  mapper: NssfDeploymentResourceMapper,
};

export const properties4: OperationParameter = {
  parameterPath: "properties",
  mapper: NssfDeploymentResourceTagsUpdateMapper,
};

export const observabilityServiceName: OperationURLParameter = {
  parameterPath: "observabilityServiceName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]$"),
      MaxLength: 63,
      MinLength: 1,
    },
    serializedName: "observabilityServiceName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource5: OperationParameter = {
  parameterPath: "resource",
  mapper: ObservabilityServiceResourceMapper,
};

export const properties5: OperationParameter = {
  parameterPath: "properties",
  mapper: ObservabilityServiceResourceTagsUpdateMapper,
};

export const packetCoreControlPlaneName: OperationURLParameter = {
  parameterPath: "packetCoreControlPlaneName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_-]*$"),
      MaxLength: 64,
    },
    serializedName: "packetCoreControlPlaneName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource6: OperationParameter = {
  parameterPath: "resource",
  mapper: PacketCoreControlPlaneMapper,
};

export const body: OperationParameter = {
  parameterPath: "body",
  mapper: PacketCoreControlPlaneCollectDiagnosticsPackageMapper,
};

export const simGroupName: OperationURLParameter = {
  parameterPath: "simGroupName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_-]*$"),
      MaxLength: 64,
    },
    serializedName: "simGroupName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource7: OperationParameter = {
  parameterPath: "resource",
  mapper: SimGroupMapper,
};

export const smfDeploymentName: OperationURLParameter = {
  parameterPath: "smfDeploymentName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]$"),
      MaxLength: 63,
      MinLength: 1,
    },
    serializedName: "smfDeploymentName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource8: OperationParameter = {
  parameterPath: "resource",
  mapper: SmfDeploymentResourceMapper,
};

export const properties6: OperationParameter = {
  parameterPath: "properties",
  mapper: SmfDeploymentResourceTagsUpdateMapper,
};

export const upfDeploymentName: OperationURLParameter = {
  parameterPath: "upfDeploymentName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]$"),
      MaxLength: 63,
      MinLength: 1,
    },
    serializedName: "upfDeploymentName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource9: OperationParameter = {
  parameterPath: "resource",
  mapper: UpfDeploymentResourceMapper,
};

export const properties7: OperationParameter = {
  parameterPath: "properties",
  mapper: UpfDeploymentResourceTagsUpdateMapper,
};

export const dataNetworkName: OperationURLParameter = {
  parameterPath: "dataNetworkName",
  mapper: {
    constraints: {
      Pattern: new RegExp(
        "^[a-zA-Z0-9]([a-zA-Z0-9-]*[a-zA-Z0-9])*(\\.[a-zA-Z0-9]([a-zA-Z0-9-]*[a-zA-Z0-9])*)*$",
      ),
      MaxLength: 64,
    },
    serializedName: "dataNetworkName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource10: OperationParameter = {
  parameterPath: "resource",
  mapper: DataNetworkMapper,
};

export const properties8: OperationParameter = {
  parameterPath: "properties",
  mapper: TagsObjectMapper,
};

export const serviceName: OperationURLParameter = {
  parameterPath: "serviceName",
  mapper: {
    constraints: {
      Pattern: new RegExp(
        "^(?!(default|requested|service)$)[a-zA-Z0-9][a-zA-Z0-9_-]*$",
      ),
      MaxLength: 64,
    },
    serializedName: "serviceName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource11: OperationParameter = {
  parameterPath: "resource",
  mapper: ServiceMapper,
};

export const simPolicyName: OperationURLParameter = {
  parameterPath: "simPolicyName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_-]*$"),
      MaxLength: 64,
    },
    serializedName: "simPolicyName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource12: OperationParameter = {
  parameterPath: "resource",
  mapper: SimPolicyMapper,
};

export const siteName: OperationURLParameter = {
  parameterPath: "siteName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_-]*$"),
      MaxLength: 64,
    },
    serializedName: "siteName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource13: OperationParameter = {
  parameterPath: "resource",
  mapper: SiteMapper,
};

export const body1: OperationParameter = {
  parameterPath: "body",
  mapper: SiteDeletePacketCoreMapper,
};

export const sliceName: OperationURLParameter = {
  parameterPath: "sliceName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_-]*$"),
      MaxLength: 64,
    },
    serializedName: "sliceName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource14: OperationParameter = {
  parameterPath: "resource",
  mapper: SliceMapper,
};

export const diagnosticsPackageName: OperationURLParameter = {
  parameterPath: "diagnosticsPackageName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_-]*$"),
      MaxLength: 64,
    },
    serializedName: "diagnosticsPackageName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const packetCaptureName: OperationURLParameter = {
  parameterPath: "packetCaptureName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_-]*$"),
      MaxLength: 64,
    },
    serializedName: "packetCaptureName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource15: OperationParameter = {
  parameterPath: "resource",
  mapper: PacketCaptureMapper,
};

export const packetCoreDataPlaneName: OperationURLParameter = {
  parameterPath: "packetCoreDataPlaneName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_-]*$"),
      MaxLength: 64,
    },
    serializedName: "packetCoreDataPlaneName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource16: OperationParameter = {
  parameterPath: "resource",
  mapper: PacketCoreDataPlaneMapper,
};

export const attachedDataNetworkName: OperationURLParameter = {
  parameterPath: "attachedDataNetworkName",
  mapper: {
    constraints: {
      Pattern: new RegExp(
        "^[a-zA-Z0-9]([a-zA-Z0-9-]*[a-zA-Z0-9])*(\\.[a-zA-Z0-9]([a-zA-Z0-9-]*[a-zA-Z0-9])*)*$",
      ),
      MaxLength: 64,
    },
    serializedName: "attachedDataNetworkName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource17: OperationParameter = {
  parameterPath: "resource",
  mapper: AttachedDataNetworkMapper,
};

export const ueId: OperationURLParameter = {
  parameterPath: "ueId",
  mapper: {
    constraints: {
      Pattern: new RegExp(".*"),
    },
    serializedName: "ueId",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const body2: OperationParameter = {
  parameterPath: "body",
  mapper: SimCloneMapper,
};

export const body3: OperationParameter = {
  parameterPath: "body",
  mapper: SimDeleteListMapper,
};

export const body4: OperationParameter = {
  parameterPath: "body",
  mapper: SimMoveMapper,
};

export const simName: OperationURLParameter = {
  parameterPath: "simName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_-]*$"),
      MaxLength: 64,
    },
    serializedName: "simName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource18: OperationParameter = {
  parameterPath: "resource",
  mapper: SimMapper,
};

export const body5: OperationParameter = {
  parameterPath: "body",
  mapper: EncryptedSimUploadListMapper,
};

export const body6: OperationParameter = {
  parameterPath: "body",
  mapper: SimUploadListMapper,
};
