/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { PacketCoreControlPlaneVersionsTenantResource } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MobileNetworkManagementClient } from "../mobileNetworkManagementClient";
import {
  PacketCoreControlPlaneVersion,
  PacketCoreControlPlaneVersionsTenantResourceListByTenantNextOptionalParams,
  PacketCoreControlPlaneVersionsTenantResourceListByTenantOptionalParams,
  PacketCoreControlPlaneVersionsTenantResourceListByTenantResponse,
  PacketCoreControlPlaneVersionsTenantResourceGetOptionalParams,
  PacketCoreControlPlaneVersionsTenantResourceGetResponse,
  PacketCoreControlPlaneVersionsTenantResourceListByTenantNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing PacketCoreControlPlaneVersionsTenantResource operations. */
export class PacketCoreControlPlaneVersionsTenantResourceImpl
  implements PacketCoreControlPlaneVersionsTenantResource
{
  private readonly client: MobileNetworkManagementClient;

  /**
   * Initialize a new instance of the class PacketCoreControlPlaneVersionsTenantResource class.
   * @param client Reference to the service client
   */
  constructor(client: MobileNetworkManagementClient) {
    this.client = client;
  }

  /**
   * Lists all supported packet core control planes versions.
   * @param options The options parameters.
   */
  public listByTenant(
    options?: PacketCoreControlPlaneVersionsTenantResourceListByTenantOptionalParams,
  ): PagedAsyncIterableIterator<PacketCoreControlPlaneVersion> {
    const iter = this.listByTenantPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByTenantPagingPage(options, settings);
      },
    };
  }

  private async *listByTenantPagingPage(
    options?: PacketCoreControlPlaneVersionsTenantResourceListByTenantOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<PacketCoreControlPlaneVersion[]> {
    let result: PacketCoreControlPlaneVersionsTenantResourceListByTenantResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByTenant(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByTenantNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByTenantPagingAll(
    options?: PacketCoreControlPlaneVersionsTenantResourceListByTenantOptionalParams,
  ): AsyncIterableIterator<PacketCoreControlPlaneVersion> {
    for await (const page of this.listByTenantPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Lists all supported packet core control planes versions.
   * @param options The options parameters.
   */
  private _listByTenant(
    options?: PacketCoreControlPlaneVersionsTenantResourceListByTenantOptionalParams,
  ): Promise<PacketCoreControlPlaneVersionsTenantResourceListByTenantResponse> {
    return this.client.sendOperationRequest(
      { options },
      listByTenantOperationSpec,
    );
  }

  /**
   * Gets information about the specified packet core control plane version.
   * @param versionName The name of the packet core control plane version.
   * @param options The options parameters.
   */
  get(
    versionName: string,
    options?: PacketCoreControlPlaneVersionsTenantResourceGetOptionalParams,
  ): Promise<PacketCoreControlPlaneVersionsTenantResourceGetResponse> {
    return this.client.sendOperationRequest(
      { versionName, options },
      getOperationSpec,
    );
  }

  /**
   * ListByTenantNext
   * @param nextLink The nextLink from the previous successful call to the ListByTenant method.
   * @param options The options parameters.
   */
  private _listByTenantNext(
    nextLink: string,
    options?: PacketCoreControlPlaneVersionsTenantResourceListByTenantNextOptionalParams,
  ): Promise<PacketCoreControlPlaneVersionsTenantResourceListByTenantNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listByTenantNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByTenantOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.MobileNetwork/packetCoreControlPlaneVersions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PacketCoreControlPlaneVersionListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.MobileNetwork/packetCoreControlPlaneVersions/{versionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PacketCoreControlPlaneVersion,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.versionName],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByTenantNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PacketCoreControlPlaneVersionListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer,
};
