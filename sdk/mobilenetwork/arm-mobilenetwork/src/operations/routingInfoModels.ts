/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { RoutingInfoModels } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MobileNetworkManagementClient } from "../mobileNetworkManagementClient";
import {
  RoutingInfoModel,
  RoutingInfoModelsListByPacketCoreControlPlaneNextOptionalParams,
  RoutingInfoModelsListByPacketCoreControlPlaneOptionalParams,
  RoutingInfoModelsListByPacketCoreControlPlaneResponse,
  RoutingInfoModelsGetOptionalParams,
  RoutingInfoModelsGetResponse,
  RoutingInfoModelsListByPacketCoreControlPlaneNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing RoutingInfoModels operations. */
export class RoutingInfoModelsImpl implements RoutingInfoModels {
  private readonly client: MobileNetworkManagementClient;

  /**
   * Initialize a new instance of the class RoutingInfoModels class.
   * @param client Reference to the service client
   */
  constructor(client: MobileNetworkManagementClient) {
    this.client = client;
  }

  /**
   * List all of the routing information for the packet core.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param packetCoreControlPlaneName The name of the packet core control plane.
   * @param options The options parameters.
   */
  public listByPacketCoreControlPlane(
    resourceGroupName: string,
    packetCoreControlPlaneName: string,
    options?: RoutingInfoModelsListByPacketCoreControlPlaneOptionalParams,
  ): PagedAsyncIterableIterator<RoutingInfoModel> {
    const iter = this.listByPacketCoreControlPlanePagingAll(
      resourceGroupName,
      packetCoreControlPlaneName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByPacketCoreControlPlanePagingPage(
          resourceGroupName,
          packetCoreControlPlaneName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByPacketCoreControlPlanePagingPage(
    resourceGroupName: string,
    packetCoreControlPlaneName: string,
    options?: RoutingInfoModelsListByPacketCoreControlPlaneOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<RoutingInfoModel[]> {
    let result: RoutingInfoModelsListByPacketCoreControlPlaneResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByPacketCoreControlPlane(
        resourceGroupName,
        packetCoreControlPlaneName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByPacketCoreControlPlaneNext(
        resourceGroupName,
        packetCoreControlPlaneName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByPacketCoreControlPlanePagingAll(
    resourceGroupName: string,
    packetCoreControlPlaneName: string,
    options?: RoutingInfoModelsListByPacketCoreControlPlaneOptionalParams,
  ): AsyncIterableIterator<RoutingInfoModel> {
    for await (const page of this.listByPacketCoreControlPlanePagingPage(
      resourceGroupName,
      packetCoreControlPlaneName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List all of the routing information for the packet core.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param packetCoreControlPlaneName The name of the packet core control plane.
   * @param options The options parameters.
   */
  private _listByPacketCoreControlPlane(
    resourceGroupName: string,
    packetCoreControlPlaneName: string,
    options?: RoutingInfoModelsListByPacketCoreControlPlaneOptionalParams,
  ): Promise<RoutingInfoModelsListByPacketCoreControlPlaneResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, packetCoreControlPlaneName, options },
      listByPacketCoreControlPlaneOperationSpec,
    );
  }

  /**
   * Get the routing information for the packet core.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param packetCoreControlPlaneName The name of the packet core control plane.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    packetCoreControlPlaneName: string,
    options?: RoutingInfoModelsGetOptionalParams,
  ): Promise<RoutingInfoModelsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, packetCoreControlPlaneName, options },
      getOperationSpec,
    );
  }

  /**
   * ListByPacketCoreControlPlaneNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param packetCoreControlPlaneName The name of the packet core control plane.
   * @param nextLink The nextLink from the previous successful call to the ListByPacketCoreControlPlane
   *                 method.
   * @param options The options parameters.
   */
  private _listByPacketCoreControlPlaneNext(
    resourceGroupName: string,
    packetCoreControlPlaneName: string,
    nextLink: string,
    options?: RoutingInfoModelsListByPacketCoreControlPlaneNextOptionalParams,
  ): Promise<RoutingInfoModelsListByPacketCoreControlPlaneNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, packetCoreControlPlaneName, nextLink, options },
      listByPacketCoreControlPlaneNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByPacketCoreControlPlaneOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}/routingInfo",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RoutingInfoModelListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.packetCoreControlPlaneName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}/routingInfo/default",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RoutingInfoModel,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.packetCoreControlPlaneName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByPacketCoreControlPlaneNextOperationSpec: coreClient.OperationSpec =
  {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
      200: {
        bodyMapper: Mappers.RoutingInfoModelListResult,
      },
      default: {
        bodyMapper: Mappers.ErrorResponse,
      },
    },
    urlParameters: [
      Parameters.$host,
      Parameters.nextLink,
      Parameters.subscriptionId,
      Parameters.resourceGroupName,
      Parameters.packetCoreControlPlaneName,
    ],
    headerParameters: [Parameters.accept],
    serializer,
  };
