/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { BgpPeers } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MicrosoftKubernetesRuntime } from "../microsoftKubernetesRuntime";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  BgpPeer,
  BgpPeersListNextOptionalParams,
  BgpPeersListOptionalParams,
  BgpPeersListResponse,
  BgpPeersGetOptionalParams,
  BgpPeersGetResponse,
  BgpPeersCreateOrUpdateOptionalParams,
  BgpPeersCreateOrUpdateResponse,
  BgpPeersDeleteOptionalParams,
  BgpPeersDeleteResponse,
  BgpPeersListNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing BgpPeers operations. */
export class BgpPeersImpl implements BgpPeers {
  private readonly client: MicrosoftKubernetesRuntime;

  /**
   * Initialize a new instance of the class BgpPeers class.
   * @param client Reference to the service client
   */
  constructor(client: MicrosoftKubernetesRuntime) {
    this.client = client;
  }

  /**
   * List BgpPeer resources by parent
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param options The options parameters.
   */
  public list(
    resourceUri: string,
    options?: BgpPeersListOptionalParams,
  ): PagedAsyncIterableIterator<BgpPeer> {
    const iter = this.listPagingAll(resourceUri, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(resourceUri, options, settings);
      },
    };
  }

  private async *listPagingPage(
    resourceUri: string,
    options?: BgpPeersListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<BgpPeer[]> {
    let result: BgpPeersListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(resourceUri, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(resourceUri, continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    resourceUri: string,
    options?: BgpPeersListOptionalParams,
  ): AsyncIterableIterator<BgpPeer> {
    for await (const page of this.listPagingPage(resourceUri, options)) {
      yield* page;
    }
  }

  /**
   * List BgpPeer resources by parent
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param options The options parameters.
   */
  private _list(
    resourceUri: string,
    options?: BgpPeersListOptionalParams,
  ): Promise<BgpPeersListResponse> {
    return this.client.sendOperationRequest(
      { resourceUri, options },
      listOperationSpec,
    );
  }

  /**
   * Get a BgpPeer
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param bgpPeerName The name of the BgpPeer
   * @param options The options parameters.
   */
  get(
    resourceUri: string,
    bgpPeerName: string,
    options?: BgpPeersGetOptionalParams,
  ): Promise<BgpPeersGetResponse> {
    return this.client.sendOperationRequest(
      { resourceUri, bgpPeerName, options },
      getOperationSpec,
    );
  }

  /**
   * Create a BgpPeer
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param bgpPeerName The name of the BgpPeer
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceUri: string,
    bgpPeerName: string,
    resource: BgpPeer,
    options?: BgpPeersCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<BgpPeersCreateOrUpdateResponse>,
      BgpPeersCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<BgpPeersCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceUri, bgpPeerName, resource, options },
      spec: createOrUpdateOperationSpec,
    });
    const poller = await createHttpPoller<
      BgpPeersCreateOrUpdateResponse,
      OperationState<BgpPeersCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create a BgpPeer
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param bgpPeerName The name of the BgpPeer
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceUri: string,
    bgpPeerName: string,
    resource: BgpPeer,
    options?: BgpPeersCreateOrUpdateOptionalParams,
  ): Promise<BgpPeersCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceUri,
      bgpPeerName,
      resource,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Delete a BgpPeer
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param bgpPeerName The name of the BgpPeer
   * @param options The options parameters.
   */
  async beginDelete(
    resourceUri: string,
    bgpPeerName: string,
    options?: BgpPeersDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<BgpPeersDeleteResponse>,
      BgpPeersDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<BgpPeersDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceUri, bgpPeerName, options },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<
      BgpPeersDeleteResponse,
      OperationState<BgpPeersDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete a BgpPeer
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param bgpPeerName The name of the BgpPeer
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceUri: string,
    bgpPeerName: string,
    options?: BgpPeersDeleteOptionalParams,
  ): Promise<BgpPeersDeleteResponse> {
    const poller = await this.beginDelete(resourceUri, bgpPeerName, options);
    return poller.pollUntilDone();
  }

  /**
   * ListNext
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceUri: string,
    nextLink: string,
    options?: BgpPeersListNextOptionalParams,
  ): Promise<BgpPeersListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceUri, nextLink, options },
      listNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/{resourceUri}/providers/Microsoft.KubernetesRuntime/bgpPeers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BgpPeerListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.resourceUri],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/{resourceUri}/providers/Microsoft.KubernetesRuntime/bgpPeers/{bgpPeerName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BgpPeer,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceUri,
    Parameters.bgpPeerName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/{resourceUri}/providers/Microsoft.KubernetesRuntime/bgpPeers/{bgpPeerName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.BgpPeer,
    },
    201: {
      bodyMapper: Mappers.BgpPeer,
    },
    202: {
      bodyMapper: Mappers.BgpPeer,
    },
    204: {
      bodyMapper: Mappers.BgpPeer,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.resource,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceUri,
    Parameters.bgpPeerName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/{resourceUri}/providers/Microsoft.KubernetesRuntime/bgpPeers/{bgpPeerName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.BgpPeersDeleteHeaders,
    },
    201: {
      headersMapper: Mappers.BgpPeersDeleteHeaders,
    },
    202: {
      headersMapper: Mappers.BgpPeersDeleteHeaders,
    },
    204: {
      headersMapper: Mappers.BgpPeersDeleteHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceUri,
    Parameters.bgpPeerName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BgpPeerListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.resourceUri,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
