/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const BgpPeerListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BgpPeerListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BgpPeer",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData",
        },
      },
    },
  },
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String",
        },
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String",
        },
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime",
        },
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String",
        },
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String",
        },
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail",
        },
      },
    },
  },
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail",
            },
          },
        },
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo",
            },
          },
        },
      },
    },
  },
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } },
        },
      },
    },
  },
};

export const LoadBalancerListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LoadBalancerListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LoadBalancer",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ServiceResourceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServiceResource",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const StorageClassResourceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageClassResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageClassResource",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const StorageClassTypeProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageClassTypeProperties",
    uberParent: "StorageClassTypeProperties",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type",
    },
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const StorageClassResourceUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageClassResourceUpdate",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "StorageClassPropertiesUpdate",
        },
      },
    },
  },
};

export const StorageClassPropertiesUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageClassPropertiesUpdate",
    modelProperties: {
      allowVolumeExpansion: {
        serializedName: "allowVolumeExpansion",
        type: {
          name: "String",
        },
      },
      mountOptions: {
        serializedName: "mountOptions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      accessModes: {
        serializedName: "accessModes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      dataResilience: {
        serializedName: "dataResilience",
        type: {
          name: "String",
        },
      },
      failoverSpeed: {
        serializedName: "failoverSpeed",
        type: {
          name: "String",
        },
      },
      limitations: {
        serializedName: "limitations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      performance: {
        serializedName: "performance",
        type: {
          name: "String",
        },
      },
      priority: {
        serializedName: "priority",
        type: {
          name: "Number",
        },
      },
      typeProperties: {
        serializedName: "typeProperties",
        type: {
          name: "Composite",
          className: "StorageClassTypePropertiesUpdate",
        },
      },
    },
  },
};

export const StorageClassTypePropertiesUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageClassTypePropertiesUpdate",
    modelProperties: {
      backingStorageClassName: {
        serializedName: "backingStorageClassName",
        type: {
          name: "String",
        },
      },
      azureStorageAccountName: {
        serializedName: "azureStorageAccountName",
        type: {
          name: "String",
        },
      },
      azureStorageAccountKey: {
        serializedName: "azureStorageAccountKey",
        type: {
          name: "String",
        },
      },
      server: {
        serializedName: "server",
        type: {
          name: "String",
        },
      },
      share: {
        serializedName: "share",
        type: {
          name: "String",
        },
      },
      subDir: {
        serializedName: "subDir",
        type: {
          name: "String",
        },
      },
      mountPermissions: {
        serializedName: "mountPermissions",
        type: {
          name: "String",
        },
      },
      onDelete: {
        serializedName: "onDelete",
        type: {
          name: "String",
        },
      },
      source: {
        serializedName: "source",
        type: {
          name: "String",
        },
      },
      username: {
        serializedName: "username",
        type: {
          name: "String",
        },
      },
      password: {
        serializedName: "password",
        type: {
          name: "String",
        },
      },
      domain: {
        serializedName: "domain",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      isDataAction: {
        serializedName: "isDataAction",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay",
        },
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      actionType: {
        serializedName: "actionType",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties,
    },
  },
};

export const BlobStorageClassTypeProperties: coreClient.CompositeMapper = {
  serializedName: "Blob",
  type: {
    name: "Composite",
    className: "BlobStorageClassTypeProperties",
    uberParent: "StorageClassTypeProperties",
    polymorphicDiscriminator:
      StorageClassTypeProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...StorageClassTypeProperties.type.modelProperties,
      azureStorageAccountName: {
        serializedName: "azureStorageAccountName",
        required: true,
        type: {
          name: "String",
        },
      },
      azureStorageAccountKey: {
        serializedName: "azureStorageAccountKey",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const NativeStorageClassTypeProperties: coreClient.CompositeMapper = {
  serializedName: "Native",
  type: {
    name: "Composite",
    className: "NativeStorageClassTypeProperties",
    uberParent: "StorageClassTypeProperties",
    polymorphicDiscriminator:
      StorageClassTypeProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...StorageClassTypeProperties.type.modelProperties,
    },
  },
};

export const NfsStorageClassTypeProperties: coreClient.CompositeMapper = {
  serializedName: "NFS",
  type: {
    name: "Composite",
    className: "NfsStorageClassTypeProperties",
    uberParent: "StorageClassTypeProperties",
    polymorphicDiscriminator:
      StorageClassTypeProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...StorageClassTypeProperties.type.modelProperties,
      server: {
        serializedName: "server",
        required: true,
        type: {
          name: "String",
        },
      },
      share: {
        serializedName: "share",
        required: true,
        type: {
          name: "String",
        },
      },
      subDir: {
        serializedName: "subDir",
        type: {
          name: "String",
        },
      },
      mountPermissions: {
        serializedName: "mountPermissions",
        type: {
          name: "String",
        },
      },
      onDelete: {
        serializedName: "onDelete",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const RwxStorageClassTypeProperties: coreClient.CompositeMapper = {
  serializedName: "RWX",
  type: {
    name: "Composite",
    className: "RwxStorageClassTypeProperties",
    uberParent: "StorageClassTypeProperties",
    polymorphicDiscriminator:
      StorageClassTypeProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...StorageClassTypeProperties.type.modelProperties,
      backingStorageClassName: {
        serializedName: "backingStorageClassName",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SmbStorageClassTypeProperties: coreClient.CompositeMapper = {
  serializedName: "SMB",
  type: {
    name: "Composite",
    className: "SmbStorageClassTypeProperties",
    uberParent: "StorageClassTypeProperties",
    polymorphicDiscriminator:
      StorageClassTypeProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...StorageClassTypeProperties.type.modelProperties,
      source: {
        serializedName: "source",
        required: true,
        type: {
          name: "String",
        },
      },
      subDir: {
        serializedName: "subDir",
        type: {
          name: "String",
        },
      },
      username: {
        serializedName: "username",
        type: {
          name: "String",
        },
      },
      password: {
        serializedName: "password",
        type: {
          name: "String",
        },
      },
      domain: {
        serializedName: "domain",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const BgpPeer: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BgpPeer",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      myAsn: {
        serializedName: "properties.myAsn",
        type: {
          name: "Number",
        },
      },
      peerAsn: {
        serializedName: "properties.peerAsn",
        type: {
          name: "Number",
        },
      },
      peerAddress: {
        serializedName: "properties.peerAddress",
        type: {
          name: "String",
        },
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const LoadBalancer: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LoadBalancer",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      addresses: {
        serializedName: "properties.addresses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      serviceSelector: {
        serializedName: "properties.serviceSelector",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      advertiseMode: {
        serializedName: "properties.advertiseMode",
        type: {
          name: "String",
        },
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ServiceResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceResource",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      rpObjectId: {
        serializedName: "properties.rpObjectId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const StorageClassResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageClassResource",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      allowVolumeExpansion: {
        serializedName: "properties.allowVolumeExpansion",
        type: {
          name: "String",
        },
      },
      mountOptions: {
        serializedName: "properties.mountOptions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      provisioner: {
        serializedName: "properties.provisioner",
        type: {
          name: "String",
        },
      },
      volumeBindingMode: {
        serializedName: "properties.volumeBindingMode",
        type: {
          name: "String",
        },
      },
      accessModes: {
        serializedName: "properties.accessModes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      dataResilience: {
        serializedName: "properties.dataResilience",
        type: {
          name: "String",
        },
      },
      failoverSpeed: {
        serializedName: "properties.failoverSpeed",
        type: {
          name: "String",
        },
      },
      limitations: {
        serializedName: "properties.limitations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      performance: {
        serializedName: "properties.performance",
        type: {
          name: "String",
        },
      },
      priority: {
        serializedName: "properties.priority",
        type: {
          name: "Number",
        },
      },
      typeProperties: {
        serializedName: "properties.typeProperties",
        type: {
          name: "Composite",
          className: "StorageClassTypeProperties",
        },
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const BgpPeersCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BgpPeersCreateOrUpdateHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const BgpPeersDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BgpPeersDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const LoadBalancersCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LoadBalancersCreateOrUpdateHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const LoadBalancersDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LoadBalancersDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const StorageClassCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageClassCreateOrUpdateHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const StorageClassUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageClassUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const StorageClassDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageClassDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export let discriminators = {
  StorageClassTypeProperties: StorageClassTypeProperties,
  "StorageClassTypeProperties.Blob": BlobStorageClassTypeProperties,
  "StorageClassTypeProperties.Native": NativeStorageClassTypeProperties,
  "StorageClassTypeProperties.NFS": NfsStorageClassTypeProperties,
  "StorageClassTypeProperties.RWX": RwxStorageClassTypeProperties,
  "StorageClassTypeProperties.SMB": SmbStorageClassTypeProperties,
};
