/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Flows } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { CtsrpClient } from "../ctsrpClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  Flow,
  FlowsListByResourceGroupNextOptionalParams,
  FlowsListByResourceGroupOptionalParams,
  FlowsListBySubscriptionNextOptionalParams,
  FlowsListBySubscriptionOptionalParams,
  FlowsGetOptionalParams,
  FlowsGetResponse,
  FlowsCreateOrUpdateOptionalParams,
  FlowsCreateOrUpdateResponse,
  FlowsDeleteOptionalParams,
  FlowsPatch,
  FlowsUpdateOptionalParams,
  FlowsUpdateResponse,
  FlowsEnableOptionalParams,
  FlowsEnableResponse,
  FlowsDisableOptionalParams,
  FlowsDisableResponse,
  FlowsListByResourceGroupResponse,
  FlowsListBySubscriptionResponse,
  FlowsListByResourceGroupNextResponse,
  FlowsListBySubscriptionNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Flows operations. */
export class FlowsImpl implements Flows {
  private readonly client: CtsrpClient;

  /**
   * Initialize a new instance of the class Flows class.
   * @param client Reference to the service client
   */
  constructor(client: CtsrpClient) {
    this.client = client;
  }

  /**
   * Gets flows in a resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: FlowsListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<Flow> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByResourceGroupPagingPage(resourceGroupName, options);
      }
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: FlowsListByResourceGroupOptionalParams
  ): AsyncIterableIterator<Flow[]> {
    let result = await this._listByResourceGroup(resourceGroupName, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: FlowsListByResourceGroupOptionalParams
  ): AsyncIterableIterator<Flow> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets flows in a subscription
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: FlowsListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<Flow> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listBySubscriptionPagingPage(options);
      }
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: FlowsListBySubscriptionOptionalParams
  ): AsyncIterableIterator<Flow[]> {
    let result = await this._listBySubscription(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listBySubscriptionPagingAll(
    options?: FlowsListBySubscriptionOptionalParams
  ): AsyncIterableIterator<Flow> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Gets flow resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param flowName The name for the flow that is to be onboarded.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    flowName: string,
    options?: FlowsGetOptionalParams
  ): Promise<FlowsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, flowName, options },
      getOperationSpec
    );
  }

  /**
   * Creates or updates the flow resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param flowName The name for the flow that is to be onboarded.
   * @param flow Flow body
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    flowName: string,
    flow: Flow,
    options?: FlowsCreateOrUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<FlowsCreateOrUpdateResponse>,
      FlowsCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<FlowsCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, flowName, flow, options },
      createOrUpdateOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "azure-async-operation"
    });
  }

  /**
   * Creates or updates the flow resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param flowName The name for the flow that is to be onboarded.
   * @param flow Flow body
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    flowName: string,
    flow: Flow,
    options?: FlowsCreateOrUpdateOptionalParams
  ): Promise<FlowsCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      flowName,
      flow,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Deletes the flow resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param flowName The name for the flow that is to be onboarded.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    flowName: string,
    options?: FlowsDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, flowName, options },
      deleteOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "azure-async-operation"
    });
  }

  /**
   * Deletes the flow resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param flowName The name for the flow that is to be onboarded.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    flowName: string,
    options?: FlowsDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(resourceGroupName, flowName, options);
    return poller.pollUntilDone();
  }

  /**
   * Updates the flow resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param flowName The name for the flow that is to be onboarded.
   * @param flow Flow body
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    flowName: string,
    flow: FlowsPatch,
    options?: FlowsUpdateOptionalParams
  ): Promise<
    PollerLike<PollOperationState<FlowsUpdateResponse>, FlowsUpdateResponse>
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<FlowsUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, flowName, flow, options },
      updateOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "azure-async-operation"
    });
  }

  /**
   * Updates the flow resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param flowName The name for the flow that is to be onboarded.
   * @param flow Flow body
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    flowName: string,
    flow: FlowsPatch,
    options?: FlowsUpdateOptionalParams
  ): Promise<FlowsUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      flowName,
      flow,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Enables the specified flow.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param flowName The name for the flow that is to be onboarded.
   * @param options The options parameters.
   */
  async beginEnable(
    resourceGroupName: string,
    flowName: string,
    options?: FlowsEnableOptionalParams
  ): Promise<
    PollerLike<PollOperationState<FlowsEnableResponse>, FlowsEnableResponse>
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<FlowsEnableResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, flowName, options },
      enableOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "azure-async-operation"
    });
  }

  /**
   * Enables the specified flow.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param flowName The name for the flow that is to be onboarded.
   * @param options The options parameters.
   */
  async beginEnableAndWait(
    resourceGroupName: string,
    flowName: string,
    options?: FlowsEnableOptionalParams
  ): Promise<FlowsEnableResponse> {
    const poller = await this.beginEnable(resourceGroupName, flowName, options);
    return poller.pollUntilDone();
  }

  /**
   * Disables the specified flow
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param flowName The name for the flow that is to be onboarded.
   * @param options The options parameters.
   */
  async beginDisable(
    resourceGroupName: string,
    flowName: string,
    options?: FlowsDisableOptionalParams
  ): Promise<
    PollerLike<PollOperationState<FlowsDisableResponse>, FlowsDisableResponse>
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<FlowsDisableResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, flowName, options },
      disableOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "azure-async-operation"
    });
  }

  /**
   * Disables the specified flow
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param flowName The name for the flow that is to be onboarded.
   * @param options The options parameters.
   */
  async beginDisableAndWait(
    resourceGroupName: string,
    flowName: string,
    options?: FlowsDisableOptionalParams
  ): Promise<FlowsDisableResponse> {
    const poller = await this.beginDisable(
      resourceGroupName,
      flowName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Gets flows in a resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: FlowsListByResourceGroupOptionalParams
  ): Promise<FlowsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec
    );
  }

  /**
   * Gets flows in a subscription
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: FlowsListBySubscriptionOptionalParams
  ): Promise<FlowsListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: FlowsListByResourceGroupNextOptionalParams
  ): Promise<FlowsListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec
    );
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: FlowsListBySubscriptionNextOptionalParams
  ): Promise<FlowsListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cts/flows/{flowName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Flow
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.flowName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cts/flows/{flowName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Flow
    },
    201: {
      bodyMapper: Mappers.Flow
    },
    202: {
      bodyMapper: Mappers.Flow
    },
    204: {
      bodyMapper: Mappers.Flow
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.flow,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.flowName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cts/flows/{flowName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.flowName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cts/flows/{flowName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Flow
    },
    201: {
      bodyMapper: Mappers.Flow
    },
    202: {
      bodyMapper: Mappers.Flow
    },
    204: {
      bodyMapper: Mappers.Flow
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.flow1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.flowName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const enableOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cts/flows/{flowName}/enable",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Flow
    },
    201: {
      bodyMapper: Mappers.Flow
    },
    202: {
      bodyMapper: Mappers.Flow
    },
    204: {
      bodyMapper: Mappers.Flow
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.flowName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const disableOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cts/flows/{flowName}/disable",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Flow
    },
    201: {
      bodyMapper: Mappers.Flow
    },
    202: {
      bodyMapper: Mappers.Flow
    },
    204: {
      bodyMapper: Mappers.Flow
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.flowName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cts/flows",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.FlowsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Cts/flows",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.FlowsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.FlowsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.FlowsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
