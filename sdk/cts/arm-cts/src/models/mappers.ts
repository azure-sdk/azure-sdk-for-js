/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const FlowProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FlowProperties",
    modelProperties: {
      acceptableUsePolicyForm: {
        serializedName: "acceptableUsePolicyForm",
        type: {
          name: "String"
        }
      },
      averageDailyData: {
        serializedName: "averageDailyData",
        type: {
          name: "Number"
        }
      },
      connection: {
        serializedName: "connection",
        type: {
          name: "Composite",
          className: "SelectedResource"
        }
      },
      dataflowGuid: {
        serializedName: "dataflowGuid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      storageLocation: {
        serializedName: "storageLocation",
        type: {
          name: "String"
        }
      },
      dataTypes: {
        serializedName: "dataTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      dataUse: {
        serializedName: "dataUse",
        type: {
          name: "String"
        }
      },
      destination: {
        serializedName: "destination",
        type: {
          name: "String"
        }
      },
      email: {
        serializedName: "email",
        type: {
          name: "String"
        }
      },
      incidentNumber: {
        serializedName: "incidentNumber",
        type: {
          name: "Number"
        }
      },
      accessForManualTransfers: {
        serializedName: "accessForManualTransfers",
        type: {
          name: "String"
        }
      },
      keyVaultUri: {
        serializedName: "keyVaultUri",
        type: {
          name: "String"
        }
      },
      usage: {
        serializedName: "usage",
        type: {
          name: "String"
        }
      },
      manualUsersStatus: {
        serializedName: "manualUsersStatus",
        type: {
          name: "String"
        }
      },
      maxData: {
        serializedName: "maxData",
        type: {
          name: "Number"
        }
      },
      origin: {
        serializedName: "origin",
        type: {
          name: "String"
        }
      },
      primaryContactAlias: {
        serializedName: "primaryContactAlias",
        type: {
          name: "String"
        }
      },
      secondaryContactsAliases: {
        serializedName: "secondaryContactsAliases",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      serviceName: {
        serializedName: "serviceName",
        type: {
          name: "String"
        }
      },
      serviceTreeId: {
        serializedName: "serviceTreeId",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      storageAccountName: {
        serializedName: "storageAccountName",
        required: true,
        type: {
          name: "String"
        }
      },
      storageContainerName: {
        serializedName: "storageContainerName",
        required: true,
        type: {
          name: "String"
        }
      },
      storageContainerType: {
        serializedName: "storageContainerType",
        required: true,
        type: {
          name: "String"
        }
      },
      subscriptionId: {
        serializedName: "subscriptionId",
        type: {
          name: "String"
        }
      },
      title: {
        serializedName: "title",
        type: {
          name: "String"
        }
      },
      useCase: {
        serializedName: "useCase",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SelectedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SelectedResource",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      subscriptionName: {
        serializedName: "subscriptionName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Plan: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Plan",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      publisher: {
        serializedName: "publisher",
        required: true,
        type: {
          name: "String"
        }
      },
      product: {
        serializedName: "product",
        required: true,
        type: {
          name: "String"
        }
      },
      promotionCode: {
        serializedName: "promotionCode",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail"
            }
          }
        }
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const FlowsPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FlowsPatch",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const FlowsListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FlowsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Flow"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConnectionProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionProperties",
    modelProperties: {
      remoteCloud: {
        serializedName: "remoteCloud",
        required: true,
        type: {
          name: "String"
        }
      },
      justification: {
        serializedName: "justification",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      statusReason: {
        serializedName: "statusReason",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConnectionsPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionsPatch",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const ConnectionsListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Connection"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PipelineProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PipelineProperties",
    modelProperties: {
      remoteCloud: {
        serializedName: "remoteCloud",
        required: true,
        type: {
          name: "String"
        }
      },
      connections: {
        serializedName: "connections",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PipelineConnection"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PipelineConnection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PipelineConnection",
    additionalProperties: { type: { name: "Object" } },
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "PipelineConnectionProperties"
        }
      }
    }
  }
};

export const PipelineConnectionProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PipelineConnectionProperties",
    additionalProperties: { type: { name: "Object" } },
    modelProperties: {
      internalMetadata: {
        serializedName: "internalMetadata",
        type: {
          name: "Composite",
          className: "InternalMetadataProperties"
        }
      }
    }
  }
};

export const InternalMetadataProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InternalMetadataProperties",
    additionalProperties: { type: { name: "Object" } },
    modelProperties: {
      operationStatus: {
        serializedName: "operationStatus",
        type: {
          name: "Composite",
          className: "OperationStatusProperties"
        }
      },
      statusSetBy: {
        serializedName: "statusSetBy",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationStatusProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationStatusProperties",
    modelProperties: {
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PipelinesPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PipelinesPatch",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "PipelinesPatchProperties"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const PipelinesPatchProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PipelinesPatchProperties",
    modelProperties: {
      connections: {
        serializedName: "connections",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PipelineConnection"
            }
          }
        }
      }
    }
  }
};

export const ConnectionBody: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionBody",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      statusReason: {
        serializedName: "statusReason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PipelinesListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PipelinesListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Pipeline"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      actionType: {
        serializedName: "actionType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Flow: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Flow",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "FlowProperties"
        }
      },
      plan: {
        serializedName: "plan",
        type: {
          name: "Composite",
          className: "Plan"
        }
      }
    }
  }
};

export const Connection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Connection",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ConnectionProperties"
        }
      }
    }
  }
};

export const Pipeline: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Pipeline",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "PipelineProperties"
        }
      }
    }
  }
};
