/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** Properties of flow */
export interface FlowProperties {
  /** Link to signed Acceptable Use Policy (AUP) form */
  acceptableUsePolicyForm?: string;
  /** Daily estimate on data size (GB) */
  averageDailyData?: number;
  /** The connection associated with this flow */
  connection: SelectedResource;
  /**
   * Dataflow GUID associated with this flow
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly dataflowGuid?: string;
  /** Data currently stored in CloudVault? */
  storageLocation?: StorageLocation;
  /** List of data types that this Dataflow will service */
  dataTypes?: DataTypes[];
  /** How will the data be used on the high side? */
  dataUse?: string;
  /** What is the destination of this data? (beyond the high-side Storage Account?) */
  destination?: string;
  /** Microsoft corporate e-mail address */
  email?: string;
  /** ICM (Incident Management) number in high side where onboarding details are entered */
  incidentNumber?: number;
  /** Please confirm JIT will be used for manual transfers, whether that be access to the source Storage Container or any service which interacts with the Storage Account */
  accessForManualTransfers?: AccessForManualTransfers;
  /** AME, PME, or TORUS only! AKV Chain Containing SAS Token */
  keyVaultUri?: string;
  /** Does your service have manual upload through the Teleport pipeline */
  usage?: Usage;
  /** Status of manual users */
  manualUsersStatus?: ManualUsersStatus;
  /** Enter the max (99th percentile) data sent in a day (GB) */
  maxData?: number;
  /** What is the system of origin for this data? */
  origin?: string;
  /** Primary contact's alias for this data flow */
  primaryContactAlias?: string;
  /** Secondary contacts' aliases for this dataflow */
  secondaryContactsAliases?: string[];
  /** Service Name */
  serviceName?: string;
  /** Service Tree ID of the service */
  serviceTreeId?: string;
  /** Status of the current flow */
  status?: FlowStatus;
  /** Storage Account */
  storageAccountName: string;
  /** Storage Container */
  storageContainerName: string;
  /** Transfer Storage Blobs or Tables */
  storageContainerType: StorageContainerType;
  /** Subscription ID for the storage account to be onboarded */
  subscriptionId?: string;
  /** Title of flow */
  title?: string;
  /** Use case for this data flow. */
  useCase?: string;
  /**
   * Provisioning state of the flow
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** A resource selected from ARM */
export interface SelectedResource {
  /** Name of the connection */
  name?: string;
  /** Id of the connection */
  id: string;
  /** Location of the connection */
  location?: string;
  /** Name of the subscription with the connection */
  subscriptionName?: string;
}

/** Plan for the resource. */
export interface Plan {
  /** A user defined name of the 3rd Party Artifact that is being procured. */
  name: string;
  /** The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic */
  publisher: string;
  /** The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at the time of Data Market onboarding. */
  product: string;
  /** A publisher provided promotion code as provisioned in Data Market for the said product/artifact. */
  promotionCode?: string;
  /** The version of the desired product/artifact. */
  version?: string;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export interface Resource {
  /**
   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Azure Resource Manager metadata containing createdBy and modifiedBy information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The timestamp of resource last modification (UTC) */
  lastModifiedAt?: Date;
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export interface ErrorResponse {
  /** The error object. */
  error?: ErrorDetail;
}

/** The error detail. */
export interface ErrorDetail {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDetail[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
}

/** The flows resource patch definition. */
export interface FlowsPatch {
  /** Resource tags */
  tags?: { [propertyName: string]: string };
}

/** The flows list result. */
export interface FlowsListResult {
  /** Flows array. */
  value?: Flow[];
  /** Link to next results */
  nextLink?: string;
}

/** Properties of connection */
export interface ConnectionProperties {
  /** Destination cloud of the data to be transferred */
  remoteCloud: string;
  /** Justification for the connection request */
  justification?: string;
  /**
   * Status of the connection
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: Status;
  /**
   * Reason for status
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statusReason?: string;
  /**
   * Provisioning state of the connection
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** The connections resource patch definition. */
export interface ConnectionsPatch {
  /** Resource tags */
  tags?: { [propertyName: string]: string };
}

/** The connections list result. */
export interface ConnectionsListResult {
  /** Connections array. */
  value?: Connection[];
  /** Link to next results */
  nextLink?: string;
}

/** Properties of pipeline */
export interface PipelineProperties {
  /** Remote cloud of the data to be transferred or received */
  remoteCloud: string;
  /**
   * Connections associated with pipeline
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly connections?: PipelineConnection[];
  /**
   * Provisioning state of the pipeline
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** Connection body inside a pipeline */
export interface PipelineConnection {
  /** Describes unknown properties. The value of an unknown property can be of "any" type. */
  [property: string]: any;
  /** Connection id inside pipeline */
  id: string;
  /**
   * Connection name inside pipeline
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Connection type inside pipeline
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Connection location inside pipeline
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly location?: string;
  /**
   * Connection etag inside pipeline
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly etag?: string;
  /**
   * Azure Resource Manager metadata containing createdBy and modifiedBy information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** Connection properties inside pipeline */
  properties?: PipelineConnectionProperties;
}

/** Connection properties inside pipeline */
export interface PipelineConnectionProperties {
  /** Describes unknown properties. The value of an unknown property can be of "any" type. */
  [property: string]: any;
  /** Internal metadata of the connection inside pipeline. */
  internalMetadata?: InternalMetadataProperties;
}

/** Internal metadata of the connection inside pipeline. */
export interface InternalMetadataProperties {
  /** Describes unknown properties. The value of an unknown property can be of "any" type. */
  [property: string]: any;
  /** Operation status associated with the last patch request */
  operationStatus?: OperationStatusProperties;
  /**
   * User that last set the approved status for this connection
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statusSetBy?: string;
}

/** Operation status associated with the last patch request */
export interface OperationStatusProperties {
  /**
   * Operation status for the last patch request for this connection.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: OperationStatusEnum;
  /**
   * Operation status ID of the last patch request for this connection.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Message for the operation for the last patch request for this connection.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
}

/** The pipelines resource patch definition. */
export interface PipelinesPatch {
  /** Properties of pipelines patch body. */
  properties?: PipelinesPatchProperties;
  /** Resource tags */
  tags?: { [propertyName: string]: string };
}

/** Properties of pipelines patch body. */
export interface PipelinesPatchProperties {
  /** Connections associated with pipeline */
  connections?: PipelineConnection[];
}

/** The connection to approve or reject. */
export interface ConnectionBody {
  /** ID of the connection to approve or reject. */
  id: string;
  /** Reason for approval or rejection. */
  statusReason?: string;
}

/** The pipelines list result. */
export interface PipelinesListResult {
  /** Pipelines array. */
  value?: Pipeline[];
  /** Link to next results */
  nextLink?: string;
}

/** A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of results. */
export interface OperationListResult {
  /**
   * List of operations supported by the resource provider
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Operation[];
  /**
   * URL to get the next set of operation list results (if there are any).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Details of a REST API operation, returned from the Resource Provider Operations API */
export interface Operation {
  /**
   * The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for ARM/control-plane operations.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isDataAction?: boolean;
  /** Localized display information for this particular operation. */
  display?: OperationDisplay;
  /**
   * The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is "user,system"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly origin?: Origin;
  /**
   * Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly actionType?: ActionType;
}

/** Localized display information for this particular operation. */
export interface OperationDisplay {
  /**
   * The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft Compute".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provider?: string;
  /**
   * The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job Schedule Collections".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resource?: string;
  /**
   * The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operation?: string;
  /**
   * The short, localized friendly description of the operation; suitable for tool tips and detailed views.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
}

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export type TrackedResource = Resource & {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The geo-location where the resource lives */
  location: string;
};

/** The flow resource definition. */
export type Flow = TrackedResource & {
  /** Properties of flow */
  properties?: FlowProperties;
  /** Plan for the resource. */
  plan?: Plan;
};

/** The connection resource definition. */
export type Connection = TrackedResource & {
  /** Properties of connection */
  properties?: ConnectionProperties;
};

/** The pipeline resource definition. */
export type Pipeline = TrackedResource & {
  /** Properties of pipeline */
  properties?: PipelineProperties;
};

/** Known values of {@link StorageLocation} that the service accepts. */
export enum KnownStorageLocation {
  CloudVault = "CloudVault",
  Other = "Other"
}

/**
 * Defines values for StorageLocation. \
 * {@link KnownStorageLocation} can be used interchangeably with StorageLocation,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **CloudVault** \
 * **Other**
 */
export type StorageLocation = string;

/** Known values of {@link DataTypes} that the service accepts. */
export enum KnownDataTypes {
  OfficialBuilds = "OfficialBuilds",
  VHDs = "VHDs",
  OfficeDocuments = "OfficeDocuments",
  Scripts = "Scripts",
  Json = "JSON",
  Database = "Database",
  Other = "Other"
}

/**
 * Defines values for DataTypes. \
 * {@link KnownDataTypes} can be used interchangeably with DataTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **OfficialBuilds** \
 * **VHDs** \
 * **OfficeDocuments** \
 * **Scripts** \
 * **JSON** \
 * **Database** \
 * **Other**
 */
export type DataTypes = string;

/** Known values of {@link AccessForManualTransfers} that the service accepts. */
export enum KnownAccessForManualTransfers {
  JIT = "JIT",
  None = "None"
}

/**
 * Defines values for AccessForManualTransfers. \
 * {@link KnownAccessForManualTransfers} can be used interchangeably with AccessForManualTransfers,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **JIT** \
 * **None**
 */
export type AccessForManualTransfers = string;

/** Known values of {@link Usage} that the service accepts. */
export enum KnownUsage {
  Manual = "Manual",
  Automatic = "Automatic"
}

/**
 * Defines values for Usage. \
 * {@link KnownUsage} can be used interchangeably with Usage,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Manual** \
 * **Automatic**
 */
export type Usage = string;

/** Known values of {@link ManualUsersStatus} that the service accepts. */
export enum KnownManualUsersStatus {
  Tented = "Tented",
  Standard = "Standard"
}

/**
 * Defines values for ManualUsersStatus. \
 * {@link KnownManualUsersStatus} can be used interchangeably with ManualUsersStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Tented** \
 * **Standard**
 */
export type ManualUsersStatus = string;

/** Known values of {@link FlowStatus} that the service accepts. */
export enum KnownFlowStatus {
  Enabled = "Enabled",
  Disabled = "Disabled"
}

/**
 * Defines values for FlowStatus. \
 * {@link KnownFlowStatus} can be used interchangeably with FlowStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export type FlowStatus = string;

/** Known values of {@link StorageContainerType} that the service accepts. */
export enum KnownStorageContainerType {
  Blob = "Blob",
  Table = "Table"
}

/**
 * Defines values for StorageContainerType. \
 * {@link KnownStorageContainerType} can be used interchangeably with StorageContainerType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Blob** \
 * **Table**
 */
export type StorageContainerType = string;

/** Known values of {@link ProvisioningState} that the service accepts. */
export enum KnownProvisioningState {
  Failed = "Failed",
  Succeeded = "Succeeded",
  Canceled = "Canceled",
  Accepted = "Accepted"
}

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Failed** \
 * **Succeeded** \
 * **Canceled** \
 * **Accepted**
 */
export type ProvisioningState = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  User = "User",
  Application = "Application",
  ManagedIdentity = "ManagedIdentity",
  Key = "Key"
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link Status} that the service accepts. */
export enum KnownStatus {
  InReview = "InReview",
  Approved = "Approved",
  Rejected = "Rejected",
  Accepted = "Accepted"
}

/**
 * Defines values for Status. \
 * {@link KnownStatus} can be used interchangeably with Status,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **InReview** \
 * **Approved** \
 * **Rejected** \
 * **Accepted**
 */
export type Status = string;

/** Known values of {@link OperationStatusEnum} that the service accepts. */
export enum KnownOperationStatusEnum {
  Failed = "Failed",
  Succeeded = "Succeeded"
}

/**
 * Defines values for OperationStatusEnum. \
 * {@link KnownOperationStatusEnum} can be used interchangeably with OperationStatusEnum,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Failed** \
 * **Succeeded**
 */
export type OperationStatusEnum = string;

/** Known values of {@link Origin} that the service accepts. */
export enum KnownOrigin {
  User = "user",
  System = "system",
  UserSystem = "user,system"
}

/**
 * Defines values for Origin. \
 * {@link KnownOrigin} can be used interchangeably with Origin,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **user** \
 * **system** \
 * **user,system**
 */
export type Origin = string;

/** Known values of {@link ActionType} that the service accepts. */
export enum KnownActionType {
  Internal = "Internal"
}

/**
 * Defines values for ActionType. \
 * {@link KnownActionType} can be used interchangeably with ActionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Internal**
 */
export type ActionType = string;

/** Optional parameters. */
export interface FlowsGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type FlowsGetResponse = Flow;

/** Optional parameters. */
export interface FlowsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type FlowsCreateOrUpdateResponse = Flow;

/** Optional parameters. */
export interface FlowsDeleteOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface FlowsUpdateOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type FlowsUpdateResponse = Flow;

/** Optional parameters. */
export interface FlowsEnableOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the enable operation. */
export type FlowsEnableResponse = Flow;

/** Optional parameters. */
export interface FlowsDisableOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the disable operation. */
export type FlowsDisableResponse = Flow;

/** Optional parameters. */
export interface FlowsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type FlowsListByResourceGroupResponse = FlowsListResult;

/** Optional parameters. */
export interface FlowsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type FlowsListBySubscriptionResponse = FlowsListResult;

/** Optional parameters. */
export interface FlowsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type FlowsListByResourceGroupNextResponse = FlowsListResult;

/** Optional parameters. */
export interface FlowsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type FlowsListBySubscriptionNextResponse = FlowsListResult;

/** Optional parameters. */
export interface ConnectionsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ConnectionsGetResponse = Connection;

/** Optional parameters. */
export interface ConnectionsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type ConnectionsCreateOrUpdateResponse = Connection;

/** Optional parameters. */
export interface ConnectionsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ConnectionsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type ConnectionsUpdateResponse = Connection;

/** Optional parameters. */
export interface ConnectionsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type ConnectionsListByResourceGroupResponse = ConnectionsListResult;

/** Optional parameters. */
export interface ConnectionsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type ConnectionsListBySubscriptionResponse = ConnectionsListResult;

/** Optional parameters. */
export interface ConnectionsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type ConnectionsListByResourceGroupNextResponse = ConnectionsListResult;

/** Optional parameters. */
export interface ConnectionsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type ConnectionsListBySubscriptionNextResponse = ConnectionsListResult;

/** Optional parameters. */
export interface PipelinesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type PipelinesGetResponse = Pipeline;

/** Optional parameters. */
export interface PipelinesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type PipelinesCreateOrUpdateResponse = Pipeline;

/** Optional parameters. */
export interface PipelinesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface PipelinesUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type PipelinesUpdateResponse = Pipeline;

/** Optional parameters. */
export interface PipelinesApproveConnectionOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the approveConnection operation. */
export type PipelinesApproveConnectionResponse = Pipeline;

/** Optional parameters. */
export interface PipelinesRejectConnectionOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the rejectConnection operation. */
export type PipelinesRejectConnectionResponse = Pipeline;

/** Optional parameters. */
export interface PipelinesListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type PipelinesListByResourceGroupResponse = PipelinesListResult;

/** Optional parameters. */
export interface PipelinesListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type PipelinesListBySubscriptionResponse = PipelinesListResult;

/** Optional parameters. */
export interface PipelinesListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type PipelinesListByResourceGroupNextResponse = PipelinesListResult;

/** Optional parameters. */
export interface PipelinesListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type PipelinesListBySubscriptionNextResponse = PipelinesListResult;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationListResult;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export interface CtsrpClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
