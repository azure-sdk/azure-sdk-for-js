// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

/** A base model for representing a chat message. */
export interface ChatMessageParent {
  /** The ID of the user who created the message (if applicable). */
  userId?: string;
  /** The ID of the agent who created the message (if applicable). */
  agentId?: string;
  /** A unique run ID, if this message was generated by a run process. */
  agentRunId?: string;
  /** The contents of the message. */
  content: Array<AIContent>;
  /** An optional display name for the author. */
  authorName?: string;
  /** The timestamp (in Unix time) when this message was created. */
  createdAt?: number;
  /** The timestamp (in Unix time) when this message was completed, if applicable. */
  completedAt?: number;
  role: AuthorRole;
}

/** An abstract representation of a structured content item within a chat message. */
export interface AIContentParent {
  type: string;
}

/** A structured chat content item containing plain text. */
export interface TextContent extends AIContentParent {
  type: "text";
  /** The text content. */
  text: string;
  /** A list of annotations in the text content. */
  annotations?: Array<Annotations>;
}

/** Annotations applied to parts of the message or content. */
export interface Annotations {
  /** The type of annotation. */
  type: string;
  /** The tool call ID associated with the annotation. */
  ToolCallId?: string;
  /** The JSON path associated with the annotation. */
  jsonPath?: string;
  /** The URL associated with the annotation. */
  url?: string;
  /** The start position of the annotation. */
  start?: number;
  /** The end position of the annotation. */
  end?: number;
}

/** A structured chat content item containing model refusal information for a structured outputs request. */
export interface RefusalContent extends AIContentParent {
  type: "refusal";
  /** Reason for refusal. */
  refusal: string;
}

/** A structured chat content item containing a content filter. */
export interface ContentFilterContent extends AIContentParent {
  type: "contentFilter";
  /** Content filter data. */
  contentFilter: string;
  /** Whether content was flagged/detected. */
  detected: boolean;
}

/** A structured chat content item containing a file data item. */
export interface FileContent extends AIContentParent {
  type: "file";
  /** The file name for this binary content. */
  fileName?: string;
  /** The MIME type for this binary content. */
  mimeType?: string;
  /** URI where the binary content can be retrieved. */
  uri?: string;
  /** Data URI containing the binary content inlined. */
  dataUri?: string;
  /** Raw bytes for the binary content. */
  data?: string;
}

/** A structured chat content item containing an image reference. */
export interface ImageContent extends AIContentParent {
  type: "image";
  /** Width of the image in pixels (optional). */
  width?: number;
  /** Height of the image in pixels (optional). */
  height?: number;
  /** The file name for this binary content. */
  fileName?: string;
  /** The MIME type for this binary content. */
  mimeType?: string;
  /** URI where the binary content can be retrieved. */
  uri?: string;
  /** Data URI containing the binary content inlined. */
  dataUri?: string;
  /** Raw bytes for the binary content. */
  data?: string;
}

/** A structured chat content item containing an audio reference. */
export interface AudioContent extends AIContentParent {
  type: "audio";
  /** Duration of audio in seconds (optional). */
  duration?: number;
  /** The file name for this binary content. */
  fileName?: string;
  /** The MIME type for this binary content. */
  mimeType?: string;
  /** URI where the binary content can be retrieved. */
  uri?: string;
  /** Data URI containing the binary content inlined. */
  dataUri?: string;
  /** Raw bytes for the binary content. */
  data?: string;
}

/** A structured chat content item containing a video reference. */
export interface VideoContent extends AIContentParent {
  type: "video";
  /** Duration of video in seconds (optional). */
  duration?: number;
  /** Width of video in pixels (optional). */
  width?: number;
  /** Height of video in pixels (optional). */
  height?: number;
  /** The file name for this binary content. */
  fileName?: string;
  /** The MIME type for this binary content. */
  mimeType?: string;
  /** URI where the binary content can be retrieved. */
  uri?: string;
  /** Data URI containing the binary content inlined. */
  dataUri?: string;
  /** Raw bytes for the binary content. */
  data?: string;
}

/** A structured chat content item describing a tool call request. */
export interface ToolCallContent extends AIContentParent {
  type: "toolCall";
  /** The name of the tool to call. */
  name: string;
  /** The unique ID of the tool call. */
  toolCallId: string;
  /** Arguments passed to this tool call, expressed as JSON-like data rather than `unknown`. */
  arguments?: JsonAny;
}

/** A JSON-compatible type that can be a primitive, object, or array. */
export interface JsonAny {
  /** A string value, if present. */
  stringValue?: string;
  /** A 64-bit integer value, if present. */
  intValue?: number;
  /** A floating-point (double precision) value, if present. */
  floatValue?: number;
  /** A boolean value, if present. */
  boolValue?: boolean;
  /** Indicates this represents a JSON null if set to true. */
  nullValue?: boolean;
  /** A JSON array, if present, expressed as an array of JSONAny elements. */
  arrayValue?: Array<JsonAny>;
  /** A JSON object, if present, expressed as a dictionary from string to JSONAny. */
  objectValue?: Record<string, JsonAny>;
}

/** A structured chat content item describing a tool result. */
export interface ToolResultContent extends AIContentParent {
  type: "toolResult";
  /** The results returned from the tool, using JSONAny instead of `unknown`. */
  results?: JsonAny;
}

/** A user message within a chat, always with the 'user' role. */
export interface UserMessage extends ChatMessageParent {
  /** Always 'user' for user messages. */
  role: "user";
  /** The contents of the user message. */
  content: (
    | TextContent
    | ImageContent
    | AudioContent
    | VideoContent
    | FileContent
  )[];
}

/** A developer message within a chat, always with the 'developer' role. */
export interface DeveloperMessage extends ChatMessageParent {
  /** Always 'developer' for developer messages. */
  role: "developer";
  /** The contents of the developer message. */
  content: Array<TextContent>;
}

/** An agent message within a chat, always with the 'agent' role. */
export interface AgentMessage extends ChatMessageParent {
  /** Always 'agent' for agent messages. */
  role: "agent";
  /** The contents of the agent message. */
  content: (
    | TextContent
    | RefusalContent
    | ContentFilterContent
    | ImageContent
    | AudioContent
    | VideoContent
    | FileContent
    | ToolCallContent
  )[];
}

/** A system message within a chat, always with the 'system' role. */
export interface SystemMessage extends ChatMessageParent {
  /** Always 'system' for system messages. */
  role: "system";
  /** The contents of the system message. */
  content: Array<TextContent>;
}

/** A tool message within a chat, always with the 'tool' role. */
export interface ToolMessage extends ChatMessageParent {
  /** The ID of the tool call to which this result pertains. */
  toolCallId: string;
  /** Always 'tool' for tool messages. */
  role: "tool";
  /** The contents of the tool message. */
  content: Array<ToolResultContent>;
}

/** Represents a chat conversation, which can contain multiple messages. */
export interface Conversation {
  /** A list of messages in this conversation. */
  messages: Array<ChatMessage>;
}

/** Options used when creating and an agent or completing a run without an existing agent. */
export interface AgentConfigurationOptions {
  /** The display name of the agent; used for display purposes and sent to the LLM to identify the agent. */
  displayName: string;
  /** The model definition for this agent. This is optional (not needed) when doing a run using persistent agent. */
  agentModel?: AgentModel;
  /** Instructions provided to guide how this agent operates. */
  instructions?: string;
  /** A list of tool definitions available to the agent. */
  tools?: Array<AgentToolDefinition>;
  /** How the agent should choose among provided tools. */
  toolChoice?: ToolChoiceBehavior;
}

/** Represents the model or provider-specific data used by the agent. */
export interface AgentModelParent {
  /** A unique model or deployment ID for this agent model. */
  id: string;
  /** An endpoint where the provider can be reached, if applicable. */
  endpoint?: string;
  /** Provider-specific configuration and options (JSON-like structure). */
  options?: JsonAny;
  provider: string;
}

/** A specialized AgentModel for OpenAI-based providers. */
export interface OpenAIAgentModel extends AgentModelParent {
  /** Identifies this model as coming from an OpenAI-based provider. */
  provider: "openai";
  /** The provider-specific options for this OpenAI-based model. */
  options: OpenAIModelOptions;
}

/** A set of provider-specific configuration and behavior options for OpenAI. */
export interface OpenAIModelOptions {
  /**
   * The sampling temperature to use that controls the apparent creativity of generated completions.
   * Higher values will make output more random while lower values will make results more focused
   * and deterministic.
   * It is not recommended to modify temperature and topP for the same completions request as the
   * interaction of these two settings is difficult to predict.
   */
  temperature?: number;
  /**
   * An alternative to sampling with temperature called nucleus sampling. This value causes the
   * model to consider the results of tokens with the provided probability mass. As an example, a
   * value of 0.15 will cause only the tokens comprising the top 15% of probability mass to be
   * considered.
   * It is not recommended to modify temperature and topP for the same completions request as the
   * interaction of these two settings is difficult to predict.
   */
  topP?: number;
}

/** A specialized AgentModel for Azure-based providers. */
export interface AzureAgentModel extends AgentModelParent {
  /** Identifies this model as coming from an Azure-based provider. */
  provider: "azure";
  /** The provider-specific options for this Azure-based model. */
  options?: AzureModelOptions;
}

/** A set of provider-specific configuration and behavior options for Azure-based models. */
export interface AzureModelOptions {
  /** Identifies this model options object as an Azure-based provider. */
  provider: "azure";
  /**
   * The sampling temperature to use that controls the apparent creativity of generated completions.
   * Higher values will make output more random while lower values will make results more focused
   * and deterministic.
   * It is not recommended to modify temperature and topP for the same completions request as the
   * interaction of these two settings is difficult to predict.
   */
  temperature?: number;
  /**
   * An alternative to sampling with temperature called nucleus sampling. This value causes the
   * model to consider the results of tokens with the provided probability mass. As an example, a
   * value of 0.15 will cause only the tokens comprising the top 15% of probability mass to be
   * considered.
   * It is not recommended to modify temperature and topP for the same completions request as the
   * interaction of these two settings is difficult to predict.
   */
  topP?: number;
}

/** Represents a definition of a tool that an agent may use, used in a polymorphic manner. */
export interface AgentToolDefinitionParent {
  /** Additional options that specify the behavior of this tool (also polymorphic). */
  options?: AgentToolOptions;
  /** A set of overrides for the tool's name, description, or parameters. */
  override?: { name?: string; description?: string; parameters?: JsonSchema };
  type: string;
}

/** Base type for any agent tool-specific options, used in a polymorphic manner. */
export interface AgentToolOptions {
  /** Discriminates the various child 'tool options' types. */
  type: string;
}

/** Represents a JSON schema describing object properties and required fields. */
export interface JsonSchema {
  /** The JSON schema type (e.g., 'object', 'string', 'number'). */
  type: string;
  /** The properties defined in this JSON schema. */
  properties: Record<string, JsonSchema>;
  /** A list of required property names in this schema. */
  required?: string[];
}

/** Definitions for a function-based tool behavior. */
export interface FunctionToolDefinition extends AgentToolDefinitionParent {
  /** Indicates this tool is function-based. */
  type: "Function";
  /** The function/tool name. */
  name: string;
  /** An optional description for the function-based tool. */
  description?: string;
  /** A JSON schema describing the function's parameters. */
  parameters?: JsonSchema;
  /** Indicates whether strict validation is required. */
  strict?: boolean;
}

/** A tool definition for Microsoft Bing grounding. */
export interface BingGroundingToolDefinition extends AgentToolDefinitionParent {
  /** Identifies this as a Bing grounding tool definition. */
  type: "Microsoft.BingGrounding";
  /** The name of the Bing grounding connection. */
  connectionName: string;
}

/** A tool definition for the OpenAI Code Interpreter. */
export interface CodeInterpreterToolDefinition
  extends AgentToolDefinitionParent {
  /** Identifies this as an OpenAI Code Interpreter tool definition. */
  type: "OpenAI.CodeInterpreter";
  /** A list of file IDs this code interpreter requires. */
  fileIds: string[];
}

/** A tool definition for the OpenAI File Search feature. */
export interface FileSearchToolDefinition extends AgentToolDefinitionParent {
  /** Identifies this as an OpenAI File Search tool definition. */
  type: "OpenAI.FileSearch";
  /** The maximum number of search results to return (optional). */
  maxNumResults?: number;
  /** Extra ranking options, including a threshold and a ranker. */
  rankingOptions?: { scoreThreshold?: number; ranker: string };
  /** A list of file IDs to be searched. */
  fileIds: string[];
}

/** A tool definition for an OpenAI-based API described by an OpenAPI specification. */
export interface OpenApiToolDefinition extends AgentToolDefinitionParent {
  /** Identifies this as an OpenAI OpenAPI-based tool definition. */
  type: "OpenAI.OpenApi";
  /** The name of the OpenAPI-based tool. */
  name: string;
  /** A description for the tool. */
  description?: string;
  /** A string containing the raw OpenAPI specification data. */
  openApiSpec: string;
}

/** The base behavior for how an agent chooses among available tools. */
export interface ToolChoiceBehaviorParent {
  type: string;
}

/** Behavior specifying an automatic choice among the given tools. */
export interface AutoToolChoiceBehavior extends ToolChoiceBehaviorParent {
  /** Indicates this behavior is 'auto'. */
  type: "auto";
  /** The tool names from which the agent can automatically choose. */
  toolNames: string[];
}

/** Behavior specifying that the agent must always use the listed tools. */
export interface RequiredToolChoiceBehavior extends ToolChoiceBehaviorParent {
  /** Indicates this behavior is 'required'. */
  type: "required";
  /** The tool names that the agent must use. */
  toolNames: string[];
}

/** Behavior specifying that no tools may be chosen. */
export interface NoneToolChoiceBehavior extends ToolChoiceBehaviorParent {
  /** Indicates this behavior is 'none'. */
  type: "none";
}

/** Represents an AI agent with configuration, instructions, and tool access. */
export interface Agent {
  /** A description of the agent; used for display purposes and to describe the agent. */
  description?: string;
  /** Arbitrary metadata associated with this agent. */
  metadata?: Record<string, string>;
  /** Configuration options for this agent. */
  configurationOptions: AgentConfigurationOptions;
}

/** Options used when creating and an agent or completing a run without an existing agent. */
export interface AgentConfigurationOptions {
  /** The display name of the agent; used for display purposes and sent to the LLM to identify the agent. */
  displayName: string;
  /** The model definition for this agent. This is optional (not needed) when doing a run using persistent agent. */
  agentModel?: AgentModel;
  /** Instructions provided to guide how this agent operates. */
  instructions?: string;
  /** A list of tool definitions available to the agent. */
  tools?: Array<AgentToolDefinition>;
  /** How the agent should choose among provided tools. */
  toolChoice?: ToolChoiceBehavior;
}

/** Parameters for creating a new run request. */
export interface RunInputs {
  /** Unique identifier for the agent responsible for the run. This is optional (not needeed) when doing a run using ephemeral agent. */
  agentId?: string;
  /** The list of input messages for the run. */
  input: Array<ChatMessage>;
  /** Optional identifier for an existing conversation. */
  conversationId?: string;
  /** Optional metadata associated with the run request. */
  metadata?: Record<string, string>;
  /** Optional configuration for run generation. */
  options?: RunOptions;
  /** Identifier for the user making the request. */
  userId?: string;
  /** The agent configuration when not using a previously created agent. */
  agentConfiguration?: AgentConfigurationOptions;
}

/** Represents advanced options for controlling agent runs. */
export interface RunOptions {
  /** Strategy for truncating messages when input exceeds model limits. */
  truncationStrategy?: TruncationStrategy;
}

/** Describes how to truncate messages if they exceed model or provider limits. */
export interface TruncationStrategy {
  /**
   * The type of truncation strategy to apply. Known values: 'auto', 'lastMessages', or a custom string.
   *
   * Possible values: "auto", "lastMessages"
   */
  type: TruncationStrategyType;
  /** The number of most recent messages to retain when using 'lastMessages' strategy. */
  lastMessages?: number;
}

/** Evaluation Definition */
export interface Evaluation {
  /** Data for evaluation. */
  data: InputData;
  /** Display Name for evaluation. It helps to find the evaluation easily in AI Foundry. It does not need to be unique. */
  displayName?: string;
  /** Description of the evaluation. It can be used to store additional information about the evaluation and is mutable. */
  description?: string;
  /** Evaluation's tags. Unlike properties, tags are fully mutable. */
  tags?: Record<string, string>;
  /** Evaluation's properties. Unlike tags, properties are add-only. Once added, a property cannot be removed. */
  properties?: Record<string, string>;
  /** Evaluators to be used for the evaluation. */
  evaluators: Record<string, EvaluatorConfiguration>;
}

/** Abstract data class. */
export interface InputDataParent {
  type: string;
}

/** Dataset as source for evaluation. */
export interface InputDataset extends InputDataParent {
  type: "dataset";
  /** Evaluation input data */
  id: string;
}

/** Evaluator Configuration */
export interface EvaluatorConfiguration {
  /** Identifier of the evaluator. */
  id: string;
  /** Initialization parameters of the evaluator. */
  initParams?: Record<string, unknown>;
  /** Data parameters of the evaluator. */
  dataMapping?: Record<string, string>;
}

/** DatasetVersion Definition */
export interface DatasetVersionParent {
  /** [Required] Uri of the data. Example: https://go.microsoft.com/fwlink/?linkid=2202330 */
  datasetUri: string;
  /** Asset stage */
  stage?: string;
  /** The asset description text. */
  description?: string;
  /** Tag dictionary. Tags can be added, removed, and updated. */
  tags?: Record<string, string>;
  type: DatasetType;
}

/** FileDatasetVersion Definition */
export interface FileDatasetVersion extends DatasetVersionParent {
  /** Dataset type */
  type: "uri_file";
  /** Indicates OpenAI Purpose. FileDatasets created with this field will be compatible with OpenAI-specific features */
  openAIPurpose: string;
}

/** FileDatasetVersion Definition */
export interface FolderDatasetVersion extends DatasetVersionParent {
  /** Dataset type */
  type: "uri_folder";
}

/** Represents a request for a pending upload. */
export interface PendingUploadRequest {
  /** If PendingUploadId is not provided, a random GUID will be used. */
  pendingUploadId?: string;
  /** Name of Azure blob storage connection to use for generating temporary SAS token */
  connectionName?: string;
  /** TemporaryBlobReference is the only supported type. */
  pendingUploadType: "TemporaryBlobReference";
}

/** Index resource Definition */
export interface IndexParent {
  /** Asset stage */
  stage?: string;
  /** The asset description text. */
  description?: string;
  /** Tag dictionary. Tags can be added, removed, and updated. */
  tags?: Record<string, string>;
  type: IndexType;
}

/** Azure AI Search Index Definition */
export interface AzureAISearchIndex extends IndexParent {
  /** Type of index */
  type: "AzureSearch";
  /** Name of connection to Azure AI Search */
  connectionName: string;
  /** Name of index in Azure AI Search resource to attach */
  indexName: string;
}

/** Managed Azure AI Search Index Definition */
export interface ManagedAzureAISearchIndex extends IndexParent {
  /** Type of index */
  type: "ManagedAzureSearch";
  /** Vector store id of managed index */
  vectorStoreId: string;
}

/** CosmosDB Vector Store Index Definition */
export interface CosmosDBIndex extends IndexParent {
  /** Type of index */
  type: "CosmosDBNoSqlVectorStore";
  /** Name of connection to CosmosDB */
  connectionName: string;
  /** Name of the CosmosDB Database */
  databaseName: string;
  /** Name of CosmosDB Container */
  containerName: string;
  /** Embedding model configuration */
  embeddingConfiguration: EmbeddingConfiguration;
}

/** Embedding configuration class */
export interface EmbeddingConfiguration {
  /** Deployment name of embedding model. It can point to a model deployment either in the parent AIServices or a connection. */
  modelDeploymentName: string;
  /** Embedding field */
  embeddingField: string;
}

/** A base model for representing a chat message. */
export type ChatMessage =
  | ChatMessageParent
  | UserMessage
  | DeveloperMessage
  | AgentMessage
  | SystemMessage
  | ToolMessage;
/** An abstract representation of a structured content item within a chat message. */
export type AIContent =
  | AIContentParent
  | TextContent
  | RefusalContent
  | ContentFilterContent
  | FileContent
  | ImageContent
  | AudioContent
  | VideoContent
  | ToolCallContent
  | ToolResultContent;
/** Represents the model or provider-specific data used by the agent. */
export type AgentModel = AgentModelParent | OpenAIAgentModel | AzureAgentModel;
/** Represents a definition of a tool that an agent may use, used in a polymorphic manner. */
export type AgentToolDefinition =
  | AgentToolDefinitionParent
  | FunctionToolDefinition
  | BingGroundingToolDefinition
  | CodeInterpreterToolDefinition
  | FileSearchToolDefinition
  | OpenApiToolDefinition;
/** The base behavior for how an agent chooses among available tools. */
export type ToolChoiceBehavior =
  | ToolChoiceBehaviorParent
  | AutoToolChoiceBehavior
  | RequiredToolChoiceBehavior
  | NoneToolChoiceBehavior;
/** Abstract data class. */
export type InputData = InputDataParent | InputDataset;
/** DatasetVersion Definition */
export type DatasetVersion =
  | DatasetVersionParent
  | FileDatasetVersion
  | FolderDatasetVersion;
/** Index resource Definition */
export type Index =
  | IndexParent
  | AzureAISearchIndex
  | ManagedAzureAISearchIndex
  | CosmosDBIndex;
/** Alias for AuthorRole */
export type AuthorRole = string;
/** Alias for TruncationStrategyType */
export type TruncationStrategyType = string;
/** Alias for ConnectionType */
export type ConnectionType = string;
/** Alias for ListViewType */
export type ListViewType = string;
/** Alias for DatasetType */
export type DatasetType = string;
/** Alias for IndexType */
export type IndexType = string;
