// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

/** A base model for representing a chat message. */
export interface ChatMessageOutputParent {
  /** The ID of the user who created the message (if applicable). */
  userId?: string;
  /** The ID of the agent who created the message (if applicable). */
  agentId?: string;
  /** A unique identifier for this message. */
  readonly messageId: string;
  /** A unique run ID, if this message was generated by a run process. */
  agentRunId?: string;
  /** The thread to which this message belongs. */
  readonly threadId: string;
  /** The contents of the message. */
  content: Array<AIContentOutput>;
  /** An optional display name for the author. */
  authorName?: string;
  /** The timestamp (in Unix time) when this message was created. */
  createdAt?: number;
  /** The timestamp (in Unix time) when this message was completed, if applicable. */
  completedAt?: number;
  role: AuthorRoleOutput;
}

/** An abstract representation of a structured content item within a chat message. */
export interface AIContentOutputParent {
  type: string;
}

/** A structured chat content item containing plain text. */
export interface TextContentOutput extends AIContentOutputParent {
  type: "text";
  /** The text content. */
  text: string;
  /** A list of annotations in the text content. */
  annotations?: Array<AnnotationsOutput>;
}

/** Annotations applied to parts of the message or content. */
export interface AnnotationsOutput {
  /** The type of annotation. */
  type: string;
  /** The tool call ID associated with the annotation. */
  ToolCallId?: string;
  /** The JSON path associated with the annotation. */
  jsonPath?: string;
  /** The URL associated with the annotation. */
  url?: string;
  /** The start position of the annotation. */
  start?: number;
  /** The end position of the annotation. */
  end?: number;
}

/** A structured chat content item containing model refusal information for a structured outputs request. */
export interface RefusalContentOutput extends AIContentOutputParent {
  type: "refusal";
  /** Reason for refusal. */
  refusal: string;
}

/** A structured chat content item containing a content filter. */
export interface ContentFilterContentOutput extends AIContentOutputParent {
  type: "contentFilter";
  /** Content filter data. */
  contentFilter: string;
  /** Whether content was flagged/detected. */
  detected: boolean;
}

/** A structured chat content item containing a file data item. */
export interface FileContentOutput extends AIContentOutputParent {
  type: "file";
  /** The file name for this binary content. */
  fileName?: string;
  /** The MIME type for this binary content. */
  mimeType?: string;
  /** URI where the binary content can be retrieved. */
  uri?: string;
  /** Data URI containing the binary content inlined. */
  dataUri?: string;
  /** Raw bytes for the binary content. */
  data?: string;
}

/** A structured chat content item containing an image reference. */
export interface ImageContentOutput extends AIContentOutputParent {
  type: "image";
  /** Width of the image in pixels (optional). */
  width?: number;
  /** Height of the image in pixels (optional). */
  height?: number;
  /** The file name for this binary content. */
  fileName?: string;
  /** The MIME type for this binary content. */
  mimeType?: string;
  /** URI where the binary content can be retrieved. */
  uri?: string;
  /** Data URI containing the binary content inlined. */
  dataUri?: string;
  /** Raw bytes for the binary content. */
  data?: string;
}

/** A structured chat content item containing an audio reference. */
export interface AudioContentOutput extends AIContentOutputParent {
  type: "audio";
  /** Duration of audio in seconds (optional). */
  duration?: number;
  /** The file name for this binary content. */
  fileName?: string;
  /** The MIME type for this binary content. */
  mimeType?: string;
  /** URI where the binary content can be retrieved. */
  uri?: string;
  /** Data URI containing the binary content inlined. */
  dataUri?: string;
  /** Raw bytes for the binary content. */
  data?: string;
}

/** A structured chat content item containing a video reference. */
export interface VideoContentOutput extends AIContentOutputParent {
  type: "video";
  /** Duration of video in seconds (optional). */
  duration?: number;
  /** Width of video in pixels (optional). */
  width?: number;
  /** Height of video in pixels (optional). */
  height?: number;
  /** The file name for this binary content. */
  fileName?: string;
  /** The MIME type for this binary content. */
  mimeType?: string;
  /** URI where the binary content can be retrieved. */
  uri?: string;
  /** Data URI containing the binary content inlined. */
  dataUri?: string;
  /** Raw bytes for the binary content. */
  data?: string;
}

/** A structured chat content item describing a tool call request. */
export interface ToolCallContentOutput extends AIContentOutputParent {
  type: "toolCall";
  /** The name of the tool to call. */
  name: string;
  /** The unique ID of the tool call. */
  toolCallId: string;
  /** Arguments passed to this tool call, expressed as JSON-like data rather than `unknown`. */
  arguments?: JsonAnyOutput;
}

/** A JSON-compatible type that can be a primitive, object, or array. */
export interface JsonAnyOutput {
  /** A string value, if present. */
  stringValue?: string;
  /** A 64-bit integer value, if present. */
  intValue?: number;
  /** A floating-point (double precision) value, if present. */
  floatValue?: number;
  /** A boolean value, if present. */
  boolValue?: boolean;
  /** Indicates this represents a JSON null if set to true. */
  nullValue?: boolean;
  /** A JSON array, if present, expressed as an array of JSONAny elements. */
  arrayValue?: Array<JsonAnyOutput>;
  /** A JSON object, if present, expressed as a dictionary from string to JSONAny. */
  objectValue?: Record<string, JsonAnyOutput>;
}

/** A structured chat content item describing a tool result. */
export interface ToolResultContentOutput extends AIContentOutputParent {
  type: "toolResult";
  /** The ID of the tool call to which this result pertains. */
  toolCallId: string;
  /** The results returned from the tool, using JSONAny instead of `unknown`. */
  results?: JsonAnyOutput;
}

/** A developer message within a chat, always with the 'developer' role. */
export interface DeveloperMessageOutput extends ChatMessageOutputParent {
  /** Always 'developer' for developer messages. */
  role: "developer";
  /** The contents of the developer message. */
  content: Array<TextContentOutput>;
}

/** A user message within a chat, always with the 'user' role. */
export interface UserMessageOutput extends ChatMessageOutputParent {
  /** Always 'user' for user messages. */
  role: "user";
  /** The contents of the user message. */
  content: (
    | TextContentOutput
    | ImageContentOutput
    | AudioContentOutput
    | VideoContentOutput
    | FileContentOutput
  )[];
}

/** An agent message within a chat, always with the 'agent' role. */
export interface AgentMessageOutput extends ChatMessageOutputParent {
  /** Always 'agent' for agent messages. */
  role: "agent";
  /** The contents of the agent message. */
  content: (
    | TextContentOutput
    | RefusalContentOutput
    | ContentFilterContentOutput
    | ImageContentOutput
    | AudioContentOutput
    | VideoContentOutput
    | FileContentOutput
    | ToolCallContentOutput
  )[];
}

/** A system message within a chat, always with the 'system' role. */
export interface SystemMessageOutput extends ChatMessageOutputParent {
  /** Always 'system' for system messages. */
  role: "system";
  /** The contents of the system message. */
  content: Array<TextContentOutput>;
}

/** A tool message within a chat, always with the 'tool' role. */
export interface ToolMessageOutput extends ChatMessageOutputParent {
  /** Always 'tool' for tool messages. */
  role: "tool";
  /** The contents of the tool message. */
  content: Array<ToolResultContentOutput>;
}

/** Paged collection of ChatMessage items */
export interface PagedChatMessageOutput {
  /** The ChatMessage items on this page */
  value: Array<ChatMessageOutput>;
  /** The link to the next page of items */
  nextLink?: string;
}

/** Represents a chat thread, which can contain multiple messages. */
export interface ThreadOutput {
  /** A unique identifier for this thread. */
  readonly threadId: string;
  /** A list of messages in this thread. */
  messages: Array<ChatMessageOutput>;
}

/** Represents the model or provider-specific data used by the agent. */
export interface AgentModelOutputParent {
  /** A unique model or deployment ID for this agent model. */
  id: string;
  /** An endpoint where the provider can be reached, if applicable. */
  endpoint?: string;
  /** Provider-specific configuration and options (JSON-like structure). */
  options?: JsonAnyOutput;
  provider: string;
}

/** A specialized AgentModel for OpenAI-based providers. */
export interface OpenAIAgentModelOutput extends AgentModelOutputParent {
  /** Identifies this model as coming from an OpenAI-based provider. */
  provider: "openai";
  /** The provider-specific options for this OpenAI-based model. */
  options: OpenAIModelOptionsOutput;
}

/** A set of provider-specific configuration and behavior options for OpenAI. */
export interface OpenAIModelOptionsOutput {
  /**
   * The sampling temperature to use that controls the apparent creativity of generated completions.
   * Higher values will make output more random while lower values will make results more focused
   * and deterministic.
   * It is not recommended to modify temperature and topP for the same completions request as the
   * interaction of these two settings is difficult to predict.
   */
  temperature?: number;
  /**
   * An alternative to sampling with temperature called nucleus sampling. This value causes the
   * model to consider the results of tokens with the provided probability mass. As an example, a
   * value of 0.15 will cause only the tokens comprising the top 15% of probability mass to be
   * considered.
   * It is not recommended to modify temperature and topP for the same completions request as the
   * interaction of these two settings is difficult to predict.
   */
  topP?: number;
}

/** A specialized AgentModel for Azure-based providers. */
export interface AzureAgentModelOutput extends AgentModelOutputParent {
  /** Identifies this model as coming from an Azure-based provider. */
  provider: "azure";
  /** The provider-specific options for this Azure-based model. */
  options?: AzureModelOptionsOutput;
}

/** A set of provider-specific configuration and behavior options for Azure-based models. */
export interface AzureModelOptionsOutput {
  /** Identifies this model options object as an Azure-based provider. */
  provider: "azure";
  /**
   * The sampling temperature to use that controls the apparent creativity of generated completions.
   * Higher values will make output more random while lower values will make results more focused
   * and deterministic.
   * It is not recommended to modify temperature and topP for the same completions request as the
   * interaction of these two settings is difficult to predict.
   */
  temperature?: number;
  /**
   * An alternative to sampling with temperature called nucleus sampling. This value causes the
   * model to consider the results of tokens with the provided probability mass. As an example, a
   * value of 0.15 will cause only the tokens comprising the top 15% of probability mass to be
   * considered.
   * It is not recommended to modify temperature and topP for the same completions request as the
   * interaction of these two settings is difficult to predict.
   */
  topP?: number;
}

/** Represents a definition of a tool that an agent may use, used in a polymorphic manner. */
export interface AgentToolDefinitionOutputParent {
  /** Additional options that specify the behavior of this tool (also polymorphic). */
  options?: AgentToolOptionsOutput;
  /** A set of overrides for the tool's name, description, or parameters. */
  override?: {
    name?: string;
    description?: string;
    parameters?: JsonSchemaOutput;
  };
  type: string;
}

/** Base type for any agent tool-specific options, used in a polymorphic manner. */
export interface AgentToolOptionsOutputParent {
  type: string;
}

/** Options for a function-based tool behavior. */
export interface FunctionToolOptionsOutput
  extends AgentToolOptionsOutputParent {
  /** Indicates this tool is function-based. */
  type: "Function";
  /** The function/tool name. */
  name: string;
  /** An optional description for the function-based tool. */
  description?: string;
  /** A JSON schema describing the function's parameters. */
  parameters?: JsonSchemaOutput;
  /** Indicates whether strict validation is required. */
  strict?: boolean;
}

/** Represents a JSON schema describing object properties and required fields. */
export interface JsonSchemaOutput {
  /** The JSON schema type (e.g., 'object', 'string', 'number'). */
  type: string;
  /** The properties defined in this JSON schema. */
  properties: Record<string, JsonSchemaOutput>;
  /** A list of required property names in this schema. */
  required?: string[];
}

/** A tool definition for Microsoft Bing grounding. */
export interface BingGroundingToolDefinitionOutput
  extends AgentToolDefinitionOutputParent {
  /** Identifies this as a Bing grounding tool definition. */
  type: "Microsoft.BingGrounding";
  /** The name of the Bing grounding connection. */
  connectionName: string;
}

/** A tool definition for the OpenAI Code Interpreter. */
export interface CodeInterpreterToolDefinitionOutput
  extends AgentToolDefinitionOutputParent {
  /** Identifies this as an OpenAI Code Interpreter tool definition. */
  type: "OpenAI.CodeInterpreter";
  /** A list of file IDs this code interpreter requires. */
  fileIds: string[];
}

/** A tool definition for the OpenAI File Search feature. */
export interface FileSearchToolDefinitionOutput
  extends AgentToolDefinitionOutputParent {
  /** Identifies this as an OpenAI File Search tool definition. */
  type: "OpenAI.FileSearch";
  /** The maximum number of search results to return (optional). */
  maxNumResults?: number;
  /** Extra ranking options, including a threshold and a ranker. */
  rankingOptions?: { scoreThreshold?: number; ranker: string };
  /** A list of file IDs to be searched. */
  fileIds: string[];
}

/** A tool definition for an OpenAI-based API described by an OpenAPI specification. */
export interface OpenApiToolDefinitionOutput
  extends AgentToolDefinitionOutputParent {
  /** Identifies this as an OpenAI OpenAPI-based tool definition. */
  type: "OpenAI.OpenApi";
  /** The name of the OpenAPI-based tool. */
  name: string;
  /** A description for the tool. */
  description?: string;
  /** A string containing the raw OpenAPI specification data. */
  openApiSpec: string;
}

/** The base behavior for how an agent chooses among available tools. */
export interface ToolChoiceBehaviorOutputParent {
  type: string;
}

/** Behavior specifying an automatic choice among the given tools. */
export interface AutoToolChoiceBehaviorOutput
  extends ToolChoiceBehaviorOutputParent {
  /** Indicates this behavior is 'auto'. */
  type: "auto";
  /** The tool names from which the agent can automatically choose. */
  toolNames: string[];
}

/** Behavior specifying that the agent must always use the listed tools. */
export interface RequiredToolChoiceBehaviorOutput
  extends ToolChoiceBehaviorOutputParent {
  /** Indicates this behavior is 'required'. */
  type: "required";
  /** The tool names that the agent must use. */
  toolNames: string[];
}

/** Behavior specifying that no tools may be chosen. */
export interface NoneToolChoiceBehaviorOutput
  extends ToolChoiceBehaviorOutputParent {
  /** Indicates this behavior is 'none'. */
  type: "none";
}

/** Represents an AI agent with configuration, instructions, and tool access. */
export interface AgentOutput {
  /** A unique identifier for the agent. */
  readonly agentId: string;
  /** A description of the agent; used for display purposes and to describe the agent. */
  description?: string;
  /** Arbitrary metadata associated with this agent. */
  metadata?: Record<string, string>;
  /** The name of the agent; used for display purposes and sent to the LLM to identify the agent. */
  name?: string;
  /** The model definition for this agent. */
  agentModel: AgentModelOutput;
  /** Instructions provided to guide how this agent operates. */
  instructions?: Array<DeveloperMessageOutput>;
  /** A list of tool definitions available to the agent. */
  tools?: Array<AgentToolDefinitionOutput>;
  /** How the agent should choose among provided tools. */
  toolChoice?: ToolChoiceBehaviorOutput;
}

/** Represents advanced options for controlling agent runs. */
export interface RunOptionsOutput {
  /** Strategy for truncating messages when input exceeds model limits. */
  truncationStrategy?: TruncationStrategyOutput;
}

/** Describes how to truncate messages if they exceed model or provider limits. */
export interface TruncationStrategyOutput {
  /**
   * The type of truncation strategy to apply. Known values: 'auto', 'lastMessages', or a custom string.
   *
   * Possible values: "auto", "lastMessages"
   */
  type: TruncationStrategyTypeOutput;
  /** The number of most recent messages to retain when using 'lastMessages' strategy. */
  lastMessages?: number;
}

/** Parameters for evaluator information. */
export interface EvaluatorInfoOutput {
  /** The ID of the evaluator, e.g. aiservices://groundedness, seccopilot://groundedness */
  id: string;
  /** Evaluation parameters for the evaluator, e.g. threshold, rouge_type. */
  params?: Record<string, string>;
}

/** An agent-generated run record, including both the requested inputs and the final outputs. */
export interface RunOutput {
  /** Unique identifier for the agent responsible for the run. */
  agentId: string;
  /** Unique identifier for this run. */
  readonly runId: string;
  /** Timestamp when the run was initiated (Unix time). */
  createdAt: number;
  /** Timestamp when the run finished processing (Unix time). */
  completedAt: number;
  /** The inputs that were used to start this run. */
  runInputs: RunInputsOutput;
  /** The final outcome of this run, including status, output messages, token usage. */
  runOutputs: RunOutputsOutput;
  /** Optional configuration for run generation. */
  options?: RunOptionsOutput;
  /** Identifier for the user making the request. */
  userId?: string;
  /** Flag indicating whether to store the run and associated messages. */
  store?: boolean;
}

/** Parameters for creating a new run request. */
export interface RunInputsOutput {
  /** The agent responsible for generating the run. */
  agent: AgentOutput;
  /** The list of input messages for the run. */
  input: Array<ChatMessageOutput>;
  /** Optional identifier for an existing conversation thread. */
  threadId?: string;
  /** Optional metadata associated with the run request. */
  metadata?: Record<string, string>;
  /** Optional configuration for run generation. */
  options?: RunOptionsOutput;
  /** Identifier for the user making the request. */
  userId?: string;
  /** List of evaluator information for continuous evaluation. */
  evaluators?: Array<EvaluatorInfoOutput>;
}

/** Fields describing the final run outcome, including status, output messages, and usage. */
export interface RunOutputsOutput {
  /**
   * Final status of the run request. Known values: 'inProgress', 'incomplete', 'cancelled', 'failed', 'completed' - or custom string.
   *
   * Possible values: "inProgress", "incomplete", "cancelled", "failed", "completed"
   */
  status: RunOutputsStatusOutput;
  /** List of output messages generated by the agent. */
  messages: Array<ChatMessageOutput>;
  /** Token usage details for this run. */
  usage: CompletionUsageOutput;
  /** Details about why the response is incomplete, if applicable. */
  incompleteDetails?: { reason: string };
}

/** Detailed token usage data for a run request. */
export interface CompletionUsageOutput {
  /** Number of run (completion) tokens used over the course of the run. */
  outputTokens: number;
  /** Number of prompt tokens used over the course of the run step. */
  inputTokens: number;
  /** Total number of tokens used (prompt + run). */
  totalTokens: number;
  /** Details of the prompt tokens. */
  inputTokenDetails?: { cachedTokens?: number };
  /** Breakdown of tokens used in a run. */
  outputTokenDetails?: { reasoningTokens?: number };
}

/** Paged collection of Run items */
export interface PagedRunOutput {
  /** The Run items on this page */
  value: Array<RunOutput>;
  /** The link to the next page of items */
  nextLink?: string;
}

/** Response from the listSecrets operation */
export interface ConnectionOutput {
  /** The name of the resource */
  readonly name: string;
  /**
   * Category of the connection
   *
   * Possible values: "AzureOpenAI", "AzureBlob", "CognitiveSearch", "CosmosDB", "ApiKey", "AppInsights", "CustomKeys"
   */
  readonly type: ConnectionTypeOutput;
  /** The connection URL to be used for this service */
  readonly target: string;
  /** Metadata of the connection */
  metadata: Record<string, string>;
}

/** Paged collection of Connection items */
export interface PagedConnectionOutput {
  /** The Connection items on this page */
  value: Array<ConnectionOutput>;
  /** The link to the next page of items */
  nextLink?: string;
}

/** Evaluation Definition */
export interface EvaluationOutput {
  /** Identifier of the evaluation. */
  readonly id: string;
  /** Data for evaluation. */
  data: InputDataOutput;
  /** Display Name for evaluation. It helps to find the evaluation easily in AI Foundry. It does not need to be unique. */
  displayName?: string;
  /** Description of the evaluation. It can be used to store additional information about the evaluation and is mutable. */
  description?: string;
  /** Status of the evaluation. It is set by service and is read-only. */
  readonly status?: string;
  /** Evaluation's tags. Unlike properties, tags are fully mutable. */
  tags?: Record<string, string>;
  /** Evaluation's properties. Unlike tags, properties are add-only. Once added, a property cannot be removed. */
  properties?: Record<string, string>;
  /** Evaluators to be used for the evaluation. */
  evaluators: Record<string, EvaluatorConfigurationOutput>;
}

/** Abstract data class. */
export interface InputDataOutputParent {
  type: string;
}

/** Dataset as source for evaluation. */
export interface InputDatasetOutput extends InputDataOutputParent {
  type: "dataset";
  /** Evaluation input data */
  id: string;
}

/** Evaluator Configuration */
export interface EvaluatorConfigurationOutput {
  /** Identifier of the evaluator. */
  id: string;
  /** Initialization parameters of the evaluator. */
  initParams?: Record<string, any>;
  /** Data parameters of the evaluator. */
  dataMapping?: Record<string, string>;
}

/** Paged collection of Evaluation items */
export interface PagedEvaluationOutput {
  /** The Evaluation items on this page */
  value: Array<EvaluationOutput>;
  /** The link to the next page of items */
  nextLink?: string;
}

/** Paged collection of DatasetVersion items */
export interface PagedDatasetVersionOutput {
  /** The DatasetVersion items on this page */
  value: Array<DatasetVersionOutput>;
  /** The link to the next page of items */
  nextLink?: string;
}

/** DatasetVersion Definition */
export interface DatasetVersionOutputParent {
  /** [Required] Uri of the data. Example: https://go.microsoft.com/fwlink/?linkid=2202330 */
  datasetUri: string;
  /** Indicates if dataset is reference only or managed by dataset service. If true, the underlying data will be deleted when the dataset version is deleted */
  readonly isReference?: boolean;
  /** Asset stage */
  stage?: string;
  /** A unique identifier for the asset, assetId probably? */
  readonly id?: string;
  /** The name of the resource */
  readonly name: string;
  /** The version of the resource */
  readonly version: string;
  /** The asset description text. */
  description?: string;
  /** Tag dictionary. Tags can be added, removed, and updated. */
  tags?: Record<string, string>;
  type: DatasetTypeOutput;
}

/** FileDatasetVersion Definition */
export interface FileDatasetVersionOutput extends DatasetVersionOutputParent {
  /** Dataset type */
  type: "uri_file";
  /** Indicates OpenAI Purpose. FileDatasets created with this field will be compatible with OpenAI-specific features */
  openAIPurpose: string;
}

/** FileDatasetVersion Definition */
export interface FolderDatasetVersionOutput extends DatasetVersionOutputParent {
  /** Dataset type */
  type: "uri_folder";
}

/** Represents the response for a pending upload request */
export interface PendingUploadResponseOutput {
  /** Container-level read, write, list SAS. */
  blobReferenceForConsumption: BlobReferenceForConsumptionOutput;
  /** ID for this upload request. */
  pendingUploadId: string;
  /** Version of dataset to be created if user did not specify version when initially creating upload */
  datasetVersion?: string;
  /** TemporaryBlobReference is the only supported type */
  pendingUploadType: "TemporaryBlobReference";
}

/** Represents a reference to a blob for consumption */
export interface BlobReferenceForConsumptionOutput {
  /** Blob URI path for client to upload data. Example: https://blob.windows.core.net/Container/Path */
  blobUri: string;
  /** ARM ID of the storage account to use. */
  storageAccountArmId: string;
  /** Credential info to access the storage account. */
  credential: SasCredentialOutput;
}

/** SAS Credential definition */
export interface SasCredentialOutput extends BaseCredentialOutputParent {
  /** SAS Token */
  readonly sasToken: string;
  readonly type: "SAS";
}

/** Base Credential definition */
export interface BaseCredentialOutputParent {
  type: CredentialTypeOutput;
}

/** ApiKey Credential definition */
export interface ApiKeyCredentialOutput extends BaseCredentialOutputParent {
  /** API Key */
  readonly apiKey: string;
  readonly type: "ApiKey";
}

/** AAD Credential definition */
export interface AadCredentialOutput extends BaseCredentialOutputParent {
  readonly type: "AAD";
}

/** Paged collection of Index items */
export interface PagedIndexOutput {
  /** The Index items on this page */
  value: Array<IndexOutput>;
  /** The link to the next page of items */
  nextLink?: string;
}

/** Index resource Definition */
export interface IndexOutputParent {
  /** Asset stage */
  stage?: string;
  /** A unique identifier for the asset, assetId probably? */
  readonly id?: string;
  /** The name of the resource */
  readonly name: string;
  /** The version of the resource */
  readonly version: string;
  /** The asset description text. */
  description?: string;
  /** Tag dictionary. Tags can be added, removed, and updated. */
  tags?: Record<string, string>;
  type: IndexTypeOutput;
}

/** Azure AI Search Index Definition */
export interface AzureAISearchIndexOutput extends IndexOutputParent {
  /** Type of index */
  type: "AzureSearch";
  /** Name of connection to Azure AI Search */
  connectionName: string;
  /** Name of index in Azure AI Search resource to attach */
  indexName: string;
}

/** Managed Azure AI Search Index Definition */
export interface ManagedAzureAISearchIndexOutput extends IndexOutputParent {
  /** Type of index */
  type: "ManagedAzureSearch";
  /** Vector store id of managed index */
  vectorStoreId: string;
}

/** CosmosDB Vector Store Index Definition */
export interface CosmosDBIndexOutput extends IndexOutputParent {
  /** Type of index */
  type: "CosmosDBNoSqlVectorStore";
  /** Name of connection to CosmosDB */
  connectionName: string;
  /** Name of the CosmosDB Database */
  databaseName: string;
  /** Name of CosmosDB Container */
  containerName: string;
  /** Embedding model configuration */
  embeddingConfiguration: EmbeddingConfigurationOutput;
}

/** Embedding configuration class */
export interface EmbeddingConfigurationOutput {
  /** Deployment name of embedding model. It can point to a model deployment either in the parent AIServices or a connection. */
  modelDeploymentName: string;
  /** Embedding field */
  embeddingField: string;
}

/** Model Deployment Definition */
export interface DeploymentOutputParent {
  /** Name of the deployment */
  readonly name: string;
  type: DeploymentTypeOutput;
}

/** Paged collection of Deployment items */
export interface PagedDeploymentOutput {
  /** The Deployment items on this page */
  value: Array<DeploymentOutput>;
  /** The link to the next page of items */
  nextLink?: string;
}

/** Model Deployment Definition */
export interface ModelDeploymentOutput extends DeploymentOutputParent {
  /** The type of the deployment */
  type: "ModelDeployment";
  /** Publisher-specific name of the deployed model */
  readonly modelName: string;
  /** Publisher-specific version of the deployed model */
  readonly modelVersion: string;
  /** Name of the deployed model's publisher */
  readonly modelPublisher: string;
  /** Capabilities of deployed model */
  readonly capabilities: Record<string, string>;
  /** Sku of the model deployment */
  readonly sku: SkuOutput;
  /** Name of the connection the deployment comes from */
  readonly connectionName?: string;
}

/** Sku information */
export interface SkuOutput {
  /** Sku capacity */
  capacity: number;
  /** Sku family */
  family: string;
  /** Sku name */
  name: string;
  /** Sku size */
  size: string;
  /** Sku tier */
  tier: string;
}

/** A base model for representing a chat message. */
export type ChatMessageOutput =
  | ChatMessageOutputParent
  | DeveloperMessageOutput
  | UserMessageOutput
  | AgentMessageOutput
  | SystemMessageOutput
  | ToolMessageOutput;
/** An abstract representation of a structured content item within a chat message. */
export type AIContentOutput =
  | AIContentOutputParent
  | TextContentOutput
  | RefusalContentOutput
  | ContentFilterContentOutput
  | FileContentOutput
  | ImageContentOutput
  | AudioContentOutput
  | VideoContentOutput
  | ToolCallContentOutput
  | ToolResultContentOutput;
/** Represents the model or provider-specific data used by the agent. */
export type AgentModelOutput =
  | AgentModelOutputParent
  | OpenAIAgentModelOutput
  | AzureAgentModelOutput;
/** Represents a definition of a tool that an agent may use, used in a polymorphic manner. */
export type AgentToolDefinitionOutput =
  | AgentToolDefinitionOutputParent
  | BingGroundingToolDefinitionOutput
  | CodeInterpreterToolDefinitionOutput
  | FileSearchToolDefinitionOutput
  | OpenApiToolDefinitionOutput;
/** Base type for any agent tool-specific options, used in a polymorphic manner. */
export type AgentToolOptionsOutput =
  | AgentToolOptionsOutputParent
  | FunctionToolOptionsOutput;
/** The base behavior for how an agent chooses among available tools. */
export type ToolChoiceBehaviorOutput =
  | ToolChoiceBehaviorOutputParent
  | AutoToolChoiceBehaviorOutput
  | RequiredToolChoiceBehaviorOutput
  | NoneToolChoiceBehaviorOutput;
/** Abstract data class. */
export type InputDataOutput = InputDataOutputParent | InputDatasetOutput;
/** DatasetVersion Definition */
export type DatasetVersionOutput =
  | DatasetVersionOutputParent
  | FileDatasetVersionOutput
  | FolderDatasetVersionOutput;
/** Base Credential definition */
export type BaseCredentialOutput =
  | BaseCredentialOutputParent
  | ApiKeyCredentialOutput
  | AadCredentialOutput
  | SasCredentialOutput;
/** Index resource Definition */
export type IndexOutput =
  | IndexOutputParent
  | AzureAISearchIndexOutput
  | ManagedAzureAISearchIndexOutput
  | CosmosDBIndexOutput;
/** Model Deployment Definition */
export type DeploymentOutput = DeploymentOutputParent | ModelDeploymentOutput;
/** Alias for AuthorRoleOutput */
export type AuthorRoleOutput = string;
/** Alias for TruncationStrategyTypeOutput */
export type TruncationStrategyTypeOutput = string;
/** Alias for RunOutputsStatusOutput */
export type RunOutputsStatusOutput = string;
/** Alias for ConnectionTypeOutput */
export type ConnectionTypeOutput = string;
/** Alias for DatasetTypeOutput */
export type DatasetTypeOutput = string;
/** Alias for RepeatabilityResultOutput */
export type RepeatabilityResultOutput = "accepted" | "rejected";
/** Alias for CredentialTypeOutput */
export type CredentialTypeOutput = string;
/** Alias for IndexTypeOutput */
export type IndexTypeOutput = string;
/** Alias for DeploymentTypeOutput */
export type DeploymentTypeOutput = string;
