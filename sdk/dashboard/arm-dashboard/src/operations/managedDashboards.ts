/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { ManagedDashboards } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { DashboardManagementClient } from "../dashboardManagementClient.js";
import { SimplePollerLike, OperationState, createHttpPoller } from "@azure/core-lro";
import { createLroSpec } from "../lroImpl.js";
import {
  ManagedDashboard,
  ManagedDashboardsCreateOptionalParams,
  ManagedDashboardsCreateResponse,
  ManagedDashboardUpdateParameters,
  ManagedDashboardsUpdateOptionalParams,
  ManagedDashboardsUpdateResponse,
  ManagedDashboardsDeleteOptionalParams,
} from "../models/index.js";

/** Class containing ManagedDashboards operations. */
export class ManagedDashboardsImpl implements ManagedDashboards {
  private readonly client: DashboardManagementClient;

  /**
   * Initialize a new instance of the class ManagedDashboards class.
   * @param client Reference to the service client
   */
  constructor(client: DashboardManagementClient) {
    this.client = client;
  }

  /**
   * Create or update a dashboard for grafana resource. This API is idempotent, so user can either create
   * a new dashboard or update an existing dashboard.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param dashboardName The name of the Azure Managed Dashboard.
   * @param requestBodyParameters The managed dashboard resource type.
   * @param options The options parameters.
   */
  async beginCreate(
    resourceGroupName: string,
    dashboardName: string,
    requestBodyParameters: ManagedDashboard,
    options?: ManagedDashboardsCreateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ManagedDashboardsCreateResponse>,
      ManagedDashboardsCreateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ManagedDashboardsCreateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        dashboardName,
        requestBodyParameters,
        options,
      },
      spec: createOperationSpec,
    });
    const poller = await createHttpPoller<
      ManagedDashboardsCreateResponse,
      OperationState<ManagedDashboardsCreateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create or update a dashboard for grafana resource. This API is idempotent, so user can either create
   * a new dashboard or update an existing dashboard.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param dashboardName The name of the Azure Managed Dashboard.
   * @param requestBodyParameters The managed dashboard resource type.
   * @param options The options parameters.
   */
  async beginCreateAndWait(
    resourceGroupName: string,
    dashboardName: string,
    requestBodyParameters: ManagedDashboard,
    options?: ManagedDashboardsCreateOptionalParams,
  ): Promise<ManagedDashboardsCreateResponse> {
    const poller = await this.beginCreate(
      resourceGroupName,
      dashboardName,
      requestBodyParameters,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Update a dashboard for Grafana resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param dashboardName The name of the Azure Managed Dashboard.
   * @param requestBodyParameters The parameters for a PATCH request to a managed dashboard resource.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    dashboardName: string,
    requestBodyParameters: ManagedDashboardUpdateParameters,
    options?: ManagedDashboardsUpdateOptionalParams,
  ): Promise<ManagedDashboardsUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, dashboardName, requestBodyParameters, options },
      updateOperationSpec,
    );
  }

  /**
   * Delete a dashboard for Grafana resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param dashboardName The name of the Azure Managed Dashboard.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    dashboardName: string,
    options?: ManagedDashboardsDeleteOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, dashboardName, options },
      deleteOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Dashboard/dashboards/{dashboardName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ManagedDashboard,
    },
    201: {
      bodyMapper: Mappers.ManagedDashboard,
    },
    202: {
      bodyMapper: Mappers.ManagedDashboard,
    },
    204: {
      bodyMapper: Mappers.ManagedDashboard,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.requestBodyParameters6,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dashboardName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Dashboard/dashboards/{dashboardName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.ManagedDashboard,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.requestBodyParameters7,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dashboardName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Dashboard/dashboards/{dashboardName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dashboardName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
