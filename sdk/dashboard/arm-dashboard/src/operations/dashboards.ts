/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { Dashboards } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { DashboardManagementClient } from "../dashboardManagementClient.js";
import {
  ManagedDashboard,
  DashboardsListBySubscriptionNextOptionalParams,
  DashboardsListBySubscriptionOptionalParams,
  DashboardsListBySubscriptionResponse,
  DashboardsListNextOptionalParams,
  DashboardsListOptionalParams,
  DashboardsListResponse,
  DashboardsGetOptionalParams,
  DashboardsGetResponse,
  DashboardsListBySubscriptionNextResponse,
  DashboardsListNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing Dashboards operations. */
export class DashboardsImpl implements Dashboards {
  private readonly client: DashboardManagementClient;

  /**
   * Initialize a new instance of the class Dashboards class.
   * @param client Reference to the service client
   */
  constructor(client: DashboardManagementClient) {
    this.client = client;
  }

  /**
   * List all resources of dashboards under the specified subscription.
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: DashboardsListBySubscriptionOptionalParams,
  ): PagedAsyncIterableIterator<ManagedDashboard> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionPagingPage(options, settings);
      },
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: DashboardsListBySubscriptionOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<ManagedDashboard[]> {
    let result: DashboardsListBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySubscription(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySubscriptionPagingAll(
    options?: DashboardsListBySubscriptionOptionalParams,
  ): AsyncIterableIterator<ManagedDashboard> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * List all resources of dashboards under the specified resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    options?: DashboardsListOptionalParams,
  ): PagedAsyncIterableIterator<ManagedDashboard> {
    const iter = this.listPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(resourceGroupName, options, settings);
      },
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    options?: DashboardsListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<ManagedDashboard[]> {
    let result: DashboardsListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(resourceGroupName, continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    options?: DashboardsListOptionalParams,
  ): AsyncIterableIterator<ManagedDashboard> {
    for await (const page of this.listPagingPage(resourceGroupName, options)) {
      yield* page;
    }
  }

  /**
   * List all resources of dashboards under the specified subscription.
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: DashboardsListBySubscriptionOptionalParams,
  ): Promise<DashboardsListBySubscriptionResponse> {
    return this.client.sendOperationRequest({ options }, listBySubscriptionOperationSpec);
  }

  /**
   * List all resources of dashboards under the specified resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    options?: DashboardsListOptionalParams,
  ): Promise<DashboardsListResponse> {
    return this.client.sendOperationRequest({ resourceGroupName, options }, listOperationSpec);
  }

  /**
   * Get the properties of a specific dashboard for grafana resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param dashboardName The name of the Azure Managed Dashboard.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    dashboardName: string,
    options?: DashboardsGetOptionalParams,
  ): Promise<DashboardsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, dashboardName, options },
      getOperationSpec,
    );
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: DashboardsListBySubscriptionNextOptionalParams,
  ): Promise<DashboardsListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec,
    );
  }

  /**
   * ListNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    nextLink: string,
    options?: DashboardsListNextOptionalParams,
  ): Promise<DashboardsListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Dashboard/dashboards",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ManagedDashboardListResponse,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer,
};
const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Dashboard/dashboards",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ManagedDashboardListResponse,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId, Parameters.resourceGroupName],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Dashboard/dashboards/{dashboardName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ManagedDashboard,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dashboardName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ManagedDashboardListResponse,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ManagedDashboardListResponse,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
