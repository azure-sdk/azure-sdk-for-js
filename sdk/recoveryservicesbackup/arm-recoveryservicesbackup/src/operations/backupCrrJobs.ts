/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { BackupCrrJobs } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { RecoveryServicesBackupClient } from "../recoveryServicesBackupClient";
import {
  JobResource,
  CrrJobRequest,
  BackupCrrJobsListNextOptionalParams,
  BackupCrrJobsListOptionalParams,
  BackupCrrJobsListResponse,
  BackupCrrJobsListNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing BackupCrrJobs operations. */
export class BackupCrrJobsImpl implements BackupCrrJobs {
  private readonly client: RecoveryServicesBackupClient;

  /**
   * Initialize a new instance of the class BackupCrrJobs class.
   * @param client Reference to the service client
   */
  constructor(client: RecoveryServicesBackupClient) {
    this.client = client;
  }

  /**
   * Gets the list of CRR jobs from the target region.
   * @param azureRegion Azure region to hit Api
   * @param parameters Backup CRR Job request
   * @param options The options parameters.
   */
  public list(
    azureRegion: string,
    parameters: CrrJobRequest,
    options?: BackupCrrJobsListOptionalParams,
  ): PagedAsyncIterableIterator<JobResource> {
    const iter = this.listPagingAll(azureRegion, parameters, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(azureRegion, parameters, options, settings);
      },
    };
  }

  private async *listPagingPage(
    azureRegion: string,
    parameters: CrrJobRequest,
    options?: BackupCrrJobsListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<JobResource[]> {
    let result: BackupCrrJobsListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(azureRegion, parameters, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        azureRegion,
        parameters,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    azureRegion: string,
    parameters: CrrJobRequest,
    options?: BackupCrrJobsListOptionalParams,
  ): AsyncIterableIterator<JobResource> {
    for await (const page of this.listPagingPage(
      azureRegion,
      parameters,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Gets the list of CRR jobs from the target region.
   * @param azureRegion Azure region to hit Api
   * @param parameters Backup CRR Job request
   * @param options The options parameters.
   */
  private _list(
    azureRegion: string,
    parameters: CrrJobRequest,
    options?: BackupCrrJobsListOptionalParams,
  ): Promise<BackupCrrJobsListResponse> {
    return this.client.sendOperationRequest(
      { azureRegion, parameters, options },
      listOperationSpec,
    );
  }

  /**
   * ListNext
   * @param azureRegion Azure region to hit Api
   * @param parameters Backup CRR Job request
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    azureRegion: string,
    parameters: CrrJobRequest,
    nextLink: string,
    options?: BackupCrrJobsListNextOptionalParams,
  ): Promise<BackupCrrJobsListNextResponse> {
    return this.client.sendOperationRequest(
      { azureRegion, parameters, nextLink, options },
      listNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.RecoveryServices/locations/{azureRegion}/backupCrrJobs",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.JobResourceList,
    },
    default: {
      bodyMapper: Mappers.NewErrorResponse,
    },
  },
  requestBody: Parameters.parameters1,
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.skipToken,
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.azureRegion,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.JobResourceList,
    },
    default: {
      bodyMapper: Mappers.NewErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.azureRegion,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
