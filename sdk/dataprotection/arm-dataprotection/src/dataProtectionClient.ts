/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreRestPipeline from "@azure/core-rest-pipeline";
import {
  PipelineRequest,
  PipelineResponse,
  SendRequest
} from "@azure/core-rest-pipeline";
import * as coreAuth from "@azure/core-auth";
import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "./pagingHelper";
import {
  BackupVaultsImpl,
  OperationResultImpl,
  OperationStatusImpl,
  OperationStatusBackupVaultContextImpl,
  OperationStatusResourceGroupContextImpl,
  BackupVaultOperationResultsImpl,
  DataProtectionImpl,
  DataProtectionOperationsImpl,
  BackupPoliciesImpl,
  BackupInstancesImpl,
  RecoveryPointsImpl,
  JobsImpl,
  RestorableTimeRangesImpl,
  ExportJobsImpl,
  ExportJobsOperationResultImpl,
  DeletedBackupInstancesImpl,
  ResourceGuardsImpl,
  DppResourceGuardProxyImpl
} from "./operations";
import {
  BackupVaults,
  OperationResult,
  OperationStatus,
  OperationStatusBackupVaultContext,
  OperationStatusResourceGroupContext,
  BackupVaultOperationResults,
  DataProtection,
  DataProtectionOperations,
  BackupPolicies,
  BackupInstances,
  RecoveryPoints,
  Jobs,
  RestorableTimeRanges,
  ExportJobs,
  ExportJobsOperationResult,
  DeletedBackupInstances,
  ResourceGuards,
  DppResourceGuardProxy
} from "./operationsInterfaces";
import * as Parameters from "./models/parameters";
import * as Mappers from "./models/mappers";
import {
  DataProtectionClientOptionalParams,
  AzureBackupRecoveryPointResource,
  FetchSecondaryRPsRequestParameters,
  FetchSecondaryRPsNextOptionalParams,
  FetchSecondaryRPsOptionalParams,
  FetchSecondaryRPsResponse,
  FetchSecondaryRPsNextResponse
} from "./models";

/// <reference lib="esnext.asynciterable" />
export class DataProtectionClient extends coreClient.ServiceClient {
  $host: string;
  apiVersion: string;
  subscriptionId: string;

  /**
   * Initializes a new instance of the DataProtectionClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param subscriptionId The ID of the target subscription. The value must be an UUID.
   * @param options The parameter options
   */
  constructor(
    credentials: coreAuth.TokenCredential,
    subscriptionId: string,
    options?: DataProtectionClientOptionalParams
  ) {
    if (credentials === undefined) {
      throw new Error("'credentials' cannot be null");
    }
    if (subscriptionId === undefined) {
      throw new Error("'subscriptionId' cannot be null");
    }

    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: DataProtectionClientOptionalParams = {
      requestContentType: "application/json; charset=utf-8",
      credential: credentials
    };

    const packageDetails = `azsdk-js-arm-dataprotection/1.1.0-beta.1`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix
      },
      endpoint:
        options.endpoint ?? options.baseUri ?? "https://management.azure.com"
    };
    super(optionsWithDefaults);

    let bearerTokenAuthenticationPolicyFound: boolean = false;
    if (options?.pipeline && options.pipeline.getOrderedPolicies().length > 0) {
      const pipelinePolicies: coreRestPipeline.PipelinePolicy[] = options.pipeline.getOrderedPolicies();
      bearerTokenAuthenticationPolicyFound = pipelinePolicies.some(
        (pipelinePolicy) =>
          pipelinePolicy.name ===
          coreRestPipeline.bearerTokenAuthenticationPolicyName
      );
    }
    if (
      !options ||
      !options.pipeline ||
      options.pipeline.getOrderedPolicies().length == 0 ||
      !bearerTokenAuthenticationPolicyFound
    ) {
      this.pipeline.removePolicy({
        name: coreRestPipeline.bearerTokenAuthenticationPolicyName
      });
      this.pipeline.addPolicy(
        coreRestPipeline.bearerTokenAuthenticationPolicy({
          credential: credentials,
          scopes:
            optionsWithDefaults.credentialScopes ??
            `${optionsWithDefaults.endpoint}/.default`,
          challengeCallbacks: {
            authorizeRequestOnChallenge:
              coreClient.authorizeRequestOnClaimChallenge
          }
        })
      );
    }
    // Parameter assignments
    this.subscriptionId = subscriptionId;

    // Assigning values to Constant parameters
    this.$host = options.$host || "https://management.azure.com";
    this.apiVersion = options.apiVersion || "2023-04-01-preview";
    this.backupVaults = new BackupVaultsImpl(this);
    this.operationResult = new OperationResultImpl(this);
    this.operationStatus = new OperationStatusImpl(this);
    this.operationStatusBackupVaultContext = new OperationStatusBackupVaultContextImpl(
      this
    );
    this.operationStatusResourceGroupContext = new OperationStatusResourceGroupContextImpl(
      this
    );
    this.backupVaultOperationResults = new BackupVaultOperationResultsImpl(
      this
    );
    this.dataProtection = new DataProtectionImpl(this);
    this.dataProtectionOperations = new DataProtectionOperationsImpl(this);
    this.backupPolicies = new BackupPoliciesImpl(this);
    this.backupInstances = new BackupInstancesImpl(this);
    this.recoveryPoints = new RecoveryPointsImpl(this);
    this.jobs = new JobsImpl(this);
    this.restorableTimeRanges = new RestorableTimeRangesImpl(this);
    this.exportJobs = new ExportJobsImpl(this);
    this.exportJobsOperationResult = new ExportJobsOperationResultImpl(this);
    this.deletedBackupInstances = new DeletedBackupInstancesImpl(this);
    this.resourceGuards = new ResourceGuardsImpl(this);
    this.dppResourceGuardProxy = new DppResourceGuardProxyImpl(this);
    this.addCustomApiVersionPolicy(options.apiVersion);
  }

  /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
  private addCustomApiVersionPolicy(apiVersion?: string) {
    if (!apiVersion) {
      return;
    }
    const apiVersionPolicy = {
      name: "CustomApiVersionPolicy",
      async sendRequest(
        request: PipelineRequest,
        next: SendRequest
      ): Promise<PipelineResponse> {
        const param = request.url.split("?");
        if (param.length > 1) {
          const newParams = param[1].split("&").map((item) => {
            if (item.indexOf("api-version") > -1) {
              return "api-version=" + apiVersion;
            } else {
              return item;
            }
          });
          request.url = param[0] + "?" + newParams.join("&");
        }
        return next(request);
      }
    };
    this.pipeline.addPolicy(apiVersionPolicy);
  }

  /**
   * Returns a list of Secondary Recovery Points for a DataSource in a vault, that can be used for Cross
   * Region Restore.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param location
   * @param parameters Request body for operation
   * @param options The options parameters.
   */
  public listFetchSecondaryRPs(
    resourceGroupName: string,
    location: string,
    parameters: FetchSecondaryRPsRequestParameters,
    options?: FetchSecondaryRPsOptionalParams
  ): PagedAsyncIterableIterator<AzureBackupRecoveryPointResource> {
    const iter = this.fetchSecondaryRPsPagingAll(
      resourceGroupName,
      location,
      parameters,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.fetchSecondaryRPsPagingPage(
          resourceGroupName,
          location,
          parameters,
          options,
          settings
        );
      }
    };
  }

  private async *fetchSecondaryRPsPagingPage(
    resourceGroupName: string,
    location: string,
    parameters: FetchSecondaryRPsRequestParameters,
    options?: FetchSecondaryRPsOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<AzureBackupRecoveryPointResource[]> {
    let result: FetchSecondaryRPsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._fetchSecondaryRPs(
        resourceGroupName,
        location,
        parameters,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._fetchSecondaryRPsNext(
        resourceGroupName,
        location,
        parameters,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *fetchSecondaryRPsPagingAll(
    resourceGroupName: string,
    location: string,
    parameters: FetchSecondaryRPsRequestParameters,
    options?: FetchSecondaryRPsOptionalParams
  ): AsyncIterableIterator<AzureBackupRecoveryPointResource> {
    for await (const page of this.fetchSecondaryRPsPagingPage(
      resourceGroupName,
      location,
      parameters,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Returns a list of Secondary Recovery Points for a DataSource in a vault, that can be used for Cross
   * Region Restore.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param location
   * @param parameters Request body for operation
   * @param options The options parameters.
   */
  private _fetchSecondaryRPs(
    resourceGroupName: string,
    location: string,
    parameters: FetchSecondaryRPsRequestParameters,
    options?: FetchSecondaryRPsOptionalParams
  ): Promise<FetchSecondaryRPsResponse> {
    return this.sendOperationRequest(
      { resourceGroupName, location, parameters, options },
      fetchSecondaryRPsOperationSpec
    );
  }

  /**
   * FetchSecondaryRPsNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param location
   * @param parameters Request body for operation
   * @param nextLink The nextLink from the previous successful call to the FetchSecondaryRPs method.
   * @param options The options parameters.
   */
  private _fetchSecondaryRPsNext(
    resourceGroupName: string,
    location: string,
    parameters: FetchSecondaryRPsRequestParameters,
    nextLink: string,
    options?: FetchSecondaryRPsNextOptionalParams
  ): Promise<FetchSecondaryRPsNextResponse> {
    return this.sendOperationRequest(
      { resourceGroupName, location, parameters, nextLink, options },
      fetchSecondaryRPsNextOperationSpec
    );
  }

  backupVaults: BackupVaults;
  operationResult: OperationResult;
  operationStatus: OperationStatus;
  operationStatusBackupVaultContext: OperationStatusBackupVaultContext;
  operationStatusResourceGroupContext: OperationStatusResourceGroupContext;
  backupVaultOperationResults: BackupVaultOperationResults;
  dataProtection: DataProtection;
  dataProtectionOperations: DataProtectionOperations;
  backupPolicies: BackupPolicies;
  backupInstances: BackupInstances;
  recoveryPoints: RecoveryPoints;
  jobs: Jobs;
  restorableTimeRanges: RestorableTimeRanges;
  exportJobs: ExportJobs;
  exportJobsOperationResult: ExportJobsOperationResult;
  deletedBackupInstances: DeletedBackupInstances;
  resourceGuards: ResourceGuards;
  dppResourceGuardProxy: DppResourceGuardProxy;
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const fetchSecondaryRPsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/locations/{location}/fetchSecondaryRecoveryPoints",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AzureBackupRecoveryPointResourceList
    },
    404: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters12,
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.skipToken
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.location
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const fetchSecondaryRPsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AzureBackupRecoveryPointResourceList
    },
    404: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.location,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
