/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { ReplicationProtectionClusters } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SiteRecoveryManagementClient } from "../siteRecoveryManagementClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  ReplicationProtectionCluster,
  ReplicationProtectionClustersListByReplicationProtectionContainersNextOptionalParams,
  ReplicationProtectionClustersListByReplicationProtectionContainersOptionalParams,
  ReplicationProtectionClustersListByReplicationProtectionContainersResponse,
  ReplicationProtectionClustersListNextOptionalParams,
  ReplicationProtectionClustersListOptionalParams,
  ReplicationProtectionClustersListResponse,
  ReplicationProtectionClustersGetOptionalParams,
  ReplicationProtectionClustersGetResponse,
  ReplicationProtectionClustersCreateOptionalParams,
  ReplicationProtectionClustersCreateResponse,
  ReplicationProtectionClustersPurgeOptionalParams,
  ReplicationProtectionClustersGetOperationResultsOptionalParams,
  ReplicationProtectionClustersGetOperationResultsResponse,
  ReplicationProtectionClustersRepairReplicationOptionalParams,
  ClusterUnplannedFailoverInput,
  ReplicationProtectionClustersUnplannedFailoverOptionalParams,
  ReplicationProtectionClustersListByReplicationProtectionContainersNextResponse,
  ReplicationProtectionClustersListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ReplicationProtectionClusters operations. */
export class ReplicationProtectionClustersImpl
  implements ReplicationProtectionClusters {
  private readonly client: SiteRecoveryManagementClient;

  /**
   * Initialize a new instance of the class ReplicationProtectionClusters class.
   * @param client Reference to the service client
   */
  constructor(client: SiteRecoveryManagementClient) {
    this.client = client;
  }

  /**
   * Gets the list of ASR replication protected clusters in the protection container.
   * @param resourceName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param options The options parameters.
   */
  public listByReplicationProtectionContainers(
    resourceName: string,
    resourceGroupName: string,
    fabricName: string,
    protectionContainerName: string,
    options?: ReplicationProtectionClustersListByReplicationProtectionContainersOptionalParams
  ): PagedAsyncIterableIterator<ReplicationProtectionCluster> {
    const iter = this.listByReplicationProtectionContainersPagingAll(
      resourceName,
      resourceGroupName,
      fabricName,
      protectionContainerName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByReplicationProtectionContainersPagingPage(
          resourceName,
          resourceGroupName,
          fabricName,
          protectionContainerName,
          options,
          settings
        );
      }
    };
  }

  private async *listByReplicationProtectionContainersPagingPage(
    resourceName: string,
    resourceGroupName: string,
    fabricName: string,
    protectionContainerName: string,
    options?: ReplicationProtectionClustersListByReplicationProtectionContainersOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<ReplicationProtectionCluster[]> {
    let result: ReplicationProtectionClustersListByReplicationProtectionContainersResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByReplicationProtectionContainers(
        resourceName,
        resourceGroupName,
        fabricName,
        protectionContainerName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByReplicationProtectionContainersNext(
        resourceName,
        resourceGroupName,
        fabricName,
        protectionContainerName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByReplicationProtectionContainersPagingAll(
    resourceName: string,
    resourceGroupName: string,
    fabricName: string,
    protectionContainerName: string,
    options?: ReplicationProtectionClustersListByReplicationProtectionContainersOptionalParams
  ): AsyncIterableIterator<ReplicationProtectionCluster> {
    for await (const page of this.listByReplicationProtectionContainersPagingPage(
      resourceName,
      resourceGroupName,
      fabricName,
      protectionContainerName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets the list of ASR replication protected clusters in the vault.
   * @param resourceName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param options The options parameters.
   */
  public list(
    resourceName: string,
    resourceGroupName: string,
    options?: ReplicationProtectionClustersListOptionalParams
  ): PagedAsyncIterableIterator<ReplicationProtectionCluster> {
    const iter = this.listPagingAll(resourceName, resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(
          resourceName,
          resourceGroupName,
          options,
          settings
        );
      }
    };
  }

  private async *listPagingPage(
    resourceName: string,
    resourceGroupName: string,
    options?: ReplicationProtectionClustersListOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<ReplicationProtectionCluster[]> {
    let result: ReplicationProtectionClustersListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(resourceName, resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        resourceName,
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    resourceName: string,
    resourceGroupName: string,
    options?: ReplicationProtectionClustersListOptionalParams
  ): AsyncIterableIterator<ReplicationProtectionCluster> {
    for await (const page of this.listPagingPage(
      resourceName,
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets the list of ASR replication protected clusters in the protection container.
   * @param resourceName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param options The options parameters.
   */
  private _listByReplicationProtectionContainers(
    resourceName: string,
    resourceGroupName: string,
    fabricName: string,
    protectionContainerName: string,
    options?: ReplicationProtectionClustersListByReplicationProtectionContainersOptionalParams
  ): Promise<
    ReplicationProtectionClustersListByReplicationProtectionContainersResponse
  > {
    return this.client.sendOperationRequest(
      {
        resourceName,
        resourceGroupName,
        fabricName,
        protectionContainerName,
        options
      },
      listByReplicationProtectionContainersOperationSpec
    );
  }

  /**
   * Gets the details of an ASR replication protection cluster.
   * @param resourceName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param fabricName Fabric unique name.
   * @param protectionContainerName Protection container name.
   * @param replicationProtectionClusterName Replication protection cluster name.
   * @param options The options parameters.
   */
  get(
    resourceName: string,
    resourceGroupName: string,
    fabricName: string,
    protectionContainerName: string,
    replicationProtectionClusterName: string,
    options?: ReplicationProtectionClustersGetOptionalParams
  ): Promise<ReplicationProtectionClustersGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceName,
        resourceGroupName,
        fabricName,
        protectionContainerName,
        replicationProtectionClusterName,
        options
      },
      getOperationSpec
    );
  }

  /**
   * The operation to create an ASR replication protection cluster item.
   * @param resourceName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param fabricName Name of the fabric.
   * @param protectionContainerName Protection container name.
   * @param replicationProtectionClusterName A name for the replication protection cluster.
   * @param replicationProtectionCluster Create replication protection cluster Input.
   * @param options The options parameters.
   */
  async beginCreate(
    resourceName: string,
    resourceGroupName: string,
    fabricName: string,
    protectionContainerName: string,
    replicationProtectionClusterName: string,
    replicationProtectionCluster: ReplicationProtectionCluster,
    options?: ReplicationProtectionClustersCreateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<ReplicationProtectionClustersCreateResponse>,
      ReplicationProtectionClustersCreateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ReplicationProtectionClustersCreateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceName,
        resourceGroupName,
        fabricName,
        protectionContainerName,
        replicationProtectionClusterName,
        replicationProtectionCluster,
        options
      },
      spec: createOperationSpec
    });
    const poller = await createHttpPoller<
      ReplicationProtectionClustersCreateResponse,
      OperationState<ReplicationProtectionClustersCreateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * The operation to create an ASR replication protection cluster item.
   * @param resourceName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param fabricName Name of the fabric.
   * @param protectionContainerName Protection container name.
   * @param replicationProtectionClusterName A name for the replication protection cluster.
   * @param replicationProtectionCluster Create replication protection cluster Input.
   * @param options The options parameters.
   */
  async beginCreateAndWait(
    resourceName: string,
    resourceGroupName: string,
    fabricName: string,
    protectionContainerName: string,
    replicationProtectionClusterName: string,
    replicationProtectionCluster: ReplicationProtectionCluster,
    options?: ReplicationProtectionClustersCreateOptionalParams
  ): Promise<ReplicationProtectionClustersCreateResponse> {
    const poller = await this.beginCreate(
      resourceName,
      resourceGroupName,
      fabricName,
      protectionContainerName,
      replicationProtectionClusterName,
      replicationProtectionCluster,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * The operation to purge the replication protection cluster. This operation will force delete the
   * replication protection cluster. Use the remove operation on replication protection cluster to
   * perform a clean disable replication protection cluster.
   * @param resourceName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param replicationProtectionClusterName Replication protection cluster name.
   * @param options The options parameters.
   */
  async beginPurge(
    resourceName: string,
    resourceGroupName: string,
    fabricName: string,
    protectionContainerName: string,
    replicationProtectionClusterName: string,
    options?: ReplicationProtectionClustersPurgeOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceName,
        resourceGroupName,
        fabricName,
        protectionContainerName,
        replicationProtectionClusterName,
        options
      },
      spec: purgeOperationSpec
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * The operation to purge the replication protection cluster. This operation will force delete the
   * replication protection cluster. Use the remove operation on replication protection cluster to
   * perform a clean disable replication protection cluster.
   * @param resourceName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param replicationProtectionClusterName Replication protection cluster name.
   * @param options The options parameters.
   */
  async beginPurgeAndWait(
    resourceName: string,
    resourceGroupName: string,
    fabricName: string,
    protectionContainerName: string,
    replicationProtectionClusterName: string,
    options?: ReplicationProtectionClustersPurgeOptionalParams
  ): Promise<void> {
    const poller = await this.beginPurge(
      resourceName,
      resourceGroupName,
      fabricName,
      protectionContainerName,
      replicationProtectionClusterName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Track the results of an asynchronous operation on the replication protection cluster.
   * @param resourceName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param replicationProtectionClusterName Replication protection cluster name.
   * @param jobId job id to track.
   * @param options The options parameters.
   */
  getOperationResults(
    resourceName: string,
    resourceGroupName: string,
    fabricName: string,
    protectionContainerName: string,
    replicationProtectionClusterName: string,
    jobId: string,
    options?: ReplicationProtectionClustersGetOperationResultsOptionalParams
  ): Promise<ReplicationProtectionClustersGetOperationResultsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceName,
        resourceGroupName,
        fabricName,
        protectionContainerName,
        replicationProtectionClusterName,
        jobId,
        options
      },
      getOperationResultsOperationSpec
    );
  }

  /**
   * The operation to repair replication protection cluster.
   * @param resourceName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param replicationProtectionClusterName Replication protection cluster name.
   * @param options The options parameters.
   */
  async beginRepairReplication(
    resourceName: string,
    resourceGroupName: string,
    fabricName: string,
    protectionContainerName: string,
    replicationProtectionClusterName: string,
    options?: ReplicationProtectionClustersRepairReplicationOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceName,
        resourceGroupName,
        fabricName,
        protectionContainerName,
        replicationProtectionClusterName,
        options
      },
      spec: repairReplicationOperationSpec
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * The operation to repair replication protection cluster.
   * @param resourceName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param replicationProtectionClusterName Replication protection cluster name.
   * @param options The options parameters.
   */
  async beginRepairReplicationAndWait(
    resourceName: string,
    resourceGroupName: string,
    fabricName: string,
    protectionContainerName: string,
    replicationProtectionClusterName: string,
    options?: ReplicationProtectionClustersRepairReplicationOptionalParams
  ): Promise<void> {
    const poller = await this.beginRepairReplication(
      resourceName,
      resourceGroupName,
      fabricName,
      protectionContainerName,
      replicationProtectionClusterName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Operation to initiate a failover of the replication protection cluster.
   * @param resourceName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param fabricName Unique fabric name.
   * @param protectionContainerName Protection container name.
   * @param replicationProtectionClusterName Replication protection cluster name.
   * @param failoverInput Failover input.
   * @param options The options parameters.
   */
  async beginUnplannedFailover(
    resourceName: string,
    resourceGroupName: string,
    fabricName: string,
    protectionContainerName: string,
    replicationProtectionClusterName: string,
    failoverInput: ClusterUnplannedFailoverInput,
    options?: ReplicationProtectionClustersUnplannedFailoverOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceName,
        resourceGroupName,
        fabricName,
        protectionContainerName,
        replicationProtectionClusterName,
        failoverInput,
        options
      },
      spec: unplannedFailoverOperationSpec
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Operation to initiate a failover of the replication protection cluster.
   * @param resourceName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param fabricName Unique fabric name.
   * @param protectionContainerName Protection container name.
   * @param replicationProtectionClusterName Replication protection cluster name.
   * @param failoverInput Failover input.
   * @param options The options parameters.
   */
  async beginUnplannedFailoverAndWait(
    resourceName: string,
    resourceGroupName: string,
    fabricName: string,
    protectionContainerName: string,
    replicationProtectionClusterName: string,
    failoverInput: ClusterUnplannedFailoverInput,
    options?: ReplicationProtectionClustersUnplannedFailoverOptionalParams
  ): Promise<void> {
    const poller = await this.beginUnplannedFailover(
      resourceName,
      resourceGroupName,
      fabricName,
      protectionContainerName,
      replicationProtectionClusterName,
      failoverInput,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Gets the list of ASR replication protected clusters in the vault.
   * @param resourceName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param options The options parameters.
   */
  private _list(
    resourceName: string,
    resourceGroupName: string,
    options?: ReplicationProtectionClustersListOptionalParams
  ): Promise<ReplicationProtectionClustersListResponse> {
    return this.client.sendOperationRequest(
      { resourceName, resourceGroupName, options },
      listOperationSpec
    );
  }

  /**
   * ListByReplicationProtectionContainersNext
   * @param resourceName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByReplicationProtectionContainers method.
   * @param options The options parameters.
   */
  private _listByReplicationProtectionContainersNext(
    resourceName: string,
    resourceGroupName: string,
    fabricName: string,
    protectionContainerName: string,
    nextLink: string,
    options?: ReplicationProtectionClustersListByReplicationProtectionContainersNextOptionalParams
  ): Promise<
    ReplicationProtectionClustersListByReplicationProtectionContainersNextResponse
  > {
    return this.client.sendOperationRequest(
      {
        resourceName,
        resourceGroupName,
        fabricName,
        protectionContainerName,
        nextLink,
        options
      },
      listByReplicationProtectionContainersNextOperationSpec
    );
  }

  /**
   * ListNext
   * @param resourceName The name of the recovery services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceName: string,
    resourceGroupName: string,
    nextLink: string,
    options?: ReplicationProtectionClustersListNextOptionalParams
  ): Promise<ReplicationProtectionClustersListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceName, resourceGroupName, nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByReplicationProtectionContainersOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectionClusters",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReplicationProtectionClusterCollection
    },
    default: {
      bodyMapper: Mappers.ServiceDefaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName1,
    Parameters.protectionContainerName1
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectionClusters/{replicationProtectionClusterName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReplicationProtectionCluster
    },
    default: {
      bodyMapper: Mappers.ServiceDefaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName1,
    Parameters.protectionContainerName1,
    Parameters.replicationProtectionClusterName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectionClusters/{replicationProtectionClusterName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ReplicationProtectionCluster
    },
    201: {
      bodyMapper: Mappers.ReplicationProtectionCluster
    },
    202: {
      bodyMapper: Mappers.ReplicationProtectionCluster
    },
    204: {
      bodyMapper: Mappers.ReplicationProtectionCluster
    },
    default: {
      bodyMapper: Mappers.ServiceDefaultError
    }
  },
  requestBody: Parameters.replicationProtectionCluster,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName1,
    Parameters.protectionContainerName1,
    Parameters.replicationProtectionClusterName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const purgeOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectionClusters/{replicationProtectionClusterName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ServiceDefaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName1,
    Parameters.protectionContainerName1,
    Parameters.replicationProtectionClusterName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationResultsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectionClusters/{replicationProtectionClusterName}/operationresults/{jobId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReplicationProtectionCluster
    },
    default: {
      bodyMapper: Mappers.ServiceDefaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName1,
    Parameters.protectionContainerName1,
    Parameters.replicationProtectionClusterName,
    Parameters.jobId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const repairReplicationOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectionClusters/{replicationProtectionClusterName}/repairReplication",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ServiceDefaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName1,
    Parameters.protectionContainerName1,
    Parameters.replicationProtectionClusterName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const unplannedFailoverOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectionClusters/{replicationProtectionClusterName}/unplannedFailover",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ServiceDefaultError
    }
  },
  requestBody: Parameters.failoverInput2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.fabricName1,
    Parameters.protectionContainerName1,
    Parameters.replicationProtectionClusterName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationProtectionClusters",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReplicationProtectionClusterCollection
    },
    default: {
      bodyMapper: Mappers.ServiceDefaultError
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.skipToken
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByReplicationProtectionContainersNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReplicationProtectionClusterCollection
    },
    default: {
      bodyMapper: Mappers.ServiceDefaultError
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.resourceName,
    Parameters.fabricName1,
    Parameters.protectionContainerName1
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReplicationProtectionClusterCollection
    },
    default: {
      bodyMapper: Mappers.ServiceDefaultError
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
