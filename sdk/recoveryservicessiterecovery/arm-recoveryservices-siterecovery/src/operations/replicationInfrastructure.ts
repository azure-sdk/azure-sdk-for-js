/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { ReplicationInfrastructure } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SiteRecoveryManagementClient } from "../siteRecoveryManagementClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  ReplicationInfrastructureDeleteOptionalParams,
  ReplicationInfrastructureDeleteResponse
} from "../models";

/** Class containing ReplicationInfrastructure operations. */
export class ReplicationInfrastructureImpl
  implements ReplicationInfrastructure {
  private readonly client: SiteRecoveryManagementClient;

  /**
   * Initialize a new instance of the class ReplicationInfrastructure class.
   * @param client Reference to the service client
   */
  constructor(client: SiteRecoveryManagementClient) {
    this.client = client;
  }

  /**
   * Removes the appliance's infrastructure under the fabric.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param resourceName Resource name.
   * @param fabricName Fabric name.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    resourceName: string,
    fabricName: string,
    options?: ReplicationInfrastructureDeleteOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<ReplicationInfrastructureDeleteResponse>,
      ReplicationInfrastructureDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ReplicationInfrastructureDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, resourceName, fabricName, options },
      spec: deleteOperationSpec
    });
    const poller = await createHttpPoller<
      ReplicationInfrastructureDeleteResponse,
      OperationState<ReplicationInfrastructureDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Removes the appliance's infrastructure under the fabric.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param resourceName Resource name.
   * @param fabricName Fabric name.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    resourceName: string,
    fabricName: string,
    options?: ReplicationInfrastructureDeleteOptionalParams
  ): Promise<ReplicationInfrastructureDeleteResponse> {
    const poller = await this.beginDelete(
      resourceGroupName,
      resourceName,
      fabricName,
      options
    );
    return poller.pollUntilDone();
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/removeInfra",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.ReplicationInfrastructureDeleteHeaders
    },
    201: {
      headersMapper: Mappers.ReplicationInfrastructureDeleteHeaders
    },
    202: {
      headersMapper: Mappers.ReplicationInfrastructureDeleteHeaders
    },
    204: {
      headersMapper: Mappers.ReplicationInfrastructureDeleteHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName1,
    Parameters.fabricName1
  ],
  headerParameters: [Parameters.accept],
  serializer
};
