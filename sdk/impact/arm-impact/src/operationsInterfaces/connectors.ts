/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  Connector,
  ConnectorsListBySubscriptionOptionalParams,
  ConnectorsGetOptionalParams,
  ConnectorsGetResponse,
  ConnectorsCreateOrUpdateOptionalParams,
  ConnectorsCreateOrUpdateResponse,
  ConnectorUpdate,
  ConnectorsUpdateOptionalParams,
  ConnectorsUpdateResponse,
  ConnectorsDeleteOptionalParams,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Connectors. */
export interface Connectors {
  /**
   * List Connector resources by subscription ID
   * @param options The options parameters.
   */
  listBySubscription(
    options?: ConnectorsListBySubscriptionOptionalParams,
  ): PagedAsyncIterableIterator<Connector>;
  /**
   * Get a Connector
   * @param connectorName The name of the connector
   * @param options The options parameters.
   */
  get(connectorName: string, options?: ConnectorsGetOptionalParams): Promise<ConnectorsGetResponse>;
  /**
   * Create a Connector
   * @param connectorName The name of the connector
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    connectorName: string,
    resource: Connector,
    options?: ConnectorsCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ConnectorsCreateOrUpdateResponse>,
      ConnectorsCreateOrUpdateResponse
    >
  >;
  /**
   * Create a Connector
   * @param connectorName The name of the connector
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    connectorName: string,
    resource: Connector,
    options?: ConnectorsCreateOrUpdateOptionalParams,
  ): Promise<ConnectorsCreateOrUpdateResponse>;
  /**
   * Update a Connector
   * @param connectorName The name of the connector
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  update(
    connectorName: string,
    properties: ConnectorUpdate,
    options?: ConnectorsUpdateOptionalParams,
  ): Promise<ConnectorsUpdateResponse>;
  /**
   * Delete a Connector
   * @param connectorName The name of the connector
   * @param options The options parameters.
   */
  delete(connectorName: string, options?: ConnectorsDeleteOptionalParams): Promise<void>;
}
