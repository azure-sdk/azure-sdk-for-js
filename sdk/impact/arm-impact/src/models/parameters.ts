/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter,
} from "@azure/core-client";
import {
  Connector as ConnectorMapper,
  ConnectorUpdate as ConnectorUpdateMapper,
  WorkloadImpact as WorkloadImpactMapper,
  Insight as InsightMapper,
} from "../models/mappers";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String",
    },
  },
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2024-05-01-preview",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String",
    },
  },
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    constraints: {
      MinLength: 1,
    },
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const connectorName: OperationURLParameter = {
  parameterPath: "connectorName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9-]{3,24}$"),
    },
    serializedName: "connectorName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String",
    },
  },
};

export const resource: OperationParameter = {
  parameterPath: "resource",
  mapper: ConnectorMapper,
};

export const properties: OperationParameter = {
  parameterPath: "properties",
  mapper: ConnectorUpdateMapper,
};

export const categoryName: OperationQueryParameter = {
  parameterPath: ["options", "categoryName"],
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9.]*[a-zA-Z0-9]{3,180}$"),
      MinLength: 1,
    },
    serializedName: "categoryName",
    type: {
      name: "String",
    },
  },
};

export const resourceType: OperationQueryParameter = {
  parameterPath: ["options", "resourceType"],
  mapper: {
    constraints: {
      MinLength: 1,
    },
    serializedName: "resourceType",
    type: {
      name: "String",
    },
  },
};

export const impactCategoryName: OperationURLParameter = {
  parameterPath: "impactCategoryName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9.]*[a-zA-Z0-9]{3,180}$"),
    },
    serializedName: "impactCategoryName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const workloadImpactName: OperationURLParameter = {
  parameterPath: "workloadImpactName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9-:]*[a-zA-Z0-9]{3,120}$"),
    },
    serializedName: "workloadImpactName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource1: OperationParameter = {
  parameterPath: "resource",
  mapper: WorkloadImpactMapper,
};

export const insightName: OperationURLParameter = {
  parameterPath: "insightName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9.]*[a-zA-Z0-9]{3,180}$"),
    },
    serializedName: "insightName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource2: OperationParameter = {
  parameterPath: "resource",
  mapper: InsightMapper,
};
