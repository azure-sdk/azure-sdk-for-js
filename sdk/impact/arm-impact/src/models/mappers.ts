/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      isDataAction: {
        serializedName: "isDataAction",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay",
        },
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      actionType: {
        serializedName: "actionType",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail",
        },
      },
    },
  },
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail",
            },
          },
        },
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo",
            },
          },
        },
      },
    },
  },
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } },
        },
      },
    },
  },
};

export const ConnectorListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectorListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Connector",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ConnectorProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectorProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      connectorId: {
        serializedName: "connectorId",
        required: true,
        readOnly: true,
        type: {
          name: "String",
        },
      },
      tenantId: {
        serializedName: "tenantId",
        required: true,
        readOnly: true,
        type: {
          name: "String",
        },
      },
      connectorType: {
        serializedName: "connectorType",
        required: true,
        type: {
          name: "String",
        },
      },
      lastRunTimeStamp: {
        serializedName: "lastRunTimeStamp",
        required: true,
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData",
        },
      },
    },
  },
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String",
        },
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String",
        },
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime",
        },
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String",
        },
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String",
        },
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const ConnectorPropertiesUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectorPropertiesUpdate",
    modelProperties: {
      connectorType: {
        serializedName: "connectorType",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const UploadTokenResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UploadTokenResponse",
    modelProperties: {
      uploadUrl: {
        serializedName: "uploadUrl",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ImpactCategoryListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImpactCategoryListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ImpactCategory",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ImpactCategoryProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImpactCategoryProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      categoryId: {
        constraints: {
          Pattern: new RegExp(
            "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}",
          ),
        },
        serializedName: "categoryId",
        required: true,
        type: {
          name: "String",
        },
      },
      parentCategoryId: {
        constraints: {
          Pattern: new RegExp(
            "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}",
          ),
        },
        serializedName: "parentCategoryId",
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "description",
        type: {
          name: "String",
        },
      },
      requiredImpactProperties: {
        serializedName: "requiredImpactProperties",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RequiredImpactProperties",
            },
          },
        },
      },
    },
  },
};

export const RequiredImpactProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RequiredImpactProperties",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String",
        },
      },
      allowedValues: {
        serializedName: "allowedValues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const WorkloadImpactListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkloadImpactListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WorkloadImpact",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const WorkloadImpactProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkloadImpactProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      startDateTime: {
        serializedName: "startDateTime",
        required: true,
        type: {
          name: "DateTime",
        },
      },
      endDateTime: {
        serializedName: "endDateTime",
        type: {
          name: "DateTime",
        },
      },
      impactedResourceId: {
        serializedName: "impactedResourceId",
        required: true,
        type: {
          name: "String",
        },
      },
      impactUniqueId: {
        constraints: {
          Pattern: new RegExp(
            "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}",
          ),
        },
        serializedName: "impactUniqueId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      reportedTimeUtc: {
        serializedName: "reportedTimeUtc",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      impactCategory: {
        serializedName: "impactCategory",
        required: true,
        type: {
          name: "String",
        },
      },
      impactDescription: {
        serializedName: "impactDescription",
        type: {
          name: "String",
        },
      },
      armCorrelationIds: {
        serializedName: "armCorrelationIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      performance: {
        serializedName: "performance",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Performance",
            },
          },
        },
      },
      connectivity: {
        serializedName: "connectivity",
        type: {
          name: "Composite",
          className: "Connectivity",
        },
      },
      additionalProperties: {
        serializedName: "additionalProperties",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } },
        },
      },
      errorDetails: {
        serializedName: "errorDetails",
        type: {
          name: "Composite",
          className: "ErrorDetailProperties",
        },
      },
      workload: {
        serializedName: "workload",
        type: {
          name: "Composite",
          className: "Workload",
        },
      },
      impactGroupId: {
        serializedName: "impactGroupId",
        type: {
          name: "String",
        },
      },
      confidenceLevel: {
        serializedName: "confidenceLevel",
        type: {
          name: "String",
        },
      },
      clientIncidentDetails: {
        serializedName: "clientIncidentDetails",
        type: {
          name: "Composite",
          className: "ClientIncidentDetails",
        },
      },
    },
  },
};

export const Performance: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Performance",
    modelProperties: {
      metricName: {
        serializedName: "metricName",
        type: {
          name: "String",
        },
      },
      expected: {
        serializedName: "expected",
        type: {
          name: "Number",
        },
      },
      actual: {
        serializedName: "actual",
        type: {
          name: "Number",
        },
      },
      expectedValueRange: {
        serializedName: "expectedValueRange",
        type: {
          name: "Composite",
          className: "ExpectedValueRange",
        },
      },
      unit: {
        serializedName: "unit",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ExpectedValueRange: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExpectedValueRange",
    modelProperties: {
      min: {
        serializedName: "min",
        required: true,
        type: {
          name: "Number",
        },
      },
      max: {
        serializedName: "max",
        required: true,
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const Connectivity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Connectivity",
    modelProperties: {
      protocol: {
        serializedName: "protocol",
        type: {
          name: "String",
        },
      },
      port: {
        serializedName: "port",
        type: {
          name: "Number",
        },
      },
      source: {
        serializedName: "source",
        type: {
          name: "Composite",
          className: "SourceOrTarget",
        },
      },
      target: {
        serializedName: "target",
        type: {
          name: "Composite",
          className: "SourceOrTarget",
        },
      },
    },
  },
};

export const SourceOrTarget: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SourceOrTarget",
    modelProperties: {
      azureResourceId: {
        constraints: {
          Pattern: new RegExp("(\\/[0-9a-zA-Z]+)*"),
        },
        serializedName: "azureResourceId",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ErrorDetailProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetailProperties",
    modelProperties: {
      errorCode: {
        serializedName: "errorCode",
        type: {
          name: "String",
        },
      },
      errorMessage: {
        serializedName: "errorMessage",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Workload: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Workload",
    modelProperties: {
      context: {
        serializedName: "context",
        type: {
          name: "String",
        },
      },
      toolset: {
        serializedName: "toolset",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ClientIncidentDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClientIncidentDetails",
    modelProperties: {
      clientIncidentId: {
        serializedName: "clientIncidentId",
        type: {
          name: "String",
        },
      },
      clientIncidentSource: {
        serializedName: "clientIncidentSource",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const InsightListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InsightListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Insight",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const InsightProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InsightProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      category: {
        serializedName: "category",
        required: true,
        type: {
          name: "String",
        },
      },
      status: {
        serializedName: "status",
        type: {
          name: "String",
        },
      },
      eventId: {
        serializedName: "eventId",
        type: {
          name: "String",
        },
      },
      groupId: {
        serializedName: "groupId",
        type: {
          name: "String",
        },
      },
      content: {
        serializedName: "content",
        type: {
          name: "Composite",
          className: "Content",
        },
      },
      eventTime: {
        serializedName: "eventTime",
        type: {
          name: "DateTime",
        },
      },
      insightUniqueId: {
        serializedName: "insightUniqueId",
        required: true,
        type: {
          name: "String",
        },
      },
      impact: {
        serializedName: "impact",
        type: {
          name: "Composite",
          className: "ImpactDetails",
        },
      },
      additionalDetails: {
        serializedName: "additionalDetails",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } },
        },
      },
    },
  },
};

export const Content: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Content",
    modelProperties: {
      title: {
        serializedName: "title",
        required: true,
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "description",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ImpactDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImpactDetails",
    modelProperties: {
      impactedResourceId: {
        serializedName: "impactedResourceId",
        required: true,
        type: {
          name: "String",
        },
      },
      startTime: {
        serializedName: "startTime",
        required: true,
        type: {
          name: "DateTime",
        },
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime",
        },
      },
      impactId: {
        serializedName: "impactId",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AdditionalField: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AdditionalField",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String",
        },
      },
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ImpactedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImpactedResource",
    modelProperties: {
      impactedResourceId: {
        serializedName: "impactedResourceId",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const InsightCustomResourceCommonParameters: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "InsightCustomResourceCommonParameters",
      modelProperties: {
        apiVersion: {
          constraints: {
            MinLength: 1,
          },
          serializedName: "apiVersion",
          required: true,
          type: {
            name: "String",
          },
        },
        subscriptionId: {
          serializedName: "subscriptionId",
          required: true,
          type: {
            name: "String",
          },
        },
        provider: {
          defaultValue: "Microsoft.Impact",
          isConstant: true,
          serializedName: "provider",
          type: {
            name: "String",
          },
        },
        azureResourceId: {
          constraints: {
            MinLength: 1,
          },
          serializedName: "azureResourceId",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const InsightDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InsightDetails",
    modelProperties: {
      azureResourceId: {
        serializedName: "azureResourceId",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties,
    },
  },
};

export const Connector: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Connector",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ConnectorProperties",
        },
      },
    },
  },
};

export const ConnectorUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectorUpdate",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ConnectorPropertiesUpdate",
        },
      },
    },
  },
};

export const ImpactCategory: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImpactCategory",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ImpactCategoryProperties",
        },
      },
    },
  },
};

export const WorkloadImpact: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkloadImpact",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "WorkloadImpactProperties",
        },
      },
    },
  },
};

export const Insight: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Insight",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "InsightProperties",
        },
      },
    },
  },
};

export const InsightUnderSubscription: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InsightUnderSubscription",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "InsightProperties",
        },
      },
    },
  },
};

export const ConnectorsCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectorsCreateOrUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const WorkloadImpactsCreateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkloadImpactsCreateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};
