/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { Insights } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MicrosoftImpact } from "../microsoftImpact";
import {
  Insight,
  InsightsListBySubscriptionNextOptionalParams,
  InsightsListBySubscriptionOptionalParams,
  InsightsListBySubscriptionResponse,
  InsightsGetOptionalParams,
  InsightsGetResponse,
  InsightsCreateOptionalParams,
  InsightsCreateResponse,
  InsightsDeleteOptionalParams,
  InsightsListBySubscriptionNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Insights operations. */
export class InsightsImpl implements Insights {
  private readonly client: MicrosoftImpact;

  /**
   * Initialize a new instance of the class Insights class.
   * @param client Reference to the service client
   */
  constructor(client: MicrosoftImpact) {
    this.client = client;
  }

  /**
   * List Insight resources by workloadImpactName
   * @param workloadImpactName workloadImpact resource
   * @param options The options parameters.
   */
  public listBySubscription(
    workloadImpactName: string,
    options?: InsightsListBySubscriptionOptionalParams,
  ): PagedAsyncIterableIterator<Insight> {
    const iter = this.listBySubscriptionPagingAll(workloadImpactName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionPagingPage(
          workloadImpactName,
          options,
          settings,
        );
      },
    };
  }

  private async *listBySubscriptionPagingPage(
    workloadImpactName: string,
    options?: InsightsListBySubscriptionOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<Insight[]> {
    let result: InsightsListBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySubscription(workloadImpactName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySubscriptionNext(
        workloadImpactName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySubscriptionPagingAll(
    workloadImpactName: string,
    options?: InsightsListBySubscriptionOptionalParams,
  ): AsyncIterableIterator<Insight> {
    for await (const page of this.listBySubscriptionPagingPage(
      workloadImpactName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List Insight resources by workloadImpactName
   * @param workloadImpactName workloadImpact resource
   * @param options The options parameters.
   */
  private _listBySubscription(
    workloadImpactName: string,
    options?: InsightsListBySubscriptionOptionalParams,
  ): Promise<InsightsListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { workloadImpactName, options },
      listBySubscriptionOperationSpec,
    );
  }

  /**
   * Get Insight resources by workloadImpactName and insightName
   * @param workloadImpactName workloadImpact resource
   * @param insightName Name of the insight
   * @param options The options parameters.
   */
  get(
    workloadImpactName: string,
    insightName: string,
    options?: InsightsGetOptionalParams,
  ): Promise<InsightsGetResponse> {
    return this.client.sendOperationRequest(
      { workloadImpactName, insightName, options },
      getOperationSpec,
    );
  }

  /**
   * Create Insight resource, This is Admin only operation
   * @param workloadImpactName workloadImpact resource
   * @param insightName Name of the insight
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  create(
    workloadImpactName: string,
    insightName: string,
    resource: Insight,
    options?: InsightsCreateOptionalParams,
  ): Promise<InsightsCreateResponse> {
    return this.client.sendOperationRequest(
      { workloadImpactName, insightName, resource, options },
      createOperationSpec,
    );
  }

  /**
   * Delete Insight resource, This is Admin only operation
   * @param workloadImpactName workloadImpact resource
   * @param insightName Name of the insight
   * @param options The options parameters.
   */
  delete(
    workloadImpactName: string,
    insightName: string,
    options?: InsightsDeleteOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { workloadImpactName, insightName, options },
      deleteOperationSpec,
    );
  }

  /**
   * ListBySubscriptionNext
   * @param workloadImpactName workloadImpact resource
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    workloadImpactName: string,
    nextLink: string,
    options?: InsightsListBySubscriptionNextOptionalParams,
  ): Promise<InsightsListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { workloadImpactName, nextLink, options },
      listBySubscriptionNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Impact/workloadImpacts/{workloadImpactName}/insights",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.InsightListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.workloadImpactName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Impact/workloadImpacts/{workloadImpactName}/insights/{insightName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Insight,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.workloadImpactName,
    Parameters.insightName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Impact/workloadImpacts/{workloadImpactName}/insights/{insightName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Insight,
    },
    201: {
      bodyMapper: Mappers.Insight,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.resource2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.workloadImpactName,
    Parameters.insightName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Impact/workloadImpacts/{workloadImpactName}/insights/{insightName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.workloadImpactName,
    Parameters.insightName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.InsightListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.workloadImpactName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
