/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { ImpactCategories } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { MicrosoftImpact } from "../microsoftImpact.js";
import {
  ImpactCategory,
  ImpactCategoriesListBySubscriptionNextOptionalParams,
  ImpactCategoriesListBySubscriptionOptionalParams,
  ImpactCategoriesListBySubscriptionResponse,
  ImpactCategoriesGetOptionalParams,
  ImpactCategoriesGetResponse,
  ImpactCategoriesListBySubscriptionNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing ImpactCategories operations. */
export class ImpactCategoriesImpl implements ImpactCategories {
  private readonly client: MicrosoftImpact;

  /**
   * Initialize a new instance of the class ImpactCategories class.
   * @param client Reference to the service client
   */
  constructor(client: MicrosoftImpact) {
    this.client = client;
  }

  /**
   * List ImpactCategory resources by subscription
   * @param resourceType Filter by resource type
   * @param options The options parameters.
   */
  public listBySubscription(
    resourceType: string,
    options?: ImpactCategoriesListBySubscriptionOptionalParams,
  ): PagedAsyncIterableIterator<ImpactCategory> {
    const iter = this.listBySubscriptionPagingAll(resourceType, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionPagingPage(resourceType, options, settings);
      },
    };
  }

  private async *listBySubscriptionPagingPage(
    resourceType: string,
    options?: ImpactCategoriesListBySubscriptionOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<ImpactCategory[]> {
    let result: ImpactCategoriesListBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySubscription(resourceType, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySubscriptionPagingAll(
    resourceType: string,
    options?: ImpactCategoriesListBySubscriptionOptionalParams,
  ): AsyncIterableIterator<ImpactCategory> {
    for await (const page of this.listBySubscriptionPagingPage(resourceType, options)) {
      yield* page;
    }
  }

  /**
   * List ImpactCategory resources by subscription
   * @param resourceType Filter by resource type
   * @param options The options parameters.
   */
  private _listBySubscription(
    resourceType: string,
    options?: ImpactCategoriesListBySubscriptionOptionalParams,
  ): Promise<ImpactCategoriesListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { resourceType, options },
      listBySubscriptionOperationSpec,
    );
  }

  /**
   * Get a ImpactCategory
   * @param impactCategoryName Name of the impact category
   * @param options The options parameters.
   */
  get(
    impactCategoryName: string,
    options?: ImpactCategoriesGetOptionalParams,
  ): Promise<ImpactCategoriesGetResponse> {
    return this.client.sendOperationRequest({ impactCategoryName, options }, getOperationSpec);
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: ImpactCategoriesListBySubscriptionNextOptionalParams,
  ): Promise<ImpactCategoriesListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Impact/impactCategories",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ImpactCategoryListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion, Parameters.categoryName, Parameters.resourceType],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Impact/impactCategories/{impactCategoryName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ImpactCategory,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId, Parameters.impactCategoryName],
  headerParameters: [Parameters.accept],
  serializer,
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ImpactCategoryListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer,
};
