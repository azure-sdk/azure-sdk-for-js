/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter
} from "@azure/core-client";
import {
  DeviceProvisioningState as DeviceProvisioningStateMapper,
  DeviceProvisioningStateUpdate as DeviceProvisioningStateUpdateMapper,
  ProvisioningResource as ProvisioningResourceMapper,
  ProvisioningResourceUpdate as ProvisioningResourceUpdateMapper,
  ProvisioningPolicy as ProvisioningPolicyMapper,
  ProvisioningPolicyUpdate as ProvisioningPolicyUpdateMapper
} from "../models/mappers";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2023-12-01-preview",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const resourceUri: OperationURLParameter = {
  parameterPath: "resourceUri",
  mapper: {
    serializedName: "resourceUri",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const resource: OperationParameter = {
  parameterPath: "resource",
  mapper: DeviceProvisioningStateMapper
};

export const properties: OperationParameter = {
  parameterPath: "properties",
  mapper: DeviceProvisioningStateUpdateMapper
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    constraints: {
      MinLength: 1
    },
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    constraints: {
      MaxLength: 90,
      MinLength: 1
    },
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const provisioningResourceName: OperationURLParameter = {
  parameterPath: "provisioningResourceName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9-]{3,127}[a-zA-Z0-9]$"),
      MaxLength: 128
    },
    serializedName: "provisioningResourceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resource1: OperationParameter = {
  parameterPath: "resource",
  mapper: ProvisioningResourceMapper
};

export const properties1: OperationParameter = {
  parameterPath: "properties",
  mapper: ProvisioningResourceUpdateMapper
};

export const provisioningPolicyName: OperationURLParameter = {
  parameterPath: "provisioningPolicyName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9-]{3,127}[a-zA-Z0-9]$"),
      MaxLength: 128
    },
    serializedName: "provisioningPolicyName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resource2: OperationParameter = {
  parameterPath: "resource",
  mapper: ProvisioningPolicyMapper
};

export const properties2: OperationParameter = {
  parameterPath: "properties",
  mapper: ProvisioningPolicyUpdateMapper
};
