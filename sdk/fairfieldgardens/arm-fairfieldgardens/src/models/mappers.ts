/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const DeviceProvisioningStateListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeviceProvisioningStateListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeviceProvisioningState"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AllocatedEndpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AllocatedEndpoint",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      endpointType: {
        serializedName: "endpointType",
        required: true,
        type: {
          name: "String"
        }
      },
      hostName: {
        serializedName: "hostName",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail"
            }
          }
        }
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const DeviceProvisioningStateUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeviceProvisioningStateUpdate",
    modelProperties: {
      onboardingStatus: {
        serializedName: "properties.onboardingStatus",
        type: {
          name: "String"
        }
      },
      discoveryEnabled: {
        defaultValue: false,
        serializedName: "properties.discoveryEnabled",
        type: {
          name: "Boolean"
        }
      },
      provisioningPolicyResourceId: {
        serializedName: "properties.provisioningPolicyResourceId",
        type: {
          name: "String"
        }
      },
      allocatedEndpoints: {
        constraints: {
          MaxItems: 1
        },
        serializedName: "properties.allocatedEndpoints",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AllocatedEndpoint"
            }
          }
        }
      }
    }
  }
};

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      actionType: {
        serializedName: "actionType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProvisioningResourceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProvisioningResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ProvisioningResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeviceEndpoints: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeviceEndpoints",
    modelProperties: {
      default: {
        serializedName: "default",
        type: {
          name: "Composite",
          className: "DeviceEndpoint"
        }
      }
    }
  }
};

export const DeviceEndpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeviceEndpoint",
    modelProperties: {
      hostName: {
        serializedName: "hostName",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProvisioningResourceUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProvisioningResourceUpdate",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const ProvisioningPolicyListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProvisioningPolicyListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ProvisioningPolicy"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BootstrapAuthenticationRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BootstrapAuthenticationRule",
    uberParent: "BootstrapAuthenticationRule",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AllocationRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AllocationRule",
    uberParent: "AllocationRule",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      endpointType: {
        serializedName: "endpointType",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JitRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JitRule",
    modelProperties: {
      priority: {
        serializedName: "priority",
        required: true,
        type: {
          name: "Number"
        }
      },
      subscriptionId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "subscriptionId",
        required: true,
        type: {
          name: "String"
        }
      },
      resourceGroupName: {
        constraints: {
          Pattern: new RegExp("^[-\\w\\._\\(\\)]+$"),
          MaxLength: 90,
          MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProvisioningPolicyResourceDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProvisioningPolicyResourceDetails",
    uberParent: "ProvisioningPolicyResourceDetails",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProvisioningPolicyUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProvisioningPolicyUpdate",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "Boolean"
        }
      },
      bootstrapAuthentication: {
        serializedName: "properties.bootstrapAuthentication",
        type: {
          name: "Composite",
          className: "BootstrapAuthenticationRule"
        }
      },
      allocations: {
        constraints: {
          MaxItems: 1
        },
        serializedName: "properties.allocations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AllocationRule"
            }
          }
        }
      },
      jit: {
        serializedName: "properties.jit",
        type: {
          name: "Composite",
          className: "JitRuleUpdate"
        }
      },
      resourceDetails: {
        serializedName: "properties.resourceDetails",
        type: {
          name: "Composite",
          className: "ProvisioningPolicyResourceDetails"
        }
      }
    }
  }
};

export const JitRuleUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JitRuleUpdate",
    modelProperties: {
      priority: {
        serializedName: "priority",
        type: {
          name: "Number"
        }
      },
      subscriptionId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "subscriptionId",
        type: {
          name: "String"
        }
      },
      resourceGroupName: {
        constraints: {
          Pattern: new RegExp("^[-\\w\\._\\(\\)]+$"),
          MaxLength: 90,
          MinLength: 1
        },
        serializedName: "resourceGroupName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AllocationEndpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AllocationEndpoint",
    modelProperties: {
      resourceId: {
        serializedName: "resourceId",
        required: true,
        type: {
          name: "String"
        }
      },
      hostName: {
        serializedName: "hostName",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CaConfig: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CaConfig",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "CertificateProperties"
        }
      }
    }
  }
};

export const CertificateProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CertificateProperties",
    modelProperties: {
      keyType: {
        serializedName: "keyType",
        required: true,
        type: {
          name: "String"
        }
      },
      subject: {
        serializedName: "subject",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      validityPeriodInDays: {
        constraints: {
          InclusiveMaximum: 366,
          InclusiveMinimum: 365
        },
        serializedName: "validityPeriodInDays",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      validityNotBefore: {
        serializedName: "validityNotBefore",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      validityNotAfter: {
        serializedName: "validityNotAfter",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const CertPolicyConfig: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CertPolicyConfig",
    modelProperties: {
      validityPeriodInDays: {
        serializedName: "validityPeriodInDays",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const CertificateIssuanceRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CertificateIssuanceRule",
    modelProperties: {
      issuingAuthority: {
        serializedName: "issuingAuthority",
        required: true,
        type: {
          name: "String"
        }
      },
      certificateAuthorityConfiguration: {
        serializedName: "certificateAuthorityConfiguration",
        type: {
          name: "Composite",
          className: "CaConfig"
        }
      },
      leafCertificateConfiguration: {
        serializedName: "leafCertificateConfiguration",
        type: {
          name: "Composite",
          className: "CertPolicyConfig"
        }
      },
      renewalInterval: {
        serializedName: "renewalInterval",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const IdentityInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IdentityInfo",
    modelProperties: {
      certificateIssuance: {
        serializedName: "certificateIssuance",
        type: {
          name: "Composite",
          className: "CertificateIssuanceRule"
        }
      },
      deviceTemplateId: {
        serializedName: "deviceTemplateId",
        required: true,
        type: {
          name: "String"
        }
      },
      staticGroupId: {
        serializedName: "staticGroupId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceMetadata: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceMetadata",
    modelProperties: {
      customAttributes: {
        serializedName: "customAttributes",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const ProvisioningPolicyPatchProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProvisioningPolicyPatchProperties",
    modelProperties: {
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "Boolean"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      bootstrapAuthentication: {
        serializedName: "bootstrapAuthentication",
        type: {
          name: "Composite",
          className: "BootstrapAuthenticationRule"
        }
      },
      allocations: {
        constraints: {
          MaxItems: 1
        },
        serializedName: "allocations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AllocationRule"
            }
          }
        }
      },
      jit: {
        serializedName: "jit",
        type: {
          name: "Composite",
          className: "JitRuleUpdate"
        }
      },
      resourceDetails: {
        serializedName: "resourceDetails",
        type: {
          name: "Composite",
          className: "ProvisioningPolicyResourceDetails"
        }
      }
    }
  }
};

export const ProvisioningRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProvisioningRule",
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      jit: {
        serializedName: "jit",
        type: {
          name: "Composite",
          className: "JitRule"
        }
      },
      operationalIdentityInfo: {
        serializedName: "operationalIdentityInfo",
        type: {
          name: "Composite",
          className: "IdentityInfo"
        }
      },
      resourceMetadata: {
        constraints: {
          MaxLength: 200
        },
        serializedName: "resourceMetadata",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const X509Certificate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "X509Certificate",
    modelProperties: {
      certificate: {
        serializedName: "certificate",
        required: true,
        type: {
          name: "String"
        }
      },
      thumbprint: {
        serializedName: "thumbprint",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      expiryDate: {
        serializedName: "expiryDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DiscoveryBootstrapAuthenticationRule: coreClient.CompositeMapper = {
  serializedName: "Discovery",
  type: {
    name: "Composite",
    className: "DiscoveryBootstrapAuthenticationRule",
    uberParent: "BootstrapAuthenticationRule",
    polymorphicDiscriminator:
      BootstrapAuthenticationRule.type.polymorphicDiscriminator,
    modelProperties: {
      ...BootstrapAuthenticationRule.type.modelProperties
    }
  }
};

export const X509BootstrapAuthenticationRule: coreClient.CompositeMapper = {
  serializedName: "X509",
  type: {
    name: "Composite",
    className: "X509BootstrapAuthenticationRule",
    uberParent: "BootstrapAuthenticationRule",
    polymorphicDiscriminator:
      BootstrapAuthenticationRule.type.polymorphicDiscriminator,
    modelProperties: {
      ...BootstrapAuthenticationRule.type.modelProperties,
      primaryCertificate: {
        serializedName: "primaryCertificate",
        type: {
          name: "Composite",
          className: "X509Certificate"
        }
      },
      secondaryCertificate: {
        serializedName: "secondaryCertificate",
        type: {
          name: "Composite",
          className: "X509Certificate"
        }
      }
    }
  }
};

export const EvenlyDistributedAllocationRule: coreClient.CompositeMapper = {
  serializedName: "EvenlyDistributed",
  type: {
    name: "Composite",
    className: "EvenlyDistributedAllocationRule",
    uberParent: "AllocationRule",
    polymorphicDiscriminator: AllocationRule.type.polymorphicDiscriminator,
    modelProperties: {
      ...AllocationRule.type.modelProperties,
      endpoints: {
        constraints: {
          MinItems: 1,
          MaxItems: 10
        },
        serializedName: "endpoints",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AllocationEndpoint"
            }
          }
        }
      }
    }
  }
};

export const DeviceRegistryProvisioningPolicyResourceDetails: coreClient.CompositeMapper = {
  serializedName: "Microsoft.DeviceRegistry/devices",
  type: {
    name: "Composite",
    className: "DeviceRegistryProvisioningPolicyResourceDetails",
    uberParent: "ProvisioningPolicyResourceDetails",
    polymorphicDiscriminator:
      ProvisioningPolicyResourceDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProvisioningPolicyResourceDetails.type.modelProperties,
      operationalIdentityInfo: {
        serializedName: "operationalIdentityInfo",
        type: {
          name: "Composite",
          className: "IdentityInfo"
        }
      },
      resourceMetadata: {
        serializedName: "resourceMetadata",
        type: {
          name: "Composite",
          className: "ResourceMetadata"
        }
      }
    }
  }
};

export const DiscoveryProvisioningPolicyResourceDetails: coreClient.CompositeMapper = {
  serializedName: "Microsoft.HybridCompute/machines",
  type: {
    name: "Composite",
    className: "DiscoveryProvisioningPolicyResourceDetails",
    uberParent: "ProvisioningPolicyResourceDetails",
    polymorphicDiscriminator:
      ProvisioningPolicyResourceDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProvisioningPolicyResourceDetails.type.modelProperties
    }
  }
};

export const DeviceProvisioningState: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeviceProvisioningState",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      registrationId: {
        constraints: {
          Pattern: new RegExp("^([a-z0-9-._:]{0,127}[a-z0-9-])$"),
          MaxLength: 128
        },
        serializedName: "properties.registrationId",
        type: {
          name: "String"
        }
      },
      onboardingStatus: {
        serializedName: "properties.onboardingStatus",
        type: {
          name: "String"
        }
      },
      discoveryEnabled: {
        defaultValue: false,
        serializedName: "properties.discoveryEnabled",
        type: {
          name: "Boolean"
        }
      },
      provisioningPolicyResourceId: {
        serializedName: "properties.provisioningPolicyResourceId",
        type: {
          name: "String"
        }
      },
      allocatedEndpoints: {
        constraints: {
          MaxItems: 1
        },
        serializedName: "properties.allocatedEndpoints",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AllocatedEndpoint"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProvisioningResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProvisioningResource",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      deviceEndpoints: {
        serializedName: "properties.deviceEndpoints",
        type: {
          name: "Composite",
          className: "DeviceEndpoints"
        }
      },
      enableOperationalCertificates: {
        serializedName: "properties.enableOperationalCertificates",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ProvisioningPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProvisioningPolicy",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "Boolean"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      bootstrapAuthentication: {
        serializedName: "properties.bootstrapAuthentication",
        type: {
          name: "Composite",
          className: "BootstrapAuthenticationRule"
        }
      },
      allocations: {
        constraints: {
          MaxItems: 1
        },
        serializedName: "properties.allocations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AllocationRule"
            }
          }
        }
      },
      jit: {
        serializedName: "properties.jit",
        type: {
          name: "Composite",
          className: "JitRule"
        }
      },
      resourceDetails: {
        serializedName: "properties.resourceDetails",
        type: {
          name: "Composite",
          className: "ProvisioningPolicyResourceDetails"
        }
      }
    }
  }
};

export const ProvisioningResourcesCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProvisioningResourcesCreateOrUpdateHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ProvisioningResourcesDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProvisioningResourcesDeleteHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProvisioningPoliciesCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProvisioningPoliciesCreateOrUpdateHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ProvisioningPoliciesUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProvisioningPoliciesUpdateHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export let discriminators = {
  BootstrapAuthenticationRule: BootstrapAuthenticationRule,
  AllocationRule: AllocationRule,
  ProvisioningPolicyResourceDetails: ProvisioningPolicyResourceDetails,
  "BootstrapAuthenticationRule.Discovery": DiscoveryBootstrapAuthenticationRule,
  "BootstrapAuthenticationRule.X509": X509BootstrapAuthenticationRule,
  "AllocationRule.EvenlyDistributed": EvenlyDistributedAllocationRule,
  "ProvisioningPolicyResourceDetails.Microsoft.DeviceRegistry/devices": DeviceRegistryProvisioningPolicyResourceDetails,
  "ProvisioningPolicyResourceDetails.Microsoft.HybridCompute/machines": DiscoveryProvisioningPolicyResourceDetails
};
