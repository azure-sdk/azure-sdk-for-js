/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { DeviceProvisioningStates } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MicrosoftFairfieldGardens } from "../microsoftFairfieldGardens";
import {
  DeviceProvisioningState,
  DeviceProvisioningStatesListNextOptionalParams,
  DeviceProvisioningStatesListOptionalParams,
  DeviceProvisioningStatesListResponse,
  DeviceProvisioningStatesGetOptionalParams,
  DeviceProvisioningStatesGetResponse,
  DeviceProvisioningStatesCreateOrUpdateOptionalParams,
  DeviceProvisioningStatesCreateOrUpdateResponse,
  DeviceProvisioningStateUpdate,
  DeviceProvisioningStatesUpdateOptionalParams,
  DeviceProvisioningStatesUpdateResponse,
  DeviceProvisioningStatesDeleteOptionalParams,
  DeviceProvisioningStatesListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing DeviceProvisioningStates operations. */
export class DeviceProvisioningStatesImpl implements DeviceProvisioningStates {
  private readonly client: MicrosoftFairfieldGardens;

  /**
   * Initialize a new instance of the class DeviceProvisioningStates class.
   * @param client Reference to the service client
   */
  constructor(client: MicrosoftFairfieldGardens) {
    this.client = client;
  }

  /**
   * List DeviceProvisioningState resources by parent
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param options The options parameters.
   */
  public list(
    resourceUri: string,
    options?: DeviceProvisioningStatesListOptionalParams
  ): PagedAsyncIterableIterator<DeviceProvisioningState> {
    const iter = this.listPagingAll(resourceUri, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(resourceUri, options, settings);
      }
    };
  }

  private async *listPagingPage(
    resourceUri: string,
    options?: DeviceProvisioningStatesListOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<DeviceProvisioningState[]> {
    let result: DeviceProvisioningStatesListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(resourceUri, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(resourceUri, continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    resourceUri: string,
    options?: DeviceProvisioningStatesListOptionalParams
  ): AsyncIterableIterator<DeviceProvisioningState> {
    for await (const page of this.listPagingPage(resourceUri, options)) {
      yield* page;
    }
  }

  /**
   * List DeviceProvisioningState resources by parent
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param options The options parameters.
   */
  private _list(
    resourceUri: string,
    options?: DeviceProvisioningStatesListOptionalParams
  ): Promise<DeviceProvisioningStatesListResponse> {
    return this.client.sendOperationRequest(
      { resourceUri, options },
      listOperationSpec
    );
  }

  /**
   * Get a DeviceProvisioningState
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param options The options parameters.
   */
  get(
    resourceUri: string,
    options?: DeviceProvisioningStatesGetOptionalParams
  ): Promise<DeviceProvisioningStatesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceUri, options },
      getOperationSpec
    );
  }

  /**
   * Create a DeviceProvisioningState
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceUri: string,
    resource: DeviceProvisioningState,
    options?: DeviceProvisioningStatesCreateOrUpdateOptionalParams
  ): Promise<DeviceProvisioningStatesCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceUri, resource, options },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Update a DeviceProvisioningState
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  update(
    resourceUri: string,
    properties: DeviceProvisioningStateUpdate,
    options?: DeviceProvisioningStatesUpdateOptionalParams
  ): Promise<DeviceProvisioningStatesUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceUri, properties, options },
      updateOperationSpec
    );
  }

  /**
   * Delete a DeviceProvisioningState
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param options The options parameters.
   */
  delete(
    resourceUri: string,
    options?: DeviceProvisioningStatesDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceUri, options },
      deleteOperationSpec
    );
  }

  /**
   * ListNext
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceUri: string,
    nextLink: string,
    options?: DeviceProvisioningStatesListNextOptionalParams
  ): Promise<DeviceProvisioningStatesListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceUri, nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/{resourceUri}/providers/Microsoft.FairfieldGardens/deviceProvisioningStates",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeviceProvisioningStateListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.resourceUri],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/{resourceUri}/providers/Microsoft.FairfieldGardens/deviceProvisioningStates/default",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeviceProvisioningState
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.resourceUri],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/{resourceUri}/providers/Microsoft.FairfieldGardens/deviceProvisioningStates/default",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.DeviceProvisioningState
    },
    201: {
      bodyMapper: Mappers.DeviceProvisioningState
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.resource,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.resourceUri],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/{resourceUri}/providers/Microsoft.FairfieldGardens/deviceProvisioningStates/default",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.DeviceProvisioningState
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.properties,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.resourceUri],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/{resourceUri}/providers/Microsoft.FairfieldGardens/deviceProvisioningStates/default",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.resourceUri],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeviceProvisioningStateListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.resourceUri,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
