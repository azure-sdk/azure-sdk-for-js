/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { ProvisioningPolicies } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MicrosoftFairfieldGardens } from "../microsoftFairfieldGardens";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  ProvisioningPolicy,
  ProvisioningPoliciesListByProvisioningResourceNextOptionalParams,
  ProvisioningPoliciesListByProvisioningResourceOptionalParams,
  ProvisioningPoliciesListByProvisioningResourceResponse,
  ProvisioningPoliciesGetOptionalParams,
  ProvisioningPoliciesGetResponse,
  ProvisioningPoliciesCreateOrUpdateOptionalParams,
  ProvisioningPoliciesCreateOrUpdateResponse,
  ProvisioningPolicyUpdate,
  ProvisioningPoliciesUpdateOptionalParams,
  ProvisioningPoliciesUpdateResponse,
  ProvisioningPoliciesDeleteOptionalParams,
  ProvisioningPoliciesListByProvisioningResourceNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ProvisioningPolicies operations. */
export class ProvisioningPoliciesImpl implements ProvisioningPolicies {
  private readonly client: MicrosoftFairfieldGardens;

  /**
   * Initialize a new instance of the class ProvisioningPolicies class.
   * @param client Reference to the service client
   */
  constructor(client: MicrosoftFairfieldGardens) {
    this.client = client;
  }

  /**
   * List ProvisioningPolicy resources by ProvisioningResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param provisioningResourceName The name of the Provisioning Resource.
   * @param options The options parameters.
   */
  public listByProvisioningResource(
    resourceGroupName: string,
    provisioningResourceName: string,
    options?: ProvisioningPoliciesListByProvisioningResourceOptionalParams
  ): PagedAsyncIterableIterator<ProvisioningPolicy> {
    const iter = this.listByProvisioningResourcePagingAll(
      resourceGroupName,
      provisioningResourceName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByProvisioningResourcePagingPage(
          resourceGroupName,
          provisioningResourceName,
          options,
          settings
        );
      }
    };
  }

  private async *listByProvisioningResourcePagingPage(
    resourceGroupName: string,
    provisioningResourceName: string,
    options?: ProvisioningPoliciesListByProvisioningResourceOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<ProvisioningPolicy[]> {
    let result: ProvisioningPoliciesListByProvisioningResourceResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByProvisioningResource(
        resourceGroupName,
        provisioningResourceName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByProvisioningResourceNext(
        resourceGroupName,
        provisioningResourceName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByProvisioningResourcePagingAll(
    resourceGroupName: string,
    provisioningResourceName: string,
    options?: ProvisioningPoliciesListByProvisioningResourceOptionalParams
  ): AsyncIterableIterator<ProvisioningPolicy> {
    for await (const page of this.listByProvisioningResourcePagingPage(
      resourceGroupName,
      provisioningResourceName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List ProvisioningPolicy resources by ProvisioningResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param provisioningResourceName The name of the Provisioning Resource.
   * @param options The options parameters.
   */
  private _listByProvisioningResource(
    resourceGroupName: string,
    provisioningResourceName: string,
    options?: ProvisioningPoliciesListByProvisioningResourceOptionalParams
  ): Promise<ProvisioningPoliciesListByProvisioningResourceResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, provisioningResourceName, options },
      listByProvisioningResourceOperationSpec
    );
  }

  /**
   * Get a ProvisioningPolicy
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param provisioningResourceName The name of the Provisioning Resource.
   * @param provisioningPolicyName The name of the Provisioning Policy tracked resource.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    provisioningResourceName: string,
    provisioningPolicyName: string,
    options?: ProvisioningPoliciesGetOptionalParams
  ): Promise<ProvisioningPoliciesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        provisioningResourceName,
        provisioningPolicyName,
        options
      },
      getOperationSpec
    );
  }

  /**
   * Create a ProvisioningPolicy
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param provisioningResourceName The name of the Provisioning Resource.
   * @param provisioningPolicyName The name of the Provisioning Policy tracked resource.
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    provisioningResourceName: string,
    provisioningPolicyName: string,
    resource: ProvisioningPolicy,
    options?: ProvisioningPoliciesCreateOrUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<ProvisioningPoliciesCreateOrUpdateResponse>,
      ProvisioningPoliciesCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ProvisioningPoliciesCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        provisioningResourceName,
        provisioningPolicyName,
        resource,
        options
      },
      spec: createOrUpdateOperationSpec
    });
    const poller = await createHttpPoller<
      ProvisioningPoliciesCreateOrUpdateResponse,
      OperationState<ProvisioningPoliciesCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create a ProvisioningPolicy
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param provisioningResourceName The name of the Provisioning Resource.
   * @param provisioningPolicyName The name of the Provisioning Policy tracked resource.
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    provisioningResourceName: string,
    provisioningPolicyName: string,
    resource: ProvisioningPolicy,
    options?: ProvisioningPoliciesCreateOrUpdateOptionalParams
  ): Promise<ProvisioningPoliciesCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      provisioningResourceName,
      provisioningPolicyName,
      resource,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Update a ProvisioningPolicy
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param provisioningResourceName The name of the Provisioning Resource.
   * @param provisioningPolicyName The name of the Provisioning Policy tracked resource.
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    provisioningResourceName: string,
    provisioningPolicyName: string,
    properties: ProvisioningPolicyUpdate,
    options?: ProvisioningPoliciesUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<ProvisioningPoliciesUpdateResponse>,
      ProvisioningPoliciesUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ProvisioningPoliciesUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        provisioningResourceName,
        provisioningPolicyName,
        properties,
        options
      },
      spec: updateOperationSpec
    });
    const poller = await createHttpPoller<
      ProvisioningPoliciesUpdateResponse,
      OperationState<ProvisioningPoliciesUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Update a ProvisioningPolicy
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param provisioningResourceName The name of the Provisioning Resource.
   * @param provisioningPolicyName The name of the Provisioning Policy tracked resource.
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    provisioningResourceName: string,
    provisioningPolicyName: string,
    properties: ProvisioningPolicyUpdate,
    options?: ProvisioningPoliciesUpdateOptionalParams
  ): Promise<ProvisioningPoliciesUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      provisioningResourceName,
      provisioningPolicyName,
      properties,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Delete a ProvisioningPolicy
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param provisioningResourceName The name of the Provisioning Resource.
   * @param provisioningPolicyName The name of the Provisioning Policy tracked resource.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    provisioningResourceName: string,
    provisioningPolicyName: string,
    options?: ProvisioningPoliciesDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        provisioningResourceName,
        provisioningPolicyName,
        options
      },
      deleteOperationSpec
    );
  }

  /**
   * ListByProvisioningResourceNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param provisioningResourceName The name of the Provisioning Resource.
   * @param nextLink The nextLink from the previous successful call to the ListByProvisioningResource
   *                 method.
   * @param options The options parameters.
   */
  private _listByProvisioningResourceNext(
    resourceGroupName: string,
    provisioningResourceName: string,
    nextLink: string,
    options?: ProvisioningPoliciesListByProvisioningResourceNextOptionalParams
  ): Promise<ProvisioningPoliciesListByProvisioningResourceNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, provisioningResourceName, nextLink, options },
      listByProvisioningResourceNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByProvisioningResourceOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.FairfieldGardens/provisioningResources/{provisioningResourceName}/provisioningPolicies",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProvisioningPolicyListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.provisioningResourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.FairfieldGardens/provisioningResources/{provisioningResourceName}/provisioningPolicies/{provisioningPolicyName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProvisioningPolicy
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.provisioningResourceName,
    Parameters.provisioningPolicyName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.FairfieldGardens/provisioningResources/{provisioningResourceName}/provisioningPolicies/{provisioningPolicyName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ProvisioningPolicy
    },
    201: {
      bodyMapper: Mappers.ProvisioningPolicy
    },
    202: {
      bodyMapper: Mappers.ProvisioningPolicy
    },
    204: {
      bodyMapper: Mappers.ProvisioningPolicy
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.resource2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.provisioningResourceName,
    Parameters.provisioningPolicyName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.FairfieldGardens/provisioningResources/{provisioningResourceName}/provisioningPolicies/{provisioningPolicyName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.ProvisioningPolicy
    },
    201: {
      bodyMapper: Mappers.ProvisioningPolicy
    },
    202: {
      bodyMapper: Mappers.ProvisioningPolicy
    },
    204: {
      bodyMapper: Mappers.ProvisioningPolicy
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.properties2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.provisioningResourceName,
    Parameters.provisioningPolicyName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.FairfieldGardens/provisioningResources/{provisioningResourceName}/provisioningPolicies/{provisioningPolicyName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.provisioningResourceName,
    Parameters.provisioningPolicyName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByProvisioningResourceNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProvisioningPolicyListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.provisioningResourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
