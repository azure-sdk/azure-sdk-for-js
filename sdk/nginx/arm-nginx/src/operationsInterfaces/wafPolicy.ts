/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  NginxDeploymentWafPolicyMetadata,
  WafPolicyListOptionalParams,
  WafPolicyGetOptionalParams,
  WafPolicyGetResponse,
  WafPolicyCreateOptionalParams,
  WafPolicyCreateResponse,
  WafPolicyDeleteOptionalParams,
  WafPolicyDeleteResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a WafPolicy. */
export interface WafPolicy {
  /**
   * List Waf Policies of given Nginx deployment
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param deploymentName The name of targeted NGINX deployment
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    deploymentName: string,
    options?: WafPolicyListOptionalParams,
  ): PagedAsyncIterableIterator<NginxDeploymentWafPolicyMetadata>;
  /**
   * Get the Nginx Waf Policy of given Nginx deployment
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param deploymentName The name of targeted NGINX deployment
   * @param wafPolicyName The name of Waf Policy
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    deploymentName: string,
    wafPolicyName: string,
    options?: WafPolicyGetOptionalParams,
  ): Promise<WafPolicyGetResponse>;
  /**
   * Create or update the Nginx Waf Policy for given Nginx deployment
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param deploymentName The name of targeted NGINX deployment
   * @param wafPolicyName The name of Waf Policy
   * @param options The options parameters.
   */
  beginCreate(
    resourceGroupName: string,
    deploymentName: string,
    wafPolicyName: string,
    options?: WafPolicyCreateOptionalParams,
  ): Promise<SimplePollerLike<OperationState<WafPolicyCreateResponse>, WafPolicyCreateResponse>>;
  /**
   * Create or update the Nginx Waf Policy for given Nginx deployment
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param deploymentName The name of targeted NGINX deployment
   * @param wafPolicyName The name of Waf Policy
   * @param options The options parameters.
   */
  beginCreateAndWait(
    resourceGroupName: string,
    deploymentName: string,
    wafPolicyName: string,
    options?: WafPolicyCreateOptionalParams,
  ): Promise<WafPolicyCreateResponse>;
  /**
   * Reset the Nginx Waf Policy of given Nginx deployment to default
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param deploymentName The name of targeted NGINX deployment
   * @param wafPolicyName The name of Waf Policy
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    deploymentName: string,
    wafPolicyName: string,
    options?: WafPolicyDeleteOptionalParams,
  ): Promise<SimplePollerLike<OperationState<WafPolicyDeleteResponse>, WafPolicyDeleteResponse>>;
  /**
   * Reset the Nginx Waf Policy of given Nginx deployment to default
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param deploymentName The name of targeted NGINX deployment
   * @param wafPolicyName The name of Waf Policy
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    deploymentName: string,
    wafPolicyName: string,
    options?: WafPolicyDeleteOptionalParams,
  ): Promise<WafPolicyDeleteResponse>;
}
