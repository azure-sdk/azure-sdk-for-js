/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter,
} from "@azure/core-client";
import {
  NginxDeployment as NginxDeploymentMapper,
  NginxDeploymentUpdateParameters as NginxDeploymentUpdateParametersMapper,
  NginxDeploymentApiKeyResponse as NginxDeploymentApiKeyResponseMapper,
  NginxCertificate as NginxCertificateMapper,
  NginxConfigurationResponse as NginxConfigurationResponseMapper,
  AnalysisCreate as AnalysisCreateMapper,
} from "../models/mappers.js";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String",
    },
  },
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2024-11-01-preview",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String",
    },
  },
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "Uuid",
    },
  },
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    constraints: {
      MaxLength: 90,
      MinLength: 1,
    },
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const deploymentName: OperationURLParameter = {
  parameterPath: "deploymentName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^([a-z0-9A-Z][a-z0-9A-Z-]{0,28}[a-z0-9A-Z]|[a-z0-9A-Z])$"),
    },
    serializedName: "deploymentName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String",
    },
  },
};

export const body: OperationParameter = {
  parameterPath: "body",
  mapper: NginxDeploymentMapper,
};

export const body1: OperationParameter = {
  parameterPath: "body",
  mapper: NginxDeploymentUpdateParametersMapper,
};

export const apiKeyName: OperationURLParameter = {
  parameterPath: "apiKeyName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^([a-z0-9A-Z][a-z0-9A-Z-]{0,28}[a-z0-9A-Z]|[a-z0-9A-Z])$"),
    },
    serializedName: "apiKeyName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const body2: OperationParameter = {
  parameterPath: "body",
  mapper: NginxDeploymentApiKeyResponseMapper,
};

export const certificateName: OperationURLParameter = {
  parameterPath: "certificateName",
  mapper: {
    serializedName: "certificateName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const body3: OperationParameter = {
  parameterPath: "body",
  mapper: NginxCertificateMapper,
};

export const configurationName: OperationURLParameter = {
  parameterPath: "configurationName",
  mapper: {
    serializedName: "configurationName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const body4: OperationParameter = {
  parameterPath: "body",
  mapper: NginxConfigurationResponseMapper,
};

export const body5: OperationParameter = {
  parameterPath: ["options", "body"],
  mapper: AnalysisCreateMapper,
};
