/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { Springbootservers } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { OffAzureSpringBoot } from "../offAzureSpringBoot";
import {
  SpringbootserversModel,
  SpringbootserversListByResourceGroupNextOptionalParams,
  SpringbootserversListByResourceGroupOptionalParams,
  SpringbootserversListByResourceGroupResponse,
  SpringbootserversListBySubscriptionNextOptionalParams,
  SpringbootserversListBySubscriptionOptionalParams,
  SpringbootserversListBySubscriptionResponse,
  SpringbootserversGetOptionalParams,
  SpringbootserversGetResponse,
  SpringbootserversCreateOrUpdateOptionalParams,
  SpringbootserversCreateOrUpdateResponse,
  SpringbootserversDeleteOptionalParams,
  SpringbootserversDeleteResponse,
  SpringbootserversPatch,
  SpringbootserversUpdateOptionalParams,
  SpringbootserversUpdateResponse,
  SpringbootserversListByResourceGroupNextResponse,
  SpringbootserversListBySubscriptionNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Springbootservers operations. */
export class SpringbootserversImpl implements Springbootservers {
  private readonly client: OffAzureSpringBoot;

  /**
   * Initialize a new instance of the class Springbootservers class.
   * @param client Reference to the service client
   */
  constructor(client: OffAzureSpringBoot) {
    this.client = client;
  }

  /**
   * List springbootservers resource by resourceGroup
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: SpringbootserversListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<SpringbootserversModel> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByResourceGroupPagingPage(
          resourceGroupName,
          options,
          settings
        );
      }
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: SpringbootserversListByResourceGroupOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<SpringbootserversModel[]> {
    let result: SpringbootserversListByResourceGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByResourceGroup(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: SpringbootserversListByResourceGroupOptionalParams
  ): AsyncIterableIterator<SpringbootserversModel> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List springbootservers resource by subscription
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: SpringbootserversListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<SpringbootserversModel> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionPagingPage(options, settings);
      }
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: SpringbootserversListBySubscriptionOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<SpringbootserversModel[]> {
    let result: SpringbootserversListBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySubscription(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySubscriptionPagingAll(
    options?: SpringbootserversListBySubscriptionOptionalParams
  ): AsyncIterableIterator<SpringbootserversModel> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * List springbootservers resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    options?: SpringbootserversGetOptionalParams
  ): Promise<SpringbootserversGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      getOperationSpec
    );
  }

  /**
   * Create springbootservers resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param springbootservers Create a springbootservers payload.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    springbootservers: SpringbootserversModel,
    options?: SpringbootserversCreateOrUpdateOptionalParams
  ): Promise<SpringbootserversCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, springbootservers, options },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Delete springbootservers resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    options?: SpringbootserversDeleteOptionalParams
  ): Promise<SpringbootserversDeleteResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      deleteOperationSpec
    );
  }

  /**
   * Update springbootservers resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param springbootservers Update a springbootservers payload.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    springbootservers: SpringbootserversPatch,
    options?: SpringbootserversUpdateOptionalParams
  ): Promise<SpringbootserversUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, springbootservers, options },
      updateOperationSpec
    );
  }

  /**
   * List springbootservers resource by resourceGroup
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: SpringbootserversListByResourceGroupOptionalParams
  ): Promise<SpringbootserversListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec
    );
  }

  /**
   * List springbootservers resource by subscription
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: SpringbootserversListBySubscriptionOptionalParams
  ): Promise<SpringbootserversListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: SpringbootserversListByResourceGroupNextOptionalParams
  ): Promise<SpringbootserversListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec
    );
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: SpringbootserversListBySubscriptionNextOptionalParams
  ): Promise<SpringbootserversListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzureSpringBoot/springbootsites/{siteName}/springbootservers/{springbootserversName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SpringbootserversModel
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.springbootserversName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzureSpringBoot/springbootsites/{siteName}/springbootservers/{springbootserversName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SpringbootserversModel
    },
    201: {
      bodyMapper: Mappers.SpringbootserversModel
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.springbootservers,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.springbootserversName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzureSpringBoot/springbootsites/{siteName}/springbootservers/{springbootserversName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.SpringbootserversModel
    },
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.springbootserversName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzureSpringBoot/springbootsites/{siteName}/springbootservers/{springbootserversName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.SpringbootserversModel
    },
    201: {
      bodyMapper: Mappers.SpringbootserversModel
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.springbootservers1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.springbootserversName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzureSpringBoot/springbootsites/{siteName}/springbootservers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SpringbootserversListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.OffAzureSpringBoot/springbootsites/{siteName}/springbootservers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SpringbootserversListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.siteName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SpringbootserversListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
    Parameters.siteName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SpringbootserversListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.siteName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
