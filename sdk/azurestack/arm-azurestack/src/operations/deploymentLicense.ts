/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { DeploymentLicense } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { AzureStackManagementClient } from "../azureStackManagementClient.js";
import {
  DeploymentLicenseRequest,
  DeploymentLicenseCreateOptionalParams,
  DeploymentLicenseCreateResponse,
} from "../models/index.js";

/** Class containing DeploymentLicense operations. */
export class DeploymentLicenseImpl implements DeploymentLicense {
  private readonly client: AzureStackManagementClient;

  /**
   * Initialize a new instance of the class DeploymentLicense class.
   * @param client Reference to the service client
   */
  constructor(client: AzureStackManagementClient) {
    this.client = client;
  }

  /**
   * Creates a license that can be used to deploy an Azure Stack device.
   * @param deploymentLicenseRequest Request body for creating a deployment license.
   * @param options The options parameters.
   */
  create(
    deploymentLicenseRequest: DeploymentLicenseRequest,
    options?: DeploymentLicenseCreateOptionalParams,
  ): Promise<DeploymentLicenseCreateResponse> {
    return this.client.sendOperationRequest(
      { deploymentLicenseRequest, options },
      createOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.AzureStack/generateDeploymentLicense",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentLicenseResponse,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.deploymentLicenseRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
