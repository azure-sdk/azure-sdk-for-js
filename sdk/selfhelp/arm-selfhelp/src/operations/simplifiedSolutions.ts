/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { SimplifiedSolutions } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { HelpRP } from "../helpRP.js";
import { SimplePollerLike, OperationState, createHttpPoller } from "@azure/core-lro";
import { createLroSpec } from "../lroImpl.js";
import {
  SimplifiedSolutionsGetOptionalParams,
  SimplifiedSolutionsGetResponse,
  SimplifiedSolutionsResource,
  SimplifiedSolutionsCreateOptionalParams,
  SimplifiedSolutionsCreateResponse,
} from "../models/index.js";

/** Class containing SimplifiedSolutions operations. */
export class SimplifiedSolutionsImpl implements SimplifiedSolutions {
  private readonly client: HelpRP;

  /**
   * Initialize a new instance of the class SimplifiedSolutions class.
   * @param client Reference to the service client
   */
  constructor(client: HelpRP) {
    this.client = client;
  }

  /**
   * Get the simplified Solutions using the applicable solutionResourceName while creating the simplified
   * Solutions.
   * @param scope The fully qualified Azure Resource manager identifier of the resource.
   * @param simplifiedSolutionsResourceName Simplified Solutions Resource Name.
   * @param options The options parameters.
   */
  get(
    scope: string,
    simplifiedSolutionsResourceName: string,
    options?: SimplifiedSolutionsGetOptionalParams,
  ): Promise<SimplifiedSolutionsGetResponse> {
    return this.client.sendOperationRequest(
      { scope, simplifiedSolutionsResourceName, options },
      getOperationSpec,
    );
  }

  /**
   * Creates Simplified Solutions for an Azure subscription using 'solutionId' from Discovery Solutions
   * as the input. <br/><br/> Simplified Solutions API makes the consumption of solutions APIs easier
   * while still providing access to the same powerful solutions rendered in Solutions API. With
   * Simplified Solutions, users don't have to worry about stitching together the article using
   * replacement maps and can use the content in the API response to directly render as HTML
   * content.<br/>
   * @param scope The fully qualified Azure Resource manager identifier of the resource.
   * @param simplifiedSolutionsResourceName Simplified Solutions Resource Name.
   * @param simplifiedSolutionsRequestBody The required request body for simplified Solutions resource
   *                                       creation.
   * @param options The options parameters.
   */
  async beginCreate(
    scope: string,
    simplifiedSolutionsResourceName: string,
    simplifiedSolutionsRequestBody: SimplifiedSolutionsResource,
    options?: SimplifiedSolutionsCreateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<SimplifiedSolutionsCreateResponse>,
      SimplifiedSolutionsCreateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<SimplifiedSolutionsCreateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        scope,
        simplifiedSolutionsResourceName,
        simplifiedSolutionsRequestBody,
        options,
      },
      spec: createOperationSpec,
    });
    const poller = await createHttpPoller<
      SimplifiedSolutionsCreateResponse,
      OperationState<SimplifiedSolutionsCreateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Creates Simplified Solutions for an Azure subscription using 'solutionId' from Discovery Solutions
   * as the input. <br/><br/> Simplified Solutions API makes the consumption of solutions APIs easier
   * while still providing access to the same powerful solutions rendered in Solutions API. With
   * Simplified Solutions, users don't have to worry about stitching together the article using
   * replacement maps and can use the content in the API response to directly render as HTML
   * content.<br/>
   * @param scope The fully qualified Azure Resource manager identifier of the resource.
   * @param simplifiedSolutionsResourceName Simplified Solutions Resource Name.
   * @param simplifiedSolutionsRequestBody The required request body for simplified Solutions resource
   *                                       creation.
   * @param options The options parameters.
   */
  async beginCreateAndWait(
    scope: string,
    simplifiedSolutionsResourceName: string,
    simplifiedSolutionsRequestBody: SimplifiedSolutionsResource,
    options?: SimplifiedSolutionsCreateOptionalParams,
  ): Promise<SimplifiedSolutionsCreateResponse> {
    const poller = await this.beginCreate(
      scope,
      simplifiedSolutionsResourceName,
      simplifiedSolutionsRequestBody,
      options,
    );
    return poller.pollUntilDone();
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path: "/{scope}/providers/Microsoft.Help/simplifiedSolutions/{simplifiedSolutionsResourceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SimplifiedSolutionsResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.scope, Parameters.simplifiedSolutionsResourceName],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOperationSpec: coreClient.OperationSpec = {
  path: "/{scope}/providers/Microsoft.Help/simplifiedSolutions/{simplifiedSolutionsResourceName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SimplifiedSolutionsResource,
    },
    201: {
      bodyMapper: Mappers.SimplifiedSolutionsResource,
    },
    202: {
      bodyMapper: Mappers.SimplifiedSolutionsResource,
    },
    204: {
      bodyMapper: Mappers.SimplifiedSolutionsResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.simplifiedSolutionsRequestBody,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.scope, Parameters.simplifiedSolutionsResourceName],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
