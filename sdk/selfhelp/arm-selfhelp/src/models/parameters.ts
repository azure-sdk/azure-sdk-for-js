/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter,
} from "@azure/core-client";
import {
  CheckNameAvailabilityRequest as CheckNameAvailabilityRequestMapper,
  DiagnosticResource as DiagnosticResourceMapper,
  SimplifiedSolutionsResource as SimplifiedSolutionsResourceMapper,
  SolutionResource as SolutionResourceMapper,
  SolutionPatchRequestBody as SolutionPatchRequestBodyMapper,
  SolutionWarmUpRequestBody as SolutionWarmUpRequestBodyMapper,
  TroubleshooterResource as TroubleshooterResourceMapper,
  ContinueRequestBody as ContinueRequestBodyMapper,
  DiscoveryNlpRequest as DiscoveryNlpRequestMapper,
} from "../models/mappers.js";

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String",
    },
  },
};

export const checkNameAvailabilityRequest: OperationParameter = {
  parameterPath: ["options", "checkNameAvailabilityRequest"],
  mapper: CheckNameAvailabilityRequestMapper,
};

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String",
    },
  },
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2024-03-01-preview",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String",
    },
  },
};

export const scope: OperationURLParameter = {
  parameterPath: "scope",
  mapper: {
    serializedName: "scope",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const diagnosticsResourceName: OperationURLParameter = {
  parameterPath: "diagnosticsResourceName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[A-Za-z0-9-+@()_]+$"),
      MaxLength: 100,
      MinLength: 1,
    },
    serializedName: "diagnosticsResourceName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const diagnosticResourceRequest: OperationParameter = {
  parameterPath: "diagnosticResourceRequest",
  mapper: DiagnosticResourceMapper,
};

export const simplifiedSolutionsResourceName: OperationURLParameter = {
  parameterPath: "simplifiedSolutionsResourceName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[A-Za-z0-9-+@()_]+$"),
      MaxLength: 100,
      MinLength: 1,
    },
    serializedName: "simplifiedSolutionsResourceName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const simplifiedSolutionsRequestBody: OperationParameter = {
  parameterPath: "simplifiedSolutionsRequestBody",
  mapper: SimplifiedSolutionsResourceMapper,
};

export const solutionResourceName: OperationURLParameter = {
  parameterPath: "solutionResourceName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[A-Za-z0-9-+@()_]+$"),
      MaxLength: 100,
      MinLength: 1,
    },
    serializedName: "solutionResourceName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const solutionRequestBody: OperationParameter = {
  parameterPath: "solutionRequestBody",
  mapper: SolutionResourceMapper,
};

export const solutionPatchRequestBody: OperationParameter = {
  parameterPath: "solutionPatchRequestBody",
  mapper: SolutionPatchRequestBodyMapper,
};

export const solutionWarmUpRequestBody: OperationParameter = {
  parameterPath: ["options", "solutionWarmUpRequestBody"],
  mapper: SolutionWarmUpRequestBodyMapper,
};

export const troubleshooterName: OperationURLParameter = {
  parameterPath: "troubleshooterName",
  mapper: {
    constraints: {
      Pattern: new RegExp("([A-Za-z0-9]+(-[A-Za-z0-9]+)+)"),
      MaxLength: 100,
      MinLength: 1,
    },
    serializedName: "troubleshooterName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const createTroubleshooterRequestBody: OperationParameter = {
  parameterPath: "createTroubleshooterRequestBody",
  mapper: TroubleshooterResourceMapper,
};

export const continueRequestBody: OperationParameter = {
  parameterPath: ["options", "continueRequestBody"],
  mapper: ContinueRequestBodyMapper,
};

export const discoverSolutionRequest: OperationParameter = {
  parameterPath: "discoverSolutionRequest",
  mapper: DiscoveryNlpRequestMapper,
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "Uuid",
    },
  },
};

export const filter: OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String",
    },
  },
};

export const skiptoken: OperationQueryParameter = {
  parameterPath: ["options", "skiptoken"],
  mapper: {
    serializedName: "$skiptoken",
    type: {
      name: "String",
    },
  },
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const solutionId: OperationURLParameter = {
  parameterPath: "solutionId",
  mapper: {
    constraints: {
      MaxLength: 100,
      MinLength: 1,
    },
    serializedName: "solutionId",
    required: true,
    type: {
      name: "String",
    },
  },
};
