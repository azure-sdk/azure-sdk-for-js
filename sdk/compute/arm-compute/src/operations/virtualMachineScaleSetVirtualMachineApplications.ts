/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { VirtualMachineScaleSetVirtualMachineApplications } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ComputeManagementClient } from "../computeManagementClient";
import {
  VirtualMachineScaleSetVirtualMachineApplicationsGetOptionalParams,
  VirtualMachineScaleSetVirtualMachineApplicationsGetResponse,
  VirtualMachineScaleSetVirtualMachineApplicationsGetInstanceViewOptionalParams,
  VirtualMachineScaleSetVirtualMachineApplicationsGetInstanceViewResponse
} from "../models";

/** Class containing VirtualMachineScaleSetVirtualMachineApplications operations. */
export class VirtualMachineScaleSetVirtualMachineApplicationsImpl
  implements VirtualMachineScaleSetVirtualMachineApplications {
  private readonly client: ComputeManagementClient;

  /**
   * Initialize a new instance of the class VirtualMachineScaleSetVirtualMachineApplications class.
   * @param client Reference to the service client
   */
  constructor(client: ComputeManagementClient) {
    this.client = client;
  }

  /**
   * Gets an application in a VM scale set instance.
   * @param resourceGroupName The name of the resource group.
   * @param vmScaleSetName The name of the VM scale set containing the extension.
   * @param instanceId The instance ID of the virtual machine.
   * @param applicationName The name of the application to query.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    vmScaleSetName: string,
    instanceId: string,
    applicationName: string,
    options?: VirtualMachineScaleSetVirtualMachineApplicationsGetOptionalParams
  ): Promise<VirtualMachineScaleSetVirtualMachineApplicationsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        vmScaleSetName,
        instanceId,
        applicationName,
        options
      },
      getOperationSpec
    );
  }

  /**
   * Gets an application in a VM scale set instance with instanceView.
   * @param resourceGroupName The name of the resource group.
   * @param vmScaleSetName The name of the VM scale set containing the extension.
   * @param instanceId The instance ID of the virtual machine.
   * @param applicationName The name of the application to query.
   * @param options The options parameters.
   */
  getInstanceView(
    resourceGroupName: string,
    vmScaleSetName: string,
    instanceId: string,
    applicationName: string,
    options?: VirtualMachineScaleSetVirtualMachineApplicationsGetInstanceViewOptionalParams
  ): Promise<
    VirtualMachineScaleSetVirtualMachineApplicationsGetInstanceViewResponse
  > {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        vmScaleSetName,
        instanceId,
        applicationName,
        options
      },
      getInstanceViewOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualMachines/{instanceId}/applications/{applicationName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VMApplicationProxyResourceWithInstanceView
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.expand3],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vmScaleSetName,
    Parameters.applicationName,
    Parameters.instanceId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getInstanceViewOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualMachines/{instanceId}/applications/{applicationName}/instanceView",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VMApplicationProxyResourceWithInstanceView
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vmScaleSetName,
    Parameters.applicationName,
    Parameters.instanceId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
