/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { GalleryScripts } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { ComputeManagementClient } from "../computeManagementClient.js";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl.js";
import {
  GalleryScript,
  GalleryScriptsListByGalleryNextOptionalParams,
  GalleryScriptsListByGalleryOptionalParams,
  GalleryScriptsListByGalleryResponse,
  GalleryScriptsCreateOrUpdateOptionalParams,
  GalleryScriptsCreateOrUpdateResponse,
  GalleryScriptUpdate,
  GalleryScriptsUpdateOptionalParams,
  GalleryScriptsUpdateResponse,
  GalleryScriptsGetOptionalParams,
  GalleryScriptsGetResponse,
  GalleryScriptsDeleteOptionalParams,
  GalleryScriptsDeleteResponse,
  GalleryScriptsListByGalleryNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing GalleryScripts operations. */
export class GalleryScriptsImpl implements GalleryScripts {
  private readonly client: ComputeManagementClient;

  /**
   * Initialize a new instance of the class GalleryScripts class.
   * @param client Reference to the service client
   */
  constructor(client: ComputeManagementClient) {
    this.client = client;
  }

  /**
   * List gallery Script Definitions in a gallery.
   * @param resourceGroupName The name of the resource group.
   * @param options The options parameters.
   */
  public listByGallery(
    resourceGroupName: string,
    options?: GalleryScriptsListByGalleryOptionalParams,
  ): PagedAsyncIterableIterator<GalleryScript> {
    const iter = this.listByGalleryPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByGalleryPagingPage(
          resourceGroupName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByGalleryPagingPage(
    resourceGroupName: string,
    options?: GalleryScriptsListByGalleryOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<GalleryScript[]> {
    let result: GalleryScriptsListByGalleryResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByGallery(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByGalleryNext(
        resourceGroupName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByGalleryPagingAll(
    resourceGroupName: string,
    options?: GalleryScriptsListByGalleryOptionalParams,
  ): AsyncIterableIterator<GalleryScript> {
    for await (const page of this.listByGalleryPagingPage(
      resourceGroupName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Create or update a Gallery Script Definition. Gallery scripts allow the storage, sharing and reuse
   * of common scripts
   * @param resourceGroupName The name of the resource group.
   * @param galleryScript Parameters supplied to the create or update gallery Script operation.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    galleryScript: GalleryScript,
    options?: GalleryScriptsCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<GalleryScriptsCreateOrUpdateResponse>,
      GalleryScriptsCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<GalleryScriptsCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, galleryScript, options },
      spec: createOrUpdateOperationSpec,
    });
    const poller = await createHttpPoller<
      GalleryScriptsCreateOrUpdateResponse,
      OperationState<GalleryScriptsCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create or update a Gallery Script Definition. Gallery scripts allow the storage, sharing and reuse
   * of common scripts
   * @param resourceGroupName The name of the resource group.
   * @param galleryScript Parameters supplied to the create or update gallery Script operation.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    galleryScript: GalleryScript,
    options?: GalleryScriptsCreateOrUpdateOptionalParams,
  ): Promise<GalleryScriptsCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      galleryScript,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Update a gallery Script Definition.
   * @param resourceGroupName The name of the resource group.
   * @param galleryScript Parameters supplied to the update gallery Script operation.
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    galleryScript: GalleryScriptUpdate,
    options?: GalleryScriptsUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<GalleryScriptsUpdateResponse>,
      GalleryScriptsUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<GalleryScriptsUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, galleryScript, options },
      spec: updateOperationSpec,
    });
    const poller = await createHttpPoller<
      GalleryScriptsUpdateResponse,
      OperationState<GalleryScriptsUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
    });
    await poller.poll();
    return poller;
  }

  /**
   * Update a gallery Script Definition.
   * @param resourceGroupName The name of the resource group.
   * @param galleryScript Parameters supplied to the update gallery Script operation.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    galleryScript: GalleryScriptUpdate,
    options?: GalleryScriptsUpdateOptionalParams,
  ): Promise<GalleryScriptsUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      galleryScript,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Retrieves information about a gallery Script Definition.
   * @param resourceGroupName The name of the resource group.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    options?: GalleryScriptsGetOptionalParams,
  ): Promise<GalleryScriptsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      getOperationSpec,
    );
  }

  /**
   * Delete a gallery Script.
   * @param resourceGroupName The name of the resource group.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    options?: GalleryScriptsDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<GalleryScriptsDeleteResponse>,
      GalleryScriptsDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<GalleryScriptsDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, options },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<
      GalleryScriptsDeleteResponse,
      OperationState<GalleryScriptsDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete a gallery Script.
   * @param resourceGroupName The name of the resource group.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    options?: GalleryScriptsDeleteOptionalParams,
  ): Promise<GalleryScriptsDeleteResponse> {
    const poller = await this.beginDelete(resourceGroupName, options);
    return poller.pollUntilDone();
  }

  /**
   * List gallery Script Definitions in a gallery.
   * @param resourceGroupName The name of the resource group.
   * @param options The options parameters.
   */
  private _listByGallery(
    resourceGroupName: string,
    options?: GalleryScriptsListByGalleryOptionalParams,
  ): Promise<GalleryScriptsListByGalleryResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByGalleryOperationSpec,
    );
  }

  /**
   * ListByGalleryNext
   * @param resourceGroupName The name of the resource group.
   * @param nextLink The nextLink from the previous successful call to the ListByGallery method.
   * @param options The options parameters.
   */
  private _listByGalleryNext(
    resourceGroupName: string,
    nextLink: string,
    options?: GalleryScriptsListByGalleryNextOptionalParams,
  ): Promise<GalleryScriptsListByGalleryNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByGalleryNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/scripts/{galleryScriptName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.GalleryScript,
      headersMapper: Mappers.GalleryScriptsCreateOrUpdateHeaders,
    },
    201: {
      bodyMapper: Mappers.GalleryScript,
      headersMapper: Mappers.GalleryScriptsCreateOrUpdateHeaders,
    },
    202: {
      bodyMapper: Mappers.GalleryScript,
      headersMapper: Mappers.GalleryScriptsCreateOrUpdateHeaders,
    },
    204: {
      bodyMapper: Mappers.GalleryScript,
      headersMapper: Mappers.GalleryScriptsCreateOrUpdateHeaders,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  requestBody: Parameters.galleryScript,
  queryParameters: [Parameters.apiVersion3],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.galleryName,
    Parameters.galleryScriptName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/scripts/{galleryScriptName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.GalleryScript,
    },
    201: {
      bodyMapper: Mappers.GalleryScript,
    },
    202: {
      bodyMapper: Mappers.GalleryScript,
    },
    204: {
      bodyMapper: Mappers.GalleryScript,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  requestBody: Parameters.galleryScript1,
  queryParameters: [Parameters.apiVersion3],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.galleryName,
    Parameters.galleryScriptName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/scripts/{galleryScriptName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GalleryScript,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion3],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.galleryName,
    Parameters.galleryScriptName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/scripts/{galleryScriptName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.GalleryScriptsDeleteHeaders,
    },
    201: {
      headersMapper: Mappers.GalleryScriptsDeleteHeaders,
    },
    202: {
      headersMapper: Mappers.GalleryScriptsDeleteHeaders,
    },
    204: {
      headersMapper: Mappers.GalleryScriptsDeleteHeaders,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion3],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.galleryName,
    Parameters.galleryScriptName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByGalleryOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/scripts",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GalleryScriptList,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion3],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.galleryName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByGalleryNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GalleryScriptList,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.resourceGroupName,
    Parameters.galleryName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
