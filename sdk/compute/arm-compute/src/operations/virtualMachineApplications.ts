/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { VirtualMachineApplications } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ComputeManagementClient } from "../computeManagementClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  VirtualMachineApplicationsListOptionalParams,
  VirtualMachineApplicationsListResponse,
  VirtualMachineApplicationsGetOptionalParams,
  VirtualMachineApplicationsGetResponse,
  VirtualMachineApplicationsDeleteOptionalParams,
  VMApplicationProxyResource,
  VirtualMachineApplicationsPutOptionalParams,
  VirtualMachineApplicationsPutResponse,
  VirtualMachineApplicationsGetInstanceViewOptionalParams,
  VirtualMachineApplicationsGetInstanceViewResponse
} from "../models";

/** Class containing VirtualMachineApplications operations. */
export class VirtualMachineApplicationsImpl
  implements VirtualMachineApplications {
  private readonly client: ComputeManagementClient;

  /**
   * Initialize a new instance of the class VirtualMachineApplications class.
   * @param client Reference to the service client
   */
  constructor(client: ComputeManagementClient) {
    this.client = client;
  }

  /**
   * The operation to get all applications of a Virtual Machine.
   * @param resourceGroupName The name of the resource group.
   * @param vmName The name of the virtual machine.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    vmName: string,
    options?: VirtualMachineApplicationsListOptionalParams
  ): Promise<VirtualMachineApplicationsListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, vmName, options },
      listOperationSpec
    );
  }

  /**
   * The operation to get the status of an application on a Virtual Machine.
   * @param resourceGroupName The name of the resource group.
   * @param vmName The name of the virtual machine.
   * @param applicationName The name of the application to query.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    vmName: string,
    applicationName: string,
    options?: VirtualMachineApplicationsGetOptionalParams
  ): Promise<VirtualMachineApplicationsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, vmName, applicationName, options },
      getOperationSpec
    );
  }

  /**
   * The operation to delete an application on a Virtual Machine.
   * @param resourceGroupName The name of the resource group.
   * @param vmName The name of the virtual machine.
   * @param applicationName The name of the application to delete.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    vmName: string,
    applicationName: string,
    options?: VirtualMachineApplicationsDeleteOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, vmName, applicationName, options },
      spec: deleteOperationSpec
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * The operation to delete an application on a Virtual Machine.
   * @param resourceGroupName The name of the resource group.
   * @param vmName The name of the virtual machine.
   * @param applicationName The name of the application to delete.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    vmName: string,
    applicationName: string,
    options?: VirtualMachineApplicationsDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      vmName,
      applicationName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * The operation to add an application on a Virtual Machine.
   * @param resourceGroupName The name of the resource group.
   * @param vmName The name of the virtual machine.
   * @param applicationName The name of the application to delete.
   * @param application The definition of the VMApplication to add the virtual machine
   * @param options The options parameters.
   */
  async beginPut(
    resourceGroupName: string,
    vmName: string,
    applicationName: string,
    application: VMApplicationProxyResource,
    options?: VirtualMachineApplicationsPutOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<VirtualMachineApplicationsPutResponse>,
      VirtualMachineApplicationsPutResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<VirtualMachineApplicationsPutResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        vmName,
        applicationName,
        application,
        options
      },
      spec: putOperationSpec
    });
    const poller = await createHttpPoller<
      VirtualMachineApplicationsPutResponse,
      OperationState<VirtualMachineApplicationsPutResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * The operation to add an application on a Virtual Machine.
   * @param resourceGroupName The name of the resource group.
   * @param vmName The name of the virtual machine.
   * @param applicationName The name of the application to delete.
   * @param application The definition of the VMApplication to add the virtual machine
   * @param options The options parameters.
   */
  async beginPutAndWait(
    resourceGroupName: string,
    vmName: string,
    applicationName: string,
    application: VMApplicationProxyResource,
    options?: VirtualMachineApplicationsPutOptionalParams
  ): Promise<VirtualMachineApplicationsPutResponse> {
    const poller = await this.beginPut(
      resourceGroupName,
      vmName,
      applicationName,
      application,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * The operation to get the status of an application on a Virtual Machine with instance View.
   * @param resourceGroupName The name of the resource group.
   * @param vmName The name of the virtual machine.
   * @param applicationName The name of the application to query.
   * @param options The options parameters.
   */
  getInstanceView(
    resourceGroupName: string,
    vmName: string,
    applicationName: string,
    options?: VirtualMachineApplicationsGetInstanceViewOptionalParams
  ): Promise<VirtualMachineApplicationsGetInstanceViewResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, vmName, applicationName, options },
      getInstanceViewOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/VMApplications",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VirtualMachineApplicationsProxyResourceListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vmName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/VMApplications/{applicationName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VMApplicationProxyResourceWithInstanceView
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.expand3],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.applicationName,
    Parameters.vmName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/VMApplications/{applicationName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.applicationName,
    Parameters.vmName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const putOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/VMApplications/{applicationName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.VMApplicationProxyResource
    },
    201: {
      bodyMapper: Mappers.VMApplicationProxyResource
    },
    202: {
      bodyMapper: Mappers.VMApplicationProxyResource
    },
    204: {
      bodyMapper: Mappers.VMApplicationProxyResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.application,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.applicationName,
    Parameters.vmName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getInstanceViewOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/vmapplications/{applicationName}/instanceView",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VMApplicationProxyResourceWithInstanceView
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.applicationName,
    Parameters.vmName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
