/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { GallerySecurityPostureVersions } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ComputeManagementClient } from "../computeManagementClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  GallerySecurityPostureVersion,
  GallerySecurityPostureVersionsCreateOrUpdateOptionalParams,
  GallerySecurityPostureVersionsCreateOrUpdateResponse,
  GallerySecurityPostureVersionUpdate,
  GallerySecurityPostureVersionsUpdateOptionalParams,
  GallerySecurityPostureVersionsUpdateResponse,
  GallerySecurityPostureVersionsGetOptionalParams,
  GallerySecurityPostureVersionsGetResponse,
  GallerySecurityPostureVersionsDeleteOptionalParams,
} from "../models";

/** Class containing GallerySecurityPostureVersions operations. */
export class GallerySecurityPostureVersionsImpl
  implements GallerySecurityPostureVersions
{
  private readonly client: ComputeManagementClient;

  /**
   * Initialize a new instance of the class GallerySecurityPostureVersions class.
   * @param client Reference to the service client
   */
  constructor(client: ComputeManagementClient) {
    this.client = client;
  }

  /**
   * Create or update a gallery security posture version.
   * @param resourceGroupName The name of the resource group.
   * @param galleryName The name of the gallery in which the security posture definition resides.
   * @param securityPostureName The name of the gallery security posture definition in which the security
   *                            posture version is to be created.
   * @param securityPostureVersionName The name of the gallery security posture Version to be created.
   *                                   Needs to follow semantic version name pattern: The allowed characters are digit and period. Digits
   *                                   must be within the range of a 32-bit integer. Format: <MajorVersion>.<MinorVersion>.<Patch>
   * @param gallerySecurityPostureVersion Parameters supplied to the create or update gallery security
   *                                      posture version operation.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    galleryName: string,
    securityPostureName: string,
    securityPostureVersionName: string,
    gallerySecurityPostureVersion: GallerySecurityPostureVersion,
    options?: GallerySecurityPostureVersionsCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<GallerySecurityPostureVersionsCreateOrUpdateResponse>,
      GallerySecurityPostureVersionsCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<GallerySecurityPostureVersionsCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        galleryName,
        securityPostureName,
        securityPostureVersionName,
        gallerySecurityPostureVersion,
        options,
      },
      spec: createOrUpdateOperationSpec,
    });
    const poller = await createHttpPoller<
      GallerySecurityPostureVersionsCreateOrUpdateResponse,
      OperationState<GallerySecurityPostureVersionsCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create or update a gallery security posture version.
   * @param resourceGroupName The name of the resource group.
   * @param galleryName The name of the gallery in which the security posture definition resides.
   * @param securityPostureName The name of the gallery security posture definition in which the security
   *                            posture version is to be created.
   * @param securityPostureVersionName The name of the gallery security posture Version to be created.
   *                                   Needs to follow semantic version name pattern: The allowed characters are digit and period. Digits
   *                                   must be within the range of a 32-bit integer. Format: <MajorVersion>.<MinorVersion>.<Patch>
   * @param gallerySecurityPostureVersion Parameters supplied to the create or update gallery security
   *                                      posture version operation.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    galleryName: string,
    securityPostureName: string,
    securityPostureVersionName: string,
    gallerySecurityPostureVersion: GallerySecurityPostureVersion,
    options?: GallerySecurityPostureVersionsCreateOrUpdateOptionalParams,
  ): Promise<GallerySecurityPostureVersionsCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      galleryName,
      securityPostureName,
      securityPostureVersionName,
      gallerySecurityPostureVersion,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Update a gallery security posture version.
   * @param resourceGroupName The name of the resource group.
   * @param galleryName The name of the gallery in which the security posture definition resides.
   * @param securityPostureName The name of the gallery security posture definition in which the version
   *                            is to be updated.
   * @param securityPostureVersionName The name of the gallery security posture version to be updated.
   *                                   Needs to follow semantic version name pattern: The allowed characters are digit and period. Digits
   *                                   must be within the range of a 32-bit integer. Format: <MajorVersion>.<MinorVersion>.<Patch>
   * @param gallerySecurityPostureVersion Parameters supplied to the update gallery security posture
   *                                      version operation.
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    galleryName: string,
    securityPostureName: string,
    securityPostureVersionName: string,
    gallerySecurityPostureVersion: GallerySecurityPostureVersionUpdate,
    options?: GallerySecurityPostureVersionsUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<GallerySecurityPostureVersionsUpdateResponse>,
      GallerySecurityPostureVersionsUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<GallerySecurityPostureVersionsUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        galleryName,
        securityPostureName,
        securityPostureVersionName,
        gallerySecurityPostureVersion,
        options,
      },
      spec: updateOperationSpec,
    });
    const poller = await createHttpPoller<
      GallerySecurityPostureVersionsUpdateResponse,
      OperationState<GallerySecurityPostureVersionsUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
    });
    await poller.poll();
    return poller;
  }

  /**
   * Update a gallery security posture version.
   * @param resourceGroupName The name of the resource group.
   * @param galleryName The name of the gallery in which the security posture definition resides.
   * @param securityPostureName The name of the gallery security posture definition in which the version
   *                            is to be updated.
   * @param securityPostureVersionName The name of the gallery security posture version to be updated.
   *                                   Needs to follow semantic version name pattern: The allowed characters are digit and period. Digits
   *                                   must be within the range of a 32-bit integer. Format: <MajorVersion>.<MinorVersion>.<Patch>
   * @param gallerySecurityPostureVersion Parameters supplied to the update gallery security posture
   *                                      version operation.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    galleryName: string,
    securityPostureName: string,
    securityPostureVersionName: string,
    gallerySecurityPostureVersion: GallerySecurityPostureVersionUpdate,
    options?: GallerySecurityPostureVersionsUpdateOptionalParams,
  ): Promise<GallerySecurityPostureVersionsUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      galleryName,
      securityPostureName,
      securityPostureVersionName,
      gallerySecurityPostureVersion,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Retrieves information about a gallery security posture version.
   * @param resourceGroupName The name of the resource group.
   * @param galleryName The name of the Shared Application Gallery in which the Application Definition
   *                    resides.
   * @param securityPostureName The name of the gallery security posture definition in which the version
   *                            resides.
   * @param securityPostureVersionName The name of the gallery security posture version to be retrieved.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    galleryName: string,
    securityPostureName: string,
    securityPostureVersionName: string,
    options?: GallerySecurityPostureVersionsGetOptionalParams,
  ): Promise<GallerySecurityPostureVersionsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        galleryName,
        securityPostureName,
        securityPostureVersionName,
        options,
      },
      getOperationSpec,
    );
  }

  /**
   * Delete a gallery security posture version.
   * @param resourceGroupName The name of the resource group.
   * @param galleryName The name of the Shared Application Gallery in which the Application Definition
   *                    resides.
   * @param securityPostureName The name of the gallery security posture definition in which the version
   *                            resides.
   * @param securityPostureVersionName The name of the gallery security posture version to be deleted.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    galleryName: string,
    securityPostureName: string,
    securityPostureVersionName: string,
    options?: GallerySecurityPostureVersionsDeleteOptionalParams,
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        galleryName,
        securityPostureName,
        securityPostureVersionName,
        options,
      },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete a gallery security posture version.
   * @param resourceGroupName The name of the resource group.
   * @param galleryName The name of the Shared Application Gallery in which the Application Definition
   *                    resides.
   * @param securityPostureName The name of the gallery security posture definition in which the version
   *                            resides.
   * @param securityPostureVersionName The name of the gallery security posture version to be deleted.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    galleryName: string,
    securityPostureName: string,
    securityPostureVersionName: string,
    options?: GallerySecurityPostureVersionsDeleteOptionalParams,
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      galleryName,
      securityPostureName,
      securityPostureVersionName,
      options,
    );
    return poller.pollUntilDone();
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/securityPostures/{securityPostureName}/versions/{securityPostureVersionName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.GallerySecurityPostureVersion,
    },
    201: {
      bodyMapper: Mappers.GallerySecurityPostureVersion,
    },
    202: {
      bodyMapper: Mappers.GallerySecurityPostureVersion,
    },
    204: {
      bodyMapper: Mappers.GallerySecurityPostureVersion,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  requestBody: Parameters.gallerySecurityPostureVersion,
  queryParameters: [Parameters.apiVersion3],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.galleryName,
    Parameters.securityPostureName,
    Parameters.securityPostureVersionName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/securityPostures/{securityPostureName}/versions/{securityPostureVersionName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.GallerySecurityPostureVersion,
    },
    201: {
      bodyMapper: Mappers.GallerySecurityPostureVersion,
    },
    202: {
      bodyMapper: Mappers.GallerySecurityPostureVersion,
    },
    204: {
      bodyMapper: Mappers.GallerySecurityPostureVersion,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  requestBody: Parameters.gallerySecurityPostureVersion1,
  queryParameters: [Parameters.apiVersion3],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.galleryName,
    Parameters.securityPostureName,
    Parameters.securityPostureVersionName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/securityPostures/{securityPostureName}/versions/{securityPostureVersionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GallerySecurityPostureVersion,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion3, Parameters.expand11],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.galleryName,
    Parameters.securityPostureName,
    Parameters.securityPostureVersionName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/securityPostures/{securityPostureName}/versions/{securityPostureVersionName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion3],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.galleryName,
    Parameters.securityPostureName,
    Parameters.securityPostureVersionName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
