/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { DiskInspectionStorageConfiguration } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ComputeManagementClient } from "../computeManagementClient";
import {
  StorageConfigurationInput,
  DiskInspectionStorageConfigurationRegisterOptionalParams,
  DiskInspectionStorageConfigurationValidateOptionalParams,
  DiskInspectionStorageConfigurationValidateResponse,
} from "../models";

/** Class containing DiskInspectionStorageConfiguration operations. */
export class DiskInspectionStorageConfigurationImpl
  implements DiskInspectionStorageConfiguration
{
  private readonly client: ComputeManagementClient;

  /**
   * Initialize a new instance of the class DiskInspectionStorageConfiguration class.
   * @param client Reference to the service client
   */
  constructor(client: ComputeManagementClient) {
    this.client = client;
  }

  /**
   * Register a storageAccount for a subscription used for DiskInspection
   * @param location The location used to execute the diagnostic operation.
   * @param storageConfigurationInput Storage Configuration object supplied in the body of the Post to
   *                                  cache storageAccount for a given subscription.
   * @param options The options parameters.
   */
  register(
    location: string,
    storageConfigurationInput: StorageConfigurationInput,
    options?: DiskInspectionStorageConfigurationRegisterOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { location, storageConfigurationInput, options },
      registerOperationSpec,
    );
  }

  /**
   * Validate if a storageAccount configuration exists for a subscription used for DiskInspection.
   * @param location The location used to execute the diagnostic operation.
   * @param options The options parameters.
   */
  validate(
    location: string,
    options?: DiskInspectionStorageConfigurationValidateOptionalParams,
  ): Promise<DiskInspectionStorageConfigurationValidateResponse> {
    return this.client.sendOperationRequest(
      { location, options },
      validateOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const registerOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/diagnostics/diskInspection/registerStorageConfiguration",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.storageConfigurationInput,
  queryParameters: [Parameters.apiVersion5],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location1,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const validateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/diagnostics/diskInspection/validateStorageConfiguration",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.StorageConfigurationResponse,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion5],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location1,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
