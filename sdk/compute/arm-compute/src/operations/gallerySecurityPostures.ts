/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { GallerySecurityPostures } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ComputeManagementClient } from "../computeManagementClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  GallerySecurityPosture,
  GallerySecurityPosturesCreateOrUpdateOptionalParams,
  GallerySecurityPosturesCreateOrUpdateResponse,
  GallerySecurityPostureUpdate,
  GallerySecurityPosturesUpdateOptionalParams,
  GallerySecurityPosturesUpdateResponse,
  GallerySecurityPosturesGetOptionalParams,
  GallerySecurityPosturesGetResponse,
  GallerySecurityPosturesDeleteOptionalParams,
} from "../models";

/** Class containing GallerySecurityPostures operations. */
export class GallerySecurityPosturesImpl implements GallerySecurityPostures {
  private readonly client: ComputeManagementClient;

  /**
   * Initialize a new instance of the class GallerySecurityPostures class.
   * @param client Reference to the service client
   */
  constructor(client: ComputeManagementClient) {
    this.client = client;
  }

  /**
   * Create or update a gallery security posture definition.
   * @param resourceGroupName The name of the resource group.
   * @param galleryName The name of the Shared Image Gallery in which the security posture Definition is
   *                    to be created.
   * @param securityPostureName The name of the gallery security posture definition to be created or
   *                            updated. The allowed characters are alphabets and numbers with dots, dashes, and periods allowed in
   *                            the middle. The maximum length is 80 characters.
   * @param gallerySecurityPosture Parameters supplied to the create or update gallery security posture
   *                               operation.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    galleryName: string,
    securityPostureName: string,
    gallerySecurityPosture: GallerySecurityPosture,
    options?: GallerySecurityPosturesCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<GallerySecurityPosturesCreateOrUpdateResponse>,
      GallerySecurityPosturesCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<GallerySecurityPosturesCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        galleryName,
        securityPostureName,
        gallerySecurityPosture,
        options,
      },
      spec: createOrUpdateOperationSpec,
    });
    const poller = await createHttpPoller<
      GallerySecurityPosturesCreateOrUpdateResponse,
      OperationState<GallerySecurityPosturesCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create or update a gallery security posture definition.
   * @param resourceGroupName The name of the resource group.
   * @param galleryName The name of the Shared Image Gallery in which the security posture Definition is
   *                    to be created.
   * @param securityPostureName The name of the gallery security posture definition to be created or
   *                            updated. The allowed characters are alphabets and numbers with dots, dashes, and periods allowed in
   *                            the middle. The maximum length is 80 characters.
   * @param gallerySecurityPosture Parameters supplied to the create or update gallery security posture
   *                               operation.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    galleryName: string,
    securityPostureName: string,
    gallerySecurityPosture: GallerySecurityPosture,
    options?: GallerySecurityPosturesCreateOrUpdateOptionalParams,
  ): Promise<GallerySecurityPosturesCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      galleryName,
      securityPostureName,
      gallerySecurityPosture,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Update a gallery security posture definition.
   * @param resourceGroupName The name of the resource group.
   * @param galleryName The name of the Shared Image Gallery in which the security posture Definition is
   *                    to be updated.
   * @param securityPostureName The name of the gallery security posture definition to be updated. The
   *                            allowed characters are alphabets and numbers with dots, dashes, and periods allowed in the middle.
   *                            The maximum length is 80 characters.
   * @param gallerySecurityPosture Parameters supplied to the update gallery security posture operation.
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    galleryName: string,
    securityPostureName: string,
    gallerySecurityPosture: GallerySecurityPostureUpdate,
    options?: GallerySecurityPosturesUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<GallerySecurityPosturesUpdateResponse>,
      GallerySecurityPosturesUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<GallerySecurityPosturesUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        galleryName,
        securityPostureName,
        gallerySecurityPosture,
        options,
      },
      spec: updateOperationSpec,
    });
    const poller = await createHttpPoller<
      GallerySecurityPosturesUpdateResponse,
      OperationState<GallerySecurityPosturesUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
    });
    await poller.poll();
    return poller;
  }

  /**
   * Update a gallery security posture definition.
   * @param resourceGroupName The name of the resource group.
   * @param galleryName The name of the Shared Image Gallery in which the security posture Definition is
   *                    to be updated.
   * @param securityPostureName The name of the gallery security posture definition to be updated. The
   *                            allowed characters are alphabets and numbers with dots, dashes, and periods allowed in the middle.
   *                            The maximum length is 80 characters.
   * @param gallerySecurityPosture Parameters supplied to the update gallery security posture operation.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    galleryName: string,
    securityPostureName: string,
    gallerySecurityPosture: GallerySecurityPostureUpdate,
    options?: GallerySecurityPosturesUpdateOptionalParams,
  ): Promise<GallerySecurityPosturesUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      galleryName,
      securityPostureName,
      gallerySecurityPosture,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Retrieves information about a gallery security posture definition.
   * @param resourceGroupName The name of the resource group.
   * @param galleryName The name of the Shared Image Gallery from which the security posture Definitions
   *                    are to be retrieved.
   * @param securityPostureName The name of the gallery security posture definition to be retrieved.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    galleryName: string,
    securityPostureName: string,
    options?: GallerySecurityPosturesGetOptionalParams,
  ): Promise<GallerySecurityPosturesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, galleryName, securityPostureName, options },
      getOperationSpec,
    );
  }

  /**
   * Delete a gallery security posture.
   * @param resourceGroupName The name of the resource group.
   * @param galleryName The name of the Shared Image Gallery in which the security posture is to be
   *                    deleted.
   * @param securityPostureName The name of the gallery security posture definition to be deleted.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    galleryName: string,
    securityPostureName: string,
    options?: GallerySecurityPosturesDeleteOptionalParams,
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, galleryName, securityPostureName, options },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete a gallery security posture.
   * @param resourceGroupName The name of the resource group.
   * @param galleryName The name of the Shared Image Gallery in which the security posture is to be
   *                    deleted.
   * @param securityPostureName The name of the gallery security posture definition to be deleted.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    galleryName: string,
    securityPostureName: string,
    options?: GallerySecurityPosturesDeleteOptionalParams,
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      galleryName,
      securityPostureName,
      options,
    );
    return poller.pollUntilDone();
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/securityPostures/{securityPostureName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.GallerySecurityPosture,
    },
    201: {
      bodyMapper: Mappers.GallerySecurityPosture,
    },
    202: {
      bodyMapper: Mappers.GallerySecurityPosture,
    },
    204: {
      bodyMapper: Mappers.GallerySecurityPosture,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  requestBody: Parameters.gallerySecurityPosture,
  queryParameters: [Parameters.apiVersion3],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.galleryName,
    Parameters.securityPostureName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/securityPostures/{securityPostureName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.GallerySecurityPosture,
    },
    201: {
      bodyMapper: Mappers.GallerySecurityPosture,
    },
    202: {
      bodyMapper: Mappers.GallerySecurityPosture,
    },
    204: {
      bodyMapper: Mappers.GallerySecurityPosture,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  requestBody: Parameters.gallerySecurityPosture1,
  queryParameters: [Parameters.apiVersion3],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.galleryName,
    Parameters.securityPostureName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/securityPostures/{securityPostureName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GallerySecurityPosture,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion3],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.galleryName,
    Parameters.securityPostureName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/securityPostures/{securityPostureName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion3],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.galleryName,
    Parameters.securityPostureName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
