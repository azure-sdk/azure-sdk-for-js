/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  VirtualMachineApplicationsListOptionalParams,
  VirtualMachineApplicationsListResponse,
  VirtualMachineApplicationsGetOptionalParams,
  VirtualMachineApplicationsGetResponse,
  VirtualMachineApplicationsDeleteOptionalParams,
  VMApplicationProxyResource,
  VirtualMachineApplicationsPutOptionalParams,
  VirtualMachineApplicationsPutResponse,
  VirtualMachineApplicationsGetInstanceViewOptionalParams,
  VirtualMachineApplicationsGetInstanceViewResponse
} from "../models";

/** Interface representing a VirtualMachineApplications. */
export interface VirtualMachineApplications {
  /**
   * The operation to get all applications of a Virtual Machine.
   * @param resourceGroupName The name of the resource group.
   * @param vmName The name of the virtual machine.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    vmName: string,
    options?: VirtualMachineApplicationsListOptionalParams
  ): Promise<VirtualMachineApplicationsListResponse>;
  /**
   * The operation to get the status of an application on a Virtual Machine.
   * @param resourceGroupName The name of the resource group.
   * @param vmName The name of the virtual machine.
   * @param applicationName The name of the application to query.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    vmName: string,
    applicationName: string,
    options?: VirtualMachineApplicationsGetOptionalParams
  ): Promise<VirtualMachineApplicationsGetResponse>;
  /**
   * The operation to delete an application on a Virtual Machine.
   * @param resourceGroupName The name of the resource group.
   * @param vmName The name of the virtual machine.
   * @param applicationName The name of the application to delete.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    vmName: string,
    applicationName: string,
    options?: VirtualMachineApplicationsDeleteOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * The operation to delete an application on a Virtual Machine.
   * @param resourceGroupName The name of the resource group.
   * @param vmName The name of the virtual machine.
   * @param applicationName The name of the application to delete.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    vmName: string,
    applicationName: string,
    options?: VirtualMachineApplicationsDeleteOptionalParams
  ): Promise<void>;
  /**
   * The operation to add an application on a Virtual Machine.
   * @param resourceGroupName The name of the resource group.
   * @param vmName The name of the virtual machine.
   * @param applicationName The name of the application to delete.
   * @param application The definition of the VMApplication to add the virtual machine
   * @param options The options parameters.
   */
  beginPut(
    resourceGroupName: string,
    vmName: string,
    applicationName: string,
    application: VMApplicationProxyResource,
    options?: VirtualMachineApplicationsPutOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<VirtualMachineApplicationsPutResponse>,
      VirtualMachineApplicationsPutResponse
    >
  >;
  /**
   * The operation to add an application on a Virtual Machine.
   * @param resourceGroupName The name of the resource group.
   * @param vmName The name of the virtual machine.
   * @param applicationName The name of the application to delete.
   * @param application The definition of the VMApplication to add the virtual machine
   * @param options The options parameters.
   */
  beginPutAndWait(
    resourceGroupName: string,
    vmName: string,
    applicationName: string,
    application: VMApplicationProxyResource,
    options?: VirtualMachineApplicationsPutOptionalParams
  ): Promise<VirtualMachineApplicationsPutResponse>;
  /**
   * The operation to get the status of an application on a Virtual Machine with instance View.
   * @param resourceGroupName The name of the resource group.
   * @param vmName The name of the virtual machine.
   * @param applicationName The name of the application to query.
   * @param options The options parameters.
   */
  getInstanceView(
    resourceGroupName: string,
    vmName: string,
    applicationName: string,
    options?: VirtualMachineApplicationsGetInstanceViewOptionalParams
  ): Promise<VirtualMachineApplicationsGetInstanceViewResponse>;
}
