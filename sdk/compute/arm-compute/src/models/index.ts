/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** The response from the List Container Services operation. */
export interface ContainerServiceListResult {
  /** the list of container services. */
  value?: ContainerService[];
  /** The URL to get the next set of container service results. */
  nextLink?: string;
}

/** Profile for the container service orchestrator. */
export interface ContainerServiceOrchestratorProfile {
  /** The orchestrator to use to manage container service cluster resources. Valid values are Swarm, DCOS, and Custom. */
  orchestratorType: ContainerServiceOrchestratorTypes;
}

/** Properties to configure a custom container service cluster. */
export interface ContainerServiceCustomProfile {
  /** The name of the custom orchestrator to use. */
  orchestrator: string;
}

/** Information about a service principal identity for the cluster to use for manipulating Azure APIs. */
export interface ContainerServicePrincipalProfile {
  /** The ID for the service principal. */
  clientId: string;
  /** The secret password associated with the service principal. */
  secret: string;
}

/** Profile for the container service master. */
export interface ContainerServiceMasterProfile {
  /** Number of masters (VMs) in the container service cluster. Allowed values are 1, 3, and 5. The default value is 1. */
  count?: ContainerServiceMasterProfileCount;
  /** DNS prefix to be used to create the FQDN for master. */
  dnsPrefix: string;
  /**
   * FQDN for the master.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fqdn?: string;
}

/** Profile for the container service agent pool. */
export interface ContainerServiceAgentPoolProfile {
  /** Unique name of the agent pool profile in the context of the subscription and resource group. */
  name: string;
  /** Number of agents (VMs) to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1. */
  count: number;
  /** Size of agent VMs. */
  vmSize: ContainerServiceVMSizeTypes;
  /** DNS prefix to be used to create the FQDN for the agent pool. */
  dnsPrefix: string;
  /**
   * FQDN for the agent pool.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fqdn?: string;
}

/** Profile for Windows VMs in the container service cluster. */
export interface ContainerServiceWindowsProfile {
  /** The administrator username to use for Windows VMs. */
  adminUsername: string;
  /** The administrator password to use for Windows VMs. */
  adminPassword: string;
}

/** Profile for Linux VMs in the container service cluster. */
export interface ContainerServiceLinuxProfile {
  /** The administrator username to use for Linux VMs. */
  adminUsername: string;
  /** The ssh key configuration for Linux VMs. */
  ssh: ContainerServiceSshConfiguration;
}

/** SSH configuration for Linux-based VMs running on Azure. */
export interface ContainerServiceSshConfiguration {
  /** the list of SSH public keys used to authenticate with Linux-based VMs. */
  publicKeys: ContainerServiceSshPublicKey[];
}

/** Contains information about SSH certificate public key data. */
export interface ContainerServiceSshPublicKey {
  /** Certificate public key used to authenticate with VMs through SSH. The certificate must be in PEM format with or without headers. */
  keyData: string;
}

export interface ContainerServiceDiagnosticsProfile {
  /** Profile for the container service VM diagnostic agent. */
  vmDiagnostics: ContainerServiceVMDiagnostics;
}

/** Profile for diagnostics on the container service VMs. */
export interface ContainerServiceVMDiagnostics {
  /** Whether the VM diagnostic agent is provisioned on the VM. */
  enabled: boolean;
  /**
   * The URI of the storage account where diagnostics are stored.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly storageUri?: string;
}

/** The Resource model definition. */
export interface Resource {
  /**
   * Resource Id
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Resource name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Resource type
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Resource location */
  location: string;
  /** Resource tags */
  tags?: { [propertyName: string]: string };
}

/** Container service. */
export interface ContainerService extends Resource {
  /**
   * the current deployment or provisioning state, which only appears in the response.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /** Properties of the orchestrator. */
  orchestratorProfile?: ContainerServiceOrchestratorProfile;
  /** Properties for custom clusters. */
  customProfile?: ContainerServiceCustomProfile;
  /** Properties for cluster service principals. */
  servicePrincipalProfile?: ContainerServicePrincipalProfile;
  /** Properties of master agents. */
  masterProfile?: ContainerServiceMasterProfile;
  /** Properties of the agent pool. */
  agentPoolProfiles?: ContainerServiceAgentPoolProfile[];
  /** Properties of Windows VMs. */
  windowsProfile?: ContainerServiceWindowsProfile;
  /** Properties of Linux VMs. */
  linuxProfile?: ContainerServiceLinuxProfile;
  /** Properties of the diagnostic agent. */
  diagnosticsProfile?: ContainerServiceDiagnosticsProfile;
}

/** Known values of {@link ContainerServiceMasterProfileCount} that the service accepts. */
export enum KnownContainerServiceMasterProfileCount {
  /** One */
  One = 1,
  /** Three */
  Three = 3,
  /** Five */
  Five = 5
}

/**
 * Defines values for ContainerServiceMasterProfileCount. \
 * {@link KnownContainerServiceMasterProfileCount} can be used interchangeably with ContainerServiceMasterProfileCount,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **1** \
 * **3** \
 * **5**
 */
export type ContainerServiceMasterProfileCount = number;

/** Known values of {@link ContainerServiceVMSizeTypes} that the service accepts. */
export enum KnownContainerServiceVMSizeTypes {
  /** StandardA0 */
  StandardA0 = "Standard_A0",
  /** StandardA1 */
  StandardA1 = "Standard_A1",
  /** StandardA2 */
  StandardA2 = "Standard_A2",
  /** StandardA3 */
  StandardA3 = "Standard_A3",
  /** StandardA4 */
  StandardA4 = "Standard_A4",
  /** StandardA5 */
  StandardA5 = "Standard_A5",
  /** StandardA6 */
  StandardA6 = "Standard_A6",
  /** StandardA7 */
  StandardA7 = "Standard_A7",
  /** StandardA8 */
  StandardA8 = "Standard_A8",
  /** StandardA9 */
  StandardA9 = "Standard_A9",
  /** StandardA10 */
  StandardA10 = "Standard_A10",
  /** StandardA11 */
  StandardA11 = "Standard_A11",
  /** StandardD1 */
  StandardD1 = "Standard_D1",
  /** StandardD2 */
  StandardD2 = "Standard_D2",
  /** StandardD3 */
  StandardD3 = "Standard_D3",
  /** StandardD4 */
  StandardD4 = "Standard_D4",
  /** StandardD11 */
  StandardD11 = "Standard_D11",
  /** StandardD12 */
  StandardD12 = "Standard_D12",
  /** StandardD13 */
  StandardD13 = "Standard_D13",
  /** StandardD14 */
  StandardD14 = "Standard_D14",
  /** StandardD1V2 */
  StandardD1V2 = "Standard_D1_v2",
  /** StandardD2V2 */
  StandardD2V2 = "Standard_D2_v2",
  /** StandardD3V2 */
  StandardD3V2 = "Standard_D3_v2",
  /** StandardD4V2 */
  StandardD4V2 = "Standard_D4_v2",
  /** StandardD5V2 */
  StandardD5V2 = "Standard_D5_v2",
  /** StandardD11V2 */
  StandardD11V2 = "Standard_D11_v2",
  /** StandardD12V2 */
  StandardD12V2 = "Standard_D12_v2",
  /** StandardD13V2 */
  StandardD13V2 = "Standard_D13_v2",
  /** StandardD14V2 */
  StandardD14V2 = "Standard_D14_v2",
  /** StandardG1 */
  StandardG1 = "Standard_G1",
  /** StandardG2 */
  StandardG2 = "Standard_G2",
  /** StandardG3 */
  StandardG3 = "Standard_G3",
  /** StandardG4 */
  StandardG4 = "Standard_G4",
  /** StandardG5 */
  StandardG5 = "Standard_G5",
  /** StandardDS1 */
  StandardDS1 = "Standard_DS1",
  /** StandardDS2 */
  StandardDS2 = "Standard_DS2",
  /** StandardDS3 */
  StandardDS3 = "Standard_DS3",
  /** StandardDS4 */
  StandardDS4 = "Standard_DS4",
  /** StandardDS11 */
  StandardDS11 = "Standard_DS11",
  /** StandardDS12 */
  StandardDS12 = "Standard_DS12",
  /** StandardDS13 */
  StandardDS13 = "Standard_DS13",
  /** StandardDS14 */
  StandardDS14 = "Standard_DS14",
  /** StandardGS1 */
  StandardGS1 = "Standard_GS1",
  /** StandardGS2 */
  StandardGS2 = "Standard_GS2",
  /** StandardGS3 */
  StandardGS3 = "Standard_GS3",
  /** StandardGS4 */
  StandardGS4 = "Standard_GS4",
  /** StandardGS5 */
  StandardGS5 = "Standard_GS5"
}

/**
 * Defines values for ContainerServiceVMSizeTypes. \
 * {@link KnownContainerServiceVMSizeTypes} can be used interchangeably with ContainerServiceVMSizeTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Standard_A0** \
 * **Standard_A1** \
 * **Standard_A2** \
 * **Standard_A3** \
 * **Standard_A4** \
 * **Standard_A5** \
 * **Standard_A6** \
 * **Standard_A7** \
 * **Standard_A8** \
 * **Standard_A9** \
 * **Standard_A10** \
 * **Standard_A11** \
 * **Standard_D1** \
 * **Standard_D2** \
 * **Standard_D3** \
 * **Standard_D4** \
 * **Standard_D11** \
 * **Standard_D12** \
 * **Standard_D13** \
 * **Standard_D14** \
 * **Standard_D1_v2** \
 * **Standard_D2_v2** \
 * **Standard_D3_v2** \
 * **Standard_D4_v2** \
 * **Standard_D5_v2** \
 * **Standard_D11_v2** \
 * **Standard_D12_v2** \
 * **Standard_D13_v2** \
 * **Standard_D14_v2** \
 * **Standard_G1** \
 * **Standard_G2** \
 * **Standard_G3** \
 * **Standard_G4** \
 * **Standard_G5** \
 * **Standard_DS1** \
 * **Standard_DS2** \
 * **Standard_DS3** \
 * **Standard_DS4** \
 * **Standard_DS11** \
 * **Standard_DS12** \
 * **Standard_DS13** \
 * **Standard_DS14** \
 * **Standard_GS1** \
 * **Standard_GS2** \
 * **Standard_GS3** \
 * **Standard_GS4** \
 * **Standard_GS5**
 */
export type ContainerServiceVMSizeTypes = string;
/** Defines values for ContainerServiceOrchestratorTypes. */
export type ContainerServiceOrchestratorTypes =
  | "Swarm"
  | "DCOS"
  | "Custom"
  | "Kubernetes";

/** Optional parameters. */
export interface ContainerServicesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type ContainerServicesListResponse = ContainerServiceListResult;

/** Optional parameters. */
export interface ContainerServicesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type ContainerServicesCreateOrUpdateResponse = ContainerService;

/** Optional parameters. */
export interface ContainerServicesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ContainerServicesGetResponse = ContainerService;

/** Optional parameters. */
export interface ContainerServicesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ContainerServicesListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type ContainerServicesListByResourceGroupResponse = ContainerServiceListResult;

/** Optional parameters. */
export interface ContainerServicesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type ContainerServicesListNextResponse = ContainerServiceListResult;

/** Optional parameters. */
export interface ContainerServicesListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type ContainerServicesListByResourceGroupNextResponse = ContainerServiceListResult;

/** Optional parameters. */
export interface ComputeManagementClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
