/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const ContainerServiceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerServiceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ContainerService"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContainerServiceOrchestratorProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerServiceOrchestratorProfile",
    modelProperties: {
      orchestratorType: {
        serializedName: "orchestratorType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Swarm", "DCOS", "Custom", "Kubernetes"]
        }
      }
    }
  }
};

export const ContainerServiceCustomProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerServiceCustomProfile",
    modelProperties: {
      orchestrator: {
        serializedName: "orchestrator",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContainerServicePrincipalProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerServicePrincipalProfile",
    modelProperties: {
      clientId: {
        serializedName: "clientId",
        required: true,
        type: {
          name: "String"
        }
      },
      secret: {
        serializedName: "secret",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContainerServiceMasterProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerServiceMasterProfile",
    modelProperties: {
      count: {
        defaultValue: 1,
        serializedName: "count",
        type: {
          name: "Number"
        }
      },
      dnsPrefix: {
        serializedName: "dnsPrefix",
        required: true,
        type: {
          name: "String"
        }
      },
      fqdn: {
        serializedName: "fqdn",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContainerServiceAgentPoolProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerServiceAgentPoolProfile",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      count: {
        defaultValue: 1,
        constraints: {
          InclusiveMaximum: 100,
          InclusiveMinimum: 1
        },
        serializedName: "count",
        required: true,
        type: {
          name: "Number"
        }
      },
      vmSize: {
        serializedName: "vmSize",
        required: true,
        type: {
          name: "String"
        }
      },
      dnsPrefix: {
        serializedName: "dnsPrefix",
        required: true,
        type: {
          name: "String"
        }
      },
      fqdn: {
        serializedName: "fqdn",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContainerServiceWindowsProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerServiceWindowsProfile",
    modelProperties: {
      adminUsername: {
        constraints: {
          Pattern: new RegExp("^[a-zA-Z0-9]+([._]?[a-zA-Z0-9]+)*$")
        },
        serializedName: "adminUsername",
        required: true,
        type: {
          name: "String"
        }
      },
      adminPassword: {
        constraints: {
          Pattern: new RegExp(
            "^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%\\^&\\*\\(\\)])[a-zA-Z\\d!@#$%\\^&\\*\\(\\)]{12,123}$"
          )
        },
        serializedName: "adminPassword",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContainerServiceLinuxProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerServiceLinuxProfile",
    modelProperties: {
      adminUsername: {
        constraints: {
          Pattern: new RegExp("^[a-z][a-z0-9_-]*$")
        },
        serializedName: "adminUsername",
        required: true,
        type: {
          name: "String"
        }
      },
      ssh: {
        serializedName: "ssh",
        type: {
          name: "Composite",
          className: "ContainerServiceSshConfiguration"
        }
      }
    }
  }
};

export const ContainerServiceSshConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerServiceSshConfiguration",
    modelProperties: {
      publicKeys: {
        serializedName: "publicKeys",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ContainerServiceSshPublicKey"
            }
          }
        }
      }
    }
  }
};

export const ContainerServiceSshPublicKey: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerServiceSshPublicKey",
    modelProperties: {
      keyData: {
        serializedName: "keyData",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContainerServiceDiagnosticsProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerServiceDiagnosticsProfile",
    modelProperties: {
      vmDiagnostics: {
        serializedName: "vmDiagnostics",
        type: {
          name: "Composite",
          className: "ContainerServiceVMDiagnostics"
        }
      }
    }
  }
};

export const ContainerServiceVMDiagnostics: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerServiceVMDiagnostics",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        required: true,
        type: {
          name: "Boolean"
        }
      },
      storageUri: {
        serializedName: "storageUri",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const ContainerService: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerService",
    modelProperties: {
      ...Resource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      orchestratorProfile: {
        serializedName: "properties.orchestratorProfile",
        type: {
          name: "Composite",
          className: "ContainerServiceOrchestratorProfile"
        }
      },
      customProfile: {
        serializedName: "properties.customProfile",
        type: {
          name: "Composite",
          className: "ContainerServiceCustomProfile"
        }
      },
      servicePrincipalProfile: {
        serializedName: "properties.servicePrincipalProfile",
        type: {
          name: "Composite",
          className: "ContainerServicePrincipalProfile"
        }
      },
      masterProfile: {
        serializedName: "properties.masterProfile",
        type: {
          name: "Composite",
          className: "ContainerServiceMasterProfile"
        }
      },
      agentPoolProfiles: {
        serializedName: "properties.agentPoolProfiles",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ContainerServiceAgentPoolProfile"
            }
          }
        }
      },
      windowsProfile: {
        serializedName: "properties.windowsProfile",
        type: {
          name: "Composite",
          className: "ContainerServiceWindowsProfile"
        }
      },
      linuxProfile: {
        serializedName: "properties.linuxProfile",
        type: {
          name: "Composite",
          className: "ContainerServiceLinuxProfile"
        }
      },
      diagnosticsProfile: {
        serializedName: "properties.diagnosticsProfile",
        type: {
          name: "Composite",
          className: "ContainerServiceDiagnosticsProfile"
        }
      }
    }
  }
};
