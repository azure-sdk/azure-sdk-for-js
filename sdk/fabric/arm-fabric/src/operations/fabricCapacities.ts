/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { FabricCapacities } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MicrosoftFabricManagementService } from "../microsoftFabricManagementService";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  FabricCapacity,
  FabricCapacitiesListBySubscriptionNextOptionalParams,
  FabricCapacitiesListBySubscriptionOptionalParams,
  FabricCapacitiesListBySubscriptionResponse,
  RpUsageAndQuotaDetailsForExistingResource,
  FabricCapacitiesListUsagesNextOptionalParams,
  FabricCapacitiesListUsagesOptionalParams,
  FabricCapacitiesListUsagesResponse,
  RpSkuDetailsForNewResource,
  FabricCapacitiesListSkusNextOptionalParams,
  FabricCapacitiesListSkusOptionalParams,
  FabricCapacitiesListSkusResponse,
  FabricCapacitiesListByResourceGroupNextOptionalParams,
  FabricCapacitiesListByResourceGroupOptionalParams,
  FabricCapacitiesListByResourceGroupResponse,
  RpSkuDetailsForExistingResource,
  FabricCapacitiesListSkusForCapacityNextOptionalParams,
  FabricCapacitiesListSkusForCapacityOptionalParams,
  FabricCapacitiesListSkusForCapacityResponse,
  CheckNameAvailabilityRequest,
  FabricCapacitiesCheckNameAvailabilityOptionalParams,
  FabricCapacitiesCheckNameAvailabilityResponse,
  FabricCapacitiesGetOptionalParams,
  FabricCapacitiesGetResponse,
  FabricCapacitiesCreateOrUpdateOptionalParams,
  FabricCapacitiesCreateOrUpdateResponse,
  FabricCapacityUpdate,
  FabricCapacitiesUpdateOptionalParams,
  FabricCapacitiesUpdateResponse,
  FabricCapacitiesDeleteOptionalParams,
  FabricCapacitiesDeleteResponse,
  FabricCapacitiesResumeOptionalParams,
  FabricCapacitiesSuspendOptionalParams,
  FabricCapacitiesListBySubscriptionNextResponse,
  FabricCapacitiesListUsagesNextResponse,
  FabricCapacitiesListSkusNextResponse,
  FabricCapacitiesListByResourceGroupNextResponse,
  FabricCapacitiesListSkusForCapacityNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing FabricCapacities operations. */
export class FabricCapacitiesImpl implements FabricCapacities {
  private readonly client: MicrosoftFabricManagementService;

  /**
   * Initialize a new instance of the class FabricCapacities class.
   * @param client Reference to the service client
   */
  constructor(client: MicrosoftFabricManagementService) {
    this.client = client;
  }

  /**
   * List FabricCapacity resources by subscription ID
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: FabricCapacitiesListBySubscriptionOptionalParams,
  ): PagedAsyncIterableIterator<FabricCapacity> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionPagingPage(options, settings);
      },
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: FabricCapacitiesListBySubscriptionOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<FabricCapacity[]> {
    let result: FabricCapacitiesListBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySubscription(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySubscriptionPagingAll(
    options?: FabricCapacitiesListBySubscriptionOptionalParams,
  ): AsyncIterableIterator<FabricCapacity> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * List the current consumption and limit in this location for the provided subscription
   * @param location The name of the Azure region.
   * @param options The options parameters.
   */
  public listUsages(
    location: string,
    options?: FabricCapacitiesListUsagesOptionalParams,
  ): PagedAsyncIterableIterator<RpUsageAndQuotaDetailsForExistingResource> {
    const iter = this.listUsagesPagingAll(location, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listUsagesPagingPage(location, options, settings);
      },
    };
  }

  private async *listUsagesPagingPage(
    location: string,
    options?: FabricCapacitiesListUsagesOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<RpUsageAndQuotaDetailsForExistingResource[]> {
    let result: FabricCapacitiesListUsagesResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listUsages(location, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listUsagesNext(location, continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listUsagesPagingAll(
    location: string,
    options?: FabricCapacitiesListUsagesOptionalParams,
  ): AsyncIterableIterator<RpUsageAndQuotaDetailsForExistingResource> {
    for await (const page of this.listUsagesPagingPage(location, options)) {
      yield* page;
    }
  }

  /**
   * List eligible SKUs for Microsoft Fabric resource provider
   * @param options The options parameters.
   */
  public listSkus(
    options?: FabricCapacitiesListSkusOptionalParams,
  ): PagedAsyncIterableIterator<RpSkuDetailsForNewResource> {
    const iter = this.listSkusPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listSkusPagingPage(options, settings);
      },
    };
  }

  private async *listSkusPagingPage(
    options?: FabricCapacitiesListSkusOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<RpSkuDetailsForNewResource[]> {
    let result: FabricCapacitiesListSkusResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listSkus(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listSkusNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listSkusPagingAll(
    options?: FabricCapacitiesListSkusOptionalParams,
  ): AsyncIterableIterator<RpSkuDetailsForNewResource> {
    for await (const page of this.listSkusPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * List FabricCapacity resources by resource group
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: FabricCapacitiesListByResourceGroupOptionalParams,
  ): PagedAsyncIterableIterator<FabricCapacity> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByResourceGroupPagingPage(
          resourceGroupName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: FabricCapacitiesListByResourceGroupOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<FabricCapacity[]> {
    let result: FabricCapacitiesListByResourceGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByResourceGroup(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: FabricCapacitiesListByResourceGroupOptionalParams,
  ): AsyncIterableIterator<FabricCapacity> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List eligible SKUs for a Microsoft Fabric resource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param capacityName The name of the capacity.
   * @param options The options parameters.
   */
  public listSkusForCapacity(
    resourceGroupName: string,
    capacityName: string,
    options?: FabricCapacitiesListSkusForCapacityOptionalParams,
  ): PagedAsyncIterableIterator<RpSkuDetailsForExistingResource> {
    const iter = this.listSkusForCapacityPagingAll(
      resourceGroupName,
      capacityName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listSkusForCapacityPagingPage(
          resourceGroupName,
          capacityName,
          options,
          settings,
        );
      },
    };
  }

  private async *listSkusForCapacityPagingPage(
    resourceGroupName: string,
    capacityName: string,
    options?: FabricCapacitiesListSkusForCapacityOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<RpSkuDetailsForExistingResource[]> {
    let result: FabricCapacitiesListSkusForCapacityResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listSkusForCapacity(
        resourceGroupName,
        capacityName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listSkusForCapacityNext(
        resourceGroupName,
        capacityName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listSkusForCapacityPagingAll(
    resourceGroupName: string,
    capacityName: string,
    options?: FabricCapacitiesListSkusForCapacityOptionalParams,
  ): AsyncIterableIterator<RpSkuDetailsForExistingResource> {
    for await (const page of this.listSkusForCapacityPagingPage(
      resourceGroupName,
      capacityName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List FabricCapacity resources by subscription ID
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: FabricCapacitiesListBySubscriptionOptionalParams,
  ): Promise<FabricCapacitiesListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec,
    );
  }

  /**
   * Implements local CheckNameAvailability operations
   * @param location The name of the Azure region.
   * @param body The CheckAvailability request
   * @param options The options parameters.
   */
  checkNameAvailability(
    location: string,
    body: CheckNameAvailabilityRequest,
    options?: FabricCapacitiesCheckNameAvailabilityOptionalParams,
  ): Promise<FabricCapacitiesCheckNameAvailabilityResponse> {
    return this.client.sendOperationRequest(
      { location, body, options },
      checkNameAvailabilityOperationSpec,
    );
  }

  /**
   * List the current consumption and limit in this location for the provided subscription
   * @param location The name of the Azure region.
   * @param options The options parameters.
   */
  private _listUsages(
    location: string,
    options?: FabricCapacitiesListUsagesOptionalParams,
  ): Promise<FabricCapacitiesListUsagesResponse> {
    return this.client.sendOperationRequest(
      { location, options },
      listUsagesOperationSpec,
    );
  }

  /**
   * List eligible SKUs for Microsoft Fabric resource provider
   * @param options The options parameters.
   */
  private _listSkus(
    options?: FabricCapacitiesListSkusOptionalParams,
  ): Promise<FabricCapacitiesListSkusResponse> {
    return this.client.sendOperationRequest({ options }, listSkusOperationSpec);
  }

  /**
   * List FabricCapacity resources by resource group
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: FabricCapacitiesListByResourceGroupOptionalParams,
  ): Promise<FabricCapacitiesListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec,
    );
  }

  /**
   * Get a FabricCapacity
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param capacityName The name of the Microsoft Fabric capacity. It must be a minimum of 3 characters,
   *                     and a maximum of 63.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    capacityName: string,
    options?: FabricCapacitiesGetOptionalParams,
  ): Promise<FabricCapacitiesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, capacityName, options },
      getOperationSpec,
    );
  }

  /**
   * Create a FabricCapacity
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param capacityName The name of the Microsoft Fabric capacity. It must be a minimum of 3 characters,
   *                     and a maximum of 63.
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    capacityName: string,
    resource: FabricCapacity,
    options?: FabricCapacitiesCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<FabricCapacitiesCreateOrUpdateResponse>,
      FabricCapacitiesCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<FabricCapacitiesCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, capacityName, resource, options },
      spec: createOrUpdateOperationSpec,
    });
    const poller = await createHttpPoller<
      FabricCapacitiesCreateOrUpdateResponse,
      OperationState<FabricCapacitiesCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create a FabricCapacity
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param capacityName The name of the Microsoft Fabric capacity. It must be a minimum of 3 characters,
   *                     and a maximum of 63.
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    capacityName: string,
    resource: FabricCapacity,
    options?: FabricCapacitiesCreateOrUpdateOptionalParams,
  ): Promise<FabricCapacitiesCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      capacityName,
      resource,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Update a FabricCapacity
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param capacityName The name of the Microsoft Fabric capacity. It must be a minimum of 3 characters,
   *                     and a maximum of 63.
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    capacityName: string,
    properties: FabricCapacityUpdate,
    options?: FabricCapacitiesUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<FabricCapacitiesUpdateResponse>,
      FabricCapacitiesUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<FabricCapacitiesUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, capacityName, properties, options },
      spec: updateOperationSpec,
    });
    const poller = await createHttpPoller<
      FabricCapacitiesUpdateResponse,
      OperationState<FabricCapacitiesUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Update a FabricCapacity
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param capacityName The name of the Microsoft Fabric capacity. It must be a minimum of 3 characters,
   *                     and a maximum of 63.
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    capacityName: string,
    properties: FabricCapacityUpdate,
    options?: FabricCapacitiesUpdateOptionalParams,
  ): Promise<FabricCapacitiesUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      capacityName,
      properties,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Delete a FabricCapacity
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param capacityName The name of the Microsoft Fabric capacity. It must be a minimum of 3 characters,
   *                     and a maximum of 63.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    capacityName: string,
    options?: FabricCapacitiesDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<FabricCapacitiesDeleteResponse>,
      FabricCapacitiesDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<FabricCapacitiesDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, capacityName, options },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<
      FabricCapacitiesDeleteResponse,
      OperationState<FabricCapacitiesDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete a FabricCapacity
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param capacityName The name of the Microsoft Fabric capacity. It must be a minimum of 3 characters,
   *                     and a maximum of 63.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    capacityName: string,
    options?: FabricCapacitiesDeleteOptionalParams,
  ): Promise<FabricCapacitiesDeleteResponse> {
    const poller = await this.beginDelete(
      resourceGroupName,
      capacityName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Resume operation of the specified Fabric capacity instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param capacityName The name of the Microsoft Fabric capacity. It must be a minimum of 3 characters,
   *                     and a maximum of 63.
   * @param options The options parameters.
   */
  async beginResume(
    resourceGroupName: string,
    capacityName: string,
    options?: FabricCapacitiesResumeOptionalParams,
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, capacityName, options },
      spec: resumeOperationSpec,
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Resume operation of the specified Fabric capacity instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param capacityName The name of the Microsoft Fabric capacity. It must be a minimum of 3 characters,
   *                     and a maximum of 63.
   * @param options The options parameters.
   */
  async beginResumeAndWait(
    resourceGroupName: string,
    capacityName: string,
    options?: FabricCapacitiesResumeOptionalParams,
  ): Promise<void> {
    const poller = await this.beginResume(
      resourceGroupName,
      capacityName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * List eligible SKUs for a Microsoft Fabric resource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param capacityName The name of the capacity.
   * @param options The options parameters.
   */
  private _listSkusForCapacity(
    resourceGroupName: string,
    capacityName: string,
    options?: FabricCapacitiesListSkusForCapacityOptionalParams,
  ): Promise<FabricCapacitiesListSkusForCapacityResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, capacityName, options },
      listSkusForCapacityOperationSpec,
    );
  }

  /**
   * Suspend operation of the specified Fabric capacity instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param capacityName The name of the Microsoft Fabric capacity. It must be a minimum of 3 characters,
   *                     and a maximum of 63.
   * @param options The options parameters.
   */
  async beginSuspend(
    resourceGroupName: string,
    capacityName: string,
    options?: FabricCapacitiesSuspendOptionalParams,
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, capacityName, options },
      spec: suspendOperationSpec,
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Suspend operation of the specified Fabric capacity instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param capacityName The name of the Microsoft Fabric capacity. It must be a minimum of 3 characters,
   *                     and a maximum of 63.
   * @param options The options parameters.
   */
  async beginSuspendAndWait(
    resourceGroupName: string,
    capacityName: string,
    options?: FabricCapacitiesSuspendOptionalParams,
  ): Promise<void> {
    const poller = await this.beginSuspend(
      resourceGroupName,
      capacityName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: FabricCapacitiesListBySubscriptionNextOptionalParams,
  ): Promise<FabricCapacitiesListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec,
    );
  }

  /**
   * ListUsagesNext
   * @param location The name of the Azure region.
   * @param nextLink The nextLink from the previous successful call to the ListUsages method.
   * @param options The options parameters.
   */
  private _listUsagesNext(
    location: string,
    nextLink: string,
    options?: FabricCapacitiesListUsagesNextOptionalParams,
  ): Promise<FabricCapacitiesListUsagesNextResponse> {
    return this.client.sendOperationRequest(
      { location, nextLink, options },
      listUsagesNextOperationSpec,
    );
  }

  /**
   * ListSkusNext
   * @param nextLink The nextLink from the previous successful call to the ListSkus method.
   * @param options The options parameters.
   */
  private _listSkusNext(
    nextLink: string,
    options?: FabricCapacitiesListSkusNextOptionalParams,
  ): Promise<FabricCapacitiesListSkusNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listSkusNextOperationSpec,
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: FabricCapacitiesListByResourceGroupNextOptionalParams,
  ): Promise<FabricCapacitiesListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec,
    );
  }

  /**
   * ListSkusForCapacityNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param capacityName The name of the capacity.
   * @param nextLink The nextLink from the previous successful call to the ListSkusForCapacity method.
   * @param options The options parameters.
   */
  private _listSkusForCapacityNext(
    resourceGroupName: string,
    capacityName: string,
    nextLink: string,
    options?: FabricCapacitiesListSkusForCapacityNextOptionalParams,
  ): Promise<FabricCapacitiesListSkusForCapacityNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, capacityName, nextLink, options },
      listSkusForCapacityNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Fabric/capacities",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.FabricCapacityListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer,
};
const checkNameAvailabilityOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Fabric/locations/{location}/checkNameAvailability",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CheckNameAvailabilityResponse,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const listUsagesOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Fabric/locations/{location}/usages",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RpUsageAndQuotaEnumerationForExistingResourceResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listSkusOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Fabric/skus",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RpSkuEnumerationForNewResourceResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Fabric/capacities",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.FabricCapacityListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Fabric/capacities/{capacityName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.FabricCapacity,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.capacityName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Fabric/capacities/{capacityName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.FabricCapacity,
    },
    201: {
      bodyMapper: Mappers.FabricCapacity,
    },
    202: {
      bodyMapper: Mappers.FabricCapacity,
    },
    204: {
      bodyMapper: Mappers.FabricCapacity,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.resource,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.capacityName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Fabric/capacities/{capacityName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.FabricCapacity,
    },
    201: {
      bodyMapper: Mappers.FabricCapacity,
    },
    202: {
      bodyMapper: Mappers.FabricCapacity,
    },
    204: {
      bodyMapper: Mappers.FabricCapacity,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.properties,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.capacityName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Fabric/capacities/{capacityName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.FabricCapacitiesDeleteHeaders,
    },
    201: {
      headersMapper: Mappers.FabricCapacitiesDeleteHeaders,
    },
    202: {
      headersMapper: Mappers.FabricCapacitiesDeleteHeaders,
    },
    204: {
      headersMapper: Mappers.FabricCapacitiesDeleteHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.capacityName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const resumeOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Fabric/capacities/{capacityName}/resume",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.capacityName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listSkusForCapacityOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Fabric/capacities/{capacityName}/skus",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RpSkuEnumerationForExistingResourceResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.capacityName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const suspendOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Fabric/capacities/{capacityName}/suspend",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.capacityName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.FabricCapacityListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listUsagesNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RpUsageAndQuotaEnumerationForExistingResourceResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.location,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listSkusNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RpSkuEnumerationForNewResourceResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.FabricCapacityListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listSkusForCapacityNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RpSkuEnumerationForExistingResourceResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.capacityName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
