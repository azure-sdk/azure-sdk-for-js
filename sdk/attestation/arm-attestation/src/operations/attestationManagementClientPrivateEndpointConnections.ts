/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { AttestationManagementClientPrivateEndpointConnections } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AttestationManagementClient } from "../attestationManagementClient";
import {
  AttestationManagementClientPrivateEndpointConnection,
  AttestationManagementClientPrivateEndpointConnectionsListByAttestationProviderNextOptionalParams,
  AttestationManagementClientPrivateEndpointConnectionsListByAttestationProviderOptionalParams,
  AttestationManagementClientPrivateEndpointConnectionsListByAttestationProviderResponse,
  AttestationManagementClientPrivateEndpointConnectionsGetOptionalParams,
  AttestationManagementClientPrivateEndpointConnectionsGetResponse,
  AttestationManagementClientPrivateEndpointConnectionsCreateOptionalParams,
  AttestationManagementClientPrivateEndpointConnectionsCreateResponse,
  AttestationManagementClientPrivateEndpointConnectionsDeleteOptionalParams,
  AttestationManagementClientPrivateEndpointConnectionsListByAttestationProviderNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing AttestationManagementClientPrivateEndpointConnections operations. */
export class AttestationManagementClientPrivateEndpointConnectionsImpl
  implements AttestationManagementClientPrivateEndpointConnections {
  private readonly client: AttestationManagementClient;

  /**
   * Initialize a new instance of the class AttestationManagementClientPrivateEndpointConnections class.
   * @param client Reference to the service client
   */
  constructor(client: AttestationManagementClient) {
    this.client = client;
  }

  /**
   * List all the private endpoint connections associated with the attestation provider.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param providerName Name of the attestation provider.
   * @param options The options parameters.
   */
  public listByAttestationProvider(
    resourceGroupName: string,
    providerName: string,
    options?: AttestationManagementClientPrivateEndpointConnectionsListByAttestationProviderOptionalParams
  ): PagedAsyncIterableIterator<
    AttestationManagementClientPrivateEndpointConnection
  > {
    const iter = this.listByAttestationProviderPagingAll(
      resourceGroupName,
      providerName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByAttestationProviderPagingPage(
          resourceGroupName,
          providerName,
          options,
          settings
        );
      }
    };
  }

  private async *listByAttestationProviderPagingPage(
    resourceGroupName: string,
    providerName: string,
    options?: AttestationManagementClientPrivateEndpointConnectionsListByAttestationProviderOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<
    AttestationManagementClientPrivateEndpointConnection[]
  > {
    let result: AttestationManagementClientPrivateEndpointConnectionsListByAttestationProviderResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByAttestationProvider(
        resourceGroupName,
        providerName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByAttestationProviderNext(
        resourceGroupName,
        providerName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByAttestationProviderPagingAll(
    resourceGroupName: string,
    providerName: string,
    options?: AttestationManagementClientPrivateEndpointConnectionsListByAttestationProviderOptionalParams
  ): AsyncIterableIterator<
    AttestationManagementClientPrivateEndpointConnection
  > {
    for await (const page of this.listByAttestationProviderPagingPage(
      resourceGroupName,
      providerName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List all the private endpoint connections associated with the attestation provider.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param providerName Name of the attestation provider.
   * @param options The options parameters.
   */
  private _listByAttestationProvider(
    resourceGroupName: string,
    providerName: string,
    options?: AttestationManagementClientPrivateEndpointConnectionsListByAttestationProviderOptionalParams
  ): Promise<
    AttestationManagementClientPrivateEndpointConnectionsListByAttestationProviderResponse
  > {
    return this.client.sendOperationRequest(
      { resourceGroupName, providerName, options },
      listByAttestationProviderOperationSpec
    );
  }

  /**
   * Gets the specified private endpoint connection associated with the attestation provider.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param providerName Name of the attestation provider.
   * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
   *                                      Azure resource
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    providerName: string,
    privateEndpointConnectionName: string,
    options?: AttestationManagementClientPrivateEndpointConnectionsGetOptionalParams
  ): Promise<AttestationManagementClientPrivateEndpointConnectionsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        providerName,
        privateEndpointConnectionName,
        options
      },
      getOperationSpec
    );
  }

  /**
   * Update the state of specified private endpoint connection associated with the attestation provider.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param providerName Name of the attestation provider.
   * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
   *                                      Azure resource
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    providerName: string,
    privateEndpointConnectionName: string,
    resource: AttestationManagementClientPrivateEndpointConnection,
    options?: AttestationManagementClientPrivateEndpointConnectionsCreateOptionalParams
  ): Promise<
    AttestationManagementClientPrivateEndpointConnectionsCreateResponse
  > {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        providerName,
        privateEndpointConnectionName,
        resource,
        options
      },
      createOperationSpec
    );
  }

  /**
   * Deletes the specified private endpoint connection associated with the attestation provider.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param providerName Name of the attestation provider.
   * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
   *                                      Azure resource
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    providerName: string,
    privateEndpointConnectionName: string,
    options?: AttestationManagementClientPrivateEndpointConnectionsDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        providerName,
        privateEndpointConnectionName,
        options
      },
      deleteOperationSpec
    );
  }

  /**
   * ListByAttestationProviderNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param providerName Name of the attestation provider.
   * @param nextLink The nextLink from the previous successful call to the ListByAttestationProvider
   *                 method.
   * @param options The options parameters.
   */
  private _listByAttestationProviderNext(
    resourceGroupName: string,
    providerName: string,
    nextLink: string,
    options?: AttestationManagementClientPrivateEndpointConnectionsListByAttestationProviderNextOptionalParams
  ): Promise<
    AttestationManagementClientPrivateEndpointConnectionsListByAttestationProviderNextResponse
  > {
    return this.client.sendOperationRequest(
      { resourceGroupName, providerName, nextLink, options },
      listByAttestationProviderNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByAttestationProviderOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Attestation/attestationProviders/{providerName}/privateEndpointConnections",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper:
        Mappers.AttestationManagementClientPrivateEndpointConnectionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.providerName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Attestation/attestationProviders/{providerName}/privateEndpointConnections/{privateEndpointConnectionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AttestationManagementClientPrivateEndpointConnection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.providerName,
    Parameters.privateEndpointConnectionName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Attestation/attestationProviders/{providerName}/privateEndpointConnections/{privateEndpointConnectionName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.AttestationManagementClientPrivateEndpointConnection
    },
    201: {
      bodyMapper: Mappers.AttestationManagementClientPrivateEndpointConnection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.resource1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.providerName,
    Parameters.privateEndpointConnectionName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Attestation/attestationProviders/{providerName}/privateEndpointConnections/{privateEndpointConnectionName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.providerName,
    Parameters.privateEndpointConnectionName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByAttestationProviderNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper:
        Mappers.AttestationManagementClientPrivateEndpointConnectionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.providerName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
