/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { AnalyticsConnectorOperations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { HealthcareApisManagementClient } from "../healthcareApisManagementClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  AnalyticsConnectorPatchResource,
  AnalyticsConnectorUpdateOptionalParams,
  AnalyticsConnectorUpdateResponse
} from "../models";

/** Class containing AnalyticsConnectorOperations operations. */
export class AnalyticsConnectorOperationsImpl
  implements AnalyticsConnectorOperations {
  private readonly client: HealthcareApisManagementClient;

  /**
   * Initialize a new instance of the class AnalyticsConnectorOperations class.
   * @param client Reference to the service client
   */
  constructor(client: HealthcareApisManagementClient) {
    this.client = client;
  }

  /**
   * Patch Analytics Connector Service details.
   * @param resourceGroupName The name of the resource group that contains the service instance.
   * @param workspaceName The name of workspace resource.
   * @param analyticsConnectorName The name of Analytics Connector resource.
   * @param analyticsConnectorPatchResource The parameters for updating a Analytics Connector.
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    workspaceName: string,
    analyticsConnectorName: string,
    analyticsConnectorPatchResource: AnalyticsConnectorPatchResource,
    options?: AnalyticsConnectorUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<AnalyticsConnectorUpdateResponse>,
      AnalyticsConnectorUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<AnalyticsConnectorUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        resourceGroupName,
        workspaceName,
        analyticsConnectorName,
        analyticsConnectorPatchResource,
        options
      },
      updateOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Patch Analytics Connector Service details.
   * @param resourceGroupName The name of the resource group that contains the service instance.
   * @param workspaceName The name of workspace resource.
   * @param analyticsConnectorName The name of Analytics Connector resource.
   * @param analyticsConnectorPatchResource The parameters for updating a Analytics Connector.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    workspaceName: string,
    analyticsConnectorName: string,
    analyticsConnectorPatchResource: AnalyticsConnectorPatchResource,
    options?: AnalyticsConnectorUpdateOptionalParams
  ): Promise<AnalyticsConnectorUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      workspaceName,
      analyticsConnectorName,
      analyticsConnectorPatchResource,
      options
    );
    return poller.pollUntilDone();
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HealthcareApis/workspaces/{workspaceName}/analyticsconnectors/{analyticsConnectorName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.AnalyticsConnector
    },
    201: {
      bodyMapper: Mappers.AnalyticsConnector
    },
    202: {
      bodyMapper: Mappers.AnalyticsConnector
    },
    204: {
      bodyMapper: Mappers.AnalyticsConnector
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  requestBody: Parameters.analyticsConnectorPatchResource,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.analyticsConnectorName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
