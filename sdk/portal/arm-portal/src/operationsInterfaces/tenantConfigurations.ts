/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  Configuration,
  TenantConfigurationsListOptionalParams,
  TenantConfigurationsGetOptionalParams,
  TenantConfigurationsGetResponse,
  TenantConfigurationsCreateOptionalParams,
  TenantConfigurationsCreateResponse,
  TenantConfigurationsDeleteOptionalParams,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a TenantConfigurations. */
export interface TenantConfigurations {
  /**
   * Gets list of the tenant configurations.
   * @param options The options parameters.
   */
  list(options?: TenantConfigurationsListOptionalParams): PagedAsyncIterableIterator<Configuration>;
  /**
   * Gets the tenant configuration.
   * @param configurationName The name of the Configuration
   * @param options The options parameters.
   */
  get(
    configurationName: string,
    options?: TenantConfigurationsGetOptionalParams,
  ): Promise<TenantConfigurationsGetResponse>;
  /**
   * Create the tenant configuration. If configuration already exists - update it. User has to be a
   * Tenant Admin for this operation.
   * @param configurationName The name of the Configuration
   * @param resource The parameters required to create or update tenant configuration.
   * @param options The options parameters.
   */
  create(
    configurationName: string,
    resource: Configuration,
    options?: TenantConfigurationsCreateOptionalParams,
  ): Promise<TenantConfigurationsCreateResponse>;
  /**
   * Delete the tenant configuration. User has to be a Tenant Admin for this operation.
   * @param configurationName The name of the Configuration
   * @param options The options parameters.
   */
  delete(
    configurationName: string,
    options?: TenantConfigurationsDeleteOptionalParams,
  ): Promise<void>;
}
