/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { Fabric } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureSiteRecoveryManagementServiceAPI } from "../azureSiteRecoveryManagementServiceAPI";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  FabricModel,
  FabricListBySubscriptionNextOptionalParams,
  FabricListBySubscriptionOptionalParams,
  FabricListBySubscriptionResponse,
  FabricListNextOptionalParams,
  FabricListOptionalParams,
  FabricListResponse,
  FabricGetOptionalParams,
  FabricGetResponse,
  FabricCreateOptionalParams,
  FabricCreateResponse,
  FabricUpdateOptionalParams,
  FabricUpdateResponse,
  FabricDeleteOptionalParams,
  FabricDeleteResponse,
  FabricListBySubscriptionNextResponse,
  FabricListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Fabric operations. */
export class FabricImpl implements Fabric {
  private readonly client: AzureSiteRecoveryManagementServiceAPI;

  /**
   * Initialize a new instance of the class Fabric class.
   * @param client Reference to the service client
   */
  constructor(client: AzureSiteRecoveryManagementServiceAPI) {
    this.client = client;
  }

  /**
   * Gets the list of fabrics in the given subscription.
   * @param subscriptionId The subscription Id.
   * @param options The options parameters.
   */
  public listBySubscription(
    subscriptionId: string,
    options?: FabricListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<FabricModel> {
    const iter = this.listBySubscriptionPagingAll(subscriptionId, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionPagingPage(
          subscriptionId,
          options,
          settings
        );
      }
    };
  }

  private async *listBySubscriptionPagingPage(
    subscriptionId: string,
    options?: FabricListBySubscriptionOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<FabricModel[]> {
    let result: FabricListBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySubscription(subscriptionId, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySubscriptionNext(
        subscriptionId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySubscriptionPagingAll(
    subscriptionId: string,
    options?: FabricListBySubscriptionOptionalParams
  ): AsyncIterableIterator<FabricModel> {
    for await (const page of this.listBySubscriptionPagingPage(
      subscriptionId,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets the list of fabrics in the given subscription and resource group.
   * @param subscriptionId The subscription Id.
   * @param resourceGroupName Resource group name.
   * @param options The options parameters.
   */
  public list(
    subscriptionId: string,
    resourceGroupName: string,
    options?: FabricListOptionalParams
  ): PagedAsyncIterableIterator<FabricModel> {
    const iter = this.listPagingAll(subscriptionId, resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(
          subscriptionId,
          resourceGroupName,
          options,
          settings
        );
      }
    };
  }

  private async *listPagingPage(
    subscriptionId: string,
    resourceGroupName: string,
    options?: FabricListOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<FabricModel[]> {
    let result: FabricListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(subscriptionId, resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        subscriptionId,
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    subscriptionId: string,
    resourceGroupName: string,
    options?: FabricListOptionalParams
  ): AsyncIterableIterator<FabricModel> {
    for await (const page of this.listPagingPage(
      subscriptionId,
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets the details of the fabric.
   * @param subscriptionId The subscription Id.
   * @param resourceGroupName Resource group name.
   * @param fabricName Fabric name.
   * @param options The options parameters.
   */
  get(
    subscriptionId: string,
    resourceGroupName: string,
    fabricName: string,
    options?: FabricGetOptionalParams
  ): Promise<FabricGetResponse> {
    return this.client.sendOperationRequest(
      { subscriptionId, resourceGroupName, fabricName, options },
      getOperationSpec
    );
  }

  /**
   * Creates the fabric.
   * @param subscriptionId The subscription Id.
   * @param resourceGroupName Resource group name.
   * @param fabricName Fabric Name.
   * @param options The options parameters.
   */
  async beginCreate(
    subscriptionId: string,
    resourceGroupName: string,
    fabricName: string,
    options?: FabricCreateOptionalParams
  ): Promise<
    SimplePollerLike<OperationState<FabricCreateResponse>, FabricCreateResponse>
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<FabricCreateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { subscriptionId, resourceGroupName, fabricName, options },
      spec: createOperationSpec
    });
    const poller = await createHttpPoller<
      FabricCreateResponse,
      OperationState<FabricCreateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Creates the fabric.
   * @param subscriptionId The subscription Id.
   * @param resourceGroupName Resource group name.
   * @param fabricName Fabric Name.
   * @param options The options parameters.
   */
  async beginCreateAndWait(
    subscriptionId: string,
    resourceGroupName: string,
    fabricName: string,
    options?: FabricCreateOptionalParams
  ): Promise<FabricCreateResponse> {
    const poller = await this.beginCreate(
      subscriptionId,
      resourceGroupName,
      fabricName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Performs update on the fabric.
   * @param subscriptionId The subscription Id.
   * @param resourceGroupName Resource group name.
   * @param fabricName Fabric Name.
   * @param options The options parameters.
   */
  async beginUpdate(
    subscriptionId: string,
    resourceGroupName: string,
    fabricName: string,
    options?: FabricUpdateOptionalParams
  ): Promise<
    SimplePollerLike<OperationState<FabricUpdateResponse>, FabricUpdateResponse>
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<FabricUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { subscriptionId, resourceGroupName, fabricName, options },
      spec: updateOperationSpec
    });
    const poller = await createHttpPoller<
      FabricUpdateResponse,
      OperationState<FabricUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Performs update on the fabric.
   * @param subscriptionId The subscription Id.
   * @param resourceGroupName Resource group name.
   * @param fabricName Fabric Name.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    subscriptionId: string,
    resourceGroupName: string,
    fabricName: string,
    options?: FabricUpdateOptionalParams
  ): Promise<FabricUpdateResponse> {
    const poller = await this.beginUpdate(
      subscriptionId,
      resourceGroupName,
      fabricName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Removes the fabric.
   * @param subscriptionId The subscription Id.
   * @param resourceGroupName Resource group name.
   * @param fabricName Fabric Name.
   * @param options The options parameters.
   */
  async beginDelete(
    subscriptionId: string,
    resourceGroupName: string,
    fabricName: string,
    options?: FabricDeleteOptionalParams
  ): Promise<
    SimplePollerLike<OperationState<FabricDeleteResponse>, FabricDeleteResponse>
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<FabricDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { subscriptionId, resourceGroupName, fabricName, options },
      spec: deleteOperationSpec
    });
    const poller = await createHttpPoller<
      FabricDeleteResponse,
      OperationState<FabricDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Removes the fabric.
   * @param subscriptionId The subscription Id.
   * @param resourceGroupName Resource group name.
   * @param fabricName Fabric Name.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    subscriptionId: string,
    resourceGroupName: string,
    fabricName: string,
    options?: FabricDeleteOptionalParams
  ): Promise<FabricDeleteResponse> {
    const poller = await this.beginDelete(
      subscriptionId,
      resourceGroupName,
      fabricName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Gets the list of fabrics in the given subscription.
   * @param subscriptionId The subscription Id.
   * @param options The options parameters.
   */
  private _listBySubscription(
    subscriptionId: string,
    options?: FabricListBySubscriptionOptionalParams
  ): Promise<FabricListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { subscriptionId, options },
      listBySubscriptionOperationSpec
    );
  }

  /**
   * Gets the list of fabrics in the given subscription and resource group.
   * @param subscriptionId The subscription Id.
   * @param resourceGroupName Resource group name.
   * @param options The options parameters.
   */
  private _list(
    subscriptionId: string,
    resourceGroupName: string,
    options?: FabricListOptionalParams
  ): Promise<FabricListResponse> {
    return this.client.sendOperationRequest(
      { subscriptionId, resourceGroupName, options },
      listOperationSpec
    );
  }

  /**
   * ListBySubscriptionNext
   * @param subscriptionId The subscription Id.
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    subscriptionId: string,
    nextLink: string,
    options?: FabricListBySubscriptionNextOptionalParams
  ): Promise<FabricListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { subscriptionId, nextLink, options },
      listBySubscriptionNextOperationSpec
    );
  }

  /**
   * ListNext
   * @param subscriptionId The subscription Id.
   * @param resourceGroupName Resource group name.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    subscriptionId: string,
    resourceGroupName: string,
    nextLink: string,
    options?: FabricListNextOptionalParams
  ): Promise<FabricListNextResponse> {
    return this.client.sendOperationRequest(
      { subscriptionId, resourceGroupName, nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationFabrics/{fabricName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.FabricModel
    },
    default: {
      bodyMapper: Mappers.ArmError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.fabricName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationFabrics/{fabricName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.FabricModel
    },
    201: {
      bodyMapper: Mappers.FabricModel
    },
    202: {
      bodyMapper: Mappers.FabricModel
    },
    204: {
      bodyMapper: Mappers.FabricModel
    },
    default: {
      bodyMapper: Mappers.ArmError
    }
  },
  requestBody: Parameters.body2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.fabricName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationFabrics/{fabricName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.FabricModel
    },
    201: {
      bodyMapper: Mappers.FabricModel
    },
    202: {
      bodyMapper: Mappers.FabricModel
    },
    204: {
      bodyMapper: Mappers.FabricModel
    },
    default: {
      bodyMapper: Mappers.ArmError
    }
  },
  requestBody: Parameters.body3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.fabricName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationFabrics/{fabricName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.FabricDeleteHeaders
    },
    201: {
      headersMapper: Mappers.FabricDeleteHeaders
    },
    202: {
      headersMapper: Mappers.FabricDeleteHeaders
    },
    204: {
      headersMapper: Mappers.FabricDeleteHeaders
    },
    default: {
      bodyMapper: Mappers.ArmError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.fabricName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.DataReplication/replicationFabrics",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.FabricModelCollection
    },
    default: {
      bodyMapper: Mappers.ArmError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.continuationToken],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationFabrics",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.FabricModelCollection
    },
    default: {
      bodyMapper: Mappers.ArmError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.continuationToken],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.FabricModelCollection
    },
    default: {
      bodyMapper: Mappers.ArmError
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.FabricModelCollection
    },
    default: {
      bodyMapper: Mappers.ArmError
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
