/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  VaultModel,
  VaultListBySubscriptionOptionalParams,
  VaultListOptionalParams,
  VaultGetOptionalParams,
  VaultGetResponse,
  VaultCreateOptionalParams,
  VaultCreateResponse,
  VaultUpdateOptionalParams,
  VaultUpdateResponse,
  VaultDeleteOptionalParams,
  VaultDeleteResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Vault. */
export interface Vault {
  /**
   * Gets the list of vaults in the given subscription.
   * @param subscriptionId The subscription Id.
   * @param options The options parameters.
   */
  listBySubscription(
    subscriptionId: string,
    options?: VaultListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<VaultModel>;
  /**
   * Gets the list of vaults in the given subscription and resource group.
   * @param subscriptionId The subscription Id.
   * @param resourceGroupName Resource group name.
   * @param options The options parameters.
   */
  list(
    subscriptionId: string,
    resourceGroupName: string,
    options?: VaultListOptionalParams
  ): PagedAsyncIterableIterator<VaultModel>;
  /**
   * Gets the details of the vault.
   * @param subscriptionId The subscription Id.
   * @param resourceGroupName Resource group name.
   * @param vaultName Vault name.
   * @param options The options parameters.
   */
  get(
    subscriptionId: string,
    resourceGroupName: string,
    vaultName: string,
    options?: VaultGetOptionalParams
  ): Promise<VaultGetResponse>;
  /**
   * Creates the vault.
   * @param subscriptionId The subscription Id.
   * @param resourceGroupName Resource group name.
   * @param vaultName Vault Name.
   * @param options The options parameters.
   */
  beginCreate(
    subscriptionId: string,
    resourceGroupName: string,
    vaultName: string,
    options?: VaultCreateOptionalParams
  ): Promise<
    SimplePollerLike<OperationState<VaultCreateResponse>, VaultCreateResponse>
  >;
  /**
   * Creates the vault.
   * @param subscriptionId The subscription Id.
   * @param resourceGroupName Resource group name.
   * @param vaultName Vault Name.
   * @param options The options parameters.
   */
  beginCreateAndWait(
    subscriptionId: string,
    resourceGroupName: string,
    vaultName: string,
    options?: VaultCreateOptionalParams
  ): Promise<VaultCreateResponse>;
  /**
   * Performs update on the vault.
   * @param subscriptionId The subscription Id.
   * @param resourceGroupName Resource group name.
   * @param vaultName Vault Name.
   * @param options The options parameters.
   */
  beginUpdate(
    subscriptionId: string,
    resourceGroupName: string,
    vaultName: string,
    options?: VaultUpdateOptionalParams
  ): Promise<
    SimplePollerLike<OperationState<VaultUpdateResponse>, VaultUpdateResponse>
  >;
  /**
   * Performs update on the vault.
   * @param subscriptionId The subscription Id.
   * @param resourceGroupName Resource group name.
   * @param vaultName Vault Name.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    subscriptionId: string,
    resourceGroupName: string,
    vaultName: string,
    options?: VaultUpdateOptionalParams
  ): Promise<VaultUpdateResponse>;
  /**
   * Removes the vault.
   * @param subscriptionId The subscription Id.
   * @param resourceGroupName Resource group name.
   * @param vaultName Vault Name.
   * @param options The options parameters.
   */
  beginDelete(
    subscriptionId: string,
    resourceGroupName: string,
    vaultName: string,
    options?: VaultDeleteOptionalParams
  ): Promise<
    SimplePollerLike<OperationState<VaultDeleteResponse>, VaultDeleteResponse>
  >;
  /**
   * Removes the vault.
   * @param subscriptionId The subscription Id.
   * @param resourceGroupName Resource group name.
   * @param vaultName Vault Name.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    subscriptionId: string,
    resourceGroupName: string,
    vaultName: string,
    options?: VaultDeleteOptionalParams
  ): Promise<VaultDeleteResponse>;
}
