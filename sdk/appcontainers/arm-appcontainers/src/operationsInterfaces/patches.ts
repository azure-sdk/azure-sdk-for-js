/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  PatchesListByBuilderResourceOptionalParams,
  PatchesListByBuilderResourceResponse,
  PatchesGetOptionalParams,
  PatchesGetResponse,
  PatchesDeleteOptionalParams,
  PatchesSkipConfigureOptionalParams,
  PatchesApplyOptionalParams,
  PatchesApplyResponse
} from "../models";

/** Interface representing a Patches. */
export interface Patches {
  /**
   * List PatchResource resources by BuilderResource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param builderName The name of the builder.
   * @param options The options parameters.
   */
  listByBuilderResource(
    resourceGroupName: string,
    builderName: string,
    options?: PatchesListByBuilderResourceOptionalParams
  ): Promise<PatchesListByBuilderResourceResponse>;
  /**
   * Get details for specific patch by patch name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param builderName The name of the builder.
   * @param patchName The name of the patch
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    builderName: string,
    patchName: string,
    options?: PatchesGetOptionalParams
  ): Promise<PatchesGetResponse>;
  /**
   * Delete specific patch by patch name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param builderName The name of the builder.
   * @param patchName The name of the patch
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    builderName: string,
    patchName: string,
    options?: PatchesDeleteOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Delete specific patch by patch name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param builderName The name of the builder.
   * @param patchName The name of the patch
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    builderName: string,
    patchName: string,
    options?: PatchesDeleteOptionalParams
  ): Promise<void>;
  /**
   * Configure the patch skip option by patch name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param builderName The name of the builder.
   * @param patchName The name of the patch
   * @param patchSkipConfig Configure patcher to skip a patch or not.
   * @param options The options parameters.
   */
  beginSkipConfigure(
    resourceGroupName: string,
    builderName: string,
    patchName: string,
    patchSkipConfig: boolean,
    options?: PatchesSkipConfigureOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Configure the patch skip option by patch name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param builderName The name of the builder.
   * @param patchName The name of the patch
   * @param patchSkipConfig Configure patcher to skip a patch or not.
   * @param options The options parameters.
   */
  beginSkipConfigureAndWait(
    resourceGroupName: string,
    builderName: string,
    patchName: string,
    patchSkipConfig: boolean,
    options?: PatchesSkipConfigureOptionalParams
  ): Promise<void>;
  /**
   * Apply a PatchResource with patch name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param builderName The name of the builder.
   * @param patchName The name of the patch
   * @param options The options parameters.
   */
  beginApply(
    resourceGroupName: string,
    builderName: string,
    patchName: string,
    options?: PatchesApplyOptionalParams
  ): Promise<
    SimplePollerLike<OperationState<PatchesApplyResponse>, PatchesApplyResponse>
  >;
  /**
   * Apply a PatchResource with patch name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param builderName The name of the builder.
   * @param patchName The name of the patch
   * @param options The options parameters.
   */
  beginApplyAndWait(
    resourceGroupName: string,
    builderName: string,
    patchName: string,
    options?: PatchesApplyOptionalParams
  ): Promise<PatchesApplyResponse>;
}
