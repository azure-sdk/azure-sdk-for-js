/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { AppSpaceResources } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ContainerAppsAPIClient } from "../containerAppsAPIClient";
import {
  AppSpaceResource,
  AppSpaceResourcesListByAppSpaceNextOptionalParams,
  AppSpaceResourcesListByAppSpaceOptionalParams,
  AppSpaceResourcesListByAppSpaceResponse,
  AppSpaceResourcesGetOptionalParams,
  AppSpaceResourcesGetResponse,
  AppSpaceResourcesCreateOrUpdateOptionalParams,
  AppSpaceResourcesCreateOrUpdateResponse,
  AppSpaceResourcesDeleteOptionalParams,
  AppSpaceResourcePatch,
  AppSpaceResourcesUpdateOptionalParams,
  AppSpaceResourcesUpdateResponse,
  AppSpaceResourcesListByAppSpaceNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing AppSpaceResources operations. */
export class AppSpaceResourcesImpl implements AppSpaceResources {
  private readonly client: ContainerAppsAPIClient;

  /**
   * Initialize a new instance of the class AppSpaceResources class.
   * @param client Reference to the service client
   */
  constructor(client: ContainerAppsAPIClient) {
    this.client = client;
  }

  /**
   * Get all of the App Space Resources in a given App Space. Returns a collection of App Space
   * Resources.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param appSpaceName Name of the App Space.
   * @param options The options parameters.
   */
  public listByAppSpace(
    resourceGroupName: string,
    appSpaceName: string,
    options?: AppSpaceResourcesListByAppSpaceOptionalParams,
  ): PagedAsyncIterableIterator<AppSpaceResource> {
    const iter = this.listByAppSpacePagingAll(
      resourceGroupName,
      appSpaceName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByAppSpacePagingPage(
          resourceGroupName,
          appSpaceName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByAppSpacePagingPage(
    resourceGroupName: string,
    appSpaceName: string,
    options?: AppSpaceResourcesListByAppSpaceOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<AppSpaceResource[]> {
    let result: AppSpaceResourcesListByAppSpaceResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByAppSpace(
        resourceGroupName,
        appSpaceName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByAppSpaceNext(
        resourceGroupName,
        appSpaceName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByAppSpacePagingAll(
    resourceGroupName: string,
    appSpaceName: string,
    options?: AppSpaceResourcesListByAppSpaceOptionalParams,
  ): AsyncIterableIterator<AppSpaceResource> {
    for await (const page of this.listByAppSpacePagingPage(
      resourceGroupName,
      appSpaceName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Get all of the App Space Resources in a given App Space. Returns a collection of App Space
   * Resources.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param appSpaceName Name of the App Space.
   * @param options The options parameters.
   */
  private _listByAppSpace(
    resourceGroupName: string,
    appSpaceName: string,
    options?: AppSpaceResourcesListByAppSpaceOptionalParams,
  ): Promise<AppSpaceResourcesListByAppSpaceResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, appSpaceName, options },
      listByAppSpaceOperationSpec,
    );
  }

  /**
   * Get an App Space Resource in an App Space.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param appSpaceName Name of the App Space.
   * @param spaceResourceName Name of the App Space Resource.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    appSpaceName: string,
    spaceResourceName: string,
    options?: AppSpaceResourcesGetOptionalParams,
  ): Promise<AppSpaceResourcesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, appSpaceName, spaceResourceName, options },
      getOperationSpec,
    );
  }

  /**
   * Create or update an App Space Resource used to track an ARM resource the customer would like to
   * track in an App Space.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param appSpaceName Name of the App Space.
   * @param spaceResourceName Name of the App Space Resource.
   * @param spaceResourceEnvelope Properties used to create an app space resource
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    appSpaceName: string,
    spaceResourceName: string,
    spaceResourceEnvelope: AppSpaceResource,
    options?: AppSpaceResourcesCreateOrUpdateOptionalParams,
  ): Promise<AppSpaceResourcesCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        appSpaceName,
        spaceResourceName,
        spaceResourceEnvelope,
        options,
      },
      createOrUpdateOperationSpec,
    );
  }

  /**
   * Remove the App Space Resource which tracks an ARM resource from an App Space.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param appSpaceName Name of the App Space.
   * @param spaceResourceName Name of the App Space Resource.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    appSpaceName: string,
    spaceResourceName: string,
    options?: AppSpaceResourcesDeleteOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, appSpaceName, spaceResourceName, options },
      deleteOperationSpec,
    );
  }

  /**
   * Patches an App Space Resource using JSON Merge Patch
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param appSpaceName Name of the App Space.
   * @param spaceResourceName Name of the App Space Resource.
   * @param spaceResourceEnvelope Properties of an App Space Resource that need to be updated
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    appSpaceName: string,
    spaceResourceName: string,
    spaceResourceEnvelope: AppSpaceResourcePatch,
    options?: AppSpaceResourcesUpdateOptionalParams,
  ): Promise<AppSpaceResourcesUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        appSpaceName,
        spaceResourceName,
        spaceResourceEnvelope,
        options,
      },
      updateOperationSpec,
    );
  }

  /**
   * ListByAppSpaceNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param appSpaceName Name of the App Space.
   * @param nextLink The nextLink from the previous successful call to the ListByAppSpace method.
   * @param options The options parameters.
   */
  private _listByAppSpaceNext(
    resourceGroupName: string,
    appSpaceName: string,
    nextLink: string,
    options?: AppSpaceResourcesListByAppSpaceNextOptionalParams,
  ): Promise<AppSpaceResourcesListByAppSpaceNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, appSpaceName, nextLink, options },
      listByAppSpaceNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByAppSpaceOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/spaces/{appSpaceName}/spaceResources",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AppSpaceResourcesCollection,
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.appSpaceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/spaces/{appSpaceName}/spaceResources/{spaceResourceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AppSpaceResource,
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.appSpaceName,
    Parameters.spaceResourceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/spaces/{appSpaceName}/spaceResources/{spaceResourceName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.AppSpaceResource,
    },
    201: {
      bodyMapper: Mappers.AppSpaceResource,
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse,
    },
  },
  requestBody: Parameters.spaceResourceEnvelope,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.appSpaceName1,
    Parameters.spaceResourceName1,
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/spaces/{appSpaceName}/spaceResources/{spaceResourceName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.appSpaceName1,
    Parameters.spaceResourceName1,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/spaces/{appSpaceName}/spaceResources/{spaceResourceName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.AppSpaceResource,
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse,
    },
  },
  requestBody: Parameters.spaceResourceEnvelope1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.appSpaceName1,
    Parameters.spaceResourceName1,
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const listByAppSpaceNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AppSpaceResourcesCollection,
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
    Parameters.appSpaceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
