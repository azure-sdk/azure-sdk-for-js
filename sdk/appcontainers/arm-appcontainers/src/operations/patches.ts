/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { Patches } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ContainerAppsAPIClient } from "../containerAppsAPIClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  PatchesListByBuilderResourceOptionalParams,
  PatchesListByBuilderResourceResponse,
  PatchesGetOptionalParams,
  PatchesGetResponse,
  PatchesDeleteOptionalParams,
  PatchesSkipConfigureOptionalParams,
  PatchesApplyOptionalParams,
  PatchesApplyResponse
} from "../models";

/** Class containing Patches operations. */
export class PatchesImpl implements Patches {
  private readonly client: ContainerAppsAPIClient;

  /**
   * Initialize a new instance of the class Patches class.
   * @param client Reference to the service client
   */
  constructor(client: ContainerAppsAPIClient) {
    this.client = client;
  }

  /**
   * List PatchResource resources by BuilderResource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param builderName The name of the builder.
   * @param options The options parameters.
   */
  listByBuilderResource(
    resourceGroupName: string,
    builderName: string,
    options?: PatchesListByBuilderResourceOptionalParams
  ): Promise<PatchesListByBuilderResourceResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, builderName, options },
      listByBuilderResourceOperationSpec
    );
  }

  /**
   * Get details for specific patch by patch name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param builderName The name of the builder.
   * @param patchName The name of the patch
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    builderName: string,
    patchName: string,
    options?: PatchesGetOptionalParams
  ): Promise<PatchesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, builderName, patchName, options },
      getOperationSpec
    );
  }

  /**
   * Delete specific patch by patch name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param builderName The name of the builder.
   * @param patchName The name of the patch
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    builderName: string,
    patchName: string,
    options?: PatchesDeleteOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, builderName, patchName, options },
      spec: deleteOperationSpec
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete specific patch by patch name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param builderName The name of the builder.
   * @param patchName The name of the patch
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    builderName: string,
    patchName: string,
    options?: PatchesDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      builderName,
      patchName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Configure the patch skip option by patch name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param builderName The name of the builder.
   * @param patchName The name of the patch
   * @param patchSkipConfig Configure patcher to skip a patch or not.
   * @param options The options parameters.
   */
  async beginSkipConfigure(
    resourceGroupName: string,
    builderName: string,
    patchName: string,
    patchSkipConfig: boolean,
    options?: PatchesSkipConfigureOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        builderName,
        patchName,
        patchSkipConfig,
        options
      },
      spec: skipConfigureOperationSpec
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Configure the patch skip option by patch name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param builderName The name of the builder.
   * @param patchName The name of the patch
   * @param patchSkipConfig Configure patcher to skip a patch or not.
   * @param options The options parameters.
   */
  async beginSkipConfigureAndWait(
    resourceGroupName: string,
    builderName: string,
    patchName: string,
    patchSkipConfig: boolean,
    options?: PatchesSkipConfigureOptionalParams
  ): Promise<void> {
    const poller = await this.beginSkipConfigure(
      resourceGroupName,
      builderName,
      patchName,
      patchSkipConfig,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Apply a PatchResource with patch name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param builderName The name of the builder.
   * @param patchName The name of the patch
   * @param options The options parameters.
   */
  async beginApply(
    resourceGroupName: string,
    builderName: string,
    patchName: string,
    options?: PatchesApplyOptionalParams
  ): Promise<
    SimplePollerLike<OperationState<PatchesApplyResponse>, PatchesApplyResponse>
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<PatchesApplyResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, builderName, patchName, options },
      spec: applyOperationSpec
    });
    const poller = await createHttpPoller<
      PatchesApplyResponse,
      OperationState<PatchesApplyResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Apply a PatchResource with patch name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param builderName The name of the builder.
   * @param patchName The name of the patch
   * @param options The options parameters.
   */
  async beginApplyAndWait(
    resourceGroupName: string,
    builderName: string,
    patchName: string,
    options?: PatchesApplyOptionalParams
  ): Promise<PatchesApplyResponse> {
    const poller = await this.beginApply(
      resourceGroupName,
      builderName,
      patchName,
      options
    );
    return poller.pollUntilDone();
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByBuilderResourceOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/builders/{builderName}/patches",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PatchCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.builderName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/builders/{builderName}/patches/{patchName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PatchResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.builderName,
    Parameters.patchName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/builders/{builderName}/patches/{patchName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.builderName,
    Parameters.patchName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const skipConfigureOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscription/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/builders/{builderName}/patches/{patchName}/skipConfig",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.patchSkipConfig,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.builderName,
    Parameters.patchName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const applyOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/builders/{builderName}/patches/{patchName}/apply",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.PatchResource
    },
    201: {
      bodyMapper: Mappers.PatchResource
    },
    202: {
      bodyMapper: Mappers.PatchResource
    },
    204: {
      bodyMapper: Mappers.PatchResource
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.builderName,
    Parameters.patchName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
