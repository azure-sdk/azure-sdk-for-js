/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { AppSpaces } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ContainerAppsAPIClient } from "../containerAppsAPIClient";
import {
  AppSpace,
  AppSpacesListBySubscriptionNextOptionalParams,
  AppSpacesListBySubscriptionOptionalParams,
  AppSpacesListBySubscriptionResponse,
  AppSpacesListByResourceGroupNextOptionalParams,
  AppSpacesListByResourceGroupOptionalParams,
  AppSpacesListByResourceGroupResponse,
  AppSpacesGetOptionalParams,
  AppSpacesGetResponse,
  AppSpacesCreateOrUpdateOptionalParams,
  AppSpacesCreateOrUpdateResponse,
  AppSpacesDeleteOptionalParams,
  AppSpacePatch,
  AppSpacesUpdateOptionalParams,
  AppSpacesUpdateResponse,
  AppSpacesListBySubscriptionNextResponse,
  AppSpacesListByResourceGroupNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing AppSpaces operations. */
export class AppSpacesImpl implements AppSpaces {
  private readonly client: ContainerAppsAPIClient;

  /**
   * Initialize a new instance of the class AppSpaces class.
   * @param client Reference to the service client
   */
  constructor(client: ContainerAppsAPIClient) {
    this.client = client;
  }

  /**
   * Get the App Spaces in a given subscription.
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: AppSpacesListBySubscriptionOptionalParams,
  ): PagedAsyncIterableIterator<AppSpace> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionPagingPage(options, settings);
      },
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: AppSpacesListBySubscriptionOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<AppSpace[]> {
    let result: AppSpacesListBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySubscription(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySubscriptionPagingAll(
    options?: AppSpacesListBySubscriptionOptionalParams,
  ): AsyncIterableIterator<AppSpace> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Get the App Spaces in a given resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: AppSpacesListByResourceGroupOptionalParams,
  ): PagedAsyncIterableIterator<AppSpace> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByResourceGroupPagingPage(
          resourceGroupName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: AppSpacesListByResourceGroupOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<AppSpace[]> {
    let result: AppSpacesListByResourceGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByResourceGroup(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: AppSpacesListByResourceGroupOptionalParams,
  ): AsyncIterableIterator<AppSpace> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Get the App Spaces in a given subscription.
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: AppSpacesListBySubscriptionOptionalParams,
  ): Promise<AppSpacesListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec,
    );
  }

  /**
   * Get the App Spaces in a given resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: AppSpacesListByResourceGroupOptionalParams,
  ): Promise<AppSpacesListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec,
    );
  }

  /**
   * Get an App Space.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param appSpaceName Name of the App Space.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    appSpaceName: string,
    options?: AppSpacesGetOptionalParams,
  ): Promise<AppSpacesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, appSpaceName, options },
      getOperationSpec,
    );
  }

  /**
   * Create or update an App Space in a particular subscription and resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param appSpaceName Name of the App Space.
   * @param appSpaceEnvelope Properties used to create an app space
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    appSpaceName: string,
    appSpaceEnvelope: AppSpace,
    options?: AppSpacesCreateOrUpdateOptionalParams,
  ): Promise<AppSpacesCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, appSpaceName, appSpaceEnvelope, options },
      createOrUpdateOperationSpec,
    );
  }

  /**
   * Delete an App Space. Also deletes all of the App Space Resources within the App Space.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param appSpaceName Name of the App Space.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    appSpaceName: string,
    options?: AppSpacesDeleteOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, appSpaceName, options },
      deleteOperationSpec,
    );
  }

  /**
   * Patches an App Space using JSON Merge Patch
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param appSpaceName Name of the App Space.
   * @param appSpaceEnvelope Properties of an App Space that need to be updated
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    appSpaceName: string,
    appSpaceEnvelope: AppSpacePatch,
    options?: AppSpacesUpdateOptionalParams,
  ): Promise<AppSpacesUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, appSpaceName, appSpaceEnvelope, options },
      updateOperationSpec,
    );
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: AppSpacesListBySubscriptionNextOptionalParams,
  ): Promise<AppSpacesListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec,
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: AppSpacesListByResourceGroupNextOptionalParams,
  ): Promise<AppSpacesListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.App/spaces",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AppSpacesCollection,
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/spaces",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AppSpacesCollection,
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/spaces/{appSpaceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AppSpace,
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.appSpaceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/spaces/{appSpaceName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.AppSpace,
    },
    201: {
      bodyMapper: Mappers.AppSpace,
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse,
    },
  },
  requestBody: Parameters.appSpaceEnvelope,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.appSpaceName,
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/spaces/{appSpaceName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.appSpaceName1,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/spaces/{appSpaceName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.AppSpace,
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse,
    },
  },
  requestBody: Parameters.appSpaceEnvelope1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.appSpaceName1,
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AppSpacesCollection,
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AppSpacesCollection,
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
