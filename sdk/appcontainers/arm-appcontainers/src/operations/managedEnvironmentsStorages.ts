/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { ManagedEnvironmentsStorages } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ContainerAppsAPIClient } from "../containerAppsAPIClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  ManagedEnvironmentsStoragesListOptionalParams,
  ManagedEnvironmentsStoragesListResponse,
  ManagedEnvironmentsStoragesGetOptionalParams,
  ManagedEnvironmentsStoragesGetResponse,
  ManagedEnvironmentStorage,
  ManagedEnvironmentsStoragesCreateOrUpdateOptionalParams,
  ManagedEnvironmentsStoragesCreateOrUpdateResponse,
  ManagedEnvironmentsStoragesDeleteOptionalParams
} from "../models";

/** Class containing ManagedEnvironmentsStorages operations. */
export class ManagedEnvironmentsStoragesImpl
  implements ManagedEnvironmentsStorages {
  private readonly client: ContainerAppsAPIClient;

  /**
   * Initialize a new instance of the class ManagedEnvironmentsStorages class.
   * @param client Reference to the service client
   */
  constructor(client: ContainerAppsAPIClient) {
    this.client = client;
  }

  /**
   * Get all storages for a managedEnvironment.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param environmentName Name of the Environment.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    environmentName: string,
    options?: ManagedEnvironmentsStoragesListOptionalParams
  ): Promise<ManagedEnvironmentsStoragesListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, environmentName, options },
      listOperationSpec
    );
  }

  /**
   * Get storage for a managedEnvironment.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param environmentName Name of the Environment.
   * @param storageName Name of the storage.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    environmentName: string,
    storageName: string,
    options?: ManagedEnvironmentsStoragesGetOptionalParams
  ): Promise<ManagedEnvironmentsStoragesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, environmentName, storageName, options },
      getOperationSpec
    );
  }

  /**
   * Create or update storage for a managedEnvironment.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param environmentName Name of the Environment.
   * @param storageName Name of the storage.
   * @param storageEnvelope Configuration details of storage.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    environmentName: string,
    storageName: string,
    storageEnvelope: ManagedEnvironmentStorage,
    options?: ManagedEnvironmentsStoragesCreateOrUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ManagedEnvironmentsStoragesCreateOrUpdateResponse>,
      ManagedEnvironmentsStoragesCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ManagedEnvironmentsStoragesCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        resourceGroupName,
        environmentName,
        storageName,
        storageEnvelope,
        options
      },
      createOrUpdateOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create or update storage for a managedEnvironment.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param environmentName Name of the Environment.
   * @param storageName Name of the storage.
   * @param storageEnvelope Configuration details of storage.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    environmentName: string,
    storageName: string,
    storageEnvelope: ManagedEnvironmentStorage,
    options?: ManagedEnvironmentsStoragesCreateOrUpdateOptionalParams
  ): Promise<ManagedEnvironmentsStoragesCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      environmentName,
      storageName,
      storageEnvelope,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Delete storage for a managedEnvironment.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param environmentName Name of the Environment.
   * @param storageName Name of the storage.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    environmentName: string,
    storageName: string,
    options?: ManagedEnvironmentsStoragesDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, environmentName, storageName, options },
      deleteOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete storage for a managedEnvironment.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param environmentName Name of the Environment.
   * @param storageName Name of the storage.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    environmentName: string,
    storageName: string,
    options?: ManagedEnvironmentsStoragesDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      environmentName,
      storageName,
      options
    );
    return poller.pollUntilDone();
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/managedEnvironments/{environmentName}/storages",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ManagedEnvironmentStoragesCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.environmentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/managedEnvironments/{environmentName}/storages/{storageName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ManagedEnvironmentStorage
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageName,
    Parameters.environmentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/managedEnvironments/{environmentName}/storages/{storageName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ManagedEnvironmentStorage
    },
    201: {
      bodyMapper: Mappers.ManagedEnvironmentStorage
    },
    202: {
      bodyMapper: Mappers.ManagedEnvironmentStorage
    },
    204: {
      bodyMapper: Mappers.ManagedEnvironmentStorage
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.storageEnvelope1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageName,
    Parameters.environmentName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/managedEnvironments/{environmentName}/storages/{storageName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageName,
    Parameters.environmentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
