/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { ManagedEnvironmentsDiagnostics } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ContainerAppsAPIClient } from "../containerAppsAPIClient";
import {
  DaprComponent,
  ManagedEnvironmentsDiagnosticsListDaprComponentsNextOptionalParams,
  ManagedEnvironmentsDiagnosticsListDaprComponentsOptionalParams,
  Certificate,
  ManagedEnvironmentsDiagnosticsListCertificatesNextOptionalParams,
  ManagedEnvironmentsDiagnosticsListCertificatesOptionalParams,
  ManagedEnvironmentsDiagnosticsGetRootOptionalParams,
  ManagedEnvironmentsDiagnosticsGetRootResponse,
  ManagedEnvironmentsDiagnosticsListDaprComponentsResponse,
  ManagedEnvironmentsDiagnosticsGetDaprComponentsOptionalParams,
  ManagedEnvironmentsDiagnosticsGetDaprComponentsResponse,
  ManagedEnvironmentsDiagnosticsListCertificatesResponse,
  ManagedEnvironmentsDiagnosticsGetCertificatesOptionalParams,
  ManagedEnvironmentsDiagnosticsGetCertificatesResponse,
  ManagedEnvironmentsDiagnosticsListDaprComponentsNextResponse,
  ManagedEnvironmentsDiagnosticsListCertificatesNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ManagedEnvironmentsDiagnostics operations. */
export class ManagedEnvironmentsDiagnosticsImpl
  implements ManagedEnvironmentsDiagnostics {
  private readonly client: ContainerAppsAPIClient;

  /**
   * Initialize a new instance of the class ManagedEnvironmentsDiagnostics class.
   * @param client Reference to the service client
   */
  constructor(client: ContainerAppsAPIClient) {
    this.client = client;
  }

  /**
   * Get the Dapr components of a Managed Environment used to host container apps.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param environmentName Name of the Environment.
   * @param options The options parameters.
   */
  public listDaprComponents(
    resourceGroupName: string,
    environmentName: string,
    options?: ManagedEnvironmentsDiagnosticsListDaprComponentsOptionalParams
  ): PagedAsyncIterableIterator<DaprComponent> {
    const iter = this.listDaprComponentsPagingAll(
      resourceGroupName,
      environmentName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listDaprComponentsPagingPage(
          resourceGroupName,
          environmentName,
          options
        );
      }
    };
  }

  private async *listDaprComponentsPagingPage(
    resourceGroupName: string,
    environmentName: string,
    options?: ManagedEnvironmentsDiagnosticsListDaprComponentsOptionalParams
  ): AsyncIterableIterator<DaprComponent[]> {
    let result = await this._listDaprComponents(
      resourceGroupName,
      environmentName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listDaprComponentsNext(
        resourceGroupName,
        environmentName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listDaprComponentsPagingAll(
    resourceGroupName: string,
    environmentName: string,
    options?: ManagedEnvironmentsDiagnosticsListDaprComponentsOptionalParams
  ): AsyncIterableIterator<DaprComponent> {
    for await (const page of this.listDaprComponentsPagingPage(
      resourceGroupName,
      environmentName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Get the Certificates of a Managed Environment used to host container apps.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param environmentName Name of the Environment.
   * @param options The options parameters.
   */
  public listCertificates(
    resourceGroupName: string,
    environmentName: string,
    options?: ManagedEnvironmentsDiagnosticsListCertificatesOptionalParams
  ): PagedAsyncIterableIterator<Certificate> {
    const iter = this.listCertificatesPagingAll(
      resourceGroupName,
      environmentName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listCertificatesPagingPage(
          resourceGroupName,
          environmentName,
          options
        );
      }
    };
  }

  private async *listCertificatesPagingPage(
    resourceGroupName: string,
    environmentName: string,
    options?: ManagedEnvironmentsDiagnosticsListCertificatesOptionalParams
  ): AsyncIterableIterator<Certificate[]> {
    let result = await this._listCertificates(
      resourceGroupName,
      environmentName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listCertificatesNext(
        resourceGroupName,
        environmentName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listCertificatesPagingAll(
    resourceGroupName: string,
    environmentName: string,
    options?: ManagedEnvironmentsDiagnosticsListCertificatesOptionalParams
  ): AsyncIterableIterator<Certificate> {
    for await (const page of this.listCertificatesPagingPage(
      resourceGroupName,
      environmentName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Get the properties of a Managed Environment used to host container apps.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param environmentName Name of the Environment.
   * @param options The options parameters.
   */
  getRoot(
    resourceGroupName: string,
    environmentName: string,
    options?: ManagedEnvironmentsDiagnosticsGetRootOptionalParams
  ): Promise<ManagedEnvironmentsDiagnosticsGetRootResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, environmentName, options },
      getRootOperationSpec
    );
  }

  /**
   * Get the Dapr components of a Managed Environment used to host container apps.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param environmentName Name of the Environment.
   * @param options The options parameters.
   */
  private _listDaprComponents(
    resourceGroupName: string,
    environmentName: string,
    options?: ManagedEnvironmentsDiagnosticsListDaprComponentsOptionalParams
  ): Promise<ManagedEnvironmentsDiagnosticsListDaprComponentsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, environmentName, options },
      listDaprComponentsOperationSpec
    );
  }

  /**
   * Get the Dapr component of a Managed Environment used to host container apps.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param environmentName Name of the Environment.
   * @param componentName Name of the Dapr Component.
   * @param options The options parameters.
   */
  getDaprComponents(
    resourceGroupName: string,
    environmentName: string,
    componentName: string,
    options?: ManagedEnvironmentsDiagnosticsGetDaprComponentsOptionalParams
  ): Promise<ManagedEnvironmentsDiagnosticsGetDaprComponentsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, environmentName, componentName, options },
      getDaprComponentsOperationSpec
    );
  }

  /**
   * Get the Certificates of a Managed Environment used to host container apps.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param environmentName Name of the Environment.
   * @param options The options parameters.
   */
  private _listCertificates(
    resourceGroupName: string,
    environmentName: string,
    options?: ManagedEnvironmentsDiagnosticsListCertificatesOptionalParams
  ): Promise<ManagedEnvironmentsDiagnosticsListCertificatesResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, environmentName, options },
      listCertificatesOperationSpec
    );
  }

  /**
   * Get the specified Certificate of a Managed Environment used to host container apps.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param environmentName Name of the Environment.
   * @param certificateName Name of the Certificate.
   * @param options The options parameters.
   */
  getCertificates(
    resourceGroupName: string,
    environmentName: string,
    certificateName: string,
    options?: ManagedEnvironmentsDiagnosticsGetCertificatesOptionalParams
  ): Promise<ManagedEnvironmentsDiagnosticsGetCertificatesResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, environmentName, certificateName, options },
      getCertificatesOperationSpec
    );
  }

  /**
   * ListDaprComponentsNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param environmentName Name of the Environment.
   * @param nextLink The nextLink from the previous successful call to the ListDaprComponents method.
   * @param options The options parameters.
   */
  private _listDaprComponentsNext(
    resourceGroupName: string,
    environmentName: string,
    nextLink: string,
    options?: ManagedEnvironmentsDiagnosticsListDaprComponentsNextOptionalParams
  ): Promise<ManagedEnvironmentsDiagnosticsListDaprComponentsNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, environmentName, nextLink, options },
      listDaprComponentsNextOperationSpec
    );
  }

  /**
   * ListCertificatesNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param environmentName Name of the Environment.
   * @param nextLink The nextLink from the previous successful call to the ListCertificates method.
   * @param options The options parameters.
   */
  private _listCertificatesNext(
    resourceGroupName: string,
    environmentName: string,
    nextLink: string,
    options?: ManagedEnvironmentsDiagnosticsListCertificatesNextOptionalParams
  ): Promise<ManagedEnvironmentsDiagnosticsListCertificatesNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, environmentName, nextLink, options },
      listCertificatesNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getRootOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/managedEnvironments/{environmentName}/detectorProperties/rootApi/",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ManagedEnvironment
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.environmentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listDaprComponentsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/managedEnvironments/{environmentName}/detectorProperties/daprApi/",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DaprComponentsCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.environmentName1
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getDaprComponentsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/managedEnvironments/{environmentName}/detectorProperties/daprApi/{componentName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DaprComponent
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.environmentName1,
    Parameters.componentName1
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listCertificatesOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/managedEnvironments/{environmentName}/detectorProperties/certificatesApi/",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.environmentName1
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getCertificatesOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/managedEnvironments/{environmentName}/detectorProperties/certificatesApi/{certificateName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Certificate
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.environmentName1,
    Parameters.certificateName1
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listDaprComponentsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DaprComponentsCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
    Parameters.environmentName1
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listCertificatesNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
    Parameters.environmentName1
  ],
  headerParameters: [Parameters.accept],
  serializer
};
