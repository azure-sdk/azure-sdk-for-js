/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const WebApplicationFirewallPolicyList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WebApplicationFirewallPolicyList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WebApplicationFirewallPolicy"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PolicySettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PolicySettings",
    modelProperties: {
      enabledState: {
        serializedName: "enabledState",
        type: {
          name: "String"
        }
      },
      mode: {
        serializedName: "mode",
        type: {
          name: "String"
        }
      },
      redirectUrl: {
        serializedName: "redirectUrl",
        type: {
          name: "String"
        }
      },
      customBlockResponseStatusCode: {
        serializedName: "customBlockResponseStatusCode",
        type: {
          name: "Number"
        }
      },
      customBlockResponseBody: {
        constraints: {
          Pattern: new RegExp(
            "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$"
          )
        },
        serializedName: "customBlockResponseBody",
        type: {
          name: "String"
        }
      },
      requestBodyCheck: {
        serializedName: "requestBodyCheck",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomRuleList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomRuleList",
    modelProperties: {
      rules: {
        serializedName: "rules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CustomRule"
            }
          }
        }
      }
    }
  }
};

export const CustomRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomRule",
    modelProperties: {
      name: {
        constraints: {
          MaxLength: 128
        },
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      priority: {
        serializedName: "priority",
        required: true,
        type: {
          name: "Number"
        }
      },
      enabledState: {
        serializedName: "enabledState",
        type: {
          name: "String"
        }
      },
      ruleType: {
        serializedName: "ruleType",
        required: true,
        type: {
          name: "String"
        }
      },
      rateLimitDurationInMinutes: {
        constraints: {
          InclusiveMaximum: 5,
          InclusiveMinimum: 0
        },
        serializedName: "rateLimitDurationInMinutes",
        type: {
          name: "Number"
        }
      },
      rateLimitThreshold: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "rateLimitThreshold",
        type: {
          name: "Number"
        }
      },
      matchConditions: {
        serializedName: "matchConditions",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MatchCondition"
            }
          }
        }
      },
      action: {
        serializedName: "action",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MatchCondition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MatchCondition",
    modelProperties: {
      matchVariable: {
        serializedName: "matchVariable",
        required: true,
        type: {
          name: "String"
        }
      },
      selector: {
        serializedName: "selector",
        type: {
          name: "String"
        }
      },
      operator: {
        serializedName: "operator",
        required: true,
        type: {
          name: "String"
        }
      },
      negateCondition: {
        serializedName: "negateCondition",
        type: {
          name: "Boolean"
        }
      },
      matchValue: {
        serializedName: "matchValue",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      transforms: {
        serializedName: "transforms",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ManagedRuleSetList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedRuleSetList",
    modelProperties: {
      managedRuleSets: {
        serializedName: "managedRuleSets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedRuleSet"
            }
          }
        }
      }
    }
  }
};

export const ManagedRuleSet: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedRuleSet",
    modelProperties: {
      ruleSetType: {
        serializedName: "ruleSetType",
        required: true,
        type: {
          name: "String"
        }
      },
      ruleSetVersion: {
        serializedName: "ruleSetVersion",
        required: true,
        type: {
          name: "String"
        }
      },
      ruleSetAction: {
        serializedName: "ruleSetAction",
        type: {
          name: "String"
        }
      },
      exclusions: {
        serializedName: "exclusions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedRuleExclusion"
            }
          }
        }
      },
      ruleGroupOverrides: {
        serializedName: "ruleGroupOverrides",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedRuleGroupOverride"
            }
          }
        }
      }
    }
  }
};

export const ManagedRuleExclusion: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedRuleExclusion",
    modelProperties: {
      matchVariable: {
        serializedName: "matchVariable",
        required: true,
        type: {
          name: "String"
        }
      },
      selectorMatchOperator: {
        serializedName: "selectorMatchOperator",
        required: true,
        type: {
          name: "String"
        }
      },
      selector: {
        serializedName: "selector",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedRuleGroupOverride: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedRuleGroupOverride",
    modelProperties: {
      ruleGroupName: {
        serializedName: "ruleGroupName",
        required: true,
        type: {
          name: "String"
        }
      },
      exclusions: {
        serializedName: "exclusions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedRuleExclusion"
            }
          }
        }
      },
      rules: {
        serializedName: "rules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedRuleOverride"
            }
          }
        }
      }
    }
  }
};

export const ManagedRuleOverride: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedRuleOverride",
    modelProperties: {
      ruleId: {
        serializedName: "ruleId",
        required: true,
        type: {
          name: "String"
        }
      },
      enabledState: {
        serializedName: "enabledState",
        type: {
          name: "String"
        }
      },
      action: {
        serializedName: "action",
        type: {
          name: "String"
        }
      },
      exclusions: {
        serializedName: "exclusions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedRuleExclusion"
            }
          }
        }
      }
    }
  }
};

export const FrontendEndpointLink: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FrontendEndpointLink",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RoutingRuleLink: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RoutingRuleLink",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SecurityPolicyLink: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecurityPolicyLink",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Sku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TagsObject: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TagsObject",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const ManagedRuleSetDefinitionList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedRuleSetDefinitionList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedRuleSetDefinition"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedRuleGroupDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedRuleGroupDefinition",
    modelProperties: {
      ruleGroupName: {
        serializedName: "ruleGroupName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      rules: {
        serializedName: "rules",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedRuleDefinition"
            }
          }
        }
      }
    }
  }
};

export const ManagedRuleDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedRuleDefinition",
    modelProperties: {
      ruleId: {
        serializedName: "ruleId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      defaultState: {
        serializedName: "defaultState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      defaultAction: {
        serializedName: "defaultAction",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetails",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorModel",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetails"
            }
          }
        }
      },
      innerError: {
        serializedName: "innerError",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureAsyncOperationResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureAsyncOperationResult",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorModel"
        }
      }
    }
  }
};

export const SubResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SubResource",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WebApplicationFirewallPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WebApplicationFirewallPolicy",
    modelProperties: {
      ...Resource.type.modelProperties,
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      policySettings: {
        serializedName: "properties.policySettings",
        type: {
          name: "Composite",
          className: "PolicySettings"
        }
      },
      customRules: {
        serializedName: "properties.customRules",
        type: {
          name: "Composite",
          className: "CustomRuleList"
        }
      },
      managedRules: {
        serializedName: "properties.managedRules",
        type: {
          name: "Composite",
          className: "ManagedRuleSetList"
        }
      },
      frontendEndpointLinks: {
        serializedName: "properties.frontendEndpointLinks",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FrontendEndpointLink"
            }
          }
        }
      },
      routingRuleLinks: {
        serializedName: "properties.routingRuleLinks",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RoutingRuleLink"
            }
          }
        }
      },
      securityPolicyLinks: {
        serializedName: "properties.securityPolicyLinks",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SecurityPolicyLink"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceState: {
        serializedName: "properties.resourceState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedRuleSetDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedRuleSetDefinition",
    modelProperties: {
      ...Resource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ruleSetId: {
        serializedName: "properties.ruleSetId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ruleSetType: {
        serializedName: "properties.ruleSetType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ruleSetVersion: {
        serializedName: "properties.ruleSetVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ruleGroups: {
        serializedName: "properties.ruleGroups",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedRuleGroupDefinition"
            }
          }
        }
      }
    }
  }
};
