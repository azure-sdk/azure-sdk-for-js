/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const StorageTaskIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageTaskIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageTaskAction: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageTaskAction",
    modelProperties: {
      if: {
        serializedName: "if",
        type: {
          name: "Composite",
          className: "IfCondition"
        }
      },
      else: {
        serializedName: "else",
        type: {
          name: "Composite",
          className: "ElseCondition"
        }
      }
    }
  }
};

export const IfCondition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IfCondition",
    modelProperties: {
      condition: {
        serializedName: "condition",
        required: true,
        type: {
          name: "String"
        }
      },
      operations: {
        serializedName: "operations",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageTaskOperationAutoGenerated"
            }
          }
        }
      }
    }
  }
};

export const StorageTaskOperationAutoGenerated: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageTaskOperationAutoGenerated",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      onSuccess: {
        defaultValue: "continue",
        isConstant: true,
        serializedName: "onSuccess",
        type: {
          name: "String"
        }
      },
      onFailure: {
        defaultValue: "break",
        isConstant: true,
        serializedName: "onFailure",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ElseCondition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ElseCondition",
    modelProperties: {
      operations: {
        serializedName: "operations",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageTaskOperationAutoGenerated"
            }
          }
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail"
            }
          }
        }
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const StorageTaskUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageTaskUpdateParameters",
    modelProperties: {
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "StorageTaskIdentity"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      taskVersion: {
        constraints: {
          InclusiveMaximum: 1,
          InclusiveMinimum: 1
        },
        serializedName: "properties.taskVersion",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      enabled: {
        serializedName: "properties.enabled",
        type: {
          name: "Boolean"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      action: {
        serializedName: "properties.action",
        type: {
          name: "Composite",
          className: "StorageTaskAction"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "ValidateSubscriptionQuotaBegin",
            "ValidateSubscriptionQuotaEnd",
            "Creating",
            "Succeeded",
            "Deleting",
            "Canceled",
            "Failed"
          ]
        }
      },
      creationTimeInUtc: {
        serializedName: "properties.creationTimeInUtc",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const StorageTasksListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageTasksListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageTask"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageTask: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageTask",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "StorageTaskIdentity"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      taskVersion: {
        constraints: {
          InclusiveMaximum: 1,
          InclusiveMinimum: 1
        },
        serializedName: "properties.taskVersion",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      enabled: {
        serializedName: "properties.enabled",
        type: {
          name: "Boolean"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      action: {
        serializedName: "properties.action",
        type: {
          name: "Composite",
          className: "StorageTaskAction"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "ValidateSubscriptionQuotaBegin",
            "ValidateSubscriptionQuotaEnd",
            "Creating",
            "Succeeded",
            "Deleting",
            "Canceled",
            "Failed"
          ]
        }
      },
      creationTimeInUtc: {
        serializedName: "properties.creationTimeInUtc",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const StorageTasksCreateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageTasksCreateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageTasksDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageTasksDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageTasksUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageTasksUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};
