/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { EdgeSites } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureOrbital } from "../azureOrbital";
import {
  EdgeSite,
  EdgeSitesListBySubscriptionNextOptionalParams,
  EdgeSitesListBySubscriptionOptionalParams,
  EdgeSitesListBySubscriptionResponse,
  EdgeSitesListNextOptionalParams,
  EdgeSitesListOptionalParams,
  EdgeSitesListResponse,
  ResourceIdListResultValueItem,
  EdgeSitesListL2ConnectionsNextOptionalParams,
  EdgeSitesListL2ConnectionsOptionalParams,
  EdgeSitesListL2ConnectionsResponse,
  EdgeSitesGetOptionalParams,
  EdgeSitesGetResponse,
  EdgeSitesCreateOrUpdateOptionalParams,
  EdgeSitesCreateOrUpdateResponse,
  EdgeSitesDeleteOptionalParams,
  TagsObject,
  EdgeSitesUpdateTagsOptionalParams,
  EdgeSitesUpdateTagsResponse,
  EdgeSitesListBySubscriptionNextResponse,
  EdgeSitesListNextResponse,
  EdgeSitesListL2ConnectionsNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing EdgeSites operations. */
export class EdgeSitesImpl implements EdgeSites {
  private readonly client: AzureOrbital;

  /**
   * Initialize a new instance of the class EdgeSites class.
   * @param client Reference to the service client
   */
  constructor(client: AzureOrbital) {
    this.client = client;
  }

  /**
   * Returns a list of edge sites for a subscription.
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: EdgeSitesListBySubscriptionOptionalParams,
  ): PagedAsyncIterableIterator<EdgeSite> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionPagingPage(options, settings);
      },
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: EdgeSitesListBySubscriptionOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<EdgeSite[]> {
    let result: EdgeSitesListBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySubscription(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySubscriptionPagingAll(
    options?: EdgeSitesListBySubscriptionOptionalParams,
  ): AsyncIterableIterator<EdgeSite> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Returns a list of edge sites for a resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    options?: EdgeSitesListOptionalParams,
  ): PagedAsyncIterableIterator<EdgeSite> {
    const iter = this.listPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(resourceGroupName, options, settings);
      },
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    options?: EdgeSitesListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<EdgeSite[]> {
    let result: EdgeSitesListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        resourceGroupName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    options?: EdgeSitesListOptionalParams,
  ): AsyncIterableIterator<EdgeSite> {
    for await (const page of this.listPagingPage(resourceGroupName, options)) {
      yield* page;
    }
  }

  /**
   * Returns a list of L2 Connections attached to an edge site.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param edgeSiteName Edge site name.
   * @param options The options parameters.
   */
  public listL2Connections(
    resourceGroupName: string,
    edgeSiteName: string,
    options?: EdgeSitesListL2ConnectionsOptionalParams,
  ): PagedAsyncIterableIterator<ResourceIdListResultValueItem> {
    const iter = this.listL2ConnectionsPagingAll(
      resourceGroupName,
      edgeSiteName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listL2ConnectionsPagingPage(
          resourceGroupName,
          edgeSiteName,
          options,
          settings,
        );
      },
    };
  }

  private async *listL2ConnectionsPagingPage(
    resourceGroupName: string,
    edgeSiteName: string,
    options?: EdgeSitesListL2ConnectionsOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<ResourceIdListResultValueItem[]> {
    let result: EdgeSitesListL2ConnectionsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listL2Connections(
        resourceGroupName,
        edgeSiteName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listL2ConnectionsNext(
        resourceGroupName,
        edgeSiteName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listL2ConnectionsPagingAll(
    resourceGroupName: string,
    edgeSiteName: string,
    options?: EdgeSitesListL2ConnectionsOptionalParams,
  ): AsyncIterableIterator<ResourceIdListResultValueItem> {
    for await (const page of this.listL2ConnectionsPagingPage(
      resourceGroupName,
      edgeSiteName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Gets the specified edge site in a specified resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param edgeSiteName Edge site name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    edgeSiteName: string,
    options?: EdgeSitesGetOptionalParams,
  ): Promise<EdgeSitesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, edgeSiteName, options },
      getOperationSpec,
    );
  }

  /**
   * Creates or updates an edge site.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param edgeSiteName Edge site name.
   * @param location The geo-location where the resource lives
   * @param id The Azure Orbital Digital Ground site's resource ID.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    edgeSiteName: string,
    location: string,
    id: string,
    options?: EdgeSitesCreateOrUpdateOptionalParams,
  ): Promise<EdgeSitesCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, edgeSiteName, location, id, options },
      createOrUpdateOperationSpec,
    );
  }

  /**
   * Deletes a specified edge site resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param edgeSiteName Edge site name.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    edgeSiteName: string,
    options?: EdgeSitesDeleteOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, edgeSiteName, options },
      deleteOperationSpec,
    );
  }

  /**
   * Updates the specified edge site's tags.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param edgeSiteName Edge site name.
   * @param parameters Parameters supplied to update the edge site's tags.
   * @param options The options parameters.
   */
  updateTags(
    resourceGroupName: string,
    edgeSiteName: string,
    parameters: TagsObject,
    options?: EdgeSitesUpdateTagsOptionalParams,
  ): Promise<EdgeSitesUpdateTagsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, edgeSiteName, parameters, options },
      updateTagsOperationSpec,
    );
  }

  /**
   * Returns a list of edge sites for a subscription.
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: EdgeSitesListBySubscriptionOptionalParams,
  ): Promise<EdgeSitesListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec,
    );
  }

  /**
   * Returns a list of edge sites for a resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    options?: EdgeSitesListOptionalParams,
  ): Promise<EdgeSitesListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listOperationSpec,
    );
  }

  /**
   * Returns a list of L2 Connections attached to an edge site.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param edgeSiteName Edge site name.
   * @param options The options parameters.
   */
  private _listL2Connections(
    resourceGroupName: string,
    edgeSiteName: string,
    options?: EdgeSitesListL2ConnectionsOptionalParams,
  ): Promise<EdgeSitesListL2ConnectionsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, edgeSiteName, options },
      listL2ConnectionsOperationSpec,
    );
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: EdgeSitesListBySubscriptionNextOptionalParams,
  ): Promise<EdgeSitesListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec,
    );
  }

  /**
   * ListNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    nextLink: string,
    options?: EdgeSitesListNextOptionalParams,
  ): Promise<EdgeSitesListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listNextOperationSpec,
    );
  }

  /**
   * ListL2ConnectionsNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param edgeSiteName Edge site name.
   * @param nextLink The nextLink from the previous successful call to the ListL2Connections method.
   * @param options The options parameters.
   */
  private _listL2ConnectionsNext(
    resourceGroupName: string,
    edgeSiteName: string,
    nextLink: string,
    options?: EdgeSitesListL2ConnectionsNextOptionalParams,
  ): Promise<EdgeSitesListL2ConnectionsNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, edgeSiteName, nextLink, options },
      listL2ConnectionsNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/edgeSites/{edgeSiteName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EdgeSite,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.edgeSiteName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/edgeSites/{edgeSiteName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.EdgeSite,
    },
    201: {
      bodyMapper: Mappers.EdgeSite,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: {
    parameterPath: {
      tags: ["options", "tags"],
      location: ["location"],
      id: ["id"],
    },
    mapper: { ...Mappers.EdgeSite, required: true },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.edgeSiteName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/edgeSites/{edgeSiteName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.edgeSiteName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const updateTagsOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/edgeSites/{edgeSiteName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.EdgeSite,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.parameters1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.edgeSiteName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Orbital/edgeSites",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EdgeSiteListResult,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion, Parameters.skiptoken],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer,
};
const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/edgeSites",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EdgeSiteListResult,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion, Parameters.skiptoken],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listL2ConnectionsOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/edgeSites/{edgeSiteName}/listL2Connections",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceIdListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.edgeSiteName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EdgeSiteListResult,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EdgeSiteListResult,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listL2ConnectionsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceIdListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
    Parameters.edgeSiteName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
