/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { GlobalCommunicationsSites } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureOrbital } from "../azureOrbital";
import {
  GlobalCommunicationsSite,
  GlobalCommunicationsSitesListBySubscriptionNextOptionalParams,
  GlobalCommunicationsSitesListBySubscriptionOptionalParams,
  GlobalCommunicationsSitesListBySubscriptionResponse,
  GlobalCommunicationsSitesGetOptionalParams,
  GlobalCommunicationsSitesGetResponse,
  GlobalCommunicationsSitesListBySubscriptionNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing GlobalCommunicationsSites operations. */
export class GlobalCommunicationsSitesImpl
  implements GlobalCommunicationsSites
{
  private readonly client: AzureOrbital;

  /**
   * Initialize a new instance of the class GlobalCommunicationsSites class.
   * @param client Reference to the service client
   */
  constructor(client: AzureOrbital) {
    this.client = client;
  }

  /**
   * Returns a list of the global communications sites that a subscription is authorized to use.
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: GlobalCommunicationsSitesListBySubscriptionOptionalParams,
  ): PagedAsyncIterableIterator<GlobalCommunicationsSite> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionPagingPage(options, settings);
      },
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: GlobalCommunicationsSitesListBySubscriptionOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<GlobalCommunicationsSite[]> {
    let result: GlobalCommunicationsSitesListBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySubscription(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySubscriptionPagingAll(
    options?: GlobalCommunicationsSitesListBySubscriptionOptionalParams,
  ): AsyncIterableIterator<GlobalCommunicationsSite> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Returns a list of the global communications sites that a subscription is authorized to use.
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: GlobalCommunicationsSitesListBySubscriptionOptionalParams,
  ): Promise<GlobalCommunicationsSitesListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec,
    );
  }

  /**
   * Gets the specified global communications site in a specified resource group.
   * @param globalCommunicationsSiteName Global communications Site name.
   * @param options The options parameters.
   */
  get(
    globalCommunicationsSiteName: string,
    options?: GlobalCommunicationsSitesGetOptionalParams,
  ): Promise<GlobalCommunicationsSitesGetResponse> {
    return this.client.sendOperationRequest(
      { globalCommunicationsSiteName, options },
      getOperationSpec,
    );
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: GlobalCommunicationsSitesListBySubscriptionNextOptionalParams,
  ): Promise<GlobalCommunicationsSitesListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Orbital/globalCommunicationsSites",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GlobalCommunicationsSiteListResult,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Orbital/globalCommunicationsSites/{globalCommunicationsSiteName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GlobalCommunicationsSite,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.globalCommunicationsSiteName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GlobalCommunicationsSiteListResult,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
