/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { L2Connections } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureOrbital } from "../azureOrbital";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  L2Connection,
  L2ConnectionsListNextOptionalParams,
  L2ConnectionsListOptionalParams,
  L2ConnectionsListResponse,
  L2ConnectionsListBySubscriptionNextOptionalParams,
  L2ConnectionsListBySubscriptionOptionalParams,
  L2ConnectionsListBySubscriptionResponse,
  L2ConnectionsGetOptionalParams,
  L2ConnectionsGetResponse,
  L2ConnectionsCreateOrUpdateOptionalParams,
  L2ConnectionsCreateOrUpdateResponse,
  L2ConnectionsDeleteOptionalParams,
  L2ConnectionsDeleteResponse,
  TagsObject,
  L2ConnectionsUpdateTagsOptionalParams,
  L2ConnectionsUpdateTagsResponse,
  L2ConnectionsListNextResponse,
  L2ConnectionsListBySubscriptionNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing L2Connections operations. */
export class L2ConnectionsImpl implements L2Connections {
  private readonly client: AzureOrbital;

  /**
   * Initialize a new instance of the class L2Connections class.
   * @param client Reference to the service client
   */
  constructor(client: AzureOrbital) {
    this.client = client;
  }

  /**
   * Returns a list of L2 Connections attached to an orbital gateway.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    options?: L2ConnectionsListOptionalParams,
  ): PagedAsyncIterableIterator<L2Connection> {
    const iter = this.listPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(resourceGroupName, options, settings);
      },
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    options?: L2ConnectionsListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<L2Connection[]> {
    let result: L2ConnectionsListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        resourceGroupName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    options?: L2ConnectionsListOptionalParams,
  ): AsyncIterableIterator<L2Connection> {
    for await (const page of this.listPagingPage(resourceGroupName, options)) {
      yield* page;
    }
  }

  /**
   * Returns a list of L2 Connections attached to a subscription.
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: L2ConnectionsListBySubscriptionOptionalParams,
  ): PagedAsyncIterableIterator<L2Connection> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionPagingPage(options, settings);
      },
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: L2ConnectionsListBySubscriptionOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<L2Connection[]> {
    let result: L2ConnectionsListBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySubscription(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySubscriptionPagingAll(
    options?: L2ConnectionsListBySubscriptionOptionalParams,
  ): AsyncIterableIterator<L2Connection> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Gets the specified L2 connection in a specified resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param l2ConnectionName L2 Connection name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    l2ConnectionName: string,
    options?: L2ConnectionsGetOptionalParams,
  ): Promise<L2ConnectionsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, l2ConnectionName, options },
      getOperationSpec,
    );
  }

  /**
   * Creates or updates an L2 Connection.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param l2ConnectionName L2 Connection name.
   * @param location The geo-location where the resource lives
   * @param vlanId The VLAN ID for the L2 connection.
   * @param name The unique name of the partner router that cross-connects with the Orbital Edge Router
   *             at the ground station site.
   * @param id The ground station's resource ID.
   * @param l2ConnectionsPropertiesEdgeSitePartnerRouterName The unique name of the partner router that
   *                                                         cross-connects with the Orbital Edge Router at the edge site.
   * @param l2ConnectionsPropertiesEdgeSiteId The edge site's resource ID.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    l2ConnectionName: string,
    location: string,
    vlanId: number,
    name: string,
    id: string,
    l2ConnectionsPropertiesEdgeSitePartnerRouterName: string,
    l2ConnectionsPropertiesEdgeSiteId: string,
    options?: L2ConnectionsCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<L2ConnectionsCreateOrUpdateResponse>,
      L2ConnectionsCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<L2ConnectionsCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        l2ConnectionName,
        location,
        vlanId,
        name,
        id,
        l2ConnectionsPropertiesEdgeSitePartnerRouterName,
        l2ConnectionsPropertiesEdgeSiteId,
        options,
      },
      spec: createOrUpdateOperationSpec,
    });
    const poller = await createHttpPoller<
      L2ConnectionsCreateOrUpdateResponse,
      OperationState<L2ConnectionsCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Creates or updates an L2 Connection.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param l2ConnectionName L2 Connection name.
   * @param location The geo-location where the resource lives
   * @param vlanId The VLAN ID for the L2 connection.
   * @param name The unique name of the partner router that cross-connects with the Orbital Edge Router
   *             at the ground station site.
   * @param id The ground station's resource ID.
   * @param l2ConnectionsPropertiesEdgeSitePartnerRouterName The unique name of the partner router that
   *                                                         cross-connects with the Orbital Edge Router at the edge site.
   * @param l2ConnectionsPropertiesEdgeSiteId The edge site's resource ID.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    l2ConnectionName: string,
    location: string,
    vlanId: number,
    name: string,
    id: string,
    l2ConnectionsPropertiesEdgeSitePartnerRouterName: string,
    l2ConnectionsPropertiesEdgeSiteId: string,
    options?: L2ConnectionsCreateOrUpdateOptionalParams,
  ): Promise<L2ConnectionsCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      l2ConnectionName,
      location,
      vlanId,
      name,
      id,
      l2ConnectionsPropertiesEdgeSitePartnerRouterName,
      l2ConnectionsPropertiesEdgeSiteId,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Deletes a specified L2 Connection resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param l2ConnectionName L2 Connection name.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    l2ConnectionName: string,
    options?: L2ConnectionsDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<L2ConnectionsDeleteResponse>,
      L2ConnectionsDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<L2ConnectionsDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, l2ConnectionName, options },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<
      L2ConnectionsDeleteResponse,
      OperationState<L2ConnectionsDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Deletes a specified L2 Connection resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param l2ConnectionName L2 Connection name.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    l2ConnectionName: string,
    options?: L2ConnectionsDeleteOptionalParams,
  ): Promise<L2ConnectionsDeleteResponse> {
    const poller = await this.beginDelete(
      resourceGroupName,
      l2ConnectionName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Updates the specified L2 Connection's tags.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param l2ConnectionName L2 Connection name.
   * @param parameters Parameters supplied to update the L2 Connection's tags.
   * @param options The options parameters.
   */
  async beginUpdateTags(
    resourceGroupName: string,
    l2ConnectionName: string,
    parameters: TagsObject,
    options?: L2ConnectionsUpdateTagsOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<L2ConnectionsUpdateTagsResponse>,
      L2ConnectionsUpdateTagsResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<L2ConnectionsUpdateTagsResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, l2ConnectionName, parameters, options },
      spec: updateTagsOperationSpec,
    });
    const poller = await createHttpPoller<
      L2ConnectionsUpdateTagsResponse,
      OperationState<L2ConnectionsUpdateTagsResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Updates the specified L2 Connection's tags.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param l2ConnectionName L2 Connection name.
   * @param parameters Parameters supplied to update the L2 Connection's tags.
   * @param options The options parameters.
   */
  async beginUpdateTagsAndWait(
    resourceGroupName: string,
    l2ConnectionName: string,
    parameters: TagsObject,
    options?: L2ConnectionsUpdateTagsOptionalParams,
  ): Promise<L2ConnectionsUpdateTagsResponse> {
    const poller = await this.beginUpdateTags(
      resourceGroupName,
      l2ConnectionName,
      parameters,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Returns a list of L2 Connections attached to an orbital gateway.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    options?: L2ConnectionsListOptionalParams,
  ): Promise<L2ConnectionsListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listOperationSpec,
    );
  }

  /**
   * Returns a list of L2 Connections attached to a subscription.
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: L2ConnectionsListBySubscriptionOptionalParams,
  ): Promise<L2ConnectionsListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec,
    );
  }

  /**
   * ListNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    nextLink: string,
    options?: L2ConnectionsListNextOptionalParams,
  ): Promise<L2ConnectionsListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listNextOperationSpec,
    );
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: L2ConnectionsListBySubscriptionNextOptionalParams,
  ): Promise<L2ConnectionsListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/l2Connections/{l2ConnectionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.L2Connection,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.l2ConnectionName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/l2Connections/{l2ConnectionName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.L2Connection,
    },
    201: {
      bodyMapper: Mappers.L2Connection,
    },
    202: {
      bodyMapper: Mappers.L2Connection,
    },
    204: {
      bodyMapper: Mappers.L2Connection,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: {
    parameterPath: {
      tags: ["options", "tags"],
      location: ["location"],
      vlanId: ["vlanId"],
      name: ["name"],
      id: ["id"],
      l2ConnectionsPropertiesEdgeSitePartnerRouterName: [
        "l2ConnectionsPropertiesEdgeSitePartnerRouterName",
      ],
      l2ConnectionsPropertiesEdgeSiteId: ["l2ConnectionsPropertiesEdgeSiteId"],
    },
    mapper: { ...Mappers.L2Connection, required: true },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.l2ConnectionName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/l2Connections/{l2ConnectionName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.L2ConnectionsDeleteHeaders,
    },
    201: {
      headersMapper: Mappers.L2ConnectionsDeleteHeaders,
    },
    202: {
      headersMapper: Mappers.L2ConnectionsDeleteHeaders,
    },
    204: {
      headersMapper: Mappers.L2ConnectionsDeleteHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.l2ConnectionName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const updateTagsOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/l2Connections/{l2ConnectionName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.L2Connection,
    },
    201: {
      bodyMapper: Mappers.L2Connection,
    },
    202: {
      bodyMapper: Mappers.L2Connection,
    },
    204: {
      bodyMapper: Mappers.L2Connection,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.parameters1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.l2ConnectionName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/l2Connections",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.L2ConnectionListResult,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion, Parameters.skiptoken],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Orbital/l2Connections",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.L2ConnectionListResult,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion, Parameters.skiptoken],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.L2ConnectionListResult,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.L2ConnectionListResult,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
