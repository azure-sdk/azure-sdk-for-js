/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { GroundStations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureOrbital } from "../azureOrbital";
import {
  GroundStation,
  GroundStationsListBySubscriptionNextOptionalParams,
  GroundStationsListBySubscriptionOptionalParams,
  GroundStationsListBySubscriptionResponse,
  GroundStationsListNextOptionalParams,
  GroundStationsListOptionalParams,
  GroundStationsListResponse,
  ResourceIdListResultValueItem,
  GroundStationsListL2ConnectionsNextOptionalParams,
  GroundStationsListL2ConnectionsOptionalParams,
  GroundStationsListL2ConnectionsResponse,
  GroundStationsGetOptionalParams,
  GroundStationsGetResponse,
  GroundStationsCreateOrUpdateOptionalParams,
  GroundStationsCreateOrUpdateResponse,
  TagsObject,
  GroundStationsUpdateTagsOptionalParams,
  GroundStationsUpdateTagsResponse,
  GroundStationsDeleteOptionalParams,
  GroundStationsListBySubscriptionNextResponse,
  GroundStationsListNextResponse,
  GroundStationsListL2ConnectionsNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing GroundStations operations. */
export class GroundStationsImpl implements GroundStations {
  private readonly client: AzureOrbital;

  /**
   * Initialize a new instance of the class GroundStations class.
   * @param client Reference to the service client
   */
  constructor(client: AzureOrbital) {
    this.client = client;
  }

  /**
   * Return list of ground stations.
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: GroundStationsListBySubscriptionOptionalParams,
  ): PagedAsyncIterableIterator<GroundStation> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionPagingPage(options, settings);
      },
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: GroundStationsListBySubscriptionOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<GroundStation[]> {
    let result: GroundStationsListBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySubscription(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySubscriptionPagingAll(
    options?: GroundStationsListBySubscriptionOptionalParams,
  ): AsyncIterableIterator<GroundStation> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Return list of ground stations.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    options?: GroundStationsListOptionalParams,
  ): PagedAsyncIterableIterator<GroundStation> {
    const iter = this.listPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(resourceGroupName, options, settings);
      },
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    options?: GroundStationsListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<GroundStation[]> {
    let result: GroundStationsListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        resourceGroupName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    options?: GroundStationsListOptionalParams,
  ): AsyncIterableIterator<GroundStation> {
    for await (const page of this.listPagingPage(resourceGroupName, options)) {
      yield* page;
    }
  }

  /**
   * Returns a list of L2 Connections attached to an ground station.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param groundStationName Ground Station name.
   * @param options The options parameters.
   */
  public listL2Connections(
    resourceGroupName: string,
    groundStationName: string,
    options?: GroundStationsListL2ConnectionsOptionalParams,
  ): PagedAsyncIterableIterator<ResourceIdListResultValueItem> {
    const iter = this.listL2ConnectionsPagingAll(
      resourceGroupName,
      groundStationName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listL2ConnectionsPagingPage(
          resourceGroupName,
          groundStationName,
          options,
          settings,
        );
      },
    };
  }

  private async *listL2ConnectionsPagingPage(
    resourceGroupName: string,
    groundStationName: string,
    options?: GroundStationsListL2ConnectionsOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<ResourceIdListResultValueItem[]> {
    let result: GroundStationsListL2ConnectionsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listL2Connections(
        resourceGroupName,
        groundStationName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listL2ConnectionsNext(
        resourceGroupName,
        groundStationName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listL2ConnectionsPagingAll(
    resourceGroupName: string,
    groundStationName: string,
    options?: GroundStationsListL2ConnectionsOptionalParams,
  ): AsyncIterableIterator<ResourceIdListResultValueItem> {
    for await (const page of this.listL2ConnectionsPagingPage(
      resourceGroupName,
      groundStationName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Return list of ground stations.
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: GroundStationsListBySubscriptionOptionalParams,
  ): Promise<GroundStationsListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec,
    );
  }

  /**
   * Return list of ground stations.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    options?: GroundStationsListOptionalParams,
  ): Promise<GroundStationsListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listOperationSpec,
    );
  }

  /**
   * Gets the specified ground station in a specified resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param groundStationName Ground Station name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    groundStationName: string,
    options?: GroundStationsGetOptionalParams,
  ): Promise<GroundStationsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, groundStationName, options },
      getOperationSpec,
    );
  }

  /**
   * Creates or updates a ground station resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param groundStationName Ground Station name.
   * @param location The geo-location where the resource lives
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    groundStationName: string,
    location: string,
    options?: GroundStationsCreateOrUpdateOptionalParams,
  ): Promise<GroundStationsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, groundStationName, location, options },
      createOrUpdateOperationSpec,
    );
  }

  /**
   * Updates the specified ground station tags.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param groundStationName Ground Station name.
   * @param parameters Parameters supplied to update ground station tags.
   * @param options The options parameters.
   */
  updateTags(
    resourceGroupName: string,
    groundStationName: string,
    parameters: TagsObject,
    options?: GroundStationsUpdateTagsOptionalParams,
  ): Promise<GroundStationsUpdateTagsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, groundStationName, parameters, options },
      updateTagsOperationSpec,
    );
  }

  /**
   * Deletes a specified ground station resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param groundStationName Ground Station name.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    groundStationName: string,
    options?: GroundStationsDeleteOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, groundStationName, options },
      deleteOperationSpec,
    );
  }

  /**
   * Returns a list of L2 Connections attached to an ground station.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param groundStationName Ground Station name.
   * @param options The options parameters.
   */
  private _listL2Connections(
    resourceGroupName: string,
    groundStationName: string,
    options?: GroundStationsListL2ConnectionsOptionalParams,
  ): Promise<GroundStationsListL2ConnectionsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, groundStationName, options },
      listL2ConnectionsOperationSpec,
    );
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: GroundStationsListBySubscriptionNextOptionalParams,
  ): Promise<GroundStationsListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec,
    );
  }

  /**
   * ListNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    nextLink: string,
    options?: GroundStationsListNextOptionalParams,
  ): Promise<GroundStationsListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listNextOperationSpec,
    );
  }

  /**
   * ListL2ConnectionsNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param groundStationName Ground Station name.
   * @param nextLink The nextLink from the previous successful call to the ListL2Connections method.
   * @param options The options parameters.
   */
  private _listL2ConnectionsNext(
    resourceGroupName: string,
    groundStationName: string,
    nextLink: string,
    options?: GroundStationsListL2ConnectionsNextOptionalParams,
  ): Promise<GroundStationsListL2ConnectionsNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, groundStationName, nextLink, options },
      listL2ConnectionsNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Orbital/groundStations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GroundStationListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion, Parameters.skiptoken],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer,
};
const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/groundStations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GroundStationListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion, Parameters.skiptoken],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/groundStations/{groundStationName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GroundStation,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.groundStationName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/groundStations/{groundStationName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.GroundStation,
    },
    201: {
      bodyMapper: Mappers.GroundStation,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: {
    parameterPath: {
      tags: ["options", "tags"],
      location: ["location"],
      city: ["options", "city"],
      capabilities: ["options", "capabilities"],
      providerName: ["options", "providerName"],
      longitudeDegrees: ["options", "longitudeDegrees"],
      latitudeDegrees: ["options", "latitudeDegrees"],
      altitudeMeters: ["options", "altitudeMeters"],
      id: ["options", "id"],
    },
    mapper: { ...Mappers.GroundStation, required: true },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.groundStationName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const updateTagsOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/groundStations/{groundStationName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.GroundStation,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.parameters1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.groundStationName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/groundStations/{groundStationName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.groundStationName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listL2ConnectionsOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/groundStations/{groundStationName}/listL2Connections",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceIdListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.groundStationName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GroundStationListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GroundStationListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listL2ConnectionsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceIdListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.groundStationName,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
