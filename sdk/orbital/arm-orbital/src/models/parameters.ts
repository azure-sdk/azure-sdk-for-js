/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter,
} from "@azure/core-client";
import {
  GroundStation as GroundStationMapper,
  TagsObject as TagsObjectMapper,
  EdgeSite as EdgeSiteMapper,
  L2Connection as L2ConnectionMapper,
} from "../models/mappers";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String",
    },
  },
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2024-03-01-preview",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String",
    },
  },
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "Uuid",
    },
  },
};

export const skiptoken: OperationQueryParameter = {
  parameterPath: "skiptoken",
  mapper: {
    serializedName: "$skiptoken",
    type: {
      name: "String",
    },
  },
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    constraints: {
      MaxLength: 90,
      MinLength: 1,
    },
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const groundStationName: OperationURLParameter = {
  parameterPath: "groundStationName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[A-Za-z][A-Za-z0-9-_]+$"),
      MaxLength: 64,
      MinLength: 2,
    },
    serializedName: "groundStationName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String",
    },
  },
};

export const tags: OperationParameter = {
  parameterPath: ["options", "tags"],
  mapper: GroundStationMapper,
};

export const location: OperationParameter = {
  parameterPath: "location",
  mapper: GroundStationMapper,
};

export const city: OperationParameter = {
  parameterPath: ["options", "city"],
  mapper: GroundStationMapper,
};

export const capabilities: OperationParameter = {
  parameterPath: ["options", "capabilities"],
  mapper: GroundStationMapper,
};

export const providerName: OperationParameter = {
  parameterPath: ["options", "providerName"],
  mapper: GroundStationMapper,
};

export const longitudeDegrees: OperationParameter = {
  parameterPath: ["options", "longitudeDegrees"],
  mapper: GroundStationMapper,
};

export const latitudeDegrees: OperationParameter = {
  parameterPath: ["options", "latitudeDegrees"],
  mapper: GroundStationMapper,
};

export const altitudeMeters: OperationParameter = {
  parameterPath: ["options", "altitudeMeters"],
  mapper: GroundStationMapper,
};

export const id: OperationParameter = {
  parameterPath: ["options", "id"],
  mapper: GroundStationMapper,
};

export const parameters1: OperationParameter = {
  parameterPath: "parameters",
  mapper: TagsObjectMapper,
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const edgeSiteName: OperationURLParameter = {
  parameterPath: "edgeSiteName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[A-Za-z][A-Za-z0-9-_]+$"),
      MaxLength: 64,
      MinLength: 2,
    },
    serializedName: "edgeSiteName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const tags1: OperationParameter = {
  parameterPath: ["options", "tags"],
  mapper: EdgeSiteMapper,
};

export const location1: OperationParameter = {
  parameterPath: "location",
  mapper: EdgeSiteMapper,
};

export const id1: OperationParameter = {
  parameterPath: "id",
  mapper: EdgeSiteMapper,
};

export const l2ConnectionName: OperationURLParameter = {
  parameterPath: "l2ConnectionName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[A-Za-z][A-Za-z0-9-_]+$"),
      MaxLength: 64,
      MinLength: 2,
    },
    serializedName: "l2ConnectionName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const tags2: OperationParameter = {
  parameterPath: ["options", "tags"],
  mapper: L2ConnectionMapper,
};

export const location2: OperationParameter = {
  parameterPath: "location",
  mapper: L2ConnectionMapper,
};

export const vlanId: OperationParameter = {
  parameterPath: "vlanId",
  mapper: L2ConnectionMapper,
};

export const name: OperationParameter = {
  parameterPath: "name",
  mapper: L2ConnectionMapper,
};

export const id2: OperationParameter = {
  parameterPath: "id",
  mapper: L2ConnectionMapper,
};

export const l2ConnectionsPropertiesEdgeSitePartnerRouterName: OperationParameter =
  {
    parameterPath: "l2ConnectionsPropertiesEdgeSitePartnerRouterName",
    mapper: L2ConnectionMapper,
  };

export const l2ConnectionsPropertiesEdgeSiteId: OperationParameter = {
  parameterPath: "l2ConnectionsPropertiesEdgeSiteId",
  mapper: L2ConnectionMapper,
};

export const globalCommunicationsSiteName: OperationURLParameter = {
  parameterPath: "globalCommunicationsSiteName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[A-Za-z][A-Za-z0-9-_]+$"),
      MaxLength: 64,
      MinLength: 2,
    },
    serializedName: "globalCommunicationsSiteName",
    required: true,
    type: {
      name: "String",
    },
  },
};
