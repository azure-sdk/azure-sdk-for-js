/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { ResourceMove } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { PeeringManagementClient } from "../peeringManagementClient";
import {
  ResourceMoveRequest,
  ResourceMoveValidateMoveResourcesOptionalParams,
  ResourceMoveMoveResourcesOptionalParams
} from "../models";

/** Class containing ResourceMove operations. */
export class ResourceMoveImpl implements ResourceMove {
  private readonly client: PeeringManagementClient;

  /**
   * Initialize a new instance of the class ResourceMove class.
   * @param client Reference to the service client
   */
  constructor(client: PeeringManagementClient) {
    this.client = client;
  }

  /**
   * ValidateMoveResources will be called by ARM when a resource is moved.
   * @param resourceGroupName Resource group name.
   * @param resourceMoveRequest Payload.
   * @param options The options parameters.
   */
  validateMoveResources(
    resourceGroupName: string,
    resourceMoveRequest: ResourceMoveRequest,
    options?: ResourceMoveValidateMoveResourcesOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceMoveRequest, options },
      validateMoveResourcesOperationSpec
    );
  }

  /**
   * MoveResources will be called by ARM when a resource is moved.
   * @param resourceGroupName Resource group name.
   * @param resourceMoveRequest Request payload.
   * @param options The options parameters.
   */
  moveResources(
    resourceGroupName: string,
    resourceMoveRequest: ResourceMoveRequest,
    options?: ResourceMoveMoveResourcesOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceMoveRequest, options },
      moveResourcesOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const validateMoveResourcesOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/validateMoveResources",
  httpMethod: "POST",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.resourceMoveRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const moveResourcesOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/moveResources",
  httpMethod: "POST",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.resourceMoveRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
