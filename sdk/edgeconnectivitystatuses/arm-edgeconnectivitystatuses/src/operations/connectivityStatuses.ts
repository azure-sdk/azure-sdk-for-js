/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { ConnectivityStatuses } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MicrosoftEdge } from "../microsoftEdge";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  ConnectivityStatus,
  ConnectivityStatusesListNextOptionalParams,
  ConnectivityStatusesListOptionalParams,
  ConnectivityStatusesListResponse,
  ConnectivityStatusesGetOptionalParams,
  ConnectivityStatusesGetResponse,
  ConnectivityStatusesCreateOrUpdateOptionalParams,
  ConnectivityStatusesCreateOrUpdateResponse,
  ConnectivityStatusUpdate,
  ConnectivityStatusesUpdateOptionalParams,
  ConnectivityStatusesUpdateResponse,
  ConnectivityStatusesDeleteOptionalParams,
  ConnectivityStatusesListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ConnectivityStatuses operations. */
export class ConnectivityStatusesImpl implements ConnectivityStatuses {
  private readonly client: MicrosoftEdge;

  /**
   * Initialize a new instance of the class ConnectivityStatuses class.
   * @param client Reference to the service client
   */
  constructor(client: MicrosoftEdge) {
    this.client = client;
  }

  /**
   * List ConnectivityStatus resources by parent
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param options The options parameters.
   */
  public list(
    resourceUri: string,
    options?: ConnectivityStatusesListOptionalParams
  ): PagedAsyncIterableIterator<ConnectivityStatus> {
    const iter = this.listPagingAll(resourceUri, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(resourceUri, options, settings);
      }
    };
  }

  private async *listPagingPage(
    resourceUri: string,
    options?: ConnectivityStatusesListOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<ConnectivityStatus[]> {
    let result: ConnectivityStatusesListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(resourceUri, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(resourceUri, continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    resourceUri: string,
    options?: ConnectivityStatusesListOptionalParams
  ): AsyncIterableIterator<ConnectivityStatus> {
    for await (const page of this.listPagingPage(resourceUri, options)) {
      yield* page;
    }
  }

  /**
   * List ConnectivityStatus resources by parent
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param options The options parameters.
   */
  private _list(
    resourceUri: string,
    options?: ConnectivityStatusesListOptionalParams
  ): Promise<ConnectivityStatusesListResponse> {
    return this.client.sendOperationRequest(
      { resourceUri, options },
      listOperationSpec
    );
  }

  /**
   * Get a ConnectivityStatus
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param connectivityStatusName Name of ConnectivityStatus
   * @param options The options parameters.
   */
  get(
    resourceUri: string,
    connectivityStatusName: string,
    options?: ConnectivityStatusesGetOptionalParams
  ): Promise<ConnectivityStatusesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceUri, connectivityStatusName, options },
      getOperationSpec
    );
  }

  /**
   * Create a ConnectivityStatus
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param connectivityStatusName Name of ConnectivityStatus
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceUri: string,
    connectivityStatusName: string,
    resource: ConnectivityStatus,
    options?: ConnectivityStatusesCreateOrUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<ConnectivityStatusesCreateOrUpdateResponse>,
      ConnectivityStatusesCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ConnectivityStatusesCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceUri, connectivityStatusName, resource, options },
      spec: createOrUpdateOperationSpec
    });
    const poller = await createHttpPoller<
      ConnectivityStatusesCreateOrUpdateResponse,
      OperationState<ConnectivityStatusesCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create a ConnectivityStatus
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param connectivityStatusName Name of ConnectivityStatus
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceUri: string,
    connectivityStatusName: string,
    resource: ConnectivityStatus,
    options?: ConnectivityStatusesCreateOrUpdateOptionalParams
  ): Promise<ConnectivityStatusesCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceUri,
      connectivityStatusName,
      resource,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Update a ConnectivityStatus
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param connectivityStatusName Name of ConnectivityStatus
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  update(
    resourceUri: string,
    connectivityStatusName: string,
    properties: ConnectivityStatusUpdate,
    options?: ConnectivityStatusesUpdateOptionalParams
  ): Promise<ConnectivityStatusesUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceUri, connectivityStatusName, properties, options },
      updateOperationSpec
    );
  }

  /**
   * Delete a ConnectivityStatus
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param connectivityStatusName Name of ConnectivityStatus
   * @param options The options parameters.
   */
  delete(
    resourceUri: string,
    connectivityStatusName: string,
    options?: ConnectivityStatusesDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceUri, connectivityStatusName, options },
      deleteOperationSpec
    );
  }

  /**
   * ListNext
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceUri: string,
    nextLink: string,
    options?: ConnectivityStatusesListNextOptionalParams
  ): Promise<ConnectivityStatusesListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceUri, nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/{resourceUri}/providers/Microsoft.Edge/connectivityStatuses",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ConnectivityStatusListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.resourceUri],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/{resourceUri}/providers/Microsoft.Edge/connectivityStatuses/{connectivityStatusName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ConnectivityStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceUri,
    Parameters.connectivityStatusName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/{resourceUri}/providers/Microsoft.Edge/connectivityStatuses/{connectivityStatusName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ConnectivityStatus
    },
    201: {
      bodyMapper: Mappers.ConnectivityStatus
    },
    202: {
      bodyMapper: Mappers.ConnectivityStatus
    },
    204: {
      bodyMapper: Mappers.ConnectivityStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.resource,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceUri,
    Parameters.connectivityStatusName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/{resourceUri}/providers/Microsoft.Edge/connectivityStatuses/{connectivityStatusName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.ConnectivityStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.properties,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceUri,
    Parameters.connectivityStatusName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/{resourceUri}/providers/Microsoft.Edge/connectivityStatuses/{connectivityStatusName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceUri,
    Parameters.connectivityStatusName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ConnectivityStatusListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.resourceUri,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
