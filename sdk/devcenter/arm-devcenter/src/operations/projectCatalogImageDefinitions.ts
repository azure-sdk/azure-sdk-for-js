/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { ProjectCatalogImageDefinitions } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { DevCenterClient } from "../devCenterClient";
import {
  ImageDefinition,
  ProjectCatalogImageDefinitionsListByProjectCatalogNextOptionalParams,
  ProjectCatalogImageDefinitionsListByProjectCatalogOptionalParams,
  ProjectCatalogImageDefinitionsListByProjectCatalogResponse,
  ProjectCatalogImageDefinitionsGetByProjectCatalogOptionalParams,
  ProjectCatalogImageDefinitionsGetByProjectCatalogResponse,
  ProjectCatalogImageDefinitionsListByProjectCatalogNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ProjectCatalogImageDefinitions operations. */
export class ProjectCatalogImageDefinitionsImpl
  implements ProjectCatalogImageDefinitions
{
  private readonly client: DevCenterClient;

  /**
   * Initialize a new instance of the class ProjectCatalogImageDefinitions class.
   * @param client Reference to the service client
   */
  constructor(client: DevCenterClient) {
    this.client = client;
  }

  /**
   * List Image Definitions in the catalog.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param projectName The name of the project.
   * @param catalogName The name of the Catalog.
   * @param options The options parameters.
   */
  public listByProjectCatalog(
    resourceGroupName: string,
    projectName: string,
    catalogName: string,
    options?: ProjectCatalogImageDefinitionsListByProjectCatalogOptionalParams,
  ): PagedAsyncIterableIterator<ImageDefinition> {
    const iter = this.listByProjectCatalogPagingAll(
      resourceGroupName,
      projectName,
      catalogName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByProjectCatalogPagingPage(
          resourceGroupName,
          projectName,
          catalogName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByProjectCatalogPagingPage(
    resourceGroupName: string,
    projectName: string,
    catalogName: string,
    options?: ProjectCatalogImageDefinitionsListByProjectCatalogOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<ImageDefinition[]> {
    let result: ProjectCatalogImageDefinitionsListByProjectCatalogResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByProjectCatalog(
        resourceGroupName,
        projectName,
        catalogName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByProjectCatalogNext(
        resourceGroupName,
        projectName,
        catalogName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByProjectCatalogPagingAll(
    resourceGroupName: string,
    projectName: string,
    catalogName: string,
    options?: ProjectCatalogImageDefinitionsListByProjectCatalogOptionalParams,
  ): AsyncIterableIterator<ImageDefinition> {
    for await (const page of this.listByProjectCatalogPagingPage(
      resourceGroupName,
      projectName,
      catalogName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List Image Definitions in the catalog.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param projectName The name of the project.
   * @param catalogName The name of the Catalog.
   * @param options The options parameters.
   */
  private _listByProjectCatalog(
    resourceGroupName: string,
    projectName: string,
    catalogName: string,
    options?: ProjectCatalogImageDefinitionsListByProjectCatalogOptionalParams,
  ): Promise<ProjectCatalogImageDefinitionsListByProjectCatalogResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, projectName, catalogName, options },
      listByProjectCatalogOperationSpec,
    );
  }

  /**
   * Gets an Image Definition from the catalog
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param projectName The name of the project.
   * @param catalogName The name of the Catalog.
   * @param imageDefinitionName The name of the Image Definition.
   * @param options The options parameters.
   */
  getByProjectCatalog(
    resourceGroupName: string,
    projectName: string,
    catalogName: string,
    imageDefinitionName: string,
    options?: ProjectCatalogImageDefinitionsGetByProjectCatalogOptionalParams,
  ): Promise<ProjectCatalogImageDefinitionsGetByProjectCatalogResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        projectName,
        catalogName,
        imageDefinitionName,
        options,
      },
      getByProjectCatalogOperationSpec,
    );
  }

  /**
   * ListByProjectCatalogNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param projectName The name of the project.
   * @param catalogName The name of the Catalog.
   * @param nextLink The nextLink from the previous successful call to the ListByProjectCatalog method.
   * @param options The options parameters.
   */
  private _listByProjectCatalogNext(
    resourceGroupName: string,
    projectName: string,
    catalogName: string,
    nextLink: string,
    options?: ProjectCatalogImageDefinitionsListByProjectCatalogNextOptionalParams,
  ): Promise<ProjectCatalogImageDefinitionsListByProjectCatalogNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, projectName, catalogName, nextLink, options },
      listByProjectCatalogNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByProjectCatalogOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/projects/{projectName}/catalogs/{catalogName}/imageDefinitions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ImageDefinitionListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.projectName,
    Parameters.catalogName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getByProjectCatalogOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/projects/{projectName}/catalogs/{catalogName}/imageDefinitions/{imageDefinitionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ImageDefinition,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.projectName,
    Parameters.catalogName,
    Parameters.imageDefinitionName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByProjectCatalogNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ImageDefinitionListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
    Parameters.projectName,
    Parameters.catalogName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
