/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { DevCenterCatalogImageDefinitions } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { DevCenterClient } from "../devCenterClient.js";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl.js";
import {
  ImageDefinition,
  DevCenterCatalogImageDefinitionsListByDevCenterCatalogNextOptionalParams,
  DevCenterCatalogImageDefinitionsListByDevCenterCatalogOptionalParams,
  DevCenterCatalogImageDefinitionsListByDevCenterCatalogResponse,
  DevCenterCatalogImageDefinitionsGetByDevCenterCatalogOptionalParams,
  DevCenterCatalogImageDefinitionsGetByDevCenterCatalogResponse,
  DevCenterCatalogImageDefinitionsGetErrorDetailsOptionalParams,
  DevCenterCatalogImageDefinitionsGetErrorDetailsResponse,
  DevCenterCatalogImageDefinitionsBuildImageOptionalParams,
  DevCenterCatalogImageDefinitionsBuildImageResponse,
  DevCenterCatalogImageDefinitionsListByDevCenterCatalogNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing DevCenterCatalogImageDefinitions operations. */
export class DevCenterCatalogImageDefinitionsImpl
  implements DevCenterCatalogImageDefinitions
{
  private readonly client: DevCenterClient;

  /**
   * Initialize a new instance of the class DevCenterCatalogImageDefinitions class.
   * @param client Reference to the service client
   */
  constructor(client: DevCenterClient) {
    this.client = client;
  }

  /**
   * List Image Definitions in the catalog.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param devCenterName The name of the devcenter.
   * @param catalogName The name of the Catalog.
   * @param options The options parameters.
   */
  public listByDevCenterCatalog(
    resourceGroupName: string,
    devCenterName: string,
    catalogName: string,
    options?: DevCenterCatalogImageDefinitionsListByDevCenterCatalogOptionalParams,
  ): PagedAsyncIterableIterator<ImageDefinition> {
    const iter = this.listByDevCenterCatalogPagingAll(
      resourceGroupName,
      devCenterName,
      catalogName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByDevCenterCatalogPagingPage(
          resourceGroupName,
          devCenterName,
          catalogName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByDevCenterCatalogPagingPage(
    resourceGroupName: string,
    devCenterName: string,
    catalogName: string,
    options?: DevCenterCatalogImageDefinitionsListByDevCenterCatalogOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<ImageDefinition[]> {
    let result: DevCenterCatalogImageDefinitionsListByDevCenterCatalogResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByDevCenterCatalog(
        resourceGroupName,
        devCenterName,
        catalogName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByDevCenterCatalogNext(
        resourceGroupName,
        devCenterName,
        catalogName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByDevCenterCatalogPagingAll(
    resourceGroupName: string,
    devCenterName: string,
    catalogName: string,
    options?: DevCenterCatalogImageDefinitionsListByDevCenterCatalogOptionalParams,
  ): AsyncIterableIterator<ImageDefinition> {
    for await (const page of this.listByDevCenterCatalogPagingPage(
      resourceGroupName,
      devCenterName,
      catalogName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List Image Definitions in the catalog.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param devCenterName The name of the devcenter.
   * @param catalogName The name of the Catalog.
   * @param options The options parameters.
   */
  private _listByDevCenterCatalog(
    resourceGroupName: string,
    devCenterName: string,
    catalogName: string,
    options?: DevCenterCatalogImageDefinitionsListByDevCenterCatalogOptionalParams,
  ): Promise<DevCenterCatalogImageDefinitionsListByDevCenterCatalogResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, devCenterName, catalogName, options },
      listByDevCenterCatalogOperationSpec,
    );
  }

  /**
   * Gets an Image Definition from the catalog
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param devCenterName The name of the devcenter.
   * @param catalogName The name of the Catalog.
   * @param imageDefinitionName The name of the Image Definition.
   * @param options The options parameters.
   */
  getByDevCenterCatalog(
    resourceGroupName: string,
    devCenterName: string,
    catalogName: string,
    imageDefinitionName: string,
    options?: DevCenterCatalogImageDefinitionsGetByDevCenterCatalogOptionalParams,
  ): Promise<DevCenterCatalogImageDefinitionsGetByDevCenterCatalogResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        devCenterName,
        catalogName,
        imageDefinitionName,
        options,
      },
      getByDevCenterCatalogOperationSpec,
    );
  }

  /**
   * Gets Image Definition error details
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param devCenterName The name of the devcenter.
   * @param catalogName The name of the Catalog.
   * @param imageDefinitionName The name of the Image Definition.
   * @param options The options parameters.
   */
  getErrorDetails(
    resourceGroupName: string,
    devCenterName: string,
    catalogName: string,
    imageDefinitionName: string,
    options?: DevCenterCatalogImageDefinitionsGetErrorDetailsOptionalParams,
  ): Promise<DevCenterCatalogImageDefinitionsGetErrorDetailsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        devCenterName,
        catalogName,
        imageDefinitionName,
        options,
      },
      getErrorDetailsOperationSpec,
    );
  }

  /**
   * Builds an image for the specified Image Definition.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param devCenterName The name of the devcenter.
   * @param catalogName The name of the Catalog.
   * @param imageDefinitionName The name of the Image Definition.
   * @param options The options parameters.
   */
  async beginBuildImage(
    resourceGroupName: string,
    devCenterName: string,
    catalogName: string,
    imageDefinitionName: string,
    options?: DevCenterCatalogImageDefinitionsBuildImageOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<DevCenterCatalogImageDefinitionsBuildImageResponse>,
      DevCenterCatalogImageDefinitionsBuildImageResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<DevCenterCatalogImageDefinitionsBuildImageResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        devCenterName,
        catalogName,
        imageDefinitionName,
        options,
      },
      spec: buildImageOperationSpec,
    });
    const poller = await createHttpPoller<
      DevCenterCatalogImageDefinitionsBuildImageResponse,
      OperationState<DevCenterCatalogImageDefinitionsBuildImageResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Builds an image for the specified Image Definition.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param devCenterName The name of the devcenter.
   * @param catalogName The name of the Catalog.
   * @param imageDefinitionName The name of the Image Definition.
   * @param options The options parameters.
   */
  async beginBuildImageAndWait(
    resourceGroupName: string,
    devCenterName: string,
    catalogName: string,
    imageDefinitionName: string,
    options?: DevCenterCatalogImageDefinitionsBuildImageOptionalParams,
  ): Promise<DevCenterCatalogImageDefinitionsBuildImageResponse> {
    const poller = await this.beginBuildImage(
      resourceGroupName,
      devCenterName,
      catalogName,
      imageDefinitionName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * ListByDevCenterCatalogNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param devCenterName The name of the devcenter.
   * @param catalogName The name of the Catalog.
   * @param nextLink The nextLink from the previous successful call to the ListByDevCenterCatalog method.
   * @param options The options parameters.
   */
  private _listByDevCenterCatalogNext(
    resourceGroupName: string,
    devCenterName: string,
    catalogName: string,
    nextLink: string,
    options?: DevCenterCatalogImageDefinitionsListByDevCenterCatalogNextOptionalParams,
  ): Promise<DevCenterCatalogImageDefinitionsListByDevCenterCatalogNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, devCenterName, catalogName, nextLink, options },
      listByDevCenterCatalogNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByDevCenterCatalogOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/devcenters/{devCenterName}/catalogs/{catalogName}/imageDefinitions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ImageDefinitionListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.devCenterName,
    Parameters.catalogName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getByDevCenterCatalogOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/devcenters/{devCenterName}/catalogs/{catalogName}/imageDefinitions/{imageDefinitionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ImageDefinition,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.devCenterName,
    Parameters.catalogName,
    Parameters.imageDefinitionName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getErrorDetailsOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/devcenters/{devCenterName}/catalogs/{catalogName}/imageDefinitions/{imageDefinitionName}/getErrorDetails",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CatalogResourceValidationErrorDetails,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.devCenterName,
    Parameters.catalogName,
    Parameters.imageDefinitionName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const buildImageOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/devcenters/{devCenterName}/catalogs/{catalogName}/imageDefinitions/{imageDefinitionName}/buildImage",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.DevCenterCatalogImageDefinitionsBuildImageHeaders,
    },
    201: {
      headersMapper: Mappers.DevCenterCatalogImageDefinitionsBuildImageHeaders,
    },
    202: {
      headersMapper: Mappers.DevCenterCatalogImageDefinitionsBuildImageHeaders,
    },
    204: {
      headersMapper: Mappers.DevCenterCatalogImageDefinitionsBuildImageHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.devCenterName,
    Parameters.catalogName,
    Parameters.imageDefinitionName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByDevCenterCatalogNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ImageDefinitionListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.devCenterName,
    Parameters.nextLink,
    Parameters.catalogName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
