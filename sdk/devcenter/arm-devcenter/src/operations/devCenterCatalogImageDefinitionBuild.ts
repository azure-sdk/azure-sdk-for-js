/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { DevCenterCatalogImageDefinitionBuild } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { DevCenterClient } from "../devCenterClient.js";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl.js";
import {
  DevCenterCatalogImageDefinitionBuildGetOptionalParams,
  DevCenterCatalogImageDefinitionBuildGetResponse,
  DevCenterCatalogImageDefinitionBuildCancelOptionalParams,
  DevCenterCatalogImageDefinitionBuildCancelResponse,
  DevCenterCatalogImageDefinitionBuildGetBuildDetailsOptionalParams,
  DevCenterCatalogImageDefinitionBuildGetBuildDetailsResponse,
} from "../models/index.js";

/** Class containing DevCenterCatalogImageDefinitionBuild operations. */
export class DevCenterCatalogImageDefinitionBuildImpl
  implements DevCenterCatalogImageDefinitionBuild
{
  private readonly client: DevCenterClient;

  /**
   * Initialize a new instance of the class DevCenterCatalogImageDefinitionBuild class.
   * @param client Reference to the service client
   */
  constructor(client: DevCenterClient) {
    this.client = client;
  }

  /**
   * Gets a build for a specified image definition.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param devCenterName The name of the devcenter.
   * @param catalogName The name of the Catalog.
   * @param imageDefinitionName The name of the Image Definition.
   * @param buildName The ID of the Image Definition Build.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    devCenterName: string,
    catalogName: string,
    imageDefinitionName: string,
    buildName: string,
    options?: DevCenterCatalogImageDefinitionBuildGetOptionalParams,
  ): Promise<DevCenterCatalogImageDefinitionBuildGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        devCenterName,
        catalogName,
        imageDefinitionName,
        buildName,
        options,
      },
      getOperationSpec,
    );
  }

  /**
   * Cancels the specified build for an image definition.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param devCenterName The name of the devcenter.
   * @param catalogName The name of the Catalog.
   * @param imageDefinitionName The name of the Image Definition.
   * @param buildName The ID of the Image Definition Build.
   * @param options The options parameters.
   */
  async beginCancel(
    resourceGroupName: string,
    devCenterName: string,
    catalogName: string,
    imageDefinitionName: string,
    buildName: string,
    options?: DevCenterCatalogImageDefinitionBuildCancelOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<DevCenterCatalogImageDefinitionBuildCancelResponse>,
      DevCenterCatalogImageDefinitionBuildCancelResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<DevCenterCatalogImageDefinitionBuildCancelResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        devCenterName,
        catalogName,
        imageDefinitionName,
        buildName,
        options,
      },
      spec: cancelOperationSpec,
    });
    const poller = await createHttpPoller<
      DevCenterCatalogImageDefinitionBuildCancelResponse,
      OperationState<DevCenterCatalogImageDefinitionBuildCancelResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Cancels the specified build for an image definition.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param devCenterName The name of the devcenter.
   * @param catalogName The name of the Catalog.
   * @param imageDefinitionName The name of the Image Definition.
   * @param buildName The ID of the Image Definition Build.
   * @param options The options parameters.
   */
  async beginCancelAndWait(
    resourceGroupName: string,
    devCenterName: string,
    catalogName: string,
    imageDefinitionName: string,
    buildName: string,
    options?: DevCenterCatalogImageDefinitionBuildCancelOptionalParams,
  ): Promise<DevCenterCatalogImageDefinitionBuildCancelResponse> {
    const poller = await this.beginCancel(
      resourceGroupName,
      devCenterName,
      catalogName,
      imageDefinitionName,
      buildName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Gets Build details
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param devCenterName The name of the devcenter.
   * @param catalogName The name of the Catalog.
   * @param imageDefinitionName The name of the Image Definition.
   * @param buildName The ID of the Image Definition Build.
   * @param options The options parameters.
   */
  getBuildDetails(
    resourceGroupName: string,
    devCenterName: string,
    catalogName: string,
    imageDefinitionName: string,
    buildName: string,
    options?: DevCenterCatalogImageDefinitionBuildGetBuildDetailsOptionalParams,
  ): Promise<DevCenterCatalogImageDefinitionBuildGetBuildDetailsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        devCenterName,
        catalogName,
        imageDefinitionName,
        buildName,
        options,
      },
      getBuildDetailsOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/devcenters/{devCenterName}/catalogs/{catalogName}/imageDefinitions/{imageDefinitionName}/builds/{buildName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ImageDefinitionBuild,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.devCenterName,
    Parameters.catalogName,
    Parameters.imageDefinitionName,
    Parameters.buildName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const cancelOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/devcenters/{devCenterName}/catalogs/{catalogName}/imageDefinitions/{imageDefinitionName}/builds/{buildName}/cancel",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.DevCenterCatalogImageDefinitionBuildCancelHeaders,
    },
    201: {
      headersMapper: Mappers.DevCenterCatalogImageDefinitionBuildCancelHeaders,
    },
    202: {
      headersMapper: Mappers.DevCenterCatalogImageDefinitionBuildCancelHeaders,
    },
    204: {
      headersMapper: Mappers.DevCenterCatalogImageDefinitionBuildCancelHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.devCenterName,
    Parameters.catalogName,
    Parameters.imageDefinitionName,
    Parameters.buildName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getBuildDetailsOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/devcenters/{devCenterName}/catalogs/{catalogName}/imageDefinitions/{imageDefinitionName}/builds/{buildName}/getBuildDetails",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ImageDefinitionBuildDetails,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.devCenterName,
    Parameters.catalogName,
    Parameters.imageDefinitionName,
    Parameters.buildName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
