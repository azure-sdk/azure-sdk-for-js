/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { CurationProfiles } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { DevCenterClient } from "../devCenterClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  CurationProfile,
  CurationProfilesListByDevCenterNextOptionalParams,
  CurationProfilesListByDevCenterOptionalParams,
  CurationProfilesListByDevCenterResponse,
  CurationProfilesGetOptionalParams,
  CurationProfilesGetResponse,
  CurationProfilesCreateOrUpdateOptionalParams,
  CurationProfilesCreateOrUpdateResponse,
  CurationProfileUpdate,
  CurationProfilesUpdateOptionalParams,
  CurationProfilesUpdateResponse,
  CurationProfilesDeleteOptionalParams,
  CurationProfilesDeleteResponse,
  CurationProfilesListByDevCenterNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing CurationProfiles operations. */
export class CurationProfilesImpl implements CurationProfiles {
  private readonly client: DevCenterClient;

  /**
   * Initialize a new instance of the class CurationProfiles class.
   * @param client Reference to the service client
   */
  constructor(client: DevCenterClient) {
    this.client = client;
  }

  /**
   * Lists all curation profiles in the dev center
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param devCenterName The name of the devcenter.
   * @param options The options parameters.
   */
  public listByDevCenter(
    resourceGroupName: string,
    devCenterName: string,
    options?: CurationProfilesListByDevCenterOptionalParams,
  ): PagedAsyncIterableIterator<CurationProfile> {
    const iter = this.listByDevCenterPagingAll(
      resourceGroupName,
      devCenterName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByDevCenterPagingPage(
          resourceGroupName,
          devCenterName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByDevCenterPagingPage(
    resourceGroupName: string,
    devCenterName: string,
    options?: CurationProfilesListByDevCenterOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<CurationProfile[]> {
    let result: CurationProfilesListByDevCenterResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByDevCenter(
        resourceGroupName,
        devCenterName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByDevCenterNext(
        resourceGroupName,
        devCenterName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByDevCenterPagingAll(
    resourceGroupName: string,
    devCenterName: string,
    options?: CurationProfilesListByDevCenterOptionalParams,
  ): AsyncIterableIterator<CurationProfile> {
    for await (const page of this.listByDevCenterPagingPage(
      resourceGroupName,
      devCenterName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Lists all curation profiles in the dev center
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param devCenterName The name of the devcenter.
   * @param options The options parameters.
   */
  private _listByDevCenter(
    resourceGroupName: string,
    devCenterName: string,
    options?: CurationProfilesListByDevCenterOptionalParams,
  ): Promise<CurationProfilesListByDevCenterResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, devCenterName, options },
      listByDevCenterOperationSpec,
    );
  }

  /**
   * Gets a specific curation profile.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param devCenterName The name of the devcenter.
   * @param curationProfileName The name of the curation profile.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    devCenterName: string,
    curationProfileName: string,
    options?: CurationProfilesGetOptionalParams,
  ): Promise<CurationProfilesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, devCenterName, curationProfileName, options },
      getOperationSpec,
    );
  }

  /**
   * Creates or updates an curation profile.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param devCenterName The name of the devcenter.
   * @param curationProfileName The name of the curation profile.
   * @param body Represents an curation profile.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    devCenterName: string,
    curationProfileName: string,
    body: CurationProfile,
    options?: CurationProfilesCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<CurationProfilesCreateOrUpdateResponse>,
      CurationProfilesCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<CurationProfilesCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        devCenterName,
        curationProfileName,
        body,
        options,
      },
      spec: createOrUpdateOperationSpec,
    });
    const poller = await createHttpPoller<
      CurationProfilesCreateOrUpdateResponse,
      OperationState<CurationProfilesCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Creates or updates an curation profile.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param devCenterName The name of the devcenter.
   * @param curationProfileName The name of the curation profile.
   * @param body Represents an curation profile.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    devCenterName: string,
    curationProfileName: string,
    body: CurationProfile,
    options?: CurationProfilesCreateOrUpdateOptionalParams,
  ): Promise<CurationProfilesCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      devCenterName,
      curationProfileName,
      body,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Partially updates an curation profile.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param devCenterName The name of the devcenter.
   * @param curationProfileName The name of the curation profile.
   * @param body Updatable curation profile properties.
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    devCenterName: string,
    curationProfileName: string,
    body: CurationProfileUpdate,
    options?: CurationProfilesUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<CurationProfilesUpdateResponse>,
      CurationProfilesUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<CurationProfilesUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        devCenterName,
        curationProfileName,
        body,
        options,
      },
      spec: updateOperationSpec,
    });
    const poller = await createHttpPoller<
      CurationProfilesUpdateResponse,
      OperationState<CurationProfilesUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Partially updates an curation profile.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param devCenterName The name of the devcenter.
   * @param curationProfileName The name of the curation profile.
   * @param body Updatable curation profile properties.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    devCenterName: string,
    curationProfileName: string,
    body: CurationProfileUpdate,
    options?: CurationProfilesUpdateOptionalParams,
  ): Promise<CurationProfilesUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      devCenterName,
      curationProfileName,
      body,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Deletes an curation profile.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param devCenterName The name of the devcenter.
   * @param curationProfileName The name of the curation profile.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    devCenterName: string,
    curationProfileName: string,
    options?: CurationProfilesDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<CurationProfilesDeleteResponse>,
      CurationProfilesDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<CurationProfilesDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, devCenterName, curationProfileName, options },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<
      CurationProfilesDeleteResponse,
      OperationState<CurationProfilesDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Deletes an curation profile.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param devCenterName The name of the devcenter.
   * @param curationProfileName The name of the curation profile.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    devCenterName: string,
    curationProfileName: string,
    options?: CurationProfilesDeleteOptionalParams,
  ): Promise<CurationProfilesDeleteResponse> {
    const poller = await this.beginDelete(
      resourceGroupName,
      devCenterName,
      curationProfileName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * ListByDevCenterNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param devCenterName The name of the devcenter.
   * @param nextLink The nextLink from the previous successful call to the ListByDevCenter method.
   * @param options The options parameters.
   */
  private _listByDevCenterNext(
    resourceGroupName: string,
    devCenterName: string,
    nextLink: string,
    options?: CurationProfilesListByDevCenterNextOptionalParams,
  ): Promise<CurationProfilesListByDevCenterNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, devCenterName, nextLink, options },
      listByDevCenterNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByDevCenterOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/devcenters/{devCenterName}/curationProfiles",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CurationProfileListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.devCenterName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/devcenters/{devCenterName}/curationProfiles/{curationProfileName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CurationProfile,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.devCenterName,
    Parameters.curationProfileName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/devcenters/{devCenterName}/curationProfiles/{curationProfileName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.CurationProfile,
    },
    201: {
      bodyMapper: Mappers.CurationProfile,
    },
    202: {
      bodyMapper: Mappers.CurationProfile,
    },
    204: {
      bodyMapper: Mappers.CurationProfile,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body8,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.devCenterName,
    Parameters.curationProfileName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/devcenters/{devCenterName}/curationProfiles/{curationProfileName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.CurationProfile,
    },
    201: {
      bodyMapper: Mappers.CurationProfile,
    },
    202: {
      bodyMapper: Mappers.CurationProfile,
    },
    204: {
      bodyMapper: Mappers.CurationProfile,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body9,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.devCenterName,
    Parameters.curationProfileName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/devcenters/{devCenterName}/curationProfiles/{curationProfileName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.CurationProfilesDeleteHeaders,
    },
    201: {
      headersMapper: Mappers.CurationProfilesDeleteHeaders,
    },
    202: {
      headersMapper: Mappers.CurationProfilesDeleteHeaders,
    },
    204: {
      headersMapper: Mappers.CurationProfilesDeleteHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.devCenterName,
    Parameters.curationProfileName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByDevCenterNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CurationProfileListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
    Parameters.devCenterName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
