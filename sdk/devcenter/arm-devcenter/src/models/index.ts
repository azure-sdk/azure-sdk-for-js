/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** Result of the list devcenters operation */
export interface DevCenterListResult {
  /**
   * Current page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: DevCenter[];
  /**
   * URL to get the next set of results if there are any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Properties of the devcenter. These properties can be updated after the resource has been created. */
export interface DevCenterUpdateProperties {
  /** Encryption settings to be used for server-side encryption for proprietary content (such as catalogs, logs, customizations). */
  encryption?: Encryption;
  /** The display name of the devcenter. */
  displayName?: string;
  /** Dev Center settings to be used when associating a project with a catalog. */
  projectCatalogSettings?: DevCenterProjectCatalogSettings;
  /** Network settings that will be enforced on network resources associated with the Dev Center. */
  networkSettings?: DevCenterNetworkSettings;
  /** Settings to be used in the provisioning of all Dev Boxes that belong to this dev center. */
  devBoxProvisioningSettings?: DevBoxProvisioningSettings;
}

export interface Encryption {
  /** All Customer-managed key encryption properties for the resource. */
  customerManagedKeyEncryption?: CustomerManagedKeyEncryption;
}

/** All Customer-managed key encryption properties for the resource. */
export interface CustomerManagedKeyEncryption {
  /** All identity configuration for Customer-managed key settings defining which identity should be used to auth to Key Vault. */
  keyEncryptionKeyIdentity?: CustomerManagedKeyEncryptionKeyIdentity;
  /** key encryption key Url, versioned or non-versioned. Ex: https://contosovault.vault.azure.net/keys/contosokek/562a4bb76b524a1493a6afe8e536ee78 or https://contosovault.vault.azure.net/keys/contosokek. */
  keyEncryptionKeyUrl?: string;
}

/** All identity configuration for Customer-managed key settings defining which identity should be used to auth to Key Vault. */
export interface CustomerManagedKeyEncryptionKeyIdentity {
  /** Values can be systemAssignedIdentity or userAssignedIdentity */
  identityType?: IdentityType;
  /** user assigned identity to use for accessing key encryption key Url. Ex: /subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/<resource group>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myId. Mutually exclusive with identityType systemAssignedIdentity and delegatedResourceIdentity. */
  userAssignedIdentityResourceId?: string;
  /** delegated identity to use for accessing key encryption key Url. Ex: /subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/<resource group>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myId. Mutually exclusive with identityType systemAssignedIdentity and userAssignedIdentity - internal use only. */
  delegatedIdentityClientId?: string;
}

/** Project catalog settings for project catalogs under a project associated to this dev center. */
export interface DevCenterProjectCatalogSettings {
  /** Whether project catalogs associated with projects in this dev center can be configured to sync catalog items. */
  catalogItemSyncEnableStatus?: CatalogItemSyncEnableStatus;
}

/** Network settings for the Dev Center. */
export interface DevCenterNetworkSettings {
  /** Indicates whether pools in this Dev Center can use Microsoft Hosted Networks. Defaults to Enabled if not set. */
  microsoftHostedNetworkEnableStatus?: MicrosoftHostedNetworkEnableStatus;
}

/** Provisioning settings that apply to all Dev Boxes created in this dev center */
export interface DevBoxProvisioningSettings {
  /** Whether project catalogs associated with projects in this dev center can be configured to sync catalog items. */
  installAzureMonitorAgentEnableStatus?: InstallAzureMonitorAgentEnableStatus;
}

/** Managed service identity (system assigned and/or user assigned identities) */
export interface ManagedServiceIdentity {
  /**
   * The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /** Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed). */
  type: ManagedServiceIdentityType;
  /** The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests. */
  userAssignedIdentities?: { [propertyName: string]: UserAssignedIdentity };
}

/** User assigned identity properties */
export interface UserAssignedIdentity {
  /**
   * The principal ID of the assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The client ID of the assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly clientId?: string;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export interface Resource {
  /**
   * Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Azure Resource Manager metadata containing createdBy and modifiedBy information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The timestamp of resource last modification (UTC) */
  lastModifiedAt?: Date;
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export interface ErrorResponse {
  /** The error object. */
  error?: ErrorDetail;
}

/** The error detail. */
export interface ErrorDetail {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDetail[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
}

/** Base tracked resource type for PATCH updates */
export interface TrackedResourceUpdate {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The geo-location where the resource lives */
  location?: string;
}

/** Result of the list devcenter encryption set operation */
export interface EncryptionSetListResult {
  /**
   * Current page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: DevCenterEncryptionSet[];
  /**
   * URL to get the next set of results if there are any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Properties of the devcenter encryption set. These properties can be updated after the resource has been created. */
export interface DevCenterEncryptionSetUpdateProperties {
  /** Devbox disk encryption enable or disable status. Indicates if Devbox disks encryption using DevCenter CMK is enabled or not. */
  devboxDisksEncryptionEnableStatus?: DevboxDisksEncryptionEnableStatus;
  /** Key encryption key Url, versioned or non-versioned. Ex: https://contosovault.vault.azure.net/keys/contosokek/562a4bb76b524a1493a6afe8e536ee78 or https://contosovault.vault.azure.net/keys/contosokek. */
  keyEncryptionKeyUrl?: string;
}

/** Results of the project policy list operation. */
export interface ProjectPolicyListResult {
  /**
   * Current page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: ProjectPolicy[];
  /**
   * URL to get the next set of results if there are any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Properties of an project policy. These properties can be updated after the resource has been created. */
export interface ProjectPolicyUpdateProperties {
  /** Resource policies that are a part of this project policy. */
  resourcePolicies?: ResourcePolicy[];
  /** Resources that have access to the shared resources that are a part of this project policy. */
  scopes?: string[];
}

/** A resource policy. */
export interface ResourcePolicy {
  /** Resources that are included and shared as a part of a project policy. */
  resources?: string;
  /** Optional. When specified, this expression is used to filter the resources. */
  filter?: string;
  /** Policy action to be taken on the resources. This is optional, and defaults to allow */
  action?: PolicyAction;
  /** Optional. The resource type being restricted or allowed by a project policy. Used with a given action to restrict or allow access to a resource type. */
  resourceType?: DevCenterResourceType;
}

/** The project policy properties for partial update. Properties not provided in the update request will not be changed. */
export interface ProjectPolicyUpdate {
  /** Resource policies that are a part of this project policy. */
  resourcePolicies?: ResourcePolicy[];
  /** Resources that have access to the shared resources that are a part of this project policy. */
  scopes?: string[];
}

/** Results of the project list operation. */
export interface ProjectListResult {
  /**
   * Current page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Project[];
  /**
   * URL to get the next set of results if there are any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Properties of a project. These properties can be updated after the resource has been created. */
export interface ProjectUpdateProperties {
  /** Resource Id of an associated DevCenter */
  devCenterId?: string;
  /** Description of the project. */
  description?: string;
  /** When specified, limits the maximum number of Dev Boxes a single user can create across all pools in the project. This will have no effect on existing Dev Boxes when reduced. */
  maxDevBoxesPerUser?: number;
  /** The display name of the project. */
  displayName?: string;
  /** Settings to be used when associating a project with a catalog. */
  catalogSettings?: ProjectCatalogSettings;
  /** Settings to be used for customizations. */
  customizationSettings?: ProjectCustomizationSettings;
  /** Dev Box Auto Delete settings. */
  devBoxAutoDeleteSettings?: DevBoxAutoDeleteSettings;
  /** Indicates whether Azure AI services are enabled for a project. */
  azureAiServicesSettings?: AzureAiServicesSettings;
  /** Settings to be used for serverless GPU. */
  serverlessGpuSessionsSettings?: ServerlessGpuSessionsSettings;
  /** Settings to be used for workspace storage. */
  workspaceStorageSettings?: WorkspaceStorageSettings;
}

/** Settings to be used when associating a project with a catalog. */
export interface ProjectCatalogSettings {
  /** Indicates catalog item types that can be synced. */
  catalogItemSyncTypes?: CatalogItemType[];
}

/** Settings to be used for customizations. */
export interface ProjectCustomizationSettings {
  /** The identities that can to be used in customization scenarios; e.g., to clone a repository. */
  identities?: ProjectCustomizationManagedIdentity[];
  /** Indicates whether user customizations are enabled. */
  userCustomizationsEnableStatus?: UserCustomizationsEnableStatus;
}

/** A reference to a Managed Identity that is attached to the Project. */
export interface ProjectCustomizationManagedIdentity {
  /** Values can be systemAssignedIdentity or userAssignedIdentity */
  identityType?: ProjectCustomizationIdentityType;
  /** Ex: /subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/<resource group>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myId. Mutually exclusive with identityType systemAssignedIdentity. */
  identityResourceId?: string;
}

/** Settings controlling the auto deletion of inactive dev boxes. */
export interface DevBoxAutoDeleteSettings {
  /** Indicates the delete mode for Dev Boxes within this project. */
  deleteMode?: DevBoxDeleteMode;
  /** ISO8601 duration required for the dev box to not be inactive prior to it being scheduled for deletion.  ISO8601 format PT[n]H[n]M[n]S. */
  inactiveThreshold?: string;
  /** ISO8601 duration required for the dev box to be marked for deletion prior to it being deleted. ISO8601 format PT[n]H[n]M[n]S. */
  gracePeriod?: string;
}

/** Configures Azure AI related services for the project. */
export interface AzureAiServicesSettings {
  /** The property indicates whether Azure AI services is enabled. */
  azureAiServicesMode?: AzureAiServicesMode;
}

/** Represents settings for serverless GPU access. */
export interface ServerlessGpuSessionsSettings {
  /** The property indicates whether serverless GPU access is enabled on the project. */
  serverlessGpuSessionsMode?: ServerlessGpuSessionsMode;
  /** When specified, limits the maximum number of concurrent sessions across all pools in the project. */
  maxConcurrentSessionsPerProject?: number;
}

/** Settings to be used for workspace storage. */
export interface WorkspaceStorageSettings {
  /** Indicates whether workspace storage is enabled. */
  workspaceStorageMode?: WorkspaceStorageMode;
}

/** Applicable inherited settings for a project. */
export interface InheritedSettingsForProject {
  /**
   * Dev Center settings to be used when associating a project with a catalog.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly projectCatalogSettings?: DevCenterProjectCatalogSettings;
  /**
   * Network settings that will be enforced on this project.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkSettings?: ProjectNetworkSettings;
}

/** Network settings for the project. */
export interface ProjectNetworkSettings {
  /**
   * Indicates whether pools in this Dev Center can use Microsoft Hosted Networks. Defaults to Enabled if not set.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly microsoftHostedNetworkEnableStatus?: MicrosoftHostedNetworkEnableStatus;
}

/** Results of the Attached Networks list operation. */
export interface AttachedNetworkListResult {
  /**
   * Current page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: AttachedNetworkConnection[];
  /**
   * URL to get the next set of results if there are any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Results of the catalog list operation. */
export interface CatalogListResult {
  /**
   * Current page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Catalog[];
  /**
   * URL to get the next set of results if there are any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Stats of the synchronization. */
export interface SyncStats {
  /**
   * Count of catalog items added during synchronization.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly added?: number;
  /**
   * Count of catalog items updated during synchronization.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly updated?: number;
  /**
   * Count of catalog items that were unchanged during synchronization.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly unchanged?: number;
  /**
   * Count of catalog items removed during synchronization.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly removed?: number;
  /**
   * Count of catalog items that had validation errors during synchronization.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly validationErrors?: number;
  /**
   * Count of synchronization errors that occured during synchronization.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly synchronizationErrors?: number;
  /** Indicates catalog item types that were synced. */
  syncedCatalogItemTypes?: CatalogItemType[];
}

/** Properties of a catalog. These properties can be updated after the resource has been created. */
export interface CatalogUpdateProperties {
  /** Properties for a GitHub catalog type. */
  gitHub?: GitCatalog;
  /** Properties for an Azure DevOps catalog type. */
  adoGit?: GitCatalog;
  /** Indicates the type of sync that is configured for the catalog. */
  syncType?: CatalogSyncType;
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
}

/** Properties for a Git repository catalog. */
export interface GitCatalog {
  /** Git URI. */
  uri?: string;
  /** Git branch. */
  branch?: string;
  /** A reference to the Key Vault secret containing a security token to authenticate to a Git repository. */
  secretIdentifier?: string;
  /** The folder where the catalog items can be found inside the repository. */
  path?: string;
}

/** The catalog's properties for partial update. Properties not provided in the update request will not be changed. */
export interface CatalogUpdate {
  /** Properties for a GitHub catalog type. */
  gitHub?: GitCatalog;
  /** Properties for an Azure DevOps catalog type. */
  adoGit?: GitCatalog;
  /** Indicates the type of sync that is configured for the catalog. */
  syncType?: CatalogSyncType;
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
}

/** Results of the environment definition list operation. */
export interface EnvironmentDefinitionListResult {
  /**
   * Current page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: EnvironmentDefinition[];
  /**
   * URL to get the next set of results if there are any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Properties of an Environment Definition parameter */
export interface EnvironmentDefinitionParameter {
  /**
   * Unique ID of the parameter
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Display name of the parameter
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Description of the parameter
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
  /**
   * A string of one of the basic JSON types (number, integer, array, object, boolean, string)
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: ParameterType;
  /**
   * Whether or not this parameter is read-only.  If true, default should have a value.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly readOnly?: boolean;
  /**
   * Whether or not this parameter is required
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly required?: boolean;
}

/** List of validator error details. Populated when changes are made to the resource or its dependent resources that impact the validity of the Catalog resource. */
export interface CatalogResourceValidationErrorDetails {
  /**
   * Errors associated with resources synchronized from the catalog.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly errors?: CatalogErrorDetails[];
}

/** Catalog error details */
export interface CatalogErrorDetails {
  /** An identifier for the error. */
  code?: string;
  /** A message describing the error. */
  message?: string;
}

/** Synchronization error details. */
export interface SyncErrorDetails {
  /**
   * Error information for the overall synchronization operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operationError?: CatalogErrorDetails;
  /**
   * Catalog items that have conflicting names.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly conflicts?: CatalogConflictError[];
  /**
   * Errors that occured during synchronization.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly errors?: CatalogSyncError[];
}

/** An individual conflict error. */
export interface CatalogConflictError {
  /**
   * The path of the file that has a conflicting name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly path?: string;
  /**
   * Name of the conflicting catalog item.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
}

/** An individual synchronization error. */
export interface CatalogSyncError {
  /**
   * The path of the file the error is associated with.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly path?: string;
  /**
   * Errors associated with the file.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly errorDetails?: CatalogErrorDetails[];
}

/** Results of the gallery list operation. */
export interface GalleryListResult {
  /**
   * Current page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Gallery[];
  /**
   * URL to get the next set of results if there are any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Results of the image list operation. */
export interface ImageListResult {
  /**
   * Current page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Image[];
  /**
   * URL to get the next set of results if there are any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Properties for a recommended machine configuration. */
export interface RecommendedMachineConfiguration {
  /**
   * Recommended memory range.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly memory?: ResourceRange;
  /**
   * Recommended vCPU range.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly vCPUs?: ResourceRange;
}

/** Properties for a range of values. */
export interface ResourceRange {
  /**
   * Minimum value.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly min?: number;
  /**
   * Maximum value.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly max?: number;
}

/** Results of the image version list operation. */
export interface ImageVersionListResult {
  /**
   * Current page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: ImageVersion[];
  /**
   * URL to get the next set of results if there are any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Results of the Microsoft.DevCenter SKU list operation. */
export interface SkuListResult {
  /**
   * Current page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: DevCenterSku[];
  /**
   * URL to get the next set of results if there are any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** A name/value pair to describe a capability. */
export interface Capability {
  /**
   * Name of the capability.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Value of the capability.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: string;
}

/** The resource model definition representing SKU */
export interface Sku {
  /** The name of the SKU. E.g. P3. It is typically a letter+number code */
  name: string;
  /** This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT. */
  tier?: SkuTier;
  /** The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. */
  size?: string;
  /** If the service has different generations of hardware, for the same SKU, then that can be captured here. */
  family?: string;
  /** If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted. */
  capacity?: number;
}

/** Result of the environment type list operation. */
export interface EnvironmentTypeListResult {
  /**
   * Current page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: EnvironmentType[];
  /**
   * URL to get the next set of results if there are any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Properties of an environment type. These properties can be updated after the resource has been created. */
export interface EnvironmentTypeUpdateProperties {
  /** The display name of the environment type. */
  displayName?: string;
}

/** The environment type for partial update. Properties not provided in the update request will not be changed. */
export interface EnvironmentTypeUpdate {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The display name of the environment type. */
  displayName?: string;
}

/** Result of the allowed environment type list operation. */
export interface AllowedEnvironmentTypeListResult {
  /**
   * Current page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: AllowedEnvironmentType[];
  /**
   * URL to get the next set of results if there are any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Result of the project environment type list operation. */
export interface ProjectEnvironmentTypeListResult {
  /**
   * Current page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: ProjectEnvironmentType[];
  /**
   * URL to get the next set of results if there are any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Properties of a project environment type. These properties can be updated after the resource has been created. */
export interface ProjectEnvironmentTypeUpdateProperties {
  /** Id of a subscription that the environment type will be mapped to. The environment's resources will be deployed into this subscription. */
  deploymentTargetId?: string;
  /** The display name of the project environment type. */
  displayName?: string;
  /** Defines whether this Environment Type can be used in this Project. */
  status?: EnvironmentTypeEnableStatus;
  /** The role definition assigned to the environment creator on backing resources. */
  creatorRoleAssignment?: ProjectEnvironmentTypeUpdatePropertiesCreatorRoleAssignment;
  /** Role Assignments created on environment backing resources. This is a mapping from a user object ID to an object of role definition IDs. */
  userRoleAssignments?: { [propertyName: string]: UserRoleAssignmentValue };
}

/** The role definition assigned to the environment creator on backing resources. */
export interface ProjectEnvironmentTypeUpdatePropertiesCreatorRoleAssignment {
  /** A map of roles to assign to the environment creator. */
  roles?: { [propertyName: string]: EnvironmentRole };
}

/** A role that can be assigned to a user. */
export interface EnvironmentRole {
  /**
   * The common name of the Role Assignment. This is a descriptive name such as 'AcrPush'.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly roleName?: string;
  /**
   * This is a description of the Role Assignment.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
}

/** Mapping of user object ID to role assignments. */
export interface UserRoleAssignmentValue {
  /** A map of roles to assign to the parent user. */
  roles?: { [propertyName: string]: EnvironmentRole };
}

/** The project environment type for partial update. Properties not provided in the update request will not be changed. */
export interface ProjectEnvironmentTypeUpdate {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** Managed identity properties */
  identity?: ManagedServiceIdentity;
  /** Id of a subscription that the environment type will be mapped to. The environment's resources will be deployed into this subscription. */
  deploymentTargetId?: string;
  /** The display name of the project environment type. */
  displayName?: string;
  /** Defines whether this Environment Type can be used in this Project. */
  status?: EnvironmentTypeEnableStatus;
  /** The role definition assigned to the environment creator on backing resources. */
  creatorRoleAssignment?: ProjectEnvironmentTypeUpdatePropertiesCreatorRoleAssignment;
  /** Role Assignments created on environment backing resources. This is a mapping from a user object ID to an object of role definition IDs. */
  userRoleAssignments?: { [propertyName: string]: UserRoleAssignmentValue };
}

/** Results of the Dev Box definition list operation. */
export interface DevBoxDefinitionListResult {
  /**
   * Current page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: DevBoxDefinition[];
  /**
   * URL to get the next set of results if there are any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Image validation error details */
export interface ImageValidationErrorDetails {
  /** An identifier for the error. */
  code?: string;
  /** A message describing the error. */
  message?: string;
}

/** Image reference information */
export interface ImageReference {
  /** Image ID, or Image version ID. When Image ID is provided, its latest version will be used. */
  id?: string;
  /**
   * The actual version of the image after use. When id references a gallery image latest version, this will indicate the actual version in use.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly exactVersion?: string;
}

/** Properties of a Dev Box definition. These properties can be updated after the resource has been created. */
export interface DevBoxDefinitionUpdateProperties {
  /** Image reference information. */
  imageReference?: ImageReference;
  /** The SKU for Dev Boxes created using this definition. */
  sku?: Sku;
  /** The storage type used for the Operating System disk of Dev Boxes created using this definition. */
  osStorageType?: string;
  /** Indicates whether Dev Boxes created with this definition are capable of hibernation. Not all images are capable of supporting hibernation. To find out more see https://aka.ms/devbox/hibernate */
  hibernateSupport?: HibernateSupport;
}

/** A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of results. */
export interface OperationListResult {
  /**
   * List of operations supported by the resource provider
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Operation[];
  /**
   * URL to get the next set of operation list results (if there are any).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Details of a REST API operation, returned from the Resource Provider Operations API */
export interface Operation {
  /**
   * The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for ARM/control-plane operations.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isDataAction?: boolean;
  /** Localized display information for this particular operation. */
  display?: OperationDisplay;
  /**
   * The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is "user,system"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly origin?: Origin;
  /**
   * Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly actionType?: ActionType;
}

/** Localized display information for this particular operation. */
export interface OperationDisplay {
  /**
   * The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft Compute".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provider?: string;
  /**
   * The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job Schedule Collections".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resource?: string;
  /**
   * The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operation?: string;
  /**
   * The short, localized friendly description of the operation; suitable for tool tips and detailed views.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
}

/** The current status of an async operation. */
export interface OperationStatusResult {
  /** Fully qualified ID for the async operation. */
  id?: string;
  /**
   * Fully qualified ID of the resource against which the original async operation was started.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resourceId?: string;
  /** Name of the async operation. */
  name?: string;
  /** Operation status. */
  status: string;
  /** Percent of the operation that is complete. */
  percentComplete?: number;
  /** The start time of the operation. */
  startTime?: Date;
  /** The end time of the operation. */
  endTime?: Date;
  /** The operations list. */
  operations?: OperationStatusResult[];
  /** If present, details of the operation error. */
  error?: ErrorDetail;
}

/** List of Core Usages. */
export interface ListUsagesResult {
  /**
   * The array page of Usages.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Usage[];
  /**
   * The link to get the next page of Usage result.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** The core usage details. */
export interface Usage {
  /** The current usage. */
  currentValue?: number;
  /** The limit integer. */
  limit?: number;
  /** The unit details. */
  unit?: UsageUnit;
  /** The name. */
  name?: UsageName;
  /** The fully qualified arm resource id. */
  id?: string;
}

/** The Usage Names. */
export interface UsageName {
  /** The localized name of the resource. */
  localizedValue?: string;
  /** The name of the resource. */
  value?: string;
}

/** The check availability request body. */
export interface CheckNameAvailabilityRequest {
  /** The name of the resource for which availability needs to be checked. */
  name?: string;
  /** The resource type. */
  type?: string;
}

/** The check availability result. */
export interface CheckNameAvailabilityResponse {
  /** Indicates if the resource name is available. */
  nameAvailable?: boolean;
  /** The reason why the given name is not available. */
  reason?: CheckNameAvailabilityReason;
  /** Detailed reason why the given name is available. */
  message?: string;
}

/** The scoped name check availability request body. */
export interface CheckScopedNameAvailabilityRequest {
  /** The name of the resource for which availability needs to be checked. */
  name?: string;
  /** The resource type. */
  type?: string;
  /** The resource id to scope the name check. */
  scope?: string;
}

/** Results of the Task list operation. */
export interface CustomizationTaskListResult {
  /**
   * Current page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: CustomizationTask[];
  /**
   * URL to get the next set of results if there are any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Input for a Task. */
export interface CustomizationTaskInput {
  /**
   * Description of the input.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
  /**
   * Type of the input.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: CustomizationTaskInputType;
  /**
   * Whether or not the input is required.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly required?: boolean;
}

/** Results of the Image Definition list operation. */
export interface ImageDefinitionListResult {
  /**
   * Current page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: ImageDefinition[];
  /**
   * URL to get the next set of results if there are any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Details about the latest build. */
export interface LatestImageBuild {
  /**
   * Identifier of a build.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Start time of the task group.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startTime?: Date;
  /**
   * End time of the task group.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endTime?: Date;
  /**
   * The state of an Image Definition Build.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: ImageDefinitionBuildStatus;
}

/** A customization task to run. */
export interface CustomizationTaskInstance {
  /** Name of the task. */
  name: string;
  /** Parameters for the task. */
  parameters?: DefinitionParametersItem[];
  /** Display name to help differentiate multiple instances of the same task. */
  displayName?: string;
  /** Timeout, in seconds. Overrides any timeout provided on the task definition. */
  timeoutInSeconds?: number;
  /** An expression that must evaluate to true in order for the task to run. */
  condition?: string;
}

export interface DefinitionParametersItem {
  name: string;
  value: string;
}

/** A reference to an Image Definition. */
export interface ImageDefinitionReference {
  /** Name of the referenced Image Definition. */
  imageDefinition: string;
  /** Parameters for the referenced Image Definition. */
  parameters?: DefinitionParametersItem[];
}

/** Results of the Image Definition Build list operation. */
export interface ImageDefinitionBuildListResult {
  /**
   * Current page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: ImageDefinitionBuild[];
  /**
   * URL to get the next set of results if there are any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Image creation error details */
export interface ImageCreationErrorDetails {
  /** An identifier for the error. */
  code?: string;
  /** A message describing the error. */
  message?: string;
}

/** A task group executed during the image definition build. */
export interface ImageDefinitionBuildTaskGroup {
  /**
   * The name of the task group.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The status of the task group.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: ImageDefinitionBuildStatus;
  /**
   * Start time of the task group.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startTime?: Date;
  /**
   * End time of the task group.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endTime?: Date;
  /**
   * The list of tasks executed during the task group.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tasks?: ImageDefinitionBuildTask[];
}

/** A task executed during the image definition build. */
export interface ImageDefinitionBuildTask {
  /** The name of the task. */
  name?: string;
  /** Parameters for the task. */
  parameters?: ImageDefinitionBuildTaskParametersItem[];
  /** Display name to help differentiate multiple instances of the same task. */
  displayName?: string;
  /**
   * ID of the task instance.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Start time of the task.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startTime?: Date;
  /**
   * End time of the task.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endTime?: Date;
  /**
   * The status of the task.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: ImageDefinitionBuildStatus;
  /**
   * The URI for retrieving logs for the task execution.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly logUri?: string;
}

export interface ImageDefinitionBuildTaskParametersItem {
  key: string;
  value: string;
}

/** Results of the machine pool list operation. */
export interface PoolListResult {
  /**
   * Current page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Pool[];
  /**
   * URL to get the next set of results if there are any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Pool health status detail. */
export interface HealthStatusDetail {
  /**
   * An identifier for the issue.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * A message describing the issue, intended to be suitable for display in a user interface
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
}

/** Properties of a Pool. These properties can be updated after the resource has been created. */
export interface PoolUpdateProperties {
  /** Indicates if the pool is created from an existing Dev Box Definition or if one is provided directly. */
  devBoxDefinitionType?: PoolDevBoxDefinitionType;
  /** Name of a Dev Box definition in parent Project of this Pool. Will be ignored if devBoxDefinitionType is Value. */
  devBoxDefinitionName?: string;
  /** A definition of the machines that are created from this Pool. Will be ignored if devBoxDefinitionType is Reference or not provided. */
  devBoxDefinition?: PoolDevBoxDefinition;
  /** Name of a Network Connection in parent Project of this Pool */
  networkConnectionName?: string;
  /** Specifies the license type indicating the caller has already acquired licenses for the Dev Boxes that will be created. */
  licenseType?: LicenseType;
  /** Indicates whether owners of Dev Boxes in this pool are added as local administrators on the Dev Box. */
  localAdministrator?: LocalAdminStatus;
  /** Stop on disconnect configuration settings for Dev Boxes created in this pool. */
  stopOnDisconnect?: StopOnDisconnectConfiguration;
  /** Stop on no connect configuration settings for Dev Boxes created in this pool. */
  stopOnNoConnect?: StopOnNoConnectConfiguration;
  /** Indicates whether Dev Boxes in this pool are created with single sign on enabled. The also requires that single sign on be enabled on the tenant. */
  singleSignOnStatus?: SingleSignOnStatus;
  /** The display name of the pool. */
  displayName?: string;
  /** Indicates whether the pool uses a Virtual Network managed by Microsoft or a customer provided network. */
  virtualNetworkType?: VirtualNetworkType;
  /** The regions of the managed virtual network (required when managedNetworkType is Managed). */
  managedVirtualNetworkRegions?: string[];
  /** Active hours configuration settings for Dev Boxes created in this pool. */
  activeHoursConfiguration?: ActiveHoursConfiguration;
  /** Indicates whether Dev Box Tunnel is enabled for a the pool. */
  devBoxTunnelEnableStatus?: DevBoxTunnelEnableStatus;
}

/** Represents a definition for a Developer Machine. */
export interface PoolDevBoxDefinition {
  /** Image reference information. */
  imageReference?: ImageReference;
  /** The SKU for Dev Boxes created from the Pool. */
  sku?: Sku;
  /**
   * Image reference information for the currently active image (only populated during updates).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly activeImageReference?: ImageReference;
}

/** Stop on disconnect configuration settings for Dev Boxes created in this pool. */
export interface StopOnDisconnectConfiguration {
  /** Whether the feature to stop the Dev Box on disconnect once the grace period has lapsed is enabled. */
  status?: StopOnDisconnectEnableStatus;
  /** The specified time in minutes to wait before stopping a Dev Box once disconnect is detected. */
  gracePeriodMinutes?: number;
}

/** Stop on no connect configuration settings for Dev Boxes created in this pool. */
export interface StopOnNoConnectConfiguration {
  /** Enables the feature to stop a started Dev Box when it has not been connected to, once the grace period has lapsed. */
  status?: StopOnNoConnectEnableStatus;
  /** The specified time in minutes to wait before stopping a Dev Box if no connection is made. */
  gracePeriodMinutes?: number;
}

/** Active hours configuration. */
export interface ActiveHoursConfiguration {
  /** Enables or disables whether the Dev Box should be kept awake during active hours. */
  keepAwakeEnableStatus?: KeepAwakeEnableStatus;
  /** Enables or disables whether the Dev Box should be automatically started at commencement of active hours. */
  autoStartEnableStatus?: AutoStartEnableStatus;
  /** The default IANA timezone id of the active hours. */
  defaultTimeZone?: string;
  /** The default start time of the active hours. */
  defaultStartTimeHour?: number;
  /** The default end time of the active hours */
  defaultEndTimeHour?: number;
}

/** Result of the schedule list operation. */
export interface ScheduleListResult {
  /**
   * Current page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Schedule[];
  /**
   * URL to get the next set of results if there are any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** The schedule properties for partial update. Properties not provided in the update request will not be changed. */
export interface ScheduleUpdate {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The geo-location where the resource lives */
  location?: string;
  /** Supported type this scheduled task represents. */
  type?: ScheduledType;
  /** The frequency of this scheduled task. */
  frequency?: ScheduledFrequency;
  /** The target time to trigger the action. The format is HH:MM. */
  time?: string;
  /** The IANA timezone id at which the schedule should execute. */
  timeZone?: string;
  /** Indicates whether or not this scheduled task is enabled. */
  state?: ScheduleEnableStatus;
}

/** Result of the network connection list operation. */
export interface NetworkConnectionListResult {
  /**
   * Current page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: NetworkConnection[];
  /**
   * URL to get the next set of results if there are any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Properties of network connection. These properties can be updated after the resource has been created. */
export interface NetworkConnectionUpdateProperties {
  /** The subnet to attach Virtual Machines to */
  subnetId?: string;
  /** Active Directory domain name */
  domainName?: string;
  /** Active Directory domain Organization Unit (OU) */
  organizationUnit?: string;
  /** The username of an Active Directory account (user or service account) that has permissions to create computer objects in Active Directory. Required format: admin@contoso.com. */
  domainUsername?: string;
  /** The password for the account used to join domain */
  domainPassword?: string;
}

/** Result of the network health check list operation. */
export interface HealthCheckStatusDetailsListResult {
  /**
   * Current page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: HealthCheckStatusDetails[];
  /**
   * URL to get the next set of results if there are any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** An individual health check item */
export interface HealthCheck {
  /**
   * The status of the health check item.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: HealthCheckStatus;
  /**
   * The display name of this health check item.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly displayName?: string;
  /**
   * Start time of health check item.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startDateTime?: Date;
  /**
   * End time of the health check item.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endDateTime?: Date;
  /**
   * The type of error that occurred during this health check.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly errorType?: string;
  /**
   * The recommended action to fix the corresponding error.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly recommendedAction?: string;
  /**
   * Additional details about the health check or the recommended action.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalDetails?: string;
}

/** Values returned by the List operation. */
export interface OutboundEnvironmentEndpointCollection {
  /**
   * The collection of outbound network dependency endpoints returned by the listing operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: OutboundEnvironmentEndpoint[];
  /** The continuation token. */
  nextLink?: string;
}

/** A collection of related endpoints from the same service for which the agent requires outbound access. */
export interface OutboundEnvironmentEndpoint {
  /**
   * The type of service that the agent connects to.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly category?: string;
  /**
   * The endpoints for this service for which the agent requires outbound access.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endpoints?: EndpointDependency[];
}

/** A domain name and connection details used to access a dependency. */
export interface EndpointDependency {
  /**
   * The domain name of the dependency. Domain names may be fully qualified or may contain a * wildcard.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly domainName?: string;
  /**
   * Human-readable supplemental information about the dependency and when it is applicable.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
  /**
   * The list of connection details for this endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endpointDetails?: EndpointDetail[];
}

/** Details about the connection between the Batch service and the endpoint. */
export interface EndpointDetail {
  /**
   * The port an endpoint is connected to.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly port?: number;
}

/** Properties of the devcenter. */
export interface DevCenterProperties extends DevCenterUpdateProperties {
  /**
   * The provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The URI of the Dev Center.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly devCenterUri?: string;
}

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export interface TrackedResource extends Resource {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The geo-location where the resource lives */
  location: string;
}

/** Represents an project policy resource. */
export interface ProjectPolicy extends Resource {
  /** Resource policies that are a part of this project policy. */
  resourcePolicies?: ResourcePolicy[];
  /** Resources that have access to the shared resources that are a part of this project policy. */
  scopes?: string[];
  /**
   * The provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** Represents an attached NetworkConnection. */
export interface AttachedNetworkConnection extends Resource {
  /**
   * The provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** The resource ID of the NetworkConnection you want to attach. */
  networkConnectionId?: string;
  /**
   * The geo-location where the NetworkConnection resource specified in 'networkConnectionResourceId' property lives.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkConnectionLocation?: string;
  /**
   * Health check status values
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly healthCheckStatus?: HealthCheckStatus;
  /**
   * AAD Join type of the network. This is populated based on the referenced Network Connection.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly domainJoinType?: DomainJoinType;
}

/** Represents a catalog. */
export interface Catalog extends Resource {
  /** Properties for a GitHub catalog type. */
  gitHub?: GitCatalog;
  /** Properties for an Azure DevOps catalog type. */
  adoGit?: GitCatalog;
  /** Indicates the type of sync that is configured for the catalog. */
  syncType?: CatalogSyncType;
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /**
   * The provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The synchronization state of the catalog.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly syncState?: CatalogSyncState;
  /**
   * Stats of the latest synchronization.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastSyncStats?: SyncStats;
  /**
   * The connection state of the catalog.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly connectionState?: CatalogConnectionState;
  /**
   * When the catalog was last connected.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastConnectionTime?: Date;
  /**
   * When the catalog was last synced.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastSyncTime?: Date;
}

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export interface ProxyResource extends Resource {}

/** Represents a gallery. */
export interface Gallery extends Resource {
  /**
   * The provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** The resource ID of the backing Azure Compute Gallery. */
  galleryResourceId?: string;
}

/** Represents an environment type. */
export interface EnvironmentType extends Resource {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The display name of the environment type. */
  displayName?: string;
  /**
   * The provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** Represents an allowed environment type. */
export interface AllowedEnvironmentType extends Resource {
  /**
   * The provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The display name of the allowed environment type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly displayName?: string;
}

/** Represents an environment type. */
export interface ProjectEnvironmentType extends Resource {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** Managed identity properties */
  identity?: ManagedServiceIdentity;
  /** The geo-location for the environment type */
  location?: string;
  /** Id of a subscription that the environment type will be mapped to. The environment's resources will be deployed into this subscription. */
  deploymentTargetId?: string;
  /** The display name of the project environment type. */
  displayName?: string;
  /** Defines whether this Environment Type can be used in this Project. */
  status?: EnvironmentTypeEnableStatus;
  /** The role definition assigned to the environment creator on backing resources. */
  creatorRoleAssignment?: ProjectEnvironmentTypeUpdatePropertiesCreatorRoleAssignment;
  /** Role Assignments created on environment backing resources. This is a mapping from a user object ID to an object of role definition IDs. */
  userRoleAssignments?: { [propertyName: string]: UserRoleAssignmentValue };
  /**
   * The provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The number of environments of this type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly environmentCount?: number;
}

/** Represents a Schedule to execute a task. */
export interface Schedule extends Resource {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The geo-location where the resource lives */
  location?: string;
  /** Supported type this scheduled task represents. */
  typePropertiesType?: ScheduledType;
  /** The frequency of this scheduled task. */
  frequency?: ScheduledFrequency;
  /** The target time to trigger the action. The format is HH:MM. */
  time?: string;
  /** The IANA timezone id at which the schedule should execute. */
  timeZone?: string;
  /** Indicates whether or not this scheduled task is enabled. */
  state?: ScheduleEnableStatus;
  /**
   * The provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** Health Check details. */
export interface HealthCheckStatusDetails extends Resource {
  /**
   * Start time of last execution of the health checks.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startDateTime?: Date;
  /**
   * End time of last execution of the health checks.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endDateTime?: Date;
  /**
   * Details for each health check item.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly healthChecks?: HealthCheck[];
}

/** The devcenter resource for partial updates. Properties not provided in the update request will not be changed. */
export interface DevCenterUpdate extends TrackedResourceUpdate {
  /** Managed identity properties */
  identity?: ManagedServiceIdentity;
  /** Encryption settings to be used for server-side encryption for proprietary content (such as catalogs, logs, customizations). */
  encryption?: Encryption;
  /** The display name of the devcenter. */
  displayName?: string;
  /** Dev Center settings to be used when associating a project with a catalog. */
  projectCatalogSettings?: DevCenterProjectCatalogSettings;
  /** Network settings that will be enforced on network resources associated with the Dev Center. */
  networkSettings?: DevCenterNetworkSettings;
  /** Settings to be used in the provisioning of all Dev Boxes that belong to this dev center. */
  devBoxProvisioningSettings?: DevBoxProvisioningSettings;
}

/** The devcenter encryption set resource for partial updates. Properties not provided in the update request will not be changed. */
export interface EncryptionSetUpdate extends TrackedResourceUpdate {
  /** Managed identity properties */
  identity?: ManagedServiceIdentity;
  /** Devbox disk encryption enable or disable status. Indicates if Devbox disks encryption using DevCenter CMK is enabled or not. */
  devboxDisksEncryptionEnableStatus?: DevboxDisksEncryptionEnableStatus;
  /** Key encryption key Url, versioned or non-versioned. Ex: https://contosovault.vault.azure.net/keys/contosokek/562a4bb76b524a1493a6afe8e536ee78 or https://contosovault.vault.azure.net/keys/contosokek. */
  keyEncryptionKeyUrl?: string;
}

/** The project properties for partial update. Properties not provided in the update request will not be changed. */
export interface ProjectUpdate extends TrackedResourceUpdate {
  /** Managed identity properties */
  identity?: ManagedServiceIdentity;
  /** Resource Id of an associated DevCenter */
  devCenterId?: string;
  /** Description of the project. */
  description?: string;
  /** When specified, limits the maximum number of Dev Boxes a single user can create across all pools in the project. This will have no effect on existing Dev Boxes when reduced. */
  maxDevBoxesPerUser?: number;
  /** The display name of the project. */
  displayName?: string;
  /** Settings to be used when associating a project with a catalog. */
  catalogSettings?: ProjectCatalogSettings;
  /** Settings to be used for customizations. */
  customizationSettings?: ProjectCustomizationSettings;
  /** Dev Box Auto Delete settings. */
  devBoxAutoDeleteSettings?: DevBoxAutoDeleteSettings;
  /** Indicates whether Azure AI services are enabled for a project. */
  azureAiServicesSettings?: AzureAiServicesSettings;
  /** Settings to be used for serverless GPU. */
  serverlessGpuSessionsSettings?: ServerlessGpuSessionsSettings;
  /** Settings to be used for workspace storage. */
  workspaceStorageSettings?: WorkspaceStorageSettings;
}

/** Partial update of a Dev Box definition resource. */
export interface DevBoxDefinitionUpdate extends TrackedResourceUpdate {
  /** Image reference information. */
  imageReference?: ImageReference;
  /** The SKU for Dev Boxes created using this definition. */
  sku?: Sku;
  /** The storage type used for the Operating System disk of Dev Boxes created using this definition. */
  osStorageType?: string;
  /** Indicates whether Dev Boxes created with this definition are capable of hibernation. Not all images are capable of supporting hibernation. To find out more see https://aka.ms/devbox/hibernate */
  hibernateSupport?: HibernateSupport;
}

/** The pool properties for partial update. Properties not provided in the update request will not be changed. */
export interface PoolUpdate extends TrackedResourceUpdate {
  /** Indicates if the pool is created from an existing Dev Box Definition or if one is provided directly. */
  devBoxDefinitionType?: PoolDevBoxDefinitionType;
  /** Name of a Dev Box definition in parent Project of this Pool. Will be ignored if devBoxDefinitionType is Value. */
  devBoxDefinitionName?: string;
  /** A definition of the machines that are created from this Pool. Will be ignored if devBoxDefinitionType is Reference or not provided. */
  devBoxDefinition?: PoolDevBoxDefinition;
  /** Name of a Network Connection in parent Project of this Pool */
  networkConnectionName?: string;
  /** Specifies the license type indicating the caller has already acquired licenses for the Dev Boxes that will be created. */
  licenseType?: LicenseType;
  /** Indicates whether owners of Dev Boxes in this pool are added as local administrators on the Dev Box. */
  localAdministrator?: LocalAdminStatus;
  /** Stop on disconnect configuration settings for Dev Boxes created in this pool. */
  stopOnDisconnect?: StopOnDisconnectConfiguration;
  /** Stop on no connect configuration settings for Dev Boxes created in this pool. */
  stopOnNoConnect?: StopOnNoConnectConfiguration;
  /** Indicates whether Dev Boxes in this pool are created with single sign on enabled. The also requires that single sign on be enabled on the tenant. */
  singleSignOnStatus?: SingleSignOnStatus;
  /** The display name of the pool. */
  displayName?: string;
  /** Indicates whether the pool uses a Virtual Network managed by Microsoft or a customer provided network. */
  virtualNetworkType?: VirtualNetworkType;
  /** The regions of the managed virtual network (required when managedNetworkType is Managed). */
  managedVirtualNetworkRegions?: string[];
  /** Active hours configuration settings for Dev Boxes created in this pool. */
  activeHoursConfiguration?: ActiveHoursConfiguration;
  /** Indicates whether Dev Box Tunnel is enabled for a the pool. */
  devBoxTunnelEnableStatus?: DevBoxTunnelEnableStatus;
}

/** Updatable properties of a Schedule. */
export interface ScheduleUpdateProperties extends TrackedResourceUpdate {
  /** Supported type this scheduled task represents. */
  type?: ScheduledType;
  /** The frequency of this scheduled task. */
  frequency?: ScheduledFrequency;
  /** The target time to trigger the action. The format is HH:MM. */
  time?: string;
  /** The IANA timezone id at which the schedule should execute. */
  timeZone?: string;
  /** Indicates whether or not this scheduled task is enabled. */
  state?: ScheduleEnableStatus;
}

/** The network connection properties for partial update. Properties not provided in the update request will not be changed. */
export interface NetworkConnectionUpdate extends TrackedResourceUpdate {
  /** The subnet to attach Virtual Machines to */
  subnetId?: string;
  /** Active Directory domain name */
  domainName?: string;
  /** Active Directory domain Organization Unit (OU) */
  organizationUnit?: string;
  /** The username of an Active Directory account (user or service account) that has permissions to create computer objects in Active Directory. Required format: admin@contoso.com. */
  domainUsername?: string;
  /** The password for the account used to join domain */
  domainPassword?: string;
}

/** Properties of the devcenter encryption set. */
export interface DevCenterEncryptionSetProperties
  extends DevCenterEncryptionSetUpdateProperties {
  /**
   * The provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** Properties of an project policy. */
export interface ProjectPolicyProperties extends ProjectPolicyUpdateProperties {
  /**
   * The provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** Properties of a project. */
export interface ProjectProperties extends ProjectUpdateProperties {
  /**
   * The provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The URI of the Dev Center resource this project is associated with.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly devCenterUri?: string;
}

/** Properties of a catalog. */
export interface CatalogProperties extends CatalogUpdateProperties {
  /**
   * The provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The synchronization state of the catalog.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly syncState?: CatalogSyncState;
  /**
   * Stats of the latest synchronization.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastSyncStats?: SyncStats;
  /**
   * The connection state of the catalog.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly connectionState?: CatalogConnectionState;
  /**
   * When the catalog was last connected.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastConnectionTime?: Date;
  /**
   * When the catalog was last synced.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastSyncTime?: Date;
}

/** The resource model definition representing SKU for DevCenter resources */
export interface DevCenterSku extends Sku {
  /**
   * The name of the resource type
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resourceType?: string;
  /**
   * SKU supported locations.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly locations?: string[];
  /**
   * Collection of name/value pairs to describe the SKU capabilities.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly capabilities?: Capability[];
}

/** Properties of an environment type. */
export interface EnvironmentTypeProperties
  extends EnvironmentTypeUpdateProperties {
  /**
   * The provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** Properties of a project environment type. */
export interface ProjectEnvironmentTypeProperties
  extends ProjectEnvironmentTypeUpdateProperties {
  /**
   * The provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The number of environments of this type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly environmentCount?: number;
}

/** Properties of a Dev Box definition. */
export interface DevBoxDefinitionProperties
  extends DevBoxDefinitionUpdateProperties {
  /**
   * The provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Validation status of the configured image.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly imageValidationStatus?: ImageValidationStatus;
  /**
   * Details for image validator error. Populated when the image validation is not successful.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly imageValidationErrorDetails?: ImageValidationErrorDetails;
  /**
   * Validation status for the Dev Box Definition.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly validationStatus?: CatalogResourceValidationStatus;
  /**
   * Image reference information for the currently active image (only populated during updates).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly activeImageReference?: ImageReference;
}

/** The current status of an async operation */
export interface OperationStatus extends OperationStatusResult {
  /**
   * Custom operation properties, populated only for a successful operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly properties?: Record<string, unknown>;
}

/** Properties of a Pool */
export interface PoolProperties extends PoolUpdateProperties {
  /**
   * Overall health status of the Pool. Indicates whether or not the Pool is available to create Dev Boxes.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly healthStatus?: HealthStatus;
  /**
   * Details on the Pool health status to help diagnose issues. This is only populated when the pool status indicates the pool is in a non-healthy state
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly healthStatusDetails?: HealthStatusDetail[];
  /**
   * Indicates the number of provisioned Dev Boxes in this pool.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly devBoxCount?: number;
  /**
   * The provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** Network properties */
export interface NetworkProperties extends NetworkConnectionUpdateProperties {
  /**
   * The provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Overall health status of the network connection. Health checks are run on creation, update, and periodically to validate the network connection.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly healthCheckStatus?: HealthCheckStatus;
  /** The name for resource group where NICs will be placed. */
  networkingResourceGroupName?: string;
  /** AAD Join type. */
  domainJoinType: DomainJoinType;
}

/** Represents a devcenter resource. */
export interface DevCenter extends TrackedResource {
  /** Managed identity properties */
  identity?: ManagedServiceIdentity;
  /** Encryption settings to be used for server-side encryption for proprietary content (such as catalogs, logs, customizations). */
  encryption?: Encryption;
  /** The display name of the devcenter. */
  displayName?: string;
  /** Dev Center settings to be used when associating a project with a catalog. */
  projectCatalogSettings?: DevCenterProjectCatalogSettings;
  /** Network settings that will be enforced on network resources associated with the Dev Center. */
  networkSettings?: DevCenterNetworkSettings;
  /** Settings to be used in the provisioning of all Dev Boxes that belong to this dev center. */
  devBoxProvisioningSettings?: DevBoxProvisioningSettings;
  /**
   * The provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The URI of the Dev Center.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly devCenterUri?: string;
}

/** Represents a devcenter encryption set resource. */
export interface DevCenterEncryptionSet extends TrackedResource {
  /** Managed identity properties */
  identity?: ManagedServiceIdentity;
  /** Devbox disk encryption enable or disable status. Indicates if Devbox disks encryption using DevCenter CMK is enabled or not. */
  devboxDisksEncryptionEnableStatus?: DevboxDisksEncryptionEnableStatus;
  /** Key encryption key Url, versioned or non-versioned. Ex: https://contosovault.vault.azure.net/keys/contosokek/562a4bb76b524a1493a6afe8e536ee78 or https://contosovault.vault.azure.net/keys/contosokek. */
  keyEncryptionKeyUrl?: string;
  /**
   * The provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** Represents a project resource. */
export interface Project extends TrackedResource {
  /** Managed identity properties */
  identity?: ManagedServiceIdentity;
  /** Resource Id of an associated DevCenter */
  devCenterId?: string;
  /** Description of the project. */
  description?: string;
  /** When specified, limits the maximum number of Dev Boxes a single user can create across all pools in the project. This will have no effect on existing Dev Boxes when reduced. */
  maxDevBoxesPerUser?: number;
  /** The display name of the project. */
  displayName?: string;
  /** Settings to be used when associating a project with a catalog. */
  catalogSettings?: ProjectCatalogSettings;
  /** Settings to be used for customizations. */
  customizationSettings?: ProjectCustomizationSettings;
  /** Dev Box Auto Delete settings. */
  devBoxAutoDeleteSettings?: DevBoxAutoDeleteSettings;
  /** Indicates whether Azure AI services are enabled for a project. */
  azureAiServicesSettings?: AzureAiServicesSettings;
  /** Settings to be used for serverless GPU. */
  serverlessGpuSessionsSettings?: ServerlessGpuSessionsSettings;
  /** Settings to be used for workspace storage. */
  workspaceStorageSettings?: WorkspaceStorageSettings;
  /**
   * The provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The URI of the Dev Center resource this project is associated with.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly devCenterUri?: string;
}

/** Represents a definition for a Developer Machine. */
export interface DevBoxDefinition extends TrackedResource {
  /** Image reference information. */
  imageReference?: ImageReference;
  /** The SKU for Dev Boxes created using this definition. */
  sku?: Sku;
  /** The storage type used for the Operating System disk of Dev Boxes created using this definition. */
  osStorageType?: string;
  /** Indicates whether Dev Boxes created with this definition are capable of hibernation. Not all images are capable of supporting hibernation. To find out more see https://aka.ms/devbox/hibernate */
  hibernateSupport?: HibernateSupport;
  /**
   * The provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Validation status of the configured image.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly imageValidationStatus?: ImageValidationStatus;
  /**
   * Details for image validator error. Populated when the image validation is not successful.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly imageValidationErrorDetails?: ImageValidationErrorDetails;
  /**
   * Validation status for the Dev Box Definition.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly validationStatus?: CatalogResourceValidationStatus;
  /**
   * Image reference information for the currently active image (only populated during updates).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly activeImageReference?: ImageReference;
}

/** A pool of Virtual Machines. */
export interface Pool extends TrackedResource {
  /** Indicates if the pool is created from an existing Dev Box Definition or if one is provided directly. */
  devBoxDefinitionType?: PoolDevBoxDefinitionType;
  /** Name of a Dev Box definition in parent Project of this Pool. Will be ignored if devBoxDefinitionType is Value. */
  devBoxDefinitionName?: string;
  /** A definition of the machines that are created from this Pool. Will be ignored if devBoxDefinitionType is Reference or not provided. */
  devBoxDefinition?: PoolDevBoxDefinition;
  /** Name of a Network Connection in parent Project of this Pool */
  networkConnectionName?: string;
  /** Specifies the license type indicating the caller has already acquired licenses for the Dev Boxes that will be created. */
  licenseType?: LicenseType;
  /** Indicates whether owners of Dev Boxes in this pool are added as local administrators on the Dev Box. */
  localAdministrator?: LocalAdminStatus;
  /** Stop on disconnect configuration settings for Dev Boxes created in this pool. */
  stopOnDisconnect?: StopOnDisconnectConfiguration;
  /** Stop on no connect configuration settings for Dev Boxes created in this pool. */
  stopOnNoConnect?: StopOnNoConnectConfiguration;
  /** Indicates whether Dev Boxes in this pool are created with single sign on enabled. The also requires that single sign on be enabled on the tenant. */
  singleSignOnStatus?: SingleSignOnStatus;
  /** The display name of the pool. */
  displayName?: string;
  /** Indicates whether the pool uses a Virtual Network managed by Microsoft or a customer provided network. */
  virtualNetworkType?: VirtualNetworkType;
  /** The regions of the managed virtual network (required when managedNetworkType is Managed). */
  managedVirtualNetworkRegions?: string[];
  /** Active hours configuration settings for Dev Boxes created in this pool. */
  activeHoursConfiguration?: ActiveHoursConfiguration;
  /** Indicates whether Dev Box Tunnel is enabled for a the pool. */
  devBoxTunnelEnableStatus?: DevBoxTunnelEnableStatus;
  /**
   * Overall health status of the Pool. Indicates whether or not the Pool is available to create Dev Boxes.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly healthStatus?: HealthStatus;
  /**
   * Details on the Pool health status to help diagnose issues. This is only populated when the pool status indicates the pool is in a non-healthy state
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly healthStatusDetails?: HealthStatusDetail[];
  /**
   * Indicates the number of provisioned Dev Boxes in this pool.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly devBoxCount?: number;
  /**
   * The provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** Network related settings */
export interface NetworkConnection extends TrackedResource {
  /** The subnet to attach Virtual Machines to */
  subnetId?: string;
  /** Active Directory domain name */
  domainName?: string;
  /** Active Directory domain Organization Unit (OU) */
  organizationUnit?: string;
  /** The username of an Active Directory account (user or service account) that has permissions to create computer objects in Active Directory. Required format: admin@contoso.com. */
  domainUsername?: string;
  /** The password for the account used to join domain */
  domainPassword?: string;
  /**
   * The provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Overall health status of the network connection. Health checks are run on creation, update, and periodically to validate the network connection.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly healthCheckStatus?: HealthCheckStatus;
  /** The name for resource group where NICs will be placed. */
  networkingResourceGroupName?: string;
  /** AAD Join type. */
  domainJoinType?: DomainJoinType;
}

/** Represents an environment definition catalog item. */
export interface EnvironmentDefinition extends ProxyResource {
  /**
   * A short description of the environment definition.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
  /**
   * Input parameters passed to an environment.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly parameters?: EnvironmentDefinitionParameter[];
  /**
   * Path to the Environment Definition entrypoint file.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly templatePath?: string;
  /**
   * Validation status for the environment definition.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly validationStatus?: CatalogResourceValidationStatus;
}

/** Represents an image. */
export interface Image extends ProxyResource {
  /**
   * The description of the image.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
  /**
   * The publisher of the image.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly publisher?: string;
  /**
   * The name of the image offer.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly offer?: string;
  /**
   * The SKU name for the image.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sku?: string;
  /**
   * The recommended machine configuration to use with the image.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly recommendedMachineConfiguration?: RecommendedMachineConfiguration;
  /**
   * The provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Indicates whether this image has hibernate enabled. Not all images are capable of supporting hibernation. To find out more see https://aka.ms/devbox/hibernate
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly hibernateSupport?: HibernateSupport;
}

/** Represents an image version. */
export interface ImageVersion extends ProxyResource {
  /**
   * The semantic version string.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly namePropertiesName?: string;
  /**
   * The datetime that the backing image version was published.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly publishedDate?: Date;
  /**
   * If the version should be excluded from being treated as the latest version.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly excludeFromLatest?: boolean;
  /**
   * The size of the OS disk image, in GB.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly osDiskImageSizeInGb?: number;
  /**
   * The provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** Represents a Task to be used in customizing a Dev Box. */
export interface CustomizationTask extends ProxyResource {
  /**
   * Inputs to the task.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly inputs?: { [propertyName: string]: CustomizationTaskInput };
  /**
   * The default timeout for the task.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly timeout?: number;
  /**
   * Validation status for the Task.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly validationStatus?: CatalogResourceValidationStatus;
}

/** Represents a definition for an Image. */
export interface ImageDefinition extends ProxyResource {
  /** Image reference information. */
  imageReference?: ImageReference;
  /**
   * The URL to the repository file containing the image definition.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fileUrl?: string;
  /** Details about the latest build. */
  latestBuild?: LatestImageBuild;
  /**
   * Validation status of the configured image.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly imageValidationStatus?: ImageValidationStatus;
  /**
   * Details for image validator error. Populated when the image validation is not successful.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly imageValidationErrorDetails?: ImageValidationErrorDetails;
  /**
   * Validation status for the Image Definition.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly validationStatus?: CatalogResourceValidationStatus;
  /**
   * Image reference information for the currently active image (only populated during updates).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly activeImageReference?: ImageReference;
  /**
   * Indicates if automatic image builds will be triggered for image definition updates
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly autoImageBuild?: AutoImageBuildStatus;
  /** Tasks to run at Dev Box provisioning time. */
  tasks?: CustomizationTaskInstance[];
  /** Tasks to run when a user first logs into a Dev Box. */
  userTasks?: CustomizationTaskInstance[];
  /** Another Image Definition that this one extends. */
  extends?: ImageDefinitionReference;
}

/** Represents a specific build of an Image Definition. */
export interface ImageDefinitionBuild extends ProxyResource {
  /**
   * The specific image version used by the build.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly imageReference?: ImageReference;
  /**
   * The status of the build.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: ImageDefinitionBuildStatus;
  /**
   * Start time of the task group.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startTime?: Date;
  /**
   * End time of the task group.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endTime?: Date;
  /**
   * Details for image creation error. Populated when the image creation is not successful.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly errorDetails?: ImageCreationErrorDetails;
}

/** Represents a specific build of an Image Definition. */
export interface ImageDefinitionBuildDetails extends ProxyResource {
  /**
   * The specific image version used by the build.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly imageReference?: ImageReference;
  /**
   * The status of the build.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: ImageDefinitionBuildStatus;
  /**
   * Start time of the task group.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startTime?: Date;
  /**
   * End time of the task group.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endTime?: Date;
  /**
   * Details for image creation error. Populated when the image creation is not successful.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly errorDetails?: ImageCreationErrorDetails;
  /**
   * The list of task groups executed during the image definition build.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly taskGroups?: ImageDefinitionBuildTaskGroup[];
}

/** The Schedule properties defining when and what to execute. */
export interface ScheduleProperties extends ScheduleUpdateProperties {
  /**
   * The provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** Defines headers for DevCenters_update operation. */
export interface DevCentersUpdateHeaders {
  location?: string;
}

/** Defines headers for DevCenters_delete operation. */
export interface DevCentersDeleteHeaders {
  location?: string;
}

/** Defines headers for EncryptionSets_update operation. */
export interface EncryptionSetsUpdateHeaders {
  location?: string;
}

/** Defines headers for EncryptionSets_delete operation. */
export interface EncryptionSetsDeleteHeaders {
  location?: string;
}

/** Defines headers for ProjectPolicies_update operation. */
export interface ProjectPoliciesUpdateHeaders {
  location?: string;
}

/** Defines headers for ProjectPolicies_delete operation. */
export interface ProjectPoliciesDeleteHeaders {
  location?: string;
}

/** Defines headers for Projects_update operation. */
export interface ProjectsUpdateHeaders {
  location?: string;
}

/** Defines headers for Projects_delete operation. */
export interface ProjectsDeleteHeaders {
  location?: string;
}

/** Defines headers for AttachedNetworks_delete operation. */
export interface AttachedNetworksDeleteHeaders {
  location?: string;
}

/** Defines headers for ProjectCatalogs_patch operation. */
export interface ProjectCatalogsPatchHeaders {
  location?: string;
}

/** Defines headers for ProjectCatalogs_delete operation. */
export interface ProjectCatalogsDeleteHeaders {
  location?: string;
}

/** Defines headers for ProjectCatalogs_sync operation. */
export interface ProjectCatalogsSyncHeaders {
  location?: string;
}

/** Defines headers for ProjectCatalogs_connect operation. */
export interface ProjectCatalogsConnectHeaders {
  location?: string;
}

/** Defines headers for Galleries_delete operation. */
export interface GalleriesDeleteHeaders {
  location?: string;
}

/** Defines headers for Catalogs_update operation. */
export interface CatalogsUpdateHeaders {
  location?: string;
}

/** Defines headers for Catalogs_delete operation. */
export interface CatalogsDeleteHeaders {
  location?: string;
}

/** Defines headers for Catalogs_sync operation. */
export interface CatalogsSyncHeaders {
  location?: string;
}

/** Defines headers for Catalogs_connect operation. */
export interface CatalogsConnectHeaders {
  location?: string;
}

/** Defines headers for DevBoxDefinitions_update operation. */
export interface DevBoxDefinitionsUpdateHeaders {
  location?: string;
}

/** Defines headers for DevBoxDefinitions_delete operation. */
export interface DevBoxDefinitionsDeleteHeaders {
  location?: string;
}

/** Defines headers for OperationStatuses_get operation. */
export interface OperationStatusesGetHeaders {
  location?: string;
}

/** Defines headers for DevCenterCatalogImageDefinitions_buildImage operation. */
export interface DevCenterCatalogImageDefinitionsBuildImageHeaders {
  azureAsyncOperation?: string;
  location?: string;
}

/** Defines headers for DevCenterCatalogImageDefinitionBuild_cancel operation. */
export interface DevCenterCatalogImageDefinitionBuildCancelHeaders {
  azureAsyncOperation?: string;
  location?: string;
}

/** Defines headers for ProjectCatalogImageDefinitions_buildImage operation. */
export interface ProjectCatalogImageDefinitionsBuildImageHeaders {
  azureAsyncOperation?: string;
  location?: string;
}

/** Defines headers for ProjectCatalogImageDefinitionBuild_cancel operation. */
export interface ProjectCatalogImageDefinitionBuildCancelHeaders {
  azureAsyncOperation?: string;
  location?: string;
}

/** Defines headers for Pools_update operation. */
export interface PoolsUpdateHeaders {
  location?: string;
}

/** Defines headers for Pools_delete operation. */
export interface PoolsDeleteHeaders {
  location?: string;
}

/** Defines headers for Pools_runHealthChecks operation. */
export interface PoolsRunHealthChecksHeaders {
  location?: string;
}

/** Defines headers for Schedules_update operation. */
export interface SchedulesUpdateHeaders {
  location?: string;
}

/** Defines headers for Schedules_delete operation. */
export interface SchedulesDeleteHeaders {
  location?: string;
}

/** Defines headers for NetworkConnections_update operation. */
export interface NetworkConnectionsUpdateHeaders {
  location?: string;
}

/** Defines headers for NetworkConnections_delete operation. */
export interface NetworkConnectionsDeleteHeaders {
  location?: string;
}

/** Defines headers for NetworkConnections_runHealthChecks operation. */
export interface NetworkConnectionsRunHealthChecksHeaders {
  location?: string;
}

/** Known values of {@link ProvisioningState} that the service accepts. */
export enum KnownProvisioningState {
  /** NotSpecified */
  NotSpecified = "NotSpecified",
  /** Accepted */
  Accepted = "Accepted",
  /** Running */
  Running = "Running",
  /** Creating */
  Creating = "Creating",
  /** Created */
  Created = "Created",
  /** Updating */
  Updating = "Updating",
  /** Updated */
  Updated = "Updated",
  /** Deleting */
  Deleting = "Deleting",
  /** Deleted */
  Deleted = "Deleted",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Canceled */
  Canceled = "Canceled",
  /** MovingResources */
  MovingResources = "MovingResources",
  /** TransientFailure */
  TransientFailure = "TransientFailure",
  /** RolloutInProgress */
  RolloutInProgress = "RolloutInProgress",
  /** StorageProvisioningFailed */
  StorageProvisioningFailed = "StorageProvisioningFailed",
}

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **Accepted** \
 * **Running** \
 * **Creating** \
 * **Created** \
 * **Updating** \
 * **Updated** \
 * **Deleting** \
 * **Deleted** \
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **MovingResources** \
 * **TransientFailure** \
 * **RolloutInProgress** \
 * **StorageProvisioningFailed**
 */
export type ProvisioningState = string;

/** Known values of {@link IdentityType} that the service accepts. */
export enum KnownIdentityType {
  /** SystemAssignedIdentity */
  SystemAssignedIdentity = "systemAssignedIdentity",
  /** UserAssignedIdentity */
  UserAssignedIdentity = "userAssignedIdentity",
  /** DelegatedResourceIdentity */
  DelegatedResourceIdentity = "delegatedResourceIdentity",
}

/**
 * Defines values for IdentityType. \
 * {@link KnownIdentityType} can be used interchangeably with IdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **systemAssignedIdentity** \
 * **userAssignedIdentity** \
 * **delegatedResourceIdentity**
 */
export type IdentityType = string;

/** Known values of {@link CatalogItemSyncEnableStatus} that the service accepts. */
export enum KnownCatalogItemSyncEnableStatus {
  /** Enabled */
  Enabled = "Enabled",
  /** Disabled */
  Disabled = "Disabled",
}

/**
 * Defines values for CatalogItemSyncEnableStatus. \
 * {@link KnownCatalogItemSyncEnableStatus} can be used interchangeably with CatalogItemSyncEnableStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export type CatalogItemSyncEnableStatus = string;

/** Known values of {@link MicrosoftHostedNetworkEnableStatus} that the service accepts. */
export enum KnownMicrosoftHostedNetworkEnableStatus {
  /** Enabled */
  Enabled = "Enabled",
  /** Disabled */
  Disabled = "Disabled",
}

/**
 * Defines values for MicrosoftHostedNetworkEnableStatus. \
 * {@link KnownMicrosoftHostedNetworkEnableStatus} can be used interchangeably with MicrosoftHostedNetworkEnableStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export type MicrosoftHostedNetworkEnableStatus = string;

/** Known values of {@link InstallAzureMonitorAgentEnableStatus} that the service accepts. */
export enum KnownInstallAzureMonitorAgentEnableStatus {
  /** Enabled */
  Enabled = "Enabled",
  /** Disabled */
  Disabled = "Disabled",
}

/**
 * Defines values for InstallAzureMonitorAgentEnableStatus. \
 * {@link KnownInstallAzureMonitorAgentEnableStatus} can be used interchangeably with InstallAzureMonitorAgentEnableStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export type InstallAzureMonitorAgentEnableStatus = string;

/** Known values of {@link ManagedServiceIdentityType} that the service accepts. */
export enum KnownManagedServiceIdentityType {
  /** None */
  None = "None",
  /** SystemAssigned */
  SystemAssigned = "SystemAssigned",
  /** UserAssigned */
  UserAssigned = "UserAssigned",
  /** SystemAssignedUserAssigned */
  SystemAssignedUserAssigned = "SystemAssigned, UserAssigned",
}

/**
 * Defines values for ManagedServiceIdentityType. \
 * {@link KnownManagedServiceIdentityType} can be used interchangeably with ManagedServiceIdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **SystemAssigned** \
 * **UserAssigned** \
 * **SystemAssigned, UserAssigned**
 */
export type ManagedServiceIdentityType = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  /** User */
  User = "User",
  /** Application */
  Application = "Application",
  /** ManagedIdentity */
  ManagedIdentity = "ManagedIdentity",
  /** Key */
  Key = "Key",
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link DevboxDisksEncryptionEnableStatus} that the service accepts. */
export enum KnownDevboxDisksEncryptionEnableStatus {
  /** Enabled */
  Enabled = "Enabled",
  /** Disabled */
  Disabled = "Disabled",
}

/**
 * Defines values for DevboxDisksEncryptionEnableStatus. \
 * {@link KnownDevboxDisksEncryptionEnableStatus} can be used interchangeably with DevboxDisksEncryptionEnableStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export type DevboxDisksEncryptionEnableStatus = string;

/** Known values of {@link PolicyAction} that the service accepts. */
export enum KnownPolicyAction {
  /** Allow */
  Allow = "Allow",
  /** Deny */
  Deny = "Deny",
}

/**
 * Defines values for PolicyAction. \
 * {@link KnownPolicyAction} can be used interchangeably with PolicyAction,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Allow** \
 * **Deny**
 */
export type PolicyAction = string;

/** Known values of {@link DevCenterResourceType} that the service accepts. */
export enum KnownDevCenterResourceType {
  /** Images */
  Images = "Images",
  /** AttachedNetworks */
  AttachedNetworks = "AttachedNetworks",
  /** Skus */
  Skus = "Skus",
}

/**
 * Defines values for DevCenterResourceType. \
 * {@link KnownDevCenterResourceType} can be used interchangeably with DevCenterResourceType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Images** \
 * **AttachedNetworks** \
 * **Skus**
 */
export type DevCenterResourceType = string;

/** Known values of {@link CatalogItemType} that the service accepts. */
export enum KnownCatalogItemType {
  /** EnvironmentDefinition */
  EnvironmentDefinition = "EnvironmentDefinition",
  /** ImageDefinition */
  ImageDefinition = "ImageDefinition",
}

/**
 * Defines values for CatalogItemType. \
 * {@link KnownCatalogItemType} can be used interchangeably with CatalogItemType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **EnvironmentDefinition** \
 * **ImageDefinition**
 */
export type CatalogItemType = string;

/** Known values of {@link ProjectCustomizationIdentityType} that the service accepts. */
export enum KnownProjectCustomizationIdentityType {
  /** SystemAssignedIdentity */
  SystemAssignedIdentity = "systemAssignedIdentity",
  /** UserAssignedIdentity */
  UserAssignedIdentity = "userAssignedIdentity",
}

/**
 * Defines values for ProjectCustomizationIdentityType. \
 * {@link KnownProjectCustomizationIdentityType} can be used interchangeably with ProjectCustomizationIdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **systemAssignedIdentity** \
 * **userAssignedIdentity**
 */
export type ProjectCustomizationIdentityType = string;

/** Known values of {@link UserCustomizationsEnableStatus} that the service accepts. */
export enum KnownUserCustomizationsEnableStatus {
  /** Disabled */
  Disabled = "Disabled",
  /** Enabled */
  Enabled = "Enabled",
}

/**
 * Defines values for UserCustomizationsEnableStatus. \
 * {@link KnownUserCustomizationsEnableStatus} can be used interchangeably with UserCustomizationsEnableStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Disabled** \
 * **Enabled**
 */
export type UserCustomizationsEnableStatus = string;

/** Known values of {@link DevBoxDeleteMode} that the service accepts. */
export enum KnownDevBoxDeleteMode {
  /** Dev Boxes will not be deleted automatically, and user must manually delete. This is the default. */
  Manual = "Manual",
  /** Dev Boxes will be deleted automatically according to configured settings. */
  Auto = "Auto",
}

/**
 * Defines values for DevBoxDeleteMode. \
 * {@link KnownDevBoxDeleteMode} can be used interchangeably with DevBoxDeleteMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Manual**: Dev Boxes will not be deleted automatically, and user must manually delete. This is the default. \
 * **Auto**: Dev Boxes will be deleted automatically according to configured settings.
 */
export type DevBoxDeleteMode = string;

/** Known values of {@link AzureAiServicesMode} that the service accepts. */
export enum KnownAzureAiServicesMode {
  /** Azure AI services are disabled for this project. */
  Disabled = "Disabled",
  /** Azure AI services are enabled for this project and necessary resources will be automatically setup. */
  AutoDeploy = "AutoDeploy",
}

/**
 * Defines values for AzureAiServicesMode. \
 * {@link KnownAzureAiServicesMode} can be used interchangeably with AzureAiServicesMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Disabled**: Azure AI services are disabled for this project. \
 * **AutoDeploy**: Azure AI services are enabled for this project and necessary resources will be automatically setup.
 */
export type AzureAiServicesMode = string;

/** Known values of {@link ServerlessGpuSessionsMode} that the service accepts. */
export enum KnownServerlessGpuSessionsMode {
  /** Serverless GPU session access is disabled. */
  Disabled = "Disabled",
  /** Serverless GPU session access is enabled and necessary resources will be automatically setup. */
  AutoDeploy = "AutoDeploy",
}

/**
 * Defines values for ServerlessGpuSessionsMode. \
 * {@link KnownServerlessGpuSessionsMode} can be used interchangeably with ServerlessGpuSessionsMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Disabled**: Serverless GPU session access is disabled. \
 * **AutoDeploy**: Serverless GPU session access is enabled and necessary resources will be automatically setup.
 */
export type ServerlessGpuSessionsMode = string;

/** Known values of {@link WorkspaceStorageMode} that the service accepts. */
export enum KnownWorkspaceStorageMode {
  /** Workspace storage is disabled. */
  Disabled = "Disabled",
  /** Workspace storage is enabled and necessary resources will be automatically setup. */
  AutoDeploy = "AutoDeploy",
}

/**
 * Defines values for WorkspaceStorageMode. \
 * {@link KnownWorkspaceStorageMode} can be used interchangeably with WorkspaceStorageMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Disabled**: Workspace storage is disabled. \
 * **AutoDeploy**: Workspace storage is enabled and necessary resources will be automatically setup.
 */
export type WorkspaceStorageMode = string;

/** Known values of {@link HealthCheckStatus} that the service accepts. */
export enum KnownHealthCheckStatus {
  /** Unknown */
  Unknown = "Unknown",
  /** Pending */
  Pending = "Pending",
  /** Running */
  Running = "Running",
  /** Passed */
  Passed = "Passed",
  /** Warning */
  Warning = "Warning",
  /** Failed */
  Failed = "Failed",
  /** Informational */
  Informational = "Informational",
}

/**
 * Defines values for HealthCheckStatus. \
 * {@link KnownHealthCheckStatus} can be used interchangeably with HealthCheckStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **Pending** \
 * **Running** \
 * **Passed** \
 * **Warning** \
 * **Failed** \
 * **Informational**
 */
export type HealthCheckStatus = string;

/** Known values of {@link DomainJoinType} that the service accepts. */
export enum KnownDomainJoinType {
  /** HybridAzureADJoin */
  HybridAzureADJoin = "HybridAzureADJoin",
  /** AzureADJoin */
  AzureADJoin = "AzureADJoin",
  /** None */
  None = "None",
}

/**
 * Defines values for DomainJoinType. \
 * {@link KnownDomainJoinType} can be used interchangeably with DomainJoinType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **HybridAzureADJoin** \
 * **AzureADJoin** \
 * **None**
 */
export type DomainJoinType = string;

/** Known values of {@link CatalogSyncState} that the service accepts. */
export enum KnownCatalogSyncState {
  /** Succeeded */
  Succeeded = "Succeeded",
  /** InProgress */
  InProgress = "InProgress",
  /** Failed */
  Failed = "Failed",
  /** Canceled */
  Canceled = "Canceled",
}

/**
 * Defines values for CatalogSyncState. \
 * {@link KnownCatalogSyncState} can be used interchangeably with CatalogSyncState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **InProgress** \
 * **Failed** \
 * **Canceled**
 */
export type CatalogSyncState = string;

/** Known values of {@link CatalogConnectionState} that the service accepts. */
export enum KnownCatalogConnectionState {
  /** Connected */
  Connected = "Connected",
  /** Disconnected */
  Disconnected = "Disconnected",
}

/**
 * Defines values for CatalogConnectionState. \
 * {@link KnownCatalogConnectionState} can be used interchangeably with CatalogConnectionState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Connected** \
 * **Disconnected**
 */
export type CatalogConnectionState = string;

/** Known values of {@link CatalogSyncType} that the service accepts. */
export enum KnownCatalogSyncType {
  /** Manual */
  Manual = "Manual",
  /** Scheduled */
  Scheduled = "Scheduled",
}

/**
 * Defines values for CatalogSyncType. \
 * {@link KnownCatalogSyncType} can be used interchangeably with CatalogSyncType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Manual** \
 * **Scheduled**
 */
export type CatalogSyncType = string;

/** Known values of {@link ParameterType} that the service accepts. */
export enum KnownParameterType {
  /** The parameter accepts an array of values. */
  Array = "array",
  /** The parameter accepts a boolean value. */
  Boolean = "boolean",
  /** The parameter accepts an integer value. */
  Integer = "integer",
  /** The parameter accepts a number value. */
  Number = "number",
  /** The parameter accepts an object value. */
  Object = "object",
  /** The parameter accepts a string value. */
  String = "string",
}

/**
 * Defines values for ParameterType. \
 * {@link KnownParameterType} can be used interchangeably with ParameterType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **array**: The parameter accepts an array of values. \
 * **boolean**: The parameter accepts a boolean value. \
 * **integer**: The parameter accepts an integer value. \
 * **number**: The parameter accepts a number value. \
 * **object**: The parameter accepts an object value. \
 * **string**: The parameter accepts a string value.
 */
export type ParameterType = string;

/** Known values of {@link CatalogResourceValidationStatus} that the service accepts. */
export enum KnownCatalogResourceValidationStatus {
  /** Unknown */
  Unknown = "Unknown",
  /** Pending */
  Pending = "Pending",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
}

/**
 * Defines values for CatalogResourceValidationStatus. \
 * {@link KnownCatalogResourceValidationStatus} can be used interchangeably with CatalogResourceValidationStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **Pending** \
 * **Succeeded** \
 * **Failed**
 */
export type CatalogResourceValidationStatus = string;

/** Known values of {@link HibernateSupport} that the service accepts. */
export enum KnownHibernateSupport {
  /** Disabled */
  Disabled = "Disabled",
  /** Enabled */
  Enabled = "Enabled",
}

/**
 * Defines values for HibernateSupport. \
 * {@link KnownHibernateSupport} can be used interchangeably with HibernateSupport,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Disabled** \
 * **Enabled**
 */
export type HibernateSupport = string;

/** Known values of {@link EnvironmentTypeEnableStatus} that the service accepts. */
export enum KnownEnvironmentTypeEnableStatus {
  /** Enabled */
  Enabled = "Enabled",
  /** Disabled */
  Disabled = "Disabled",
}

/**
 * Defines values for EnvironmentTypeEnableStatus. \
 * {@link KnownEnvironmentTypeEnableStatus} can be used interchangeably with EnvironmentTypeEnableStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export type EnvironmentTypeEnableStatus = string;

/** Known values of {@link ImageValidationStatus} that the service accepts. */
export enum KnownImageValidationStatus {
  /** Unknown */
  Unknown = "Unknown",
  /** Pending */
  Pending = "Pending",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** TimedOut */
  TimedOut = "TimedOut",
}

/**
 * Defines values for ImageValidationStatus. \
 * {@link KnownImageValidationStatus} can be used interchangeably with ImageValidationStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **Pending** \
 * **Succeeded** \
 * **Failed** \
 * **TimedOut**
 */
export type ImageValidationStatus = string;

/** Known values of {@link Origin} that the service accepts. */
export enum KnownOrigin {
  /** User */
  User = "user",
  /** System */
  System = "system",
  /** UserSystem */
  UserSystem = "user,system",
}

/**
 * Defines values for Origin. \
 * {@link KnownOrigin} can be used interchangeably with Origin,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **user** \
 * **system** \
 * **user,system**
 */
export type Origin = string;

/** Known values of {@link ActionType} that the service accepts. */
export enum KnownActionType {
  /** Internal */
  Internal = "Internal",
}

/**
 * Defines values for ActionType. \
 * {@link KnownActionType} can be used interchangeably with ActionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Internal**
 */
export type ActionType = string;

/** Known values of {@link UsageUnit} that the service accepts. */
export enum KnownUsageUnit {
  /** Count */
  Count = "Count",
}

/**
 * Defines values for UsageUnit. \
 * {@link KnownUsageUnit} can be used interchangeably with UsageUnit,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Count**
 */
export type UsageUnit = string;

/** Known values of {@link CheckNameAvailabilityReason} that the service accepts. */
export enum KnownCheckNameAvailabilityReason {
  /** Invalid */
  Invalid = "Invalid",
  /** AlreadyExists */
  AlreadyExists = "AlreadyExists",
}

/**
 * Defines values for CheckNameAvailabilityReason. \
 * {@link KnownCheckNameAvailabilityReason} can be used interchangeably with CheckNameAvailabilityReason,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Invalid** \
 * **AlreadyExists**
 */
export type CheckNameAvailabilityReason = string;

/** Known values of {@link CustomizationTaskInputType} that the service accepts. */
export enum KnownCustomizationTaskInputType {
  /** String */
  String = "string",
  /** Number */
  Number = "number",
  /** Boolean */
  Boolean = "boolean",
}

/**
 * Defines values for CustomizationTaskInputType. \
 * {@link KnownCustomizationTaskInputType} can be used interchangeably with CustomizationTaskInputType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **string** \
 * **number** \
 * **boolean**
 */
export type CustomizationTaskInputType = string;

/** Known values of {@link ImageDefinitionBuildStatus} that the service accepts. */
export enum KnownImageDefinitionBuildStatus {
  /** The image build has succeeded. */
  Succeeded = "Succeeded",
  /** The image build is running. */
  Running = "Running",
  /** The built image has failed validation. */
  ValidationFailed = "ValidationFailed",
  /** The image build has failed. */
  Failed = "Failed",
  /** The image build has been cancelled. */
  Cancelled = "Cancelled",
  /** The image build has timed out. */
  TimedOut = "TimedOut",
}

/**
 * Defines values for ImageDefinitionBuildStatus. \
 * {@link KnownImageDefinitionBuildStatus} can be used interchangeably with ImageDefinitionBuildStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded**: The image build has succeeded. \
 * **Running**: The image build is running. \
 * **ValidationFailed**: The built image has failed validation. \
 * **Failed**: The image build has failed. \
 * **Cancelled**: The image build has been cancelled. \
 * **TimedOut**: The image build has timed out.
 */
export type ImageDefinitionBuildStatus = string;

/** Known values of {@link AutoImageBuildStatus} that the service accepts. */
export enum KnownAutoImageBuildStatus {
  /** Disabled */
  Disabled = "Disabled",
  /** Enabled */
  Enabled = "Enabled",
}

/**
 * Defines values for AutoImageBuildStatus. \
 * {@link KnownAutoImageBuildStatus} can be used interchangeably with AutoImageBuildStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Disabled** \
 * **Enabled**
 */
export type AutoImageBuildStatus = string;

/** Known values of {@link HealthStatus} that the service accepts. */
export enum KnownHealthStatus {
  /** Unknown */
  Unknown = "Unknown",
  /** Pending */
  Pending = "Pending",
  /** Healthy */
  Healthy = "Healthy",
  /** Warning */
  Warning = "Warning",
  /** Unhealthy */
  Unhealthy = "Unhealthy",
}

/**
 * Defines values for HealthStatus. \
 * {@link KnownHealthStatus} can be used interchangeably with HealthStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **Pending** \
 * **Healthy** \
 * **Warning** \
 * **Unhealthy**
 */
export type HealthStatus = string;

/** Known values of {@link PoolDevBoxDefinitionType} that the service accepts. */
export enum KnownPoolDevBoxDefinitionType {
  /** Reference */
  Reference = "Reference",
  /** Value */
  Value = "Value",
}

/**
 * Defines values for PoolDevBoxDefinitionType. \
 * {@link KnownPoolDevBoxDefinitionType} can be used interchangeably with PoolDevBoxDefinitionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Reference** \
 * **Value**
 */
export type PoolDevBoxDefinitionType = string;

/** Known values of {@link LicenseType} that the service accepts. */
export enum KnownLicenseType {
  /** WindowsClient */
  WindowsClient = "Windows_Client",
}

/**
 * Defines values for LicenseType. \
 * {@link KnownLicenseType} can be used interchangeably with LicenseType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Windows_Client**
 */
export type LicenseType = string;

/** Known values of {@link LocalAdminStatus} that the service accepts. */
export enum KnownLocalAdminStatus {
  /** Disabled */
  Disabled = "Disabled",
  /** Enabled */
  Enabled = "Enabled",
}

/**
 * Defines values for LocalAdminStatus. \
 * {@link KnownLocalAdminStatus} can be used interchangeably with LocalAdminStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Disabled** \
 * **Enabled**
 */
export type LocalAdminStatus = string;

/** Known values of {@link StopOnDisconnectEnableStatus} that the service accepts. */
export enum KnownStopOnDisconnectEnableStatus {
  /** Enabled */
  Enabled = "Enabled",
  /** Disabled */
  Disabled = "Disabled",
}

/**
 * Defines values for StopOnDisconnectEnableStatus. \
 * {@link KnownStopOnDisconnectEnableStatus} can be used interchangeably with StopOnDisconnectEnableStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export type StopOnDisconnectEnableStatus = string;

/** Known values of {@link StopOnNoConnectEnableStatus} that the service accepts. */
export enum KnownStopOnNoConnectEnableStatus {
  /** Enabled */
  Enabled = "Enabled",
  /** Disabled */
  Disabled = "Disabled",
}

/**
 * Defines values for StopOnNoConnectEnableStatus. \
 * {@link KnownStopOnNoConnectEnableStatus} can be used interchangeably with StopOnNoConnectEnableStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export type StopOnNoConnectEnableStatus = string;

/** Known values of {@link SingleSignOnStatus} that the service accepts. */
export enum KnownSingleSignOnStatus {
  /** Disabled */
  Disabled = "Disabled",
  /** Enabled */
  Enabled = "Enabled",
}

/**
 * Defines values for SingleSignOnStatus. \
 * {@link KnownSingleSignOnStatus} can be used interchangeably with SingleSignOnStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Disabled** \
 * **Enabled**
 */
export type SingleSignOnStatus = string;

/** Known values of {@link VirtualNetworkType} that the service accepts. */
export enum KnownVirtualNetworkType {
  /** Managed */
  Managed = "Managed",
  /** Unmanaged */
  Unmanaged = "Unmanaged",
}

/**
 * Defines values for VirtualNetworkType. \
 * {@link KnownVirtualNetworkType} can be used interchangeably with VirtualNetworkType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Managed** \
 * **Unmanaged**
 */
export type VirtualNetworkType = string;

/** Known values of {@link KeepAwakeEnableStatus} that the service accepts. */
export enum KnownKeepAwakeEnableStatus {
  /** Enabled */
  Enabled = "Enabled",
  /** Disabled */
  Disabled = "Disabled",
}

/**
 * Defines values for KeepAwakeEnableStatus. \
 * {@link KnownKeepAwakeEnableStatus} can be used interchangeably with KeepAwakeEnableStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export type KeepAwakeEnableStatus = string;

/** Known values of {@link AutoStartEnableStatus} that the service accepts. */
export enum KnownAutoStartEnableStatus {
  /** Enabled */
  Enabled = "Enabled",
  /** Disabled */
  Disabled = "Disabled",
}

/**
 * Defines values for AutoStartEnableStatus. \
 * {@link KnownAutoStartEnableStatus} can be used interchangeably with AutoStartEnableStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export type AutoStartEnableStatus = string;

/** Known values of {@link DevBoxTunnelEnableStatus} that the service accepts. */
export enum KnownDevBoxTunnelEnableStatus {
  /** Disabled */
  Disabled = "Disabled",
  /** Enabled */
  Enabled = "Enabled",
}

/**
 * Defines values for DevBoxTunnelEnableStatus. \
 * {@link KnownDevBoxTunnelEnableStatus} can be used interchangeably with DevBoxTunnelEnableStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Disabled** \
 * **Enabled**
 */
export type DevBoxTunnelEnableStatus = string;

/** Known values of {@link ScheduledType} that the service accepts. */
export enum KnownScheduledType {
  /** StopDevBox */
  StopDevBox = "StopDevBox",
}

/**
 * Defines values for ScheduledType. \
 * {@link KnownScheduledType} can be used interchangeably with ScheduledType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **StopDevBox**
 */
export type ScheduledType = string;

/** Known values of {@link ScheduledFrequency} that the service accepts. */
export enum KnownScheduledFrequency {
  /** Daily */
  Daily = "Daily",
}

/**
 * Defines values for ScheduledFrequency. \
 * {@link KnownScheduledFrequency} can be used interchangeably with ScheduledFrequency,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Daily**
 */
export type ScheduledFrequency = string;

/** Known values of {@link ScheduleEnableStatus} that the service accepts. */
export enum KnownScheduleEnableStatus {
  /** Enabled */
  Enabled = "Enabled",
  /** Disabled */
  Disabled = "Disabled",
}

/**
 * Defines values for ScheduleEnableStatus. \
 * {@link KnownScheduleEnableStatus} can be used interchangeably with ScheduleEnableStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export type ScheduleEnableStatus = string;
/** Defines values for SkuTier. */
export type SkuTier = "Free" | "Basic" | "Standard" | "Premium";

/** Optional parameters. */
export interface DevCentersListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {
  /** The maximum number of resources to return from the operation. Example: '$top=10'. */
  top?: number;
}

/** Contains response data for the listBySubscription operation. */
export type DevCentersListBySubscriptionResponse = DevCenterListResult;

/** Optional parameters. */
export interface DevCentersListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {
  /** The maximum number of resources to return from the operation. Example: '$top=10'. */
  top?: number;
}

/** Contains response data for the listByResourceGroup operation. */
export type DevCentersListByResourceGroupResponse = DevCenterListResult;

/** Optional parameters. */
export interface DevCentersGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type DevCentersGetResponse = DevCenter;

/** Optional parameters. */
export interface DevCentersCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type DevCentersCreateOrUpdateResponse = DevCenter;

/** Optional parameters. */
export interface DevCentersUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type DevCentersUpdateResponse = DevCenter;

/** Optional parameters. */
export interface DevCentersDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type DevCentersDeleteResponse = DevCentersDeleteHeaders;

/** Optional parameters. */
export interface DevCentersListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type DevCentersListBySubscriptionNextResponse = DevCenterListResult;

/** Optional parameters. */
export interface DevCentersListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type DevCentersListByResourceGroupNextResponse = DevCenterListResult;

/** Optional parameters. */
export interface EncryptionSetsListOptionalParams
  extends coreClient.OperationOptions {
  /** The maximum number of resources to return from the operation. Example: '$top=10'. */
  top?: number;
}

/** Contains response data for the list operation. */
export type EncryptionSetsListResponse = EncryptionSetListResult;

/** Optional parameters. */
export interface EncryptionSetsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type EncryptionSetsGetResponse = DevCenterEncryptionSet;

/** Optional parameters. */
export interface EncryptionSetsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type EncryptionSetsCreateOrUpdateResponse = DevCenterEncryptionSet;

/** Optional parameters. */
export interface EncryptionSetsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type EncryptionSetsUpdateResponse = DevCenterEncryptionSet;

/** Optional parameters. */
export interface EncryptionSetsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type EncryptionSetsDeleteResponse = EncryptionSetsDeleteHeaders;

/** Optional parameters. */
export interface EncryptionSetsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type EncryptionSetsListNextResponse = EncryptionSetListResult;

/** Optional parameters. */
export interface ProjectPoliciesListByDevCenterOptionalParams
  extends coreClient.OperationOptions {
  /** The maximum number of resources to return from the operation. Example: '$top=10'. */
  top?: number;
}

/** Contains response data for the listByDevCenter operation. */
export type ProjectPoliciesListByDevCenterResponse = ProjectPolicyListResult;

/** Optional parameters. */
export interface ProjectPoliciesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ProjectPoliciesGetResponse = ProjectPolicy;

/** Optional parameters. */
export interface ProjectPoliciesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type ProjectPoliciesCreateOrUpdateResponse = ProjectPolicy;

/** Optional parameters. */
export interface ProjectPoliciesUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type ProjectPoliciesUpdateResponse = ProjectPolicy;

/** Optional parameters. */
export interface ProjectPoliciesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type ProjectPoliciesDeleteResponse = ProjectPoliciesDeleteHeaders;

/** Optional parameters. */
export interface ProjectPoliciesListByDevCenterNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByDevCenterNext operation. */
export type ProjectPoliciesListByDevCenterNextResponse =
  ProjectPolicyListResult;

/** Optional parameters. */
export interface ProjectsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {
  /** The maximum number of resources to return from the operation. Example: '$top=10'. */
  top?: number;
}

/** Contains response data for the listBySubscription operation. */
export type ProjectsListBySubscriptionResponse = ProjectListResult;

/** Optional parameters. */
export interface ProjectsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {
  /** The maximum number of resources to return from the operation. Example: '$top=10'. */
  top?: number;
}

/** Contains response data for the listByResourceGroup operation. */
export type ProjectsListByResourceGroupResponse = ProjectListResult;

/** Optional parameters. */
export interface ProjectsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ProjectsGetResponse = Project;

/** Optional parameters. */
export interface ProjectsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type ProjectsCreateOrUpdateResponse = Project;

/** Optional parameters. */
export interface ProjectsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type ProjectsUpdateResponse = Project;

/** Optional parameters. */
export interface ProjectsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type ProjectsDeleteResponse = ProjectsDeleteHeaders;

/** Optional parameters. */
export interface ProjectsGetInheritedSettingsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getInheritedSettings operation. */
export type ProjectsGetInheritedSettingsResponse = InheritedSettingsForProject;

/** Optional parameters. */
export interface ProjectsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type ProjectsListBySubscriptionNextResponse = ProjectListResult;

/** Optional parameters. */
export interface ProjectsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type ProjectsListByResourceGroupNextResponse = ProjectListResult;

/** Optional parameters. */
export interface AttachedNetworksListByProjectOptionalParams
  extends coreClient.OperationOptions {
  /** The maximum number of resources to return from the operation. Example: '$top=10'. */
  top?: number;
}

/** Contains response data for the listByProject operation. */
export type AttachedNetworksListByProjectResponse = AttachedNetworkListResult;

/** Optional parameters. */
export interface AttachedNetworksGetByProjectOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getByProject operation. */
export type AttachedNetworksGetByProjectResponse = AttachedNetworkConnection;

/** Optional parameters. */
export interface AttachedNetworksListByDevCenterOptionalParams
  extends coreClient.OperationOptions {
  /** The maximum number of resources to return from the operation. Example: '$top=10'. */
  top?: number;
}

/** Contains response data for the listByDevCenter operation. */
export type AttachedNetworksListByDevCenterResponse = AttachedNetworkListResult;

/** Optional parameters. */
export interface AttachedNetworksGetByDevCenterOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getByDevCenter operation. */
export type AttachedNetworksGetByDevCenterResponse = AttachedNetworkConnection;

/** Optional parameters. */
export interface AttachedNetworksCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type AttachedNetworksCreateOrUpdateResponse = AttachedNetworkConnection;

/** Optional parameters. */
export interface AttachedNetworksDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type AttachedNetworksDeleteResponse = AttachedNetworksDeleteHeaders;

/** Optional parameters. */
export interface AttachedNetworksListByProjectNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByProjectNext operation. */
export type AttachedNetworksListByProjectNextResponse =
  AttachedNetworkListResult;

/** Optional parameters. */
export interface AttachedNetworksListByDevCenterNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByDevCenterNext operation. */
export type AttachedNetworksListByDevCenterNextResponse =
  AttachedNetworkListResult;

/** Optional parameters. */
export interface ProjectCatalogsListOptionalParams
  extends coreClient.OperationOptions {
  /** The maximum number of resources to return from the operation. Example: '$top=10'. */
  top?: number;
}

/** Contains response data for the list operation. */
export type ProjectCatalogsListResponse = CatalogListResult;

/** Optional parameters. */
export interface ProjectCatalogsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ProjectCatalogsGetResponse = Catalog;

/** Optional parameters. */
export interface ProjectCatalogsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type ProjectCatalogsCreateOrUpdateResponse = Catalog;

/** Optional parameters. */
export interface ProjectCatalogsPatchOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the patch operation. */
export type ProjectCatalogsPatchResponse = Catalog;

/** Optional parameters. */
export interface ProjectCatalogsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type ProjectCatalogsDeleteResponse = ProjectCatalogsDeleteHeaders;

/** Optional parameters. */
export interface ProjectCatalogsGetSyncErrorDetailsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getSyncErrorDetails operation. */
export type ProjectCatalogsGetSyncErrorDetailsResponse = SyncErrorDetails;

/** Optional parameters. */
export interface ProjectCatalogsSyncOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the sync operation. */
export type ProjectCatalogsSyncResponse = ProjectCatalogsSyncHeaders;

/** Optional parameters. */
export interface ProjectCatalogsConnectOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the connect operation. */
export type ProjectCatalogsConnectResponse = ProjectCatalogsConnectHeaders;

/** Optional parameters. */
export interface ProjectCatalogsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type ProjectCatalogsListNextResponse = CatalogListResult;

/** Optional parameters. */
export interface EnvironmentDefinitionsListByProjectCatalogOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByProjectCatalog operation. */
export type EnvironmentDefinitionsListByProjectCatalogResponse =
  EnvironmentDefinitionListResult;

/** Optional parameters. */
export interface EnvironmentDefinitionsGetByProjectCatalogOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getByProjectCatalog operation. */
export type EnvironmentDefinitionsGetByProjectCatalogResponse =
  EnvironmentDefinition;

/** Optional parameters. */
export interface EnvironmentDefinitionsListByCatalogOptionalParams
  extends coreClient.OperationOptions {
  /** The maximum number of resources to return from the operation. Example: '$top=10'. */
  top?: number;
}

/** Contains response data for the listByCatalog operation. */
export type EnvironmentDefinitionsListByCatalogResponse =
  EnvironmentDefinitionListResult;

/** Optional parameters. */
export interface EnvironmentDefinitionsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type EnvironmentDefinitionsGetResponse = EnvironmentDefinition;

/** Optional parameters. */
export interface EnvironmentDefinitionsGetErrorDetailsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getErrorDetails operation. */
export type EnvironmentDefinitionsGetErrorDetailsResponse =
  CatalogResourceValidationErrorDetails;

/** Optional parameters. */
export interface EnvironmentDefinitionsListByProjectCatalogNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByProjectCatalogNext operation. */
export type EnvironmentDefinitionsListByProjectCatalogNextResponse =
  EnvironmentDefinitionListResult;

/** Optional parameters. */
export interface EnvironmentDefinitionsListByCatalogNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByCatalogNext operation. */
export type EnvironmentDefinitionsListByCatalogNextResponse =
  EnvironmentDefinitionListResult;

/** Optional parameters. */
export interface ProjectCatalogEnvironmentDefinitionsGetErrorDetailsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getErrorDetails operation. */
export type ProjectCatalogEnvironmentDefinitionsGetErrorDetailsResponse =
  CatalogResourceValidationErrorDetails;

/** Optional parameters. */
export interface GalleriesListByDevCenterOptionalParams
  extends coreClient.OperationOptions {
  /** The maximum number of resources to return from the operation. Example: '$top=10'. */
  top?: number;
}

/** Contains response data for the listByDevCenter operation. */
export type GalleriesListByDevCenterResponse = GalleryListResult;

/** Optional parameters. */
export interface GalleriesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type GalleriesGetResponse = Gallery;

/** Optional parameters. */
export interface GalleriesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type GalleriesCreateOrUpdateResponse = Gallery;

/** Optional parameters. */
export interface GalleriesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type GalleriesDeleteResponse = GalleriesDeleteHeaders;

/** Optional parameters. */
export interface GalleriesListByDevCenterNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByDevCenterNext operation. */
export type GalleriesListByDevCenterNextResponse = GalleryListResult;

/** Optional parameters. */
export interface ImagesListByDevCenterOptionalParams
  extends coreClient.OperationOptions {
  /** The maximum number of resources to return from the operation. Example: '$top=10'. */
  top?: number;
}

/** Contains response data for the listByDevCenter operation. */
export type ImagesListByDevCenterResponse = ImageListResult;

/** Optional parameters. */
export interface ImagesListByGalleryOptionalParams
  extends coreClient.OperationOptions {
  /** The maximum number of resources to return from the operation. Example: '$top=10'. */
  top?: number;
}

/** Contains response data for the listByGallery operation. */
export type ImagesListByGalleryResponse = ImageListResult;

/** Optional parameters. */
export interface ImagesGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ImagesGetResponse = Image;

/** Optional parameters. */
export interface ImagesListByProjectOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByProject operation. */
export type ImagesListByProjectResponse = ImageListResult;

/** Optional parameters. */
export interface ImagesGetByProjectOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getByProject operation. */
export type ImagesGetByProjectResponse = Image;

/** Optional parameters. */
export interface ImagesListByDevCenterNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByDevCenterNext operation. */
export type ImagesListByDevCenterNextResponse = ImageListResult;

/** Optional parameters. */
export interface ImagesListByGalleryNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByGalleryNext operation. */
export type ImagesListByGalleryNextResponse = ImageListResult;

/** Optional parameters. */
export interface ImagesListByProjectNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByProjectNext operation. */
export type ImagesListByProjectNextResponse = ImageListResult;

/** Optional parameters. */
export interface ImageVersionsListByImageOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByImage operation. */
export type ImageVersionsListByImageResponse = ImageVersionListResult;

/** Optional parameters. */
export interface ImageVersionsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ImageVersionsGetResponse = ImageVersion;

/** Optional parameters. */
export interface ImageVersionsListByProjectOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByProject operation. */
export type ImageVersionsListByProjectResponse = ImageVersionListResult;

/** Optional parameters. */
export interface ImageVersionsGetByProjectOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getByProject operation. */
export type ImageVersionsGetByProjectResponse = ImageVersion;

/** Optional parameters. */
export interface ImageVersionsListByImageNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByImageNext operation. */
export type ImageVersionsListByImageNextResponse = ImageVersionListResult;

/** Optional parameters. */
export interface ImageVersionsListByProjectNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByProjectNext operation. */
export type ImageVersionsListByProjectNextResponse = ImageVersionListResult;

/** Optional parameters. */
export interface SkusListByProjectOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByProject operation. */
export type SkusListByProjectResponse = SkuListResult;

/** Optional parameters. */
export interface SkusListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {
  /** The maximum number of resources to return from the operation. Example: '$top=10'. */
  top?: number;
}

/** Contains response data for the listBySubscription operation. */
export type SkusListBySubscriptionResponse = SkuListResult;

/** Optional parameters. */
export interface SkusListByProjectNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByProjectNext operation. */
export type SkusListByProjectNextResponse = SkuListResult;

/** Optional parameters. */
export interface SkusListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type SkusListBySubscriptionNextResponse = SkuListResult;

/** Optional parameters. */
export interface CatalogsListByDevCenterOptionalParams
  extends coreClient.OperationOptions {
  /** The maximum number of resources to return from the operation. Example: '$top=10'. */
  top?: number;
}

/** Contains response data for the listByDevCenter operation. */
export type CatalogsListByDevCenterResponse = CatalogListResult;

/** Optional parameters. */
export interface CatalogsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type CatalogsGetResponse = Catalog;

/** Optional parameters. */
export interface CatalogsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type CatalogsCreateOrUpdateResponse = Catalog;

/** Optional parameters. */
export interface CatalogsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type CatalogsUpdateResponse = Catalog;

/** Optional parameters. */
export interface CatalogsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type CatalogsDeleteResponse = CatalogsDeleteHeaders;

/** Optional parameters. */
export interface CatalogsGetSyncErrorDetailsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getSyncErrorDetails operation. */
export type CatalogsGetSyncErrorDetailsResponse = SyncErrorDetails;

/** Optional parameters. */
export interface CatalogsSyncOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the sync operation. */
export type CatalogsSyncResponse = CatalogsSyncHeaders;

/** Optional parameters. */
export interface CatalogsConnectOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the connect operation. */
export type CatalogsConnectResponse = CatalogsConnectHeaders;

/** Optional parameters. */
export interface CatalogsListByDevCenterNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByDevCenterNext operation. */
export type CatalogsListByDevCenterNextResponse = CatalogListResult;

/** Optional parameters. */
export interface EnvironmentTypesListByDevCenterOptionalParams
  extends coreClient.OperationOptions {
  /** The maximum number of resources to return from the operation. Example: '$top=10'. */
  top?: number;
}

/** Contains response data for the listByDevCenter operation. */
export type EnvironmentTypesListByDevCenterResponse = EnvironmentTypeListResult;

/** Optional parameters. */
export interface EnvironmentTypesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type EnvironmentTypesGetResponse = EnvironmentType;

/** Optional parameters. */
export interface EnvironmentTypesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type EnvironmentTypesCreateOrUpdateResponse = EnvironmentType;

/** Optional parameters. */
export interface EnvironmentTypesUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type EnvironmentTypesUpdateResponse = EnvironmentType;

/** Optional parameters. */
export interface EnvironmentTypesDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface EnvironmentTypesListByDevCenterNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByDevCenterNext operation. */
export type EnvironmentTypesListByDevCenterNextResponse =
  EnvironmentTypeListResult;

/** Optional parameters. */
export interface ProjectAllowedEnvironmentTypesListOptionalParams
  extends coreClient.OperationOptions {
  /** The maximum number of resources to return from the operation. Example: '$top=10'. */
  top?: number;
}

/** Contains response data for the list operation. */
export type ProjectAllowedEnvironmentTypesListResponse =
  AllowedEnvironmentTypeListResult;

/** Optional parameters. */
export interface ProjectAllowedEnvironmentTypesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ProjectAllowedEnvironmentTypesGetResponse = AllowedEnvironmentType;

/** Optional parameters. */
export interface ProjectAllowedEnvironmentTypesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type ProjectAllowedEnvironmentTypesListNextResponse =
  AllowedEnvironmentTypeListResult;

/** Optional parameters. */
export interface ProjectEnvironmentTypesListOptionalParams
  extends coreClient.OperationOptions {
  /** The maximum number of resources to return from the operation. Example: '$top=10'. */
  top?: number;
}

/** Contains response data for the list operation. */
export type ProjectEnvironmentTypesListResponse =
  ProjectEnvironmentTypeListResult;

/** Optional parameters. */
export interface ProjectEnvironmentTypesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ProjectEnvironmentTypesGetResponse = ProjectEnvironmentType;

/** Optional parameters. */
export interface ProjectEnvironmentTypesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type ProjectEnvironmentTypesCreateOrUpdateResponse =
  ProjectEnvironmentType;

/** Optional parameters. */
export interface ProjectEnvironmentTypesUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type ProjectEnvironmentTypesUpdateResponse = ProjectEnvironmentType;

/** Optional parameters. */
export interface ProjectEnvironmentTypesDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ProjectEnvironmentTypesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type ProjectEnvironmentTypesListNextResponse =
  ProjectEnvironmentTypeListResult;

/** Optional parameters. */
export interface DevBoxDefinitionsListByDevCenterOptionalParams
  extends coreClient.OperationOptions {
  /** The maximum number of resources to return from the operation. Example: '$top=10'. */
  top?: number;
}

/** Contains response data for the listByDevCenter operation. */
export type DevBoxDefinitionsListByDevCenterResponse =
  DevBoxDefinitionListResult;

/** Optional parameters. */
export interface DevBoxDefinitionsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type DevBoxDefinitionsGetResponse = DevBoxDefinition;

/** Optional parameters. */
export interface DevBoxDefinitionsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type DevBoxDefinitionsCreateOrUpdateResponse = DevBoxDefinition;

/** Optional parameters. */
export interface DevBoxDefinitionsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type DevBoxDefinitionsUpdateResponse = DevBoxDefinition;

/** Optional parameters. */
export interface DevBoxDefinitionsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type DevBoxDefinitionsDeleteResponse = DevBoxDefinitionsDeleteHeaders;

/** Optional parameters. */
export interface DevBoxDefinitionsListByProjectOptionalParams
  extends coreClient.OperationOptions {
  /** The maximum number of resources to return from the operation. Example: '$top=10'. */
  top?: number;
}

/** Contains response data for the listByProject operation. */
export type DevBoxDefinitionsListByProjectResponse = DevBoxDefinitionListResult;

/** Optional parameters. */
export interface DevBoxDefinitionsGetByProjectOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getByProject operation. */
export type DevBoxDefinitionsGetByProjectResponse = DevBoxDefinition;

/** Optional parameters. */
export interface DevBoxDefinitionsListByDevCenterNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByDevCenterNext operation. */
export type DevBoxDefinitionsListByDevCenterNextResponse =
  DevBoxDefinitionListResult;

/** Optional parameters. */
export interface DevBoxDefinitionsListByProjectNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByProjectNext operation. */
export type DevBoxDefinitionsListByProjectNextResponse =
  DevBoxDefinitionListResult;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationListResult;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export interface OperationStatusesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type OperationStatusesGetResponse = OperationStatus;

/** Optional parameters. */
export interface UsagesListByLocationOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByLocation operation. */
export type UsagesListByLocationResponse = ListUsagesResult;

/** Optional parameters. */
export interface UsagesListByLocationNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByLocationNext operation. */
export type UsagesListByLocationNextResponse = ListUsagesResult;

/** Optional parameters. */
export interface CheckNameAvailabilityExecuteOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the execute operation. */
export type CheckNameAvailabilityExecuteResponse =
  CheckNameAvailabilityResponse;

/** Optional parameters. */
export interface CheckScopedNameAvailabilityExecuteOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the execute operation. */
export type CheckScopedNameAvailabilityExecuteResponse =
  CheckNameAvailabilityResponse;

/** Optional parameters. */
export interface CustomizationTasksListByCatalogOptionalParams
  extends coreClient.OperationOptions {
  /** The maximum number of resources to return from the operation. Example: '$top=10'. */
  top?: number;
}

/** Contains response data for the listByCatalog operation. */
export type CustomizationTasksListByCatalogResponse =
  CustomizationTaskListResult;

/** Optional parameters. */
export interface CustomizationTasksGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type CustomizationTasksGetResponse = CustomizationTask;

/** Optional parameters. */
export interface CustomizationTasksGetErrorDetailsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getErrorDetails operation. */
export type CustomizationTasksGetErrorDetailsResponse =
  CatalogResourceValidationErrorDetails;

/** Optional parameters. */
export interface CustomizationTasksListByCatalogNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByCatalogNext operation. */
export type CustomizationTasksListByCatalogNextResponse =
  CustomizationTaskListResult;

/** Optional parameters. */
export interface DevCenterCatalogImageDefinitionsListByDevCenterCatalogOptionalParams
  extends coreClient.OperationOptions {
  /** The maximum number of resources to return from the operation. Example: '$top=10'. */
  top?: number;
}

/** Contains response data for the listByDevCenterCatalog operation. */
export type DevCenterCatalogImageDefinitionsListByDevCenterCatalogResponse =
  ImageDefinitionListResult;

/** Optional parameters. */
export interface DevCenterCatalogImageDefinitionsGetByDevCenterCatalogOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getByDevCenterCatalog operation. */
export type DevCenterCatalogImageDefinitionsGetByDevCenterCatalogResponse =
  ImageDefinition;

/** Optional parameters. */
export interface DevCenterCatalogImageDefinitionsGetErrorDetailsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getErrorDetails operation. */
export type DevCenterCatalogImageDefinitionsGetErrorDetailsResponse =
  CatalogResourceValidationErrorDetails;

/** Optional parameters. */
export interface DevCenterCatalogImageDefinitionsBuildImageOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the buildImage operation. */
export type DevCenterCatalogImageDefinitionsBuildImageResponse =
  DevCenterCatalogImageDefinitionsBuildImageHeaders;

/** Optional parameters. */
export interface DevCenterCatalogImageDefinitionsListByDevCenterCatalogNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByDevCenterCatalogNext operation. */
export type DevCenterCatalogImageDefinitionsListByDevCenterCatalogNextResponse =
  ImageDefinitionListResult;

/** Optional parameters. */
export interface DevCenterCatalogImageDefinitionBuildsListByImageDefinitionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByImageDefinition operation. */
export type DevCenterCatalogImageDefinitionBuildsListByImageDefinitionResponse =
  ImageDefinitionBuildListResult;

/** Optional parameters. */
export interface DevCenterCatalogImageDefinitionBuildsListByImageDefinitionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByImageDefinitionNext operation. */
export type DevCenterCatalogImageDefinitionBuildsListByImageDefinitionNextResponse =
  ImageDefinitionBuildListResult;

/** Optional parameters. */
export interface DevCenterCatalogImageDefinitionBuildGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type DevCenterCatalogImageDefinitionBuildGetResponse =
  ImageDefinitionBuild;

/** Optional parameters. */
export interface DevCenterCatalogImageDefinitionBuildCancelOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the cancel operation. */
export type DevCenterCatalogImageDefinitionBuildCancelResponse =
  DevCenterCatalogImageDefinitionBuildCancelHeaders;

/** Optional parameters. */
export interface DevCenterCatalogImageDefinitionBuildGetBuildDetailsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getBuildDetails operation. */
export type DevCenterCatalogImageDefinitionBuildGetBuildDetailsResponse =
  ImageDefinitionBuildDetails;

/** Optional parameters. */
export interface ProjectCatalogImageDefinitionsListByProjectCatalogOptionalParams
  extends coreClient.OperationOptions {
  /** The maximum number of resources to return from the operation. Example: '$top=10'. */
  top?: number;
}

/** Contains response data for the listByProjectCatalog operation. */
export type ProjectCatalogImageDefinitionsListByProjectCatalogResponse =
  ImageDefinitionListResult;

/** Optional parameters. */
export interface ProjectCatalogImageDefinitionsGetByProjectCatalogOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getByProjectCatalog operation. */
export type ProjectCatalogImageDefinitionsGetByProjectCatalogResponse =
  ImageDefinition;

/** Optional parameters. */
export interface ProjectCatalogImageDefinitionsGetErrorDetailsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getErrorDetails operation. */
export type ProjectCatalogImageDefinitionsGetErrorDetailsResponse =
  CatalogResourceValidationErrorDetails;

/** Optional parameters. */
export interface ProjectCatalogImageDefinitionsBuildImageOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the buildImage operation. */
export type ProjectCatalogImageDefinitionsBuildImageResponse =
  ProjectCatalogImageDefinitionsBuildImageHeaders;

/** Optional parameters. */
export interface ProjectCatalogImageDefinitionsListByProjectCatalogNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByProjectCatalogNext operation. */
export type ProjectCatalogImageDefinitionsListByProjectCatalogNextResponse =
  ImageDefinitionListResult;

/** Optional parameters. */
export interface ProjectCatalogImageDefinitionBuildsListByImageDefinitionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByImageDefinition operation. */
export type ProjectCatalogImageDefinitionBuildsListByImageDefinitionResponse =
  ImageDefinitionBuildListResult;

/** Optional parameters. */
export interface ProjectCatalogImageDefinitionBuildsListByImageDefinitionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByImageDefinitionNext operation. */
export type ProjectCatalogImageDefinitionBuildsListByImageDefinitionNextResponse =
  ImageDefinitionBuildListResult;

/** Optional parameters. */
export interface ProjectCatalogImageDefinitionBuildGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ProjectCatalogImageDefinitionBuildGetResponse =
  ImageDefinitionBuild;

/** Optional parameters. */
export interface ProjectCatalogImageDefinitionBuildCancelOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the cancel operation. */
export type ProjectCatalogImageDefinitionBuildCancelResponse =
  ProjectCatalogImageDefinitionBuildCancelHeaders;

/** Optional parameters. */
export interface ProjectCatalogImageDefinitionBuildGetBuildDetailsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getBuildDetails operation. */
export type ProjectCatalogImageDefinitionBuildGetBuildDetailsResponse =
  ImageDefinitionBuildDetails;

/** Optional parameters. */
export interface PoolsListByProjectOptionalParams
  extends coreClient.OperationOptions {
  /** The maximum number of resources to return from the operation. Example: '$top=10'. */
  top?: number;
}

/** Contains response data for the listByProject operation. */
export type PoolsListByProjectResponse = PoolListResult;

/** Optional parameters. */
export interface PoolsGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type PoolsGetResponse = Pool;

/** Optional parameters. */
export interface PoolsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type PoolsCreateOrUpdateResponse = Pool;

/** Optional parameters. */
export interface PoolsUpdateOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type PoolsUpdateResponse = Pool;

/** Optional parameters. */
export interface PoolsDeleteOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type PoolsDeleteResponse = PoolsDeleteHeaders;

/** Optional parameters. */
export interface PoolsRunHealthChecksOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the runHealthChecks operation. */
export type PoolsRunHealthChecksResponse = PoolsRunHealthChecksHeaders;

/** Optional parameters. */
export interface PoolsListByProjectNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByProjectNext operation. */
export type PoolsListByProjectNextResponse = PoolListResult;

/** Optional parameters. */
export interface SchedulesListByPoolOptionalParams
  extends coreClient.OperationOptions {
  /** The maximum number of resources to return from the operation. Example: '$top=10'. */
  top?: number;
}

/** Contains response data for the listByPool operation. */
export type SchedulesListByPoolResponse = ScheduleListResult;

/** Optional parameters. */
export interface SchedulesGetOptionalParams
  extends coreClient.OperationOptions {
  /** The maximum number of resources to return from the operation. Example: '$top=10'. */
  top?: number;
}

/** Contains response data for the get operation. */
export type SchedulesGetResponse = Schedule;

/** Optional parameters. */
export interface SchedulesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** The maximum number of resources to return from the operation. Example: '$top=10'. */
  top?: number;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type SchedulesCreateOrUpdateResponse = Schedule;

/** Optional parameters. */
export interface SchedulesUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** The maximum number of resources to return from the operation. Example: '$top=10'. */
  top?: number;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type SchedulesUpdateResponse = Schedule;

/** Optional parameters. */
export interface SchedulesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** The maximum number of resources to return from the operation. Example: '$top=10'. */
  top?: number;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type SchedulesDeleteResponse = SchedulesDeleteHeaders;

/** Optional parameters. */
export interface SchedulesListByPoolNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByPoolNext operation. */
export type SchedulesListByPoolNextResponse = ScheduleListResult;

/** Optional parameters. */
export interface NetworkConnectionsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {
  /** The maximum number of resources to return from the operation. Example: '$top=10'. */
  top?: number;
}

/** Contains response data for the listBySubscription operation. */
export type NetworkConnectionsListBySubscriptionResponse =
  NetworkConnectionListResult;

/** Optional parameters. */
export interface NetworkConnectionsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {
  /** The maximum number of resources to return from the operation. Example: '$top=10'. */
  top?: number;
}

/** Contains response data for the listByResourceGroup operation. */
export type NetworkConnectionsListByResourceGroupResponse =
  NetworkConnectionListResult;

/** Optional parameters. */
export interface NetworkConnectionsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type NetworkConnectionsGetResponse = NetworkConnection;

/** Optional parameters. */
export interface NetworkConnectionsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type NetworkConnectionsCreateOrUpdateResponse = NetworkConnection;

/** Optional parameters. */
export interface NetworkConnectionsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type NetworkConnectionsUpdateResponse = NetworkConnection;

/** Optional parameters. */
export interface NetworkConnectionsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type NetworkConnectionsDeleteResponse = NetworkConnectionsDeleteHeaders;

/** Optional parameters. */
export interface NetworkConnectionsListHealthDetailsOptionalParams
  extends coreClient.OperationOptions {
  /** The maximum number of resources to return from the operation. Example: '$top=10'. */
  top?: number;
}

/** Contains response data for the listHealthDetails operation. */
export type NetworkConnectionsListHealthDetailsResponse =
  HealthCheckStatusDetailsListResult;

/** Optional parameters. */
export interface NetworkConnectionsGetHealthDetailsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getHealthDetails operation. */
export type NetworkConnectionsGetHealthDetailsResponse =
  HealthCheckStatusDetails;

/** Optional parameters. */
export interface NetworkConnectionsRunHealthChecksOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the runHealthChecks operation. */
export type NetworkConnectionsRunHealthChecksResponse =
  NetworkConnectionsRunHealthChecksHeaders;

/** Optional parameters. */
export interface NetworkConnectionsListOutboundNetworkDependenciesEndpointsOptionalParams
  extends coreClient.OperationOptions {
  /** The maximum number of resources to return from the operation. Example: '$top=10'. */
  top?: number;
}

/** Contains response data for the listOutboundNetworkDependenciesEndpoints operation. */
export type NetworkConnectionsListOutboundNetworkDependenciesEndpointsResponse =
  OutboundEnvironmentEndpointCollection;

/** Optional parameters. */
export interface NetworkConnectionsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type NetworkConnectionsListBySubscriptionNextResponse =
  NetworkConnectionListResult;

/** Optional parameters. */
export interface NetworkConnectionsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type NetworkConnectionsListByResourceGroupNextResponse =
  NetworkConnectionListResult;

/** Optional parameters. */
export interface NetworkConnectionsListOutboundNetworkDependenciesEndpointsNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listOutboundNetworkDependenciesEndpointsNext operation. */
export type NetworkConnectionsListOutboundNetworkDependenciesEndpointsNextResponse =
  OutboundEnvironmentEndpointCollection;

/** Optional parameters. */
export interface DevCenterClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
