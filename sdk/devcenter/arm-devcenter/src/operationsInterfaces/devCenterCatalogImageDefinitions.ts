/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  ImageDefinition,
  DevCenterCatalogImageDefinitionsListByDevCenterCatalogOptionalParams,
  DevCenterCatalogImageDefinitionsGetByDevCenterCatalogOptionalParams,
  DevCenterCatalogImageDefinitionsGetByDevCenterCatalogResponse,
  DevCenterCatalogImageDefinitionsGetErrorDetailsOptionalParams,
  DevCenterCatalogImageDefinitionsGetErrorDetailsResponse,
  DevCenterCatalogImageDefinitionsBuildImageOptionalParams,
  DevCenterCatalogImageDefinitionsBuildImageResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a DevCenterCatalogImageDefinitions. */
export interface DevCenterCatalogImageDefinitions {
  /**
   * List Image Definitions in the catalog.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param devCenterName The name of the devcenter.
   * @param catalogName The name of the Catalog.
   * @param options The options parameters.
   */
  listByDevCenterCatalog(
    resourceGroupName: string,
    devCenterName: string,
    catalogName: string,
    options?: DevCenterCatalogImageDefinitionsListByDevCenterCatalogOptionalParams,
  ): PagedAsyncIterableIterator<ImageDefinition>;
  /**
   * Gets an Image Definition from the catalog
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param devCenterName The name of the devcenter.
   * @param catalogName The name of the Catalog.
   * @param imageDefinitionName The name of the Image Definition.
   * @param options The options parameters.
   */
  getByDevCenterCatalog(
    resourceGroupName: string,
    devCenterName: string,
    catalogName: string,
    imageDefinitionName: string,
    options?: DevCenterCatalogImageDefinitionsGetByDevCenterCatalogOptionalParams,
  ): Promise<DevCenterCatalogImageDefinitionsGetByDevCenterCatalogResponse>;
  /**
   * Gets Image Definition error details
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param devCenterName The name of the devcenter.
   * @param catalogName The name of the Catalog.
   * @param imageDefinitionName The name of the Image Definition.
   * @param options The options parameters.
   */
  getErrorDetails(
    resourceGroupName: string,
    devCenterName: string,
    catalogName: string,
    imageDefinitionName: string,
    options?: DevCenterCatalogImageDefinitionsGetErrorDetailsOptionalParams,
  ): Promise<DevCenterCatalogImageDefinitionsGetErrorDetailsResponse>;
  /**
   * Builds an image for the specified Image Definition.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param devCenterName The name of the devcenter.
   * @param catalogName The name of the Catalog.
   * @param imageDefinitionName The name of the Image Definition.
   * @param options The options parameters.
   */
  beginBuildImage(
    resourceGroupName: string,
    devCenterName: string,
    catalogName: string,
    imageDefinitionName: string,
    options?: DevCenterCatalogImageDefinitionsBuildImageOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<DevCenterCatalogImageDefinitionsBuildImageResponse>,
      DevCenterCatalogImageDefinitionsBuildImageResponse
    >
  >;
  /**
   * Builds an image for the specified Image Definition.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param devCenterName The name of the devcenter.
   * @param catalogName The name of the Catalog.
   * @param imageDefinitionName The name of the Image Definition.
   * @param options The options parameters.
   */
  beginBuildImageAndWait(
    resourceGroupName: string,
    devCenterName: string,
    catalogName: string,
    imageDefinitionName: string,
    options?: DevCenterCatalogImageDefinitionsBuildImageOptionalParams,
  ): Promise<DevCenterCatalogImageDefinitionsBuildImageResponse>;
}
